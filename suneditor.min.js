!function(e){var t={};function n(i){if(t[i])return t[i].exports;var l=t[i]={i:i,l:!1,exports:{}};return e[i].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(i,l,function(t){return e[t]}.bind(null,l));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="XJR1")}({"1kvd":function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"dialog",add:function(e){const t=e.context;t.dialog={kind:"",updateModal:!1,_closeSignal:!1};let n=e.util.createElement("DIV");n.className="se-dialog sun-editor-common";let i=e.util.createElement("DIV");i.className="se-dialog-back",i.style.display="none";let l=e.util.createElement("DIV");l.className="se-dialog-inner",l.style.display="none",n.appendChild(i),n.appendChild(l),t.dialog.modalArea=n,t.dialog.back=i,t.dialog.modal=l,t.dialog.modal.addEventListener("mousedown",this._onMouseDown_dialog.bind(e)),t.dialog.modal.addEventListener("click",this._onClick_dialog.bind(e)),t.element.relative.appendChild(n),n=null,i=null,l=null},_onMouseDown_dialog:function(e){/se-dialog-inner/.test(e.target.className)?this.context.dialog._closeSignal=!0:this.context.dialog._closeSignal=!1},_onClick_dialog:function(e){(/close/.test(e.target.getAttribute("data-command"))||this.context.dialog._closeSignal)&&this.plugins.dialog.close.call(this)},open:function(e,t){if(this.modalForm)return!1;this.plugins.dialog._bindClose&&(this._d.removeEventListener("keydown",this.plugins.dialog._bindClose),this.plugins.dialog._bindClose=null),this.plugins.dialog._bindClose=function(e){/27/.test(e.keyCode)&&this.plugins.dialog.close.call(this)}.bind(this),this._d.addEventListener("keydown",this.plugins.dialog._bindClose),this.context.dialog.updateModal=t,"full"===this.options.popupDisplay?this.context.dialog.modalArea.style.position="fixed":this.context.dialog.modalArea.style.position="absolute",this.context.dialog.kind=e,this.modalForm=this.context[e].modal;const n=this.context[e].focusElement;"function"==typeof this.plugins[e].on&&this.plugins[e].on.call(this,t),this.context.dialog.modalArea.style.display="block",this.context.dialog.back.style.display="block",this.context.dialog.modal.style.display="block",this.modalForm.style.display="block",n&&n.focus()},_bindClose:null,close:function(){this.plugins.dialog._bindClose&&(this._d.removeEventListener("keydown",this.plugins.dialog._bindClose),this.plugins.dialog._bindClose=null);const e=this.context.dialog.kind;this.modalForm.style.display="none",this.context.dialog.back.style.display="none",this.context.dialog.modalArea.style.display="none",this.context.dialog.updateModal=!1,"function"==typeof this.plugins[e].init&&this.plugins[e].init.call(this),this.context.dialog.kind="",this.modalForm=null,this.focus()}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"dialog",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},"3FqI":function(e,t,n){},JhlZ:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"fileBrowser",_xmlHttp:null,_loading:null,add:function(e){const t=e.context;t.fileBrowser={_closeSignal:!1,area:null,header:null,tagArea:null,body:null,list:null,tagElements:null,items:[],selectedTags:[],selectorHandler:null,contextPlugin:"",columnSize:4};let n=e.util.createElement("DIV");n.className="se-file-browser sun-editor-common";let i=e.util.createElement("DIV");i.className="se-file-browser-back";let l=e.util.createElement("DIV");l.className="se-file-browser-inner",l.innerHTML=this.set_browser(e),n.appendChild(i),n.appendChild(l),this._loading=n.querySelector(".se-loading-box"),t.fileBrowser.area=n,t.fileBrowser.header=l.querySelector(".se-file-browser-header"),t.fileBrowser.titleArea=l.querySelector(".se-file-browser-title"),t.fileBrowser.tagArea=l.querySelector(".se-file-browser-tags"),t.fileBrowser.body=l.querySelector(".se-file-browser-body"),t.fileBrowser.list=l.querySelector(".se-file-browser-list"),t.fileBrowser.tagArea.addEventListener("click",this.onClickTag.bind(e)),t.fileBrowser.list.addEventListener("click",this.onClickFile.bind(e)),l.addEventListener("mousedown",this._onMouseDown_browser.bind(e)),l.addEventListener("click",this._onClick_browser.bind(e)),t.element.relative.appendChild(n),n=null,i=null,l=null},set_browser:function(e){const t=e.lang;return'<div class="se-file-browser-content"><div class="se-file-browser-header"><button type="button" data-command="close" class="se-btn se-file-browser-close" class="close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-file-browser-title"></span><div class="se-file-browser-tags"></div></div><div class="se-file-browser-body"><div class="se-loading-box sun-editor-common"><div class="se-loading-effect"></div></div><div class="se-file-browser-list"></div></div></div>'},_onMouseDown_browser:function(e){/se-file-browser-inner/.test(e.target.className)?this.context.fileBrowser._closeSignal=!0:this.context.fileBrowser._closeSignal=!1},_onClick_browser:function(e){e.stopPropagation(),(/close/.test(e.target.getAttribute("data-command"))||this.context.fileBrowser._closeSignal)&&this.plugins.fileBrowser.close.call(this)},open:function(e,t){this.plugins.fileBrowser._bindClose&&(this._d.removeEventListener("keydown",this.plugins.fileBrowser._bindClose),this.plugins.fileBrowser._bindClose=null),this.plugins.fileBrowser._bindClose=function(e){/27/.test(e.keyCode)&&this.plugins.fileBrowser.close.call(this)}.bind(this),this._d.addEventListener("keydown",this.plugins.fileBrowser._bindClose);const n=this.context.fileBrowser;n.contextPlugin=e,n.selectorHandler=t;const i=this.context[e],l=i.listClass;this.util.hasClass(n.list,l)||(n.list.className="se-file-browser-list "+l),"full"===this.options.popupDisplay?n.area.style.position="fixed":n.area.style.position="absolute",n.titleArea.textContent=i.title,n.area.style.display="block",this.plugins.fileBrowser._drawFileList.call(this,this.context[e].url,this.context[e].header)},_bindClose:null,close:function(){const e=this.plugins.fileBrowser;e._xmlHttp&&e._xmlHttp.abort(),e._bindClose&&(this._d.removeEventListener("keydown",e._bindClose),e._bindClose=null);const t=this.context.fileBrowser;t.area.style.display="none",t.selectorHandler=null,t.selectedTags=[],t.items=[],t.list.innerHTML=t.tagArea.innerHTML=t.titleArea.textContent="","function"==typeof this.plugins[t.contextPlugin].init&&this.plugins[t.contextPlugin].init.call(this),t.contextPlugin=""},showBrowserLoading:function(){this._loading.style.display="block"},closeBrowserLoading:function(){this._loading.style.display="none"},_drawFileList:function(e,t){const n=this.plugins.fileBrowser,i=n._xmlHttp=this.util.getXMLHttpRequest();if(i.onreadystatechange=n._callBackGet.bind(this,i),i.open("get",e,!0),null!==t&&"object"==typeof t&&this._w.Object.keys(t).length>0)for(let e in t)i.setRequestHeader(e,t[e]);i.send(null),this.plugins.fileBrowser.showBrowserLoading()},_callBackGet:function(e){if(4===e.readyState)if(this.plugins.fileBrowser._xmlHttp=null,200===e.status)try{const t=JSON.parse(e.responseText);t.result.length>0?this.plugins.fileBrowser._drawListItem.call(this,t.result,!0):t.nullMessage&&(this.context.fileBrowser.list.innerHTML=t.nullMessage)}catch(e){throw Error('[SUNEDITOR.fileBrowser.drawList.fail] cause : "'+e.message+'"')}finally{this.plugins.fileBrowser.closeBrowserLoading(),this.context.fileBrowser.body.style.maxHeight=this._w.innerHeight-this.context.fileBrowser.header.offsetHeight-50+"px"}else if(this.plugins.fileBrowser.closeBrowserLoading(),0!==e.status){const t=e.responseText?JSON.parse(e.responseText):e,n="[SUNEDITOR.fileBrowser.get.serverException] status: "+e.status+", response: "+(t.errorMessage||e.responseText);throw Error(n)}},_drawListItem:function(e,t){const n=this.context.fileBrowser,i=this.context[n.contextPlugin],l=[],s=e.length,o=i.columnSize||n.columnSize,a=o<=1?1:Math.round(s/o)||1,r=i.itemTemplateHandler;let c="",u='<div class="se-file-item-column">',d=1;for(let n,i,h=0;h<s;h++)if(n=e[h],i=n.tag?"string"==typeof n.tag?n.tag.split(","):n.tag:[],i=n.tag=i.map((function(e){return e.trim()})),u+=r(n),(h+1)%a==0&&d<o&&h+1<s&&(d++,u+='</div><div class="se-file-item-column">'),t&&i.length>0)for(let e,t=0,n=i.length;t<n;t++)e=i[t],e&&-1===l.indexOf(e)&&(l.push(e),c+='<a title="'+e+'" aria-label="'+e+'">'+e+"</a>");u+="</div>",n.list.innerHTML=u,t&&(n.items=e,n.tagArea.innerHTML=c,n.tagElements=n.tagArea.querySelectorAll("A"))},onClickTag:function(e){const t=e.target;if(!this.util.isAnchor(t))return;const n=t.textContent,i=this.plugins.fileBrowser,l=this.context.fileBrowser,s=l.tagArea.querySelector('a[title="'+n+'"]'),o=l.selectedTags,a=o.indexOf(n);a>-1?(o.splice(a,1),this.util.removeClass(s,"on")):(o.push(n),this.util.addClass(s,"on")),i._drawListItem.call(this,0===o.length?l.items:l.items.filter((function(e){return e.tag.some((function(e){return o.indexOf(e)>-1}))})),!1)},onClickFile:function(e){e.preventDefault(),e.stopPropagation();const t=this.context.fileBrowser,n=t.list;let i=e.target,l=null;if(i!==n){for(;n!==i.parentNode&&(l=i.getAttribute("data-command"),!l);)i=i.parentNode;l&&((t.selectorHandler||this.context[t.contextPlugin].selectorHandler)(i,i.parentNode.querySelector(".__se__img_name").textContent),this.plugins.fileBrowser.close.call(this))}}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"fileBrowser",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},M55E:function(e,t,n){var i;/*! showdown v 2.1.0 - 21-04-2022 */
(function(){function l(e){"use strict";var t={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:"Remove only spaces, ' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids",type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,describe:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,describe:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,describe:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,describe:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,describe:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",describe:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,describe:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,describe:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,describe:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,describe:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,describe:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},ellipsis:{defaultValue:!0,describe:"Replaces three dots with the ellipsis unicode character",type:"boolean"},completeHTMLDocument:{defaultValue:!1,describe:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,describe:"Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,describe:"Split adjacent blockquote blocks",type:"boolean"}};if(!1===e)return JSON.parse(JSON.stringify(t));var n={};for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i].defaultValue);return n}var s={},o={},a={},r=l(!0),c="vanilla",u={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:l(!0),allOn:function(){"use strict";var e=l(!0),t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=!0);return t}()};function d(e,t){"use strict";var n=t?"Error in "+t+" extension->":"Error in unnamed extension",i={valid:!0,error:""};s.helper.isArray(e)||(e=[e]);for(var l=0;l<e.length;++l){var o=n+" sub-extension "+l+": ",a=e[l];if("object"!=typeof a)return i.valid=!1,i.error=o+"must be an object, but "+typeof a+" given",i;if(!s.helper.isString(a.type))return i.valid=!1,i.error=o+'property "type" must be a string, but '+typeof a.type+" given",i;var r=a.type=a.type.toLowerCase();if("language"===r&&(r=a.type="lang"),"html"===r&&(r=a.type="output"),"lang"!==r&&"output"!==r&&"listener"!==r)return i.valid=!1,i.error=o+"type "+r+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',i;if("listener"===r){if(s.helper.isUndefined(a.listeners))return i.valid=!1,i.error=o+'. Extensions of type "listener" must have a property called "listeners"',i}else if(s.helper.isUndefined(a.filter)&&s.helper.isUndefined(a.regex))return i.valid=!1,i.error=o+r+' extensions must define either a "regex" property or a "filter" method',i;if(a.listeners){if("object"!=typeof a.listeners)return i.valid=!1,i.error=o+'"listeners" property must be an object but '+typeof a.listeners+" given",i;for(var c in a.listeners)if(a.listeners.hasOwnProperty(c)&&"function"!=typeof a.listeners[c])return i.valid=!1,i.error=o+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+c+" must be a function but "+typeof a.listeners[c]+" given",i}if(a.filter){if("function"!=typeof a.filter)return i.valid=!1,i.error=o+'"filter" must be a function, but '+typeof a.filter+" given",i}else if(a.regex){if(s.helper.isString(a.regex)&&(a.regex=new RegExp(a.regex,"g")),!(a.regex instanceof RegExp))return i.valid=!1,i.error=o+'"regex" property must either be a string or a RegExp object, but '+typeof a.regex+" given",i;if(s.helper.isUndefined(a.replace))return i.valid=!1,i.error=o+'"regex" extensions must implement a replace string or function',i}}return i}function h(e,t){"use strict";return"¨E"+t.charCodeAt(0)+"E"}s.helper={},s.extensions={},s.setOption=function(e,t){"use strict";return r[e]=t,this},s.getOption=function(e){"use strict";return r[e]},s.getOptions=function(){"use strict";return r},s.resetOptions=function(){"use strict";r=l(!0)},s.setFlavor=function(e){"use strict";if(!u.hasOwnProperty(e))throw Error(e+" flavor was not found");s.resetOptions();var t=u[e];for(var n in c=e,t)t.hasOwnProperty(n)&&(r[n]=t[n])},s.getFlavor=function(){"use strict";return c},s.getFlavorOptions=function(e){"use strict";if(u.hasOwnProperty(e))return u[e]},s.getDefaultOptions=function(e){"use strict";return l(e)},s.subParser=function(e,t){"use strict";if(s.helper.isString(e)){if(void 0===t){if(o.hasOwnProperty(e))return o[e];throw Error("SubParser named "+e+" not registered!")}o[e]=t}},s.extension=function(e,t){"use strict";if(!s.helper.isString(e))throw Error("Extension 'name' must be a string");if(e=s.helper.stdExtName(e),s.helper.isUndefined(t)){if(!a.hasOwnProperty(e))throw Error("Extension named "+e+" is not registered!");return a[e]}"function"==typeof t&&(t=t()),s.helper.isArray(t)||(t=[t]);var n=d(t,e);if(!n.valid)throw Error(n.error);a[e]=t},s.getAllExtensions=function(){"use strict";return a},s.removeExtension=function(e){"use strict";delete a[e]},s.resetExtensions=function(){"use strict";a={}},s.validateExtension=function(e){"use strict";var t=d(e,null);return!!t.valid||(console.warn(t.error),!1)},s.hasOwnProperty("helper")||(s.helper={}),s.helper.isString=function(e){"use strict";return"string"==typeof e||e instanceof String},s.helper.isFunction=function(e){"use strict";return e&&"[object Function]"==={}.toString.call(e)},s.helper.isArray=function(e){"use strict";return Array.isArray(e)},s.helper.isUndefined=function(e){"use strict";return void 0===e},s.helper.forEach=function(e,t){"use strict";if(s.helper.isUndefined(e))throw new Error("obj param is required");if(s.helper.isUndefined(t))throw new Error("callback param is required");if(!s.helper.isFunction(t))throw new Error("callback param must be a function/closure");if("function"==typeof e.forEach)e.forEach(t);else if(s.helper.isArray(e))for(var n=0;n<e.length;n++)t(e[n],n,e);else{if("object"!=typeof e)throw new Error("obj does not seem to be an array or an iterable object");for(var i in e)e.hasOwnProperty(i)&&t(e[i],i,e)}},s.helper.stdExtName=function(e){"use strict";return e.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()},s.helper.escapeCharactersCallback=h,s.helper.escapeCharacters=function(e,t,n){"use strict";var i="(["+t.replace(/([\[\]\\])/g,"\\$1")+"])";n&&(i="\\\\"+i);var l=new RegExp(i,"g");return e=e.replace(l,h)},s.helper.unescapeHTMLEntities=function(e){"use strict";return e.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var p=function(e,t,n,i){"use strict";var l,s,o,a,r,c=i||"",u=c.indexOf("g")>-1,d=new RegExp(t+"|"+n,"g"+c.replace(/g/g,"")),h=new RegExp(t,c.replace(/g/g,"")),p=[];do{for(l=0;o=d.exec(e);)if(h.test(o[0]))l++||(a=(s=d.lastIndex)-o[0].length);else if(l&&!--l){r=o.index+o[0].length;var g={left:{start:a,end:s},match:{start:s,end:o.index},right:{start:o.index,end:r},wholeMatch:{start:a,end:r}};if(p.push(g),!u)return p}}while(l&&(d.lastIndex=s));return p};s.helper.matchRecursiveRegExp=function(e,t,n,i){"use strict";for(var l=p(e,t,n,i),s=[],o=0;o<l.length;++o)s.push([e.slice(l[o].wholeMatch.start,l[o].wholeMatch.end),e.slice(l[o].match.start,l[o].match.end),e.slice(l[o].left.start,l[o].left.end),e.slice(l[o].right.start,l[o].right.end)]);return s},s.helper.replaceRecursiveRegExp=function(e,t,n,i,l){"use strict";if(!s.helper.isFunction(t)){var o=t;t=function(){return o}}var a=p(e,n,i,l),r=e,c=a.length;if(c>0){var u=[];0!==a[0].wholeMatch.start&&u.push(e.slice(0,a[0].wholeMatch.start));for(var d=0;d<c;++d)u.push(t(e.slice(a[d].wholeMatch.start,a[d].wholeMatch.end),e.slice(a[d].match.start,a[d].match.end),e.slice(a[d].left.start,a[d].left.end),e.slice(a[d].right.start,a[d].right.end))),d<c-1&&u.push(e.slice(a[d].wholeMatch.end,a[d+1].wholeMatch.start));a[c-1].wholeMatch.end<e.length&&u.push(e.slice(a[c-1].wholeMatch.end)),r=u.join("")}return r},s.helper.regexIndexOf=function(e,t,n){"use strict";if(!s.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(t instanceof RegExp==!1)throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var i=e.substring(n||0).search(t);return i>=0?i+(n||0):i},s.helper.splitAtIndex=function(e,t){"use strict";if(!s.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[e.substring(0,t),e.substring(t)]},s.helper.encodeEmailAddress=function(e){"use strict";var t=[function(e){return"&#"+e.charCodeAt(0)+";"},function(e){return"&#x"+e.charCodeAt(0).toString(16)+";"},function(e){return e}];return e=e.replace(/./g,(function(e){if("@"===e)e=t[Math.floor(2*Math.random())](e);else{var n=Math.random();e=n>.9?t[2](e):n>.45?t[1](e):t[0](e)}return e}))},s.helper.padEnd=function(e,t,n){"use strict";return t>>=0,n=String(n||" "),e.length>t?String(e):((t-=e.length)>n.length&&(n+=n.repeat(t/n.length)),String(e)+n.slice(0,t))},"undefined"==typeof console&&(console={warn:function(e){"use strict";alert(e)},log:function(e){"use strict";alert(e)},error:function(e){"use strict";throw e}}),s.helper.regexes={asteriskDashAndColon:/([*_:~])/g},s.helper.emojis={"+1":"👍","-1":"👎",100:"💯",1234:"🔢","1st_place_medal":"🥇","2nd_place_medal":"🥈","3rd_place_medal":"🥉","8ball":"🎱",a:"🅰️",ab:"🆎",abc:"🔤",abcd:"🔡",accept:"🉑",aerial_tramway:"🚡",airplane:"✈️",alarm_clock:"⏰",alembic:"⚗️",alien:"👽",ambulance:"🚑",amphora:"🏺",anchor:"⚓️",angel:"👼",anger:"💢",angry:"😠",anguished:"😧",ant:"🐜",apple:"🍎",aquarius:"♒️",aries:"♈️",arrow_backward:"◀️",arrow_double_down:"⏬",arrow_double_up:"⏫",arrow_down:"⬇️",arrow_down_small:"🔽",arrow_forward:"▶️",arrow_heading_down:"⤵️",arrow_heading_up:"⤴️",arrow_left:"⬅️",arrow_lower_left:"↙️",arrow_lower_right:"↘️",arrow_right:"➡️",arrow_right_hook:"↪️",arrow_up:"⬆️",arrow_up_down:"↕️",arrow_up_small:"🔼",arrow_upper_left:"↖️",arrow_upper_right:"↗️",arrows_clockwise:"🔃",arrows_counterclockwise:"🔄",art:"🎨",articulated_lorry:"🚛",artificial_satellite:"🛰",astonished:"😲",athletic_shoe:"👟",atm:"🏧",atom_symbol:"⚛️",avocado:"🥑",b:"🅱️",baby:"👶",baby_bottle:"🍼",baby_chick:"🐤",baby_symbol:"🚼",back:"🔙",bacon:"🥓",badminton:"🏸",baggage_claim:"🛄",baguette_bread:"🥖",balance_scale:"⚖️",balloon:"🎈",ballot_box:"🗳",ballot_box_with_check:"☑️",bamboo:"🎍",banana:"🍌",bangbang:"‼️",bank:"🏦",bar_chart:"📊",barber:"💈",baseball:"⚾️",basketball:"🏀",basketball_man:"⛹️",basketball_woman:"⛹️&zwj;♀️",bat:"🦇",bath:"🛀",bathtub:"🛁",battery:"🔋",beach_umbrella:"🏖",bear:"🐻",bed:"🛏",bee:"🐝",beer:"🍺",beers:"🍻",beetle:"🐞",beginner:"🔰",bell:"🔔",bellhop_bell:"🛎",bento:"🍱",biking_man:"🚴",bike:"🚲",biking_woman:"🚴&zwj;♀️",bikini:"👙",biohazard:"☣️",bird:"🐦",birthday:"🎂",black_circle:"⚫️",black_flag:"🏴",black_heart:"🖤",black_joker:"🃏",black_large_square:"⬛️",black_medium_small_square:"◾️",black_medium_square:"◼️",black_nib:"✒️",black_small_square:"▪️",black_square_button:"🔲",blonde_man:"👱",blonde_woman:"👱&zwj;♀️",blossom:"🌼",blowfish:"🐡",blue_book:"📘",blue_car:"🚙",blue_heart:"💙",blush:"😊",boar:"🐗",boat:"⛵️",bomb:"💣",book:"📖",bookmark:"🔖",bookmark_tabs:"📑",books:"📚",boom:"💥",boot:"👢",bouquet:"💐",bowing_man:"🙇",bow_and_arrow:"🏹",bowing_woman:"🙇&zwj;♀️",bowling:"🎳",boxing_glove:"🥊",boy:"👦",bread:"🍞",bride_with_veil:"👰",bridge_at_night:"🌉",briefcase:"💼",broken_heart:"💔",bug:"🐛",building_construction:"🏗",bulb:"💡",bullettrain_front:"🚅",bullettrain_side:"🚄",burrito:"🌯",bus:"🚌",business_suit_levitating:"🕴",busstop:"🚏",bust_in_silhouette:"👤",busts_in_silhouette:"👥",butterfly:"🦋",cactus:"🌵",cake:"🍰",calendar:"📆",call_me_hand:"🤙",calling:"📲",camel:"🐫",camera:"📷",camera_flash:"📸",camping:"🏕",cancer:"♋️",candle:"🕯",candy:"🍬",canoe:"🛶",capital_abcd:"🔠",capricorn:"♑️",car:"🚗",card_file_box:"🗃",card_index:"📇",card_index_dividers:"🗂",carousel_horse:"🎠",carrot:"🥕",cat:"🐱",cat2:"🐈",cd:"💿",chains:"⛓",champagne:"🍾",chart:"💹",chart_with_downwards_trend:"📉",chart_with_upwards_trend:"📈",checkered_flag:"🏁",cheese:"🧀",cherries:"🍒",cherry_blossom:"🌸",chestnut:"🌰",chicken:"🐔",children_crossing:"🚸",chipmunk:"🐿",chocolate_bar:"🍫",christmas_tree:"🎄",church:"⛪️",cinema:"🎦",circus_tent:"🎪",city_sunrise:"🌇",city_sunset:"🌆",cityscape:"🏙",cl:"🆑",clamp:"🗜",clap:"👏",clapper:"🎬",classical_building:"🏛",clinking_glasses:"🥂",clipboard:"📋",clock1:"🕐",clock10:"🕙",clock1030:"🕥",clock11:"🕚",clock1130:"🕦",clock12:"🕛",clock1230:"🕧",clock130:"🕜",clock2:"🕑",clock230:"🕝",clock3:"🕒",clock330:"🕞",clock4:"🕓",clock430:"🕟",clock5:"🕔",clock530:"🕠",clock6:"🕕",clock630:"🕡",clock7:"🕖",clock730:"🕢",clock8:"🕗",clock830:"🕣",clock9:"🕘",clock930:"🕤",closed_book:"📕",closed_lock_with_key:"🔐",closed_umbrella:"🌂",cloud:"☁️",cloud_with_lightning:"🌩",cloud_with_lightning_and_rain:"⛈",cloud_with_rain:"🌧",cloud_with_snow:"🌨",clown_face:"🤡",clubs:"♣️",cocktail:"🍸",coffee:"☕️",coffin:"⚰️",cold_sweat:"😰",comet:"☄️",computer:"💻",computer_mouse:"🖱",confetti_ball:"🎊",confounded:"😖",confused:"😕",congratulations:"㊗️",construction:"🚧",construction_worker_man:"👷",construction_worker_woman:"👷&zwj;♀️",control_knobs:"🎛",convenience_store:"🏪",cookie:"🍪",cool:"🆒",policeman:"👮",copyright:"©️",corn:"🌽",couch_and_lamp:"🛋",couple:"👫",couple_with_heart_woman_man:"💑",couple_with_heart_man_man:"👨&zwj;❤️&zwj;👨",couple_with_heart_woman_woman:"👩&zwj;❤️&zwj;👩",couplekiss_man_man:"👨&zwj;❤️&zwj;💋&zwj;👨",couplekiss_man_woman:"💏",couplekiss_woman_woman:"👩&zwj;❤️&zwj;💋&zwj;👩",cow:"🐮",cow2:"🐄",cowboy_hat_face:"🤠",crab:"🦀",crayon:"🖍",credit_card:"💳",crescent_moon:"🌙",cricket:"🏏",crocodile:"🐊",croissant:"🥐",crossed_fingers:"🤞",crossed_flags:"🎌",crossed_swords:"⚔️",crown:"👑",cry:"😢",crying_cat_face:"😿",crystal_ball:"🔮",cucumber:"🥒",cupid:"💘",curly_loop:"➰",currency_exchange:"💱",curry:"🍛",custard:"🍮",customs:"🛃",cyclone:"🌀",dagger:"🗡",dancer:"💃",dancing_women:"👯",dancing_men:"👯&zwj;♂️",dango:"🍡",dark_sunglasses:"🕶",dart:"🎯",dash:"💨",date:"📅",deciduous_tree:"🌳",deer:"🦌",department_store:"🏬",derelict_house:"🏚",desert:"🏜",desert_island:"🏝",desktop_computer:"🖥",male_detective:"🕵️",diamond_shape_with_a_dot_inside:"💠",diamonds:"♦️",disappointed:"😞",disappointed_relieved:"😥",dizzy:"💫",dizzy_face:"😵",do_not_litter:"🚯",dog:"🐶",dog2:"🐕",dollar:"💵",dolls:"🎎",dolphin:"🐬",door:"🚪",doughnut:"🍩",dove:"🕊",dragon:"🐉",dragon_face:"🐲",dress:"👗",dromedary_camel:"🐪",drooling_face:"🤤",droplet:"💧",drum:"🥁",duck:"🦆",dvd:"📀","e-mail":"📧",eagle:"🦅",ear:"👂",ear_of_rice:"🌾",earth_africa:"🌍",earth_americas:"🌎",earth_asia:"🌏",egg:"🥚",eggplant:"🍆",eight_pointed_black_star:"✴️",eight_spoked_asterisk:"✳️",electric_plug:"🔌",elephant:"🐘",email:"✉️",end:"🔚",envelope_with_arrow:"📩",euro:"💶",european_castle:"🏰",european_post_office:"🏤",evergreen_tree:"🌲",exclamation:"❗️",expressionless:"😑",eye:"👁",eye_speech_bubble:"👁&zwj;🗨",eyeglasses:"👓",eyes:"👀",face_with_head_bandage:"🤕",face_with_thermometer:"🤒",fist_oncoming:"👊",factory:"🏭",fallen_leaf:"🍂",family_man_woman_boy:"👪",family_man_boy:"👨&zwj;👦",family_man_boy_boy:"👨&zwj;👦&zwj;👦",family_man_girl:"👨&zwj;👧",family_man_girl_boy:"👨&zwj;👧&zwj;👦",family_man_girl_girl:"👨&zwj;👧&zwj;👧",family_man_man_boy:"👨&zwj;👨&zwj;👦",family_man_man_boy_boy:"👨&zwj;👨&zwj;👦&zwj;👦",family_man_man_girl:"👨&zwj;👨&zwj;👧",family_man_man_girl_boy:"👨&zwj;👨&zwj;👧&zwj;👦",family_man_man_girl_girl:"👨&zwj;👨&zwj;👧&zwj;👧",family_man_woman_boy_boy:"👨&zwj;👩&zwj;👦&zwj;👦",family_man_woman_girl:"👨&zwj;👩&zwj;👧",family_man_woman_girl_boy:"👨&zwj;👩&zwj;👧&zwj;👦",family_man_woman_girl_girl:"👨&zwj;👩&zwj;👧&zwj;👧",family_woman_boy:"👩&zwj;👦",family_woman_boy_boy:"👩&zwj;👦&zwj;👦",family_woman_girl:"👩&zwj;👧",family_woman_girl_boy:"👩&zwj;👧&zwj;👦",family_woman_girl_girl:"👩&zwj;👧&zwj;👧",family_woman_woman_boy:"👩&zwj;👩&zwj;👦",family_woman_woman_boy_boy:"👩&zwj;👩&zwj;👦&zwj;👦",family_woman_woman_girl:"👩&zwj;👩&zwj;👧",family_woman_woman_girl_boy:"👩&zwj;👩&zwj;👧&zwj;👦",family_woman_woman_girl_girl:"👩&zwj;👩&zwj;👧&zwj;👧",fast_forward:"⏩",fax:"📠",fearful:"😨",feet:"🐾",female_detective:"🕵️&zwj;♀️",ferris_wheel:"🎡",ferry:"⛴",field_hockey:"🏑",file_cabinet:"🗄",file_folder:"📁",film_projector:"📽",film_strip:"🎞",fire:"🔥",fire_engine:"🚒",fireworks:"🎆",first_quarter_moon:"🌓",first_quarter_moon_with_face:"🌛",fish:"🐟",fish_cake:"🍥",fishing_pole_and_fish:"🎣",fist_raised:"✊",fist_left:"🤛",fist_right:"🤜",flags:"🎏",flashlight:"🔦",fleur_de_lis:"⚜️",flight_arrival:"🛬",flight_departure:"🛫",floppy_disk:"💾",flower_playing_cards:"🎴",flushed:"😳",fog:"🌫",foggy:"🌁",football:"🏈",footprints:"👣",fork_and_knife:"🍴",fountain:"⛲️",fountain_pen:"🖋",four_leaf_clover:"🍀",fox_face:"🦊",framed_picture:"🖼",free:"🆓",fried_egg:"🍳",fried_shrimp:"🍤",fries:"🍟",frog:"🐸",frowning:"😦",frowning_face:"☹️",frowning_man:"🙍&zwj;♂️",frowning_woman:"🙍",middle_finger:"🖕",fuelpump:"⛽️",full_moon:"🌕",full_moon_with_face:"🌝",funeral_urn:"⚱️",game_die:"🎲",gear:"⚙️",gem:"💎",gemini:"♊️",ghost:"👻",gift:"🎁",gift_heart:"💝",girl:"👧",globe_with_meridians:"🌐",goal_net:"🥅",goat:"🐐",golf:"⛳️",golfing_man:"🏌️",golfing_woman:"🏌️&zwj;♀️",gorilla:"🦍",grapes:"🍇",green_apple:"🍏",green_book:"📗",green_heart:"💚",green_salad:"🥗",grey_exclamation:"❕",grey_question:"❔",grimacing:"😬",grin:"😁",grinning:"😀",guardsman:"💂",guardswoman:"💂&zwj;♀️",guitar:"🎸",gun:"🔫",haircut_woman:"💇",haircut_man:"💇&zwj;♂️",hamburger:"🍔",hammer:"🔨",hammer_and_pick:"⚒",hammer_and_wrench:"🛠",hamster:"🐹",hand:"✋",handbag:"👜",handshake:"🤝",hankey:"💩",hatched_chick:"🐥",hatching_chick:"🐣",headphones:"🎧",hear_no_evil:"🙉",heart:"❤️",heart_decoration:"💟",heart_eyes:"😍",heart_eyes_cat:"😻",heartbeat:"💓",heartpulse:"💗",hearts:"♥️",heavy_check_mark:"✔️",heavy_division_sign:"➗",heavy_dollar_sign:"💲",heavy_heart_exclamation:"❣️",heavy_minus_sign:"➖",heavy_multiplication_x:"✖️",heavy_plus_sign:"➕",helicopter:"🚁",herb:"🌿",hibiscus:"🌺",high_brightness:"🔆",high_heel:"👠",hocho:"🔪",hole:"🕳",honey_pot:"🍯",horse:"🐴",horse_racing:"🏇",hospital:"🏥",hot_pepper:"🌶",hotdog:"🌭",hotel:"🏨",hotsprings:"♨️",hourglass:"⌛️",hourglass_flowing_sand:"⏳",house:"🏠",house_with_garden:"🏡",houses:"🏘",hugs:"🤗",hushed:"😯",ice_cream:"🍨",ice_hockey:"🏒",ice_skate:"⛸",icecream:"🍦",id:"🆔",ideograph_advantage:"🉐",imp:"👿",inbox_tray:"📥",incoming_envelope:"📨",tipping_hand_woman:"💁",information_source:"ℹ️",innocent:"😇",interrobang:"⁉️",iphone:"📱",izakaya_lantern:"🏮",jack_o_lantern:"🎃",japan:"🗾",japanese_castle:"🏯",japanese_goblin:"👺",japanese_ogre:"👹",jeans:"👖",joy:"😂",joy_cat:"😹",joystick:"🕹",kaaba:"🕋",key:"🔑",keyboard:"⌨️",keycap_ten:"🔟",kick_scooter:"🛴",kimono:"👘",kiss:"💋",kissing:"😗",kissing_cat:"😽",kissing_closed_eyes:"😚",kissing_heart:"😘",kissing_smiling_eyes:"😙",kiwi_fruit:"🥝",koala:"🐨",koko:"🈁",label:"🏷",large_blue_circle:"🔵",large_blue_diamond:"🔷",large_orange_diamond:"🔶",last_quarter_moon:"🌗",last_quarter_moon_with_face:"🌜",latin_cross:"✝️",laughing:"😆",leaves:"🍃",ledger:"📒",left_luggage:"🛅",left_right_arrow:"↔️",leftwards_arrow_with_hook:"↩️",lemon:"🍋",leo:"♌️",leopard:"🐆",level_slider:"🎚",libra:"♎️",light_rail:"🚈",link:"🔗",lion:"🦁",lips:"👄",lipstick:"💄",lizard:"🦎",lock:"🔒",lock_with_ink_pen:"🔏",lollipop:"🍭",loop:"➿",loud_sound:"🔊",loudspeaker:"📢",love_hotel:"🏩",love_letter:"💌",low_brightness:"🔅",lying_face:"🤥",m:"Ⓜ️",mag:"🔍",mag_right:"🔎",mahjong:"🀄️",mailbox:"📫",mailbox_closed:"📪",mailbox_with_mail:"📬",mailbox_with_no_mail:"📭",man:"👨",man_artist:"👨&zwj;🎨",man_astronaut:"👨&zwj;🚀",man_cartwheeling:"🤸&zwj;♂️",man_cook:"👨&zwj;🍳",man_dancing:"🕺",man_facepalming:"🤦&zwj;♂️",man_factory_worker:"👨&zwj;🏭",man_farmer:"👨&zwj;🌾",man_firefighter:"👨&zwj;🚒",man_health_worker:"👨&zwj;⚕️",man_in_tuxedo:"🤵",man_judge:"👨&zwj;⚖️",man_juggling:"🤹&zwj;♂️",man_mechanic:"👨&zwj;🔧",man_office_worker:"👨&zwj;💼",man_pilot:"👨&zwj;✈️",man_playing_handball:"🤾&zwj;♂️",man_playing_water_polo:"🤽&zwj;♂️",man_scientist:"👨&zwj;🔬",man_shrugging:"🤷&zwj;♂️",man_singer:"👨&zwj;🎤",man_student:"👨&zwj;🎓",man_teacher:"👨&zwj;🏫",man_technologist:"👨&zwj;💻",man_with_gua_pi_mao:"👲",man_with_turban:"👳",tangerine:"🍊",mans_shoe:"👞",mantelpiece_clock:"🕰",maple_leaf:"🍁",martial_arts_uniform:"🥋",mask:"😷",massage_woman:"💆",massage_man:"💆&zwj;♂️",meat_on_bone:"🍖",medal_military:"🎖",medal_sports:"🏅",mega:"📣",melon:"🍈",memo:"📝",men_wrestling:"🤼&zwj;♂️",menorah:"🕎",mens:"🚹",metal:"🤘",metro:"🚇",microphone:"🎤",microscope:"🔬",milk_glass:"🥛",milky_way:"🌌",minibus:"🚐",minidisc:"💽",mobile_phone_off:"📴",money_mouth_face:"🤑",money_with_wings:"💸",moneybag:"💰",monkey:"🐒",monkey_face:"🐵",monorail:"🚝",moon:"🌔",mortar_board:"🎓",mosque:"🕌",motor_boat:"🛥",motor_scooter:"🛵",motorcycle:"🏍",motorway:"🛣",mount_fuji:"🗻",mountain:"⛰",mountain_biking_man:"🚵",mountain_biking_woman:"🚵&zwj;♀️",mountain_cableway:"🚠",mountain_railway:"🚞",mountain_snow:"🏔",mouse:"🐭",mouse2:"🐁",movie_camera:"🎥",moyai:"🗿",mrs_claus:"🤶",muscle:"💪",mushroom:"🍄",musical_keyboard:"🎹",musical_note:"🎵",musical_score:"🎼",mute:"🔇",nail_care:"💅",name_badge:"📛",national_park:"🏞",nauseated_face:"🤢",necktie:"👔",negative_squared_cross_mark:"❎",nerd_face:"🤓",neutral_face:"😐",new:"🆕",new_moon:"🌑",new_moon_with_face:"🌚",newspaper:"📰",newspaper_roll:"🗞",next_track_button:"⏭",ng:"🆖",no_good_man:"🙅&zwj;♂️",no_good_woman:"🙅",night_with_stars:"🌃",no_bell:"🔕",no_bicycles:"🚳",no_entry:"⛔️",no_entry_sign:"🚫",no_mobile_phones:"📵",no_mouth:"😶",no_pedestrians:"🚷",no_smoking:"🚭","non-potable_water":"🚱",nose:"👃",notebook:"📓",notebook_with_decorative_cover:"📔",notes:"🎶",nut_and_bolt:"🔩",o:"⭕️",o2:"🅾️",ocean:"🌊",octopus:"🐙",oden:"🍢",office:"🏢",oil_drum:"🛢",ok:"🆗",ok_hand:"👌",ok_man:"🙆&zwj;♂️",ok_woman:"🙆",old_key:"🗝",older_man:"👴",older_woman:"👵",om:"🕉",on:"🔛",oncoming_automobile:"🚘",oncoming_bus:"🚍",oncoming_police_car:"🚔",oncoming_taxi:"🚖",open_file_folder:"📂",open_hands:"👐",open_mouth:"😮",open_umbrella:"☂️",ophiuchus:"⛎",orange_book:"📙",orthodox_cross:"☦️",outbox_tray:"📤",owl:"🦉",ox:"🐂",package:"📦",page_facing_up:"📄",page_with_curl:"📃",pager:"📟",paintbrush:"🖌",palm_tree:"🌴",pancakes:"🥞",panda_face:"🐼",paperclip:"📎",paperclips:"🖇",parasol_on_ground:"⛱",parking:"🅿️",part_alternation_mark:"〽️",partly_sunny:"⛅️",passenger_ship:"🛳",passport_control:"🛂",pause_button:"⏸",peace_symbol:"☮️",peach:"🍑",peanuts:"🥜",pear:"🍐",pen:"🖊",pencil2:"✏️",penguin:"🐧",pensive:"😔",performing_arts:"🎭",persevere:"😣",person_fencing:"🤺",pouting_woman:"🙎",phone:"☎️",pick:"⛏",pig:"🐷",pig2:"🐖",pig_nose:"🐽",pill:"💊",pineapple:"🍍",ping_pong:"🏓",pisces:"♓️",pizza:"🍕",place_of_worship:"🛐",plate_with_cutlery:"🍽",play_or_pause_button:"⏯",point_down:"👇",point_left:"👈",point_right:"👉",point_up:"☝️",point_up_2:"👆",police_car:"🚓",policewoman:"👮&zwj;♀️",poodle:"🐩",popcorn:"🍿",post_office:"🏣",postal_horn:"📯",postbox:"📮",potable_water:"🚰",potato:"🥔",pouch:"👝",poultry_leg:"🍗",pound:"💷",rage:"😡",pouting_cat:"😾",pouting_man:"🙎&zwj;♂️",pray:"🙏",prayer_beads:"📿",pregnant_woman:"🤰",previous_track_button:"⏮",prince:"🤴",princess:"👸",printer:"🖨",purple_heart:"💜",purse:"👛",pushpin:"📌",put_litter_in_its_place:"🚮",question:"❓",rabbit:"🐰",rabbit2:"🐇",racehorse:"🐎",racing_car:"🏎",radio:"📻",radio_button:"🔘",radioactive:"☢️",railway_car:"🚃",railway_track:"🛤",rainbow:"🌈",rainbow_flag:"🏳️&zwj;🌈",raised_back_of_hand:"🤚",raised_hand_with_fingers_splayed:"🖐",raised_hands:"🙌",raising_hand_woman:"🙋",raising_hand_man:"🙋&zwj;♂️",ram:"🐏",ramen:"🍜",rat:"🐀",record_button:"⏺",recycle:"♻️",red_circle:"🔴",registered:"®️",relaxed:"☺️",relieved:"😌",reminder_ribbon:"🎗",repeat:"🔁",repeat_one:"🔂",rescue_worker_helmet:"⛑",restroom:"🚻",revolving_hearts:"💞",rewind:"⏪",rhinoceros:"🦏",ribbon:"🎀",rice:"🍚",rice_ball:"🍙",rice_cracker:"🍘",rice_scene:"🎑",right_anger_bubble:"🗯",ring:"💍",robot:"🤖",rocket:"🚀",rofl:"🤣",roll_eyes:"🙄",roller_coaster:"🎢",rooster:"🐓",rose:"🌹",rosette:"🏵",rotating_light:"🚨",round_pushpin:"📍",rowing_man:"🚣",rowing_woman:"🚣&zwj;♀️",rugby_football:"🏉",running_man:"🏃",running_shirt_with_sash:"🎽",running_woman:"🏃&zwj;♀️",sa:"🈂️",sagittarius:"♐️",sake:"🍶",sandal:"👡",santa:"🎅",satellite:"📡",saxophone:"🎷",school:"🏫",school_satchel:"🎒",scissors:"✂️",scorpion:"🦂",scorpius:"♏️",scream:"😱",scream_cat:"🙀",scroll:"📜",seat:"💺",secret:"㊙️",see_no_evil:"🙈",seedling:"🌱",selfie:"🤳",shallow_pan_of_food:"🥘",shamrock:"☘️",shark:"🦈",shaved_ice:"🍧",sheep:"🐑",shell:"🐚",shield:"🛡",shinto_shrine:"⛩",ship:"🚢",shirt:"👕",shopping:"🛍",shopping_cart:"🛒",shower:"🚿",shrimp:"🦐",signal_strength:"📶",six_pointed_star:"🔯",ski:"🎿",skier:"⛷",skull:"💀",skull_and_crossbones:"☠️",sleeping:"😴",sleeping_bed:"🛌",sleepy:"😪",slightly_frowning_face:"🙁",slightly_smiling_face:"🙂",slot_machine:"🎰",small_airplane:"🛩",small_blue_diamond:"🔹",small_orange_diamond:"🔸",small_red_triangle:"🔺",small_red_triangle_down:"🔻",smile:"😄",smile_cat:"😸",smiley:"😃",smiley_cat:"😺",smiling_imp:"😈",smirk:"😏",smirk_cat:"😼",smoking:"🚬",snail:"🐌",snake:"🐍",sneezing_face:"🤧",snowboarder:"🏂",snowflake:"❄️",snowman:"⛄️",snowman_with_snow:"☃️",sob:"😭",soccer:"⚽️",soon:"🔜",sos:"🆘",sound:"🔉",space_invader:"👾",spades:"♠️",spaghetti:"🍝",sparkle:"❇️",sparkler:"🎇",sparkles:"✨",sparkling_heart:"💖",speak_no_evil:"🙊",speaker:"🔈",speaking_head:"🗣",speech_balloon:"💬",speedboat:"🚤",spider:"🕷",spider_web:"🕸",spiral_calendar:"🗓",spiral_notepad:"🗒",spoon:"🥄",squid:"🦑",stadium:"🏟",star:"⭐️",star2:"🌟",star_and_crescent:"☪️",star_of_david:"✡️",stars:"🌠",station:"🚉",statue_of_liberty:"🗽",steam_locomotive:"🚂",stew:"🍲",stop_button:"⏹",stop_sign:"🛑",stopwatch:"⏱",straight_ruler:"📏",strawberry:"🍓",stuck_out_tongue:"😛",stuck_out_tongue_closed_eyes:"😝",stuck_out_tongue_winking_eye:"😜",studio_microphone:"🎙",stuffed_flatbread:"🥙",sun_behind_large_cloud:"🌥",sun_behind_rain_cloud:"🌦",sun_behind_small_cloud:"🌤",sun_with_face:"🌞",sunflower:"🌻",sunglasses:"😎",sunny:"☀️",sunrise:"🌅",sunrise_over_mountains:"🌄",surfing_man:"🏄",surfing_woman:"🏄&zwj;♀️",sushi:"🍣",suspension_railway:"🚟",sweat:"😓",sweat_drops:"💦",sweat_smile:"😅",sweet_potato:"🍠",swimming_man:"🏊",swimming_woman:"🏊&zwj;♀️",symbols:"🔣",synagogue:"🕍",syringe:"💉",taco:"🌮",tada:"🎉",tanabata_tree:"🎋",taurus:"♉️",taxi:"🚕",tea:"🍵",telephone_receiver:"📞",telescope:"🔭",tennis:"🎾",tent:"⛺️",thermometer:"🌡",thinking:"🤔",thought_balloon:"💭",ticket:"🎫",tickets:"🎟",tiger:"🐯",tiger2:"🐅",timer_clock:"⏲",tipping_hand_man:"💁&zwj;♂️",tired_face:"😫",tm:"™️",toilet:"🚽",tokyo_tower:"🗼",tomato:"🍅",tongue:"👅",top:"🔝",tophat:"🎩",tornado:"🌪",trackball:"🖲",tractor:"🚜",traffic_light:"🚥",train:"🚋",train2:"🚆",tram:"🚊",triangular_flag_on_post:"🚩",triangular_ruler:"📐",trident:"🔱",triumph:"😤",trolleybus:"🚎",trophy:"🏆",tropical_drink:"🍹",tropical_fish:"🐠",truck:"🚚",trumpet:"🎺",tulip:"🌷",tumbler_glass:"🥃",turkey:"🦃",turtle:"🐢",tv:"📺",twisted_rightwards_arrows:"🔀",two_hearts:"💕",two_men_holding_hands:"👬",two_women_holding_hands:"👭",u5272:"🈹",u5408:"🈴",u55b6:"🈺",u6307:"🈯️",u6708:"🈷️",u6709:"🈶",u6e80:"🈵",u7121:"🈚️",u7533:"🈸",u7981:"🈲",u7a7a:"🈳",umbrella:"☔️",unamused:"😒",underage:"🔞",unicorn:"🦄",unlock:"🔓",up:"🆙",upside_down_face:"🙃",v:"✌️",vertical_traffic_light:"🚦",vhs:"📼",vibration_mode:"📳",video_camera:"📹",video_game:"🎮",violin:"🎻",virgo:"♍️",volcano:"🌋",volleyball:"🏐",vs:"🆚",vulcan_salute:"🖖",walking_man:"🚶",walking_woman:"🚶&zwj;♀️",waning_crescent_moon:"🌘",waning_gibbous_moon:"🌖",warning:"⚠️",wastebasket:"🗑",watch:"⌚️",water_buffalo:"🐃",watermelon:"🍉",wave:"👋",wavy_dash:"〰️",waxing_crescent_moon:"🌒",wc:"🚾",weary:"😩",wedding:"💒",weight_lifting_man:"🏋️",weight_lifting_woman:"🏋️&zwj;♀️",whale:"🐳",whale2:"🐋",wheel_of_dharma:"☸️",wheelchair:"♿️",white_check_mark:"✅",white_circle:"⚪️",white_flag:"🏳️",white_flower:"💮",white_large_square:"⬜️",white_medium_small_square:"◽️",white_medium_square:"◻️",white_small_square:"▫️",white_square_button:"🔳",wilted_flower:"🥀",wind_chime:"🎐",wind_face:"🌬",wine_glass:"🍷",wink:"😉",wolf:"🐺",woman:"👩",woman_artist:"👩&zwj;🎨",woman_astronaut:"👩&zwj;🚀",woman_cartwheeling:"🤸&zwj;♀️",woman_cook:"👩&zwj;🍳",woman_facepalming:"🤦&zwj;♀️",woman_factory_worker:"👩&zwj;🏭",woman_farmer:"👩&zwj;🌾",woman_firefighter:"👩&zwj;🚒",woman_health_worker:"👩&zwj;⚕️",woman_judge:"👩&zwj;⚖️",woman_juggling:"🤹&zwj;♀️",woman_mechanic:"👩&zwj;🔧",woman_office_worker:"👩&zwj;💼",woman_pilot:"👩&zwj;✈️",woman_playing_handball:"🤾&zwj;♀️",woman_playing_water_polo:"🤽&zwj;♀️",woman_scientist:"👩&zwj;🔬",woman_shrugging:"🤷&zwj;♀️",woman_singer:"👩&zwj;🎤",woman_student:"👩&zwj;🎓",woman_teacher:"👩&zwj;🏫",woman_technologist:"👩&zwj;💻",woman_with_turban:"👳&zwj;♀️",womans_clothes:"👚",womans_hat:"👒",women_wrestling:"🤼&zwj;♀️",womens:"🚺",world_map:"🗺",worried:"😟",wrench:"🔧",writing_hand:"✍️",x:"❌",yellow_heart:"💛",yen:"💴",yin_yang:"☯️",yum:"😋",zap:"⚡️",zipper_mouth_face:"🤐",zzz:"💤",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:"<span style=\"font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>"},s.Converter=function(e){"use strict";var t={},n=[],i=[],l={},o=c,h={parsed:{},raw:"",format:""};function p(e,t){if(t=t||null,s.helper.isString(e)){if(t=e=s.helper.stdExtName(e),s.extensions[e])return console.warn("DEPRECATION WARNING: "+e+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),void function(e,t){"function"==typeof e&&(e=e(new s.Converter));s.helper.isArray(e)||(e=[e]);var l=d(e,t);if(!l.valid)throw Error(l.error);for(var o=0;o<e.length;++o)switch(e[o].type){case"lang":n.push(e[o]);break;case"output":i.push(e[o]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}(s.extensions[e],e);if(s.helper.isUndefined(a[e]))throw Error('Extension "'+e+'" could not be loaded. It was either not found or is not a valid extension.');e=a[e]}"function"==typeof e&&(e=e()),s.helper.isArray(e)||(e=[e]);var l=d(e,t);if(!l.valid)throw Error(l.error);for(var o=0;o<e.length;++o){switch(e[o].type){case"lang":n.push(e[o]);break;case"output":i.push(e[o])}if(e[o].hasOwnProperty("listeners"))for(var r in e[o].listeners)e[o].listeners.hasOwnProperty(r)&&g(r,e[o].listeners[r])}}function g(e,t){if(!s.helper.isString(e))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof e+" given");if("function"!=typeof t)throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof t+" given");l.hasOwnProperty(e)||(l[e]=[]),l[e].push(t)}!function(){for(var n in e=e||{},r)r.hasOwnProperty(n)&&(t[n]=r[n]);if("object"!=typeof e)throw Error("Converter expects the passed parameter to be an object, but "+typeof e+" was passed instead.");for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);t.extensions&&s.helper.forEach(t.extensions,p)}(),this._dispatch=function(e,t,n,i){if(l.hasOwnProperty(e))for(var s=0;s<l[e].length;++s){var o=l[e][s](e,t,this,n,i);o&&void 0!==o&&(t=o)}return t},this.listen=function(e,t){return g(e,t),this},this.makeHtml=function(e){if(!e)return e;var l={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:n,outputModifiers:i,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return e=(e=(e=(e=(e=e.replace(/¨/g,"¨T")).replace(/\$/g,"¨D")).replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/\u00A0/g,"&nbsp;"),t.smartIndentationFix&&(e=function(e){var t=e.match(/^\s*/)[0].length,n=new RegExp("^\\s{0,"+t+"}","gm");return e.replace(n,"")}(e)),e="\n\n"+e+"\n\n",e=(e=s.subParser("detab")(e,t,l)).replace(/^[ \t]+$/gm,""),s.helper.forEach(n,(function(n){e=s.subParser("runExtension")(n,e,t,l)})),e=s.subParser("metadata")(e,t,l),e=s.subParser("hashPreCodeTags")(e,t,l),e=s.subParser("githubCodeBlocks")(e,t,l),e=s.subParser("hashHTMLBlocks")(e,t,l),e=s.subParser("hashCodeTags")(e,t,l),e=s.subParser("stripLinkDefinitions")(e,t,l),e=s.subParser("blockGamut")(e,t,l),e=s.subParser("unhashHTMLSpans")(e,t,l),e=(e=(e=s.subParser("unescapeSpecialChars")(e,t,l)).replace(/¨D/g,"$$")).replace(/¨T/g,"¨"),e=s.subParser("completeHTMLDocument")(e,t,l),s.helper.forEach(i,(function(n){e=s.subParser("runExtension")(n,e,t,l)})),h=l.metadata,e},this.makeMarkdown=this.makeMd=function(e,t){if(e=(e=(e=e.replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/>[ \t]+</,">¨NBSP;<"),!t){if(!window||!window.document)throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");t=window.document}var n=t.createElement("div");n.innerHTML=e;var i={preList:function(e){for(var t=e.querySelectorAll("pre"),n=[],i=0;i<t.length;++i)if(1===t[i].childElementCount&&"code"===t[i].firstChild.tagName.toLowerCase()){var l=t[i].firstChild.innerHTML.trim(),o=t[i].firstChild.getAttribute("data-language")||"";if(""===o)for(var a=t[i].firstChild.className.split(" "),r=0;r<a.length;++r){var c=a[r].match(/^language-(.+)$/);if(null!==c){o=c[1];break}}l=s.helper.unescapeHTMLEntities(l),n.push(l),t[i].outerHTML='<precode language="'+o+'" precodenum="'+i.toString()+'"></precode>'}else n.push(t[i].innerHTML),t[i].innerHTML="",t[i].setAttribute("prenum",i.toString());return n}(n)};!function e(t){for(var n=0;n<t.childNodes.length;++n){var i=t.childNodes[n];3===i.nodeType?/\S/.test(i.nodeValue)||/^[ ]+$/.test(i.nodeValue)?(i.nodeValue=i.nodeValue.split("\n").join(" "),i.nodeValue=i.nodeValue.replace(/(\s)+/g,"$1")):(t.removeChild(i),--n):1===i.nodeType&&e(i)}}(n);for(var l=n.childNodes,o="",a=0;a<l.length;a++)o+=s.subParser("makeMarkdown.node")(l[a],i);return o},this.setOption=function(e,n){t[e]=n},this.getOption=function(e){return t[e]},this.getOptions=function(){return t},this.addExtension=function(e,t){p(e,t=t||null)},this.useExtension=function(e){p(e)},this.setFlavor=function(e){if(!u.hasOwnProperty(e))throw Error(e+" flavor was not found");var n=u[e];for(var i in o=e,n)n.hasOwnProperty(i)&&(t[i]=n[i])},this.getFlavor=function(){return o},this.removeExtension=function(e){s.helper.isArray(e)||(e=[e]);for(var t=0;t<e.length;++t){for(var l=e[t],o=0;o<n.length;++o)n[o]===l&&n.splice(o,1);for(var a=0;a<i.length;++a)i[a]===l&&i.splice(a,1)}},this.getAllExtensions=function(){return{language:n,output:i}},this.getMetadata=function(e){return e?h.raw:h.parsed},this.getMetadataFormat=function(){return h.format},this._setMetadataPair=function(e,t){h.parsed[e]=t},this._setMetadataFormat=function(e){h.format=e},this._setMetadataRaw=function(e){h.raw=e}},s.subParser("anchors",(function(e,t,n){"use strict";var i=function(e,i,l,o,a,r,c){if(s.helper.isUndefined(c)&&(c=""),l=l.toLowerCase(),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)o="";else if(!o){if(l||(l=i.toLowerCase().replace(/ ?\n/g," ")),o="#"+l,s.helper.isUndefined(n.gUrls[l]))return e;o=n.gUrls[l],s.helper.isUndefined(n.gTitles[l])||(c=n.gTitles[l])}var u='<a href="'+(o=o.replace(s.helper.regexes.asteriskDashAndColon,s.helper.escapeCharactersCallback))+'"';return""!==c&&null!==c&&(u+=' title="'+(c=(c=c.replace(/"/g,"&quot;")).replace(s.helper.regexes.asteriskDashAndColon,s.helper.escapeCharactersCallback))+'"'),t.openLinksInNewWindow&&!/^#/.test(o)&&(u+=' rel="noopener noreferrer" target="¨E95Eblank"'),u+=">"+i+"</a>"};return e=(e=(e=(e=(e=n.converter._dispatch("anchors.before",e,t,n)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,i)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,i)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,i)).replace(/\[([^\[\]]+)]()()()()()/g,i),t.ghMentions&&(e=e.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gim,(function(e,n,i,l,o){if("\\"===i)return n+l;if(!s.helper.isString(t.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var a=t.ghMentionsLink.replace(/\{u}/g,o),r="";return t.openLinksInNewWindow&&(r=' rel="noopener noreferrer" target="¨E95Eblank"'),n+'<a href="'+a+'"'+r+">"+l+"</a>"}))),e=n.converter._dispatch("anchors.after",e,t,n)}));var g=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,m=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,f=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,_=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gim,b=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,v=function(e){"use strict";return function(t,n,i,l,o,a,r){var c=i=i.replace(s.helper.regexes.asteriskDashAndColon,s.helper.escapeCharactersCallback),u="",d="",h=n||"",p=r||"";return/^www\./i.test(i)&&(i=i.replace(/^www\./i,"http://www.")),e.excludeTrailingPunctuationFromURLs&&a&&(u=a),e.openLinksInNewWindow&&(d=' rel="noopener noreferrer" target="¨E95Eblank"'),h+'<a href="'+i+'"'+d+">"+c+"</a>"+u+p}},y=function(e,t){"use strict";return function(n,i,l){var o="mailto:";return i=i||"",l=s.subParser("unescapeSpecialChars")(l,e,t),e.encodeEmails?(o=s.helper.encodeEmailAddress(o+l),l=s.helper.encodeEmailAddress(l)):o+=l,i+'<a href="'+o+'">'+l+"</a>"}};s.subParser("autoLinks",(function(e,t,n){"use strict";return e=(e=(e=n.converter._dispatch("autoLinks.before",e,t,n)).replace(f,v(t))).replace(b,y(t,n)),e=n.converter._dispatch("autoLinks.after",e,t,n)})),s.subParser("simplifiedAutoLinks",(function(e,t,n){"use strict";return t.simplifiedAutoLink?(e=n.converter._dispatch("simplifiedAutoLinks.before",e,t,n),e=(e=t.excludeTrailingPunctuationFromURLs?e.replace(m,v(t)):e.replace(g,v(t))).replace(_,y(t,n)),e=n.converter._dispatch("simplifiedAutoLinks.after",e,t,n)):e})),s.subParser("blockGamut",(function(e,t,n){"use strict";return e=n.converter._dispatch("blockGamut.before",e,t,n),e=s.subParser("blockQuotes")(e,t,n),e=s.subParser("headers")(e,t,n),e=s.subParser("horizontalRule")(e,t,n),e=s.subParser("lists")(e,t,n),e=s.subParser("codeBlocks")(e,t,n),e=s.subParser("tables")(e,t,n),e=s.subParser("hashHTMLBlocks")(e,t,n),e=s.subParser("paragraphs")(e,t,n),e=n.converter._dispatch("blockGamut.after",e,t,n)})),s.subParser("blockQuotes",(function(e,t,n){"use strict";e=n.converter._dispatch("blockQuotes.before",e,t,n),e+="\n\n";var i=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return t.splitAdjacentBlockquotes&&(i=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),e=e.replace(i,(function(e){return e=(e=(e=e.replace(/^[ \t]*>[ \t]?/gm,"")).replace(/¨0/g,"")).replace(/^[ \t]+$/gm,""),e=s.subParser("githubCodeBlocks")(e,t,n),e=(e=(e=s.subParser("blockGamut")(e,t,n)).replace(/(^|\n)/g,"$1  ")).replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,(function(e,t){var n=t;return n=(n=n.replace(/^  /gm,"¨0")).replace(/¨0/g,"")})),s.subParser("hashBlock")("<blockquote>\n"+e+"\n</blockquote>",t,n)})),e=n.converter._dispatch("blockQuotes.after",e,t,n)})),s.subParser("codeBlocks",(function(e,t,n){"use strict";e=n.converter._dispatch("codeBlocks.before",e,t,n);return e=(e=(e+="¨0").replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g,(function(e,i,l){var o=i,a=l,r="\n";return o=s.subParser("outdent")(o,t,n),o=s.subParser("encodeCode")(o,t,n),o=(o=(o=s.subParser("detab")(o,t,n)).replace(/^\n+/g,"")).replace(/\n+$/g,""),t.omitExtraWLInCodeBlocks&&(r=""),o="<pre><code>"+o+r+"</code></pre>",s.subParser("hashBlock")(o,t,n)+a}))).replace(/¨0/,""),e=n.converter._dispatch("codeBlocks.after",e,t,n)})),s.subParser("codeSpans",(function(e,t,n){"use strict";return void 0===(e=n.converter._dispatch("codeSpans.before",e,t,n))&&(e=""),e=e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,(function(e,i,l,o){var a=o;return a=(a=a.replace(/^([ \t]*)/g,"")).replace(/[ \t]*$/g,""),a=i+"<code>"+(a=s.subParser("encodeCode")(a,t,n))+"</code>",a=s.subParser("hashHTMLSpans")(a,t,n)})),e=n.converter._dispatch("codeSpans.after",e,t,n)})),s.subParser("completeHTMLDocument",(function(e,t,n){"use strict";if(!t.completeHTMLDocument)return e;e=n.converter._dispatch("completeHTMLDocument.before",e,t,n);var i="html",l="<!DOCTYPE HTML>\n",s="",o='<meta charset="utf-8">\n',a="",r="";for(var c in void 0!==n.metadata.parsed.doctype&&(l="<!DOCTYPE "+n.metadata.parsed.doctype+">\n","html"!==(i=n.metadata.parsed.doctype.toString().toLowerCase())&&"html5"!==i||(o='<meta charset="utf-8">')),n.metadata.parsed)if(n.metadata.parsed.hasOwnProperty(c))switch(c.toLowerCase()){case"doctype":break;case"title":s="<title>"+n.metadata.parsed.title+"</title>\n";break;case"charset":o="html"===i||"html5"===i?'<meta charset="'+n.metadata.parsed.charset+'">\n':'<meta name="charset" content="'+n.metadata.parsed.charset+'">\n';break;case"language":case"lang":a=' lang="'+n.metadata.parsed[c]+'"',r+='<meta name="'+c+'" content="'+n.metadata.parsed[c]+'">\n';break;default:r+='<meta name="'+c+'" content="'+n.metadata.parsed[c]+'">\n'}return e=l+"<html"+a+">\n<head>\n"+s+o+r+"</head>\n<body>\n"+e.trim()+"\n</body>\n</html>",e=n.converter._dispatch("completeHTMLDocument.after",e,t,n)})),s.subParser("detab",(function(e,t,n){"use strict";return e=(e=(e=(e=(e=(e=n.converter._dispatch("detab.before",e,t,n)).replace(/\t(?=\t)/g,"    ")).replace(/\t/g,"¨A¨B")).replace(/¨B(.+?)¨A/g,(function(e,t){for(var n=t,i=4-n.length%4,l=0;l<i;l++)n+=" ";return n}))).replace(/¨A/g,"    ")).replace(/¨B/g,""),e=n.converter._dispatch("detab.after",e,t,n)})),s.subParser("ellipsis",(function(e,t,n){"use strict";return t.ellipsis?(e=(e=n.converter._dispatch("ellipsis.before",e,t,n)).replace(/\.\.\./g,"…"),e=n.converter._dispatch("ellipsis.after",e,t,n)):e})),s.subParser("emoji",(function(e,t,n){"use strict";if(!t.emoji)return e;return e=(e=n.converter._dispatch("emoji.before",e,t,n)).replace(/:([\S]+?):/g,(function(e,t){return s.helper.emojis.hasOwnProperty(t)?s.helper.emojis[t]:e})),e=n.converter._dispatch("emoji.after",e,t,n)})),s.subParser("encodeAmpsAndAngles",(function(e,t,n){"use strict";return e=(e=(e=(e=(e=n.converter._dispatch("encodeAmpsAndAngles.before",e,t,n)).replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;")).replace(/<(?![a-z\/?$!])/gi,"&lt;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;"),e=n.converter._dispatch("encodeAmpsAndAngles.after",e,t,n)})),s.subParser("encodeBackslashEscapes",(function(e,t,n){"use strict";return e=(e=(e=n.converter._dispatch("encodeBackslashEscapes.before",e,t,n)).replace(/\\(\\)/g,s.helper.escapeCharactersCallback)).replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g,s.helper.escapeCharactersCallback),e=n.converter._dispatch("encodeBackslashEscapes.after",e,t,n)})),s.subParser("encodeCode",(function(e,t,n){"use strict";return e=(e=n.converter._dispatch("encodeCode.before",e,t,n)).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,s.helper.escapeCharactersCallback),e=n.converter._dispatch("encodeCode.after",e,t,n)})),s.subParser("escapeSpecialCharsWithinTagAttributes",(function(e,t,n){"use strict";return e=(e=(e=n.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",e,t,n)).replace(/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,(function(e){return e.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,s.helper.escapeCharactersCallback)}))).replace(/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi,(function(e){return e.replace(/([\\`*_~=|])/g,s.helper.escapeCharactersCallback)})),e=n.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",e,t,n)})),s.subParser("githubCodeBlocks",(function(e,t,n){"use strict";return t.ghCodeBlocks?(e=n.converter._dispatch("githubCodeBlocks.before",e,t,n),e=(e=(e+="¨0").replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,(function(e,i,l,o){var a=t.omitExtraWLInCodeBlocks?"":"\n";return o=s.subParser("encodeCode")(o,t,n),o="<pre><code"+(l?' class="'+l+" language-"+l+'"':"")+">"+(o=(o=(o=s.subParser("detab")(o,t,n)).replace(/^\n+/g,"")).replace(/\n+$/g,""))+a+"</code></pre>",o=s.subParser("hashBlock")(o,t,n),"\n\n¨G"+(n.ghCodeBlocks.push({text:e,codeblock:o})-1)+"G\n\n"}))).replace(/¨0/,""),n.converter._dispatch("githubCodeBlocks.after",e,t,n)):e})),s.subParser("hashBlock",(function(e,t,n){"use strict";return e=(e=n.converter._dispatch("hashBlock.before",e,t,n)).replace(/(^\n+|\n+$)/g,""),e="\n\n¨K"+(n.gHtmlBlocks.push(e)-1)+"K\n\n",e=n.converter._dispatch("hashBlock.after",e,t,n)})),s.subParser("hashCodeTags",(function(e,t,n){"use strict";e=n.converter._dispatch("hashCodeTags.before",e,t,n);return e=s.helper.replaceRecursiveRegExp(e,(function(e,i,l,o){var a=l+s.subParser("encodeCode")(i,t,n)+o;return"¨C"+(n.gHtmlSpans.push(a)-1)+"C"}),"<code\\b[^>]*>","</code>","gim"),e=n.converter._dispatch("hashCodeTags.after",e,t,n)})),s.subParser("hashElement",(function(e,t,n){"use strict";return function(e,t){var i=t;return i=(i=(i=i.replace(/\n\n/g,"\n")).replace(/^\n/,"")).replace(/\n+$/g,""),i="\n\n¨K"+(n.gHtmlBlocks.push(i)-1)+"K\n\n"}})),s.subParser("hashHTMLBlocks",(function(e,t,n){"use strict";e=n.converter._dispatch("hashHTMLBlocks.before",e,t,n);var i=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],l=function(e,t,i,l){var s=e;return-1!==i.search(/\bmarkdown\b/)&&(s=i+n.converter.makeHtml(t)+l),"\n\n¨K"+(n.gHtmlBlocks.push(s)-1)+"K\n\n"};t.backslashEscapesHTMLTags&&(e=e.replace(/\\<(\/?[^>]+?)>/g,(function(e,t){return"&lt;"+t+"&gt;"})));for(var o=0;o<i.length;++o)for(var a,r=new RegExp("^ {0,3}(<"+i[o]+"\\b[^>]*>)","im"),c="<"+i[o]+"\\b[^>]*>",u="</"+i[o]+">";-1!==(a=s.helper.regexIndexOf(e,r));){var d=s.helper.splitAtIndex(e,a),h=s.helper.replaceRecursiveRegExp(d[1],l,c,u,"im");if(h===d[1])break;e=d[0].concat(h)}return e=e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,s.subParser("hashElement")(e,t,n)),e=(e=s.helper.replaceRecursiveRegExp(e,(function(e){return"\n\n¨K"+(n.gHtmlBlocks.push(e)-1)+"K\n\n"}),"^ {0,3}\x3c!--","--\x3e","gm")).replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,s.subParser("hashElement")(e,t,n)),e=n.converter._dispatch("hashHTMLBlocks.after",e,t,n)})),s.subParser("hashHTMLSpans",(function(e,t,n){"use strict";function i(e){return"¨C"+(n.gHtmlSpans.push(e)-1)+"C"}return e=(e=(e=(e=(e=n.converter._dispatch("hashHTMLSpans.before",e,t,n)).replace(/<[^>]+?\/>/gi,(function(e){return i(e)}))).replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,(function(e){return i(e)}))).replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,(function(e){return i(e)}))).replace(/<[^>]+?>/gi,(function(e){return i(e)})),e=n.converter._dispatch("hashHTMLSpans.after",e,t,n)})),s.subParser("unhashHTMLSpans",(function(e,t,n){"use strict";e=n.converter._dispatch("unhashHTMLSpans.before",e,t,n);for(var i=0;i<n.gHtmlSpans.length;++i){for(var l=n.gHtmlSpans[i],s=0;/¨C(\d+)C/.test(l);){var o=RegExp.$1;if(l=l.replace("¨C"+o+"C",n.gHtmlSpans[o]),10===s){console.error("maximum nesting of 10 spans reached!!!");break}++s}e=e.replace("¨C"+i+"C",l)}return e=n.converter._dispatch("unhashHTMLSpans.after",e,t,n)})),s.subParser("hashPreCodeTags",(function(e,t,n){"use strict";e=n.converter._dispatch("hashPreCodeTags.before",e,t,n);return e=s.helper.replaceRecursiveRegExp(e,(function(e,i,l,o){var a=l+s.subParser("encodeCode")(i,t,n)+o;return"\n\n¨G"+(n.ghCodeBlocks.push({text:e,codeblock:a})-1)+"G\n\n"}),"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),e=n.converter._dispatch("hashPreCodeTags.after",e,t,n)})),s.subParser("headers",(function(e,t,n){"use strict";e=n.converter._dispatch("headers.before",e,t,n);var i=isNaN(parseInt(t.headerLevelStart))?1:parseInt(t.headerLevelStart),l=t.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,o=t.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;e=(e=e.replace(l,(function(e,l){var o=s.subParser("spanGamut")(l,t,n),a=t.noHeaderId?"":' id="'+r(l)+'"',c="<h"+i+a+">"+o+"</h"+i+">";return s.subParser("hashBlock")(c,t,n)}))).replace(o,(function(e,l){var o=s.subParser("spanGamut")(l,t,n),a=t.noHeaderId?"":' id="'+r(l)+'"',c=i+1,u="<h"+c+a+">"+o+"</h"+c+">";return s.subParser("hashBlock")(u,t,n)}));var a=t.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;function r(e){var i,l;if(t.customizedHeaderId){var o=e.match(/\{([^{]+?)}\s*$/);o&&o[1]&&(e=o[1])}return i=e,l=s.helper.isString(t.prefixHeaderId)?t.prefixHeaderId:!0===t.prefixHeaderId?"section-":"",t.rawPrefixHeaderId||(i=l+i),i=t.ghCompatibleHeaderId?i.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():t.rawHeaderId?i.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"¨").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():i.replace(/[^\w]/g,"").toLowerCase(),t.rawPrefixHeaderId&&(i=l+i),n.hashLinkCounts[i]?i=i+"-"+n.hashLinkCounts[i]++:n.hashLinkCounts[i]=1,i}return e=e.replace(a,(function(e,l,o){var a=o;t.customizedHeaderId&&(a=o.replace(/\s?\{([^{]+?)}\s*$/,""));var c=s.subParser("spanGamut")(a,t,n),u=t.noHeaderId?"":' id="'+r(o)+'"',d=i-1+l.length,h="<h"+d+u+">"+c+"</h"+d+">";return s.subParser("hashBlock")(h,t,n)})),e=n.converter._dispatch("headers.after",e,t,n)})),s.subParser("horizontalRule",(function(e,t,n){"use strict";e=n.converter._dispatch("horizontalRule.before",e,t,n);var i=s.subParser("hashBlock")("<hr />",t,n);return e=(e=(e=e.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,i)).replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,i)).replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,i),e=n.converter._dispatch("horizontalRule.after",e,t,n)})),s.subParser("images",(function(e,t,n){"use strict";function i(e,t,i,l,o,a,r,c){var u=n.gUrls,d=n.gTitles,h=n.gDimensions;if(i=i.toLowerCase(),c||(c=""),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)l="";else if(""===l||null===l){if(""!==i&&null!==i||(i=t.toLowerCase().replace(/ ?\n/g," ")),l="#"+i,s.helper.isUndefined(u[i]))return e;l=u[i],s.helper.isUndefined(d[i])||(c=d[i]),s.helper.isUndefined(h[i])||(o=h[i].width,a=h[i].height)}t=t.replace(/"/g,"&quot;").replace(s.helper.regexes.asteriskDashAndColon,s.helper.escapeCharactersCallback);var p='<img src="'+(l=l.replace(s.helper.regexes.asteriskDashAndColon,s.helper.escapeCharactersCallback))+'" alt="'+t+'"';return c&&s.helper.isString(c)&&(p+=' title="'+(c=c.replace(/"/g,"&quot;").replace(s.helper.regexes.asteriskDashAndColon,s.helper.escapeCharactersCallback))+'"'),o&&a&&(p+=' width="'+(o="*"===o?"auto":o)+'"',p+=' height="'+(a="*"===a?"auto":a)+'"'),p+=" />"}return e=(e=(e=(e=(e=(e=n.converter._dispatch("images.before",e,t,n)).replace(/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,i)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,(function(e,t,n,l,s,o,a,r){return i(e,t,n,l=l.replace(/\s/g,""),s,o,a,r)}))).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,i)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,i)).replace(/!\[([^\[\]]+)]()()()()()/g,i),e=n.converter._dispatch("images.after",e,t,n)})),s.subParser("italicsAndBold",(function(e,t,n){"use strict";function i(e,t,n){return t+e+n}return e=n.converter._dispatch("italicsAndBold.before",e,t,n),e=t.literalMidWordUnderscores?(e=(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,(function(e,t){return i(t,"<strong><em>","</em></strong>")}))).replace(/\b__(\S[\s\S]*?)__\b/g,(function(e,t){return i(t,"<strong>","</strong>")}))).replace(/\b_(\S[\s\S]*?)_\b/g,(function(e,t){return i(t,"<em>","</em>")})):(e=(e=e.replace(/___(\S[\s\S]*?)___/g,(function(e,t){return/\S$/.test(t)?i(t,"<strong><em>","</em></strong>"):e}))).replace(/__(\S[\s\S]*?)__/g,(function(e,t){return/\S$/.test(t)?i(t,"<strong>","</strong>"):e}))).replace(/_([^\s_][\s\S]*?)_/g,(function(e,t){return/\S$/.test(t)?i(t,"<em>","</em>"):e})),e=t.literalMidWordAsterisks?(e=(e=e.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,(function(e,t,n){return i(n,t+"<strong><em>","</em></strong>")}))).replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,(function(e,t,n){return i(n,t+"<strong>","</strong>")}))).replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,(function(e,t,n){return i(n,t+"<em>","</em>")})):(e=(e=e.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,(function(e,t){return/\S$/.test(t)?i(t,"<strong><em>","</em></strong>"):e}))).replace(/\*\*(\S[\s\S]*?)\*\*/g,(function(e,t){return/\S$/.test(t)?i(t,"<strong>","</strong>"):e}))).replace(/\*([^\s*][\s\S]*?)\*/g,(function(e,t){return/\S$/.test(t)?i(t,"<em>","</em>"):e})),e=n.converter._dispatch("italicsAndBold.after",e,t,n)})),s.subParser("lists",(function(e,t,n){"use strict";function i(e,i){n.gListLevel++,e=e.replace(/\n{2,}$/,"\n");var l=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,o=/\n[ \t]*\n(?!¨0)/.test(e+="¨0");return t.disableForced4SpacesIndentedSublists&&(l=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),e=(e=e.replace(l,(function(e,i,l,a,r,c,u){u=u&&""!==u.trim();var d=s.subParser("outdent")(r,t,n),h="";return c&&t.tasklists&&(h=' class="task-list-item" style="list-style-type: none;"',d=d.replace(/^[ \t]*\[(x|X| )?]/m,(function(){var e='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return u&&(e+=" checked"),e+=">"}))),d=d.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,(function(e){return"¨A"+e})),i||d.search(/\n{2,}/)>-1?(d=s.subParser("githubCodeBlocks")(d,t,n),d=s.subParser("blockGamut")(d,t,n)):(d=(d=s.subParser("lists")(d,t,n)).replace(/\n$/,""),d=(d=s.subParser("hashHTMLBlocks")(d,t,n)).replace(/\n\n+/g,"\n\n"),d=o?s.subParser("paragraphs")(d,t,n):s.subParser("spanGamut")(d,t,n)),d="<li"+h+">"+(d=d.replace("¨A",""))+"</li>\n"}))).replace(/¨0/g,""),n.gListLevel--,i&&(e=e.replace(/\s+$/,"")),e}function l(e,t){if("ol"===t){var n=e.match(/^ *(\d+)\./);if(n&&"1"!==n[1])return' start="'+n[1]+'"'}return""}function o(e,n,s){var o=t.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,a=t.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,r="ul"===n?o:a,c="";if(-1!==e.search(r))!function t(u){var d=u.search(r),h=l(e,n);-1!==d?(c+="\n\n<"+n+h+">\n"+i(u.slice(0,d),!!s)+"</"+n+">\n",r="ul"===(n="ul"===n?"ol":"ul")?o:a,t(u.slice(d))):c+="\n\n<"+n+h+">\n"+i(u,!!s)+"</"+n+">\n"}(e);else{var u=l(e,n);c="\n\n<"+n+u+">\n"+i(e,!!s)+"</"+n+">\n"}return c}return e=n.converter._dispatch("lists.before",e,t,n),e+="¨0",e=(e=n.gListLevel?e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,(function(e,t,n){return o(t,n.search(/[*+-]/g)>-1?"ul":"ol",!0)})):e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,(function(e,t,n,i){return o(n,i.search(/[*+-]/g)>-1?"ul":"ol",!1)}))).replace(/¨0/,""),e=n.converter._dispatch("lists.after",e,t,n)})),s.subParser("metadata",(function(e,t,n){"use strict";if(!t.metadata)return e;function i(e){n.metadata.raw=e,(e=(e=e.replace(/&/g,"&amp;").replace(/"/g,"&quot;")).replace(/\n {4}/g," ")).replace(/^([\S ]+): +([\s\S]+?)$/gm,(function(e,t,i){return n.metadata.parsed[t]=i,""}))}return e=(e=(e=(e=n.converter._dispatch("metadata.before",e,t,n)).replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,(function(e,t,n){return i(n),"¨M"}))).replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,(function(e,t,l){return t&&(n.metadata.format=t),i(l),"¨M"}))).replace(/¨M/g,""),e=n.converter._dispatch("metadata.after",e,t,n)})),s.subParser("outdent",(function(e,t,n){"use strict";return e=(e=(e=n.converter._dispatch("outdent.before",e,t,n)).replace(/^(\t|[ ]{1,4})/gm,"¨0")).replace(/¨0/g,""),e=n.converter._dispatch("outdent.after",e,t,n)})),s.subParser("paragraphs",(function(e,t,n){"use strict";for(var i=(e=(e=(e=n.converter._dispatch("paragraphs.before",e,t,n)).replace(/^\n+/g,"")).replace(/\n+$/g,"")).split(/\n{2,}/g),l=[],o=i.length,a=0;a<o;a++){var r=i[a];r.search(/¨(K|G)(\d+)\1/g)>=0?l.push(r):r.search(/\S/)>=0&&(r=(r=s.subParser("spanGamut")(r,t,n)).replace(/^([ \t]*)/g,"<p>"),r+="</p>",l.push(r))}for(o=l.length,a=0;a<o;a++){for(var c="",u=l[a],d=!1;/¨(K|G)(\d+)\1/.test(u);){var h=RegExp.$1,p=RegExp.$2;c=(c="K"===h?n.gHtmlBlocks[p]:d?s.subParser("encodeCode")(n.ghCodeBlocks[p].text,t,n):n.ghCodeBlocks[p].codeblock).replace(/\$/g,"$$$$"),u=u.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,c),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(u)&&(d=!0)}l[a]=u}return e=(e=(e=l.join("\n")).replace(/^\n+/g,"")).replace(/\n+$/g,""),n.converter._dispatch("paragraphs.after",e,t,n)})),s.subParser("runExtension",(function(e,t,n,i){"use strict";if(e.filter)t=e.filter(t,i.converter,n);else if(e.regex){var l=e.regex;l instanceof RegExp||(l=new RegExp(l,"g")),t=t.replace(l,e.replace)}return t})),s.subParser("spanGamut",(function(e,t,n){"use strict";return e=n.converter._dispatch("spanGamut.before",e,t,n),e=s.subParser("codeSpans")(e,t,n),e=s.subParser("escapeSpecialCharsWithinTagAttributes")(e,t,n),e=s.subParser("encodeBackslashEscapes")(e,t,n),e=s.subParser("images")(e,t,n),e=s.subParser("anchors")(e,t,n),e=s.subParser("autoLinks")(e,t,n),e=s.subParser("simplifiedAutoLinks")(e,t,n),e=s.subParser("emoji")(e,t,n),e=s.subParser("underline")(e,t,n),e=s.subParser("italicsAndBold")(e,t,n),e=s.subParser("strikethrough")(e,t,n),e=s.subParser("ellipsis")(e,t,n),e=s.subParser("hashHTMLSpans")(e,t,n),e=s.subParser("encodeAmpsAndAngles")(e,t,n),t.simpleLineBreaks?/\n\n¨K/.test(e)||(e=e.replace(/\n+/g,"<br />\n")):e=e.replace(/  +\n/g,"<br />\n"),e=n.converter._dispatch("spanGamut.after",e,t,n)})),s.subParser("strikethrough",(function(e,t,n){"use strict";return t.strikethrough&&(e=(e=n.converter._dispatch("strikethrough.before",e,t,n)).replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,(function(e,i){return function(e){return t.simplifiedAutoLink&&(e=s.subParser("simplifiedAutoLinks")(e,t,n)),"<del>"+e+"</del>"}(i)})),e=n.converter._dispatch("strikethrough.after",e,t,n)),e})),s.subParser("stripLinkDefinitions",(function(e,t,n){"use strict";var i=function(i,l,o,a,r,c,u){return l=l.toLowerCase(),e.toLowerCase().split(l).length-1<2?i:(o.match(/^data:.+?\/.+?;base64,/)?n.gUrls[l]=o.replace(/\s/g,""):n.gUrls[l]=s.subParser("encodeAmpsAndAngles")(o,t,n),c?c+u:(u&&(n.gTitles[l]=u.replace(/"|'/g,"&quot;")),t.parseImgDimensions&&a&&r&&(n.gDimensions[l]={width:a,height:r}),""))};return e=(e=(e=(e+="¨0").replace(/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm,i)).replace(/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,i)).replace(/¨0/,"")})),s.subParser("tables",(function(e,t,n){"use strict";if(!t.tables)return e;function i(e,i){return"<td"+i+">"+s.subParser("spanGamut")(e,t,n)+"</td>\n"}function l(e){var l,o=e.split("\n");for(l=0;l<o.length;++l)/^ {0,3}\|/.test(o[l])&&(o[l]=o[l].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(o[l])&&(o[l]=o[l].replace(/\|[ \t]*$/,"")),o[l]=s.subParser("codeSpans")(o[l],t,n);var a,r,c,u,d=o[0].split("|").map((function(e){return e.trim()})),h=o[1].split("|").map((function(e){return e.trim()})),p=[],g=[],m=[],f=[];for(o.shift(),o.shift(),l=0;l<o.length;++l)""!==o[l].trim()&&p.push(o[l].split("|").map((function(e){return e.trim()})));if(d.length<h.length)return e;for(l=0;l<h.length;++l)m.push((a=h[l],/^:[ \t]*--*$/.test(a)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(a)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(a)?' style="text-align:center;"':""));for(l=0;l<d.length;++l)s.helper.isUndefined(m[l])&&(m[l]=""),g.push((r=d[l],c=m[l],u=void 0,u="",r=r.trim(),(t.tablesHeaderId||t.tableHeaderId)&&(u=' id="'+r.replace(/ /g,"_").toLowerCase()+'"'),"<th"+u+c+">"+(r=s.subParser("spanGamut")(r,t,n))+"</th>\n"));for(l=0;l<p.length;++l){for(var _=[],b=0;b<g.length;++b)s.helper.isUndefined(p[l][b]),_.push(i(p[l][b],m[b]));f.push(_)}return function(e,t){for(var n="<table>\n<thead>\n<tr>\n",i=e.length,l=0;l<i;++l)n+=e[l];for(n+="</tr>\n</thead>\n<tbody>\n",l=0;l<t.length;++l){n+="<tr>\n";for(var s=0;s<i;++s)n+=t[l][s];n+="</tr>\n"}return n+="</tbody>\n</table>\n"}(g,f)}return e=(e=(e=(e=n.converter._dispatch("tables.before",e,t,n)).replace(/\\(\|)/g,s.helper.escapeCharactersCallback)).replace(/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,l)).replace(/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm,l),e=n.converter._dispatch("tables.after",e,t,n)})),s.subParser("underline",(function(e,t,n){"use strict";return t.underline?(e=n.converter._dispatch("underline.before",e,t,n),e=(e=t.literalMidWordUnderscores?(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,(function(e,t){return"<u>"+t+"</u>"}))).replace(/\b__(\S[\s\S]*?)__\b/g,(function(e,t){return"<u>"+t+"</u>"})):(e=e.replace(/___(\S[\s\S]*?)___/g,(function(e,t){return/\S$/.test(t)?"<u>"+t+"</u>":e}))).replace(/__(\S[\s\S]*?)__/g,(function(e,t){return/\S$/.test(t)?"<u>"+t+"</u>":e}))).replace(/(_)/g,s.helper.escapeCharactersCallback),e=n.converter._dispatch("underline.after",e,t,n)):e})),s.subParser("unescapeSpecialChars",(function(e,t,n){"use strict";return e=(e=n.converter._dispatch("unescapeSpecialChars.before",e,t,n)).replace(/¨E(\d+)E/g,(function(e,t){var n=parseInt(t);return String.fromCharCode(n)})),e=n.converter._dispatch("unescapeSpecialChars.after",e,t,n)})),s.subParser("makeMarkdown.blockquote",(function(e,t){"use strict";var n="";if(e.hasChildNodes())for(var i=e.childNodes,l=i.length,o=0;o<l;++o){var a=s.subParser("makeMarkdown.node")(i[o],t);""!==a&&(n+=a)}return n="> "+(n=n.trim()).split("\n").join("\n> ")})),s.subParser("makeMarkdown.codeBlock",(function(e,t){"use strict";var n=e.getAttribute("language"),i=e.getAttribute("precodenum");return"```"+n+"\n"+t.preList[i]+"\n```"})),s.subParser("makeMarkdown.codeSpan",(function(e){"use strict";return"`"+e.innerHTML+"`"})),s.subParser("makeMarkdown.emphasis",(function(e,t){"use strict";var n="";if(e.hasChildNodes()){n+="*";for(var i=e.childNodes,l=i.length,o=0;o<l;++o)n+=s.subParser("makeMarkdown.node")(i[o],t);n+="*"}return n})),s.subParser("makeMarkdown.header",(function(e,t,n){"use strict";var i=new Array(n+1).join("#"),l="";if(e.hasChildNodes()){l=i+" ";for(var o=e.childNodes,a=o.length,r=0;r<a;++r)l+=s.subParser("makeMarkdown.node")(o[r],t)}return l})),s.subParser("makeMarkdown.hr",(function(){"use strict";return"---"})),s.subParser("makeMarkdown.image",(function(e){"use strict";var t="";return e.hasAttribute("src")&&(t+="!["+e.getAttribute("alt")+"](",t+="<"+e.getAttribute("src")+">",e.hasAttribute("width")&&e.hasAttribute("height")&&(t+=" ="+e.getAttribute("width")+"x"+e.getAttribute("height")),e.hasAttribute("title")&&(t+=' "'+e.getAttribute("title")+'"'),t+=")"),t})),s.subParser("makeMarkdown.links",(function(e,t){"use strict";var n="";if(e.hasChildNodes()&&e.hasAttribute("href")){var i=e.childNodes,l=i.length;n="[";for(var o=0;o<l;++o)n+=s.subParser("makeMarkdown.node")(i[o],t);n+="](",n+="<"+e.getAttribute("href")+">",e.hasAttribute("title")&&(n+=' "'+e.getAttribute("title")+'"'),n+=")"}return n})),s.subParser("makeMarkdown.list",(function(e,t,n){"use strict";var i="";if(!e.hasChildNodes())return"";for(var l=e.childNodes,o=l.length,a=e.getAttribute("start")||1,r=0;r<o;++r)if(void 0!==l[r].tagName&&"li"===l[r].tagName.toLowerCase()){i+=("ol"===n?a.toString()+". ":"- ")+s.subParser("makeMarkdown.listItem")(l[r],t),++a}return(i+="\n\x3c!-- --\x3e\n").trim()})),s.subParser("makeMarkdown.listItem",(function(e,t){"use strict";for(var n="",i=e.childNodes,l=i.length,o=0;o<l;++o)n+=s.subParser("makeMarkdown.node")(i[o],t);return/\n$/.test(n)?n=n.split("\n").join("\n    ").replace(/^ {4}$/gm,"").replace(/\n\n+/g,"\n\n"):n+="\n",n})),s.subParser("makeMarkdown.node",(function(e,t,n){"use strict";n=n||!1;var i="";if(3===e.nodeType)return s.subParser("makeMarkdown.txt")(e,t);if(8===e.nodeType)return"\x3c!--"+e.data+"--\x3e\n\n";if(1!==e.nodeType)return"";switch(e.tagName.toLowerCase()){case"h1":n||(i=s.subParser("makeMarkdown.header")(e,t,1)+"\n\n");break;case"h2":n||(i=s.subParser("makeMarkdown.header")(e,t,2)+"\n\n");break;case"h3":n||(i=s.subParser("makeMarkdown.header")(e,t,3)+"\n\n");break;case"h4":n||(i=s.subParser("makeMarkdown.header")(e,t,4)+"\n\n");break;case"h5":n||(i=s.subParser("makeMarkdown.header")(e,t,5)+"\n\n");break;case"h6":n||(i=s.subParser("makeMarkdown.header")(e,t,6)+"\n\n");break;case"p":n||(i=s.subParser("makeMarkdown.paragraph")(e,t)+"\n\n");break;case"blockquote":n||(i=s.subParser("makeMarkdown.blockquote")(e,t)+"\n\n");break;case"hr":n||(i=s.subParser("makeMarkdown.hr")(e,t)+"\n\n");break;case"ol":n||(i=s.subParser("makeMarkdown.list")(e,t,"ol")+"\n\n");break;case"ul":n||(i=s.subParser("makeMarkdown.list")(e,t,"ul")+"\n\n");break;case"precode":n||(i=s.subParser("makeMarkdown.codeBlock")(e,t)+"\n\n");break;case"pre":n||(i=s.subParser("makeMarkdown.pre")(e,t)+"\n\n");break;case"table":n||(i=s.subParser("makeMarkdown.table")(e,t)+"\n\n");break;case"code":i=s.subParser("makeMarkdown.codeSpan")(e,t);break;case"em":case"i":i=s.subParser("makeMarkdown.emphasis")(e,t);break;case"strong":case"b":i=s.subParser("makeMarkdown.strong")(e,t);break;case"del":i=s.subParser("makeMarkdown.strikethrough")(e,t);break;case"a":i=s.subParser("makeMarkdown.links")(e,t);break;case"img":i=s.subParser("makeMarkdown.image")(e,t);break;default:i=e.outerHTML+"\n\n"}return i})),s.subParser("makeMarkdown.paragraph",(function(e,t){"use strict";var n="";if(e.hasChildNodes())for(var i=e.childNodes,l=i.length,o=0;o<l;++o)n+=s.subParser("makeMarkdown.node")(i[o],t);return n=n.trim()})),s.subParser("makeMarkdown.pre",(function(e,t){"use strict";var n=e.getAttribute("prenum");return"<pre>"+t.preList[n]+"</pre>"})),s.subParser("makeMarkdown.strikethrough",(function(e,t){"use strict";var n="";if(e.hasChildNodes()){n+="~~";for(var i=e.childNodes,l=i.length,o=0;o<l;++o)n+=s.subParser("makeMarkdown.node")(i[o],t);n+="~~"}return n})),s.subParser("makeMarkdown.strong",(function(e,t){"use strict";var n="";if(e.hasChildNodes()){n+="**";for(var i=e.childNodes,l=i.length,o=0;o<l;++o)n+=s.subParser("makeMarkdown.node")(i[o],t);n+="**"}return n})),s.subParser("makeMarkdown.table",(function(e,t){"use strict";var n,i,l="",o=[[],[]],a=e.querySelectorAll("thead>tr>th"),r=e.querySelectorAll("tbody>tr");for(n=0;n<a.length;++n){var c=s.subParser("makeMarkdown.tableCell")(a[n],t),u="---";if(a[n].hasAttribute("style"))switch(a[n].getAttribute("style").toLowerCase().replace(/\s/g,"")){case"text-align:left;":u=":---";break;case"text-align:right;":u="---:";break;case"text-align:center;":u=":---:"}o[0][n]=c.trim(),o[1][n]=u}for(n=0;n<r.length;++n){var d=o.push([])-1,h=r[n].getElementsByTagName("td");for(i=0;i<a.length;++i){var p=" ";void 0!==h[i]&&(p=s.subParser("makeMarkdown.tableCell")(h[i],t)),o[d].push(p)}}var g=3;for(n=0;n<o.length;++n)for(i=0;i<o[n].length;++i){var m=o[n][i].length;m>g&&(g=m)}for(n=0;n<o.length;++n){for(i=0;i<o[n].length;++i)1===n?":"===o[n][i].slice(-1)?o[n][i]=s.helper.padEnd(o[n][i].slice(-1),g-1,"-")+":":o[n][i]=s.helper.padEnd(o[n][i],g,"-"):o[n][i]=s.helper.padEnd(o[n][i],g);l+="| "+o[n].join(" | ")+" |\n"}return l.trim()})),s.subParser("makeMarkdown.tableCell",(function(e,t){"use strict";var n="";if(!e.hasChildNodes())return"";for(var i=e.childNodes,l=i.length,o=0;o<l;++o)n+=s.subParser("makeMarkdown.node")(i[o],t,!0);return n.trim()})),s.subParser("makeMarkdown.txt",(function(e){"use strict";var t=e.nodeValue;return t=(t=t.replace(/ +/g," ")).replace(/¨NBSP;/g," "),t=(t=(t=(t=(t=(t=(t=(t=(t=s.helper.unescapeHTMLEntities(t)).replace(/([*_~|`])/g,"\\$1")).replace(/^(\s*)>/g,"\\$1>")).replace(/^#/gm,"\\#")).replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3")).replace(/^( {0,3}\d+)\./gm,"$1\\.")).replace(/^( {0,3})([+-])/gm,"$1\\$2")).replace(/]([\s]*)\(/g,"\\]$1\\(")).replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:")}));void 0===(i=function(){"use strict";return s}.call(t,n,t,e))||(e.exports=i)}).call(this)},P6u4:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={code:"en",toolbar:{default:"Default",save:"Save",font:"Font",formats:"Formats",fontSize:"Size",bold:"Bold",underline:"Underline",italic:"Italic",strike:"Strike",subscript:"Subscript",superscript:"Superscript",removeFormat:"Remove Format",fontColor:"Font Color",hiliteColor:"Highlight Color",indent:"Indent",outdent:"Outdent",align:"Align",alignLeft:"Align left",alignRight:"Align right",alignCenter:"Align center",alignJustify:"Align justify",list:"List",orderList:"Ordered list",unorderList:"Unordered list",horizontalRule:"Horizontal line",hr_solid:"Solid",hr_dotted:"Dotted",hr_dashed:"Dashed",table:"Table",link:"Link",math:"Math",image:"Image",video:"Video",audio:"Audio",fullScreen:"Full screen",showBlocks:"Show blocks",codeView:"Code view",undo:"Undo",redo:"Redo",preview:"Preview",print:"print",tag_p:"Paragraph",tag_div:"Normal (DIV)",tag_h:"Header",tag_blockquote:"Quote",tag_pre:"Code",template:"Template",lineHeight:"Line height",paragraphStyle:"Paragraph style",textStyle:"Text style",imageGallery:"Image gallery",dir_ltr:"Left to right",dir_rtl:"Right to left",mention:"Mention"},dialogBox:{linkBox:{title:"Insert Link",url:"URL to link",text:"Text to display",newWindowCheck:"Open in new window",downloadLinkCheck:"Download link",bookmark:"Bookmark"},mathBox:{title:"Math",inputLabel:"Mathematical Notation",fontSizeLabel:"Font Size",previewLabel:"Preview"},imageBox:{title:"Insert image",file:"Select from files",url:"Image URL",altText:"Alternative text"},videoBox:{title:"Insert Video",file:"Select from files",url:"Media embed URL, YouTube/Vimeo"},audioBox:{title:"Insert Audio",file:"Select from files",url:"Audio URL"},browser:{tags:"Tags",search:"Search"},caption:"Insert description",close:"Close",submitButton:"Submit",revertButton:"Revert",proportion:"Constrain proportions",basic:"Basic",left:"Left",right:"Right",center:"Center",width:"Width",height:"Height",size:"Size",ratio:"Ratio"},controller:{edit:"Edit",unlink:"Unlink",remove:"Remove",insertRowAbove:"Insert row above",insertRowBelow:"Insert row below",deleteRow:"Delete row",insertColumnBefore:"Insert column before",insertColumnAfter:"Insert column after",deleteColumn:"Delete column",fixedColumnWidth:"Fixed column width",resize100:"Resize 100%",resize75:"Resize 75%",resize50:"Resize 50%",resize25:"Resize 25%",autoSize:"Auto size",mirrorHorizontal:"Mirror, Horizontal",mirrorVertical:"Mirror, Vertical",rotateLeft:"Rotate left",rotateRight:"Rotate right",maxSize:"Max size",minSize:"Min size",tableHeader:"Table header",mergeCells:"Merge cells",splitCells:"Split Cells",HorizontalSplit:"Horizontal split",VerticalSplit:"Vertical split"},menu:{spaced:"Spaced",bordered:"Bordered",neon:"Neon",translucent:"Translucent",shadow:"Shadow",code:"Code"}};return void 0===t&&(e.SUNEDITOR_LANG||Object.defineProperty(e,"SUNEDITOR_LANG",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_LANG,"en",{enumerable:!0,writable:!0,configurable:!0,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_LANG a window with a document");return l(e)}:l(i)},WUQj:function(e,t,n){},XJR1:function(e,t,n){"use strict";n.r(t);n("3FqI"),n("WUQj");var i={name:"colorPicker",add:function(e){const t=e.context;t.colorPicker={colorListHTML:"",_colorInput:"",_defaultColor:"#000",_styleProperty:"color",_currentColor:"",_colorList:[]},t.colorPicker.colorListHTML=this.createColorList(e,this._makeColorList)},createColorList:function(e,t){const n=e.options,i=e.lang,l=n.colorList&&0!==n.colorList.length?n.colorList:["#ff0000","#ff5e00","#ffe400","#abf200","#00d8ff","#0055ff","#6600ff","#ff00dd","#000000","#ffd8d8","#fae0d4","#faf4c0","#e4f7ba","#d4f4fa","#d9e5ff","#e8d9ff","#ffd9fa","#f1f1f1","#ffa7a7","#ffc19e","#faed7d","#cef279","#b2ebf4","#b2ccff","#d1b2ff","#ffb2f5","#bdbdbd","#f15f5f","#f29661","#e5d85c","#bce55c","#5cd1e5","#6699ff","#a366ff","#f261df","#8c8c8c","#980000","#993800","#998a00","#6b9900","#008299","#003399","#3d0099","#990085","#353535","#670000","#662500","#665c00","#476600","#005766","#002266","#290066","#660058","#222222"];let s=[],o='<div class="se-list-inner">';for(let e,n=0,i=l.length;n<i;n++)e=l[n],e&&("string"==typeof e&&(s.push(e),n<i-1)||(s.length>0&&(o+='<div class="se-selector-color">'+t(s)+"</div>",s=[]),"object"==typeof e&&(o+='<div class="se-selector-color">'+t(e)+"</div>")));return o+='<form class="se-form-group"><input type="text" maxlength="9" class="_se_color_picker_input se-color-input"/><button type="submit" class="se-btn-primary _se_color_picker_submit" title="'+i.dialogBox.submitButton+'" aria-label="'+i.dialogBox.submitButton+'">'+e.icons.checked+'</button><button type="button" class="se-btn _se_color_picker_remove" title="'+i.toolbar.removeFormat+'" aria-label="'+i.toolbar.removeFormat+'">'+e.icons.erase+"</button></form></div>",o},_makeColorList:function(e){let t="";t+='<ul class="se-color-pallet">';for(let n,i=0,l=e.length;i<l;i++)n=e[i],"string"==typeof n&&(t+='<li><button type="button" data-value="'+n+'" title="'+n+'" aria-label="'+n+'" style="background-color:'+n+';"></button></li>');return t+="</ul>",t},init:function(e,t){const n=this.plugins.colorPicker;let i=t||(n.getColorInNode.call(this,e)||this.context.colorPicker._defaultColor);i=n.isHexColor(i)?i:n.rgb2hex(i)||i;const l=this.context.colorPicker._colorList;if(l)for(let e=0,t=l.length;e<t;e++)i.toLowerCase()===l[e].getAttribute("data-value").toLowerCase()?this.util.addClass(l[e],"active"):this.util.removeClass(l[e],"active");n.setInputText.call(this,n.colorName2hex.call(this,i))},setCurrentColor:function(e){this.context.colorPicker._currentColor=e,this.context.colorPicker._colorInput.style.borderColor=e},setInputText:function(e){e=/^#/.test(e)?e:"#"+e,this.context.colorPicker._colorInput.value=e,this.plugins.colorPicker.setCurrentColor.call(this,e)},getColorInNode:function(e){let t="";const n=this.context.colorPicker._styleProperty;for(;e&&!this.util.isWysiwygDiv(e)&&0===t.length;)1===e.nodeType&&e.style[n]&&(t=e.style[n]),e=e.parentNode;return t},isHexColor:function(e){return/^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(e)},rgb2hex:function(e){const t=e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);return t&&4===t.length?"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2):""},colorName2hex:function(e){if(/^#/.test(e))return e;var t=this.util.createElement("div");t.style.display="none",t.style.color=e;var n=this._w.getComputedStyle(this._d.body.appendChild(t)).color.match(/\d+/g).map((function(e){return parseInt(e,10)}));return this.util.removeItem(t),n.length>=3&&"#"+((1<<24)+(n[0]<<16)+(n[1]<<8)+n[2]).toString(16).substr(1)}},l={name:"fontColor",display:"submenu",add:function(e,t){e.addModule([i]);const n=e.context;n.fontColor={previewEl:null,colorInput:null,colorList:null};let l=this.setSubmenu(e);n.fontColor.colorInput=l.querySelector("._se_color_picker_input"),n.fontColor.colorInput.addEventListener("keyup",this.onChangeInput.bind(e)),l.querySelector("._se_color_picker_submit").addEventListener("click",this.submit.bind(e)),l.querySelector("._se_color_picker_remove").addEventListener("click",this.remove.bind(e)),l.addEventListener("click",this.pickup.bind(e)),n.fontColor.colorList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,l),l=null},setSubmenu:function(e){const t=e.context.colorPicker.colorListHTML,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML=t,n},on:function(){const e=this.context.colorPicker,t=this.context.fontColor;e._colorInput=t.colorInput;const n=this.wwComputedStyle.color;e._defaultColor=n?this.plugins.colorPicker.isHexColor(n)?n:this.plugins.colorPicker.rgb2hex(n):"#333333",e._styleProperty="color",e._colorList=t.colorList,this.plugins.colorPicker.init.call(this,this.getSelectionNode(),null)},onChangeInput:function(e){this.plugins.colorPicker.setCurrentColor.call(this,e.target.value)},submit:function(){this.plugins.fontColor.applyColor.call(this,this.context.colorPicker._currentColor)},pickup:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.fontColor.applyColor.call(this,e.target.getAttribute("data-value"))},remove:function(){this.nodeChange(null,["color"],["span"],!0),this.submenuOff()},applyColor:function(e){if(!e)return;const t=this.util.createElement("SPAN");t.style.color=e,this.nodeChange(t,["color"],null,null),this.submenuOff()}},s={name:"hiliteColor",display:"submenu",add:function(e,t){e.addModule([i]);const n=e.context;n.hiliteColor={previewEl:null,colorInput:null,colorList:null};let l=this.setSubmenu(e);n.hiliteColor.colorInput=l.querySelector("._se_color_picker_input"),n.hiliteColor.colorInput.addEventListener("keyup",this.onChangeInput.bind(e)),l.querySelector("._se_color_picker_submit").addEventListener("click",this.submit.bind(e)),l.querySelector("._se_color_picker_remove").addEventListener("click",this.remove.bind(e)),l.addEventListener("click",this.pickup.bind(e)),n.hiliteColor.colorList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,l),l=null},setSubmenu:function(e){const t=e.context.colorPicker.colorListHTML,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML=t,n},on:function(){const e=this.context.colorPicker,t=this.context.hiliteColor;e._colorInput=t.colorInput;const n=this.wwComputedStyle.backgroundColor;e._defaultColor=n?this.plugins.colorPicker.isHexColor(n)?n:this.plugins.colorPicker.rgb2hex(n):"#ffffff",e._styleProperty="backgroundColor",e._colorList=t.colorList,this.plugins.colorPicker.init.call(this,this.getSelectionNode(),null)},onChangeInput:function(e){this.plugins.colorPicker.setCurrentColor.call(this,e.target.value)},submit:function(){this.plugins.hiliteColor.applyColor.call(this,this.context.colorPicker._currentColor)},pickup:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.hiliteColor.applyColor.call(this,e.target.getAttribute("data-value"))},remove:function(){this.nodeChange(null,["background-color"],["span"],!0),this.submenuOff()},applyColor:function(e){if(!e)return;const t=this.util.createElement("SPAN");t.style.backgroundColor=e,this.nodeChange(t,["background-color"],null,null),this.submenuOff()}},o={name:"template",display:"submenu",add:function(e,t){e.context.template={selectedIndex:-1};let n=this.setSubmenu(e);n.querySelector("ul").addEventListener("click",this.pickup.bind(e)),e.initMenuTarget(this.name,t,n),n=null},setSubmenu:function(e){const t=e.options.templates;if(!t||0===t.length)throw Error('[SUNEDITOR.plugins.template.fail] To use the "template" plugin, please define the "templates" option.');const n=e.util.createElement("DIV");n.className="se-list-layer";let i='<div class="se-submenu se-list-inner"><ul class="se-list-basic">';for(let e,n=0,l=t.length;n<l;n++)e=t[n],i+='<li><button type="button" class="se-btn-list" data-value="'+n+'" title="'+e.name+'" aria-label="'+e.name+'">'+e.name+"</button></li>";return i+="</ul></div>",n.innerHTML=i,n},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation(),this.context.template.selectedIndex=1*e.target.getAttribute("data-value");const t=this.options.templates[this.context.template.selectedIndex];if(!t.html)throw this.submenuOff(),Error('[SUNEDITOR.template.fail] cause : "templates[i].html not found"');this.setContents(t.html),this.submenuOff()}},a=n("1kvd"),r=n.n(a),c={name:"selectMenu",add:function(e){e.context.selectMenu={caller:{},callerContext:null}},setForm:function(){return'<div class="se-select-list"></div>'},createList:function(e,t,n){e.form.innerHTML="<ul>"+n+"</ul>",e.items=t,e.menus=e.form.querySelectorAll("li")},initEvent:function(e,t){const n=t.querySelector(".se-select-list"),i=this.context.selectMenu.caller[e]={form:n,items:[],menus:[],index:-1,item:null,clickMethod:null,callerName:e};n.addEventListener("mousedown",this.plugins.selectMenu.onMousedown_list),n.addEventListener("mousemove",this.plugins.selectMenu.onMouseMove_list.bind(this,i)),n.addEventListener("click",this.plugins.selectMenu.onClick_list.bind(this,i))},onMousedown_list:function(e){e.preventDefault(),e.stopPropagation()},onMouseMove_list:function(e,t){this.util.addClass(e.form,"__se_select-menu-mouse-move");const n=t.target.getAttribute("data-index");n&&(e.index=1*n)},onClick_list:function(e,t){const n=t.target.getAttribute("data-index");n&&e.clickMethod.call(this,e.items[n])},moveItem:function(e,t){this.util.removeClass(e.form,"__se_select-menu-mouse-move"),t=e.index+t;const n=e.menus,i=n.length,l=e.index=t>=i?0:t<0?i-1:t;for(let e=0;e<i;e++)e===l?this.util.addClass(n[e],"active"):this.util.removeClass(n[e],"active");e.item=e.items[l]},getItem:function(e,t){return t=!t||t<0?e.index:t,e.items[t]},on:function(e,t){const n=this.context.selectMenu.caller[e];this.context.selectMenu.callerContext=n,n.clickMethod=t,n.callerName=e},open:function(e,t){const n=e.form;n.style.visibility="hidden",n.style.display="block",t(n),n.style.visibility=""},close:function(e){e.form.style.display="none",e.items=[],e.menus=[],e.index=-1,e.item=null},init:function(e){e&&(e.items=[],e.menus=[],e.index=-1,e.item=null,e.callerName="",this.context.selectMenu.callerContext=null)}},u={name:"anchor",add:function(e){e.addModule([c]),e.context.anchor={caller:{},forms:this.setDialogForm(e),host:(e._w.location.origin+e._w.location.pathname).replace(/\/$/,""),callerContext:null}},setDialogForm:function(e){const t=e.lang,n=e.options.linkRel,i=(e.options.linkRelDefault.default||"").split(" "),l=e.icons,s=e.util.createElement("DIV");let o='<div class="se-dialog-body"><div class="se-dialog-form"><label>'+t.dialogBox.linkBox.url+'</label><div class="se-dialog-form-files"><input class="se-input-form se-input-url" type="text" placeholder="'+(e.options.protocol||"")+'" /><button type="button" class="se-btn se-dialog-files-edge-button _se_bookmark_button" title="'+t.dialogBox.linkBox.bookmark+'" aria-label="'+t.dialogBox.linkBox.bookmark+'">'+l.bookmark+"</button>"+e.plugins.selectMenu.setForm()+'</div><div class="se-anchor-preview-form"><span class="se-svg se-anchor-preview-icon _se_anchor_bookmark_icon">'+l.bookmark+'</span><span class="se-svg se-anchor-preview-icon _se_anchor_download_icon">'+l.download+'</span><pre class="se-link-preview"></pre></div></div><div class="se-dialog-form"><label>'+t.dialogBox.linkBox.text+'</label><input class="se-input-form _se_anchor_text" type="text" /></div><div class="se-dialog-form-footer"><label><input type="checkbox" class="se-dialog-btn-check _se_anchor_check" />&nbsp;'+t.dialogBox.linkBox.newWindowCheck+'</label><label><input type="checkbox" class="se-dialog-btn-check _se_anchor_download" />&nbsp;'+t.dialogBox.linkBox.downloadLinkCheck+"</label>";if(n.length>0){o+='<div class="se-anchor-rel"><button type="button" class="se-btn se-btn-select se-anchor-rel-btn">&lt;rel&gt;</button><div class="se-anchor-rel-wrapper"><pre class="se-link-preview se-anchor-rel-preview"></pre></div><div class="se-list-layer"><div class="se-list-inner"><ul class="se-list-basic se-list-checked">';for(let e,t=0,s=n.length;t<s;t++)e=n[t],o+='<li><button type="button" class="se-btn-list'+(i.indexOf(e)>-1?" se-checked":"")+'" data-command="'+e+'" title="'+e+'" aria-label="'+e+'"><span class="se-svg">'+l.checked+"</span>"+e+"</button></li>";o+="</ul></div></div></div>"}return o+="</div></div>",s.innerHTML=o,s},initEvent:function(e,t){const n=this.plugins.anchor,i=this.context.anchor.caller[e]={modal:t,urlInput:null,linkDefaultRel:this.options.linkRelDefault,defaultRel:this.options.linkRelDefault.default||"",currentRel:[],linkAnchor:null,linkValue:"",_change:!1,callerName:e};"string"==typeof i.linkDefaultRel.default&&(i.linkDefaultRel.default=i.linkDefaultRel.default.trim()),"string"==typeof i.linkDefaultRel.check_new_window&&(i.linkDefaultRel.check_new_window=i.linkDefaultRel.check_new_window.trim()),"string"==typeof i.linkDefaultRel.check_bookmark&&(i.linkDefaultRel.check_bookmark=i.linkDefaultRel.check_bookmark.trim()),i.urlInput=t.querySelector(".se-input-url"),i.anchorText=t.querySelector("._se_anchor_text"),i.newWindowCheck=t.querySelector("._se_anchor_check"),i.downloadCheck=t.querySelector("._se_anchor_download"),i.download=t.querySelector("._se_anchor_download_icon"),i.preview=t.querySelector(".se-link-preview"),i.bookmark=t.querySelector("._se_anchor_bookmark_icon"),i.bookmarkButton=t.querySelector("._se_bookmark_button"),this.plugins.selectMenu.initEvent.call(this,e,t);const l=this.context.selectMenu.caller[e];this.options.linkRel.length>0&&(i.relButton=t.querySelector(".se-anchor-rel-btn"),i.relList=t.querySelector(".se-list-layer"),i.relPreview=t.querySelector(".se-anchor-rel-preview"),i.relButton.addEventListener("click",n.onClick_relButton.bind(this,i)),i.relList.addEventListener("click",n.onClick_relList.bind(this,i))),i.newWindowCheck.addEventListener("change",n.onChange_newWindowCheck.bind(this,i)),i.downloadCheck.addEventListener("change",n.onChange_downloadCheck.bind(this,i)),i.anchorText.addEventListener("input",n.onChangeAnchorText.bind(this,i)),i.urlInput.addEventListener("input",n.onChangeUrlInput.bind(this,i)),i.urlInput.addEventListener("keydown",n.onKeyDownUrlInput.bind(this,l)),i.urlInput.addEventListener("focus",n.onFocusUrlInput.bind(this,i,l)),i.urlInput.addEventListener("blur",n.onBlurUrlInput.bind(this,l)),i.bookmarkButton.addEventListener("click",n.onClick_bookmarkButton.bind(this,i))},on:function(e,t){const n=this.plugins.anchor;if(t){if(e.linkAnchor){this.context.dialog.updateModal=!0;const t=e.linkAnchor.getAttribute("href");e.linkValue=e.preview.textContent=e.urlInput.value=n.selfPathBookmark.call(this,t)?t.substr(t.lastIndexOf("#")):t,e.anchorText.value=e.linkAnchor.textContent,e.newWindowCheck.checked=!!/_blank/i.test(e.linkAnchor.target),e.downloadCheck.checked=e.linkAnchor.download}}else n.init.call(this,e),e.anchorText.value=this.getSelection().toString().trim(),e.newWindowCheck.checked=this.options.linkTargetNewWindow;this.context.anchor.callerContext=e,n.setRel.call(this,e,t&&e.linkAnchor?e.linkAnchor.rel:e.defaultRel),n.setLinkPreview.call(this,e,e.linkValue),this.plugins.selectMenu.on.call(this,e.callerName,this.plugins.anchor.setHeaderBookmark)},selfPathBookmark:function(e){const t=this._w.location.href.replace(/\/$/,"");return 0===e.indexOf("#")||0===e.indexOf(t)&&e.indexOf("#")===(-1===t.indexOf("#")?t.length:t.substr(0,t.indexOf("#")).length)},_closeRelMenu:null,toggleRelList:function(e,t){if(t){const t=e.relButton,n=e.relList;this.util.addClass(t,"active"),n.style.visibility="hidden",n.style.display="block",this.options.rtl?n.style.left=t.offsetLeft-n.offsetWidth-1+"px":n.style.left=t.offsetLeft+t.offsetWidth+1+"px",n.style.top=t.offsetTop+t.offsetHeight/2-n.offsetHeight/2+"px",n.style.visibility="",this.plugins.anchor._closeRelMenu=function(e,t,n){n&&(e.relButton.contains(n.target)||e.relList.contains(n.target))||(this.util.removeClass(t,"active"),e.relList.style.display="none",this.modalForm.removeEventListener("click",this.plugins.anchor._closeRelMenu),this.plugins.anchor._closeRelMenu=null)}.bind(this,e,t),this.modalForm.addEventListener("click",this.plugins.anchor._closeRelMenu)}else this.plugins.anchor._closeRelMenu&&this.plugins.anchor._closeRelMenu()},onClick_relButton:function(e,t){this.plugins.anchor.toggleRelList.call(this,e,!this.util.hasClass(t.target,"active"))},onClick_relList:function(e,t){const n=t.target,i=n.getAttribute("data-command");if(!i)return;const l=e.currentRel,s=this.util.toggleClass(n,"se-checked"),o=l.indexOf(i);s?-1===o&&l.push(i):o>-1&&l.splice(o,1),e.relPreview.title=e.relPreview.textContent=l.join(" ")},setRel:function(e,t){const n=e.relList,i=e.currentRel=t?t.split(" "):[];if(!n)return;const l=n.querySelectorAll("button");for(let e,t=0,n=l.length;t<n;t++)e=l[t].getAttribute("data-command"),i.indexOf(e)>-1?this.util.addClass(l[t],"se-checked"):this.util.removeClass(l[t],"se-checked");e.relPreview.title=e.relPreview.textContent=i.join(" ")},createHeaderList:function(e,t,n){const i=this.util.getListChildren(this.context.element.wysiwyg,(function(e){return/h[1-6]/i.test(e.nodeName)}));if(0===i.length)return;const l=new this._w.RegExp("^"+n.replace(/^#/,""),"i"),s=[];let o="";for(let e,t=0,n=i.length;t<n;t++)e=i[t],l.test(e.textContent)&&(s.push(e),o+='<li class="se-select-item" data-index="'+t+'">'+e.textContent+"</li>");0===s.length?this.plugins.selectMenu.close.call(this,t):(this.plugins.selectMenu.createList(t,s,o),this.plugins.selectMenu.open.call(this,t,this.plugins.anchor._setMenuListPosition.bind(this,e)))},_setMenuListPosition:function(e,t){t.style.top=e.urlInput.offsetHeight+1+"px"},onKeyDownUrlInput:function(e,t){switch(t.keyCode){case 38:t.preventDefault(),t.stopPropagation(),this.plugins.selectMenu.moveItem.call(this,e,-1);break;case 40:t.preventDefault(),t.stopPropagation(),this.plugins.selectMenu.moveItem.call(this,e,1);break;case 13:e.index>-1&&(t.preventDefault(),t.stopPropagation(),this.plugins.anchor.setHeaderBookmark.call(this,this.plugins.selectMenu.getItem(e,null)))}},setHeaderBookmark:function(e){const t=this.context.anchor.callerContext,n=e.id||"h_"+this._w.Math.random().toString().replace(/.+\./,"");e.id=n,t.urlInput.value="#"+n,t.anchorText.value.trim()&&t._change||(t.anchorText.value=e.textContent),this.plugins.anchor.setLinkPreview.call(this,t,t.urlInput.value),this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext),this.context.anchor.callerContext.urlInput.focus()},onChangeAnchorText:function(e,t){e._change=!!t.target.value.trim()},onChangeUrlInput:function(e,t){const n=t.target.value.trim();this.plugins.anchor.setLinkPreview.call(this,e,n),this.plugins.anchor.selfPathBookmark.call(this,n)?this.plugins.anchor.createHeaderList.call(this,e,this.context.selectMenu.callerContext,n):this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext)},onFocusUrlInput:function(e,t){const n=e.urlInput.value;this.plugins.anchor.selfPathBookmark.call(this,n)&&this.plugins.anchor.createHeaderList.call(this,e,t,n)},onBlurUrlInput:function(e){this.plugins.selectMenu.close.call(this,e)},setLinkPreview:function(e,t){const n=e.preview,i=this.options.linkProtocol,l=this.options.linkNoPrefix,s=/^(mailto\:|tel\:|sms\:|https*\:\/\/|#)/.test(t)||0===t.indexOf(i),o=!!i&&this._w.RegExp("^"+this.util.escapeStringRegexp(t.substr(0,i.length))).test(i);t=e.linkValue=n.textContent=t?l?t:!i||s||o?s?t:/^www\./.test(t)?"http://"+t:this.context.anchor.host+(/^\//.test(t)?"":"/")+t:i+t:"",this.plugins.anchor.selfPathBookmark.call(this,t)?(e.bookmark.style.display="block",this.util.addClass(e.bookmarkButton,"active")):(e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active")),!this.plugins.anchor.selfPathBookmark.call(this,t)&&e.downloadCheck.checked?e.download.style.display="block":e.download.style.display="none"},setCtx:function(e,t){e&&(t.linkAnchor=e,t.linkValue=e.href,t.currentRel=e.rel.split(" "))},updateAnchor:function(e,t,n,i,l){!this.plugins.anchor.selfPathBookmark.call(this,t)&&i.downloadCheck.checked?e.setAttribute("download",n||t):e.removeAttribute("download"),i.newWindowCheck.checked?e.target="_blank":e.removeAttribute("target");const s=i.currentRel.join(" ");s?e.rel=s:e.removeAttribute("rel"),e.href=t,l?0===e.children.length&&(e.textContent=""):e.textContent=n},createAnchor:function(e,t){if(0===e.linkValue.length)return null;const n=e.linkValue,i=e.anchorText,l=0===i.value.length?n:i.value,s=e.linkAnchor||this.util.createElement("A");return this.plugins.anchor.updateAnchor.call(this,s,n,l,e,t),e.linkValue=e.preview.textContent=e.urlInput.value=e.anchorText.value="",s},onClick_bookmarkButton:function(e){let t=e.urlInput.value;this.plugins.anchor.selfPathBookmark.call(this,t)?(t=t.substr(1),e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active"),this.plugins.selectMenu.close.call(this,this.context.selectMenu.callerContext)):(t="#"+t,e.bookmark.style.display="block",this.util.addClass(e.bookmarkButton,"active"),e.downloadCheck.checked=!1,e.download.style.display="none",this.plugins.anchor.createHeaderList.call(this,e,this.context.selectMenu.callerContext,t)),e.urlInput.value=t,this.plugins.anchor.setLinkPreview.call(this,e,t),e.urlInput.focus()},onChange_newWindowCheck:function(e,t){"string"==typeof e.linkDefaultRel.check_new_window&&(t.target.checked?this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relMerge.call(this,e,e.linkDefaultRel.check_new_window)):this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relDelete.call(this,e,e.linkDefaultRel.check_new_window)))},onChange_downloadCheck:function(e,t){t.target.checked?(e.download.style.display="block",e.bookmark.style.display="none",this.util.removeClass(e.bookmarkButton,"active"),e.linkValue=e.preview.textContent=e.urlInput.value=e.urlInput.value.replace(/^\#+/,""),"string"==typeof e.linkDefaultRel.check_bookmark&&this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relMerge.call(this,e,e.linkDefaultRel.check_bookmark))):(e.download.style.display="none","string"==typeof e.linkDefaultRel.check_bookmark&&this.plugins.anchor.setRel.call(this,e,this.plugins.anchor._relDelete.call(this,e,e.linkDefaultRel.check_bookmark)))},_relMerge:function(e,t){const n=e.currentRel;if(!t)return n.join(" ");if(/^only\:/.test(t))return t=t.replace(/^only\:/,"").trim(),e.currentRel=t.split(" "),t;const i=t.split(" ");for(let e,t=0,l=i.length;t<l;t++)e=n.indexOf(i[t]),-1===e&&n.push(i[t]);return n.join(" ")},_relDelete:function(e,t){if(!t)return e.currentRel.join(" ");/^only\:/.test(t)&&(t=t.replace(/^only\:/,"").trim());const n=e.currentRel.join(" ").replace(this._w.RegExp(t+"\\s*"),"");return e.currentRel=n.split(" "),n},init:function(e){e.linkAnchor=null,e.linkValue=e.preview.textContent=e.urlInput.value="",e.anchorText.value="",e.newWindowCheck.checked=!1,e.downloadCheck.checked=!1,e._change=!1,this.plugins.anchor.setRel.call(this,e,e.defaultRel),e.relList&&this.plugins.anchor.toggleRelList.call(this,e,!1),this.context.anchor.callerContext=null,this.plugins.selectMenu.init.call(this,this.context.selectMenu.callerContext)}},d={name:"link",display:"dialog",add:function(e){e.addModule([r.a,u]);const t=e.context,n=t.link={focusElement:null,_linkAnchor:null,anchorCtx:null};let i=this.setDialog(e);n.modal=i;let l=this.setController_LinkButton(e);n.linkController=l,i.querySelector("form").addEventListener("submit",this.submit.bind(e)),l.addEventListener("click",this.onClick_linkController.bind(e)),t.dialog.modal.appendChild(i),t.element.relative.appendChild(l),e.plugins.anchor.initEvent.call(e,"link",i),n.focusElement=t.anchor.caller.link.urlInput,i=null,l=null},setDialog:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.icons;n.className="se-dialog-content",n.style.display="none";let l='<form><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+i.cancel+'</button><span class="se-modal-title">'+t.dialogBox.linkBox.title+"</span></div>"+e.context.anchor.forms.innerHTML+'<div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+t.dialogBox.submitButton+'" aria-label="'+t.dialogBox.submitButton+'"><span>'+t.dialogBox.submitButton+"</span></button></div></form>";return n.innerHTML=l,n},setController_LinkButton:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-link",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><span><a target="_blank" href=""></a>&nbsp;</span><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-btn se-tooltip">'+n.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="unlink" tabindex="-1" class="se-btn se-tooltip">'+n.unlink+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.unlink+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},open:function(){this.plugins.dialog.open.call(this,"link","link"===this.currentControllerName)},submit:function(e){this.showLoading(),e.preventDefault(),e.stopPropagation();try{const e=this.plugins.anchor.createAnchor.call(this,this.context.anchor.caller.link,!1);if(null===e)return;if(this.context.dialog.updateModal){const e=this.context.link._linkAnchor.childNodes[0];this.setRange(e,0,e,e.textContent.length)}else{const t=this.getSelectedElements();if(t.length>1){const n=this.util.createElement(t[0].nodeName);if(n.appendChild(e),!this.insertNode(n,null,!0))return}else if(!this.insertNode(e,null,!0))return;this.setRange(e.childNodes[0],0,e.childNodes[0],e.textContent.length)}}finally{this.plugins.dialog.close.call(this),this.closeLoading(),this.history.push(!1)}return!1},active:function(e){if(e){if(this.util.isAnchor(e)&&null===e.getAttribute("data-image-link"))return this.controllerArray.indexOf(this.context.link.linkController)<0&&this.plugins.link.call_controller.call(this,e),!0}else this.controllerArray.indexOf(this.context.link.linkController)>-1&&this.controllersOff();return!1},on:function(e){this.plugins.anchor.on.call(this,this.context.anchor.caller.link,e)},call_controller:function(e){this.editLink=this.context.link._linkAnchor=this.context.anchor.caller.link.linkAnchor=e;const t=this.context.link.linkController,n=t.querySelector("a");n.href=e.href,n.title=e.textContent,n.textContent=e.textContent,this.util.addClass(e,"on"),this.setControllerPosition(t,e,"bottom",{left:0,top:0}),this.controllersOn(t,e,"link",this.util.removeClass.bind(this.util,this.context.link._linkAnchor,"on"))},onClick_linkController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")||e.target.parentNode.getAttribute("data-command");if(t){if(e.preventDefault(),/update/.test(t))this.plugins.dialog.open.call(this,"link",!0);else if(/unlink/.test(t)){const e=this.util.getChildElement(this.context.link._linkAnchor,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1),t=this.util.getChildElement(this.context.link._linkAnchor,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0);this.setRange(e,0,t,t.textContent.length),this.nodeChange(null,null,["A"],!1)}else this.util.removeItem(this.context.link._linkAnchor),this.context.anchor.caller.link.linkAnchor=null,this.focus(),this.history.push(!1);this.controllersOff()}},init:function(){this.context.link.linkController.style.display="none",this.plugins.anchor.init.call(this,this.context.anchor.caller.link)}},h=n("ZED3"),p=n.n(h),g=n("ee5k"),m=n.n(g),f=n("gjS+"),_=n.n(f),b={name:"image",display:"dialog",add:function(e){e.addModule([r.a,u,p.a,m.a,_.a]);const t=e.options,n=e.context,i=n.image={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,sizeUnit:t._imageSizeUnit,_linkElement:"",_altText:"",_align:"none",_floatClassRegExp:"__se__float\\-[a-z]+",_v_src:{_linkValue:""},svgDefaultSize:"30%",base64RenderIndex:0,_element:null,_cover:null,_container:null,inputX:null,inputY:null,_element_w:1,_element_h:1,_element_l:0,_element_t:0,_defaultSizeX:"auto",_defaultSizeY:"auto",_origin_w:"auto"===t.imageWidth?"":t.imageWidth,_origin_h:"auto"===t.imageHeight?"":t.imageHeight,_proportionChecked:!0,_resizing:t.imageResizing,_resizeDotHide:!t.imageHeightShow,_rotation:t.imageRotation,_alignHide:!t.imageAlignShow,_onlyPercentage:t.imageSizeOnlyPercentage,_ratio:!1,_ratioX:1,_ratioY:1,_captionShow:!0,_captionChecked:!1,_caption:null,captionCheckEl:null};let l=this.setDialog(e);i.modal=l,i.imgInputFile=l.querySelector("._se_image_file"),i.imgUrlFile=l.querySelector("._se_image_url"),i.focusElement=i.imgInputFile||i.imgUrlFile,i.altText=l.querySelector("._se_image_alt"),i.captionCheckEl=l.querySelector("._se_image_check_caption"),i.previewSrc=l.querySelector("._se_tab_content_image .se-link-preview"),l.querySelector(".se-dialog-tabs").addEventListener("click",this.openTab.bind(e)),l.querySelector("form").addEventListener("submit",this.submit.bind(e)),i.imgInputFile&&l.querySelector(".se-file-remove").addEventListener("click",this._removeSelectedFiles.bind(i.imgInputFile,i.imgUrlFile,i.previewSrc)),i.imgUrlFile&&i.imgUrlFile.addEventListener("input",this._onLinkPreview.bind(i.previewSrc,i._v_src,t.linkProtocol)),i.imgInputFile&&i.imgUrlFile&&i.imgInputFile.addEventListener("change",this._fileInputChange.bind(i));const s=l.querySelector(".__se__gallery");s&&s.addEventListener("click",this._openGallery.bind(e)),i.proportion={},i.inputX={},i.inputY={},t.imageResizing&&(i.proportion=l.querySelector("._se_image_check_proportion"),i.inputX=l.querySelector("._se_image_size_x"),i.inputY=l.querySelector("._se_image_size_y"),i.inputX.value=t.imageWidth,i.inputY.value=t.imageHeight,i.inputX.addEventListener("keyup",this.setInputSize.bind(e,"x")),i.inputY.addEventListener("keyup",this.setInputSize.bind(e,"y")),i.inputX.addEventListener("change",this.setRatio.bind(e)),i.inputY.addEventListener("change",this.setRatio.bind(e)),i.proportion.addEventListener("change",this.setRatio.bind(e)),l.querySelector(".se-dialog-btn-revert").addEventListener("click",this.sizeRevert.bind(e))),n.dialog.modal.appendChild(l),e.plugins.anchor.initEvent.call(e,"image",l.querySelector("._se_tab_content_url")),i.anchorCtx=e.context.anchor.caller.image,l=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content se-dialog-image",i.style.display="none";let l='<div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" class="close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.imageBox.title+'</span></div><div class="se-dialog-tabs"><button type="button" class="_se_tab_link active" data-tab-link="image">'+n.toolbar.image+'</button><button type="button" class="_se_tab_link" data-tab-link="url">'+n.toolbar.link+'</button></div><form method="post" enctype="multipart/form-data"><div class="_se_tab_content _se_tab_content_image"><div class="se-dialog-body"><div style="border-bottom: 1px dashed #ccc;">';if(t.imageFileInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.imageBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_image_file" type="file" accept="'+t.imageAccept+'"'+(t.imageMultipleFile?' multiple="multiple"':"")+'/><button type="button" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.imageUrlInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.imageBox.url+'</label><div class="se-dialog-form-files"><input class="se-input-form se-input-url _se_image_url" type="text" />'+(t.imageGalleryUrl&&e.plugins.imageGallery?'<button type="button" class="se-btn se-dialog-files-edge-button __se__gallery" title="'+n.toolbar.imageGallery+'" aria-label="'+n.toolbar.imageGallery+'">'+e.icons.image_gallery+"</button>":"")+'</div><pre class="se-link-preview"></pre></div>'),l+='</div><div class="se-dialog-form"><label>'+n.dialogBox.imageBox.altText+'</label><input class="se-input-form _se_image_alt" type="text" /></div>',t.imageResizing){const i=t.imageSizeOnlyPercentage,s=i?' style="display: none !important;"':"",o=t.imageHeightShow?"":' style="display: none !important;"';l+='<div class="se-dialog-form">',i||!t.imageHeightShow?l+='<div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.size+"</label></div>":l+='<div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.width+'</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h">'+n.dialogBox.height+"</label></div>",l+='<input class="se-input-control _se_image_size_x" placeholder="auto"'+(i?' type="number" min="1"':'type="text"')+(i?' max="100"':"")+' /><label class="se-dialog-size-x"'+o+">"+(i?"%":"x")+'</label><input type="text" class="se-input-control _se_image_size_y" placeholder="auto"'+s+(i?' max="100"':"")+o+"/><label"+s+o+'><input type="checkbox" class="se-dialog-btn-check _se_image_check_proportion" checked/>&nbsp;'+n.dialogBox.proportion+'</label><button type="button" title="'+n.dialogBox.revertButton+'" aria-label="'+n.dialogBox.revertButton+'" class="se-btn se-dialog-btn-revert" style="float: right;">'+e.icons.revert+"</button></div>"}return l+='<div class="se-dialog-form se-dialog-form-footer"><label><input type="checkbox" class="se-dialog-btn-check _se_image_check_caption" />&nbsp;'+n.dialogBox.caption+'</label></div></div></div><div class="_se_tab_content _se_tab_content_url" style="display: none">'+e.context.anchor.forms.innerHTML+'</div><div class="se-dialog-footer"><div'+(t.imageAlignShow?"":' style="display: none"')+'><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="none" checked>'+n.dialogBox.basic+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="left">'+n.dialogBox.left+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="center">'+n.dialogBox.center+'</label><label><input type="radio" name="suneditor_image_radio" class="se-dialog-btn-radio" value="right">'+n.dialogBox.right+'</label></div><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=l,i},_fileInputChange:function(){this.imgInputFile.value?(this.imgUrlFile.setAttribute("disabled",!0),this.previewSrc.style.textDecoration="line-through"):(this.imgUrlFile.removeAttribute("disabled"),this.previewSrc.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_openGallery:function(){this.callPlugin("imageGallery",this.plugins.imageGallery.open.bind(this,this.plugins.image._setUrlInput.bind(this.context.image)),null)},_setUrlInput:function(e){this.altText.value=e.alt,this._v_src._linkValue=this.previewSrc.textContent=this.imgUrlFile.value=e.getAttribute("data-value")||e.src,this.imgUrlFile.focus()},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},fileTags:["img"],select:function(e){this.plugins.image.onModifyMode.call(this,e,this.plugins.resizing.call_controller_resize.call(this,e,"image"))},destroy:function(e){const t=e||this.context.image._element,n=this.util.getParentElement(t,this.util.isMediaComponent)||t,i=1*t.getAttribute("data-index");if("function"==typeof this.functions.onImageDeleteBefore&&!1===this.functions.onImageDeleteBefore(t,n,i,this))return;let l=n.previousElementSibling||n.nextElementSibling;const s=n.parentNode;this.util.removeItem(n),this.plugins.image.init.call(this),this.controllersOff(),s!==this.context.element.wysiwyg&&this.util.removeItemAllParents(s,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(l),this.plugins.fileManager.deleteInfo.call(this,"image",i,this.functions.onImageUpload),this.history.push(!1)},on:function(e){const t=this.context.image;e?t.imgInputFile&&this.options.imageMultipleFile&&t.imgInputFile.removeAttribute("multiple"):(t.inputX.value=t._origin_w=this.options.imageWidth===t._defaultSizeX?"":this.options.imageWidth,t.inputY.value=t._origin_h=this.options.imageHeight===t._defaultSizeY?"":this.options.imageHeight,t.imgInputFile&&this.options.imageMultipleFile&&t.imgInputFile.setAttribute("multiple","multiple")),this.plugins.anchor.on.call(this,t.anchorCtx,e)},open:function(){this.plugins.dialog.open.call(this,"image","image"===this.currentControllerName)},openTab:function(e){const t=this.context.image.modal,n="init"===e?t.querySelector("._se_tab_link"):e.target;if(!/^BUTTON$/i.test(n.tagName))return!1;const i=n.getAttribute("data-tab-link");let l,s,o;for(s=t.getElementsByClassName("_se_tab_content"),l=0;l<s.length;l++)s[l].style.display="none";for(o=t.getElementsByClassName("_se_tab_link"),l=0;l<o.length;l++)this.util.removeClass(o[l],"active");return t.querySelector("._se_tab_content_"+i).style.display="block",this.util.addClass(n,"active"),"image"===i&&this.context.image.focusElement?this.context.image.focusElement.focus():"url"===i&&this.context.anchor.caller.image.urlInput.focus(),!1},submit:function(e){const t=this.context.image,n=this.plugins.image;e.preventDefault(),e.stopPropagation(),t._altText=t.altText.value,t._align=t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value,t._captionChecked=t.captionCheckEl.checked,t._resizing&&(t._proportionChecked=t.proportion.checked);try{this.context.dialog.updateModal&&n.update_image.call(this,!1,!0,!1),t.imgInputFile&&t.imgInputFile.files.length>0?(this.showLoading(),n.submitAction.call(this,this.context.image.imgInputFile.files)):t.imgUrlFile&&t._v_src._linkValue.length>0&&(this.showLoading(),n.onRender_imgUrl.call(this,t._v_src._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.image.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,l=e.length;i<l;i++)/image/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.imageUploadSizeLimit;if(i>0){let e=0;const n=this.context.image._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.imageUpload.fail] Size of uploadable total images: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onImageUploadError||this.functions.onImageUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const l=this.context.image;l._uploadFileLength=n.length;const s={anchor:this.plugins.anchor.createAnchor.call(this,l.anchorCtx,!0),inputWidth:l.inputX.value,inputHeight:l.inputY.value,align:l._align,isUpdate:this.context.dialog.updateModal,alt:l._altText,element:l._element};if("function"==typeof this.functions.onImageUploadBefore){const e=this.functions.onImageUploadBefore(n,s,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.image.register.call(this,s,e):this.plugins.image.upload.call(this,s,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();this._w.Array.isArray(e)&&e.length>0&&(n=e)}this.plugins.image.upload.call(this,s,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onImageUploadError||this.functions.onImageUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.image.error] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.image.error.call(this,t,null);const n=this.options.imageUploadUrl,i=this.context.dialog.updateModal?1:t.length;if("string"==typeof n&&n.length>0){const l=new FormData;for(let e=0;e<i;e++)l.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.imageUploadHeader,l,this.plugins.image.callBack_imgUpload.bind(this,e),this.functions.onImageUploadError)}else this.plugins.image.setup_reader.call(this,t,e.anchor,e.inputWidth,e.inputHeight,e.align,e.alt,i,e.isUpdate)},callBack_imgUpload:function(e,t){if("function"==typeof this.functions.imageUploadHandler)this.functions.imageUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.image.error.call(this,n.errorMessage,n):this.plugins.image.register.call(this,e,n)}},register:function(e,t){const n=t.result;for(let t,i=0,l=n.length;i<l;i++){if(t={name:n[i].name,size:n[i].size},e.isUpdate){this.plugins.image.update_src.call(this,n[i].url,e.element,t);break}this.plugins.image.create_image.call(this,n[i].url,e.anchor,e.inputWidth,e.inputHeight,e.align,t,e.alt)}this.closeLoading()},setup_reader:function(e,t,n,i,l,s,o,a){try{if(0===o)return this.closeLoading(),void console.warn("[SUNEDITOR.image.base64.fail] cause : No applicable files");this.context.image.base64RenderIndex=o;const r=this._w.FileReader,c=[o];this.context.image.inputX.value=n,this.context.image.inputY.value=i;for(let u,d,h=0;h<o;h++)u=new r,d=e[h],u.onload=function(e,o,a,r,u){c[u]={result:e.result,file:r},0==--this.context.image.base64RenderIndex&&(this.plugins.image.onRender_imgBase64.call(this,o,c,a,t,n,i,l,s),this.closeLoading())}.bind(this,u,a,this.context.image._element,d,h),u.readAsDataURL(d)}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.image.setup_reader.fail] cause : "'+e.message+'"')}},onRender_imgBase64:function(e,t,n,i,l,s,o,a){const r=this.plugins.image.update_src,c=this.plugins.image.create_image;for(let u=0,d=t.length;u<d;u++)e?(this.context.image._element.setAttribute("data-file-name",t[u].file.name),this.context.image._element.setAttribute("data-file-size",t[u].file.size),r.call(this,t[u].result,n,t[u].file)):c.call(this,t[u].result,i,l,s,o,t[u].file,a)},onRender_imgUrl:function(e){if(e||(e=this.context.image._v_src._linkValue),!e)return!1;const t=this.context.image;try{const n={name:e.split("/").pop(),size:0};this.context.dialog.updateModal?this.plugins.image.update_src.call(this,e,t._element,n):this.plugins.image.create_image.call(this,e,this.plugins.anchor.createAnchor.call(this,t.anchorCtx,!0),t.inputX.value,t.inputY.value,t._align,n,t._altText)}catch(e){throw Error('[SUNEDITOR.image.URLRendering.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},onRender_link:function(e,t){return t?(t.setAttribute("data-image-link","image"),e.setAttribute("data-image-link",t.href),t.appendChild(e),t):e},setInputSize:function(e,t){t&&32===t.keyCode?t.preventDefault():this.plugins.resizing._module_setInputSize.call(this,this.context.image,e)},setRatio:function(){this.plugins.resizing._module_setRatio.call(this,this.context.image)},checkFileInfo:function(){const e=this.plugins.image,t=this.context.image,n=function(n){e.onModifyMode.call(this,n,null),e.openModify.call(this,!0),t.inputX.value=t._origin_w,t.inputY.value=t._origin_h;const i=this.util.getFormatElement(n);i&&(t._align=i.style.textAlign||i.style.float),this.util.isAnchor(n.parentNode)&&!t.anchorCtx.linkValue&&(t.anchorCtx.linkValue=" "),e.update_image.call(this,!0,!1,!0),e.init.call(this)}.bind(this);this.plugins.fileManager.checkInfo.call(this,"image",["img"],this.functions.onImageUpload,n,!0)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"image",this.functions.onImageUpload)},create_image:function(e,t,n,i,l,s,o){const a=this.plugins.image,r=this.context.image;this.context.resizing._resize_plugin="image";let c=this.util.createElement("IMG");c.src=e,c.alt=o,c.setAttribute("data-rotate","0"),t=a.onRender_link.call(this,c,t?t.cloneNode(!1):null),r._resizing&&c.setAttribute("data-proportion",r._proportionChecked);const u=this.plugins.component.set_cover.call(this,t),d=this.plugins.component.set_container.call(this,u,"se-image-container");r._captionChecked&&(r._caption=this.plugins.component.create_caption.call(this),u.appendChild(r._caption)),r._element=c,r._cover=u,r._container=d,a.applySize.call(this,n,i),a.setAlign.call(this,l,c,u,d),c.onload=a._image_create_onload.bind(this,c,r.svgDefaultSize,d),this.insertComponent(d,!0,!0,!0)&&this.plugins.fileManager.setInfo.call(this,"image",c,this.functions.onImageUpload,s,!0),this.context.resizing._resize_plugin=""},_image_create_onload:function(e,t,n){if(0===e.offsetWidth&&this.plugins.image.applySize.call(this,t,""),this.options.mediaAutoSelect)this.selectComponent(e,"image");else{const e=this.appendFormatTag(n,null);e&&this.setRange(e,0,e,0)}},update_image:function(e,t,n){const i=this.context.image;let l,s=i._element,o=i._cover,a=i._container,r=!1;null===o&&(r=!0,s=i._element.cloneNode(!0),o=this.plugins.component.set_cover.call(this,s)),null===a?(o=o.cloneNode(!0),s=o.querySelector("img"),r=!0,a=this.plugins.component.set_container.call(this,o,"se-image-container")):r&&(a.innerHTML="",a.appendChild(o),i._cover=o,i._element=s,r=!1);const c=this.util.isNumber(i.inputX.value)?i.inputX.value+i.sizeUnit:i.inputX.value,u=this.util.isNumber(i.inputY.value)?i.inputY.value+i.sizeUnit:i.inputY.value;l=/%$/.test(s.style.width)?c!==a.style.width||u!==a.style.height:c!==s.style.width||u!==s.style.height,s.alt=i._altText;let d=!1;i._captionChecked?i._caption||(i._caption=this.plugins.component.create_caption.call(this),o.appendChild(i._caption),d=!0):i._caption&&(this.util.removeItem(i._caption),i._caption=null,d=!0);let h=null;const p=this.plugins.anchor.createAnchor.call(this,i.anchorCtx,!0);if(p)i._linkElement!==p||r&&!a.contains(p)?(i._linkElement=p.cloneNode(!1),o.insertBefore(this.plugins.image.onRender_link.call(this,s,i._linkElement),i._caption),h=i._element):i._linkElement.setAttribute("data-image-link","image");else if(null!==i._linkElement){const e=s;if(e.setAttribute("data-image-link",""),o.contains(i._linkElement)){const t=e.cloneNode(!0);o.removeChild(i._linkElement),o.insertBefore(t,i._caption),i._element=s=t}}let g=null;if(r){if(g=this.util.isRangeFormatElement(i._element.parentNode)||this.util.isWysiwygDiv(i._element.parentNode)?i._element:this.util.isAnchor(i._element.parentNode)?i._element.parentNode:this.util.getFormatElement(i._element)||i._element,this.util.getParentElement(i._element,this.util.isNotCheckingNode))g=h?p:i._element,g.parentNode.replaceChild(a,g);else if(this.util.isListCell(g)){const e=this.util.getParentElement(i._element,(function(e){return e.parentNode===g}));g.insertBefore(a,e),this.util.removeItem(i._element),this.util.removeEmptyNode(e,null,!0)}else if(this.util.isFormatElement(g)){const e=this.util.getParentElement(i._element,(function(e){return e.parentNode===g}));g=this.util.splitElement(g,e),g.parentNode.insertBefore(a,g),this.util.removeItem(i._element),this.util.removeEmptyNode(g,null,!0),0===g.children.length&&(g.innerHTML=this.util.htmlRemoveWhiteSpace(g.innerHTML))}else if(this.util.isFormatElement(g.parentNode)){const e=g.parentNode;e.parentNode.insertBefore(a,g.previousSibling?e.nextElementSibling:e),0===i.__updateTags.map((function(e){return g.contains(e)})).length&&this.util.removeItem(g)}else g=this.util.isFigures(g.parentNode)?g.parentNode:g,g.parentNode.replaceChild(a,g);s=a.querySelector("img"),i._element=s,i._cover=o,i._container=a}h&&(r?(this.util.removeItem(h),0===this.util.getListChildren(p,(function(e){return/IMG/i.test(e.tagName)})).length&&this.util.removeItem(p)):this.util.removeItem(p)),(d||!i._onlyPercentage&&l)&&!e&&(/\d+/.test(s.style.height)||this.context.resizing._rotateVertical&&i._captionChecked)&&(/%$/.test(i.inputX.value)||/%$/.test(i.inputY.value)?this.plugins.resizing.resetTransform.call(this,s):this.plugins.resizing.setTransformSize.call(this,s,this.util.getNumber(i.inputX.value,0),this.util.getNumber(i.inputY.value,0))),i._resizing&&(s.setAttribute("data-proportion",i._proportionChecked),l&&this.plugins.image.applySize.call(this)),this.plugins.image.setAlign.call(this,null,s,null,null),e&&this.plugins.fileManager.setInfo.call(this,"image",s,this.functions.onImageUpload,null,!0),t&&this.selectComponent(s,"image"),n||this.history.push(!1)},update_src:function(e,t,n){t.src=e,this._w.setTimeout(this.plugins.fileManager.setInfo.bind(this,"image",t,this.functions.onImageUpload,n,!0)),this.selectComponent(t,"image")},onModifyMode:function(e,t){if(!e)return;const n=this.context.image;n._linkElement=n.anchorCtx.linkAnchor=this.util.isAnchor(e.parentNode)?e.parentNode:null,n._element=e,n._cover=this.util.getParentElement(e,"FIGURE"),n._container=this.util.getParentElement(e,this.util.isMediaComponent),n._caption=this.util.getChildElement(n._cover,"FIGCAPTION"),n._align=e.getAttribute("data-align")||e.style.float||"none",e.style.float="",this.plugins.anchor.setCtx(n._linkElement,n.anchorCtx),t&&(n._element_w=t.w,n._element_h=t.h,n._element_t=t.t,n._element_l=t.l);let i,l,s=n._element.getAttribute("data-size")||n._element.getAttribute("data-origin");s?(s=s.split(","),i=s[0],l=s[1]):t&&(i=t.w,l=t.h),n._origin_w=i||e.style.width||e.width||"",n._origin_h=l||e.style.height||e.height||""},openModify:function(e){const t=this.context.image;t.imgUrlFile&&(t._v_src._linkValue=t.previewSrc.textContent=t.imgUrlFile.value=t._element.src),t._altText=t.altText.value=t._element.alt,(t.modal.querySelector('input[name="suneditor_image_radio"][value="'+t._align+'"]')||t.modal.querySelector('input[name="suneditor_image_radio"][value="none"]')).checked=!0,t._align=t.modal.querySelector('input[name="suneditor_image_radio"]:checked').value,t._captionChecked=t.captionCheckEl.checked=!!t._caption,t._resizing&&this.plugins.resizing._module_setModifyInputSize.call(this,t,this.plugins.image),e||this.plugins.dialog.open.call(this,"image",!0)},applySize:function(e,t){const n=this.context.image;return e||(e=n.inputX.value||this.options.imageWidth),t||(t=n.inputY.value||this.options.imageHeight),n._onlyPercentage&&e||/%$/.test(e)?(this.plugins.image.setPercentSize.call(this,e,t),!0):(e&&"auto"!==e||t&&"auto"!==t?this.plugins.image.setSize.call(this,e,t,!1):this.plugins.image.setAutoSize.call(this),!1)},sizeRevert:function(){this.plugins.resizing._module_sizeRevert.call(this,this.context.image)},setSize:function(e,t,n,i){const l=this.context.image,s=/^(rw|lw)$/.test(i)&&/\d+/.test(l._element.style.height);/^(th|bh)$/.test(i)&&/\d+/.test(l._element.style.width)||(l._element.style.width=this.util.isNumber(e)?e+l.sizeUnit:e,this.plugins.image.cancelPercentAttr.call(this)),s||(l._element.style.height=this.util.isNumber(t)?t+l.sizeUnit:/%$/.test(t)?"":t),"center"===l._align&&this.plugins.image.setAlign.call(this,null,null,null,null),n||l._element.removeAttribute("data-percentage"),this.plugins.resizing._module_saveCurrentSize.call(this,l)},setAutoSize:function(){const e=this.context.image;e._caption&&(e._caption.style.marginTop=""),this.plugins.resizing.resetTransform.call(this,e._element),this.plugins.image.cancelPercentAttr.call(this),e._element.style.maxWidth="",e._element.style.width="",e._element.style.height="",e._cover&&(e._cover.style.width="",e._cover.style.height=""),this.plugins.image.setAlign.call(this,null,null,null,null),e._element.setAttribute("data-percentage","auto,auto"),this.plugins.resizing._module_saveCurrentSize.call(this,e)},setOriginSize:function(){const e=this.context.image;e._element.removeAttribute("data-percentage"),this.plugins.resizing.resetTransform.call(this,e._element),this.plugins.image.cancelPercentAttr.call(this);const t=(e._element.getAttribute("data-origin")||"").split(","),n=t[0],i=t[1];t&&(e._onlyPercentage||/%$/.test(n)&&(/%$/.test(i)||!/\d/.test(i))?this.plugins.image.setPercentSize.call(this,n,i):this.plugins.image.setSize.call(this,n,i),this.plugins.resizing._module_saveCurrentSize.call(this,e))},setPercentSize:function(e,t){const n=this.context.image;t=!t||/%$/.test(t)||this.util.getNumber(t,0)?this.util.isNumber(t)?t+n.sizeUnit:t||"":this.util.isNumber(t)?t+"%":t;const i=/%$/.test(t);n._container&&(n._container.style.width=this.util.isNumber(e)?e+"%":e,n._container.style.height=""),n._cover&&(n._cover.style.width="100%",n._cover.style.height=i?t:""),n._element.style.width="100%",n._element.style.height=i?"":t,n._element.style.maxWidth="","center"===n._align&&this.plugins.image.setAlign.call(this,null,null,null,null),n._element.setAttribute("data-percentage",e+","+t),this.plugins.resizing.setCaptionPosition.call(this,n._element),this.plugins.resizing._module_saveCurrentSize.call(this,n)},cancelPercentAttr:function(){const e=this.context.image;e._cover&&(e._cover.style.width="",e._cover.style.height=""),e._container&&(e._container.style.width="",e._container.style.height=""),this.util.removeClass(e._container,this.context.image._floatClassRegExp),this.util.addClass(e._container,"__se__float-"+e._align),"center"===e._align&&this.plugins.image.setAlign.call(this,null,null,null,null)},setAlign:function(e,t,n,i){const l=this.context.image;e||(e=l._align),t||(t=l._element),n||(n=l._cover),i||(i=l._container),/%$/.test(t.style.width)&&"center"===e?(i&&(i.style.minWidth="100%"),n&&(n.style.width=i.style.width)):(i&&(i.style.minWidth=""),n&&(n.style.width=this.context.resizing._rotateVertical?t.style.height||t.offsetHeight:t.style.width&&"auto"!==t.style.width?t.style.width||"100%":"")),this.util.hasClass(i,"__se__float-"+e)||(this.util.removeClass(i,l._floatClassRegExp),this.util.addClass(i,"__se__float-"+e)),t.setAttribute("data-align",e)},init:function(){const e=this.context.image;e.imgInputFile&&(e.imgInputFile.value=""),e.imgUrlFile&&(e._v_src._linkValue=e.previewSrc.textContent=e.imgUrlFile.value=""),e.imgInputFile&&e.imgUrlFile&&(e.imgUrlFile.removeAttribute("disabled"),e.previewSrc.style.textDecoration=""),e.altText.value="",e.modal.querySelector('input[name="suneditor_image_radio"][value="none"]').checked=!0,e.captionCheckEl.checked=!1,e._element=null,this.plugins.image.openTab.call(this,"init"),e._resizing&&(e.inputX.value=this.options.imageWidth===e._defaultSizeX?"":this.options.imageWidth,e.inputY.value=this.options.imageHeight===e._defaultSizeY?"":this.options.imageHeight,e.proportion.checked=!0,e._ratio=!1,e._ratioX=1,e._ratioY=1),this.plugins.anchor.init.call(this,e.anchorCtx)}},v={name:"video",display:"dialog",add:function(e){e.addModule([r.a,p.a,m.a,_.a]);const t=e.options,n=e.context,i=n.video={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,sizeUnit:t._videoSizeUnit,_align:"none",_floatClassRegExp:"__se__float\\-[a-z]+",_youtubeQuery:t.youtubeQuery,_videoRatio:100*t.videoRatio+"%",_defaultRatio:100*t.videoRatio+"%",_linkValue:"",_element:null,_cover:null,_container:null,inputX:null,inputY:null,_element_w:1,_element_h:1,_element_l:0,_element_t:0,_defaultSizeX:"100%",_defaultSizeY:100*t.videoRatio+"%",_origin_w:"100%"===t.videoWidth?"":t.videoWidth,_origin_h:"56.25%"===t.videoHeight?"":t.videoHeight,_proportionChecked:!0,_resizing:t.videoResizing,_resizeDotHide:!t.videoHeightShow,_rotation:t.videoRotation,_alignHide:!t.videoAlignShow,_onlyPercentage:t.videoSizeOnlyPercentage,_ratio:!1,_ratioX:1,_ratioY:1,_captionShow:!1};let l=this.setDialog(e);i.modal=l,i.videoInputFile=l.querySelector("._se_video_file"),i.videoUrlFile=l.querySelector(".se-input-url"),i.focusElement=i.videoUrlFile||i.videoInputFile,i.preview=l.querySelector(".se-link-preview"),l.querySelector("form").addEventListener("submit",this.submit.bind(e)),i.videoInputFile&&l.querySelector(".se-dialog-files-edge-button").addEventListener("click",this._removeSelectedFiles.bind(i.videoInputFile,i.videoUrlFile,i.preview)),i.videoInputFile&&i.videoUrlFile&&i.videoInputFile.addEventListener("change",this._fileInputChange.bind(i)),i.videoUrlFile&&i.videoUrlFile.addEventListener("input",this._onLinkPreview.bind(i.preview,i,t.linkProtocol)),i.proportion={},i.videoRatioOption={},i.inputX={},i.inputY={},t.videoResizing&&(i.proportion=l.querySelector("._se_video_check_proportion"),i.videoRatioOption=l.querySelector(".se-video-ratio"),i.inputX=l.querySelector("._se_video_size_x"),i.inputY=l.querySelector("._se_video_size_y"),i.inputX.value=t.videoWidth,i.inputY.value=t.videoHeight,i.inputX.addEventListener("keyup",this.setInputSize.bind(e,"x")),i.inputY.addEventListener("keyup",this.setInputSize.bind(e,"y")),i.inputX.addEventListener("change",this.setRatio.bind(e)),i.inputY.addEventListener("change",this.setRatio.bind(e)),i.proportion.addEventListener("change",this.setRatio.bind(e)),i.videoRatioOption.addEventListener("change",this.setVideoRatio.bind(e)),l.querySelector(".se-dialog-btn-revert").addEventListener("click",this.sizeRevert.bind(e))),n.dialog.modal.appendChild(l),l=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content",i.style.display="none";let l='<form method="post" enctype="multipart/form-data"><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.videoBox.title+'</span></div><div class="se-dialog-body">';if(t.videoFileInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.videoBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_video_file" type="file" accept="'+t.videoAccept+'"'+(t.videoMultipleFile?' multiple="multiple"':"")+'/><button type="button" data-command="filesRemove" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.videoUrlInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.videoBox.url+'</label><input class="se-input-form se-input-url" type="text" /><pre class="se-link-preview"></pre></div>'),t.videoResizing){const i=t.videoRatioList||[{name:"16:9",value:.5625},{name:"4:3",value:.75},{name:"21:9",value:.4285}],s=t.videoRatio,o=t.videoSizeOnlyPercentage,a=o?' style="display: none !important;"':"",r=t.videoHeightShow?"":' style="display: none !important;"',c=t.videoRatioShow?"":' style="display: none !important;"',u=o||t.videoHeightShow||t.videoRatioShow?"":' style="display: none !important;"';l+='<div class="se-dialog-form"><div class="se-dialog-size-text"><label class="size-w">'+n.dialogBox.width+'</label><label class="se-dialog-size-x">&nbsp;</label><label class="size-h"'+r+">"+n.dialogBox.height+'</label><label class="size-h"'+c+">("+n.dialogBox.ratio+')</label></div><input class="se-input-control _se_video_size_x" placeholder="100%"'+(o?' type="number" min="1"':'type="text"')+(o?' max="100"':"")+'/><label class="se-dialog-size-x"'+u+">"+(o?"%":"x")+'</label><input class="se-input-control _se_video_size_y" placeholder="'+100*t.videoRatio+'%"'+(o?' type="number" min="1"':'type="text"')+(o?' max="100"':"")+r+'/><select class="se-input-select se-video-ratio" title="'+n.dialogBox.ratio+'" aria-label="'+n.dialogBox.ratio+'"'+c+">",r||(l+='<option value=""> - </option>');for(let e=0,t=i.length;e<t;e++)l+='<option value="'+i[e].value+'"'+(s.toString()===i[e].value.toString()?" selected":"")+">"+i[e].name+"</option>";l+='</select><button type="button" title="'+n.dialogBox.revertButton+'" aria-label="'+n.dialogBox.revertButton+'" class="se-btn se-dialog-btn-revert" style="float: right;">'+e.icons.revert+'</button></div><div class="se-dialog-form se-dialog-form-footer"'+a+u+'><label><input type="checkbox" class="se-dialog-btn-check _se_video_check_proportion" checked/>&nbsp;'+n.dialogBox.proportion+"</label></div>"}return l+='</div><div class="se-dialog-footer"><div'+(t.videoAlignShow?"":' style="display: none"')+'><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="none" checked>'+n.dialogBox.basic+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="left">'+n.dialogBox.left+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="center">'+n.dialogBox.center+'</label><label><input type="radio" name="suneditor_video_radio" class="se-dialog-btn-radio" value="right">'+n.dialogBox.right+'</label></div><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=l,i},_fileInputChange:function(){this.videoInputFile.value?(this.videoUrlFile.setAttribute("disabled",!0),this.preview.style.textDecoration="line-through"):(this.videoUrlFile.removeAttribute("disabled"),this.preview.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();/^<iframe.*\/iframe>$/.test(i)?(e._linkValue=i,this.textContent='<IFrame :src=".."></IFrame>'):e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},_setTagAttrs:function(e){e.setAttribute("controls",!0);const t=this.options.videoTagAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},createVideoTag:function(){const e=this.util.createElement("VIDEO");return this.plugins.video._setTagAttrs.call(this,e),e},_setIframeAttrs:function(e){e.frameBorder="0",e.allowFullscreen=!0;const t=this.options.videoIframeAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},createIframeTag:function(){const e=this.util.createElement("IFRAME");return this.plugins.video._setIframeAttrs.call(this,e),e},fileTags:["iframe","video"],select:function(e){this.plugins.video.onModifyMode.call(this,e,this.plugins.resizing.call_controller_resize.call(this,e,"video"))},destroy:function(e){const t=e||this.context.video._element,n=this.context.video._container,i=1*t.getAttribute("data-index");if("function"==typeof this.functions.onVideoDeleteBefore&&!1===this.functions.onVideoDeleteBefore(t,n,i,this))return;let l=n.previousElementSibling||n.nextElementSibling;const s=n.parentNode;this.util.removeItem(n),this.plugins.video.init.call(this),this.controllersOff(),s!==this.context.element.wysiwyg&&this.util.removeItemAllParents(s,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(l),this.plugins.fileManager.deleteInfo.call(this,"video",i,this.functions.onVideoUpload),this.history.push(!1)},on:function(e){const t=this.context.video;e?t.videoInputFile&&this.options.videoMultipleFile&&t.videoInputFile.removeAttribute("multiple"):(t.inputX.value=t._origin_w=this.options.videoWidth===t._defaultSizeX?"":this.options.videoWidth,t.inputY.value=t._origin_h=this.options.videoHeight===t._defaultSizeY?"":this.options.videoHeight,t.proportion.disabled=!0,t.videoInputFile&&this.options.videoMultipleFile&&t.videoInputFile.setAttribute("multiple","multiple")),t._resizing&&this.plugins.video.setVideoRatioSelect.call(this,t._origin_h||t._defaultRatio)},open:function(){this.plugins.dialog.open.call(this,"video","video"===this.currentControllerName)},setVideoRatio:function(e){const t=this.context.video,n=e.target.options[e.target.selectedIndex].value;t._defaultSizeY=t._videoRatio=n?100*n+"%":t._defaultSizeY,t.inputY.placeholder=n?100*n+"%":"",t.inputY.value=""},setInputSize:function(e,t){if(t&&32===t.keyCode)return void t.preventDefault();const n=this.context.video;this.plugins.resizing._module_setInputSize.call(this,n,e),"y"===e&&this.plugins.video.setVideoRatioSelect.call(this,t.target.value||n._defaultRatio)},setRatio:function(){this.plugins.resizing._module_setRatio.call(this,this.context.video)},submit:function(e){const t=this.context.video,n=this.plugins.video;e.preventDefault(),e.stopPropagation(),t._align=t.modal.querySelector('input[name="suneditor_video_radio"]:checked').value;try{t.videoInputFile&&t.videoInputFile.files.length>0?(this.showLoading(),n.submitAction.call(this,this.context.video.videoInputFile.files)):t.videoUrlFile&&t._linkValue.length>0&&(this.showLoading(),n.setup_url.call(this,t._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.video.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,l=e.length;i<l;i++)/video/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.videoUploadSizeLimit;if(i>0){let e=0;const n=this.context.video._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.videoUpload.fail] Size of uploadable total videos: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onVideoUploadError||this.functions.onVideoUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const l=this.context.video;l._uploadFileLength=n.length;const s={inputWidth:l.inputX.value,inputHeight:l.inputY.value,align:l._align,isUpdate:this.context.dialog.updateModal,element:l._element};if("function"==typeof this.functions.onVideoUploadBefore){const e=this.functions.onVideoUploadBefore(n,s,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.video.register.call(this,s,e):this.plugins.video.upload.call(this,s,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();"object"==typeof e&&e.length>0&&(n=e)}this.plugins.video.upload.call(this,s,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onVideoUploadError||this.functions.onVideoUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.video.error] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.video.error.call(this,t,null);const n=this.options.videoUploadUrl,i=this.context.dialog.updateModal?1:t.length;if(!("string"==typeof n&&n.length>0))throw Error('[SUNEDITOR.videoUpload.fail] cause : There is no "videoUploadUrl" option.');{const l=new FormData;for(let e=0;e<i;e++)l.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.videoUploadHeader,l,this.plugins.video.callBack_videoUpload.bind(this,e),this.functions.onVideoUploadError)}},callBack_videoUpload:function(e,t){if("function"==typeof this.functions.videoUploadHandler)this.functions.videoUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.video.error.call(this,n.errorMessage,n):this.plugins.video.register.call(this,e,n)}},register:function(e,t){const n=t.result,i=this.plugins.video.createVideoTag.call(this);for(let t,l=0,s=n.length;l<s;l++)t={name:n[l].name,size:n[l].size},this.plugins.video.create_video.call(this,e.isUpdate?e.element:i.cloneNode(!1),n[l].url,e.inputWidth,e.inputHeight,e.align,t,e.isUpdate);this.closeLoading()},setup_url:function(e){try{const t=this.context.video;if(e||(e=t._linkValue),!e)return!1;if(/^<iframe.*\/iframe>$/.test(e)){if(0===(e=(new this._w.DOMParser).parseFromString(e,"text/html").querySelector("iframe").src).length)return!1}if(/youtu\.?be/.test(e)){if(/^http/.test(e)||(e="https://"+e),e=e.replace("watch?v=",""),/^\/\/.+\/embed\//.test(e)||(e=e.replace(e.match(/\/\/.+\//)[0],"//www.youtube.com/embed/").replace("&","?&")),t._youtubeQuery.length>0)if(/\?/.test(e)){const n=e.split("?");e=n[0]+"?"+t._youtubeQuery+"&"+n[1]}else e+="?"+t._youtubeQuery}else/vimeo\.com/.test(e)&&(e.endsWith("/")&&(e=e.slice(0,-1)),e="https://player.vimeo.com/video/"+e.slice(e.lastIndexOf("/")+1));this.plugins.video.create_video.call(this,this.plugins.video[/embed|iframe|player|\/e\/|\.php|\.html?/.test(e)||/vimeo\.com/.test(e)?"createIframeTag":"createVideoTag"].call(this),e,t.inputX.value,t.inputY.value,t._align,null,this.context.dialog.updateModal)}catch(e){throw Error('[SUNEDITOR.video.upload.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},create_video:function(e,t,n,i,l,s,o){this.context.resizing._resize_plugin="video";const a=this.context.video;let r=null,c=null,u=!1;if(o){if((e=a._element).src!==t){u=!0;const n=/youtu\.?be/.test(t),i=/vimeo\.com/.test(t);if(!n&&!i||/^iframe$/i.test(e.nodeName))if(n||i||/^video$/i.test(e.nodeName))e.src=t;else{const n=this.plugins.video.createVideoTag.call(this);n.src=t,e.parentNode.replaceChild(n,e),a._element=e=n}else{const n=this.plugins.video.createIframeTag.call(this);n.src=t,e.parentNode.replaceChild(n,e),a._element=e=n}}c=a._container,r=this.util.getParentElement(e,"FIGURE")}else u=!0,e.src=t,a._element=e,r=this.plugins.component.set_cover.call(this,e),c=this.plugins.component.set_container.call(this,r,"se-video-container");a._cover=r,a._container=c;const d=this.plugins.resizing._module_getSizeX.call(this,a)!==(n||a._defaultSizeX)||this.plugins.resizing._module_getSizeY.call(this,a)!==(i||a._videoRatio),h=!o||d;a._resizing&&(this.context.video._proportionChecked=a.proportion.checked,e.setAttribute("data-proportion",a._proportionChecked));let p=!1;h&&(p=this.plugins.video.applySize.call(this)),p&&"center"===l||this.plugins.video.setAlign.call(this,null,e,r,c);let g=!0;if(o)a._resizing&&this.context.resizing._rotateVertical&&h&&this.plugins.resizing.setTransformSize.call(this,e,null,null);else if(g=this.insertComponent(c,!1,!0,!this.options.mediaAutoSelect),!this.options.mediaAutoSelect){const e=this.appendFormatTag(c,null);e&&this.setRange(e,0,e,0)}g&&(u&&this.plugins.fileManager.setInfo.call(this,"video",e,this.functions.onVideoUpload,s,!0),o&&(this.selectComponent(e,"video"),this.history.push(!1))),this.context.resizing._resize_plugin=""},_update_videoCover:function(e){if(!e)return;const t=this.context.video;/^video$/i.test(e.nodeName)?this.plugins.video._setTagAttrs.call(this,e):this.plugins.video._setIframeAttrs.call(this,e);let n=this.util.isRangeFormatElement(e.parentNode)||this.util.isWysiwygDiv(e.parentNode)?e:this.util.getFormatElement(e)||e;const i=e;t._element=e=e.cloneNode(!0);const l=t._cover=this.plugins.component.set_cover.call(this,e),s=t._container=this.plugins.component.set_container.call(this,l,"se-video-container");try{const o=n.querySelector("figcaption");let a=null;o&&(a=this.util.createElement("DIV"),a.innerHTML=o.innerHTML,this.util.removeItem(o));const r=(e.getAttribute("data-size")||e.getAttribute("data-origin")||"").split(",");this.plugins.video.applySize.call(this,r[0]||i.style.width||i.width||"",r[1]||i.style.height||i.height||"");const c=this.util.getFormatElement(i);if(c&&(t._align=c.style.textAlign||c.style.float),this.plugins.video.setAlign.call(this,null,e,l,s),this.util.getParentElement(i,this.util.isNotCheckingNode))i.parentNode.replaceChild(s,i);else if(this.util.isListCell(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n.insertBefore(s,e),this.util.removeItem(i),this.util.removeEmptyNode(e,null,!0)}else if(this.util.isFormatElement(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n=this.util.splitElement(n,e),n.parentNode.insertBefore(s,n),this.util.removeItem(i),this.util.removeEmptyNode(n,null,!0),0===n.children.length&&(n.innerHTML=this.util.htmlRemoveWhiteSpace(n.innerHTML))}else n.parentNode.replaceChild(s,n);a&&n.parentNode.insertBefore(a,s.nextElementSibling)}catch(e){console.warn("[SUNEDITOR.video.error] Maybe the video tag is nested.",e)}this.plugins.fileManager.setInfo.call(this,"video",e,this.functions.onVideoUpload,null,!0),this.plugins.video.init.call(this)},onModifyMode:function(e,t){const n=this.context.video;n._element=e,n._cover=this.util.getParentElement(e,"FIGURE"),n._container=this.util.getParentElement(e,this.util.isMediaComponent),n._align=e.style.float||e.getAttribute("data-align")||"none",e.style.float="",t&&(n._element_w=t.w,n._element_h=t.h,n._element_t=t.t,n._element_l=t.l);let i,l,s=n._element.getAttribute("data-size")||n._element.getAttribute("data-origin");s?(s=s.split(","),i=s[0],l=s[1]):t&&(i=t.w,l=t.h),n._origin_w=i||e.style.width||e.width||"",n._origin_h=l||e.style.height||e.height||""},openModify:function(e){const t=this.context.video;if(t.videoUrlFile&&(t._linkValue=t.preview.textContent=t.videoUrlFile.value=t._element.src||(t._element.querySelector("source")||"").src||""),(t.modal.querySelector('input[name="suneditor_video_radio"][value="'+t._align+'"]')||t.modal.querySelector('input[name="suneditor_video_radio"][value="none"]')).checked=!0,t._resizing){this.plugins.resizing._module_setModifyInputSize.call(this,t,this.plugins.video);const e=t._videoRatio=this.plugins.resizing._module_getSizeY.call(this,t);this.plugins.video.setVideoRatioSelect.call(this,e)||(t.inputY.value=t._onlyPercentage?this.util.getNumber(e,2):e)}e||this.plugins.dialog.open.call(this,"video",!0)},setVideoRatioSelect:function(e){let t=!1;const n=this.context.video,i=n.videoRatioOption.options;/%$/.test(e)||n._onlyPercentage?e=this.util.getNumber(e,2)/100+"":(!this.util.isNumber(e)||1*e>=1)&&(e=""),n.inputY.placeholder="";for(let l=0,s=i.length;l<s;l++)i[l].value===e?(t=i[l].selected=!0,n.inputY.placeholder=e?100*e+"%":""):i[l].selected=!1;return t},checkFileInfo:function(){this.plugins.fileManager.checkInfo.call(this,"video",["iframe","video"],this.functions.onVideoUpload,this.plugins.video._update_videoCover.bind(this),!0)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"video",this.functions.onVideoUpload)},applySize:function(e,t){const n=this.context.video;return e||(e=n.inputX.value||this.options.videoWidth),t||(t=n.inputY.value||this.options.videoHeight),n._onlyPercentage||/%$/.test(e)||!e?(this.plugins.video.setPercentSize.call(this,e||"100%",t||(/%$/.test(n._videoRatio)?n._videoRatio:n._defaultRatio)),!0):(e&&"auto"!==e||t&&"auto"!==t?this.plugins.video.setSize.call(this,e,t||n._videoRatio||n._defaultRatio,!1):this.plugins.video.setAutoSize.call(this),!1)},sizeRevert:function(){this.plugins.resizing._module_sizeRevert.call(this,this.context.video)},setSize:function(e,t,n,i){const l=this.context.video,s=/^(rw|lw)$/.test(i),o=/^(th|bh)$/.test(i);o||(e=this.util.getNumber(e,0)),s||(t=this.util.isNumber(t)?t+l.sizeUnit:t||""),e=e?e+l.sizeUnit:"",o||(l._element.style.width=e),!s&&l._cover&&(l._cover.style.paddingBottom=l._cover.style.height=t),o||/%$/.test(e)||(l._cover&&(l._cover.style.width=e),l._container&&(l._container.style.width="")),s||/%$/.test(t)?l._element.style.height="":l._element.style.height=t,n||l._element.removeAttribute("data-percentage"),this.plugins.resizing._module_saveCurrentSize.call(this,l)},setAutoSize:function(){this.plugins.video.setPercentSize.call(this,100,this.context.video._defaultRatio)},setOriginSize:function(e){const t=this.context.video;t._element.removeAttribute("data-percentage"),this.plugins.resizing.resetTransform.call(this,t._element),this.plugins.video.cancelPercentAttr.call(this);const n=((e?t._element.getAttribute("data-size"):"")||t._element.getAttribute("data-origin")||"").split(",");if(n){const e=n[0],i=n[1];t._onlyPercentage||/%$/.test(e)&&(/%$/.test(i)||!/\d/.test(i))?this.plugins.video.setPercentSize.call(this,e,i):this.plugins.video.setSize.call(this,e,i),this.plugins.resizing._module_saveCurrentSize.call(this,t)}},setPercentSize:function(e,t){const n=this.context.video;t=!t||/%$/.test(t)||this.util.getNumber(t,0)?this.util.isNumber(t)?t+n.sizeUnit:t||n._defaultRatio:this.util.isNumber(t)?t+"%":t,n._container&&(n._container.style.width=this.util.isNumber(e)?e+"%":e,n._container.style.height=""),n._cover&&(n._cover.style.width="100%",n._cover.style.height=t,n._cover.style.paddingBottom=t),n._element.style.width="100%",n._element.style.height="100%",n._element.style.maxWidth="","center"===n._align&&this.plugins.video.setAlign.call(this,null,null,null,null),n._element.setAttribute("data-percentage",e+","+t),this.plugins.resizing._module_saveCurrentSize.call(this,n)},cancelPercentAttr:function(){const e=this.context.video;e._cover&&(e._cover.style.width="",e._cover.style.height="",e._cover.style.paddingBottom=""),e._container&&(e._container.style.width="",e._container.style.height=""),this.util.removeClass(e._container,this.context.video._floatClassRegExp),this.util.addClass(e._container,"__se__float-"+e._align),"center"===e._align&&this.plugins.video.setAlign.call(this,null,null,null,null)},setAlign:function(e,t,n,i){const l=this.context.video;e||(e=l._align),t||(t=l._element),n||(n=l._cover),i||(i=l._container),/%$/.test(t.style.width)&&"center"===e?(i&&(i.style.minWidth="100%"),n&&(n.style.width=i.style.width,n.style.height=n.style.height,n.style.paddingBottom=/%$/.test(n.style.height)?this.util.getNumber(this.util.getNumber(n.style.height,2)/100*this.util.getNumber(n.style.width,2),2)+"%":n.style.height)):(i&&(i.style.minWidth=""),n&&(n.style.width=this.context.resizing._rotateVertical?t.style.height||t.offsetHeight:t.style.width||"100%",n.style.paddingBottom=n.style.height)),this.util.hasClass(i,"__se__float-"+e)||(this.util.removeClass(i,l._floatClassRegExp),this.util.addClass(i,"__se__float-"+e)),t.setAttribute("data-align",e)},init:function(){const e=this.context.video;e.videoInputFile&&(e.videoInputFile.value=""),e.videoUrlFile&&(e._linkValue=e.preview.textContent=e.videoUrlFile.value=""),e.videoInputFile&&e.videoUrlFile&&(e.videoUrlFile.removeAttribute("disabled"),e.preview.style.textDecoration=""),e._origin_w=this.options.videoWidth,e._origin_h=this.options.videoHeight,e.modal.querySelector('input[name="suneditor_video_radio"][value="none"]').checked=!0,e._resizing&&(e.inputX.value=this.options.videoWidth===e._defaultSizeX?"":this.options.videoWidth,e.inputY.value=this.options.videoHeight===e._defaultSizeY?"":this.options.videoHeight,e.proportion.checked=!0,e.proportion.disabled=!0,this.plugins.video.setVideoRatioSelect.call(this,e._defaultRatio))}},y={name:"audio",display:"dialog",add:function(e){e.addModule([r.a,p.a,_.a]);const t=e.context,n=t.audio={_infoList:[],_infoIndex:0,_uploadFileLength:0,focusElement:null,targetSelect:null,_origin_w:e.options.audioWidth,_origin_h:e.options.audioHeight,_linkValue:"",_element:null,_cover:null,_container:null};let i=this.setDialog(e);n.modal=i,n.audioInputFile=i.querySelector("._se_audio_files"),n.audioUrlFile=i.querySelector(".se-input-url"),n.focusElement=n.audioInputFile||n.audioUrlFile,n.preview=i.querySelector(".se-link-preview");let l=this.setController(e);n.controller=l,i.querySelector("form").addEventListener("submit",this.submit.bind(e)),n.audioInputFile&&i.querySelector(".se-dialog-files-edge-button").addEventListener("click",this._removeSelectedFiles.bind(n.audioInputFile,n.audioUrlFile,n.preview)),n.audioInputFile&&n.audioUrlFile&&n.audioInputFile.addEventListener("change",this._fileInputChange.bind(n)),l.addEventListener("click",this.onClick_controller.bind(e)),n.audioUrlFile&&n.audioUrlFile.addEventListener("input",this._onLinkPreview.bind(n.preview,n,e.options.linkProtocol)),t.dialog.modal.appendChild(i),t.element.relative.appendChild(l),i=null,l=null},setDialog:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-dialog-content",i.style.display="none";let l='<form method="post" enctype="multipart/form-data"><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+n.dialogBox.close+'" aria-label="'+n.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+n.dialogBox.audioBox.title+'</span></div><div class="se-dialog-body">';return t.audioFileInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.audioBox.file+'</label><div class="se-dialog-form-files"><input class="se-input-form _se_audio_files" type="file" accept="'+t.audioAccept+'"'+(t.audioMultipleFile?' multiple="multiple"':"")+'/><button type="button" data-command="filesRemove" class="se-btn se-dialog-files-edge-button se-file-remove" title="'+n.controller.remove+'" aria-label="'+n.controller.remove+'">'+e.icons.cancel+"</button></div></div>"),t.audioUrlInput&&(l+='<div class="se-dialog-form"><label>'+n.dialogBox.audioBox.url+'</label><input class="se-input-form se-input-url" type="text" /><pre class="se-link-preview"></pre></div>'),l+='</div><div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+n.dialogBox.submitButton+'" aria-label="'+n.dialogBox.submitButton+'"><span>'+n.dialogBox.submitButton+"</span></button></div></form>",i.innerHTML=l,i},setController:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-link",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-tooltip">'+n.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},_fileInputChange:function(){this.audioInputFile.value?(this.audioUrlFile.setAttribute("disabled",!0),this.preview.style.textDecoration="line-through"):(this.audioUrlFile.removeAttribute("disabled"),this.preview.style.textDecoration="")},_removeSelectedFiles:function(e,t){this.value="",e&&(e.removeAttribute("disabled"),t.style.textDecoration="")},_createAudioTag:function(){const e=this.util.createElement("AUDIO");this.plugins.audio._setTagAttrs.call(this,e);const t=this.context.audio._origin_w,n=this.context.audio._origin_h;return e.setAttribute("origin-size",t+","+n),e.style.cssText=(t?"width:"+t+"; ":"")+(n?"height:"+n+";":""),e},_setTagAttrs:function(e){e.setAttribute("controls",!0);const t=this.options.audioTagAttrs;if(t)for(let n in t)this.util.hasOwn(t,n)&&e.setAttribute(n,t[n])},_onLinkPreview:function(e,t,n){const i=n.target.value.trim();e._linkValue=this.textContent=i?t&&-1===i.indexOf("://")&&0!==i.indexOf("#")?t+i:-1===i.indexOf("://")?"/"+i:i:""},fileTags:["audio"],select:function(e){this.plugins.audio.onModifyMode.call(this,e)},destroy:function(e){e=e||this.context.audio._element;const t=this.util.getParentElement(e,this.util.isComponent)||e,n=1*e.getAttribute("data-index");if("function"==typeof this.functions.onAudioDeleteBefore&&!1===this.functions.onAudioDeleteBefore(e,t,n,this))return;const i=t.previousElementSibling||t.nextElementSibling,l=t.parentNode;this.util.removeItem(t),this.plugins.audio.init.call(this),this.controllersOff(),l!==this.context.element.wysiwyg&&this.util.removeItemAllParents(l,(function(e){return 0===e.childNodes.length}),null),this.focusEdge(i),this.plugins.fileManager.deleteInfo.call(this,"audio",n,this.functions.onAudioUpload),this.history.push(!1)},checkFileInfo:function(){this.plugins.fileManager.checkInfo.call(this,"audio",["audio"],this.functions.onAudioUpload,this.plugins.audio.updateCover.bind(this),!1)},resetFileInfo:function(){this.plugins.fileManager.resetInfo.call(this,"audio",this.functions.onAudioUpload)},on:function(e){const t=this.context.audio;e?t._element?(this.context.dialog.updateModal=!0,t._linkValue=t.preview.textContent=t.audioUrlFile.value=t._element.src,t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.removeAttribute("multiple")):t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.removeAttribute("multiple"):(this.plugins.audio.init.call(this),t.audioInputFile&&this.options.audioMultipleFile&&t.audioInputFile.setAttribute("multiple","multiple"))},open:function(){this.plugins.dialog.open.call(this,"audio","audio"===this.currentControllerName)},submit:function(e){const t=this.context.audio;e.preventDefault(),e.stopPropagation();try{t.audioInputFile&&t.audioInputFile.files.length>0?(this.showLoading(),this.plugins.audio.submitAction.call(this,t.audioInputFile.files)):t.audioUrlFile&&t._linkValue.length>0&&(this.showLoading(),this.plugins.audio.setupUrl.call(this,t._linkValue))}catch(e){throw this.closeLoading(),Error('[SUNEDITOR.audio.submit.fail] cause : "'+e.message+'"')}finally{this.plugins.dialog.close.call(this)}return!1},submitAction:function(e){if(0===e.length)return;let t=0,n=[];for(let i=0,l=e.length;i<l;i++)/audio/i.test(e[i].type)&&(n.push(e[i]),t+=e[i].size);const i=this.options.audioUploadSizeLimit;if(i>0){let e=0;const n=this.context.audio._infoList;for(let t=0,i=n.length;t<i;t++)e+=1*n[t].size;if(t+e>i){this.closeLoading();const n="[SUNEDITOR.audioUpload.fail] Size of uploadable total audios: "+i/1e3+"KB";return void(("function"!=typeof this.functions.onAudioUploadError||this.functions.onAudioUploadError(n,{limitSize:i,currentSize:e,uploadSize:t},this))&&this.functions.noticeOpen(n))}}const l=this.context.audio;l._uploadFileLength=n.length;const s={isUpdate:this.context.dialog.updateModal,element:l._element};if("function"==typeof this.functions.onAudioUploadBefore){const e=this.functions.onAudioUploadBefore(n,s,this,function(e){e&&this._w.Array.isArray(e.result)?this.plugins.audio.register.call(this,s,e):this.plugins.audio.upload.call(this,s,e)}.bind(this));if(void 0===e)return;if(!e)return void this.closeLoading();"object"==typeof e&&e.length>0&&(n=e)}this.plugins.audio.upload.call(this,s,n)},error:function(e,t){if(this.closeLoading(),"function"!=typeof this.functions.onAudioUploadError||this.functions.onAudioUploadError(e,t,this))throw this.functions.noticeOpen(e),Error("[SUNEDITOR.plugin.audio.exception] response: "+e)},upload:function(e,t){if(!t)return void this.closeLoading();if("string"==typeof t)return void this.plugins.audio.error.call(this,t,null);const n=this.options.audioUploadUrl,i=this.context.dialog.updateModal?1:t.length,l=new FormData;for(let e=0;e<i;e++)l.append("file-"+e,t[e]);this.plugins.fileManager.upload.call(this,n,this.options.audioUploadHeader,l,this.plugins.audio.callBack_upload.bind(this,e),this.functions.onAudioUploadError)},callBack_upload:function(e,t){if("function"==typeof this.functions.audioUploadHandler)this.functions.audioUploadHandler(t,e,this);else{const n=JSON.parse(t.responseText);n.errorMessage?this.plugins.audio.error.call(this,n.errorMessage,n):this.plugins.audio.register.call(this,e,n)}},register:function(e,t){const n=t.result;for(let t,i,l=0,s=n.length;l<s;l++)i=e.isUpdate?e.element:this.plugins.audio._createAudioTag.call(this),t={name:n[l].name,size:n[l].size},this.plugins.audio.create_audio.call(this,i,n[l].url,t,e.isUpdate);this.closeLoading()},setupUrl:function(e){try{if(0===e.length)return!1;this.plugins.audio.create_audio.call(this,this.plugins.audio._createAudioTag.call(this),e,null,this.context.dialog.updateModal)}catch(e){throw Error('[SUNEDITOR.audio.audio.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}},create_audio:function(e,t,n,i){const l=this.context.audio;if(i){if(l._element&&(e=l._element),!e||e.src===t)return void this.selectComponent(e,"audio");e.src=t,this.selectComponent(e,"audio")}else{e.src=t;const n=this.plugins.component.set_cover.call(this,e),i=this.plugins.component.set_container.call(this,n,"");if(!this.insertComponent(i,!1,!0,!this.options.mediaAutoSelect))return void this.focus();if(!this.options.mediaAutoSelect){const e=this.appendFormatTag(i,null);e&&this.setRange(e,0,e,0)}}this.plugins.fileManager.setInfo.call(this,"audio",e,this.functions.onAudioUpload,n,!1),i&&this.history.push(!1)},updateCover:function(e){const t=this.context.audio;this.plugins.audio._setTagAttrs.call(this,e);let n=this.util.isRangeFormatElement(e.parentNode)||this.util.isWysiwygDiv(e.parentNode)?e:this.util.getFormatElement(e)||e;const i=e;t._element=e=e.cloneNode(!1);const l=this.plugins.component.set_cover.call(this,e),s=this.plugins.component.set_container.call(this,l,"se-audio-container");try{if(this.util.getParentElement(i,this.util.isNotCheckingNode))i.parentNode.replaceChild(s,i);else if(this.util.isListCell(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n.insertBefore(s,e),this.util.removeItem(i),this.util.removeEmptyNode(e,null,!0)}else if(this.util.isFormatElement(n)){const e=this.util.getParentElement(i,(function(e){return e.parentNode===n}));n=this.util.splitElement(n,e),n.parentNode.insertBefore(s,n),this.util.removeItem(i),this.util.removeEmptyNode(n,null,!0),0===n.children.length&&(n.innerHTML=this.util.htmlRemoveWhiteSpace(n.innerHTML))}else n.parentNode.replaceChild(s,n)}catch(e){console.warn("[SUNEDITOR.audio.error] Maybe the audio tag is nested.",e)}this.plugins.fileManager.setInfo.call(this,"audio",e,this.functions.onAudioUpload,null,!1),this.plugins.audio.init.call(this)},onModifyMode:function(e){const t=this.context.audio;this.setControllerPosition(t.controller,e,"bottom",{left:0,top:0}),this.controllersOn(t.controller,e,this.plugins.audio.onControllerOff.bind(this,e),"audio"),this.util.addClass(e,"active"),t._element=e,t._cover=this.util.getParentElement(e,"FIGURE"),t._container=this.util.getParentElement(e,this.util.isComponent)},openModify:function(e){if(this.context.audio.audioUrlFile){const e=this.context.audio;e._linkValue=e.preview.textContent=e.audioUrlFile.value=e._element.src}e||this.plugins.dialog.open.call(this,"audio",!0)},onClick_controller:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command");t&&(e.preventDefault(),/update/.test(t)?this.plugins.audio.openModify.call(this,!1):this.plugins.audio.destroy.call(this,this.context.audio._element),this.controllersOff())},onControllerOff:function(e){this.util.removeClass(e,"active"),this.context.audio.controller.style.display="none"},init:function(){if(this.context.dialog.updateModal)return;const e=this.context.audio;e.audioInputFile&&(e.audioInputFile.value=""),e.audioUrlFile&&(e._linkValue=e.preview.textContent=e.audioUrlFile.value=""),e.audioInputFile&&e.audioUrlFile&&(e.audioUrlFile.removeAttribute("disabled"),e.preview.style.textDecoration=""),e._element=null}};var C={name:"math",display:"dialog",add:function(e){e.addModule([r.a]);const t=e.context;t.math={focusElement:null,previewElement:null,fontSizeElement:null,defaultFontSize:"",_mathExp:null};let n=this.setDialog(e);t.math.modal=n,t.math.focusElement=n.querySelector(".se-math-exp"),t.math.previewElement=n.querySelector(".se-math-preview"),t.math.fontSizeElement=n.querySelector(".se-math-size"),t.math.focusElement.addEventListener(e.util.isIE?"textinput":"input",this._renderMathExp.bind(e,t.math),!1),t.math.fontSizeElement.addEventListener("change",function(e){this.fontSize=e.target.value}.bind(t.math.previewElement.style),!1);let i=this.setController_MathButton(e);t.math.mathController=i,t.math._mathExp=null,n.querySelector("form").addEventListener("submit",this.submit.bind(e),!1),i.addEventListener("click",this.onClick_mathController.bind(e)),t.math.previewElement.style.fontSize=t.math.defaultFontSize,t.dialog.modal.appendChild(n),t.element.relative.appendChild(i),n=null,i=null},setDialog:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.options.mathFontSize;let l=i[0].value;n.className="se-dialog-content",n.style.display="none";let s='<form><div class="se-dialog-header"><button type="button" data-command="close" class="se-btn se-dialog-close" title="'+t.dialogBox.close+'" aria-label="'+t.dialogBox.close+'">'+e.icons.cancel+'</button><span class="se-modal-title">'+t.dialogBox.mathBox.title+'</span></div><div class="se-dialog-body"><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.inputLabel+' (<a href="https://katex.org/docs/supported.html" target="_blank">KaTeX</a>)</label><textarea class="se-input-form se-math-exp" type="text"></textarea></div><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.fontSizeLabel+'</label><select class="se-input-select se-math-size">';for(let e,t=0,n=i.length;t<n;t++)e=i[t],e.default&&(l=e.value),s+='<option value="'+e.value+'"'+(e.default?" selected":"")+">"+e.text+"</option>";return s+='</select></div><div class="se-dialog-form"><label>'+t.dialogBox.mathBox.previewLabel+'</label><p class="se-math-preview"></p></div></div><div class="se-dialog-footer"><button type="submit" class="se-btn-primary" title="'+t.dialogBox.submitButton+'" aria-label="'+t.dialogBox.submitButton+'"><span>'+t.dialogBox.submitButton+"</span></button></div></form>",e.context.math.defaultFontSize=l,n.innerHTML=s,n},setController_MathButton:function(e){const t=e.lang,n=e.util.createElement("DIV");return n.className="se-controller se-controller-link",n.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="link-content"><div class="se-btn-group"><button type="button" data-command="update" tabindex="-1" class="se-btn se-tooltip">'+e.icons.edit+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" tabindex="-1" class="se-btn se-tooltip">'+e.icons.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",n},open:function(){this.plugins.dialog.open.call(this,"math","math"===this.currentControllerName)},managedTags:function(){return{className:"katex",method:function(e){if(!e.getAttribute("data-exp")||!this.options.katex)return;const t=this._d.createRange().createContextualFragment(this.plugins.math._renderer.call(this,this.util.HTMLDecoder(e.getAttribute("data-exp"))));e.innerHTML=t.querySelector(".katex").innerHTML,e.setAttribute("contenteditable",!1)}}},_renderer:function(e){let t="";try{this.util.removeClass(this.context.math.focusElement,"se-error"),t=this.options.katex.src.renderToString(e,{throwOnError:!0,displayMode:!0})}catch(e){this.util.addClass(this.context.math.focusElement,"se-error"),t='<span class="se-math-katex-error">Katex syntax error. (Refer <a href="https://katex.org/docs/supported.html" target="_blank">KaTeX</a>)</span>',console.warn("[SUNEDITOR.math.Katex.error] ",e)}return t},_renderMathExp:function(e,t){e.previewElement.innerHTML=this.plugins.math._renderer.call(this,t.target.value)},submit:function(e){this.showLoading(),e.preventDefault(),e.stopPropagation();const t=function(){if(0===this.context.math.focusElement.value.trim().length)return!1;const e=this.context.math,t=e.focusElement.value,n=e.previewElement.querySelector(".katex");if(!n)return!1;if(n.className="__se__katex "+n.className,n.setAttribute("contenteditable",!1),n.setAttribute("data-exp",this.util.HTMLEncoder(t)),n.setAttribute("data-font-size",e.fontSizeElement.value),n.style.fontSize=e.fontSizeElement.value,this.context.dialog.updateModal){const t=this.util.getParentElement(e._mathExp,".katex");t.parentNode.replaceChild(n,t),this.setRange(n,0,n,1)}else{const e=this.getSelectedElements();if(e.length>1){const t=this.util.createElement(e[0].nodeName);if(t.appendChild(n),!this.insertNode(t,null,!0))return!1}else if(!this.insertNode(n,null,!0))return!1;const t=this.util.createTextNode(this.util.zeroWidthSpace);n.parentNode.insertBefore(t,n.nextSibling),this.setRange(n,0,n,1)}return e.focusElement.value="",e.fontSizeElement.value="1em",e.previewElement.style.fontSize="1em",e.previewElement.innerHTML="",!0}.bind(this);try{t()&&(this.plugins.dialog.close.call(this),this.history.push(!1))}catch(e){this.plugins.dialog.close.call(this)}finally{this.closeLoading()}return!1},active:function(e){if(e){if(e.getAttribute("data-exp"))return this.controllerArray.indexOf(this.context.math.mathController)<0&&(this.setRange(e,0,e,1),this.plugins.math.call_controller.call(this,e)),!0}else this.controllerArray.indexOf(this.context.math.mathController)>-1&&this.controllersOff();return!1},on:function(e){if(e){const e=this.context.math;if(e._mathExp){const t=this.util.HTMLDecoder(e._mathExp.getAttribute("data-exp")),n=e._mathExp.getAttribute("data-font-size")||"1em";this.context.dialog.updateModal=!0,e.focusElement.value=t,e.fontSizeElement.value=n,e.previewElement.innerHTML=this.plugins.math._renderer.call(this,t),e.previewElement.style.fontSize=n}}else this.plugins.math.init.call(this)},call_controller:function(e){this.context.math._mathExp=e;const t=this.context.math.mathController;this.setControllerPosition(t,e,"bottom",{left:0,top:0}),this.controllersOn(t,e,"math")},onClick_mathController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")||e.target.parentNode.getAttribute("data-command");t&&(e.preventDefault(),/update/.test(t)?(this.context.math.focusElement.value=this.util.HTMLDecoder(this.context.math._mathExp.getAttribute("data-exp")),this.plugins.dialog.open.call(this,"math",!0)):(this.util.removeItem(this.context.math._mathExp),this.context.math._mathExp=null,this.focus(),this.history.push(!1)),this.controllersOff())},init:function(){const e=this.context.math;e.mathController.style.display="none",e._mathExp=null,e.focusElement.value="",e.previewElement.innerHTML=""}},w=n("JhlZ"),E=n.n(w),x={blockquote:{name:"blockquote",display:"command",add:function(e,t){e.context.blockquote={targetButton:t,tag:e.util.createElement("BLOCKQUOTE")}},active:function(e){if(e){if(/blockquote/i.test(e.nodeName))return this.util.addClass(this.context.blockquote.targetButton,"active"),!0}else this.util.removeClass(this.context.blockquote.targetButton,"active");return!1},action:function(){const e=this.util.getParentElement(this.getSelectionNode(),"blockquote");e?this.detachRangeFormatElement(e,null,null,!1,!1):this.applyRangeFormatElement(this.context.blockquote.tag.cloneNode(!1))}},align:{name:"align",display:"submenu",add:function(e,t){const n=e.icons,i=e.context;i.align={targetButton:t,_itemMenu:null,_alignList:null,currentAlign:"",defaultDir:e.options.rtl?"right":"left",icons:{justify:n.align_justify,left:n.align_left,right:n.align_right,center:n.align_center}};let l=this.setSubmenu(e),s=i.align._itemMenu=l.querySelector("ul");s.addEventListener("click",this.pickup.bind(e)),i.align._alignList=s.querySelectorAll("li button"),e.initMenuTarget(this.name,t,l),l=null,s=null},setSubmenu:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV"),l=e.options.alignItems;let s="";for(let e,i,o=0;o<l.length;o++)e=l[o],i=t.toolbar["align"+e.charAt(0).toUpperCase()+e.slice(1)],s+='<li><button type="button" class="se-btn-list se-btn-align" data-value="'+e+'" title="'+i+'" aria-label="'+i+'"><span class="se-list-icon">'+n["align_"+e]+"</span>"+i+"</button></li>";return i.className="se-submenu se-list-layer se-list-align",i.innerHTML='<div class="se-list-inner"><ul class="se-list-basic">'+s+"</ul></div>",i},active:function(e){const t=this.context.align,n=t.targetButton,i=n.firstElementChild;if(e){if(this.util.isFormatElement(e)){const l=e.style.textAlign;if(l)return this.util.changeElement(i,t.icons[l]||t.icons[t.defaultDir]),n.setAttribute("data-focus",l),!0}}else this.util.changeElement(i,t.icons[t.defaultDir]),n.removeAttribute("data-focus");return!1},on:function(){const e=this.context.align,t=e._alignList,n=e.targetButton.getAttribute("data-focus")||e.defaultDir;if(n!==e.currentAlign){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentAlign=n}},exchangeDir:function(){const e=this.options.rtl?"right":"left";if(!this.context.align||this.context.align.defaultDir===e)return;this.context.align.defaultDir=e;let t=this.context.align._itemMenu,n=t.querySelector('[data-value="left"]'),i=t.querySelector('[data-value="right"]');if(n&&i){const e=n.parentElement,t=i.parentElement;e.appendChild(i),t.appendChild(n)}},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null;for(;!n&&!/UL/i.test(t.tagName);)n=t.getAttribute("data-value"),t=t.parentNode;if(!n)return;const i=this.context.align.defaultDir,l=this.getSelectedElements();for(let e=0,t=l.length;e<t;e++)this.util.setStyle(l[e],"textAlign",n===i?"":n);this.effectNode=null,this.submenuOff(),this.focus(),this.history.push(!1)}},font:{name:"font",display:"submenu",add:function(e,t){const n=e.context;n.font={targetText:t.querySelector(".txt"),targetTooltip:t.parentNode.querySelector(".se-tooltip-text"),_fontList:null,currentFont:""};let i=this.setSubmenu(e);i.querySelector(".se-list-inner").addEventListener("click",this.pickup.bind(e)),n.font._fontList=i.querySelectorAll("ul li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV");let i,l,s,o;n.className="se-submenu se-list-layer se-list-font-family";let a=e.options.font,r='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+t.toolbar.default+'" aria-label="'+t.toolbar.default+'">('+t.toolbar.default+")</button></li>";for(s=0,o=a.length;s<o;s++)i=a[s],l=i.split(",")[0],r+='<li><button type="button" class="se-btn-list" data-value="'+i+'" data-txt="'+l+'" title="'+l+'" aria-label="'+l+'" style="font-family:'+i+';">'+l+"</button></li>";return r+="</ul></div>",n.innerHTML=r,n},active:function(e){const t=this.context.font.targetText,n=this.context.font.targetTooltip;if(e){if(e.style&&e.style.fontFamily.length>0){const i=e.style.fontFamily.replace(/["']/g,"");return this.util.changeTxt(t,i),this.util.changeTxt(n,this.lang.toolbar.font+" ("+i+")"),!0}}else{const e=this.hasFocus?this.wwComputedStyle.fontFamily:this.lang.toolbar.font;this.util.changeTxt(t,e),this.util.changeTxt(n,this.hasFocus?this.lang.toolbar.font+(e?" ("+e+")":""):e)}return!1},on:function(){const e=this.context.font,t=e._fontList,n=e.targetText.textContent;if(n!==e.currentFont){for(let e=0,i=t.length;e<i;e++)n===(t[e].getAttribute("data-value")||"").replace(/'|"/g,"")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentFont=n}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();let t=e.target.getAttribute("data-value");if(t){const e=this.util.createElement("SPAN");/[\s\d\W]/.test(t)&&!/^['"].*['"]$/.test(t)&&(t='"'+t+'"'),e.style.fontFamily=t,this.nodeChange(e,["font-family"],null,null)}else this.nodeChange(null,["font-family"],["span"],!0);this.submenuOff()}},fontSize:{name:"fontSize",display:"submenu",add:function(e,t){const n=e.context;n.fontSize={targetText:t.querySelector(".txt"),_sizeList:null,currentSize:""};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.fontSize._sizeList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer se-list-font-size";const l=t.fontSize?t.fontSize:[8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72];let s='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+n.toolbar.default+'" aria-label="'+n.toolbar.default+'">('+n.toolbar.default+")</button></li>";for(let e,n=0,i=t.fontSizeUnit,o=l.length;n<o;n++)e=l[n],s+='<li><button type="button" class="se-btn-list" data-value="'+e+i+'" title="'+e+i+'" aria-label="'+e+i+'" style="font-size:'+e+i+';">'+e+"</button></li>";return s+="</ul></div>",i.innerHTML=s,i},active:function(e){if(e){if(e.style&&e.style.fontSize.length>0)return this.util.changeTxt(this.context.fontSize.targetText,this._convertFontSize.call(this,this.options.fontSizeUnit,e.style.fontSize)),!0}else this.util.changeTxt(this.context.fontSize.targetText,this.hasFocus?this._convertFontSize.call(this,this.options.fontSizeUnit,this.wwComputedStyle.fontSize):this.lang.toolbar.fontSize);return!1},on:function(){const e=this.context.fontSize,t=e._sizeList,n=e.targetText.textContent;if(n!==e.currentSize){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentSize=n}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();const t=e.target.getAttribute("data-value");if(t){const e=this.util.createElement("SPAN");e.style.fontSize=t,this.nodeChange(e,["font-size"],null,null)}else this.nodeChange(null,["font-size"],["span"],!0);this.submenuOff()}},fontColor:l,hiliteColor:s,horizontalRule:{name:"horizontalRule",display:"submenu",add:function(e,t){e.context.horizontalRule={currentHR:null};let n=this.setSubmenu(e);n.querySelector("ul").addEventListener("click",this.horizontalRulePick.bind(e)),e.initMenuTarget(this.name,t,n),n=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV"),i=e.options.hrItems||[{name:t.toolbar.hr_solid,class:"__se__solid"},{name:t.toolbar.hr_dashed,class:"__se__dashed"},{name:t.toolbar.hr_dotted,class:"__se__dotted"}];let l="";for(let e=0,t=i.length;e<t;e++)l+='<li><button type="button" class="se-btn-list btn_line" data-command="horizontalRule" data-value="'+i[e].class+'" title="'+i[e].name+'" aria-label="'+i[e].name+'"><hr'+(i[e].class?' class="'+i[e].class+'"':"")+(i[e].style?' style="'+i[e].style+'"':"")+"/></button></li>";return n.className="se-submenu se-list-layer se-list-line",n.innerHTML='<div class="se-list-inner"><ul class="se-list-basic">'+l+"</ul></div>",n},active:function(e){if(e){if(/HR/i.test(e.nodeName))return this.context.horizontalRule.currentHR=e,this.util.hasClass(e,"on")||(this.util.addClass(e,"on"),this.controllersOn("hr",this.util.removeClass.bind(this.util,e,"on"))),!0}else this.util.hasClass(this.context.horizontalRule.currentHR,"on")&&this.controllersOff();return!1},appendHr:function(e){return this.focus(),this.insertComponent(e.cloneNode(!1),!1,!0,!1)},horizontalRulePick:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=t.getAttribute("data-command");for(;!n&&!/UL/i.test(t.tagName);)t=t.parentNode,n=t.getAttribute("data-command");if(!n)return;const i=this.plugins.horizontalRule.appendHr.call(this,t.firstElementChild);i&&(this.setRange(i,0,i,0),this.submenuOff())}},list:{name:"list",display:"submenu",add:function(e,t){const n=e.context;n.list={targetButton:t,_list:null,currentList:"",icons:{bullets:e.icons.list_bullets,number:e.icons.list_number}};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.list._list=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.lang,n=e.util.createElement("DIV");return n.className="se-submenu se-list-layer",n.innerHTML='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="se-btn-list se-tooltip" data-command="OL" title="'+t.toolbar.orderList+'" aria-label="'+t.toolbar.orderList+'">'+e.icons.list_number+'</button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="UL" title="'+t.toolbar.unorderList+'" aria-label="'+t.toolbar.unorderList+'">'+e.icons.list_bullets+"</button></li></ul></div>",n},active:function(e){const t=this.context.list.targetButton,n=t.firstElementChild,i=this.util;if(i.isList(e)){const l=e.nodeName;return t.setAttribute("data-focus",l),i.addClass(t,"active"),/UL/i.test(l)?i.changeElement(n,this.context.list.icons.bullets):i.changeElement(n,this.context.list.icons.number),!0}return t.removeAttribute("data-focus"),i.changeElement(n,this.context.list.icons.number),i.removeClass(t,"active"),!1},on:function(){const e=this.context.list,t=e._list,n=e.targetButton.getAttribute("data-focus")||"";if(n!==e.currentList){for(let e=0,i=t.length;e<i;e++)n===t[e].getAttribute("data-command")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentList=n}},editList:function(e,t,n){let i=this.getRange(),l=t||this.getSelectedElementsAndComponents(!1);if(0===l.length){if(t)return;if(i=this.getRange_addLine(i,null),l=this.getSelectedElementsAndComponents(!1),0===l.length)return}const s=this.util;s.sortByDepth(l,!0);let o=l[0],a=l[l.length-1],r=!s.isListCell(o)&&!s.isComponent(o)||o.previousElementSibling?o.previousElementSibling:o.parentNode.previousElementSibling,c=!s.isListCell(a)&&!s.isComponent(a)||a.nextElementSibling?a.nextElementSibling:a.parentNode.nextElementSibling;const u=i.collapsed,d={sc:i.startContainer,so:i.startContainer===i.endContainer&&s.onlyZeroWidthSpace(i.startContainer)&&0===i.startOffset&&1===i.endOffset?i.endOffset:i.startOffset,ec:i.endContainer,eo:i.endOffset};let h=null,p=!0;for(let e=0,t=l.length;e<t;e++)if(!s.isList(s.getRangeFormatElement(l[e],function(t){return this.getRangeFormatElement(t)&&t!==l[e]}.bind(s)))){p=!1;break}if(!p||r&&o.tagName===r.tagName&&e===r.tagName.toUpperCase()||c&&a.tagName===c.tagName&&e===c.tagName.toUpperCase()){const t=r?r.parentNode:r,n=c?c.parentNode:c;r=t&&!s.isWysiwygDiv(t)&&t.nodeName===e?t:r,c=n&&!s.isWysiwygDiv(n)&&n.nodeName===e?n:c;const i=r&&r.tagName===e,o=c&&c.tagName===e;let a=i?r:s.createElement(e),u=null,h=null,p=null,g=null;const m=function(e){return!this.isComponent(e)&&!this.isList(e)}.bind(s);for(let t,n,o,r,c,g,f,_,b,v=0,y=l.length;v<y;v++)if(n=l[v],0!==n.childNodes.length||s._isIgnoreNodeChange(n)){if(r=l[v+1],c=n.parentNode,g=r?r.parentNode:null,o=s.isListCell(n),b=s.isRangeFormatElement(c)?c:null,f=o&&!s.isWysiwygDiv(c)?c.parentNode:c,_=o&&!s.isWysiwygDiv(c)?!r||s.isListCell(f)?c:c.nextSibling:n.nextSibling,t=s.createElement("LI"),s.copyFormatAttributes(t,n),0===v&&d.sc===n&&(d.sc=t),v===y-1&&d.ec===n&&(d.ec=t),s.isComponent(n)){const e=/^HR$/i.test(n.nodeName);e||(t.innerHTML="<br>"),t.innerHTML+=n.outerHTML,e&&(t.innerHTML+="<br>")}else{const e=n.childNodes;for(;e[0];)t.appendChild(e[0])}a.appendChild(t),r||(h=a),r&&f===g&&!s.isRangeFormatElement(_)||(u||(u=a),i&&r&&f===g||r&&s.isList(g)&&g===c||a.parentNode!==f&&f.insertBefore(a,_)),s.removeItem(n),i&&null===p&&(p=a.children.length-1),r&&(s.getRangeFormatElement(g,m)!==s.getRangeFormatElement(c,m)||s.isList(g)&&s.isList(c)&&s.getElementDepth(g)!==s.getElementDepth(c))&&(a=s.createElement(e)),b&&0===b.children.length&&s.removeItem(b)}else s.removeItem(n);p&&(u=u.children[p]),o&&(g=a.children.length-1,a.innerHTML+=c.innerHTML,h=a.children[g],s.removeItem(c))}else{if(n)for(let e=0,t=l.length;e<t;e++)for(let n=e-1;n>=0;n--)if(l[n].contains(l[e])){l.splice(e,1),e--,t--;break}const t=s.getRangeFormatElement(o),i=t&&t.tagName===e;let a,r;const c=function(e){return!this.isComponent(e)}.bind(s);i||(r=s.createElement(e));for(let t,o,u=0,d=l.length;u<d;u++)o=s.getRangeFormatElement(l[u],c),o&&s.isList(o)&&(t?t!==o?(n&&s.isListCell(o.parentNode)?this.plugins.list._detachNested.call(this,a.f):h=this.detachRangeFormatElement(a.f[0].parentNode,a.f,r,!1,!0),o=l[u].parentNode,i||(r=s.createElement(e)),t=o,a={r:t,f:[s.getParentElement(l[u],"LI")]}):a.f.push(s.getParentElement(l[u],"LI")):(t=o,a={r:t,f:[s.getParentElement(l[u],"LI")]}),u===d-1&&(n&&s.isListCell(o.parentNode)?this.plugins.list._detachNested.call(this,a.f):h=this.detachRangeFormatElement(a.f[0].parentNode,a.f,r,!1,!0)))}return this.effectNode=null,u?h:d},_detachNested:function(e){const t=e[0],n=e[e.length-1],i=n.nextElementSibling,l=t.parentNode,s=l.parentNode.nextElementSibling,o=l.parentNode.parentNode;for(let t=0,n=e.length;t<n;t++)o.insertBefore(e[t],s);if(i&&l.children.length>0){const e=l.cloneNode(!1),t=l.childNodes,s=this.util.getPositionIndex(i);for(;t[s];)e.appendChild(t[s]);n.appendChild(e)}0===l.children.length&&this.util.removeItem(l),this.util.mergeSameTags(o);const a=this.util.getEdgeChildNodes(t,n);return{cc:t.parentNode,sc:a.sc,ec:a.ec}},editInsideList:function(e,t){const n=(t=t||this.getSelectedElements().filter(function(e){return this.isListCell(e)}.bind(this.util))).length;if(0===n||!e&&!this.util.isListCell(t[0].previousElementSibling)&&!this.util.isListCell(t[n-1].nextElementSibling))return{sc:t[0],so:0,ec:t[n-1],eo:1};let i=t[0].parentNode,l=t[n-1],s=null;if(e){if(i!==l.parentNode&&this.util.isList(l.parentNode.parentNode)&&l.nextElementSibling)for(l=l.nextElementSibling;l;)t.push(l),l=l.nextElementSibling;s=this.plugins.list.editList.call(this,i.nodeName.toUpperCase(),t,!0)}else{let e=this.util.createElement(i.nodeName),o=t[0].previousElementSibling,a=l.nextElementSibling;const r={s:null,e:null,sl:i,el:i};for(let l,s=0,c=n;s<c;s++)l=t[s],l.parentNode!==i&&(this.plugins.list._insiedList.call(this,i,e,o,a,r),i=l.parentNode,e=this.util.createElement(i.nodeName)),o=l.previousElementSibling,a=l.nextElementSibling,e.appendChild(l);this.plugins.list._insiedList.call(this,i,e,o,a,r);const c=this.util.getNodeFromPath(r.s,r.sl),u=this.util.getNodeFromPath(r.e,r.el);s={sc:c,so:0,ec:u,eo:u.textContent.length}}return s},_insiedList:function(e,t,n,i,l){let s=!1;if(n&&t.tagName===n.tagName){const e=t.children;for(;e[0];)n.appendChild(e[0]);t=n,s=!0}if(i&&t.tagName===i.tagName){const e=i.children;for(;e[0];)t.appendChild(e[0]);const n=i.nextElementSibling;i.parentNode.removeChild(i),i=n}if(!s){this.util.isListCell(n)&&(e=n,i=null),e.insertBefore(t,i),l.s||(l.s=this.util.getNodePath(t.firstElementChild.firstChild,e,null),l.sl=e);const s=e.contains(l.sl)?this.util.getNodePath(l.sl,e):null;l.e=this.util.getNodePath(t.lastElementChild.firstChild,e,null),l.el=e,this.util.mergeSameTags(e,[l.s,l.e,s],!1),this.util.mergeNestedTags(e),s&&(l.sl=this.util.getNodeFromPath(s,e))}return t},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n="";for(;!n&&!/^UL$/i.test(t.tagName);)n=t.getAttribute("data-command"),t=t.parentNode;if(!n)return;const i=this.plugins.list.editList.call(this,n,null,!1);i&&this.setRange(i.sc,i.so,i.ec,i.eo),this.submenuOff(),this.history.push(!1)}},table:{name:"table",display:"submenu",add:function(e,t){const n=e.context;let i=n.table={_element:null,_tdElement:null,_trElement:null,_trElements:null,_tableXY:[],_maxWidth:!0,_fixedColumn:!1,_rtl:e.options.rtl,cellControllerTop:"top"===e.options.tableCellControllerPosition,resizeText:null,headerButton:null,mergeButton:null,splitButton:null,splitMenu:null,maxText:e.lang.controller.maxSize,minText:e.lang.controller.minSize,_physical_cellCnt:0,_logical_cellCnt:0,_rowCnt:0,_rowIndex:0,_physical_cellIndex:0,_logical_cellIndex:0,_current_colSpan:0,_current_rowSpan:0,icons:{expansion:e.icons.expansion,reduction:e.icons.reduction}},l=this.setSubmenu(e),s=l.querySelector(".se-controller-table-picker");i.tableHighlight=l.querySelector(".se-table-size-highlighted"),i.tableUnHighlight=l.querySelector(".se-table-size-unhighlighted"),i.tableDisplay=l.querySelector(".se-table-size-display"),e.options.rtl&&(i.tableHighlight.style.left="167px");let o=this.setController_table(e);i.tableController=o,i.resizeButton=o.querySelector("._se_table_resize"),i.resizeText=o.querySelector("._se_table_resize > span > span"),i.columnFixedButton=o.querySelector("._se_table_fixed_column"),i.headerButton=o.querySelector("._se_table_header");let a=this.setController_tableEditor(e,i.cellControllerTop);i.resizeDiv=a,i.splitMenu=a.querySelector(".se-btn-group-sub"),i.mergeButton=a.querySelector("._se_table_merge_button"),i.splitButton=a.querySelector("._se_table_split_button"),i.insertRowAboveButton=a.querySelector("._se_table_insert_row_a"),i.insertRowBelowButton=a.querySelector("._se_table_insert_row_b"),s.addEventListener("mousemove",this.onMouseMove_tablePicker.bind(e,i)),s.addEventListener("click",this.appendTable.bind(e)),a.addEventListener("click",this.onClick_tableController.bind(e)),o.addEventListener("click",this.onClick_tableController.bind(e)),e.initMenuTarget(this.name,t,l),n.element.relative.appendChild(a),n.element.relative.appendChild(o),l=null,s=null,a=null,o=null,i=null},setSubmenu:function(e){const t=e.util.createElement("DIV");return t.className="se-submenu se-selector-table",t.innerHTML='<div class="se-table-size"><div class="se-table-size-picker se-controller-table-picker"></div><div class="se-table-size-highlighted"></div><div class="se-table-size-unhighlighted"></div></div><div class="se-table-size-display">1 x 1</div>',t},setController_table:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-table",i.innerHTML='<div><div class="se-btn-group"><button type="button" data-command="resize" class="se-btn se-tooltip _se_table_resize">'+n.expansion+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.maxSize+'</span></span></button><button type="button" data-command="layout" class="se-btn se-tooltip _se_table_fixed_column">'+n.fixed_column_width+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.fixedColumnWidth+'</span></span></button><button type="button" data-command="header" class="se-btn se-tooltip _se_table_header">'+n.table_header+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.tableHeader+'</span></span></button><button type="button" data-command="remove" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div></div>",i},setController_tableEditor:function(e,t){const n=e.lang,i=e.icons,l=e.util.createElement("DIV");return l.className="se-controller se-controller-table-cell",l.innerHTML=(t?"":'<div class="se-arrow se-arrow-up"></div>')+'<div class="se-btn-group"><button type="button" data-command="insert" data-value="row" data-option="up" class="se-btn se-tooltip _se_table_insert_row_a">'+i.insert_row_above+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertRowAbove+'</span></span></button><button type="button" data-command="insert" data-value="row" data-option="down" class="se-btn se-tooltip _se_table_insert_row_b">'+i.insert_row_below+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertRowBelow+'</span></span></button><button type="button" data-command="delete" data-value="row" class="se-btn se-tooltip">'+i.delete_row+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.deleteRow+'</span></span></button><button type="button" data-command="merge" class="_se_table_merge_button se-btn se-tooltip" disabled>'+i.merge_cell+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.mergeCells+'</span></span></button></div><div class="se-btn-group" style="padding-top: 0;"><button type="button" data-command="insert" data-value="cell" data-option="left" class="se-btn se-tooltip">'+i.insert_column_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertColumnBefore+'</span></span></button><button type="button" data-command="insert" data-value="cell" data-option="right" class="se-btn se-tooltip">'+i.insert_column_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.insertColumnAfter+'</span></span></button><button type="button" data-command="delete" data-value="cell" class="se-btn se-tooltip">'+i.delete_column+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.deleteColumn+'</span></span></button><button type="button" data-command="onsplit" class="_se_table_split_button se-btn se-tooltip">'+i.split_cell+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+n.controller.splitCells+'</span></span></button><div class="se-btn-group-sub sun-editor-common se-list-layer se-table-split"><div class="se-list-inner"><ul class="se-list-basic"><li class="se-btn-list" data-command="split" data-value="vertical" style="line-height:32px;" title="'+n.controller.VerticalSplit+'" aria-label="'+n.controller.VerticalSplit+'">'+n.controller.VerticalSplit+'</li><li class="se-btn-list" data-command="split" data-value="horizontal" style="line-height:32px;" title="'+n.controller.HorizontalSplit+'" aria-label="'+n.controller.HorizontalSplit+'">'+n.controller.HorizontalSplit+"</li></ul></div></div></div>",l},appendTable:function(){const e=this.util.createElement("TABLE"),t=this.plugins.table.createCells,n=this.context.table._tableXY[0];let i=this.context.table._tableXY[1],l="<tbody>";for(;i>0;)l+="<tr>"+t.call(this,"td",n)+"</tr>",--i;l+="</tbody>",e.innerHTML=l;if(this.insertComponent(e,!1,!0,!1)){const t=e.querySelector("td div");this.setRange(t,0,t,0),this.plugins.table.reset_table_picker.call(this)}},createCells:function(e,t,n){if(e=e.toLowerCase(),n){const t=this.util.createElement(e);return t.innerHTML="<div><br></div>",t}{let n="";for(;t>0;)n+="<"+e+"><div><br></div></"+e+">",t--;return n}},onMouseMove_tablePicker:function(e,t){t.stopPropagation();let n=this._w.Math.ceil(t.offsetX/18),i=this._w.Math.ceil(t.offsetY/18);n=n<1?1:n,i=i<1?1:i,e._rtl&&(e.tableHighlight.style.left=18*n-13+"px",n=11-n),e.tableHighlight.style.width=n+"em",e.tableHighlight.style.height=i+"em",this.util.changeTxt(e.tableDisplay,n+" x "+i),e._tableXY=[n,i]},reset_table_picker:function(){if(!this.context.table.tableHighlight)return;const e=this.context.table.tableHighlight.style,t=this.context.table.tableUnHighlight.style;e.width="1em",e.height="1em",t.width="10em",t.height="10em",this.util.changeTxt(this.context.table.tableDisplay,"1 x 1"),this.submenuOff()},init:function(){const e=this.context.table,t=this.plugins.table;if(t._removeEvents.call(this),t._selectedTable){const e=t._selectedTable.querySelectorAll(".se-table-selected-cell");for(let t=0,n=e.length;t<n;t++)this.util.removeClass(e[t],"se-table-selected-cell")}t._toggleEditor.call(this,!0),e._element=null,e._tdElement=null,e._trElement=null,e._trElements=null,e._tableXY=[],e._maxWidth=!0,e._fixedColumn=!1,e._physical_cellCnt=0,e._logical_cellCnt=0,e._rowCnt=0,e._rowIndex=0,e._physical_cellIndex=0,e._logical_cellIndex=0,e._current_colSpan=0,e._current_rowSpan=0,t._shift=!1,t._selectedCells=null,t._selectedTable=null,t._ref=null,t._fixedCell=null,t._selectedCell=null,t._fixedCellName=null},call_controller_tableEdit:function(e){const t=this.plugins.table,n=this.context.table;if(!this.getSelection().isCollapsed&&!t._selectedCell)return this.controllersOff(),void this.util.removeClass(e,"se-table-selected-cell");const i=n._element||this.plugins.table._selectedTable||this.util.getParentElement(e,"TABLE");n._maxWidth=this.util.hasClass(i,"se-table-size-100")||"100%"===i.style.width||!i.style.width&&!this.util.hasClass(i,"se-table-size-auto"),n._fixedColumn=this.util.hasClass(i,"se-table-layout-fixed")||"fixed"===i.style.tableLayout,t.setTableStyle.call(this,n._maxWidth?"width|column":"width"),t.setPositionControllerTop.call(this,i),t.setPositionControllerDiv.call(this,e,t._shift),t._shift||this.controllersOn(n.resizeDiv,n.tableController,t.init.bind(this),e,"table")},setPositionControllerTop:function(e){this.setControllerPosition(this.context.table.tableController,e,"top",{left:0,top:0})},setPositionControllerDiv:function(e,t){const n=this.context.table,i=n.resizeDiv;this.plugins.table.setCellInfo.call(this,e,t),n.cellControllerTop?this.setControllerPosition(i,n._element,"top",{left:n.tableController.offsetWidth,top:0}):this.setControllerPosition(i,e,"bottom",{left:0,top:0})},setCellInfo:function(e,t){const n=this.context.table,i=n._element=this.plugins.table._selectedTable||this.util.getParentElement(e,"TABLE");if(/THEAD/i.test(i.firstElementChild.nodeName)?this.util.addClass(n.headerButton,"active"):this.util.removeClass(n.headerButton,"active"),t||0===n._physical_cellCnt){n._tdElement!==e&&(n._tdElement=e,n._trElement=e.parentNode);const t=n._trElements=i.rows,l=e.cellIndex;let s=0;for(let e=0,n=t[0].cells,i=t[0].cells.length;e<i;e++)s+=n[e].colSpan;const o=n._rowIndex=n._trElement.rowIndex;n._rowCnt=t.length,n._physical_cellCnt=n._trElement.cells.length,n._logical_cellCnt=s,n._physical_cellIndex=l,n._current_colSpan=n._tdElement.colSpan-1,n._current_rowSpan,n._trElement.cells[l].rowSpan;let a=[],r=[];for(let e,i,s=0;s<=o;s++){e=t[s].cells,i=0;for(let t,c,u,d,h=0,p=e.length;h<p;h++){if(t=e[h],c=t.colSpan-1,u=t.rowSpan-1,d=h+i,r.length>0)for(let e,t=0;t<r.length;t++)e=r[t],e.row>s||(d>=e.index?(i+=e.cs,d+=e.cs,e.rs-=1,e.row=s+1,e.rs<1&&(r.splice(t,1),t--)):h===p-1&&(e.rs-=1,e.row=s+1,e.rs<1&&(r.splice(t,1),t--)));if(s===o&&h===l){n._logical_cellIndex=d;break}u>0&&a.push({index:d,cs:c+1,rs:u,row:-1}),i+=c}r=r.concat(a).sort((function(e,t){return e.index-t.index})),a=[]}a=null,r=null}},editTable:function(e,t){const n=this.plugins.table,i=this.context.table,l=i._element,s="row"===e;if(s){const e=i._trElement.parentNode;if(/^THEAD$/i.test(e.nodeName)){if("up"===t)return;if(!e.nextElementSibling||!/^TBODY$/i.test(e.nextElementSibling.nodeName))return void(l.innerHTML+="<tbody><tr>"+n.createCells.call(this,"td",i._logical_cellCnt,!1)+"</tr></tbody>")}}if(n._ref){const e=i._tdElement,l=n._selectedCells;if(s)if(t)n.setCellInfo.call(this,"up"===t?l[0]:l[l.length-1],!0),n.editRow.call(this,t,e);else{let e=l[0].parentNode;const i=[l[0]];for(let t,n=1,s=l.length;n<s;n++)t=l[n],e!==t.parentNode&&(i.push(t),e=t.parentNode);for(let e=0,l=i.length;e<l;e++)n.setCellInfo.call(this,i[e],!0),n.editRow.call(this,t)}else{const i=l[0].parentNode;if(t){let s=null;for(let e=0,t=l.length-1;e<t;e++)if(i!==l[e+1].parentNode){s=l[e];break}n.setCellInfo.call(this,"left"===t?l[0]:s||l[0],!0),n.editCell.call(this,t,e)}else{const e=[l[0]];for(let t,n=1,s=l.length;n<s&&(t=l[n],i===t.parentNode);n++)e.push(t);for(let i=0,l=e.length;i<l;i++)n.setCellInfo.call(this,e[i],!0),n.editCell.call(this,t)}}t||n.init.call(this)}else n[s?"editRow":"editCell"].call(this,t);if(!t){const e=l.children;for(let t=0;t<e.length;t++)0===e[t].children.length&&(this.util.removeItem(e[t]),t--);0===l.children.length&&this.util.removeItem(l)}},editRow:function(e,t){const n=this.context.table,i=!e,l="up"===e,s=n._rowIndex,o=i||l?s:s+n._current_rowSpan+1,a=i?-1:1,r=n._trElements;let c=n._logical_cellCnt;for(let e,t=0,n=s+(i?-1:0);t<=n;t++){if(e=r[t].cells,0===e.length)return;for(let n,i,l=0,s=e.length;l<s;l++)n=e[l].rowSpan,i=e[l].colSpan,n<2&&i<2||n+t>o&&o>t&&(e[l].rowSpan=n+a,c-=i)}if(i){const e=r[s+1];if(e){const t=[];let n=r[s].cells,i=0;for(let e,l,s=0,o=n.length;s<o;s++)e=n[s],l=s+i,i+=e.colSpan-1,e.rowSpan>1&&(e.rowSpan-=1,t.push({cell:e.cloneNode(!1),index:l}));if(t.length>0){let l=t.shift();n=e.cells,i=0;for(let s,o,a=0,r=n.length;a<r&&(s=n[a],o=a+i,i+=s.colSpan-1,!(o>=l.index)||(a--,i--,i+=l.cell.colSpan-1,e.insertBefore(l.cell,s),l=t.shift(),l));a++);if(l){e.appendChild(l.cell);for(let n=0,i=t.length;n<i;n++)e.appendChild(t[n].cell)}}}n._element.deleteRow(o)}else{n._element.insertRow(o).innerHTML=this.plugins.table.createCells.call(this,"td",c,!1)}i?this.controllersOff():this.plugins.table.setPositionControllerDiv.call(this,t||n._tdElement,!0)},editCell:function(e,t){const n=this.context.table,i=this.util,l=!e,s="left"===e,o=n._current_colSpan,a=l||s?n._logical_cellIndex:n._logical_cellIndex+o+1,r=n._trElements;let c=[],u=[],d=0;const h=[],p=[];for(let e,t,s,g,m,f,_=0,b=n._rowCnt;_<b;_++){e=r[_],t=a,m=!1,s=e.cells,f=0;for(let e,n,r,g,b=0,v=s.length;b<v&&(e=s[b],e);b++)if(n=e.rowSpan-1,r=e.colSpan-1,l){if(g=b+f,u.length>0){const e=!s[b+1];for(let t,n=0;n<u.length;n++)t=u[n],t.row>_||(g>=t.index?(f+=t.cs,g=b+f,t.rs-=1,t.row=_+1,t.rs<1&&(u.splice(n,1),n--)):e&&(t.rs-=1,t.row=_+1,t.rs<1&&(u.splice(n,1),n--)))}n>0&&c.push({rs:n,cs:r+1,index:g,row:-1}),g>=t&&g+r<=t+o?h.push(e):g<=t+o&&g+r>=t?e.colSpan-=i.getOverlapRangeAtIndex(a,a+o,g,g+r):n>0&&(g<t||g+r>t+o)&&p.push({cell:e,i:_,rs:_+n}),f+=r}else{if(b>=t)break;if(r>0){if(d<1&&r+b>=t){e.colSpan+=1,t=null,d=n+1;break}t-=r}if(!m){for(let e,n=0;n<u.length;n++)e=u[n],t-=e.cs,e.rs-=1,e.rs<1&&(u.splice(n,1),n--);m=!0}}if(u=u.concat(c).sort((function(e,t){return e.index-t.index})),c=[],!l){if(d>0){d-=1;continue}null!==t&&s.length>0&&(g=this.plugins.table.createCells.call(this,s[0].nodeName,0,!0),g=e.insertBefore(g,s[t]))}}if(l){let e,t;for(let n,l=0,s=h.length;l<s;l++)n=h[l].parentNode,i.removeItem(h[l]),0===n.cells.length&&(e||(e=i.getArrayIndex(r,n)),t=i.getArrayIndex(r,n),i.removeItem(n));for(let n,l=0,s=p.length;l<s;l++)n=p[l],n.cell.rowSpan=i.getOverlapRangeAtIndex(e,t,n.i,n.rs);this.controllersOff()}else this.plugins.table.setPositionControllerDiv.call(this,t||n._tdElement,!0)},_closeSplitMenu:null,openSplitMenu:function(){this.util.addClass(this.context.table.splitButton,"on"),this.context.table.splitMenu.style.display="inline-table",this.plugins.table._closeSplitMenu=function(){this.util.removeClass(this.context.table.splitButton,"on"),this.context.table.splitMenu.style.display="none",this.removeDocEvent("click",this.plugins.table._closeSplitMenu),this.plugins.table._closeSplitMenu=null}.bind(this),this.addDocEvent("click",this.plugins.table._closeSplitMenu)},splitCells:function(e){const t=this.util,n="vertical"===e,i=this.context.table,l=i._tdElement,s=i._trElements,o=i._trElement,a=i._logical_cellIndex,r=i._rowIndex,c=this.plugins.table.createCells.call(this,l.nodeName,0,!0);if(n){const e=l.colSpan;if(c.rowSpan=l.rowSpan,e>1)c.colSpan=this._w.Math.floor(e/2),l.colSpan=e-c.colSpan,o.insertBefore(c,l.nextElementSibling);else{let t=[],n=[];for(let o,r,c=0,u=i._rowCnt;c<u;c++){o=s[c].cells,r=0;for(let i,s,u,d,h=0,p=o.length;h<p;h++){if(i=o[h],s=i.colSpan-1,u=i.rowSpan-1,d=h+r,n.length>0)for(let e,t=0;t<n.length;t++)e=n[t],e.row>c||(d>=e.index?(r+=e.cs,d+=e.cs,e.rs-=1,e.row=c+1,e.rs<1&&(n.splice(t,1),t--)):h===p-1&&(e.rs-=1,e.row=c+1,e.rs<1&&(n.splice(t,1),t--)));if(d<=a&&u>0&&t.push({index:d,cs:s+1,rs:u,row:-1}),i!==l&&d<=a&&d+s>=a+e-1){i.colSpan+=1;break}if(d>a)break;r+=s}n=n.concat(t).sort((function(e,t){return e.index-t.index})),t=[]}o.insertBefore(c,l.nextElementSibling)}}else{const e=l.rowSpan;if(c.colSpan=l.colSpan,e>1){c.rowSpan=this._w.Math.floor(e/2);const n=e-c.rowSpan,i=[],r=t.getArrayIndex(s,o)+n;for(let e,t,n=0;n<r;n++){e=s[n].cells,t=0;for(let l,s,o,c=0,u=e.length;c<u&&(o=c+t,!(o>=a));c++)l=e[c],s=l.rowSpan-1,s>0&&s+n>=r&&o<a&&i.push({index:o,cs:l.colSpan}),t+=l.colSpan-1}const u=s[r],d=u.cells;let h=i.shift();for(let e,t,n,l,s=0,o=d.length,r=0;s<o;s++){if(n=s+r,e=d[s],t=e.colSpan-1,l=n+t+1,h&&l>=h.index&&(r+=h.cs,l+=h.cs,h=i.shift()),l>=a||s===o-1){u.insertBefore(c,e.nextElementSibling);break}r+=t}l.rowSpan=n}else{c.rowSpan=l.rowSpan;const e=t.createElement("TR");e.appendChild(c);for(let e,t=0;t<r;t++){if(e=s[t].cells,0===e.length)return;for(let n=0,i=e.length;n<i;n++)t+e[n].rowSpan-1>=r&&(e[n].rowSpan+=1)}const n=i._physical_cellIndex,a=o.cells;for(let e=0,t=a.length;e<t;e++)e!==n&&(a[e].rowSpan+=1);o.parentNode.insertBefore(e,o.nextElementSibling)}}this.focusEdge(l),this.plugins.table.setPositionControllerDiv.call(this,l,!0)},mergeCells:function(){const e=this.plugins.table,t=this.context.table,n=this.util,i=e._ref,l=e._selectedCells,s=l[0];let o=null,a=null,r=i.ce-i.cs+1,c=i.re-i.rs+1,u="",d=null;for(let e,t,i=1,s=l.length;i<s;i++){e=l[i],d!==e.parentNode&&(d=e.parentNode),t=e.children;for(let e=0,i=t.length;e<i;e++)n.isFormatElement(t[e])&&n.onlyZeroWidthSpace(t[e].textContent)&&n.removeItem(t[e]);u+=e.innerHTML,n.removeItem(e),0===d.cells.length&&(o?a=d:o=d,c-=1)}if(o){const e=t._trElements,i=n.getArrayIndex(e,o),l=n.getArrayIndex(e,a||o),s=[];for(let t,o=0;o<=l;o++)if(t=e[o].cells,0!==t.length)for(let e,s,a=0,r=t.length;a<r;a++)e=t[a],s=e.rowSpan-1,s>0&&o+s>=i&&(e.rowSpan-=n.getOverlapRangeAtIndex(i,l,o,o+s));else s.push(e[o]);for(let e=0,t=s.length;e<t;e++)n.removeItem(s[e])}s.innerHTML+=u,s.colSpan=r,s.rowSpan=c,this.controllersOff(),e.setActiveButton.call(this,!0,!1),e.call_controller_tableEdit.call(this,s),n.addClass(s,"se-table-selected-cell"),this.focusEdge(s)},toggleHeader:function(){const e=this.util,t=this.context.table.headerButton,n=e.hasClass(t,"active"),i=this.context.table._element;if(n)e.removeItem(i.querySelector("thead"));else{const t=e.createElement("THEAD");t.innerHTML="<tr>"+this.plugins.table.createCells.call(this,"th",this.context.table._logical_cellCnt,!1)+"</tr>",i.insertBefore(t,i.firstElementChild)}e.toggleClass(t,"active"),/TH/i.test(this.context.table._tdElement.nodeName)?this.controllersOff():this.plugins.table.setPositionControllerDiv.call(this,this.context.table._tdElement,!1)},setTableStyle:function(e){const t=this.context.table,n=t._element;let i,l,s,o;e.indexOf("width")>-1&&(i=t.resizeButton.firstElementChild,l=t.resizeText,t._maxWidth?(s=t.icons.reduction,o=t.minText,t.columnFixedButton.style.display="block",this.util.removeClass(n,"se-table-size-auto"),this.util.addClass(n,"se-table-size-100")):(s=t.icons.expansion,o=t.maxText,t.columnFixedButton.style.display="none",this.util.removeClass(n,"se-table-size-100"),this.util.addClass(n,"se-table-size-auto")),this.util.changeElement(i,s),this.util.changeTxt(l,o)),e.indexOf("column")>-1&&(t._fixedColumn?(this.util.removeClass(n,"se-table-layout-auto"),this.util.addClass(n,"se-table-layout-fixed"),this.util.addClass(t.columnFixedButton,"active")):(this.util.removeClass(n,"se-table-layout-fixed"),this.util.addClass(n,"se-table-layout-auto"),this.util.removeClass(t.columnFixedButton,"active")))},setActiveButton:function(e,t){const n=this.context.table;/^TH$/i.test(e.nodeName)?(n.insertRowAboveButton.setAttribute("disabled",!0),n.insertRowBelowButton.setAttribute("disabled",!0)):(n.insertRowAboveButton.removeAttribute("disabled"),n.insertRowBelowButton.removeAttribute("disabled")),t&&e!==t?(n.splitButton.setAttribute("disabled",!0),n.mergeButton.removeAttribute("disabled")):(n.splitButton.removeAttribute("disabled"),n.mergeButton.setAttribute("disabled",!0))},_bindOnSelect:null,_bindOffSelect:null,_bindOffShift:null,_selectedCells:null,_shift:!1,_fixedCell:null,_fixedCellName:null,_selectedCell:null,_selectedTable:null,_ref:null,_toggleEditor:function(e){this.context.element.wysiwyg.setAttribute("contenteditable",e),e?this.util.removeClass(this.context.element.wysiwyg,"se-disabled"):this.util.addClass(this.context.element.wysiwyg,"se-disabled")},_offCellMultiSelect:function(e){e.stopPropagation();const t=this.plugins.table;t._shift?t._initBind&&(this._wd.removeEventListener("touchmove",t._initBind),t._initBind=null):(t._removeEvents.call(this),t._toggleEditor.call(this,!0)),t._fixedCell&&t._selectedTable&&(t.setActiveButton.call(this,t._fixedCell,t._selectedCell),t.call_controller_tableEdit.call(this,t._selectedCell||t._fixedCell),t._selectedCells=t._selectedTable.querySelectorAll(".se-table-selected-cell"),t._selectedCell&&t._fixedCell&&this.focusEdge(t._selectedCell),t._shift||(t._fixedCell=null,t._selectedCell=null,t._fixedCellName=null))},_onCellMultiSelect:function(e){this._antiBlur=!0;const t=this.plugins.table,n=this.util.getParentElement(e.target,this.util.isCell);if(t._shift)n===t._fixedCell?t._toggleEditor.call(this,!0):t._toggleEditor.call(this,!1);else if(!t._ref){if(n===t._fixedCell)return;t._toggleEditor.call(this,!1)}n&&n!==t._selectedCell&&t._fixedCellName===n.nodeName&&t._selectedTable===this.util.getParentElement(n,"TABLE")&&(t._selectedCell=n,t._setMultiCells.call(this,t._fixedCell,n))},_setMultiCells:function(e,t){const n=this.plugins.table,i=n._selectedTable.rows,l=this.util,s=n._selectedTable.querySelectorAll(".se-table-selected-cell");for(let e=0,t=s.length;e<t;e++)l.removeClass(s[e],"se-table-selected-cell");if(e===t&&(l.addClass(e,"se-table-selected-cell"),!n._shift))return;let o=!0,a=[],r=[];const c=n._ref={_i:0,cs:null,ce:null,rs:null,re:null};for(let n,s,u=0,d=i.length;u<d;u++){n=i[u].cells,s=0;for(let i,d,h,p,g=0,m=n.length;g<m;g++){if(i=n[g],h=i.colSpan-1,p=i.rowSpan-1,d=g+s,a.length>0)for(let e,t=0;t<a.length;t++)e=a[t],e.row>u||(d>=e.index?(s+=e.cs,d+=e.cs,e.rs-=1,e.row=u+1,e.rs<1&&(a.splice(t,1),t--)):g===m-1&&(e.rs-=1,e.row=u+1,e.rs<1&&(a.splice(t,1),t--)));if(o){if(i!==e&&i!==t||(c.cs=null!==c.cs&&c.cs<d?c.cs:d,c.ce=null!==c.ce&&c.ce>d+h?c.ce:d+h,c.rs=null!==c.rs&&c.rs<u?c.rs:u,c.re=null!==c.re&&c.re>u+p?c.re:u+p,c._i+=1),2===c._i){o=!1,a=[],r=[],u=-1;break}}else if(l.getOverlapRangeAtIndex(c.cs,c.ce,d,d+h)&&l.getOverlapRangeAtIndex(c.rs,c.re,u,u+p)){const e=c.cs<d?c.cs:d,t=c.ce>d+h?c.ce:d+h,n=c.rs<u?c.rs:u,s=c.re>u+p?c.re:u+p;if(c.cs!==e||c.ce!==t||c.rs!==n||c.re!==s){c.cs=e,c.ce=t,c.rs=n,c.re=s,u=-1,a=[],r=[];break}l.addClass(i,"se-table-selected-cell")}p>0&&r.push({index:d,cs:h+1,rs:p,row:-1}),s+=i.colSpan-1}a=a.concat(r).sort((function(e,t){return e.index-t.index})),r=[]}},_removeEvents:function(){const e=this.plugins.table;e._initBind&&(this._wd.removeEventListener("touchmove",e._initBind),e._initBind=null),e._bindOnSelect&&(this._wd.removeEventListener("mousedown",e._bindOnSelect),this._wd.removeEventListener("mousemove",e._bindOnSelect),e._bindOnSelect=null),e._bindOffSelect&&(this._wd.removeEventListener("mouseup",e._bindOffSelect),e._bindOffSelect=null),e._bindOffShift&&(this._wd.removeEventListener("keyup",e._bindOffShift),e._bindOffShift=null)},_initBind:null,onTableCellMultiSelect:function(e,t){const n=this.plugins.table;n._removeEvents.call(this),this.controllersOff(),n._shift=t,n._fixedCell=e,n._fixedCellName=e.nodeName,n._selectedTable=this.util.getParentElement(e,"TABLE");const i=n._selectedTable.querySelectorAll(".se-table-selected-cell");for(let e=0,t=i.length;e<t;e++)this.util.removeClass(i[e],"se-table-selected-cell");this.util.addClass(e,"se-table-selected-cell"),n._bindOnSelect=n._onCellMultiSelect.bind(this),n._bindOffSelect=n._offCellMultiSelect.bind(this),t?(n._bindOffShift=function(){this.controllersOn(this.context.table.resizeDiv,this.context.table.tableController,this.plugins.table.init.bind(this),e,"table"),n._ref||this.controllersOff()}.bind(this),this._wd.addEventListener("keyup",n._bindOffShift,!1),this._wd.addEventListener("mousedown",n._bindOnSelect,!1)):this._wd.addEventListener("mousemove",n._bindOnSelect,!1),this._wd.addEventListener("mouseup",n._bindOffSelect,!1),n._initBind=n.init.bind(this),this._wd.addEventListener("touchmove",n._initBind,!1)},onClick_tableController:function(e){e.stopPropagation();const t=e.target.getAttribute("data-command")?e.target:e.target.parentNode;if(t.getAttribute("disabled"))return;const n=t.getAttribute("data-command"),i=t.getAttribute("data-value"),l=t.getAttribute("data-option"),s=this.plugins.table;if("function"==typeof s._closeSplitMenu&&(s._closeSplitMenu(),"onsplit"===n))return;if(!n)return;e.preventDefault();const o=this.context.table;switch(n){case"insert":case"delete":s.editTable.call(this,i,l);break;case"header":s.toggleHeader.call(this);break;case"onsplit":s.openSplitMenu.call(this);break;case"split":s.splitCells.call(this,i);break;case"merge":s.mergeCells.call(this);break;case"resize":o._maxWidth=!o._maxWidth,s.setTableStyle.call(this,"width"),s.setPositionControllerTop.call(this,o._element),s.setPositionControllerDiv.call(this,o._tdElement,s._shift);break;case"layout":o._fixedColumn=!o._fixedColumn,s.setTableStyle.call(this,"column"),s.setPositionControllerTop.call(this,o._element),s.setPositionControllerDiv.call(this,o._tdElement,s._shift);break;case"remove":const e=o._element.parentNode;this.util.removeItem(o._element),this.controllersOff(),e!==this.context.element.wysiwyg&&this.util.removeItemAllParents(e,(function(e){return 0===e.childNodes.length}),null),this.focus()}this.history.push(!1)}},formatBlock:{name:"formatBlock",display:"submenu",add:function(e,t){const n=e.context;n.formatBlock={targetText:t.querySelector(".txt"),targetTooltip:t.parentNode.querySelector(".se-tooltip-text"),_formatList:null,currentFormat:""};let i=this.setSubmenu(e);i.querySelector("ul").addEventListener("click",this.pickUp.bind(e)),n.formatBlock._formatList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.options,n=e.lang.toolbar,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer se-list-format";const l=["p","div","blockquote","pre","h1","h2","h3","h4","h5","h6"],s=t.formats&&0!==t.formats.length?t.formats:l;let o='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,i,a,r,c,u,d=0,h=s.length;d<h;d++)e=s[d],"string"==typeof e&&l.indexOf(e)>-1?(t=e.toLowerCase(),i="blockquote"===t?"range":"pre"===t?"free":"replace",r=/^h/.test(t)?t.match(/\d+/)[0]:"",a=n["tag_"+(r?"h":t)]+r,u="",c=""):(t=e.tag.toLowerCase(),i=e.command,a=e.name||t,u=e.class,c=u?' class="'+u+'"':""),o+='<li><button type="button" class="se-btn-list" data-command="'+i+'" data-value="'+t+'" data-class="'+u+'" title="'+a+'" aria-label="'+a+'"><'+t+c+">"+a+"</"+t+"></button></li>";return o+="</ul></div>",i.innerHTML=o,i},active:function(e){let t=this.lang.toolbar.formats;const n=this.context.formatBlock.targetText;if(e){if(this.util.isFormatElement(e)){const i=this.context.formatBlock._formatList,l=e.nodeName.toLowerCase(),s=(e.className.match(/(\s|^)__se__format__[^\s]+/)||[""])[0].trim();for(let e,n=0,o=i.length;n<o;n++)if(e=i[n],l===e.getAttribute("data-value")&&s===e.getAttribute("data-class")){t=e.title;break}return this.util.changeTxt(n,t),n.setAttribute("data-value",l),n.setAttribute("data-class",s),!0}}else this.util.changeTxt(n,t);return!1},on:function(){const e=this.context.formatBlock,t=e._formatList,n=e.targetText,i=(n.getAttribute("data-value")||"")+(n.getAttribute("data-class")||"");if(i!==e.currentFormat){for(let e,n=0,l=t.length;n<l;n++)e=t[n],i===e.getAttribute("data-value")+e.getAttribute("data-class")?this.util.addClass(e,"active"):this.util.removeClass(e,"active");e.currentFormat=i}},pickUp:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null,i=null,l=null,s="";for(;!n&&!/UL/i.test(t.tagName);){if(n=t.getAttribute("data-command"),i=t.getAttribute("data-value"),s=t.getAttribute("data-class"),n){l=t.firstChild;break}t=t.parentNode}if(n){if("range"===n){const e=l.cloneNode(!1);this.applyRangeFormatElement(e)}else{let e=this.getRange(),t=this.getSelectedElementsAndComponents(!1);if(0===t.length&&(e=this.getRange_addLine(e,null),t=this.getSelectedElementsAndComponents(!1),0===t.length))return;const o=e.startOffset,a=e.endOffset,r=this.util;let c=t[0],u=t[t.length-1];const d=r.getNodePath(e.startContainer,c,null,null),h=r.getNodePath(e.endContainer,u,null,null),p=this.detachList(t,!1);p.sc&&(c=p.sc),p.ec&&(u=p.ec),this.setRange(r.getNodeFromPath(d,c),o,r.getNodeFromPath(h,u),a);const g=this.getSelectedElementsAndComponents(!1);if("free"===n){const e=g.length-1;let t=g[e].parentNode,n=l.cloneNode(!1);const i=n;for(let i,s,o,a,c,u,d=e,h=!0;d>=0;d--)if(i=g[d],i!==(g[d+1]?g[d+1].parentNode:null)){if(u=r.isComponent(i),s=u?"":i.innerHTML.replace(/(?!>)\s+(?=<)|\n/g," "),o=r.getParentElement(i,(function(e){return e.parentNode===t})),(t!==i.parentNode||u)&&(r.isFormatElement(t)?(t.parentNode.insertBefore(n,t.nextSibling),t=t.parentNode):(t.insertBefore(n,o?o.nextSibling:null),t=i.parentNode),a=n.nextSibling,a&&n.nodeName===a.nodeName&&r.isSameAttributes(n,a)&&(n.innerHTML+="<BR>"+a.innerHTML,r.removeItem(a)),n=l.cloneNode(!1),h=!0),c=n.innerHTML,n.innerHTML=(h||!s||!c||/<br>$/i.test(s)?s:s+"<BR>")+c,0===d){t.insertBefore(n,i),a=i.nextSibling,a&&n.nodeName===a.nodeName&&r.isSameAttributes(n,a)&&(n.innerHTML+="<BR>"+a.innerHTML,r.removeItem(a));const e=n.previousSibling;e&&n.nodeName===e.nodeName&&r.isSameAttributes(n,e)&&(e.innerHTML+="<BR>"+n.innerHTML,r.removeItem(n))}u||r.removeItem(i),s&&(h=!1)}this.setRange(i,0,i,0)}else{for(let e,t,n=0,o=g.length;n<o;n++)e=g[n],e.nodeName.toLowerCase()===i.toLowerCase()&&(e.className.match(/(\s|^)__se__format__[^\s]+/)||[""])[0].trim()===s||r.isComponent(e)||(t=l.cloneNode(!1),r.copyFormatAttributes(t,e),t.innerHTML=e.innerHTML,e.parentNode.replaceChild(t,e)),0===n&&(c=t||e),n===o-1&&(u=t||e),t=null;this.setRange(r.getNodeFromPath(d,c),o,r.getNodeFromPath(h,u),a)}this.history.push(!1)}this.submenuOff()}}},lineHeight:{name:"lineHeight",display:"submenu",add:function(e,t){const n=e.context;n.lineHeight={_sizeList:null,currentSize:-1};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.lineHeight._sizeList=l.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.options,n=e.lang,i=e.util.createElement("DIV");i.className="se-submenu se-list-layer";const l=t.lineHeights?t.lineHeights:[{text:"1",value:1},{text:"1.15",value:1.15},{text:"1.5",value:1.5},{text:"2",value:2}];let s='<div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="default_value se-btn-list" title="'+n.toolbar.default+'" aria-label="'+n.toolbar.default+'">('+n.toolbar.default+")</button></li>";for(let e,t=0,n=l.length;t<n;t++)e=l[t],s+='<li><button type="button" class="se-btn-list" data-value="'+e.value+'" title="'+e.text+'" aria-label="'+e.text+'">'+e.text+"</button></li>";return s+="</ul></div>",i.innerHTML=s,i},on:function(){const e=this.context.lineHeight,t=e._sizeList,n=this.util.getFormatElement(this.getSelectionNode()),i=n?n.style.lineHeight+"":"";if(i!==e.currentSize){for(let e=0,n=t.length;e<n;e++)i===t[e].getAttribute("data-value")?this.util.addClass(t[e],"active"):this.util.removeClass(t[e],"active");e.currentSize=i}},pickup:function(e){if(!/^BUTTON$/i.test(e.target.tagName))return!1;e.preventDefault(),e.stopPropagation();const t=e.target.getAttribute("data-value")||"",n=this.getSelectedElements();for(let e=0,i=n.length;e<i;e++)n[e].style.lineHeight=t;this.submenuOff(),this.history.push(!1)}},template:o,paragraphStyle:{name:"paragraphStyle",display:"submenu",add:function(e,t){const n=e.context;n.paragraphStyle={_classList:null};let i=this.setSubmenu(e);i.querySelector("ul").addEventListener("click",this.pickUp.bind(e)),n.paragraphStyle._classList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null},setSubmenu:function(e){const t=e.options,n=e.util.createElement("DIV");n.className="se-submenu se-list-layer se-list-format";const i=e.lang.menu,l={spaced:{name:i.spaced,class:"__se__p-spaced",_class:""},bordered:{name:i.bordered,class:"__se__p-bordered",_class:""},neon:{name:i.neon,class:"__se__p-neon",_class:""}},s=t.paragraphStyles&&0!==t.paragraphStyles.length?t.paragraphStyles:["spaced","bordered","neon"];let o='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,n,i,a=0,r=s.length;a<r;a++){if(e=s[a],"string"==typeof e){const t=l[e.toLowerCase()];if(!t)continue;e=t}t=e.name,n=e.class?' class="'+e.class+'"':"",i=e._class,o+='<li><button type="button" class="se-btn-list'+(i?" "+i:"")+'" data-value="'+e.class+'" title="'+t+'" aria-label="'+t+'"><div'+n+">"+t+"</div></button></li>"}return o+="</ul></div>",n.innerHTML=o,n},on:function(){const e=this.context.paragraphStyle._classList,t=this.util.getFormatElement(this.getSelectionNode());for(let n=0,i=e.length;n<i;n++)this.util.hasClass(t,e[n].getAttribute("data-value"))?this.util.addClass(e[n],"active"):this.util.removeClass(e[n],"active")},pickUp:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null;for(;!/^UL$/i.test(t.tagName)&&(n=t.getAttribute("data-value"),!n);)t=t.parentNode;if(!n)return;let i=this.getSelectedElements();if(0===i.length&&(this.getRange_addLine(this.getRange(),null),i=this.getSelectedElements(),0===i.length))return;const l=this.util.hasClass(t,"active")?this.util.removeClass.bind(this.util):this.util.addClass.bind(this.util);for(let e=0,t=i.length;e<t;e++)l(i[e],n);this.submenuOff(),this.history.push(!1)}},textStyle:{name:"textStyle",display:"submenu",add:function(e,t){const n=e.context;n.textStyle={_styleList:null};let i=this.setSubmenu(e),l=i.querySelector("ul");l.addEventListener("click",this.pickup.bind(e)),n.textStyle._styleList=i.querySelectorAll("li button"),e.initMenuTarget(this.name,t,i),i=null,l=null},setSubmenu:function(e){const t=e.options,n=e.util.createElement("DIV");n.className="se-submenu se-list-layer se-list-format";const i={code:{name:e.lang.menu.code,class:"__se__t-code",tag:"code"},translucent:{name:e.lang.menu.translucent,style:"opacity: 0.5;",tag:"span"},shadow:{name:e.lang.menu.shadow,class:"__se__t-shadow",tag:"span"}},l=t.textStyles?t.textStyles:e._w.Object.keys(i);let s='<div class="se-list-inner"><ul class="se-list-basic">';for(let e,t,n,o,a,r,c,u=0,d=l.length;u<d;u++){if(e=l[u],o="",r="",a=[],"string"==typeof e){const t=i[e.toLowerCase()];if(!t)continue;e=t}n=e.name,t=e.tag||"span",c=e._class,e.style&&(o+=' style="'+e.style+'"',r+=e.style.replace(/:[^;]+(;|$)\s*/g,","),a.push("style")),e.class&&(o+=' class="'+e.class+'"',r+="."+e.class.trim().replace(/\s+/g,",."),a.push("class")),r=r.replace(/,$/,""),s+='<li><button type="button" class="se-btn-list'+(c?" "+c:"")+'" data-command="'+t+'" data-value="'+r+'" title="'+n+'" aria-label="'+n+'"><'+t+o+">"+n+"</"+t+"></button></li>"}return s+="</ul></div>",n.innerHTML=s,n},on:function(){const e=this.util,t=this.context.textStyle._styleList,n=this.getSelectionNode();for(let i,l,s,o=0,a=t.length;o<a;o++){i=t[o],l=i.getAttribute("data-value").split(",");for(let t,o,a=0;a<l.length;a++){for(t=n,s=!1;t&&!e.isFormatElement(t)&&!e.isComponent(t);){if(t.nodeName.toLowerCase()===i.getAttribute("data-command").toLowerCase()&&(o=l[a],/^\./.test(o)?e.hasClass(t,o.replace(/^\./,"")):t.style[o])){s=!0;break}t=t.parentNode}if(!s)break}s?e.addClass(i,"active"):e.removeClass(i,"active")}},pickup:function(e){e.preventDefault(),e.stopPropagation();let t=e.target,n=null,i=null;for(;!n&&!/UL/i.test(t.tagName);){if(n=t.getAttribute("data-command"),n){i=t.firstChild;break}t=t.parentNode}if(!n)return;const l=i.style.cssText.replace(/:.+(;|$)/g,",").split(",");l.pop();const s=i.classList;for(let e=0,t=s.length;e<t;e++)l.push("."+s[e]);const o=this.util.hasClass(t,"active")?null:i.cloneNode(!1),a=o?null:[i.nodeName];this.nodeChange(o,l,a,!0),this.submenuOff()}},link:d,image:b,video:v,audio:y,math:C,imageGallery:{name:"imageGallery",add:function(e){e.addModule([E.a]);e.context.imageGallery={title:e.lang.toolbar.imageGallery,url:e.options.imageGalleryUrl,header:e.options.imageGalleryHeader,listClass:"se-image-list",itemTemplateHandler:this.drawItems,selectorHandler:this.setImage.bind(e),columnSize:4}},open:function(e){this.plugins.fileBrowser.open.call(this,"imageGallery",e)},drawItems:function(e){const t=e.src.split("/").pop();return'<div class="se-file-item-img"><img src="'+(e.thumbnail||e.src)+'" alt="'+(e.alt||t)+'" data-command="pick" data-value="'+(e.src||e.thumbnail)+'"><div class="se-file-img-name se-file-name-back"></div><div class="se-file-img-name __se__img_name">'+(e.name||t)+"</div></div>"},setImage:function(e,t){this.callPlugin("image",function(){const n={name:t,size:0};this.plugins.image.create_image.call(this,e.getAttribute("data-value"),null,this.context.image._origin_w,this.context.image._origin_h,"none",n,e.alt)}.bind(this),null)}}},S={rtl:{italic:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10.5 15.8" xml:space="preserve"><g><path d="M0.3,0.1c0.3,0,0.5,0,0.7,0c1,0.1,1.7,0.1,2.2,0.1H4L7.2,0l0.2,1.1H7c-0.5,0-1,0.1-1.5,0.3v0.4l0.3,1.9L6,4.4L6.3,6 l0.1,0.4l0.1,0.5c0.1,0.2,0.1,0.4,0.2,0.7s0.1,0.6,0.2,0.9L7,9.1l0.6,2.8l0.3,1.4c0.1,0.4,0.2,0.7,0.4,1c0.4,0.2,0.8,0.3,1.2,0.4 l0.8,0.2l0.2,0.9l-1.1,0c-0.9-0.1-1.5-0.1-1.8-0.1h-2c-0.9,0.1-1.4,0.2-1.5,0.2c-0.1,0-0.2,0-0.3,0H3.4c-0.1,0-0.2,0-0.2,0 l-0.1-0.4c0-0.2-0.1-0.4-0.1-0.6l0.7-0.1c0.4,0,0.8-0.1,1.2-0.2c0-0.1,0-0.2,0-0.3l-0.1-0.5l-0.4-2.4L4,9.6L3.4,6.4 C3.2,5.7,3,4.7,2.7,3.3c0-0.3-0.1-0.5-0.1-0.8C2.5,2.1,2.4,1.9,2.3,1.6C2,1.4,1.6,1.3,1.3,1.2C0.9,1.2,0.5,1.1,0.2,0.9L0,0.4L0,0 L0.3,0.1L0.3,0.1z"/></g></svg>',indent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><g><path d="M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z"/></g><path d="M13.1,3.5L15.7,6c0.1,0.1,0.1,0.3,0,0.4l-2.5,2.5C13.1,9,13,9,12.9,9c-0.1,0-0.1,0-0.2-0.1c-0.1-0.1-0.1-0.1-0.1-0.2V3.7 c0-0.1,0-0.2,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C13,3.4,13.1,3.4,13.1,3.5z"/></g></svg>',outdent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><g><path d="M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z"/></g><path d="M15.5,3.4c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2v5.1c0,0.1,0,0.1-0.1,0.2C15.6,9,15.5,9,15.5,9 c-0.1,0-0.1,0-0.2-0.1l-2.5-2.5c-0.1-0.1-0.1-0.3,0-0.4l2.5-2.5C15.3,3.4,15.4,3.4,15.5,3.4z"/></g></svg>',list_bullets:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 12.4" xml:space="preserve"><g><path d="M12.4,10.7c0,0.9,0.8,1.7,1.7,1.7c0.9,0,1.7-0.8,1.7-1.7C15.7,9.8,15,9,14.1,9c-0.4,0-0.9,0.2-1.2,0.5 C12.5,9.8,12.4,10.2,12.4,10.7C12.4,10.7,12.4,10.7,12.4,10.7z M12.4,6.2c0,0.9,0.8,1.7,1.7,1.7c0.4,0,0.9-0.2,1.2-0.5 c0.3-0.3,0.4-0.7,0.4-1.1c0-0.9-0.7-1.7-1.6-1.7C13.1,4.6,12.4,5.3,12.4,6.2C12.4,6.2,12.4,6.2,12.4,6.2z M0,9.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1l10.7,0c0,0,0,0,0,0c0.1,0,0.3-0.1,0.3-0.3V9.8c0-0.1,0-0.1-0.1-0.2 C11.1,9.6,11,9.6,11,9.6l-10.7,0c-0.1,0-0.1,0-0.2,0.1C0,9.7,0,9.8,0,9.8L0,9.8z M12.9,2.9c0.3,0.3,0.7,0.5,1.2,0.5 c0.4,0,0.9-0.2,1.2-0.5c0.7-0.7,0.7-1.7,0-2.4C14.9,0.2,14.5,0,14.1,0c-0.4,0-0.9,0.2-1.2,0.5c-0.3,0.3-0.5,0.7-0.5,1.2 C12.4,2.1,12.5,2.6,12.9,2.9z M0,5.3V7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.1,0,0.2-0.1 c0.1-0.1,0.1-0.1,0.1-0.2V5.3c0,0,0,0,0,0c0-0.1-0.1-0.3-0.3-0.3H0.3c-0.1,0-0.1,0-0.2,0.1C0,5.2,0,5.3,0,5.3L0,5.3z M0,0.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1h10.7c0.1,0,0.1,0,0.2-0.1c0,0,0.1-0.1,0.1-0.2V0.8c0-0.1,0-0.1-0.1-0.2 c0-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.1,0-0.2,0.1C0,0.7,0,0.8,0,0.8L0,0.8z"/></g></svg>',list_number:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M0,11.5l0,1.7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2v-1.7 c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.2,0-0.2,0.1C0,11.4,0,11.4,0,11.5L0,11.5z M0,8.7c0,0.1,0,0.1,0.1,0.2 C0.1,8.9,0.2,9,0.3,9H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V7c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1l-10.7,0 c-0.1,0-0.2,0-0.2,0.1C0,6.8,0,6.9,0,7C0,7,0,8.7,0,8.7z M0,2.5v1.7c0,0.1,0,0.1,0.1,0.2c0,0,0.1,0.1,0.2,0.1l10.7,0 c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V2.4c0-0.1,0-0.1-0.1-0.2c-0.1,0-0.1,0-0.2,0H0.3c-0.1,0-0.1,0-0.2,0 C0,2.3,0,2.4,0,2.5L0,2.5z"/></g><path d="M15.6,14.2c0-0.3-0.1-0.6-0.3-0.8c-0.2-0.2-0.4-0.4-0.7-0.4l0.9-1v-0.8h-2.9v1.3h0.9v-0.5h0.9l0,0c-0.1,0.1-0.2,0.2-0.3,0.3 s-0.2,0.3-0.4,0.5l-0.3,0.3l0.2,0.5c0.6,0,0.9,0.1,0.9,0.5c0,0.1-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.4,0.1c-0.3,0-0.7-0.1-0.9-0.3 l-0.5,0.8c0.4,0.4,0.9,0.6,1.5,0.6c0.4,0,0.9-0.1,1.2-0.4C15.5,15.1,15.6,14.7,15.6,14.2z"/><path d="M15.6,8.7h-0.9v0.5h-1.1c0-0.2,0.2-0.4,0.4-0.5c0.2-0.2,0.4-0.3,0.7-0.4c0.3-0.2,0.5-0.3,0.7-0.6c0.2-0.2,0.3-0.5,0.3-0.8 c0-0.4-0.2-0.8-0.5-1c-0.6-0.4-1.4-0.5-2-0.1c-0.3,0.2-0.5,0.4-0.6,0.7L13.3,7c0.1-0.3,0.4-0.5,0.7-0.5c0.1,0,0.3,0,0.3,0.1 c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.2,0.1-0.3,0.3-0.5,0.4c-0.2,0.1-0.4,0.3-0.6,0.4c-0.2,0.2-0.4,0.4-0.5,0.6 c-0.1,0.2-0.2,0.5-0.2,0.8c0,0.2,0,0.3,0,0.5h3.2L15.6,8.7L15.6,8.7z"/><path d="M15.6,3.6h-1V0h-0.9l-1.2,1.1l0.6,0.7c0.2-0.1,0.3-0.3,0.4-0.5l0,0v2.2h-0.9v0.9h3L15.6,3.6L15.6,3.6z"/></svg>',link:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M7.4,9.9l3.1,3.1c0.3,0.3,0.8,0.5,1.3,0.5c0.5,0,0.9-0.2,1.3-0.5c0,0,0,0,0,0c0.7-0.7,0.7-1.9,0-2.6L9.9,7.3 c0-0.1,0-0.2,0-0.3C9.9,7,10,7,10.1,7l2.2-0.2c0.1,0,0.1,0,0.2,0.1l2.1,2.1c0.4,0.4,0.7,0.8,0.9,1.3c0.2,0.5,0.3,1,0.3,1.5 c0,0.5-0.1,1-0.3,1.5c-0.8,2-3.2,3-5.2,2.2c-0.5-0.2-0.9-0.5-1.3-0.9l-2.1-2.1c-0.1,0-0.1-0.1-0.1-0.2L7,10.1C7,10,7,9.9,7.1,9.9 C7.2,9.8,7.3,9.9,7.4,9.9z M1.2,1.1C1.6,0.7,2,0.4,2.5,0.3c1-0.4,2.1-0.4,3.1,0C6,0.4,6.5,0.7,6.8,1.1L9,3.2C9,3.3,9.1,3.3,9,3.4 L8.8,5.6c0,0.1-0.1,0.2-0.2,0.2c-0.1,0.1-0.2,0.1-0.3,0L5.3,2.7C5,2.3,4.5,2.1,4,2.1c-0.5,0-0.9,0.2-1.3,0.5c0,0,0,0,0,0 C2,3.4,2,4.5,2.7,5.2l3.1,3.2c0.1,0.1,0.1,0.2,0,0.3c0,0.1-0.1,0.1-0.2,0.1L3.5,9C3.4,9,3.4,9,3.3,8.9L1.2,6.8c0,0,0,0,0,0 C-0.4,5.2-0.4,2.7,1.2,1.1L1.2,1.1z M14.3,6h-2.6c0,0,0,0,0,0c-0.1,0-0.2-0.1-0.2-0.2c0-0.1,0-0.2,0.1-0.3l2.5-0.7 c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0.1,0.1,0.2l0.1,0.8c0,0.1,0,0.1-0.1,0.2C14.5,6,14.4,6,14.3,6L14.3,6z M10.2,4.1 c0,0.1-0.1,0.2-0.2,0.2l0,0c0,0,0,0,0,0C9.8,4.2,9.7,4.1,9.8,4L9.7,1.4c0-0.1,0-0.1,0.1-0.2c0.1,0,0.1,0,0.2,0h0.8 c0.1,0,0.1,0,0.2,0.1c0,0.1,0,0.1,0,0.2L10.2,4.1L10.2,4.1z M1.5,9.7h1.3h1.3c0.1,0,0.2,0.1,0.2,0.2c0,0.1,0,0.2-0.1,0.3l-2.5,0.6 H1.6c0,0-0.1,0-0.1,0c-0.1,0-0.1-0.1-0.1-0.2L1.2,9.9c0-0.1,0-0.1,0.1-0.2c0-0.1,0.1-0.1,0.2-0.1L1.5,9.7z M5.6,11.6 C5.6,11.6,5.6,11.6,5.6,11.6c0-0.1,0.1-0.2,0.3-0.1c0,0,0,0,0,0c0.1,0,0.2,0.1,0.2,0.2v2.6c0,0.1,0,0.1-0.1,0.2 c0,0-0.1,0.1-0.2,0.1L5,14.5c-0.1,0-0.1,0-0.2-0.1c0-0.1,0-0.1,0-0.2L5.6,11.6L5.6,11.6z"/></g></svg>',unlink:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.7" xml:space="preserve"><g><path d="M14.6,14.6c1.6-1.6,1.6-4.1,0-5.7l0,0l-3.1-3.1l-1.2,1.6l2.9,2.9c0.4,0.4,0.6,0.9,0.6,1.5c0,1.1-0.9,2.1-2.1,2.1l0,0 c-0.6,0-1.1-0.2-1.5-0.6l-0.4-0.4l-1.7,1l0.8,0.8C10.4,16.2,13,16.2,14.6,14.6L14.6,14.6L14.6,14.6z M3.6,6C3,5.9,2.6,5.5,2.3,5 S1.9,4,2.1,3.4C2.3,2.9,2.6,2.5,3,2.2C3.5,2,4.1,1.9,4.6,2l3.3,1.4l0.5-2L5.1,0.1C4-0.1,2.9,0,2,0.5C1.1,1.1,0.4,1.9,0.2,3 C-0.1,4,0,5.1,0.6,6C1.1,6.9,1.9,7.6,3,7.8l5.4,2l0.5-2L6.2,6.9L3.6,6z"/></g></svg>'},redo:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.59 14.18"><g><path d="M11.58,18.48a6.84,6.84,0,1,1,6.85-6.85s0,.26,0,.67a8,8,0,0,1-.22,1.44l.91-.55a.51.51,0,0,1,.36,0,.45.45,0,0,1,.29.22.47.47,0,0,1,.06.36.45.45,0,0,1-.22.29L17.42,15.3l-.12,0h-.25l-.12-.06-.09-.09-.06-.07,0-.06-.87-2.12a.43.43,0,0,1,0-.37.49.49,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26l.44,1.09a6.51,6.51,0,0,0,.24-1.36,4.58,4.58,0,0,0,0-.64,5.83,5.83,0,0,0-1.73-4.17,5.88,5.88,0,0,0-8.34,0,5.9,5.9,0,0,0,4.17,10.06.51.51,0,0,1,.33.15.48.48,0,0,1,0,.68.53.53,0,0,1-.33.12Z" transform="translate(-4.48 -4.54)"/></g></svg>',undo:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.59 14.18"><g><path d="M5,14a.43.43,0,0,1-.22-.29.46.46,0,0,1,.06-.36.43.43,0,0,1,.29-.22.56.56,0,0,1,.36,0l.91.55a8.27,8.27,0,0,1-.22-1.45,5.07,5.07,0,0,1,0-.67A6.85,6.85,0,1,1,13,18.47a.44.44,0,0,1-.33-.13.48.48,0,0,1,0-.68.51.51,0,0,1,.33-.15A5.89,5.89,0,0,0,17.15,7.45a5.88,5.88,0,0,0-8.33,0,5.84,5.84,0,0,0-1.73,4.17s0,.25,0,.65a6.49,6.49,0,0,0,.24,1.37l.44-1.09a.57.57,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26.43.43,0,0,1,0,.37L7.82,15l0,.09-.09.09-.1.07-.06,0H7.28l-.13,0-1.09-.63c-.65-.36-1-.57-1.1-.63Z" transform="translate(-4.49 -4.53)"/></g></svg>',bold:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.76 15.75"><g><path d="M6.4,3.76V19.5h6.76a5.55,5.55,0,0,0,2-.32,4.93,4.93,0,0,0,1.52-1,4.27,4.27,0,0,0,1.48-3.34,3.87,3.87,0,0,0-.69-2.37,5.74,5.74,0,0,0-.71-.83,3.44,3.44,0,0,0-1.1-.65,3.6,3.6,0,0,0,1.58-1.36,3.66,3.66,0,0,0,.53-1.93,3.7,3.7,0,0,0-1.21-2.87,4.65,4.65,0,0,0-3.25-1.1H6.4Zm2.46,6.65V5.57h3.52a4.91,4.91,0,0,1,1.36.15,2.3,2.3,0,0,1,.85.45,2.06,2.06,0,0,1,.74,1.71,2.3,2.3,0,0,1-.78,1.92,2.54,2.54,0,0,1-.86.46,4.7,4.7,0,0,1-1.32.15H8.86Zm0,7.27V12.15H12.7a4.56,4.56,0,0,1,1.38.17,3.43,3.43,0,0,1,.95.49,2.29,2.29,0,0,1,.92,2,2.73,2.73,0,0,1-.83,2.1,2.66,2.66,0,0,1-.83.58,3.25,3.25,0,0,1-1.26.2H8.86Z" transform="translate(-6.4 -3.75)"/></g></svg>',underline:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9.78 15.74"><g><path d="M14.64,3.76h2.52v7.72a4.51,4.51,0,0,1-.59,2.31,3.76,3.76,0,0,1-1.71,1.53,6.12,6.12,0,0,1-2.64.53,5,5,0,0,1-3.57-1.18,4.17,4.17,0,0,1-1.27-3.24V3.76H9.9v7.3a3,3,0,0,0,.55,2,2.3,2.3,0,0,0,1.83.65,2.26,2.26,0,0,0,1.8-.65,3.09,3.09,0,0,0,.55-2V3.76Zm2.52,13.31V19.5H7.39V17.08h9.77Z" transform="translate(-7.38 -3.76)"/></g></svg>',italic:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10.49 15.76"><g><path d="M17.16,3.79l.37,0-.06.38-.14.52A10,10,0,0,1,16.21,5a9.37,9.37,0,0,0-1,.32,6.68,6.68,0,0,0-.25.89c-.06.31-.11.59-.14.85-.3,1.36-.52,2.41-.68,3.14l-.61,3.18L13.1,15l-.43,2.4-.12.46a.62.62,0,0,0,0,.28c.44.1.85.17,1.23.22l.68.11a4.51,4.51,0,0,1-.08.6l-.09.42a.92.92,0,0,0-.23,0l-.43,0a1.37,1.37,0,0,1-.29,0c-.13,0-.63-.08-1.49-.16l-2,0c-.28,0-.87,0-1.78.12L7,19.5l.17-.88.8-.2A6.61,6.61,0,0,0,9.19,18,2.62,2.62,0,0,0,9.61,17l.28-1.41.58-2.75.12-.66c.05-.3.11-.58.17-.86s.12-.51.17-.69l.12-.48.12-.43.31-1.6.15-.65.31-1.91V5.14a3.86,3.86,0,0,0-1.48-.29l-.38,0,.2-1.06,3.24.14.75,0c.45,0,1.18,0,2.18-.09.23,0,.46,0,.71,0Z" transform="translate(-7.04 -3.76)"/></g></svg>',strike:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.9"><g><path d="M12.94,13a4.27,4.27,0,0,1,1.32.58,1.46,1.46,0,0,1,.55,1.2,1.87,1.87,0,0,1-.88,1.64,4.17,4.17,0,0,1-2.35.59,4.44,4.44,0,0,1-2.74-.71,2.72,2.72,0,0,1-1-2.17H5.57a4.56,4.56,0,0,0,1.55,3.7,7,7,0,0,0,4.47,1.23,6,6,0,0,0,4.07-1.3,4.24,4.24,0,0,0,1.52-3.37,4,4,0,0,0-.26-1.4h-4ZM6.37,10.24A3.27,3.27,0,0,1,6,8.68a4,4,0,0,1,1.48-3.3,5.92,5.92,0,0,1,3.88-1.21,5.58,5.58,0,0,1,3.91,1.24,4.36,4.36,0,0,1,1.45,3.17H14.44a2.12,2.12,0,0,0-.91-1.81,4.45,4.45,0,0,0-2.44-.55,3.69,3.69,0,0,0-2,.51A1.64,1.64,0,0,0,8.3,8.22a1.3,1.3,0,0,0,.48,1.11,7,7,0,0,0,2.1.78l.28.06.28.08H6.37Zm13.09.68a.73.73,0,0,1,.49.21.66.66,0,0,1,.2.48.64.64,0,0,1-.2.48.71.71,0,0,1-.49.19H5.1a.67.67,0,0,1-.49-.19.66.66,0,0,1-.2-.48.64.64,0,0,1,.2-.48.73.73,0,0,1,.49-.21H19.46Z" transform="translate(-4.41 -4.17)"/></g></svg>',subscript:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 14.61"><g><path d="M15.38,4.33H12.74L11.19,7c-.28.46-.51.87-.69,1.21L10.07,9h0l-.44-.8c-.22-.4-.45-.81-.71-1.23L7.34,4.33H4.68L8.26,10,4.4,16.08H7.1l1.69-2.83c.38-.63.72-1.22,1-1.78l.25-.46h0l.49.92c.24.45.48.89.74,1.32L13,16.08h2.61L11.84,10l1.77-2.84,1.77-2.85Zm4.77,13.75H17v-.15c0-.4.05-.64.16-.72a4.42,4.42,0,0,1,1.16-.31,3.3,3.3,0,0,0,1.54-.56A1.84,1.84,0,0,0,20.15,15a1.78,1.78,0,0,0-.44-1.41A2.8,2.8,0,0,0,18,13.25a2.71,2.71,0,0,0-1.69.37,1.83,1.83,0,0,0-.44,1.43v.23H17v-.23q0-.63.18-.78a1.62,1.62,0,0,1,.88-.15,1.59,1.59,0,0,1,.88.15q.18.15.18.75t-.18.75a3.58,3.58,0,0,1-1.18.33,3.33,3.33,0,0,0-1.52.51,1.57,1.57,0,0,0-.32,1.18v1.15h4.27v-.86Z" transform="translate(-4.4 -4.33)"/></g></svg>',superscript:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.42"><g><path d="M12,13.14l3.61-5.81H12.94L11.33,10c-.28.46-.51.88-.69,1.25l-.45.83h0l-.45-.85c-.22-.41-.45-.82-.71-1.24L7.4,7.33H4.68l3.66,5.81L4.4,19.33H7.14l1.74-2.87q.58-1,1-1.83l.25-.48h0l.51.94.75,1.37,1.72,2.87h2.67l-1.92-3.09c-1.12-1.8-1.76-2.83-1.92-3.1Zm4.84-4.41h0l0,.15h3.27v.86H15.77V8.58a1.66,1.66,0,0,1,.33-1.22,3.51,3.51,0,0,1,1.56-.51,3.68,3.68,0,0,0,1.21-.34c.13-.1.19-.36.19-.77S19,5.07,18.87,5A1.63,1.63,0,0,0,18,4.8a1.58,1.58,0,0,0-.91.17c-.13.11-.19.38-.19.8V6H15.78V5.76a1.87,1.87,0,0,1,.45-1.47A2.84,2.84,0,0,1,18,3.91a2.8,2.8,0,0,1,1.72.38,1.84,1.84,0,0,1,.45,1.44,1.91,1.91,0,0,1-.34,1.35,3.24,3.24,0,0,1-1.58.57A3.69,3.69,0,0,0,17,8c-.12.1-.17.35-.17.76Z" transform="translate(-4.4 -3.91)"/></g></svg>',erase:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.76"><g><path d="M13.69,17.2h6.46v1.31H8.56L4.41,14.37,14,4.75l6.06,6.06L16.89,14l-3.2,3.19Zm-4.61,0h2.77L14.09,15,9.88,10.75,6.25,14.38l1.41,1.41c.84.82,1.31,1.29,1.42,1.41Z" transform="translate(-4.41 -4.75)"/></g></svg>',indent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.36"><g><path d="M4.68,14.45a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V9.1a.27.27,0,0,1,.08-.19.28.28,0,0,1,.2-.08.25.25,0,0,1,.19.07l2.54,2.54a.29.29,0,0,1,0,.4L4.88,14.36a.24.24,0,0,1-.2.09Zm15.19,1.12a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87Zm0-3.38a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm0-3.37a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm.2-3.29a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z" transform="translate(-4.41 -5.44)"/></g></svg>',outdent:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.36"><g><path d="M19.87,15.57a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87ZM7.5,14.45a.25.25,0,0,1-.2-.09L4.76,11.84a.29.29,0,0,1,0-.4L7.3,8.9a.29.29,0,0,1,.4,0,.31.31,0,0,1,.07.2v5.06a.32.32,0,0,1-.08.21.26.26,0,0,1-.19.08ZM19.87,8.82a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm0,3.37a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm.2-6.66a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z" transform="translate(-4.41 -5.44)"/></g></svg>',expansion:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M11.8,13.06l-5.1,5.1H9.51V19.5H4.41V14.4H5.75v2.81L8.3,14.66q2.25-2.23,2.55-2.55Zm8.35-9.3v5.1H18.81V6.05l-5.1,5.1-1-1,5.1-5.1H15.05V3.76Z" transform="translate(-4.41 -3.76)"/></g></svg>',reduction:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M14.91,10h2.87v1.38H12.55V6.12h1.38V9l5.24-5.24.48.49.49.48ZM6.77,11.92H12v5.23H10.62V14.26L5.37,19.5l-1-1L9.63,13.3H6.77Z" transform="translate(-4.4 -3.76)"/></g></svg>',code_view:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 11.8"><g><path d="M8.09,7.94a.76.76,0,0,1,.53.22.72.72,0,0,1,.21.52.76.76,0,0,1-.22.54L6.18,11.63l2.43,2.44a.69.69,0,0,1,.2.51.66.66,0,0,1-.21.51.75.75,0,0,1-.51.22.63.63,0,0,1-.51-.21h0L4.63,12.15a.7.7,0,0,1-.22-.53.67.67,0,0,1,.25-.55L7.57,8.16a.82.82,0,0,1,.52-.22Zm12.05,3.69a.7.7,0,0,1-.23.52L17,15.1h0a.66.66,0,0,1-.51.21.73.73,0,0,1-.51-.22.75.75,0,0,1-.22-.51.63.63,0,0,1,.21-.51l2.43-2.44L15.92,9.22a.73.73,0,0,1-.22-.53A.74.74,0,0,1,17,8.18h0l2.91,2.91a.67.67,0,0,1,.27.54Zm-5.9-5.9a.73.73,0,0,1,.61.32.71.71,0,0,1,.07.68L11,17a1,1,0,0,1-.22.32.6.6,0,0,1-.35.16.75.75,0,0,1-.69-.26.69.69,0,0,1-.12-.72L13.56,6.23a.75.75,0,0,1,.26-.35.74.74,0,0,1,.42-.15Z" transform="translate(-4.41 -5.73)"/></g></svg>',preview:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.65 15.66"><g><path d="M16.19,14.43l2.49,2.49a.73.73,0,0,1,.21.52.67.67,0,0,1-.22.51.7.7,0,0,1-.52.22.69.69,0,0,1-.51-.21l-2.49-2.48a5.17,5.17,0,0,1-1.34.69,4.64,4.64,0,0,1-1.48.24,4.78,4.78,0,1,1,0-9.56,4.79,4.79,0,0,1,1.84.36,4.9,4.9,0,0,1,1.56,1,4.77,4.77,0,0,1,.46,6.18ZM10,14a3.3,3.3,0,0,0,2.34.93A3.37,3.37,0,0,0,14.7,14a3.3,3.3,0,0,0-1.08-5.41,3.47,3.47,0,0,0-2.56,0A3,3,0,0,0,10,9.28,3.31,3.31,0,0,0,10,14ZM16,4a3.86,3.86,0,0,1,2.77,1.14A3.9,3.9,0,0,1,20,7.85v4a.77.77,0,0,1-.22.53.7.7,0,0,1-.52.21.72.72,0,0,1-.74-.74v-4a2.46,2.46,0,0,0-.72-1.73A2.37,2.37,0,0,0,16,5.45H8.53A2.42,2.42,0,0,0,6.08,7.89v7.52a2.41,2.41,0,0,0,.71,1.73,2.46,2.46,0,0,0,1.74.72h4.08a.73.73,0,0,1,0,1.46H8.53a3.85,3.85,0,0,1-2.78-1.14A3.93,3.93,0,0,1,4.6,15.4V7.87A3.94,3.94,0,0,1,5.76,5.09,3.88,3.88,0,0,1,8.54,4H16Z" transform="translate(-4.45 -3.8)"/></g></svg>',print:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16.05 16.04"><g><path d="M19.76,15.84a1.29,1.29,0,0,0,.39-.92V8.35A2.05,2.05,0,0,0,19.57,7a1.93,1.93,0,0,0-1.38-.57H6.37a1.95,1.95,0,0,0-2,2v6.56a1.23,1.23,0,0,0,.38.92,1.35,1.35,0,0,0,.93.38h2V14.9l-2,0V8.35a.67.67,0,0,1,.18-.47.62.62,0,0,1,.48-.19H18.18a.6.6,0,0,1,.46.19.66.66,0,0,1,.18.47V14.9h-2v1.32h2A1.35,1.35,0,0,0,19.76,15.84ZM17.52,7.69V5.06a1.31,1.31,0,0,0-.38-.92,1.34,1.34,0,0,0-.94-.38H8.34A1.3,1.3,0,0,0,7,5.06V7.69H8.34V5.06h7.87V7.69h1.31ZM8.34,12.93h7.87l0,5.26H8.34V12.93Zm7.87,5.26v0Zm.65,1.31a.6.6,0,0,0,.46-.19.72.72,0,0,0,.2-.47V12.29a.74.74,0,0,0-.2-.47.6.6,0,0,0-.46-.19H7.68a.6.6,0,0,0-.46.19.72.72,0,0,0-.2.47v6.55a.74.74,0,0,0,.2.47.6.6,0,0,0,.46.19h9.18ZM16.67,9.28a.7.7,0,0,0-.94,0,.63.63,0,0,0-.18.46.67.67,0,0,0,.18.47.68.68,0,0,0,.94,0,.66.66,0,0,0,.18-.47A.58.58,0,0,0,16.67,9.28Z" transform="translate(-4.25 -3.61)"/></g></svg>',template:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.27 15.64"><g><path d="M18.18,19.16a1,1,0,0,0,1-1V5.73a1,1,0,0,0-1-1h-2v1h2V18.19H6.37V5.73h2v-1h-2A.94.94,0,0,0,5.68,5a1,1,0,0,0-.29.7V18.18a.94.94,0,0,0,.29.69,1,1,0,0,0,.69.29H18.18ZM9.82,10.31h4.92a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H9.82a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15Zm5.9,4.92H8.83a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h6.89a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.51.51,0,0,0-.5-.5ZM7.36,12.77a.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h8.85a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H7.85a.49.49,0,0,0-.35.15.52.52,0,0,0-.14.35Z" transform="translate(-5.14 -3.77)"/><path d="M14.24,6.71a1,1,0,0,0,1-1,1,1,0,0,0-1-1,1,1,0,0,0-1-1h-2a.94.94,0,0,0-.69.28,1,1,0,0,0-.29.7A.94.94,0,0,0,9.62,5a.91.91,0,0,0-.29.69,1,1,0,0,0,.29.7,1,1,0,0,0,.69.29h3.93Z" transform="translate(-5.14 -3.77)"/></g></svg>',line_height:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 13.56"><g><path d="M4.4,4.88V8.26a2,2,0,0,0,.5.39s.1,0,.18-.12a.62.62,0,0,0,.17-.28c.06-.19.13-.44.21-.74s.14-.52.19-.66a.58.58,0,0,1,.21-.3,2.41,2.41,0,0,1,.63-.21,3.83,3.83,0,0,1,.88-.12,9.15,9.15,0,0,1,1.31.06.16.16,0,0,1,.11,0,.26.26,0,0,1,.06.14,4,4,0,0,1,0,.49v2l.05,3.77c0,1.41,0,2.68-.05,3.81a1.79,1.79,0,0,1-.11.49,10.68,10.68,0,0,1-1.4.45,1.12,1.12,0,0,0-.69.43v.31l0,.22.61,0c.85-.08,1.54-.12,2.06-.12a19.76,19.76,0,0,1,2.09.08,15.08,15.08,0,0,0,1.64.08,1.4,1.4,0,0,0,.29,0,1.58,1.58,0,0,0,0-.26l-.05-.43a2.26,2.26,0,0,0-.43-.17l-.77-.22-.15,0a2.55,2.55,0,0,1-.78-.28,2.56,2.56,0,0,1-.11-.75l0-1.29,0-3.15V7.53a10.51,10.51,0,0,1,.06-1.2,3.83,3.83,0,0,1,.6,0l1.88,0a2.18,2.18,0,0,1,.38,0,.45.45,0,0,1,.23.17.9.9,0,0,1,.05.25c0,.16.06.35.1.58a3.33,3.33,0,0,0,.14.55A6.39,6.39,0,0,0,15,9a2.91,2.91,0,0,0,.6-.15,2.77,2.77,0,0,0,0-.46l0-.51,0-2.95-.25,0-.38,0L15,4.94a.71.71,0,0,1-.18.15.45.45,0,0,1-.25.07l-.29,0H8.75l-.15,0H7.45a17,17,0,0,1-1.86,0L5.36,5l-.25-.13ZM19.75,16.14h-.69v-9h.69A.4.4,0,0,0,20.13,7c.06-.11,0-.24-.1-.39L18.92,5.15a.52.52,0,0,0-.86,0L17,6.58c-.12.15-.16.28-.1.39s.18.16.38.16h.69v9h-.69a.4.4,0,0,0-.38.16c-.06.11,0,.24.1.39l1.11,1.43a.52.52,0,0,0,.86,0L20,16.69c.12-.15.16-.28.1-.39a.4.4,0,0,0-.38-.16Z" transform="translate(-4.4 -4.86)"/></g></svg>',paragraph_style:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.81 15.74"><g><path d="M18.18,3.76v2h-2V19.5h-2V5.73h-2V19.5h-2V11.63a3.94,3.94,0,0,1,0-7.87h7.87Z" transform="translate(-6.37 -3.76)"/></g></svg>',text_style:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.76 15.74"><g><path d="M17.68,6.71a2.22,2.22,0,0,0,1.06-.22.74.74,0,0,0,.42-.7.73.73,0,0,0-.08-.33.67.67,0,0,0-.17-.22,1,1,0,0,0-.31-.15L18.26,5l-.45-.09A15.27,15.27,0,0,0,13.26,5V4.74c0-.66-.63-1-1.92-1-.24,0-.43.15-.59.46a4,4,0,0,0-.36,1.14h0v0a26.45,26.45,0,0,1-3.5.35A2,2,0,0,0,5.77,6a.84.84,0,0,0-.37.79,2.14,2.14,0,0,0,.41,1.29,1.23,1.23,0,0,0,1.05.63,16.62,16.62,0,0,0,3.29-.45l-.34,3.35c-.16,1.61-.29,2.9-.37,3.86s-.12,1.66-.12,2.09l0,.65a5.15,5.15,0,0,0,.05.6,1.28,1.28,0,0,0,.16.54.34.34,0,0,0,.28.18,1.16,1.16,0,0,0,.79-.46,3.66,3.66,0,0,0,.68-1,22.08,22.08,0,0,0,1-4.33q.49-3.1.78-6.15a24.69,24.69,0,0,1,4.62-.84Z" transform="translate(-5.4 -3.76)"/></g></svg>',save:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M18.53,19.5l.2-.05A1.78,1.78,0,0,0,20.13,18l0-.09V7.14a2,2,0,0,0-.28-.64A3.18,3.18,0,0,0,19.43,6c-.5-.52-1-1-1.55-1.54A2.59,2.59,0,0,0,17.37,4a1.83,1.83,0,0,0-.61-.25H6l-.21,0a1.78,1.78,0,0,0-1.4,1.49l0,.1V17.87a2.49,2.49,0,0,0,.09.37,1.79,1.79,0,0,0,1.44,1.23l.09,0Zm-6.25-.6H6.92a.61.61,0,0,1-.68-.48.78.78,0,0,1,0-.22V12.3a.62.62,0,0,1,.69-.68H17.64a.62.62,0,0,1,.69.69V18.2a.64.64,0,0,1-.71.69H12.28ZM12,9.81H8.15a.63.63,0,0,1-.72-.71v-4a.64.64,0,0,1,.72-.72h7.66a.64.64,0,0,1,.72.72v4a.65.65,0,0,1-.74.72ZM13.5,5V9.18h1.78V5Z" transform="translate(-4.41 -3.76)"/></g></svg>',blockquote:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 475.082 475.081"><g><path d="M164.45,219.27h-63.954c-7.614,0-14.087-2.664-19.417-7.994c-5.327-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.416-51.678c14.276-14.272,31.503-21.411,51.678-21.411h18.271c4.948,0,9.229-1.809,12.847-5.424c3.616-3.617,5.424-7.898,5.424-12.847V54.819c0-4.948-1.809-9.233-5.424-12.85c-3.617-3.612-7.898-5.424-12.847-5.424h-18.271c-19.797,0-38.684,3.858-56.673,11.563c-17.987,7.71-33.545,18.132-46.68,31.267c-13.134,13.129-23.553,28.688-31.262,46.677C3.855,144.039,0,162.931,0,182.726v200.991c0,15.235,5.327,28.171,15.986,38.834c10.66,10.657,23.606,15.985,38.832,15.985h109.639c15.225,0,28.167-5.328,38.828-15.985c10.657-10.663,15.987-23.599,15.987-38.834V274.088c0-15.232-5.33-28.168-15.994-38.832C192.622,224.6,179.675,219.27,164.45,219.27z"/><path d="M459.103,235.256c-10.656-10.656-23.599-15.986-38.828-15.986h-63.953c-7.61,0-14.089-2.664-19.41-7.994c-5.332-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.409-51.678c14.271-14.272,31.497-21.411,51.682-21.411h18.267c4.949,0,9.233-1.809,12.848-5.424c3.613-3.617,5.428-7.898,5.428-12.847V54.819c0-4.948-1.814-9.233-5.428-12.85c-3.614-3.612-7.898-5.424-12.848-5.424h-18.267c-19.808,0-38.691,3.858-56.685,11.563c-17.984,7.71-33.537,18.132-46.672,31.267c-13.135,13.129-23.559,28.688-31.265,46.677c-7.707,17.987-11.567,36.879-11.567,56.674v200.991c0,15.235,5.332,28.171,15.988,38.834c10.657,10.657,23.6,15.985,38.828,15.985h109.633c15.229,0,28.171-5.328,38.827-15.985c10.664-10.663,15.985-23.599,15.985-38.834V274.088C475.082,258.855,469.76,245.92,459.103,235.256z"/></g></svg>',arrow_down:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 8.67"><g><path d="M18.79,7.52a.8.8,0,0,1,.56-.23.82.82,0,0,1,.79.79.8.8,0,0,1-.23.56l-7.07,7.07a.79.79,0,0,1-.57.25.77.77,0,0,1-.57-.25h0L4.64,8.65a.8.8,0,0,1-.23-.57.82.82,0,0,1,.79-.79.8.8,0,0,1,.56.23L12.28,14l3.26-3.26,3.25-3.26Z" transform="translate(-4.41 -7.29)"/></g></svg>',align_justify:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm0,5.9H20.15v-2H4.41v2Zm0,3.94H20.15v-2H4.41v2Zm0,3.93h7.87v-2H4.41v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm11.8,3.94H4.41v2H16.22v-2Zm-11.8,5.9H18.18v-2H4.41v2Zm0,3.93h9.84v-2H4.41v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm3.93,5.9H20.15v-2H8.34v2Zm-2,3.94H20.14v-2H6.37v2Zm3.94,3.93h9.84v-2H10.31v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',align_center:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.77"><g><path d="M4.41,4.74v2H20.15v-2H4.41Zm2,3.94v2H18.18v-2H6.37Zm-1,5.9H19.16v-2H5.39v2Zm2,3.93H17.2v-2H7.36v2Z" transform="translate(-4.41 -4.74)"/></g></svg>',font_color:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.61"><g><path d="M18.5,15.57,14.28,4.32h-3.4L6.65,15.57h3l.8-2.26h4.23l.8,2.26h3ZM14,11.07H11.14L12.54,7,13.25,9c.41,1.18.64,1.86.7,2ZM4.41,16.69v2.24H20.15V16.69H4.41Z" transform="translate(-4.41 -4.32)"/></g></svg>',highlight_color:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.66 15.74"><g><path d="M12.32,9.31,13.38,13H11.21l.52-1.83q.46-1.61.54-1.83ZM4.44,3.76H20.1V19.5H4.44V3.76ZM14.71,17.32h2.63L13.7,6H10.89L7.26,17.32H9.89l.63-2.24h3.55l.32,1.12c.18.65.29,1,.32,1.12Z" transform="translate(-4.44 -3.76)"/></g></svg>',list_bullets:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 12.37"><g><path d="M7.77,16.12a1.59,1.59,0,0,0-.49-1.18,1.62,1.62,0,0,0-1.19-.49,1.68,1.68,0,1,0,0,3.36,1.67,1.67,0,0,0,1.68-1.69Zm0-4.48A1.67,1.67,0,0,0,6.09,10,1.68,1.68,0,0,0,4.9,12.82a1.62,1.62,0,0,0,1.19.49,1.67,1.67,0,0,0,1.68-1.67Zm12.38,3.64a.27.27,0,0,0-.08-.19.28.28,0,0,0-.2-.09H9.19a.28.28,0,0,0-.2.08.29.29,0,0,0-.08.19V17a.27.27,0,0,0,.28.28H19.87a.27.27,0,0,0,.19-.08.24.24,0,0,0,.08-.2V15.28ZM7.77,7.13a1.63,1.63,0,0,0-.49-1.2,1.61,1.61,0,0,0-1.19-.49,1.61,1.61,0,0,0-1.19.49,1.71,1.71,0,0,0,0,2.4,1.62,1.62,0,0,0,1.19.49,1.61,1.61,0,0,0,1.19-.49,1.63,1.63,0,0,0,.49-1.2Zm12.38,3.66a.28.28,0,0,0-.08-.2.29.29,0,0,0-.19-.08H9.19a.27.27,0,0,0-.28.28v1.69a.27.27,0,0,0,.08.19.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08.25.25,0,0,0,.08-.19V10.79Zm0-4.5a.27.27,0,0,0-.08-.19A.25.25,0,0,0,19.88,6H9.19A.28.28,0,0,0,9,6.1a.26.26,0,0,0-.08.19V8A.27.27,0,0,0,9,8.17a.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08A.25.25,0,0,0,20.14,8V6.29Z" transform="translate(-4.41 -5.44)"/></g></svg>',list_number:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.69 15.74"><g><path d="M7.66,18a1.24,1.24,0,0,0-.26-.78,1.17,1.17,0,0,0-.72-.42l.85-1V15H4.58v1.34h.94v-.46l.85,0h0c-.11.11-.22.23-.32.35s-.23.27-.37.47L5.39,17l.23.51c.61-.05.92.11.92.49a.42.42,0,0,1-.18.37.79.79,0,0,1-.45.12A1.41,1.41,0,0,1,5,18.15l-.51.77A2.06,2.06,0,0,0,6,19.5a1.8,1.8,0,0,0,1.2-.41A1.38,1.38,0,0,0,7.66,18Zm0-5.54H6.75V13H5.63A.72.72,0,0,1,6,12.51a5.45,5.45,0,0,1,.66-.45,2.71,2.71,0,0,0,.67-.57,1.19,1.19,0,0,0,.31-.81,1.29,1.29,0,0,0-.45-1,1.86,1.86,0,0,0-2-.11,1.51,1.51,0,0,0-.62.7l.74.52A.87.87,0,0,1,6,10.28a.51.51,0,0,1,.35.12.42.42,0,0,1,.13.33.55.55,0,0,1-.21.4,3,3,0,0,1-.5.38c-.19.13-.39.27-.58.42a2,2,0,0,0-.5.6,1.63,1.63,0,0,0-.21.81,3.89,3.89,0,0,0,.05.48h3.2V12.44Zm12.45,2.82a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2V17a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V15.26ZM7.69,7.32h-1V3.76H5.8L4.6,4.88l.63.68a1.85,1.85,0,0,0,.43-.48h0l0,2.24H4.74V8.2h3V7.32Zm12.43,3.42a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2v1.71a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V10.74Zm0-4.52A.27.27,0,0,0,20,6,.28.28,0,0,0,19.83,6H9.1A.32.32,0,0,0,8.89,6a.24.24,0,0,0-.08.19V7.93a.27.27,0,0,0,.08.19.32.32,0,0,0,.21.08H19.83A.32.32,0,0,0,20,8.12a.26.26,0,0,0,.08-.2V6.22Z" transform="translate(-4.43 -3.76)"/></g></svg>',table:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M4.41,8.05V3.76H8.7V8.05H4.41Zm5.71,0V3.76h4.3V8.05h-4.3Zm5.74-4.29h4.29V8.05H15.86V3.76Zm-11.45,10V9.48H8.7v4.3H4.41Zm5.71,0V9.48h4.3v4.3h-4.3Zm5.74,0V9.48h4.29v4.3H15.86ZM4.41,19.5V15.21H8.7V19.5H4.41Zm5.71,0V15.21h4.3V19.5h-4.3Zm5.74,0V15.21h4.29V19.5H15.86Z" transform="translate(-4.41 -3.76)"/></g></svg>',horizontal_rule:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 2.24"><g><path d="M20.15,12.75V10.51H4.41v2.24H20.15Z" transform="translate(-4.41 -10.51)"/></g></svg>',show_blocks:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.66 15.67"><g><path d="M19.72,5.58a1.64,1.64,0,0,0-1.64-1.64H6.23a1.62,1.62,0,0,0-1.16.48,1.63,1.63,0,0,0-.48,1.16V9.63a1.6,1.6,0,0,0,.48,1.16,1.62,1.62,0,0,0,1.16.47H18.09a1.67,1.67,0,0,0,1.16-.47,1.62,1.62,0,0,0,.48-1.16V5.58Zm-.94,4.05a.68.68,0,0,1-.7.7H6.23a.66.66,0,0,1-.48-.2.74.74,0,0,1-.21-.5V5.58a.66.66,0,0,1,.2-.48.71.71,0,0,1,.48-.21H18.08a.74.74,0,0,1,.5.21.66.66,0,0,1,.2.48ZM6.48,7.72a.21.21,0,0,0,.17-.07.22.22,0,0,0,.07-.17V7.06a1.27,1.27,0,0,1,.11-.52.37.37,0,0,1,.36-.23H8.77A.25.25,0,0,0,9,6.17a.19.19,0,0,0,0-.23.27.27,0,0,0-.2-.12H7.19a.88.88,0,0,0-.72.39,1.51,1.51,0,0,0-.23.85v.42a.24.24,0,0,0,.24.24Zm-.19.81a.21.21,0,0,0,.17-.07.26.26,0,0,0,.07-.17.24.24,0,0,0-.24-.24.2.2,0,0,0-.16.09.2.2,0,0,0-.07.16.22.22,0,0,0,.07.17.23.23,0,0,0,.16.06Zm8.46,5.1a1.63,1.63,0,0,0-.47-1.16A1.61,1.61,0,0,0,13.12,12H6.23a1.6,1.6,0,0,0-1.16.46,1.62,1.62,0,0,0-.48,1.16v4.05a1.64,1.64,0,0,0,1.64,1.64h6.89a1.6,1.6,0,0,0,1.16-.48,1.62,1.62,0,0,0,.47-1.16Zm-.94,4a.7.7,0,0,1-.2.49.65.65,0,0,1-.5.2H6.23a.66.66,0,0,1-.48-.2.75.75,0,0,1-.21-.49v-4a.74.74,0,0,1,.21-.5.66.66,0,0,1,.48-.2h6.89a.68.68,0,0,1,.7.7v4Zm6.15,0v-4a1.6,1.6,0,0,0-.48-1.16A1.67,1.67,0,0,0,18.32,12H17.1a1.63,1.63,0,0,0-1.16.47,1.61,1.61,0,0,0-.47,1.16v4a1.67,1.67,0,0,0,.47,1.16,1.62,1.62,0,0,0,1.16.48h1.22A1.64,1.64,0,0,0,20,17.68Zm-.94-4v4a.75.75,0,0,1-.21.49.62.62,0,0,1-.48.2H17.11a.69.69,0,0,1-.5-.2.7.7,0,0,1-.2-.49v-4a.68.68,0,0,1,.7-.7h1.22a.66.66,0,0,1,.48.2.72.72,0,0,1,.21.5Z" transform="translate(-4.44 -3.79)"/></g></svg>',cancel:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M14.15,11.63l5.61,5.61a1.29,1.29,0,0,1,.38.93,1.27,1.27,0,0,1-.4.93,1.25,1.25,0,0,1-.92.4,1.31,1.31,0,0,1-.94-.4l-5.61-5.61L6.67,19.1a1.31,1.31,0,0,1-.94.4,1.24,1.24,0,0,1-.92-.4,1.27,1.27,0,0,1-.4-.93,1.33,1.33,0,0,1,.38-.93l5.61-5.63L4.79,6a1.26,1.26,0,0,1-.38-.93,1.22,1.22,0,0,1,.4-.92,1.28,1.28,0,0,1,.92-.39,1.38,1.38,0,0,1,.94.38l5.61,5.61,5.61-5.61a1.33,1.33,0,0,1,.94-.38,1.26,1.26,0,0,1,.92.39,1.24,1.24,0,0,1,.4.92,1.29,1.29,0,0,1-.39.93L17,8.81l-2.8,2.82Z" transform="translate(-4.41 -3.76)"/></g></svg>',image:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.77"><g><path d="M8.77,8.72a.88.88,0,0,1-.61-.27.82.82,0,0,1-.25-.61.89.89,0,0,1,.25-.62A.82.82,0,0,1,8.77,7a.81.81,0,0,1,.61.25.83.83,0,0,1,.27.62.81.81,0,0,1-.25.61.91.91,0,0,1-.63.27Zm9.62-5a1.74,1.74,0,0,1,1.76,1.76V17.76a1.74,1.74,0,0,1-1.76,1.76H6.16A1.74,1.74,0,0,1,4.4,17.76V5.51A1.74,1.74,0,0,1,6.16,3.75H18.39Zm0,1.75H6.16v8L8.53,11.8a.94.94,0,0,1,.54-.17.86.86,0,0,1,.54.2L11.09,13l3.64-4.55a.78.78,0,0,1,.34-.25.85.85,0,0,1,.42-.07.89.89,0,0,1,.39.12.78.78,0,0,1,.28.29l2.24,3.67V5.51Zm0,12.24V15.6L15.3,10.53,11.89,14.8a.89.89,0,0,1-.59.32.82.82,0,0,1-.64-.18L9,13.62,6.16,15.74v2Z" transform="translate(-4.4 -3.75)"/></g></svg>',video:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.55"><g><path d="M20.15,10.26V18.9l-3.94-1.57v1.2H4.41V10.66H16.22v1.23l2-.81,2-.82ZM14.64,17h0V12.54h0v-.31H6V17h8.67Zm3.94-.37v-4l-2.37,1v2l1.18.48,1.19.48ZM7.94,9.86A2.77,2.77,0,0,1,5.19,7.11a2.76,2.76,0,0,1,5.51,0A2.78,2.78,0,0,1,7.94,9.86Zm0-3.93a1.21,1.21,0,0,0-.83.35,1.15,1.15,0,0,0-.34.84A1.09,1.09,0,0,0,7.11,8,1.15,1.15,0,0,0,8,8.28,1.13,1.13,0,0,0,9.11,7.12,1.16,1.16,0,0,0,7.94,5.93Zm5.9,3.93a2.34,2.34,0,0,1-1.67-.68,2.3,2.3,0,0,1-.68-1.67,2.35,2.35,0,0,1,4-1.67,2.37,2.37,0,0,1,0,3.34,2.33,2.33,0,0,1-1.68.68Zm0-3.14a.75.75,0,1,0,.55.22.73.73,0,0,0-.55-.22Z" transform="translate(-4.41 -4.35)"/></g></svg>',link:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.72"><g><path d="M13.05,13.63a.24.24,0,0,1,.15.22L13.42,16a.19.19,0,0,1-.08.18l-2.12,2.14a4.08,4.08,0,0,1-1.29.85A4,4,0,0,1,4.71,17a3.92,3.92,0,0,1-.3-1.52A4,4,0,0,1,4.71,14a3.91,3.91,0,0,1,.87-1.3L7.7,10.56a.25.25,0,0,1,.2-.06l2.17.22a.21.21,0,0,1,.19.15.24.24,0,0,1,0,.25L7.12,14.23a1.81,1.81,0,0,0,0,2.58,1.78,1.78,0,0,0,1.29.52,1.74,1.74,0,0,0,1.28-.52L12.8,13.7a.24.24,0,0,1,.25-.07ZM19,4.92a4,4,0,0,1,0,5.66L16.86,12.7a.25.25,0,0,1-.17.08l-2.2-.23a.21.21,0,0,1-.19-.15.22.22,0,0,1,0-.25L17.44,9a1.81,1.81,0,0,0,0-2.58,1.78,1.78,0,0,0-1.29-.52,1.74,1.74,0,0,0-1.28.52L11.76,9.57a.21.21,0,0,1-.25,0,.24.24,0,0,1-.16-.21l-.22-2.17a.19.19,0,0,1,.08-.18l2.12-2.14a4.08,4.08,0,0,1,1.29-.85,4.05,4.05,0,0,1,3.06,0,3.85,3.85,0,0,1,1.3.85ZM5.84,9.82a.25.25,0,0,1-.18-.08.19.19,0,0,1-.07-.19l.11-.77a.2.2,0,0,1,.11-.17.24.24,0,0,1,.2,0l2.5.72a.25.25,0,0,1,.15.27.22.22,0,0,1-.23.21l-2.59,0Zm4.12-2-.73-2.5a.27.27,0,0,1,0-.2A.21.21,0,0,1,9.41,5L10.19,5a.25.25,0,0,1,.19,0,.23.23,0,0,1,.08.18l-.05,2.61a.2.2,0,0,1-.19.23h0A.22.22,0,0,1,10,7.85Zm8.76,5.58a.25.25,0,0,1,.18.08.23.23,0,0,1,.06.2l-.11.77a.25.25,0,0,1-.11.17.21.21,0,0,1-.12,0l-.08,0L16,14a.25.25,0,0,1-.15-.27.22.22,0,0,1,.22-.21l1.29,0,1.33,0Zm-4.12,2,.74,2.51a.28.28,0,0,1,0,.2.23.23,0,0,1-.18.11l-.8.11a.23.23,0,0,1-.17-.07.25.25,0,0,1-.08-.18l0-2.61a.22.22,0,0,1,.22-.22.21.21,0,0,1,.26.15Z" transform="translate(-4.41 -3.77)"/></g></svg>',math:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.81 15.73"><g><path d="M17.19,5.73a1,1,0,0,0,.71-.29,1,1,0,0,0,.28-.7,1,1,0,0,0-1-1H7.35a1,1,0,0,0-1,1,.77.77,0,0,0,.13.47h0l4.58,6.43L6.68,17.81a1.25,1.25,0,0,0-.29.71.94.94,0,0,0,.28.7.92.92,0,0,0,.69.28H17.2a1,1,0,0,0,.71-.28,1,1,0,0,0,0-1.39.92.92,0,0,0-.71-.29H9.26l3.87-5.43a.86.86,0,0,0,0-.95L9.26,5.73h7.93Z" transform="translate(-6.38 -3.77)"/></g></svg>',unlink:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.72"><g><path d="M19,18.32a4,4,0,0,0,0-5.68L15.85,9.5l-1.17,1.55L17.57,14a2,2,0,0,1,.61,1.47,2.08,2.08,0,0,1-2.09,2.09,2,2,0,0,1-1.47-.61l-.38-.37-1.74,1,.8.78a4,4,0,0,0,5.68,0ZM8,9.77a2,2,0,0,1-1.27-1,1.89,1.89,0,0,1-.21-1.57A2.1,2.1,0,0,1,7.45,6,2,2,0,0,1,9,5.76L12.27,7.2l.49-2L9.48,3.9a4,4,0,0,0-3.06.41A3.82,3.82,0,0,0,4.56,6.73a3.8,3.8,0,0,0,.4,3A3.78,3.78,0,0,0,7.39,11.6l5.38,2,.49-2-2.64-.94L8,9.77Z" transform="translate(-4.41 -3.76)"/></g></svg>',table_header:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.74"><g><path d="M17,19.5v-.78H15.5v.78H17Zm-3,0v-.78H12.5v.78H14Zm-3,0v-.78H9.53v.78H11Zm-3,0v-.78H6.53v.78H8Zm10.55,0a1.73,1.73,0,0,0,.85-.35,1.67,1.67,0,0,0,.56-.76l-.71-.31a1.21,1.21,0,0,1-.35.4,1.34,1.34,0,0,1-.53.23l.08.38c.06.24.09.38.1.41Zm-13.7-.63.55-.55A.77.77,0,0,1,5.25,18a1.31,1.31,0,0,1-.06-.38v-.38H4.41v.38a2,2,0,0,0,.12.68,1.6,1.6,0,0,0,.35.57Zm15.27-2.12V15.26h-.78v1.49h.78Zm-15-1V14.23H4.41v1.49h.78Zm15-2V12.26h-.78v1.49h.78Zm-15-1V11.22H4.41v1.51h.78Zm15-2V9.26h-.78v1.51h.78Zm-15-1V8.17H4.41V9.74h.78Zm15-2V6.28h-.78V7.77h.78Zm-15-1.11V5.33L4.48,5.1a.77.77,0,0,0-.07.27,2.72,2.72,0,0,0,0,.28v1h.79ZM19.21,5l.63-.4A1.62,1.62,0,0,0,19.16,4a1.94,1.94,0,0,0-.91-.22v.78a1.31,1.31,0,0,1,.56.12.88.88,0,0,1,.4.36ZM6,4.54H7.78V3.76H6a.82.82,0,0,0-.28.06l.12.35c.07.21.1.33.11.36Zm10.8,0V3.76H15.28v.78h1.49Zm-3,0V3.76H12.28v.78h1.49Zm-3,0V3.76H9.28v.78h1.51ZM6,10.84h12.6V6.91H6Z" transform="translate(-4.4 -3.76)"/></g></svg>',merge_cell:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 15.74"><g><path d="M18.92,13.5h1.23v4.15A1.84,1.84,0,0,1,18.3,19.5H14V18.27H18.3a.6.6,0,0,0,.44-.18.59.59,0,0,0,.18-.44V13.5ZM18.3,3.76a1.84,1.84,0,0,1,1.85,1.85V9.82H18.92V5.6a.6.6,0,0,0-.18-.44A.59.59,0,0,0,18.3,5H14V3.76H18.3Zm1.85,8.51H15.6L17.26,14l-.86.86-3.14-3.17L16.4,8.51l.86.86L15.62,11h4.54v1.24Zm-13.9,6h4.27V19.5H6.25A1.84,1.84,0,0,1,4.4,17.65V13.5H5.63v4.15a.61.61,0,0,0,.62.62Zm0-14.51h4.27V5H6.25a.6.6,0,0,0-.44.18.57.57,0,0,0-.17.43V9.81H4.41V5.6A1.83,1.83,0,0,1,6.25,3.76Zm5,7.9L8.15,14.83,7.3,14,9,12.27H4.41V11H8.94L7.3,9.38,7.73,9l.43-.43Z" transform="translate(-4.4 -3.76)"/></g></svg>',split_cell:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 15.74"><g><path d="M10.37,12.25H6.74L8.4,13.94l-.87.86L4.41,11.63,7.53,8.5l.87.86L6.74,11h3.62v1.23Zm9.78-.61L17,14.81,16.13,14l1.66-1.69H14.16V11h3.63L16.13,9.37l.43-.43A5.24,5.24,0,0,1,17,8.51ZM18.9,8.22V5.61a.57.57,0,0,0-.18-.43A.65.65,0,0,0,18.29,5H12.88V18.28h5.41a.7.7,0,0,0,.44-.18.57.57,0,0,0,.18-.43V15h1.23v2.64a1.84,1.84,0,0,1-1.85,1.83h-12A1.84,1.84,0,0,1,4.94,19a1.81,1.81,0,0,1-.54-1.29V15H5.63v2.64a.57.57,0,0,0,.18.43.67.67,0,0,0,.44.18h5.41V5H6.25a.7.7,0,0,0-.44.18.56.56,0,0,0-.17.43V8.22H4.41V5.61A1.8,1.8,0,0,1,5,4.31a1.91,1.91,0,0,1,1.31-.55h12a1.89,1.89,0,0,1,1.31.55,1.8,1.8,0,0,1,.54,1.3V8.23H18.9Z" transform="translate(-4.4 -3.76)"/></g></svg>',caption:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 13.79"><g><path d="M4.41,18.52H20.15v-2H4.41ZM20,4.73H18.07V6h.65v.65H20V4.73ZM17,6V4.73H14.55V6H17ZM13.49,6V4.73H11V6h2.47ZM10,6V4.73H7.5V6H10ZM5.79,6h.65V4.73H4.5V6.67H5.8V6ZM4.5,11.34H5.79V8.48H4.5ZM6.44,13.8H5.79v-.65H4.5v1.94H6.44ZM17,15.09V13.8H14.55v1.29H17Zm-3.52,0V13.8H11v1.29h2.47Zm-3.53,0V13.8H7.5v1.29H10ZM20,13.16H18.72v.65h-.65V15.1H20Zm-1.29-1.82H20V8.48h-1.3v2.86Z" transform="translate(-4.41 -4.73)"/></g></svg>',edit:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.73"><g><path d="M7.51,5.68h6l1.52-1.57H6.94a2.4,2.4,0,0,0-1.79.82A2.8,2.8,0,0,0,4.41,6.8V17a2.55,2.55,0,0,0,.75,1.8A2.48,2.48,0,0,0,7,19.5H17.22a2.57,2.57,0,0,0,1.83-.74,2.52,2.52,0,0,0,.77-1.8V8.83l-1.58,1.54v6a1.54,1.54,0,0,1-1.53,1.53H7.51A1.54,1.54,0,0,1,6,16.41V7.21A1.52,1.52,0,0,1,7.51,5.68Zm5.63,7.47h0L10.7,10.74l-1,3.38,1.71-.48,1.7-.49Zm.34-.34h0l5.36-5.32L16.4,5.08,11,10.4l1.23,1.21,1.21,1.2ZM19.93,6.4a.82.82,0,0,0,.22-.48A.54.54,0,0,0,20,5.47L18.45,4A.67.67,0,0,0,18,3.77a.7.7,0,0,0-.48.21l-.74.72,2.44,2.43.37-.37.35-.36Z" transform="translate(-4.41 -3.77)"/></g></svg>',delete:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 15.74"><g><path d="M19.16,6.71a.94.94,0,0,0,.69-.28.91.91,0,0,0,.29-.68A1,1,0,0,0,19.85,5a.93.93,0,0,0-.69-.3H14.24A.94.94,0,0,0,14,4.06a.92.92,0,0,0-.7-.3h-2a1,1,0,0,0-.7.3.93.93,0,0,0-.28.68H5.39A.92.92,0,0,0,4.7,5a1,1,0,0,0-.29.71.91.91,0,0,0,.29.68,1,1,0,0,0,.69.28H19.16Zm-12.79,1a1,1,0,0,0-.7.3.94.94,0,0,0-.28.69v8.85A1.88,1.88,0,0,0,6,18.93a1.9,1.9,0,0,0,1.39.57H17.2a1.87,1.87,0,0,0,1.39-.58,1.91,1.91,0,0,0,.58-1.39V8.68A1,1,0,0,0,18.88,8a.89.89,0,0,0-.7-.29,1,1,0,0,0-.69.29.92.92,0,0,0-.29.68v7.87a1,1,0,0,1-1,1H8.34a.94.94,0,0,1-.69-.28,1,1,0,0,1-.29-.71V8.68a1,1,0,0,0-1-1Z" transform="translate(-4.41 -3.76)"/></g></svg>',modify:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.7 15.74"><g><path d="M19.79,15.23a.66.66,0,0,1,.3.38.59.59,0,0,1-.07.48l-.8,1.38a.66.66,0,0,1-.38.3.59.59,0,0,1-.48-.07l-.68-.38a4.55,4.55,0,0,1-1.34.77v.78a.64.64,0,0,1-.18.45.61.61,0,0,1-.45.18h-1.6a.6.6,0,0,1-.44-.18.66.66,0,0,1-.19-.45v-.78a4.36,4.36,0,0,1-1.32-.77l-.69.38a.58.58,0,0,1-.48.07.66.66,0,0,1-.38-.3l-.38-.66h.83a1.77,1.77,0,0,0,1.23-.52,1.72,1.72,0,0,0,.51-1.23v-.18a3,3,0,0,0,.49-.28l.15.09a1.83,1.83,0,0,0,.88.23A1.75,1.75,0,0,0,15.84,14l.88-1.52a1.7,1.7,0,0,0,.17-1.32,1.66,1.66,0,0,0-.3-.61,1.84,1.84,0,0,0-.51-.45l-.15-.09,0-.29,0-.28.15-.09a1,1,0,0,0,.26-.18l0,.06v.78a4.34,4.34,0,0,1,1.34.77l.68-.38a.68.68,0,0,1,.48-.06.64.64,0,0,1,.38.29l.8,1.38a.58.58,0,0,1,.07.48.63.63,0,0,1-.3.38l-.68.4a3.84,3.84,0,0,1,.08.76,4.13,4.13,0,0,1-.08.78l.34.18.32.2ZM10.17,7.86a1.9,1.9,0,0,1,1.35,3.23,1.85,1.85,0,0,1-1.35.55A1.9,1.9,0,0,1,8.83,8.41a1.92,1.92,0,0,1,1.34-.55Zm1.58,7.2a.73.73,0,0,1-.21.49.66.66,0,0,1-.48.2H9.29a.68.68,0,0,1-.69-.69V14.2a4.75,4.75,0,0,1-1.48-.86l-.75.45a.73.73,0,0,1-.7,0,.63.63,0,0,1-.25-.26L4.54,12a.67.67,0,0,1-.08-.53.71.71,0,0,1,.32-.42l.75-.43a4.8,4.8,0,0,1-.08-.85,4.71,4.71,0,0,1,.08-.85l-.74-.44a.71.71,0,0,1-.32-.42.65.65,0,0,1,.07-.54L5.42,6a.66.66,0,0,1,.42-.32l.18,0a.73.73,0,0,1,.35.09l.75.43A4.68,4.68,0,0,1,8.6,5.33V4.45a.68.68,0,0,1,.69-.69h1.77a.64.64,0,0,1,.48.2.73.73,0,0,1,.21.49v.88a4.75,4.75,0,0,1,1.48.85L14,5.75a.67.67,0,0,1,.34-.09l.18,0a.71.71,0,0,1,.42.32l.89,1.54a.67.67,0,0,1,.06.52.73.73,0,0,1-.32.43l-.75.42a4.8,4.8,0,0,1,.08.85,4.71,4.71,0,0,1-.08.85l.75.43a.66.66,0,0,1,.32.42.73.73,0,0,1-.06.54l-.89,1.52a.69.69,0,0,1-.25.26.7.7,0,0,1-.35.09.64.64,0,0,1-.34-.09l-.75-.45a4.87,4.87,0,0,1-1.48.86v.87ZM7.23,9.75a3,3,0,0,0,.86,2.08,2.94,2.94,0,1,0,4.16-4.16,3,3,0,0,0-2.08-.85A2.94,2.94,0,0,0,7.23,9.75Z" transform="translate(-4.44 -3.76)"/></g></svg>',revert:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 14.69"><g><path d="M18.26,15V12.3l1.89-2V15a2.58,2.58,0,0,1-.24,1c-.2.58-.75.92-1.65,1H7.56v2L4.41,15.63,7.56,13v2h10.7ZM6.3,8.28V11L4.41,13V8.28a2.58,2.58,0,0,1,.24-1c.2-.58.75-.92,1.65-1H17v-2l3.15,3.34L17,10.3v-2H6.3Z" transform="translate(-4.4 -4.28)"/></g></svg>',auto_size:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 15.74"><g><path d="M6.71,17.19,6.89,16l1.21-.15A6,6,0,0,1,6.81,13.9a5.78,5.78,0,0,1-.45-2.27A6,6,0,0,1,8.1,7.45a5.83,5.83,0,0,1,4.17-1.73l1-1-1-1A7.89,7.89,0,0,0,5,14.64a7.73,7.73,0,0,0,1.71,2.55Zm5.57,2.31h0A7.86,7.86,0,0,0,17.85,6.07L17.67,7.3l-1.21.15a5.9,5.9,0,0,1,1.29,1.92,5.81,5.81,0,0,1,.45,2.26,5.91,5.91,0,0,1-5.9,5.9l-1,1,.49.49.47.5Z" transform="translate(-4.41 -3.76)"/></g></svg>',insert_row_below:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M15.7,1.3c-0.1-0.1-0.1-0.2-0.2-0.2L15.3,1H0.4L0.3,1.1c0,0-0.1,0.1-0.1,0.1c0,0-0.1,0.1-0.1,0.1L0,1.4v7.7l0.1,0.1c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h2.3V9.3l0.1-0.5L3,8.5l0.1-0.2c-0.1,0-0.2,0-0.3,0H1.2v-6h13.3v6h-1.6c-0.1,0-0.2,0-0.3,0l0.1,0.2l0.2,0.4C12.9,9,13,9.2,13,9.3v0.1h2.3l0.2-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1V1.4L15.7,1.3z"/><path d="M10.5,7.5C9.9,7.1,9.3,6.8,8.6,6.7c-0.2,0-0.5-0.1-0.7,0c-0.2,0-0.5,0-0.7,0C6.6,6.7,6.1,6.9,5.6,7.3C5.2,7.6,4.7,8,4.4,8.4C4.3,8.6,4.2,8.8,4.2,8.9C4.1,9.1,4,9.3,3.9,9.4C3.9,9.6,3.8,9.7,3.8,9.9c0,0.2-0.1,0.3-0.1,0.5v-0.1c-0.1,0.8,0.1,1.6,0.5,2.4c0.4,0.7,1,1.3,1.7,1.7c0.3,0.2,0.6,0.3,0.9,0.3c0.3,0.1,0.7,0.1,1,0.1c0.3,0,0.7,0,1-0.1c0.3-0.1,0.6-0.2,0.9-0.3c0.5-0.3,0.9-0.6,1.3-1c0.3-0.4,0.6-0.8,0.8-1.3c0.1-0.4,0.2-0.9,0.2-1.4c0-0.5-0.1-1-0.3-1.4C11.5,8.6,11.1,8,10.5,7.5z M10.1,11.3H8.5v1.6H8H7.9H7.3v0v-0.1v-1.4H5.7v-0.4v-0.2v-0.6h0h1.5V8.5h1.2v1.6h1.6V11.3z"/></g></svg>',insert_row_above:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M0.1,14.5c0.1,0.1,0.1,0.2,0.2,0.2l0.1,0.1h14.9l0.1-0.1c0,0,0.1-0.1,0.1-0.1c0,0,0.1-0.1,0.1-0.1l0.1-0.1V6.7l-0.1-0.1c0-0.1-0.1-0.1-0.2-0.2l-0.1-0.1h-2.3v0.1l-0.1,0.5l-0.2,0.4l-0.1,0.2c0.1,0,0.2,0,0.3,0h1.6v6H1.3v-6h1.6c0.1,0,0.2,0,0.3,0L3.1,7.3L2.9,6.9C2.8,6.8,2.8,6.6,2.7,6.5V6.3H0.4L0.3,6.4c-0.1,0-0.1,0.1-0.2,0.2L0,6.7v7.7L0.1,14.5z"/><path d="M5.3,8.3c0.6,0.5,1.2,0.8,1.9,0.9c0.2,0,0.5,0.1,0.7,0c0.2,0,0.5,0,0.7,0c0.6-0.1,1.1-0.3,1.6-0.6c0.5-0.3,0.9-0.7,1.2-1.2c0.1-0.2,0.2-0.3,0.3-0.5c0.1-0.2,0.2-0.4,0.2-0.5c0.1-0.1,0.1-0.3,0.1-0.4C12,5.8,12,5.6,12,5.4v0.1c0.1-0.8-0.1-1.6-0.5-2.4c-0.4-0.7-1-1.3-1.7-1.7C9.5,1.3,9.2,1.2,8.9,1.1C8.5,1,8.2,1,7.9,1c-0.3,0-0.7,0-1,0.1C6.6,1.2,6.3,1.3,6,1.4C5.5,1.7,5.1,2,4.7,2.4C4.4,2.8,4.1,3.3,3.9,3.8C3.8,4.2,3.7,4.7,3.7,5.2c0,0.5,0.1,1,0.3,1.4C4.3,7.2,4.7,7.8,5.3,8.3z M5.7,4.5h1.6V2.9h0.5h0.1h0.6v0v0.1v1.4H10v0.4v0.2v0.6h0H8.5v1.6H7.3V5.7H5.7V4.5z"/></g></svg>',insert_column_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M14.5,15.7c0.1-0.1,0.2-0.1,0.2-0.2l0.1-0.1V0.4l-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1L14.4,0H6.7L6.6,0.1c-0.1,0-0.1,0.1-0.2,0.2L6.3,0.4v2.3h0.1l0.5,0.1L7.3,3l0.2,0.1c0-0.1,0-0.2,0-0.3V1.2h6v13.3h-6v-1.6c0-0.1,0-0.2,0-0.3l-0.2,0.1l-0.4,0.2C6.7,12.9,6.6,13,6.4,13H6.3v2.3l0.1,0.2c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h7.7L14.5,15.7z"/><path d="M8.3,10.5C8.7,10,9,9.3,9.1,8.6c0-0.2,0.1-0.5,0-0.7c0-0.2,0-0.5,0-0.7C9,6.7,8.8,6.1,8.5,5.7C8.2,5.2,7.8,4.8,7.3,4.5C7.2,4.4,7,4.3,6.9,4.2C6.7,4.1,6.5,4,6.4,4C6.2,3.9,6.1,3.9,5.9,3.8c-0.2,0-0.3-0.1-0.5-0.1h0.1C4.7,3.7,3.8,3.9,3.1,4.3C2.4,4.7,1.8,5.3,1.4,6C1.3,6.3,1.2,6.6,1.1,6.9C1,7.2,1,7.6,1,7.9c0,0.3,0,0.7,0.1,1c0.1,0.3,0.2,0.6,0.3,0.9c0.3,0.5,0.6,0.9,1,1.3c0.4,0.3,0.8,0.6,1.3,0.8C4.2,12,4.7,12.1,5.1,12c0.5,0,1-0.1,1.4-0.3C7.2,11.5,7.8,11.1,8.3,10.5zM4.5,10.1V8.5H2.9V8V7.9V7.3h0H3h1.4V5.7h0.4h0.2h0.6v0v1.5h1.6v1.2H5.7v1.6H4.5z"/></g></svg>',insert_column_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M1.3,0.1C1.2,0.2,1.1,0.2,1.1,0.3L1,0.4v14.9l0.1,0.1c0,0,0.1,0.1,0.1,0.1c0,0,0.1,0.1,0.1,0.1l0.1,0.1h7.7l0.1-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1v-2.3H9.3l-0.5-0.1l-0.4-0.2l-0.2-0.1c0,0.1,0,0.2,0,0.3v1.6h-6V1.3h6v1.6c0,0.1,0,0.2,0,0.3l0.2-0.1l0.4-0.2C9,2.9,9.2,2.8,9.3,2.8h0.1V0.5L9.4,0.3c0-0.1-0.1-0.1-0.2-0.2L9.1,0H1.4L1.3,0.1z"/><path d="M7.5,5.3C7,5.8,6.7,6.5,6.6,7.2c0,0.2-0.1,0.5,0,0.7c0,0.2,0,0.5,0,0.7c0.1,0.6,0.3,1.1,0.6,1.6c0.3,0.5,0.7,0.9,1.2,1.2c0.2,0.1,0.3,0.2,0.5,0.3c0.2,0.1,0.4,0.2,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3,0.1,0.5,0.1h-0.1c0.8,0.1,1.6-0.1,2.4-0.5c0.7-0.4,1.3-1,1.7-1.7c0.2-0.3,0.3-0.6,0.3-0.9c0.1-0.3,0.1-0.7,0.1-1c0-0.3,0-0.7-0.1-1c-0.1-0.3-0.2-0.6-0.3-0.9c-0.3-0.5-0.6-0.9-1-1.3C13,4.4,12.5,4.2,12,4c-0.4-0.1-0.9-0.2-1.4-0.2c-0.5,0-1,0.1-1.4,0.2C8.5,4.3,7.9,4.7,7.5,5.3z M11.3,5.7v1.6h1.6v0.5v0.1v0.6h0h-0.1h-1.4v1.6h-0.4h-0.2h-0.6v0V8.5H8.5V7.3h1.6V5.7H11.3z"/></g></svg>',delete_row:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 13.83"><g><path d="M4.7,18.46l.12.08H19.73l.12-.08a.58.58,0,0,0,.22-.22l.08-.12,0-7.69-.08-.11a.77.77,0,0,0-.18-.18l-.11-.08-2.31,0-.08.28-.1.29a1.58,1.58,0,0,1-.12.29l-.14.34s0,0,.18,0H18.9v6H5.64v-6H7.35c.14,0,.2,0,.18,0l-.14-.34a2.85,2.85,0,0,1-.12-.29l-.1-.29-.07-.27-2.31,0-.11.08a.77.77,0,0,0-.18.18l-.08.11,0,7.69.08.12a.47.47,0,0,0,.09.12l.13.09ZM12.11,13a4,4,0,0,0,1.46-.21,4.51,4.51,0,0,0,1.31-.71A4,4,0,0,0,16.26,10a4.32,4.32,0,0,0-.08-2.54,4.34,4.34,0,0,0-1-1.52,4.15,4.15,0,0,0-1.54-1,4.34,4.34,0,0,0-1.35-.22A4.07,4.07,0,0,0,11,4.93,3.94,3.94,0,0,0,9.24,6.07,3.92,3.92,0,0,0,8.15,8.88a3.91,3.91,0,0,0,.12.95A4.16,4.16,0,0,0,12.11,13Zm2.35-4.14v.58H10.09V8.27h4.37v.58Z" transform="translate(-4.4 -4.71)"/></g></svg>',delete_column:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.81 15.74"><g><path d="M5.66,19.42l.12.08,7.69,0,.11-.08a.77.77,0,0,0,.18-.18l.08-.11,0-2.32-.15,0-.45-.15-.42-.18-.17-.07a1,1,0,0,0,0,.27v1.63h-6V5h6V6.62a.9.9,0,0,0,0,.26l.17-.07.42-.17a3.91,3.91,0,0,1,.45-.15l.15,0,0-2.32L13.75,4a.77.77,0,0,0-.18-.18l-.11-.08H5.79l-.13.07a.63.63,0,0,0-.21.22l-.08.12V19.08l.08.12a.47.47,0,0,0,.09.12.35.35,0,0,0,.12.1Zm9-3.67a4.16,4.16,0,0,0,2.36-.51,4.08,4.08,0,0,0,1.67-1.72,4,4,0,0,0,.35-.91,3.79,3.79,0,0,0,.1-1,4.71,4.71,0,0,0-.11-1,5,5,0,0,0-.3-.87,4.25,4.25,0,0,0-1-1.25,4.49,4.49,0,0,0-1.34-.81A4.26,4.26,0,0,0,15,7.48a3.88,3.88,0,0,0-1.41.25A4.32,4.32,0,0,0,11.86,9,4,4,0,0,0,11,10.94a4.4,4.4,0,0,0-.05.68,4.5,4.5,0,0,0,.05.68,3.93,3.93,0,0,0,.61,1.57,4.22,4.22,0,0,0,1.18,1.2,4.59,4.59,0,0,0,.48.27c.2.1.37.17.5.22a2.44,2.44,0,0,0,.45.12,4.61,4.61,0,0,0,.5.07Zm2.54-4.12v.58H12.87V11h4.37v.59Z" transform="translate(-5.37 -3.76)"/></g></svg>',fixed_column_width:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6,5H18A1,1 0 0,1 19,6A1,1 0 0,1 18,7H6A1,1 0 0,1 5,6A1,1 0 0,1 6,5M21,2V4H3V2H21M15,8H17V22H15V8M7,8H9V22H7V8M11,8H13V22H11V8Z" /></svg>',rotate_left:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M0.5,10.2c0,0.1,0,0.2,0,0.3v0.2l0,0c0.1,0.3,0.3,0.6,0.4,0.9l0,0C1,11.8,1.3,12,1.5,11.9h0.1h0.2h0.1c0.1-0.1,0.3-0.3,0.4-0.5v-0.2c0-0.1,0-0.2-0.1-0.3l0,0c-0.2-0.2-0.3-0.4-0.3-0.7l0,0C1.8,10,1.7,9.9,1.5,9.8c-0.1,0-0.2,0-0.3,0H0.9C0.7,9.9,0.6,10,0.5,10.2L0.5,10.2z"/><path d="M2.2,11.5L2.2,11.5L2.2,11.5z"/><path d="M5.9,3.6L5.9,3.6L5.9,3.6z"/><path d="M0.1,7.9c0,0.3,0,0.6,0,0.9l0,0l0,0l0,0l0,0c0,0.2,0.1,0.3,0.2,0.4l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0l0,0c0.2,0,0.4-0.1,0.5-0.3l0,0c0-0.1,0.1-0.3,0.1-0.4V8.6l0,0c0-0.2,0-0.5,0-0.7l0,0c0-0.2-0.1-0.4-0.2-0.5C1.1,7.3,0.9,7.2,0.7,7.2S0.3,7.3,0.2,7.4C0.1,7.5,0,7.7,0.1,7.9z"/><path d="M1.9,12.7L1.9,12.7c0,0.2,0,0.4,0.2,0.5l0,0l0.2,0.3l0,0c0.2,0.1,0.3,0.2,0.5,0.4l0,0l0,0l0,0l0,0C2.9,14,3,14.1,3.2,14.1s0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5v-0.1c0-0.2-0.1-0.4-0.2-0.5l0,0l-0.4-0.4l-0.2-0.2l0,0C3,12.1,2.8,12,2.6,12l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0C2,12.3,1.9,12.5,1.9,12.7z"/><path d="M6.6,15c0,0.2,0.1,0.4,0.2,0.5c0.1,0.1,0.2,0.2,0.4,0.3l0,0c0.3,0,0.5,0,0.7,0h0.3l0,0c0.2,0,0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5l0,0l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0H7.9c-0.1,0-0.3,0-0.5,0l0,0H7.3c-0.2-0.1-0.3,0-0.5,0.1l0,0C6.7,14.6,6.6,14.8,6.6,15L6.6,15L6.6,15L6.6,15z"/><path d="M4.2,7.4C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.1,0.1,0.3,0.2,0.5,0.2s0.3-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0C11.5,7.3,11,6.7,10,5.8l0,0L8.4,4.2l0,0C8.3,4.1,8.1,4,7.9,4S7.5,4.1,7.4,4.2L4.2,7.4L4.2,7.4z M6.8,9L5.7,7.9l2.2-2.2l2.3,2.2l-2.3,2.2C7.7,9.9,7.3,9.5,6.8,9L6.8,9z"/><path d="M4.1,14.1C4,14.2,4,14.3,4,14.4v0.2l0,0c0.1,0.1,0.2,0.3,0.4,0.4l0,0c0.3,0.1,0.6,0.2,0.9,0.4h0.1h0.1l0,0c0.2,0,0.3-0.1,0.5-0.1l0,0c0.2-0.1,0.3-0.3,0.3-0.4l0,0l0,0l0,0l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3l0,0C6.1,14.2,6,14.1,5.8,14l0,0c-0.3-0.1-0.5-0.2-0.8-0.2l0,0c-0.1-0.1-0.2-0.1-0.3-0.1H4.5C4.3,13.7,4.2,13.9,4.1,14.1z"/><path d="M9.3,14.4c0,0.1-0.1,0.3,0,0.4V15l0,0c0,0.1,0.1,0.3,0.5,0.4c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1l0,0c0.3-0.1,0.6-0.2,0.9-0.3l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0.1-0.3c0-0.1-0.1-0.2-0.1-0.3l0,0c-0.1-0.2-0.2-0.3-0.4-0.4l0,0h-0.3c-0.1,0-0.2,0-0.3,0l0,0c-0.2,0.1-0.5,0.2-0.8,0.3l0,0C9.5,14.1,9.4,14.2,9.3,14.4L9.3,14.4z"/><path d="M11.4,14.7L11.4,14.7L11.4,14.7z"/><path d="M9.5,15.3L9.5,15.3L9.5,15.3z"/><path d="M15.9,7.9c0-1-0.2-2-0.6-3l0,0c-0.4-1-1-1.9-1.7-2.6C12.8,1.6,12,1,11,0.6l0,0C10.1,0.2,9,0,8,0C7.3,0,6.5,0.1,5.8,0.3l0,0C5.2,0.5,4.6,0.8,4,1.1L3.1,0.2l0,0C2.9,0.1,2.8,0,2.6,0H2.4l0,0C2.2,0,2,0.2,1.9,0.4l0,0L0.1,4.9l0,0C0,5,0,5.1,0,5.2c0,0.2,0.1,0.4,0.2,0.5l0,0c0.2,0.1,0.3,0.2,0.5,0.2h0.1H1l0,0l4.7-1.8l0,0C5.9,4,6.1,3.8,6.1,3.6V3.4C6.1,3.2,6,3,5.9,2.9l0,0L5.1,2.1c0.4-0.2,0.8-0.4,1.3-0.5c0.5-0.1,1.1-0.2,1.7-0.2c0.9,0,1.7,0.2,2.5,0.5l0,0c0.8,0.3,1.5,0.8,2.1,1.4c0.6,0.6,1.1,1.3,1.4,2.1l0,0c0.3,0.8,0.5,1.6,0.5,2.5s-0.2,1.7-0.5,2.5l0,0c-0.3,0.8-0.8,1.5-1.4,2.1c-0.2,0.2-0.4,0.3-0.6,0.5l0,0c-0.2,0.1-0.3,0.3-0.3,0.5v0.1c0,0.1,0,0.3,0.1,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0c0.1,0,0.3-0.1,0.4-0.2l0,0l0,0l0,0l0,0c0.2-0.2,0.5-0.4,0.7-0.6l0,0l0,0l0,0l0,0c0.7-0.8,1.3-1.6,1.7-2.6C15.6,10,15.8,9,15.9,7.9z M1.9,4C2,3.8,2.1,3.5,2.3,3.1l0,0L2.7,2l1.2,1.2L1.9,4z"/><path d="M6.8,15.5L6.8,15.5L6.8,15.5z"/></g></svg>',rotate_right:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.8 15.8"><g><path d="M9.9,15.3L9.9,15.3L9.9,15.3z"/><path d="M6.9,15.1L6.9,15.1c0,0.1,0.1,0.3,0.2,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0h0.3c0.2,0,0.4,0,0.7,0l0,0c0.2-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.2-0.4V15c0-0.2-0.1-0.4-0.2-0.4c-0.2-0.1-0.3-0.2-0.5-0.2H8.4l0,0c-0.1,0-0.3,0-0.5,0H7.6l0,0c-0.2,0-0.4,0.1-0.5,0.2C7,14.7,6.9,14.9,6.9,15.1z"/><path d="M6.5,14.4L6.5,14.4L6.5,14.4z"/><path d="M5.8,5.8L5.8,5.8c-1,0.9-1.5,1.5-1.7,1.6l0,0C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.2,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0L8.4,4.2C8.3,4.1,8.1,4,7.9,4C7.7,4,7.5,4.1,7.4,4.2l0,0L5.8,5.8z M5.6,7.9l2.3-2.2l2.2,2.2L9,9l0,0l0,0l0,0l0,0c-0.5,0.6-0.9,0.9-1.1,1.1L5.6,7.9z"/><path d="M9,15.5L9,15.5L9,15.5z"/><path d="M9.6,14.7v0.2l0,0l0,0l0,0l0,0c0.1,0.2,0.1,0.3,0.3,0.3c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1h0.1c0.3-0.1,0.6-0.3,0.9-0.4l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0,0v-0.2c0-0.1,0-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4H11c-0.1,0-0.2,0.1-0.3,0.1l0,0c-0.2,0.1-0.4,0.2-0.7,0.3l0,0l0,0c-0.1,0.1-0.3,0.2-0.4,0.4C9.6,14.5,9.6,14.6,9.6,14.7z"/><path d="M9,14.5L9,14.5L9,14.5z"/><path d="M9.6,14.4L9.6,14.4L9.6,14.4z"/><path d="M11.7,14L11.7,14L11.7,14z"/><path d="M15.6,7.4L15.6,7.4L15.6,7.4z"/><path d="M15,9.4c0.2,0,0.4,0,0.6-0.2l0,0c0.1-0.1,0.2-0.2,0.2-0.4l0,0l0,0l0,0l0,0c0-0.3,0-0.6,0-0.9c0-0.2-0.1-0.4-0.2-0.5c-0.1-0.1-0.3-0.2-0.5-0.2s-0.4,0.1-0.5,0.2c-0.1,0.1-0.2,0.3-0.2,0.5l0,0c0,0.2,0,0.4,0,0.7l0,0v0.1c0,0.1,0,0.3,0.1,0.4l0,0C14.6,9.3,14.8,9.4,15,9.4L15,9.4L15,9.4z"/><path d="M14,12h0.1h0.2h0.1c0.2,0,0.5-0.2,0.6-0.4l0,0c0.2-0.3,0.3-0.6,0.4-0.9l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4h-0.3c-0.1,0-0.2,0-0.3,0C14.2,9.9,14,10,14,10.3l0,0c-0.1,0.2-0.2,0.5-0.3,0.7l0,0c-0.1,0.1-0.1,0.2-0.1,0.3v0.2l0,0l0,0C13.6,11.6,13.8,11.8,14,12z"/><path d="M14.6,7.4L14.6,7.4L14.6,7.4z"/><path d="M4.4,14.2c-0.1,0.1-0.1,0.2-0.1,0.3l0.1,0.2c0,0.2,0.2,0.3,0.3,0.4l0,0c0.3,0.1,0.6,0.3,1.1,0.4l0,0h0.1l0,0c0.1,0,0.2-0.1,0.4-0.2c0.1,0,0.2-0.2,0.3-0.3l0,0v-0.2c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.1-0.2-0.2-0.4-0.3l0,0c-0.2-0.1-0.5-0.2-0.7-0.3l0,0c-0.1,0-0.2,0-0.3,0H4.7l0,0C4.6,13.9,4.4,14,4.4,14.2L4.4,14.2z"/><path d="M11.9,13.3c0,0.2,0.1,0.4,0.2,0.6c0.1,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l0,0l0,0l0,0c0.1-0.1,0.3-0.3,0.4-0.4l0,0l0.2-0.3l0,0c0.1-0.2,0.2-0.3,0.2-0.5l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.2,0.2l-0.4,0.4l0,0C12,13,11.9,13.1,11.9,13.3L11.9,13.3z"/><path d="M12.1,13.8L12.1,13.8L12.1,13.8z"/><path d="M11.9,13.3L11.9,13.3L11.9,13.3z"/><path d="M15.9,5.2c0-0.1-0.1-0.2-0.1-0.3l0,0L14,0.4l0,0C13.9,0.2,13.7,0,13.5,0l0,0l0,0h-0.2c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.9,0.9c-0.5-0.3-1.1-0.6-1.8-0.8l0,0C9.4,0.1,8.7,0,7.9,0c-1,0-2,0.2-3,0.6S3,1.6,2.3,2.3C1.6,3.1,1,3.9,0.6,4.9l0,0C0.2,5.8,0,6.8,0,7.9c0,1,0.2,2,0.6,3s0.9,1.8,1.7,2.6l0,0l0,0l0,0l0,0c0.2,0.2,0.5,0.4,0.7,0.6l0,0l0,0l0,0l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0c0.2,0,0.4-0.1,0.6-0.3l0,0c0.1-0.1,0.1-0.3,0.1-0.4v-0.1l0,0C4.1,13.3,4,13.1,3.9,13l0,0c-0.2-0.1-0.4-0.3-0.6-0.5c-0.6-0.6-1.1-1.3-1.4-2.1l0,0C1.6,9.6,1.4,8.8,1.4,7.9s0.2-1.7,0.5-2.5l0,0c0.3-0.8,0.8-1.5,1.4-2.1c0.6-0.6,1.3-1.1,2.1-1.4l0,0C6.2,1.6,7,1.4,7.9,1.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.5l-0.8,0.8l0,0C10,3.1,9.9,3.2,9.9,3.4v0.2l0,0l0,0c0,0.2,0.2,0.4,0.4,0.5l0,0l4.5,1.8l0,0H15h0.1c0.2,0,0.4-0.1,0.5-0.2l0,0C15.7,5.6,15.8,5.4,15.9,5.2z M11.8,3.2L13,2l0.4,1.1l0,0c0.2,0.4,0.3,0.7,0.4,0.9L11.8,3.2z"/></g></svg>',mirror_horizontal:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.75 15.74"><g><path d="M13.75,3.76l5.9,15.74h-5.9V3.76ZM4.9,19.5,10.8,3.76V19.5H4.9Z" transform="translate(-4.9 -3.76)"/></g></svg>',mirror_vertical:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.74 14.75"><g><path d="M20.15,13.1,4.41,19V13.1H20.15ZM4.41,4.25l15.74,5.9H4.41V4.25Z" transform="translate(-4.41 -4.25)"/></g></svg>',checked:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.75 12.1"><g><path d="M4.59,12.23l.12.18L9.43,17.5a.58.58,0,0,0,.84,0L20,7.45h0a.58.58,0,0,0,0-.84l-.85-.85a.58.58,0,0,0-.84,0H18.2l-8.12,8.41a.29.29,0,0,1-.42,0l-3.4-3.63a.58.58,0,0,0-.84,0l-.85.85a.6.6,0,0,0-.14.21.51.51,0,0,0,0,.44c.05.06.1.13.16.19Z" transform="translate(-4.38 -5.58)"/></g></svg>',line_break:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,6a1,1,0,0,0-1,1v4a1,1,0,0,1-1,1H7.41l1.3-1.29A1,1,0,0,0,7.29,9.29l-3,3a1,1,0,0,0-.21.33,1,1,0,0,0,0,.76,1,1,0,0,0,.21.33l3,3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L7.41,14H17a3,3,0,0,0,3-3V7A1,1,0,0,0,19,6Z"/></svg>',audio:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z" /></svg>',image_gallery:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="30 30 150 150"><g><path d="M152.775,120.548V51.651c0-12.271-9.984-22.254-22.254-22.254H43.727c-12.271,0-22.254,9.983-22.254,22.254v68.896c0,12.27,9.983,22.254,22.254,22.254h86.795C142.791,142.802,152.775,132.817,152.775,120.548z M36.394,51.651c0-4.042,3.291-7.333,7.333-7.333h86.795c4.042,0,7.332,3.291,7.332,7.333v23.917l-14.938-17.767c-1.41-1.678-3.487-2.649-5.68-2.658h-0.029c-2.184,0-4.255,0.954-5.674,2.613L76.709,98.519l-9.096-9.398c-1.427-1.474-3.392-2.291-5.448-2.273c-2.052,0.025-4.004,0.893-5.396,2.4L36.394,111.32V51.651z M41.684,127.585l20.697-22.416l9.312,9.622c1.461,1.511,3.489,2.334,5.592,2.27c2.101-0.066,4.075-1.013,5.44-2.612l34.436-40.308l20.693,24.613v21.794c0,4.042-3.29,7.332-7.332,7.332H43.727C43.018,127.88,42.334,127.775,41.684,127.585z M182.616,152.5V75.657c0-4.12-3.34-7.46-7.461-7.46c-4.119,0-7.46,3.34-7.46,7.46V152.5c0,4.112-3.347,7.46-7.461,7.46h-94c-4.119,0-7.46,3.339-7.46,7.459c0,4.123,3.341,7.462,7.46,7.462h94C172.576,174.881,182.616,164.841,182.616,152.5z"/></g></svg>',bookmark:'<svg viewBox="0 0 24 24"><path d="M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z" /></svg>',download:'<svg viewBox="0 0 24 24"><path d="M2 12H4V17H20V12H22V17C22 18.11 21.11 19 20 19H4C2.9 19 2 18.11 2 17V12M12 15L17.55 9.54L16.13 8.13L13 11.25V2H11V11.25L7.88 8.13L6.46 9.55L12 15Z" /></svg>',dir_ltr:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M9 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2H9C6.79 2 5 3.79 5 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zm0 12v3H5v2h12v3l4-4-4-4z"/></svg>',dir_rtl:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M10 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2h-8C7.79 2 6 3.79 6 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zM8 14l-4 4 4 4v-3h12v-2H8v-3z"/></svg>',alert_outline:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z" /></svg>',more_text:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 10 180 180"><g><path d="M49.711,142.188h49.027c2.328,0.002,4.394,1.492,5.129,3.699l9.742,29.252c0.363,1.092,1.385,1.828,2.537,1.83l15.883,0.01c0.859,0,1.667-0.412,2.17-1.109s0.641-1.594,0.37-2.41l-16.625-50.045L86.503,28.953c-0.36-1.097-1.383-1.839-2.537-1.842H64.532c-1.153-0.001-2.178,0.736-2.542,1.831L13.847,173.457c-0.271,0.816-0.135,1.713,0.369,2.412c0.503,0.697,1.311,1.109,2.171,1.109h15.872c1.151,0,2.173-0.736,2.537-1.828l9.793-29.287C45.325,143.66,47.39,142.18,49.711,142.188L49.711,142.188z M53.493,119.098l15.607-46.9c0.744-2.196,2.806-3.674,5.125-3.674s4.381,1.478,5.125,3.674l15.607,46.904c0.537,1.621,0.263,3.402-0.736,4.789c-1.018,1.408-2.649,2.24-4.386,2.24H58.615c-1.736,0-3.368-0.832-4.386-2.24C53.23,122.504,52.956,120.721,53.493,119.098L53.493,119.098z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_paragraph:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="10 10 180 180"><g><path d="M128.39,28.499H63.493c-25.558,0-46.354,20.796-46.354,46.354c0,25.559,20.796,46.353,46.354,46.353h9.271v55.625h18.542V47.04h9.271V176.83h18.543V47.04h9.271V28.499z M72.764,102.664h-9.271c-15.337,0-27.813-12.475-27.813-27.812c0-15.336,12.476-27.813,27.813-27.813h9.271V102.664z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_plus:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="35 30 140 140"><g><path d="M137.215,102.045c0,3.498-2.835,6.332-6.333,6.332H24.549c-3.498,0-6.334-2.834-6.334-6.332l0,0c0-3.498,2.836-6.333,6.334-6.333h106.333C134.38,95.711,137.215,98.547,137.215,102.045L137.215,102.045z M77.715,161.545c-3.498,0-6.333-2.836-6.333-6.334V48.878c0-3.498,2.836-6.333,6.333-6.333l0,0c3.498,0,6.334,2.835,6.334,6.333v106.333C84.049,158.709,81.213,161.545,77.715,161.545L77.715,161.545z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.632,190.465,66.177,190.465,63.32L190.465,63.32z M190.465,101.993c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.888,1.026,5.353,3.056,7.396c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.993L190.465,101.993z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',more_horizontal:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.76 3.58"><g><path d="M4.64,10.73a1.84,1.84,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0A1.79,1.79,0,0,1,8,11.63a1.84,1.84,0,0,1-.25.9,1.69,1.69,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2.08,2.08,0,0,1,4.64,10.73Zm6.09,0a1.84,1.84,0,0,1,.65-.65,1.78,1.78,0,0,1,2.67,1.55,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.76,1.76,0,0,1-1.79,0,1.79,1.79,0,0,1-.64-2.44Zm6.08,0a1.69,1.69,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0,1.79,1.79,0,0,1,.9,1.54,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2,2,0,0,1,16.81,10.73Z" transform="translate(-4.39 -9.84)"/></g></svg>',more_vertical:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3.94 15.75"><g><path d="M12.28,7.69a1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,2,2,0,0,1,1.39-.58,1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58Zm0,2a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39A1.92,1.92,0,0,1,13.67,13a2,2,0,0,1-1.39.58A1.92,1.92,0,0,1,10.89,13a2,2,0,0,1-.58-1.39,2,2,0,0,1,2-2Zm0,5.9a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,1.94,1.94,0,0,1,1.39-.58Z" transform="translate(-10.31 -3.75)"/></g></svg>',attachment:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8.38 15.68"><g><path d="M15.23,6h1v9.78a3.88,3.88,0,0,1-1.31,2.45,4,4,0,0,1-6.57-2.45V7A3,3,0,0,1,9.2,4.89a3,3,0,0,1,5,2.09v8.31a1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39V8h1v7.32a1,1,0,0,0,.29.69,1,1,0,0,0,.69.28A.9.9,0,0,0,13,16a1,1,0,0,0,.29-.69V7a1.92,1.92,0,0,0-.58-1.39A2,2,0,0,0,11.27,5a1.92,1.92,0,0,0-1.39.58A2,2,0,0,0,9.33,7v8.31a3,3,0,1,0,5.9,0V6Z" transform="translate(-8.08 -3.78)"/></g></svg>',map:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11.7 15.62"><g><path d="M12.05,12.42a2.93,2.93,0,1,1,2.07-5A2.88,2.88,0,0,1,15,9.49a3,3,0,0,1-.86,2.07,2.89,2.89,0,0,1-2.07.86Zm0-5.36a2.43,2.43,0,0,0-1.72,4.16,2.48,2.48,0,0,0,1.72.72,2.44,2.44,0,0,0,0-4.88Zm0-3.3A5.84,5.84,0,0,1,17.9,9.62a9.94,9.94,0,0,1-1.73,5A33.59,33.59,0,0,1,12.84,19a1.52,1.52,0,0,1-.23.2,1,1,0,0,1-.55.2h0a1,1,0,0,1-.55-.2,1.52,1.52,0,0,1-.23-.2,33.59,33.59,0,0,1-3.33-4.32,9.93,9.93,0,0,1-1.72-5,5.84,5.84,0,0,1,5.85-5.86ZM12,18.34l.08.05.06-.06a35.58,35.58,0,0,0,3.06-3.93,9.35,9.35,0,0,0,1.74-4.77,4.88,4.88,0,0,0-4.88-4.88A4.79,4.79,0,0,0,8.6,6.17,4.84,4.84,0,0,0,7.17,9.62,9.29,9.29,0,0,0,8.91,14.4,36,36,0,0,0,12,18.34Z" transform="translate(-6.2 -3.76)"/></g></svg>',magic_stick:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.73 15.75"><g><path d="M19.86,19.21a1,1,0,0,0,.28-.68,1,1,0,0,0-.28-.7L13,10.93a1,1,0,0,0-.7-.28,1,1,0,0,0-.68,1.65l6.9,6.9a1,1,0,0,0,.69.29.93.93,0,0,0,.69-.28ZM9.19,8.55a3,3,0,0,0,1.68,0,14.12,14.12,0,0,0,1.41-.32A11.26,11.26,0,0,0,10.8,7.06c-.56-.36-.86-.56-.91-.58S10,5.91,10,5.11s0-1.26-.15-1.37a4.35,4.35,0,0,0-1.19.71c-.53.4-.81.62-.87.68a9,9,0,0,0-2-.6,6.84,6.84,0,0,0-.76-.09s0,.27.08.77a8.6,8.6,0,0,0,.61,2q-.09.09-.69.87a3.59,3.59,0,0,0-.68,1.17c.12.17.57.23,1.36.15S7,9.26,7.15,9.23s.21.36.57.91a10.49,10.49,0,0,0,1.14,1.48c0-.1.14-.57.31-1.4a3,3,0,0,0,0-1.67Z" transform="translate(-4.41 -3.74)"/></g></svg>',empty_file:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12.78 15.75"><g><path d="M14.73,3.76,18.67,7.7v9.84a2,2,0,0,1-2,2H7.84a1.89,1.89,0,0,1-1.38-.58,2,2,0,0,1-.57-1.39V5.73a1.93,1.93,0,0,1,.57-1.38,2,2,0,0,1,1.38-.58h6.62l.26,0v0Zm2.95,4.92h-2a1.93,1.93,0,0,1-1.38-.57,2,2,0,0,1-.58-1.4V6.17c0-.36,0-.84,0-1.43H7.85a1,1,0,0,0-.7.29,1,1,0,0,0-.29.7V17.54a1,1,0,0,0,.29.69,1,1,0,0,0,.69.29h8.85a1,1,0,0,0,.71-.29.92.92,0,0,0,.28-.69Zm0-1L14.73,4.74v2A1,1,0,0,0,15,7.4a1,1,0,0,0,.69.29Z" transform="translate(-5.89 -3.76)"/></g></svg>'},A=n("P6u4"),N=n.n(A);const T={_d:null,_w:null,isIE:null,isIE_Edge:null,isOSX_IOS:null,isChromium:null,isMobile:null,isResizeObserverSupported:null,_propertiesInit:function(){this._d||(this._d=document,this._w=window,this.isIE=navigator.userAgent.indexOf("Trident")>-1,this.isIE_Edge=navigator.userAgent.indexOf("Trident")>-1||navigator.appVersion.indexOf("Edge")>-1,this.isOSX_IOS=/(Mac|iPhone|iPod|iPad)/.test(navigator.platform),this.isChromium=!!window.chrome,this.isResizeObserverSupported="function"==typeof ResizeObserver,this.isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)},_allowedEmptyNodeList:".se-component, pre, blockquote, hr, li, table, img, iframe, video, audio, canvas",_HTMLConvertor:function(e){const t={"&":"&amp;"," ":"&nbsp;","'":"&apos;",'"':"&quot;","<":"&lt;",">":"&gt;"};return e.replace(/&|\u00A0|'|"|<|>/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},zeroWidthSpace:String.fromCharCode(8203),zeroWidthRegExp:new RegExp(String.fromCharCode(8203),"g"),onlyZeroWidthRegExp:new RegExp("^"+String.fromCharCode(8203)+"+$"),fontValueMap:{"xx-small":1,"x-small":2,small:3,medium:4,large:5,"x-large":6,"xx-large":7},onlyZeroWidthSpace:function(e){return null!=e&&("string"!=typeof e&&(e=e.textContent),""===e||this.onlyZeroWidthRegExp.test(e))},getXMLHttpRequest:function(){if(!this._w.ActiveXObject)return this._w.XMLHttpRequest?new XMLHttpRequest:null;try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(e){try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return null}}},getValues:function(e){return e?this._w.Object.keys(e).map((function(t){return e[t]})):[]},camelToKebabCase:function(e){return"string"==typeof e?e.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()})):e.map((function(e){return T.camelToKebabCase(e)}))},kebabToCamelCase:function(e){return"string"==typeof e?e.replace(/-[a-zA-Z]/g,(function(e){return e.replace("-","").toUpperCase()})):e.map((function(e){return T.camelToKebabCase(e)}))},createElement:function(e){return this._d.createElement(e)},createTextNode:function(e){return this._d.createTextNode(e||"")},HTMLEncoder:function(e){const t={"<":"$lt;",">":"$gt;"};return e.replace(/<|>/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},HTMLDecoder:function(e){const t={"$lt;":"<","$gt;":">"};return e.replace(/\$lt;|\$gt;/g,(function(e){return"string"==typeof t[e]?t[e]:e}))},hasOwn:function(e,t){return this._hasOwn.call(e,t)},_hasOwn:Object.prototype.hasOwnProperty,getIncludePath:function(e,t){let n="";const i=[],l="js"===t?"script":"link",s="js"===t?"src":"href";let o="(?:";for(let t=0,n=e.length;t<n;t++)o+=e[t]+(t<n-1?"|":")");const a=new this._w.RegExp("(^|.*[\\/])"+o+"(\\.[^\\/]+)?."+t+"(?:\\?.*|;.*)?$","i"),r=new this._w.RegExp(".+\\."+t+"(?:\\?.*|;.*)?$","i");for(let e=this._d.getElementsByTagName(l),t=0;t<e.length;t++)r.test(e[t][s])&&i.push(e[t]);for(let e=0;e<i.length;e++){let t=i[e][s].match(a);if(t){n=t[0];break}}if(""===n&&(n=i.length>0?i[0][s]:""),-1===n.indexOf(":/")&&"//"!==n.slice(0,2)&&(n=0===n.indexOf("/")?location.href.match(/^.*?:\/\/[^\/]*/)[0]+n:location.href.match(/^[^\?]*\/(?:)/)[0]+n),!n)throw"[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +"+name+", extension: "+t+")";return n},getPageStyle:function(e){let t="";const n=(e||this._d).styleSheets;for(let e,i=0,l=n.length;i<l;i++){try{e=n[i].cssRules}catch(e){continue}if(e)for(let n=0,i=e.length;n<i;n++)t+=e[n].cssText}return t},getIframeDocument:function(e){let t=e.contentWindow||e.contentDocument;return t.document&&(t=t.document),t},getAttributesToString:function(e,t){if(!e.attributes)return"";const n=e.attributes;let i="";for(let e=0,l=n.length;e<l;e++)t&&t.indexOf(n[e].name)>-1||(i+=n[e].name+'="'+n[e].value+'" ');return i},getByteLength:function(e){if(!e||!e.toString)return 0;e=e.toString();const t=this._w.encodeURIComponent;let n,i;return this.isIE_Edge?(i=this._w.unescape(t(e)).length,n=0,null!==t(e).match(/(%0A|%0D)/gi)&&(n=t(e).match(/(%0A|%0D)/gi).length),i+n):(i=new this._w.TextEncoder("utf-8").encode(e).length,n=0,null!==t(e).match(/(%0A|%0D)/gi)&&(n=t(e).match(/(%0A|%0D)/gi).length),i+n)},isWysiwygDiv:function(e){return e&&1===e.nodeType&&(this.hasClass(e,"se-wrapper-wysiwyg")||/^BODY$/i.test(e.nodeName))},isNonEditable:function(e){return e&&1===e.nodeType&&"false"===e.getAttribute("contenteditable")},isTextStyleElement:function(e){return e&&3!==e.nodeType&&/^(strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)$/i.test(e.nodeName)},isInputElement:function(e){return e&&1===e.nodeType&&/^(INPUT|TEXTAREA)$/i.test(e.nodeName)},isFormatElement:function(e){return e&&1===e.nodeType&&(/^(P|DIV|H[1-6]|PRE|LI|TH|TD|DETAILS)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__replace_.+(\\s|$)|(\\s|^)__se__format__free_.+(\\s|$)"))&&!this.isComponent(e)&&!this.isWysiwygDiv(e)},isRangeFormatElement:function(e){return e&&1===e.nodeType&&(/^(BLOCKQUOTE|OL|UL|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD|DETAILS)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__range_.+(\\s|$)"))},isClosureRangeFormatElement:function(e){return e&&1===e.nodeType&&(/^(TH|TD)$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__range__closure_.+(\\s|$)"))},isFreeFormatElement:function(e){return e&&1===e.nodeType&&(/^PRE$/i.test(e.nodeName)||this.hasClass(e,"(\\s|^)__se__format__free_.+(\\s|$)"))&&!this.isComponent(e)&&!this.isWysiwygDiv(e)},isClosureFreeFormatElement:function(e){return e&&1===e.nodeType&&this.hasClass(e,"(\\s|^)__se__format__free__closure_.+(\\s|$)")},isComponent:function(e){return e&&(/se-component/.test(e.className)||/^(TABLE|HR)$/.test(e.nodeName))},isUneditableComponent:function(e){return e&&this.hasClass(e,"__se__uneditable")},isMediaComponent:function(e){return e&&/se-component/.test(e.className)},isNotCheckingNode:function(e){return e&&/katex|__se__tag/.test(e.className)},getFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isRangeFormatElement(e)&&e.firstElementChild,this.isFormatElement(e)&&t(e))return e;e=e.parentNode}return null},getRangeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isRangeFormatElement(e)&&!/^(THEAD|TBODY|TR)$/i.test(e.nodeName)&&t(e))return e;e=e.parentNode}return null},getFreeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isFreeFormatElement(e)&&t(e))return e;e=e.parentNode}return null},getClosureFreeFormatElement:function(e,t){if(!e)return null;for(t||(t=function(){return!0});e;){if(this.isWysiwygDiv(e))return null;if(this.isClosureFreeFormatElement(e)&&t(e))return e;e=e.parentNode}return null},copyTagAttributes:function(e,t,n){if(t.style.cssText){const n=t.style;for(let t=0,i=n.length;t<i;t++)e.style[n[t]]=n[n[t]]}const i=t.attributes;for(let t,l=0,s=i.length;l<s;l++)t=i[l].name.toLowerCase(),n&&n.indexOf(t)>-1||!i[l].value?e.removeAttribute(t):"style"!==t&&e.setAttribute(i[l].name,i[l].value)},copyFormatAttributes:function(e,t){(t=t.cloneNode(!1)).className=t.className.replace(/(\s|^)__se__format__[^\s]+/g,""),this.copyTagAttributes(e,t)},getArrayItem:function(e,t,n){if(!e||0===e.length)return null;t=t||function(){return!0};const i=[];for(let l,s=0,o=e.length;s<o;s++)if(l=e[s],t(l)){if(!n)return l;i.push(l)}return n?i:null},arrayIncludes:function(e,t){for(let n=0;n<e.length;n++)if(e[n]===t)return!0;return!1},getArrayIndex:function(e,t){let n=-1;for(let i=0,l=e.length;i<l;i++)if(e[i]===t){n=i;break}return n},nextIdx:function(e,t){let n=this.getArrayIndex(e,t);return-1===n?-1:n+1},prevIdx:function(e,t){let n=this.getArrayIndex(e,t);return-1===n?-1:n-1},getPositionIndex:function(e){let t=0;for(;e=e.previousSibling;)t+=1;return t},getNodePath:function(e,t,n){const i=[];let l=!0;return this.getParentElement(e,function(e){if(e===t&&(l=!1),l&&!this.isWysiwygDiv(e)){if(n&&3===e.nodeType){let t=null,i=null;n.s=n.e=0;let l=e.previousSibling;for(;l&&3===l.nodeType;)i=l.textContent.replace(this.zeroWidthRegExp,""),n.s+=i.length,e.textContent=i+e.textContent,t=l,l=l.previousSibling,this.removeItem(t);let s=e.nextSibling;for(;s&&3===s.nodeType;)i=s.textContent.replace(this.zeroWidthRegExp,""),n.e+=i.length,e.textContent+=i,t=s,s=s.nextSibling,this.removeItem(t)}i.push(e)}return!1}.bind(this)),i.map(this.getPositionIndex).reverse()},getNodeFromPath:function(e,t){let n,i=t;for(let t=0,l=e.length;t<l&&(n=i.childNodes,0!==n.length);t++)i=n.length<=e[t]?n[n.length-1]:n[e[t]];return i},isSameAttributes:function(e,t){if(3===e.nodeType&&3===t.nodeType)return!0;if(3===e.nodeType||3===t.nodeType)return!1;const n=e.style,i=t.style;let l=0;for(let e=0,t=n.length;e<t;e++)n[n[e]]===i[n[e]]&&l++;const s=e.classList,o=t.classList,a=this._w.RegExp;let r=0;for(let e=0,t=s.length;e<t;e++)a("(s|^)"+s[e]+"(s|$)").test(o.value)&&r++;return l===i.length&&l===n.length&&r===o.length&&r===s.length},isEmptyLine:function(e){return!e||!e.parentNode||!e.querySelector("IMG, IFRAME, AUDIO, VIDEO, CANVAS, TABLE")&&0===e.children.length&&this.onlyZeroWidthSpace(e.textContent)},isSpanWithoutAttr:function(e){return!!e&&1===e.nodeType&&/^SPAN$/i.test(e.nodeName)&&!e.className&&!e.style.cssText},isList:function(e){return e&&/^(OL|UL)$/i.test("string"==typeof e?e:e.nodeName)},isListCell:function(e){return e&&/^LI$/i.test("string"==typeof e?e:e.nodeName)},isTable:function(e){return e&&/^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test("string"==typeof e?e:e.nodeName)},isCell:function(e){return e&&/^(TD|TH)$/i.test("string"==typeof e?e:e.nodeName)},isBreak:function(e){return e&&/^BR$/i.test("string"==typeof e?e:e.nodeName)},isAnchor:function(e){return e&&/^A$/i.test("string"==typeof e?e:e.nodeName)},isMedia:function(e){return e&&/^(IMG|IFRAME|AUDIO|VIDEO|CANVAS)$/i.test("string"==typeof e?e:e.nodeName)},isFigures:function(e){return e&&(this.isMedia(e)||/^(FIGURE)$/i.test("string"==typeof e?e:e.nodeName))},isNumber:function(e){return!!e&&/^-?\d+(\.\d+)?$/.test(e+"")},getNumber:function(e,t){if(!e)return 0;let n=(e+"").match(/-?\d+(\.\d+)?/);return n&&n[0]?(n=n[0],t<0?1*n:0===t?this._w.Math.round(1*n):1*(1*n).toFixed(t)):0},getListChildren:function(e,t){const n=[];return e&&e.children&&0!==e.children.length?(t=t||function(){return!0},function i(l){if(e!==l&&t(l)&&n.push(l),l.children)for(let e=0,t=l.children.length;e<t;e++)i(l.children[e])}(e),n):n},getListChildNodes:function(e,t){const n=[];return e&&0!==e.childNodes.length?(t=t||function(){return!0},function i(l){e!==l&&t(l)&&n.push(l);for(let e=0,t=l.childNodes.length;e<t;e++)i(l.childNodes[e])}(e),n):n},getElementDepth:function(e){if(!e||this.isWysiwygDiv(e))return-1;let t=0;for(e=e.parentNode;e&&!this.isWysiwygDiv(e);)t+=1,e=e.parentNode;return t},compareElements:function(e,t){let n=e,i=t;for(;n&&i&&n.parentNode!==i.parentNode;)n=n.parentNode,i=i.parentNode;if(!n||!i)return{ancestor:null,a:e,b:t,result:0};const l=n.parentNode.childNodes,s=this.getArrayIndex(l,n),o=this.getArrayIndex(l,i);return{ancestor:n.parentNode,a:n,b:i,result:s>o?1:s<o?-1:0}},getParentElement:function(e,t){let n;if("function"==typeof t)n=t;else{let e;/^\./.test(t)?(e="className",t=t.split(".")[1]):/^#/.test(t)?(e="id",t="^"+t.split("#")[1]+"$"):/^:/.test(t)?(e="name",t="^"+t.split(":")[1]+"$"):(e="nodeName",t="^"+t+"$");const i=new this._w.RegExp(t,"i");n=function(t){return i.test(t[e])}}for(;e&&!n(e);){if(this.isWysiwygDiv(e))return null;e=e.parentNode}return e},getPreviousDeepestNode:function(e,t){let n=e.previousSibling;if(!n){for(let i=e.parentNode;i;i=i.parentNode){if(i===t)return null;if(i.previousSibling){n=i.previousSibling;break}}if(!n)return null}for(;n.lastChild;)n=n.lastChild;return n},getNextDeepestNode:function(e,t){let n=e.nextSibling;if(!n){for(let i=e.parentNode;i;i=i.parentNode){if(i===t)return null;if(i.nextSibling){n=i.nextSibling;break}}if(!n)return null}for(;n.firstChild;)n=n.firstChild;return n},getChildElement:function(e,t,n){let i;if("function"==typeof t)i=t;else{let e;/^\./.test(t)?(e="className",t=t.split(".")[1]):/^#/.test(t)?(e="id",t="^"+t.split("#")[1]+"$"):/^:/.test(t)?(e="name",t="^"+t.split(":")[1]+"$"):(e="nodeName",t="^"+("text"===t?"#"+t:t)+"$");const n=new this._w.RegExp(t,"i");i=function(t){return n.test(t[e])}}const l=this.getListChildNodes(e,(function(e){return i(e)}));return l[n?l.length-1:0]},getEdgeChildNodes:function(e,t){if(e){for(t||(t=e);e&&1===e.nodeType&&e.childNodes.length>0&&!this.isBreak(e);)e=e.firstChild;for(;t&&1===t.nodeType&&t.childNodes.length>0&&!this.isBreak(t);)t=t.lastChild;return{sc:e,ec:t||e}}},getOffset:function(e,t){let n=0,i=0,l=3===e.nodeType?e.parentElement:e;const s=this.getParentElement(e,this.isWysiwygDiv.bind(this));for(;l&&!this.hasClass(l,"se-container")&&l!==s;)n+=l.offsetLeft,i+=l.offsetTop,l=l.offsetParent;const o=t&&/iframe/i.test(t.nodeName);return{left:n+(o?t.parentElement.offsetLeft:0),top:i-(s?s.scrollTop:0)+(o?t.parentElement.offsetTop:0)}},getOverlapRangeAtIndex:function(e,t,n,i){if(e<=i?t<n:t>n)return 0;const l=(e>n?e:n)-(t<i?t:i);return(l<0?-1*l:l)+1},changeTxt:function(e,t){e&&t&&(e.textContent=t)},changeElement:function(e,t){if("string"==typeof t)if(e.outerHTML)e.outerHTML=t;else{const n=this.createElement("DIV");n.innerHTML=t,t=n.firstChild,e.parentNode.replaceChild(t,e)}else 1===t.nodeType&&e.parentNode.replaceChild(t,e)},setStyle:function(e,t,n){e.style[t]=n,n||e.style.cssText||e.removeAttribute("style")},hasClass:function(e,t){if(e)return new this._w.RegExp(t).test(e.className)},addClass:function(e,t){if(!e)return;new this._w.RegExp("(\\s|^)"+t+"(\\s|$)").test(e.className)||(e.className+=(e.className.length>0?" ":"")+t)},removeClass:function(e,t){if(!e)return;const n=new this._w.RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ").trim(),e.className.trim()||e.removeAttribute("class")},toggleClass:function(e,t){if(!e)return;let n=!1;const i=new this._w.RegExp("(\\s|^)"+t+"(\\s|$)");return i.test(e.className)?e.className=e.className.replace(i," ").trim():(e.className+=" "+t,n=!0),e.className.trim()||e.removeAttribute("class"),n},isImportantDisabled:function(e){return e.hasAttribute("data-important-disabled")},setDisabledButtons:function(e,t,n){for(let i=0,l=t.length;i<l;i++){let l=t[i];!n&&this.isImportantDisabled(l)||(l.disabled=e),n&&(e?l.setAttribute("data-important-disabled",""):l.removeAttribute("data-important-disabled"))}},removeItem:function(e){e&&("function"==typeof e.remove?e.remove():e.parentNode&&e.parentNode.removeChild(e))},removeItemAllParents:function(e,t,n){if(!e)return null;let i=null;return t||(t=function(e){if(e===n||this.isComponent(e))return!1;const t=e.textContent.trim();return 0===t.length||/^(\n|\u200B)+$/.test(t)}.bind(this)),function e(n){if(!T.isWysiwygDiv(n)){const l=n.parentNode;l&&t(n)&&(i={sc:n.previousElementSibling,ec:n.nextElementSibling},T.removeItem(n),e(l))}}(e),i},detachNestedList:function(e,t){const n=this._deleteNestedList(e);let i,l,s;if(n){i=n.cloneNode(!1),l=n.childNodes;const t=this.getPositionIndex(e);for(;l[t];)i.appendChild(l[t])}else i=e;if(t)s=this.getListChildren(i,function(e){return this.isListCell(e)&&!e.previousElementSibling}.bind(this));else{const t=this.getElementDepth(e)+2;s=this.getListChildren(e,function(e){return this.isListCell(e)&&!e.previousElementSibling&&this.getElementDepth(e)===t}.bind(this))}for(let e=0,t=s.length;e<t;e++)this._deleteNestedList(s[e]);return n&&(n.parentNode.insertBefore(i,n.nextSibling),l&&0===l.length&&this.removeItem(n)),i===e?i.parentNode:i},_deleteNestedList:function(e){const t=e.parentNode;let n,i,l,s,o,a=t,r=a.parentNode;for(;this.isListCell(r);){for(s=this.getPositionIndex(e),n=r.nextElementSibling,i=r.parentNode,l=a;l;){if(a=a.nextSibling,this.isList(l)){for(o=l.childNodes;o[s];)i.insertBefore(o[s],n);0===o.length&&this.removeItem(l)}else i.appendChild(l);l=a}a=i,r=i.parentNode}return 0===t.children.length&&this.removeItem(t),i},splitElement:function(e,t,n){if(this.isWysiwygDiv(e))return e;if(t&&!this.isNumber(t)){const n=e.childNodes;let i=this.getPositionIndex(t);const l=e.cloneNode(!1),s=e.cloneNode(!1);for(let e=0,t=n.length;e<t;e++){if(e<i)l.appendChild(n[e]);else{if(!(e>i))continue;s.appendChild(n[e])}e--,t--,i--}return l.childNodes.length>0&&e.parentNode.insertBefore(l,e),s.childNodes.length>0&&e.parentNode.insertBefore(s,e.nextElementSibling),e}const i=e.parentNode;let l,s,o,a=0,r=1,c=!0;if((!n||n<0)&&(n=0),3===e.nodeType){if(a=this.getPositionIndex(e),t>=0&&e.length!==t){e.splitText(t);const n=this.getNodeFromPath([a+1],i);this.onlyZeroWidthSpace(n)&&(n.data=this.zeroWidthSpace)}}else if(1===e.nodeType){if(0===t){for(;e.firstChild;)e=e.firstChild;if(3===e.nodeType){const t=this.createTextNode(this.zeroWidthSpace);e.parentNode.insertBefore(t,e),e=t}}e.previousSibling?e=e.previousSibling:this.getElementDepth(e)===n&&(c=!1)}1===e.nodeType&&(r=0);let u=e;for(;this.getElementDepth(u)>n;)for(a=this.getPositionIndex(u)+r,u=u.parentNode,o=l,l=u.cloneNode(!1),s=u.childNodes,o&&(this.isListCell(l)&&this.isList(o)&&o.firstElementChild?(l.innerHTML=o.firstElementChild.innerHTML,T.removeItem(o.firstElementChild),o.children.length>0&&l.appendChild(o)):l.appendChild(o));s[a];)l.appendChild(s[a]);u.childNodes.length<=1&&(!u.firstChild||0===u.firstChild.textContent.length)&&(u.innerHTML="<br>");const d=u.parentNode;return c&&(u=u.nextSibling),l?(this.mergeSameTags(l,null,!1),this.mergeNestedTags(l,function(e){return this.isList(e)}.bind(this)),l.childNodes.length>0?d.insertBefore(l,u):l=u,this.isListCell(l)&&l.children&&this.isList(l.children[0])&&l.insertBefore(this.createElement("BR"),l.children[0]),0===i.childNodes.length&&this.removeItem(i),l):u},mergeSameTags:function(e,t,n){const i=this,l=t?t.length:0;let s=null;return l&&(s=this._w.Array.apply(null,new this._w.Array(l)).map(this._w.Number.prototype.valueOf,0)),function e(o,a,r){const c=o.childNodes;for(let u,d,h=0,p=c.length;h<p&&(u=c[h],d=c[h+1],u);h++)if(n&&i._isIgnoreNodeChange(u)||!n&&(i.isTable(u)||i.isListCell(u)||i.isFormatElement(u)&&!i.isFreeFormatElement(u)))(i.isTable(u)||i.isListCell(u))&&e(u,a+1,h);else{if(1===p&&o.nodeName===u.nodeName&&o.parentNode){if(l){let e,n,s,r,c;for(let d=0;d<l;d++)if(e=t[d],e&&e[a]===h){for(n=u,s=o,r=a,c=!0;r>=0;){if(i.getArrayIndex(s.childNodes,n)!==e[r]){c=!1;break}n=u.parentNode,s=n.parentNode,r--}c&&(e.splice(a,1),e[a]=h)}}i.copyTagAttributes(u,o),o.parentNode.insertBefore(u,o),i.removeItem(o)}if(!d){1===u.nodeType&&e(u,a+1,h);break}if(u.nodeName===d.nodeName&&i.isSameAttributes(u,d)&&u.href===d.href){const e=u.childNodes;let n=0;for(let t=0,i=e.length;t<i;t++)e[t].textContent.length>0&&n++;const o=u.lastChild,c=d.firstChild;let p=0;if(o&&c){const e=3===o.nodeType&&3===c.nodeType;p=o.textContent.length;let i=o.previousSibling;for(;i&&3===i.nodeType;)p+=i.textContent.length,i=i.previousSibling;if(n>0&&3===o.nodeType&&3===c.nodeType&&(o.textContent.length>0||c.textContent.length>0)&&n--,l){let i=null;for(let u=0;u<l;u++)if(i=t[u],i&&i[a]>h){if(a>0&&i[a-1]!==r)continue;i[a]-=1,i[a+1]>=0&&i[a]===h&&(i[a+1]+=n,e&&o&&3===o.nodeType&&c&&3===c.nodeType&&(s[u]+=p))}}}if(3===u.nodeType){if(p=u.textContent.length,u.textContent+=d.textContent,l){let e=null;for(let i=0;i<l;i++)if(e=t[i],e&&e[a]>h){if(a>0&&e[a-1]!==r)continue;e[a]-=1,e[a+1]>=0&&e[a]===h&&(e[a+1]+=n,s[i]+=p)}}}else u.innerHTML+=d.innerHTML;i.removeItem(d),h--}else 1===u.nodeType&&e(u,a+1,h)}}(e,0,0),s},mergeNestedTags:function(e,t){"string"==typeof t?t=function(e){return this.test(e.tagName)}.bind(new this._w.RegExp("^("+(t||".+")+")$","i")):"function"!=typeof t&&(t=function(){return!0}),function e(n){let i=n.children;if(1===i.length&&i[0].nodeName===n.nodeName&&t(n)){const e=i[0];for(i=e.children;i[0];)n.appendChild(i[0]);n.removeChild(e)}for(let t=0,i=n.children.length;t<i;t++)e(n.children[t])}(e)},removeEmptyNode:function(e,t,n){const i=this;t&&(t=i.getParentElement(t,(function(t){return e===t.parentElement}))),function n(l){if(i._notTextNode(l)||l===t||i.isNonEditable(l))return 0;if(l===e||!i.onlyZeroWidthSpace(l.textContent)||l.firstChild&&i.isBreak(l.firstChild)||l.querySelector(i._allowedEmptyNodeList)){const e=l.children;for(let t=0,l=e.length,s=0;t<l;t++)e[t+s]&&!i.isComponent(e[t+s])&&(s+=n(e[t+s]))}else if(l.parentNode)return l.parentNode.removeChild(l),-1;return 0}(e),0===e.childNodes.length&&(n?this.removeItem(e):e.innerHTML="<br>")},htmlRemoveWhiteSpace:function(e){return e?e.trim().replace(/<\/?(?!strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)[^>^<]+>\s+(?=<)/gi,(function(e){return e.replace(/\n/g,"").replace(/\s+/," ")})):""},htmlCompress:function(e){return e.replace(/\n/g,"").replace(/(>)(?:\s+)(<)/g,"$1$2")},sortByDepth:function(e,t){const n=t?1:-1,i=-1*n;e.sort(function(e,t){return this.isListCell(e)&&this.isListCell(t)?(e=this.getElementDepth(e))>(t=this.getElementDepth(t))?n:e<t?i:0:0}.bind(this))},escapeStringRegexp:function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")},_isExcludeSelectionElement:function(e){return!/FIGCAPTION/i.test(e.nodeName)&&(this.isComponent(e)||/FIGURE/i.test(e.nodeName))},_isIgnoreNodeChange:function(e){return e&&3!==e.nodeType&&(this.isNonEditable(e)||!this.isTextStyleElement(e))},_isMaintainedNode:function(e){return e&&3!==e.nodeType&&/^(a|label|code|summary)$/i.test("string"==typeof e?e:e.nodeName)},_isSizeNode:function(e){return e&&3!==e.nodeType&&this.isTextStyleElement(e)&&!!e.style.fontSize},_notTextNode:function(e){return e&&3!==e.nodeType&&(this.isComponent(e)||/^(br|input|select|canvas|img|iframe|audio|video)$/i.test("string"==typeof e?e:e.nodeName))},_disallowedTags:function(e){return/^(meta|script|link|style|[a-z]+\:[a-z]+)$/i.test(e.nodeName)},createTagsWhitelist:function(e){return new RegExp("<\\/?\\b(?!\\b"+(e||"").replace(/\|/g,"\\b|\\b")+"\\b)[^>]*>","gi")},createTagsBlacklist:function(e){return new RegExp("<\\/?\\b(?:\\b"+(e||"^").replace(/\|/g,"\\b|\\b")+"\\b)[^>]*>","gi")},_consistencyCheckOfHTML:function(e,t,n,i){const l=[],s=[],o=[],a=[],r=this.getListChildNodes(e,function(r){if(1!==r.nodeType)return this.isList(r.parentElement)&&l.push(r),!1;if(n.test(r.nodeName)||!t.test(r.nodeName)&&0===r.childNodes.length&&this.isNotCheckingNode(r))return l.push(r),!1;const c=!this.getParentElement(r,this.isNotCheckingNode);if(!this.isTable(r)&&!this.isListCell(r)&&!this.isAnchor(r)&&(this.isFormatElement(r)||this.isRangeFormatElement(r)||this.isTextStyleElement(r))&&0===r.childNodes.length&&c)return s.push(r),!1;if(this.isList(r.parentNode)&&!this.isList(r)&&!this.isListCell(r))return o.push(r),!1;if(this.isCell(r)){const e=r.firstElementChild;if(!this.isFormatElement(e)&&!this.isRangeFormatElement(e)&&!this.isComponent(e))return a.push(r),!1}if(c&&r.className){const e=new this._w.Array(r.classList).map(i).join(" ").trim();e?r.className=e:r.removeAttribute("class")}return r.parentNode!==e&&c&&(this.isListCell(r)&&!this.isList(r.parentNode)||(this.isFormatElement(r)||this.isComponent(r))&&!this.isRangeFormatElement(r.parentNode)&&!this.getParentElement(r,this.isComponent))}.bind(this));for(let e=0,t=l.length;e<t;e++)this.removeItem(l[e]);const c=[];for(let e,t,n=0,i=r.length;n<i;n++)if(e=r[n],t=e.parentNode,t&&t.parentNode)if(this.getParentElement(e,this.isListCell)){const n=e.childNodes;for(let l=n.length-1;i>=0;l--)t.insertBefore(e,n[l]);c.push(e)}else t.parentNode.insertBefore(e,t),c.push(t);for(let e,t=0,n=c.length;t<n;t++)e=c[t],this.onlyZeroWidthSpace(e.textContent.trim())&&this.removeItem(e);for(let e=0,t=s.length;e<t;e++)this.removeItem(s[e]);for(let e,t,n,i,l=0,s=o.length;l<s;l++)if(e=o[l],i=e.parentNode,i)if(t=this.createElement("LI"),this.isFormatElement(e)){for(n=e.childNodes;n[0];)t.appendChild(n[0]);i.insertBefore(t,e),this.removeItem(e)}else e=e.nextSibling,t.appendChild(o[l]),i.insertBefore(t,e);for(let e,t,n=0,i=a.length;n<i;n++)e=a[n],t=this.createElement("DIV"),t.innerHTML=0===e.textContent.trim().length&&0===e.children.length?"<br>":e.innerHTML,e.innerHTML=t.outerHTML},_setDefaultOptionStyle:function(e,t){let n="";e.height&&(n+="height:"+e.height+";"),e.minHeight&&(n+="min-height:"+e.minHeight+";"),e.maxHeight&&(n+="max-height:"+e.maxHeight+";"),e.position&&(n+="position:"+e.position+";"),e.width&&(n+="width:"+e.width+";"),e.minWidth&&(n+="min-width:"+e.minWidth+";"),e.maxWidth&&(n+="max-width:"+e.maxWidth+";");let i="",l="",s="";const o=(t=n+t).split(";");for(let t,n=0,a=o.length;n<a;n++)t=o[n].trim(),t&&(/^(min-|max-)?width\s*:/.test(t)||/^(z-index|position)\s*:/.test(t)?i+=t+";":/^(min-|max-)?height\s*:/.test(t)?(/^height/.test(t)&&"auto"===t.split(":")[1].trim()&&(e.height="auto"),l+=t+";"):s+=t+";");return{top:i,frame:l,editor:s}},_setIframeDocument:function(e,t){e.setAttribute("scrolling","auto"),e.contentDocument.head.innerHTML='<meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">'+this._setIframeCssTags(t),e.contentDocument.body.className=t._editableClass,e.contentDocument.body.setAttribute("contenteditable",!0),e.contentDocument.body.setAttribute("autocorrect","off")},_setIframeCssTags:function(e){const t=e.iframeCSSFileName,n=this._w.RegExp;let i="";for(let e,l=0,s=t.length;l<s;l++){if(e=[],/(^https?:\/\/)|(^data:text\/css,)/.test(t[l]))e.push(t[l]);else{const i=new n("(^|.*[\\/])"+t[l]+"(\\..+)?\\.css(?:\\?.*|;.*)?$","i");for(let t,n=document.getElementsByTagName("link"),l=0,s=n.length;l<s;l++)t=n[l].href.match(i),t&&e.push(t[0])}if(!e||0===e.length)throw'[SUNEDITOR.constructor.iframe.fail] The suneditor CSS files installation path could not be automatically detected. Please set the option property "iframeCSSFileName" before creating editor instances.';for(let t=0,n=e.length;t<n;t++)i+='<link href="'+e[t]+'" rel="stylesheet">'}return i+("auto"===e.height?"<style>\n/** Iframe height auto */\nbody{height: min-content; overflow: hidden;}\n</style>":"")}};var k=T,L={init:function(e,t){"object"!=typeof t&&(t={});const n=document;this._initOptions(e,t);const i=n.createElement("DIV");i.className="sun-editor"+(t.rtl?" se-rtl":""),e.id&&(i.id="suneditor_"+e.id);const l=n.createElement("DIV");l.className="se-container";const s=this._createToolBar(n,t.buttonList,t.plugins,t),o=s.element.cloneNode(!1);o.className+=" se-toolbar-shadow",s.element.style.visibility="hidden",s.pluginCallButtons.math&&this._checkKatexMath(t.katex);const a=n.createElement("DIV");a.className="se-arrow";const r=n.createElement("DIV");r.className="se-toolbar-sticky-dummy";const c=n.createElement("DIV");c.className="se-wrapper";const u=this._initElements(t,i,s.element,a),d=u.bottomBar,h=u.wysiwygFrame,p=u.placeholder;let g=u.codeView;const m=d.resizingBar,f=d.navigation,_=d.charWrapper,b=d.charCounter,v=n.createElement("DIV");v.className="se-loading-box sun-editor-common",v.innerHTML='<div class="se-loading-effect"></div>';const y=n.createElement("DIV");y.className="se-line-breaker",y.innerHTML='<button class="se-btn">'+t.icons.line_break+"</button>";const C=n.createElement("DIV");C.className+="se-line-breaker-component";const w=C.cloneNode(!0);C.innerHTML=w.innerHTML=t.icons.line_break;const E=n.createElement("DIV");E.className="se-resizing-back";const x=n.createElement("INPUT");x.tabIndex=-1,x.style.cssText="position: absolute !important; top: -10000px !important; display: block !important; width: 0 !important; height: 0 !important; margin: 0 !important; padding: 0 !important;";const S=t.toolbarContainer;S&&(S.appendChild(s.element),S.appendChild(o));const A=t.resizingBarContainer;return m&&A&&A.appendChild(m),c.appendChild(g),p&&c.appendChild(p),S||(l.appendChild(s.element),l.appendChild(o)),l.appendChild(r),l.appendChild(c),l.appendChild(E),l.appendChild(v),l.appendChild(y),l.appendChild(C),l.appendChild(w),l.appendChild(x),m&&!A&&l.appendChild(m),i.appendChild(l),g=this._checkCodeMirror(t,g),{constructed:{_top:i,_relative:l,_toolBar:s.element,_toolbarShadow:o,_menuTray:s._menuTray,_editorArea:c,_wysiwygArea:h,_codeArea:g,_placeholder:p,_resizingBar:m,_navigation:f,_charWrapper:_,_charCounter:b,_loading:v,_lineBreaker:y,_lineBreaker_t:C,_lineBreaker_b:w,_resizeBack:E,_stickyDummy:r,_arrow:a,_focusTemp:x},options:t,plugins:s.plugins,pluginCallButtons:s.pluginCallButtons,_responsiveButtons:s.responsiveButtons}},_checkCodeMirror:function(e,t){if(e.codeMirror){const n=[{mode:"htmlmixed",htmlMode:!0,lineNumbers:!0,lineWrapping:!0},e.codeMirror.options||{}].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{});"auto"===e.height&&(n.viewportMargin=1/0,n.height="auto");const i=e.codeMirror.src.fromTextArea(t,n);i.display.wrapper.style.cssText=t.style.cssText,e.codeMirrorEditor=i,(t=i.display.wrapper).className+=" se-wrapper-code-mirror"}return t},_checkKatexMath:function(e){if(!e)throw Error('[SUNEDITOR.create.fail] To use the math button you need to add a "katex" object to the options.');const t=[{throwOnError:!1},e.options||{}].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{});e.options=t},_setOptions:function(e,t,n){this._initOptions(t.element.originElement,e);const i=t.element,l=i.relative,s=i.editorArea,o=e.toolbarContainer&&e.toolbarContainer!==n.toolbarContainer,a=e.lang!==n.lang||e.buttonList!==n.buttonList||e.mode!==n.mode||o,r=this._createToolBar(document,a?e.buttonList:n.buttonList,e.plugins,e);r.pluginCallButtons.math&&this._checkKatexMath(e.katex);const c=document.createElement("DIV");c.className="se-arrow",a&&(r.element.style.visibility="hidden",o?(e.toolbarContainer.appendChild(r.element),i.toolbar.parentElement.removeChild(i.toolbar)):i.toolbar.parentElement.replaceChild(r.element,i.toolbar),i.toolbar=r.element,i._menuTray=r._menuTray,i._arrow=c);const u=this._initElements(e,i.topArea,a?r.element:i.toolbar,c),d=u.bottomBar,h=u.wysiwygFrame,p=u.placeholder;let g=u.codeView;return i.resizingBar&&k.removeItem(i.resizingBar),d.resizingBar&&(e.resizingBarContainer&&e.resizingBarContainer!==n.resizingBarContainer?e.resizingBarContainer.appendChild(d.resizingBar):l.appendChild(d.resizingBar)),s.innerHTML="",s.appendChild(g),p&&s.appendChild(p),g=this._checkCodeMirror(e,g),i.resizingBar=d.resizingBar,i.navigation=d.navigation,i.charWrapper=d.charWrapper,i.charCounter=d.charCounter,i.wysiwygFrame=h,i.code=g,i.placeholder=p,e.rtl?k.addClass(i.topArea,"se-rtl"):k.removeClass(i.topArea,"se-rtl"),{callButtons:r.pluginCallButtons,plugins:r.plugins,toolbar:r}},_initElements:function(e,t,n,i){t.style.cssText=e._editorStyles.top,/inline/i.test(e.mode)?(n.className+=" se-toolbar-inline",n.style.width=e.toolbarWidth):/balloon/i.test(e.mode)&&(n.className+=" se-toolbar-balloon",n.style.width=e.toolbarWidth,n.appendChild(i));const l=document.createElement(e.iframe?"IFRAME":"DIV");if(l.className="se-wrapper-inner se-wrapper-wysiwyg",e.iframe)l.allowFullscreen=!0,l.frameBorder=0,l.style.cssText=e._editorStyles.frame,l.className+=e.className;else{l.setAttribute("contenteditable",!0),l.setAttribute("autocorrect","off"),l.setAttribute("scrolling","auto");for(let t in e.iframeAttributes)l.setAttribute(t,e.iframeAttributes[t]);l.className+=" "+e._editableClass,l.style.cssText=e._editorStyles.frame+e._editorStyles.editor,l.className+=e.className}const s=document.createElement("TEXTAREA");s.className="se-wrapper-inner se-wrapper-code"+e.className,s.style.cssText=e._editorStyles.frame,s.style.display="none","auto"===e.height&&(s.style.overflow="hidden");let o=null,a=null,r=null,c=null;if(e.resizingBar&&(o=document.createElement("DIV"),o.className="se-resizing-bar sun-editor-common",a=document.createElement("DIV"),a.className="se-navigation sun-editor-common",o.appendChild(a),e.charCounter)){if(r=document.createElement("DIV"),r.className="se-char-counter-wrapper",e.charCounterLabel){const t=document.createElement("SPAN");t.className="se-char-label",t.textContent=e.charCounterLabel,r.appendChild(t)}if(c=document.createElement("SPAN"),c.className="se-char-counter",c.textContent="0",r.appendChild(c),e.maxCharCount>0){const t=document.createElement("SPAN");t.textContent=" / "+e.maxCharCount,r.appendChild(t)}o.appendChild(r)}let u=null;return e.placeholder&&(u=document.createElement("SPAN"),u.className="se-placeholder",u.innerText=e.placeholder),{bottomBar:{resizingBar:o,navigation:a,charWrapper:r,charCounter:c},wysiwygFrame:l,codeView:s,placeholder:u}},_initOptions:function(e,t){const n={};if(t.plugins){const e=t.plugins,i=e.length?e:Object.keys(e).map((function(t){return e[t]}));for(let e,t=0,l=i.length;t<l;t++)e=i[t].default||i[t],n[e.name]=e}t.plugins=n,t.strictMode=!1!==t.strictMode,t.lang=t.lang||N.a,t.value="string"==typeof t.value?t.value:null,t.allowedClassNames=new k._w.RegExp((t.allowedClassNames&&"string"==typeof t.allowedClassNames?t.allowedClassNames+"|":"")+"^__se__|se-|katex"),t.historyStackDelayTime="number"==typeof t.historyStackDelayTime?t.historyStackDelayTime:400,t.frameAttrbutes=t.frameAttrbutes||{},t.defaultTag="string"==typeof t.defaultTag&&t.defaultTag.length>0?t.defaultTag:"p";const i=t.textTags=[{bold:"STRONG",underline:"U",italic:"EM",strike:"DEL",sub:"SUB",sup:"SUP"},t.textTags||{}].reduce((function(e,t){for(let n in t)e[n]=t[n];return e}),{});t._textTagsMap={strong:i.bold.toLowerCase(),b:i.bold.toLowerCase(),u:i.underline.toLowerCase(),ins:i.underline.toLowerCase(),em:i.italic.toLowerCase(),i:i.italic.toLowerCase(),del:i.strike.toLowerCase(),strike:i.strike.toLowerCase(),s:i.strike.toLowerCase(),sub:i.sub.toLowerCase(),sup:i.sup.toLowerCase()},t._defaultCommand={bold:t.textTags.bold,underline:t.textTags.underline,italic:t.textTags.italic,strike:t.textTags.strike,subscript:t.textTags.sub,superscript:t.textTags.sup},t.__allowedScriptTag=!0===t.__allowedScriptTag;t.tagsBlacklist=t.tagsBlacklist||"",t._defaultTagsWhitelist=("string"==typeof t._defaultTagsWhitelist?t._defaultTagsWhitelist:"br|p|div|pre|blockquote|h1|h2|h3|h4|h5|h6|ol|ul|li|hr|figure|figcaption|img|iframe|audio|video|source|table|thead|tbody|tr|th|td|a|b|strong|var|i|em|u|ins|s|span|strike|del|sub|sup|code|svg|path|details|summary")+(t.__allowedScriptTag?"|script":""),t._editorTagsWhitelist="*"===t.addTagsWhitelist?"*":this._setWhitelist(t._defaultTagsWhitelist+("string"==typeof t.addTagsWhitelist&&t.addTagsWhitelist.length>0?"|"+t.addTagsWhitelist:""),t.tagsBlacklist),t.pasteTagsBlacklist=t.tagsBlacklist+(t.tagsBlacklist&&t.pasteTagsBlacklist?"|"+t.pasteTagsBlacklist:t.pasteTagsBlacklist||""),t.pasteTagsWhitelist="*"===t.pasteTagsWhitelist?"*":this._setWhitelist("string"==typeof t.pasteTagsWhitelist?t.pasteTagsWhitelist:t._editorTagsWhitelist,t.pasteTagsBlacklist),t.attributesWhitelist=t.attributesWhitelist&&"object"==typeof t.attributesWhitelist?t.attributesWhitelist:null,t.attributesBlacklist=t.attributesBlacklist&&"object"==typeof t.attributesBlacklist?t.attributesBlacklist:null,t.mode=t.mode||"classic",t.rtl=!!t.rtl,t.lineAttrReset=["id"].concat(t.lineAttrReset&&"string"==typeof t.lineAttrReset?t.lineAttrReset.toLowerCase().split("|"):[]),t._editableClass="sun-editor-editable"+(t.rtl?" se-rtl":""),t._printClass="string"==typeof t._printClass?t._printClass:null,t.toolbarWidth=t.toolbarWidth?k.isNumber(t.toolbarWidth)?t.toolbarWidth+"px":t.toolbarWidth:"auto",t.toolbarContainer="string"==typeof t.toolbarContainer?document.querySelector(t.toolbarContainer):t.toolbarContainer,t.stickyToolbar=/balloon/i.test(t.mode)||t.toolbarContainer?-1:void 0===t.stickyToolbar?0:/^\d+/.test(t.stickyToolbar)?k.getNumber(t.stickyToolbar,0):-1,t.hideToolbar=!!t.hideToolbar,t.fullScreenOffset=void 0===t.fullScreenOffset?0:/^\d+/.test(t.fullScreenOffset)?k.getNumber(t.fullScreenOffset,0):0,t.fullPage=!!t.fullPage,t.iframe=t.fullPage||!!t.iframe,t.iframeAttributes=t.iframeAttributes||{},t.iframeCSSFileName=t.iframe?"string"==typeof t.iframeCSSFileName?[t.iframeCSSFileName]:t.iframeCSSFileName||["suneditor"]:null,t.previewTemplate="string"==typeof t.previewTemplate?t.previewTemplate:null,t.printTemplate="string"==typeof t.printTemplate?t.printTemplate:null,t.codeMirror=t.codeMirror?t.codeMirror.src?t.codeMirror:{src:t.codeMirror}:null,t.katex=t.katex?t.katex.src?t.katex:{src:t.katex}:null,t.mathFontSize=t.mathFontSize?t.mathFontSize:[{text:"1",value:"1em"},{text:"1.5",value:"1.5em"},{text:"2",value:"2em"},{text:"2.5",value:"2.5em"}],t.position="string"==typeof t.position?t.position:null,t.display=t.display||("none"!==e.style.display&&e.style.display?e.style.display:"block"),t.popupDisplay=t.popupDisplay||"full",t.resizingBar=void 0===t.resizingBar?!/inline|balloon/i.test(t.mode):t.resizingBar,t.showPathLabel=!!t.resizingBar&&("boolean"!=typeof t.showPathLabel||t.showPathLabel),t.resizeEnable=void 0===t.resizeEnable||!!t.resizeEnable,t.resizingBarContainer="string"==typeof t.resizingBarContainer?document.querySelector(t.resizingBarContainer):t.resizingBarContainer,t.charCounter=t.maxCharCount>0||"boolean"==typeof t.charCounter&&t.charCounter,t.charCounterType="string"==typeof t.charCounterType?t.charCounterType:"char",t.charCounterLabel="string"==typeof t.charCounterLabel?t.charCounterLabel.trim():null,t.maxCharCount=k.isNumber(t.maxCharCount)&&t.maxCharCount>-1?1*t.maxCharCount:null,t.width=t.width?k.isNumber(t.width)?t.width+"px":t.width:e.clientWidth?e.clientWidth+"px":"100%",t.minWidth=(k.isNumber(t.minWidth)?t.minWidth+"px":t.minWidth)||"",t.maxWidth=(k.isNumber(t.maxWidth)?t.maxWidth+"px":t.maxWidth)||"",t.height=t.height?k.isNumber(t.height)?t.height+"px":t.height:e.clientHeight?e.clientHeight+"px":"auto",t.minHeight=(k.isNumber(t.minHeight)?t.minHeight+"px":t.minHeight)||"",t.maxHeight=(k.isNumber(t.maxHeight)?t.maxHeight+"px":t.maxHeight)||"",t.className="string"==typeof t.className&&t.className.length>0?" "+t.className:"",t.defaultStyle="string"==typeof t.defaultStyle?t.defaultStyle:"",t.font=t.font?t.font:["Arial","Comic Sans MS","Courier New","Impact","Georgia","tahoma","Trebuchet MS","Verdana"],t.fontSize=t.fontSize?t.fontSize:null,t.formats=t.formats?t.formats:null,t.colorList=t.colorList?t.colorList:null,t.lineHeights=t.lineHeights?t.lineHeights:null,t.paragraphStyles=t.paragraphStyles?t.paragraphStyles:null,t.textStyles=t.textStyles?t.textStyles:null,t.fontSizeUnit="string"==typeof t.fontSizeUnit&&t.fontSizeUnit.trim().toLowerCase()||"px",t.alignItems="object"==typeof t.alignItems?t.alignItems:t.rtl?["right","center","left","justify"]:["left","center","right","justify"],t.imageResizing=void 0===t.imageResizing||t.imageResizing,t.imageHeightShow=void 0===t.imageHeightShow||!!t.imageHeightShow,t.imageAlignShow=void 0===t.imageAlignShow||!!t.imageAlignShow,t.imageWidth=t.imageWidth?k.isNumber(t.imageWidth)?t.imageWidth+"px":t.imageWidth:"auto",t.imageHeight=t.imageHeight?k.isNumber(t.imageHeight)?t.imageHeight+"px":t.imageHeight:"auto",t.imageSizeOnlyPercentage=!!t.imageSizeOnlyPercentage,t._imageSizeUnit=t.imageSizeOnlyPercentage?"%":"px",t.imageRotation=void 0!==t.imageRotation?t.imageRotation:!(t.imageSizeOnlyPercentage||!t.imageHeightShow),t.imageFileInput=void 0===t.imageFileInput||t.imageFileInput,t.imageUrlInput=void 0===t.imageUrlInput||!t.imageFileInput||t.imageUrlInput,t.imageUploadHeader=t.imageUploadHeader||null,t.imageUploadUrl="string"==typeof t.imageUploadUrl?t.imageUploadUrl:null,t.imageUploadSizeLimit=/\d+/.test(t.imageUploadSizeLimit)?k.getNumber(t.imageUploadSizeLimit,0):null,t.imageMultipleFile=!!t.imageMultipleFile,t.imageAccept="string"!=typeof t.imageAccept||"*"===t.imageAccept.trim()?"image/*":t.imageAccept.trim()||"image/*",t.imageGalleryUrl="string"==typeof t.imageGalleryUrl?t.imageGalleryUrl:null,t.imageGalleryHeader=t.imageGalleryHeader||null,t.videoResizing=void 0===t.videoResizing||t.videoResizing,t.videoHeightShow=void 0===t.videoHeightShow||!!t.videoHeightShow,t.videoAlignShow=void 0===t.videoAlignShow||!!t.videoAlignShow,t.videoRatioShow=void 0===t.videoRatioShow||!!t.videoRatioShow,t.videoWidth=t.videoWidth&&k.getNumber(t.videoWidth,0)?k.isNumber(t.videoWidth)?t.videoWidth+"px":t.videoWidth:"",t.videoHeight=t.videoHeight&&k.getNumber(t.videoHeight,0)?k.isNumber(t.videoHeight)?t.videoHeight+"px":t.videoHeight:"",t.videoSizeOnlyPercentage=!!t.videoSizeOnlyPercentage,t._videoSizeUnit=t.videoSizeOnlyPercentage?"%":"px",t.videoRotation=void 0!==t.videoRotation?t.videoRotation:!(t.videoSizeOnlyPercentage||!t.videoHeightShow),t.videoRatio=k.getNumber(t.videoRatio,4)||.5625,t.videoRatioList=t.videoRatioList?t.videoRatioList:null,t.youtubeQuery=(t.youtubeQuery||"").replace("?",""),t.videoFileInput=!!t.videoFileInput,t.videoUrlInput=void 0===t.videoUrlInput||!t.videoFileInput||t.videoUrlInput,t.videoUploadHeader=t.videoUploadHeader||null,t.videoUploadUrl="string"==typeof t.videoUploadUrl?t.videoUploadUrl:null,t.videoUploadSizeLimit=/\d+/.test(t.videoUploadSizeLimit)?k.getNumber(t.videoUploadSizeLimit,0):null,t.videoMultipleFile=!!t.videoMultipleFile,t.videoTagAttrs=t.videoTagAttrs||null,t.videoIframeAttrs=t.videoIframeAttrs||null,t.videoAccept="string"!=typeof t.videoAccept||"*"===t.videoAccept.trim()?"video/*":t.videoAccept.trim()||"video/*",t.audioWidth=t.audioWidth?k.isNumber(t.audioWidth)?t.audioWidth+"px":t.audioWidth:"",t.audioHeight=t.audioHeight?k.isNumber(t.audioHeight)?t.audioHeight+"px":t.audioHeight:"",t.audioFileInput=!!t.audioFileInput,t.audioUrlInput=void 0===t.audioUrlInput||!t.audioFileInput||t.audioUrlInput,t.audioUploadHeader=t.audioUploadHeader||null,t.audioUploadUrl="string"==typeof t.audioUploadUrl?t.audioUploadUrl:null,t.audioUploadSizeLimit=/\d+/.test(t.audioUploadSizeLimit)?k.getNumber(t.audioUploadSizeLimit,0):null,t.audioMultipleFile=!!t.audioMultipleFile,t.audioTagAttrs=t.audioTagAttrs||null,t.audioAccept="string"!=typeof t.audioAccept||"*"===t.audioAccept.trim()?"audio/*":t.audioAccept.trim()||"audio/*",t.tableCellControllerPosition="string"==typeof t.tableCellControllerPosition?t.tableCellControllerPosition.toLowerCase():"cell",t.linkTargetNewWindow=!!t.linkTargetNewWindow,t.linkProtocol="string"==typeof t.linkProtocol?t.linkProtocol:null,t.linkRel=Array.isArray(t.linkRel)?t.linkRel:[],t.linkRelDefault=t.linkRelDefault||{},t.tabDisable=!!t.tabDisable,t.shortcutsDisable=Array.isArray(t.shortcutsDisable)?t.shortcutsDisable:[],t.shortcutsHint=void 0===t.shortcutsHint||!!t.shortcutsHint,t.callBackSave=t.callBackSave?t.callBackSave:null,t.templates=t.templates?t.templates:null,t.placeholder="string"==typeof t.placeholder?t.placeholder:null,t.mediaAutoSelect=void 0===t.mediaAutoSelect||!!t.mediaAutoSelect,t.buttonList=t.buttonList?t.buttonList:[["undo","redo"],["bold","underline","italic","strike","subscript","superscript"],["removeFormat"],["outdent","indent"],["fullScreen","showBlocks","codeView"],["preview","print"]],t.rtl&&(t.buttonList=t.buttonList.reverse()),t.icons=t.icons&&"object"==typeof t.icons?[S,t.icons].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{}):S,t.icons=t.rtl?[t.icons,t.icons.rtl].reduce((function(e,t){for(let n in t)k.hasOwn(t,n)&&(e[n]=t[n]);return e}),{}):t.icons,t.__listCommonStyle=t.__listCommonStyle||["fontSize","color","fontFamily","fontWeight","fontStyle"],t._editorStyles=k._setDefaultOptionStyle(t,t.defaultStyle)},_setWhitelist:function(e,t){if("string"!=typeof t)return e;t=t.split("|"),e=e.split("|");for(let n,i=0,l=t.length;i<l;i++)n=e.indexOf(t[i]),n>-1&&e.splice(n,1);return e.join("|")},_defaultButtons:function(e){const t=e.icons,n=e.lang,i=k.isOSX_IOS?"⌘":"CTRL",l=k.isOSX_IOS?"⇧":"+SHIFT",s=e.shortcutsHint?e.shortcutsDisable:["bold","strike","underline","italic","undo","indent","save"],o=e.rtl?["[","]"]:["]","["],a=e.rtl?[t.outdent,t.indent]:[t.indent,t.outdent];return{bold:["",n.toolbar.bold+'<span class="se-shortcut">'+(s.indexOf("bold")>-1?"":i+'+<span class="se-shortcut-key">B</span>')+"</span>","bold","",t.bold],underline:["",n.toolbar.underline+'<span class="se-shortcut">'+(s.indexOf("underline")>-1?"":i+'+<span class="se-shortcut-key">U</span>')+"</span>","underline","",t.underline],italic:["",n.toolbar.italic+'<span class="se-shortcut">'+(s.indexOf("italic")>-1?"":i+'+<span class="se-shortcut-key">I</span>')+"</span>","italic","",t.italic],strike:["",n.toolbar.strike+'<span class="se-shortcut">'+(s.indexOf("strike")>-1?"":i+l+'+<span class="se-shortcut-key">S</span>')+"</span>","strike","",t.strike],subscript:["",n.toolbar.subscript,"SUB","",t.subscript],superscript:["",n.toolbar.superscript,"SUP","",t.superscript],removeFormat:["",n.toolbar.removeFormat,"removeFormat","",t.erase],indent:["",n.toolbar.indent+'<span class="se-shortcut">'+(s.indexOf("indent")>-1?"":i+'+<span class="se-shortcut-key">'+o[0]+"</span>")+"</span>","indent","",a[0]],outdent:["",n.toolbar.outdent+'<span class="se-shortcut">'+(s.indexOf("indent")>-1?"":i+'+<span class="se-shortcut-key">'+o[1]+"</span>")+"</span>","outdent","",a[1]],fullScreen:["se-code-view-enabled se-resizing-enabled",n.toolbar.fullScreen,"fullScreen","",t.expansion],showBlocks:["",n.toolbar.showBlocks,"showBlocks","",t.show_blocks],codeView:["se-code-view-enabled se-resizing-enabled",n.toolbar.codeView,"codeView","",t.code_view],undo:["",n.toolbar.undo+'<span class="se-shortcut">'+(s.indexOf("undo")>-1?"":i+'+<span class="se-shortcut-key">Z</span>')+"</span>","undo","",t.undo],redo:["",n.toolbar.redo+'<span class="se-shortcut">'+(s.indexOf("undo")>-1?"":i+'+<span class="se-shortcut-key">Y</span> / '+i+l+'+<span class="se-shortcut-key">Z</span>')+"</span>","redo","",t.redo],preview:["se-resizing-enabled",n.toolbar.preview,"preview","",t.preview],print:["se-resizing-enabled",n.toolbar.print,"print","",t.print],dir:["",n.toolbar[e.rtl?"dir_ltr":"dir_rtl"],"dir","",t[e.rtl?"dir_ltr":"dir_rtl"]],dir_ltr:["",n.toolbar.dir_ltr,"dir_ltr","",t.dir_ltr],dir_rtl:["",n.toolbar.dir_rtl,"dir_rtl","",t.dir_rtl],save:["se-resizing-enabled",n.toolbar.save+'<span class="se-shortcut">'+(s.indexOf("save")>-1?"":i+'+<span class="se-shortcut-key">S</span>')+"</span>","save","",t.save],blockquote:["",n.toolbar.tag_blockquote,"blockquote","command",t.blockquote],font:["se-btn-select se-btn-tool-font",n.toolbar.font,"font","submenu",'<span class="txt">'+n.toolbar.font+"</span>"+t.arrow_down],formatBlock:["se-btn-select se-btn-tool-format",n.toolbar.formats,"formatBlock","submenu",'<span class="txt">'+n.toolbar.formats+"</span>"+t.arrow_down],fontSize:["se-btn-select se-btn-tool-size",n.toolbar.fontSize,"fontSize","submenu",'<span class="txt">'+n.toolbar.fontSize+"</span>"+t.arrow_down],fontColor:["",n.toolbar.fontColor,"fontColor","submenu",t.font_color],hiliteColor:["",n.toolbar.hiliteColor,"hiliteColor","submenu",t.highlight_color],align:["se-btn-align",n.toolbar.align,"align","submenu",e.rtl?t.align_right:t.align_left],list:["",n.toolbar.list,"list","submenu",t.list_number],horizontalRule:["btn_line",n.toolbar.horizontalRule,"horizontalRule","submenu",t.horizontal_rule],table:["",n.toolbar.table,"table","submenu",t.table],lineHeight:["",n.toolbar.lineHeight,"lineHeight","submenu",t.line_height],template:["",n.toolbar.template,"template","submenu",t.template],paragraphStyle:["",n.toolbar.paragraphStyle,"paragraphStyle","submenu",t.paragraph_style],textStyle:["",n.toolbar.textStyle,"textStyle","submenu",t.text_style],link:["",n.toolbar.link,"link","dialog",t.link],image:["",n.toolbar.image,"image","dialog",t.image],video:["",n.toolbar.video,"video","dialog",t.video],audio:["",n.toolbar.audio,"audio","dialog",t.audio],math:["",n.toolbar.math,"math","dialog",t.math],imageGallery:["",n.toolbar.imageGallery,"imageGallery","fileBrowser",t.image_gallery]}},_createModuleGroup:function(){const e=k.createElement("DIV");e.className="se-btn-module se-btn-module-border";const t=k.createElement("UL");return t.className="se-menu-list",e.appendChild(t),{div:e,ul:t}},_createButton:function(e,t,n,i,l,s,o){const a=k.createElement("LI"),r=k.createElement("BUTTON"),c=t||n;return r.setAttribute("type","button"),r.setAttribute("class","se-btn"+(e?" "+e:"")+" se-tooltip"),r.setAttribute("data-command",n),r.setAttribute("data-display",i),r.setAttribute("aria-label",c.replace(/<span .+<\/span>/,"")),r.setAttribute("tabindex","-1"),l||(l='<span class="se-icon-text">!</span>'),/^default\./i.test(l)&&(l=o[l.replace(/^default\./i,"")]),/^text\./i.test(l)&&(l=l.replace(/^text\./i,""),r.className+=" se-btn-more-text"),l+='<span class="se-tooltip-inner"><span class="se-tooltip-text">'+c+"</span></span>",s&&r.setAttribute("disabled",!0),r.innerHTML=l,a.appendChild(r),{li:a,button:r}},_createToolBar:function(e,t,n,i){const l=e.createElement("DIV");l.className="se-toolbar-separator-vertical";const s=e.createElement("DIV");s.className="se-toolbar sun-editor-common";const o=e.createElement("DIV");o.className="se-btn-tray",s.appendChild(o),t=JSON.parse(JSON.stringify(t));const a=i.icons,r=this._defaultButtons(i),c={},u=[];let d=null,h=null,p=null,g=null,m="",f=!1;const _=k.createElement("DIV");_.className="se-toolbar-more-layer";e:for(let i,s,b,v,y,C=0;C<t.length;C++)if(i=!1,y="",v=t[C],p=this._createModuleGroup(),"object"==typeof v){for(let e,l=0;l<v.length;l++){if(h=v[l],e=!1,/^\%\d+/.test(h)&&0===l){v[0]=h.replace(/[^\d]/g,""),u.push(v),t.splice(C--,1);continue e}if("object"==typeof h)"function"==typeof h.add?(m=h.name,d=r[m],n[m]=h):(m=h.name,d=[h.buttonClass,h.title,h.name,h.dataDisplay,h.innerHTML,h._disabled]);else{if(/^\-/.test(h)){y=h.substr(1),p.div.className+=" module-float-"+y;continue}if(/^\#/.test(h)){"fix"===h.substr(1)&&(p.ul.className+=" se-menu-dir-fix");continue}if(/^\:/.test(h)){e=!0;const t=h.match(/^\:([^\-]+)\-([^\-]+)\-([^\-]+)/);b="__se__"+t[1].trim();d=["se-btn-more",t[2].trim(),b,"MORE",t[3].trim()]}else d=r[h];if(m=h,!d){const e=n[m];if(!e)throw Error("[SUNEDITOR.create.toolbar.fail] The button name of a plugin that does not exist. ["+m+"]");d=[e.buttonClass,e.title,e.name,e.display,e.innerHTML,e._disabled]}}g=this._createButton(d[0],d[1],d[2],d[3],d[4],d[5],a),(i?s:p.ul).appendChild(g.li),n[m]&&(c[m]=g.button),e&&(i=!0,s=k.createElement("DIV"),s.className="se-more-layer "+b,s.innerHTML='<div class="se-more-form"><ul class="se-menu-list"'+(y?' style="float: '+y+';"':"")+"></ul></div>",_.appendChild(s),s=s.firstElementChild.firstElementChild)}if(f){const e=l.cloneNode(!1);o.appendChild(e)}o.appendChild(p.div),f=!0}else if(/^\/$/.test(v)){const t=e.createElement("DIV");t.className="se-btn-module-enter",o.appendChild(t),f=!1}switch(o.children.length){case 0:o.style.display="none";break;case 1:k.removeClass(o.firstElementChild,"se-btn-module-border");break;default:if(i.rtl){const e=l.cloneNode(!1);e.style.float=o.lastElementChild.style.float,o.appendChild(e)}}u.length>0&&u.unshift(t),_.children.length>0&&o.appendChild(_);const b=e.createElement("DIV");b.className="se-menu-tray",s.appendChild(b);const v=e.createElement("DIV");return v.className="se-toolbar-cover",s.appendChild(v),i.hideToolbar&&(s.style.display="none"),{element:s,plugins:n,pluginCallButtons:c,responsiveButtons:u,_menuTray:b,_buttonTray:o}}};var B=function(e,t,n){return{element:{originElement:e,topArea:t._top,relative:t._relative,toolbar:t._toolBar,_toolbarShadow:t._toolbarShadow,_buttonTray:t._toolBar.querySelector(".se-btn-tray"),_menuTray:t._menuTray,resizingBar:t._resizingBar,navigation:t._navigation,charWrapper:t._charWrapper,charCounter:t._charCounter,editorArea:t._editorArea,wysiwygFrame:t._wysiwygArea,wysiwyg:t._wysiwygArea,code:t._codeArea,placeholder:t._placeholder,loading:t._loading,lineBreaker:t._lineBreaker,lineBreaker_t:t._lineBreaker_t,lineBreaker_b:t._lineBreaker_b,resizeBackground:t._resizeBack,_stickyDummy:t._stickyDummy,_arrow:t._arrow,_focusTemp:t._focusTemp},tool:{cover:t._toolBar.querySelector(".se-toolbar-cover"),bold:t._toolBar.querySelector('[data-command="bold"]'),underline:t._toolBar.querySelector('[data-command="underline"]'),italic:t._toolBar.querySelector('[data-command="italic"]'),strike:t._toolBar.querySelector('[data-command="strike"]'),sub:t._toolBar.querySelector('[data-command="SUB"]'),sup:t._toolBar.querySelector('[data-command="SUP"]'),undo:t._toolBar.querySelector('[data-command="undo"]'),redo:t._toolBar.querySelector('[data-command="redo"]'),save:t._toolBar.querySelector('[data-command="save"]'),outdent:t._toolBar.querySelector('[data-command="outdent"]'),indent:t._toolBar.querySelector('[data-command="indent"]'),fullScreen:t._toolBar.querySelector('[data-command="fullScreen"]'),showBlocks:t._toolBar.querySelector('[data-command="showBlocks"]'),codeView:t._toolBar.querySelector('[data-command="codeView"]'),dir:t._toolBar.querySelector('[data-command="dir"]'),dir_ltr:t._toolBar.querySelector('[data-command="dir_ltr"]'),dir_rtl:t._toolBar.querySelector('[data-command="dir_rtl"]')},options:n,option:n}},I={name:"notice",add:function(e){const t=e.context;t.notice={};let n=e.util.createElement("DIV"),i=e.util.createElement("SPAN"),l=e.util.createElement("BUTTON");n.className="se-notice",l.className="close",l.setAttribute("aria-label","Close"),l.setAttribute("title",e.lang.dialogBox.close),l.innerHTML=e.icons.cancel,n.appendChild(i),n.appendChild(l),t.notice.modal=n,t.notice.message=i,l.addEventListener("click",this.onClick_cancel.bind(e)),t.element.editorArea.appendChild(n),n=null},onClick_cancel:function(e){e.preventDefault(),e.stopPropagation(),this.plugins.notice.close.call(this)},open:function(e){this.context.notice.message.textContent=e,this.context.notice.modal.style.display="block"},close:function(){this.context.notice.modal.style.display="none"}},R=n("bhjb"),M=n.n(R),O=n("M55E"),z=n.n(O),D={init:function(e){return{create:function(t,n){return this.create(t,n,e)}.bind(this)}},create:function(e,t,n){k._propertiesInit(),"object"!=typeof t&&(t={}),n&&(t=[n,t].reduce((function(e,t){for(let n in t)if(k.hasOwn(t,n))if("plugins"===n&&t[n]&&e[n]){let i=e[n],l=t[n];i=i.length?i:Object.keys(i).map((function(e){return i[e]})),l=l.length?l:Object.keys(l).map((function(e){return l[e]})),e[n]=l.filter((function(e){return-1===i.indexOf(e)})).concat(i)}else e[n]=t[n];return e}),{}));const i="string"==typeof e?document.getElementById(e):e;if(!i){if("string"==typeof e)throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:"'+e+'")');throw Error("[SUNEDITOR.create.fail] suneditor requires textarea's element or id value")}const l=L.init(i,t);if(l.constructed._top.id&&document.getElementById(l.constructed._top.id))throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:"'+l.constructed._top.id+'")');return function(e,t,n,i,l,s){const o=e.element.originElement.ownerDocument||document,a=o.defaultView||window,r=k,c=l.icons,u=new z.a.Converter({emoji:!0,encodeEmails:!0,omitExtraWLInCodeBlocks:!0,openLinksInNewWindow:!0,simplifiedAutoLink:!0,splitAdjacentBlockquotes:!0,tables:!0});u.setFlavor("github");const d={_d:o,_w:a,_parser:new a.DOMParser,_prevRtl:l.rtl,_editorHeight:0,_editorHeightPadding:0,_listCamel:l.__listCommonStyle,_listKebab:r.camelToKebabCase(l.__listCommonStyle),__focusTemp:e.element._focusTemp,_wd:null,_ww:null,_shadowRoot:null,_shadowRootControllerEventTarget:null,util:r,functions:null,options:null,wwComputedStyle:null,notice:I,icons:c,history:null,context:e,pluginCallButtons:t,plugins:n||{},initPlugins:{},_targetPlugins:{},_menuTray:{},lang:i,effectNode:null,submenu:null,container:null,_submenuName:"",_bindedSubmenuOff:null,_bindedContainerOff:null,submenuActiveButton:null,containerActiveButton:null,controllerArray:[],currentControllerName:"",currentControllerTarget:null,currentFileComponentInfo:null,codeViewDisabledButtons:[],resizingDisabledButtons:[],_moreLayerActiveButton:null,_htmlCheckWhitelistRegExp:null,_htmlCheckBlacklistRegExp:null,_disallowedTextTagsRegExp:null,editorTagsWhitelistRegExp:null,editorTagsBlacklistRegExp:null,pasteTagsWhitelistRegExp:null,pasteTagsBlacklistRegExp:null,hasFocus:!1,isDisabled:!1,isReadOnly:!1,_attributesWhitelistRegExp:null,_attributesWhitelistRegExp_all_data:null,_attributesBlacklistRegExp:null,_attributesTagsWhitelist:null,_attributesTagsBlacklist:null,_bindControllersOff:null,_isInline:null,_isBalloon:null,_isBalloonAlways:null,_inlineToolbarAttr:{top:"",width:"",isShow:!1},_notHideToolbar:!1,_sticky:!1,_antiBlur:!1,_lineBreaker:null,_lineBreakerButton:null,_componentsInfoInit:!0,_componentsInfoReset:!1,activePlugins:null,managedTagsInfo:null,_charTypeHTML:!1,_fileInfoPluginsCheck:null,_fileInfoPluginsReset:null,_fileManager:{tags:null,regExp:null,queryString:null,pluginRegExp:null,pluginMap:null},commandMap:{},_commandMapStyles:{STRONG:["font-weight"],U:["text-decoration"],EM:["font-style"],DEL:["text-decoration"]},_styleCommandMap:null,_cleanStyleRegExp:{div:new a.RegExp("\\s*[^-a-zA-Z](.+)\\s*:[^;]+(?!;)*","ig"),span:new a.RegExp("\\s*[^-a-zA-Z](font-family|font-size|color|background-color)\\s*:[^;]+(?!;)*","ig"),format:new a.RegExp("\\s*[^-a-zA-Z](text-align|margin-left|margin-right|width|height|line-height)\\s*:[^;]+(?!;)*","ig"),fontSizeUnit:new a.RegExp("\\d+"+l.fontSizeUnit+"$","i")},_variable:{isChanged:!1,isCodeView:!1,isFullScreen:!1,innerHeight_fullScreen:0,resizeClientY:0,tabSize:4,codeIndent:2,minResizingSize:r.getNumber(e.element.wysiwygFrame.style.minHeight||"65",0),currentNodes:[],currentNodesMap:[],_range:null,_selectionNode:null,_originCssText:e.element.topArea.style.cssText,_bodyOverflow:"",_editorAreaOriginCssText:"",_wysiwygOriginCssText:"",_codeOriginCssText:"",_fullScreenAttrs:{sticky:!1,balloon:!1,inline:!1},_lineBreakComp:null,_lineBreakDir:""},_formatAttrsTemp:null,_saveButtonStates:function(){this.allCommandButtons||(this.allCommandButtons={});const e=this.context.element._buttonTray.querySelectorAll(".se-menu-list button[data-display]");for(let t,n,i=0;i<e.length;i++)t=e[i],n=t.getAttribute("data-command"),this.allCommandButtons[n]=t},_recoverButtonStates:function(){if(this.allCommandButtons){const e=this.context.element._buttonTray.querySelectorAll(".se-menu-list button[data-display]");for(let t,n,i,l=0;l<e.length;l++)t=e[l],n=t.getAttribute("data-command"),i=this.allCommandButtons[n],i&&(t.parentElement.replaceChild(i,t),this.context.tool[n]&&(this.context.tool[n]=i))}},callPlugin:function(e,n,i){if(i=i||t[e],!this.plugins[e])throw Error('[SUNEDITOR.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:"'+e+'")');this.initPlugins[e]?"object"==typeof this._targetPlugins[e]&&i&&this.initMenuTarget(e,i,this._targetPlugins[e]):(this.plugins[e].add(this,i),this.initPlugins[e]=!0),this.plugins[e].active&&!this.commandMap[e]&&i&&(this.commandMap[e]=i,this.activePlugins.push(e)),"function"==typeof n&&n()},addModule:function(e){for(let t,n=0,i=e.length;n<i;n++)t=e[n].name,this.plugins[t]||(this.plugins[t]=e[n]),this.initPlugins[t]||(this.initPlugins[t]=!0,"function"==typeof this.plugins[t].add&&this.plugins[t].add(this))},getGlobalScrollOffset:function(){let t=0,n=0,i=e.element.topArea;for(;i;)t+=i.scrollTop,n+=i.scrollLeft,i=i.parentElement;for(i=this._shadowRoot?this._shadowRoot.host:null;i;)t+=i.scrollTop,n+=i.scrollLeft,i=i.parentElement;return{top:t,left:n}},initMenuTarget:function(t,n,i){n?(e.element._menuTray.appendChild(i),this._targetPlugins[t]=!0,this._menuTray[n.getAttribute("data-command")]=i):this._targetPlugins[t]=i},submenuOn:function(e){this._bindedSubmenuOff&&this._bindedSubmenuOff(),this._bindControllersOff&&this.controllersOff();const t=this._submenuName=e.getAttribute("data-command"),n=this.submenu=this._menuTray[t];this.submenuActiveButton=e,this._setMenuPosition(e,n),this._bindedSubmenuOff=this.submenuOff.bind(this),this.addDocEvent("mousedown",this._bindedSubmenuOff,!1),this.plugins[t].on&&this.plugins[t].on.call(this),this._antiBlur=!0},submenuOff:function(){this.removeDocEvent("mousedown",this._bindedSubmenuOff),this._bindedSubmenuOff=null,this.submenu&&(this._submenuName="",this.submenu.style.display="none",this.submenu=null,r.removeClass(this.submenuActiveButton,"on"),this.submenuActiveButton=null,this._notHideToolbar=!1),this._antiBlur=!1},moreLayerOff:function(){if(this._moreLayerActiveButton){e.element.toolbar.querySelector("."+this._moreLayerActiveButton.getAttribute("data-command")).style.display="none",r.removeClass(this._moreLayerActiveButton,"on"),this._moreLayerActiveButton=null}},containerOn:function(e){this._bindedContainerOff&&this._bindedContainerOff();const t=this._containerName=e.getAttribute("data-command"),n=this.container=this._menuTray[t];this.containerActiveButton=e,this._setMenuPosition(e,n),this._bindedContainerOff=this.containerOff.bind(this),this.addDocEvent("mousedown",this._bindedContainerOff,!1),this.plugins[t].on&&this.plugins[t].on.call(this),this._antiBlur=!0},containerOff:function(){this.removeDocEvent("mousedown",this._bindedContainerOff),this._bindedContainerOff=null,this.container&&(this._containerName="",this.container.style.display="none",this.container=null,r.removeClass(this.containerActiveButton,"on"),this.containerActiveButton=null,this._notHideToolbar=!1),this._antiBlur=!1},_setMenuPosition:function(t,n){n.style.visibility="hidden",n.style.display="block",n.style.height="",r.addClass(t,"on");const i=this.context.element.toolbar,s=i.offsetWidth,o=h._getEditorOffsets(e.element.toolbar),c=n.offsetWidth,u=t.parentElement.offsetLeft+3;if(l.rtl){const e=t.offsetWidth,i=c>e?c-e:0,l=i>0?0:e-c;n.style.left=u-i+l+"px",o.left>h._getEditorOffsets(n).left&&(n.style.left="0px")}else{const e=s<=c?0:s-(u+c);n.style.left=e<0?u+e+"px":u+"px"}let d=0,p=t;for(;p&&p!==i;)d+=p.offsetTop,p=p.offsetParent;const g=d;this._isBalloon?d+=i.offsetTop+t.offsetHeight:d-=t.offsetHeight;const m=o.top,f=n.offsetHeight,_=this.getGlobalScrollOffset().top,b=a.innerHeight-(m-_+g+t.parentElement.offsetHeight);if(b<f){let e=-1*(f-g+3);const i=m-_+e,l=f+(i<0?i:0);l>b?(n.style.height=l+"px",e=-1*(l-g+3)):(n.style.height=b+"px",e=g+t.parentElement.offsetHeight),n.style.top=e+"px"}else n.style.top=g+t.parentElement.offsetHeight+"px";n.style.visibility=""},controllersOn:function(){this._bindControllersOff&&this._bindControllersOff(),this.controllerArray=[];for(let e,t=0;t<arguments.length;t++)e=arguments[t],e&&("string"!=typeof e?"function"!=typeof e?r.hasClass(e,"se-controller")?(e.style&&(e.style.display="block",this._shadowRoot&&-1===this._shadowRootControllerEventTarget.indexOf(e)&&(e.addEventListener("mousedown",(function(e){e.preventDefault(),e.stopPropagation()})),this._shadowRootControllerEventTarget.push(e))),this.controllerArray.push(e)):(this.currentControllerTarget=e,this.currentFileComponentInfo=this.getFileComponent(e)):this.controllerArray.push(e):this.currentControllerName=e);this._bindControllersOff=this.controllersOff.bind(this),this.addDocEvent("mousedown",this._bindControllersOff,!1),this.addDocEvent("keydown",this._bindControllersOff,!1),this._antiBlur=!0,"function"==typeof p.showController&&p.showController(this.currentControllerName,this.controllerArray,this)},controllersOff:function(t){this._lineBreaker.style.display="none";const n=this.controllerArray.length;if(t&&t.target&&n>0)for(let e=0;e<n;e++)if("function"==typeof this.controllerArray[e].contains&&this.controllerArray[e].contains(t.target))return;if((!this._fileManager.pluginRegExp.test(this.currentControllerName)||!t||"keydown"!==t.type||27===t.keyCode)&&(e.element.lineBreaker_t.style.display=e.element.lineBreaker_b.style.display="none",this._variable._lineBreakComp=null,this.currentControllerName="",this.currentControllerTarget=null,this.currentFileComponentInfo=null,this.effectNode=null,this._bindControllersOff)){if(this.removeDocEvent("mousedown",this._bindControllersOff),this.removeDocEvent("keydown",this._bindControllersOff),this._bindControllersOff=null,n>0){for(let e=0;e<n;e++)"function"==typeof this.controllerArray[e]?this.controllerArray[e]():this.controllerArray[e].style.display="none";this.controllerArray=[]}this._antiBlur=!1}},setControllerPosition:function(t,n,i,s){l.rtl&&(s.left*=-1);const o=r.getOffset(n,e.element.wysiwygFrame);t.style.visibility="hidden",t.style.display="block";const a="top"===i?-(t.offsetHeight+2):n.offsetHeight+12;t.style.top=o.top+a+s.top+"px";const c=o.left-e.element.wysiwygFrame.scrollLeft+s.left,u=t.offsetWidth,d=n.offsetWidth,h=r.hasClass(t.firstElementChild,"se-arrow")?t.firstElementChild:null;if(l.rtl){const n=u>d?u-d:0,i=n>0?0:d-u;t.style.left=c-n+i+"px",n>0&&h&&(h.style.left=(u-14<10+n?u-14:10+n)+"px");const l=e.element.wysiwygFrame.offsetLeft-t.offsetLeft;l>0&&(t.style.left="0px",h&&(h.style.left=l+"px"))}else{t.style.left=c+"px";const n=e.element.wysiwygFrame.offsetWidth-(t.offsetLeft+u);n<0?(t.style.left=t.offsetLeft+n+"px",h&&(h.style.left=20-n+"px")):h&&(h.style.left="20px")}t.style.visibility=""},execCommand:function(e,t,n){this._wd.execCommand(e,t,"formatBlock"===e?"<"+n+">":n),this.history.push(!0)},nativeFocus:function(){this.__focus(),this._editorRange()},__focus:function(){const t=r.getParentElement(this.getSelectionNode(),"figcaption");t?t.focus():e.element.wysiwyg.focus()},focus:function(){if("none"!==e.element.wysiwygFrame.style.display){if(l.iframe)this.nativeFocus();else try{const t=this.getRange();if(t.startContainer===t.endContainer&&r.isWysiwygDiv(t.startContainer)){const n=t.commonAncestorContainer.children[t.startOffset];if(!r.isFormatElement(n)&&!r.isComponent(n)){const t=r.createElement(l.defaultTag),i=r.createElement("BR");return t.appendChild(i),e.element.wysiwyg.insertBefore(t,n),void this.setRange(i,0,i,0)}}this.setRange(t.startContainer,t.startOffset,t.endContainer,t.endOffset)}catch(e){this.nativeFocus()}h._applyTagEffects(),this._isBalloon&&h._toggleToolbarBalloon()}},focusEdge:function(t){t||(t=e.element.wysiwyg.lastElementChild);const n=this.getFileComponent(t);n?this.selectComponent(n.target,n.pluginName):t?(t=r.getChildElement(t,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0))?this.setRange(t,t.textContent.length,t,t.textContent.length):this.nativeFocus():this.focus()},blur:function(){l.iframe?e.element.wysiwygFrame.blur():e.element.wysiwyg.blur()},setRange:function(e,t,n,i){if(!e||!n)return;t>e.textContent.length&&(t=e.textContent.length),i>n.textContent.length&&(i=n.textContent.length),r.isFormatElement(e)&&(e=e.childNodes[t]||e.childNodes[t-1]||e,t=t>0?1===e.nodeType?1:e.textContent?e.textContent.length:0:0),r.isFormatElement(n)&&(n=n.childNodes[i]||n.childNodes[i-1]||n,i=i>0?1===n.nodeType?1:n.textContent?n.textContent.length:0:0);const s=this._wd.createRange();try{s.setStart(e,t),s.setEnd(n,i)}catch(e){return console.warn("[SUNEDITOR.core.focus.error] "+e),void this.nativeFocus()}const o=this.getSelection();return o.removeAllRanges&&o.removeAllRanges(),o.addRange(s),this._rangeInfo(s,this.getSelection()),l.iframe&&this.__focus(),s},removeRange:function(){this._variable._range=null,this._variable._selectionNode=null,this.hasFocus&&this.getSelection().removeAllRanges(),this._setKeyEffect([])},getRange:function(){const t=this._variable._range||this._createDefaultRange(),n=this.getSelection();if(t.collapsed===n.isCollapsed||!e.element.wysiwyg.contains(n.focusNode))return t;if(n.rangeCount>0)return this._variable._range=n.getRangeAt(0),this._variable._range;{const e=n.anchorNode,t=n.focusNode,i=n.anchorOffset,l=n.focusOffset,s=r.compareElements(e,t),o=s.ancestor&&(0===s.result?i<=l:s.result>1);return this.setRange(o?e:t,o?i:l,o?t:e,o?l:i)}},getRange_addLine:function(t,n){if(this._selectionVoid(t)){const i=e.element.wysiwyg,s=r.createElement(l.defaultTag);s.innerHTML="<br>",i.insertBefore(s,n&&n!==i?n.nextElementSibling:i.firstElementChild),this.setRange(s.firstElementChild,0,s.firstElementChild,1),t=this._variable._range}return t},getSelection:function(){const t=this._shadowRoot&&this._shadowRoot.getSelection?this._shadowRoot.getSelection():this._ww.getSelection();return this._variable._range||e.element.wysiwyg.contains(t.focusNode)||(t.removeAllRanges(),t.addRange(this._createDefaultRange())),t},getSelectionNode:function(){if(e.element.wysiwyg.contains(this._variable._selectionNode)||this._editorRange(),!this._variable._selectionNode){const t=r.getChildElement(e.element.wysiwyg.firstChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1);if(t)return this._variable._selectionNode=t,t;this._editorRange()}return this._variable._selectionNode},_editorRange:function(){const e=this._wd.activeElement;if(r.isInputElement(e))return this._variable._selectionNode=e,e;const t=this.getSelection();if(!t)return null;let n=null;n=t.rangeCount>0?t.getRangeAt(0):this._createDefaultRange(),this._rangeInfo(n,t)},_rangeInfo:function(e,t){let n=null;this._variable._range=e,n=e.collapsed?r.isWysiwygDiv(e.commonAncestorContainer)&&e.commonAncestorContainer.children[e.startOffset]||e.commonAncestorContainer:t.extentNode||t.anchorNode,this._variable._selectionNode=n},_createDefaultRange:function(){const t=e.element.wysiwyg,n=this._wd.createRange();let i=t.firstElementChild,s=null;return i?(s=i.firstChild,s||(s=r.createElement("BR"),i.appendChild(s))):(i=r.createElement(l.defaultTag),s=r.createElement("BR"),i.appendChild(s),t.appendChild(i)),n.setStart(s,0),n.setEnd(s,0),n},_selectionVoid:function(e){const t=e.commonAncestorContainer;return r.isWysiwygDiv(e.startContainer)&&r.isWysiwygDiv(e.endContainer)||/FIGURE/i.test(t.nodeName)||this._fileManager.regExp.test(t.nodeName)||r.isMediaComponent(t)},_resetRangeToTextNode:function(){const t=this.getRange();if(this._selectionVoid(t))return!1;let n,i,s,o=t.startContainer,a=t.startOffset,c=t.endContainer,u=t.endOffset;if(r.isFormatElement(o))for(o.childNodes[a]?(o=o.childNodes[a]||o,a=0):(o=o.lastChild||o,a=o.textContent.length);o&&1===o.nodeType&&o.firstChild;)o=o.firstChild||o,a=0;if(r.isFormatElement(c)){for(c=c.childNodes[u]||c.lastChild||c;c&&1===c.nodeType&&c.lastChild;)c=c.lastChild;u=c.textContent.length}if(n=r.isWysiwygDiv(o)?e.element.wysiwyg.firstChild:o,i=a,r.isBreak(n)||1===n.nodeType&&n.childNodes.length>0){const e=r.isBreak(n);if(!e){for(;n&&!r.isBreak(n)&&1===n.nodeType;)n=n.childNodes[i]||n.nextElementSibling||n.nextSibling,i=0;let e=r.getFormatElement(n,null);e===r.getRangeFormatElement(e,null)&&(e=r.createElement(r.getParentElement(n,r.isCell)?"DIV":l.defaultTag),n.parentNode.insertBefore(e,n),e.appendChild(n))}if(r.isBreak(n)){const t=r.createTextNode(r.zeroWidthSpace);n.parentNode.insertBefore(t,n),n=t,e&&o===c&&(c=n,u=1)}}if(o=n,a=i,n=r.isWysiwygDiv(c)?e.element.wysiwyg.lastChild:c,i=u,r.isBreak(n)||1===n.nodeType&&n.childNodes.length>0){const e=r.isBreak(n);if(!e){for(;n&&!r.isBreak(n)&&1===n.nodeType&&(s=n.childNodes,0!==s.length);)n=s[i>0?i-1:i]||!/FIGURE/i.test(s[0].nodeName)?s[0]:n.previousElementSibling||n.previousSibling||o,i=i>0?n.textContent.length:i;let e=r.getFormatElement(n,null);e===r.getRangeFormatElement(e,null)&&(e=r.createElement(r.isCell(e)?"DIV":l.defaultTag),n.parentNode.insertBefore(e,n),e.appendChild(n))}if(r.isBreak(n)){const t=r.createTextNode(r.zeroWidthSpace);n.parentNode.insertBefore(t,n),n=t,i=1,e&&!n.previousSibling&&r.removeItem(c)}}return c=n,u=i,this.setRange(o,a,c,u),!0},getSelectedElements:function(t){if(!this._resetRangeToTextNode())return[];let n=this.getRange();if(r.isWysiwygDiv(n.startContainer)){const t=e.element.wysiwyg.children;if(0===t.length)return[];this.setRange(t[0],0,t[t.length-1],t[t.length-1].textContent.trim().length),n=this.getRange()}const i=n.startContainer,l=n.endContainer,s=n.commonAncestorContainer,o=r.getListChildren(s,(function(e){return t?t(e):r.isFormatElement(e)}));if(r.isWysiwygDiv(s)||r.isRangeFormatElement(s)||o.unshift(r.getFormatElement(s,null)),i===l||1===o.length)return o;let a=r.getFormatElement(i,null),c=r.getFormatElement(l,null),u=null,d=null;const h=function(e){return!r.isTable(e)||/^TABLE$/i.test(e.nodeName)};let p=r.getRangeFormatElement(a,h),g=r.getRangeFormatElement(c,h);r.isTable(p)&&r.isListCell(p.parentNode)&&(p=p.parentNode),r.isTable(g)&&r.isListCell(g.parentNode)&&(g=g.parentNode);const m=p===g;for(let e,t=0,n=o.length;t<n;t++)if(e=o[t],a===e||!m&&e===p)u=t;else if(c===e||!m&&e===g){d=t;break}return null===u&&(u=0),null===d&&(d=o.length-1),o.slice(u,d+1)},getSelectedElementsAndComponents:function(e){const t=this.getRange().commonAncestorContainer,n=r.getParentElement(t,r.isComponent),i=r.isTable(t)?this.getSelectedElements(null):this.getSelectedElements(function(e){const t=this.getParentElement(e,this.isComponent);return this.isFormatElement(e)&&(!t||t===n)||this.isComponent(e)&&!this.getFormatElement(e)}.bind(r));if(e)for(let e=0,t=i.length;e<t;e++)for(let n=e-1;n>=0;n--)if(i[n].contains(i[e])){i.splice(e,1),e--,t--;break}return i},isEdgePoint:function(e,t,n){return"end"!==n&&0===t||(!n||"front"!==n)&&!e.nodeValue&&1===t||(!n||"end"===n)&&!!e.nodeValue&&t===e.nodeValue.length},_isEdgeFormat:function(e,t,n){if(!this.isEdgePoint(e,t,n))return!1;const i=[];for(n="front"===n?"previousSibling":"nextSibling";e&&!r.isFormatElement(e)&&!r.isWysiwygDiv(e);){if(e[n]&&(!r.isBreak(e[n])||e[n][n]))return null;1===e.nodeType&&i.push(e.cloneNode(!1)),e=e.parentNode}return i},showLoading:function(){e.element.loading.style.display="block"},closeLoading:function(){e.element.loading.style.display="none"},appendFormatTag:function(e,t){if(!e||!e.parentNode)return null;const n=r.getFormatElement(this.getSelectionNode(),null);let i=null;if(!r.isFormatElement(e)&&r.isFreeFormatElement(n||e.parentNode))i=r.createElement("BR");else{const e=t?"string"==typeof t?t:t.nodeName:!r.isFormatElement(n)||r.isRangeFormatElement(n)||r.isFreeFormatElement(n)?l.defaultTag:n.nodeName;i=r.createElement(e),i.innerHTML="<br>",(t&&"string"!=typeof t||!t&&r.isFormatElement(n))&&r.copyTagAttributes(i,t||n,["id"])}return r.isCell(e)?e.insertBefore(i,e.nextElementSibling):e.parentNode.insertBefore(i,e.nextElementSibling),i},insertComponent:function(e,t,n,i){if(this.isReadOnly||n&&!this.checkCharCount(e,null))return null;const l=this.removeNode();this.getRange_addLine(this.getRange(),l.container);let s=null,o=this.getSelectionNode(),a=r.getFormatElement(o,null);if(r.isListCell(a))this.insertNode(e,o===a?null:l.container.nextSibling,!1),e.nextSibling||e.parentNode.appendChild(r.createElement("BR"));else{if(this.getRange().collapsed&&(3===l.container.nodeType||r.isBreak(l.container))){const e=r.getParentElement(l.container,function(e){return this.isRangeFormatElement(e)}.bind(r));s=r.splitElement(l.container,l.offset,e?r.getElementDepth(e)+1:0),s&&(a=s.previousSibling)}this.insertNode(e,r.isRangeFormatElement(a)?null:a,!1),a&&r.onlyZeroWidthSpace(a)&&r.removeItem(a)}if(!i){this.setRange(e,0,e,0);const t=this.getFileComponent(e);t?this.selectComponent(t.target,t.pluginName):s&&(s=r.getEdgeChildNodes(s,null).sc||s,this.setRange(s,0,s,0))}return t||this.history.push(1),s||e},getFileComponent:function(e){if(!this._fileManager.queryString||!e)return null;let t,n;return(/^FIGURE$/i.test(e.nodeName)||/se-component/.test(e.className))&&(t=e.querySelector(this._fileManager.queryString)),!t&&e.nodeName&&this._fileManager.regExp.test(e.nodeName)&&(t=e),t&&(n=this._fileManager.pluginMap[t.nodeName.toLowerCase()],n)?{target:t,component:r.getParentElement(t,r.isComponent),pluginName:n}:null},selectComponent:function(e,t){if(r.isUneditableComponent(r.getParentElement(e,r.isComponent))||r.isUneditableComponent(e))return!1;this.hasFocus||this.focus();const n=this.plugins[t];n&&a.setTimeout(function(){"function"==typeof n.select&&this.callPlugin(t,n.select.bind(this,e),null),this._setComponentLineBreaker(e)}.bind(this))},_setComponentLineBreaker:function(t){this._lineBreaker.style.display="none";const n=r.getParentElement(t,r.isComponent),i=e.element.lineBreaker_t.style,l=e.element.lineBreaker_b.style,s="block"===this.context.resizing.resizeContainer.style.display?this.context.resizing.resizeContainer:t,o=r.isListCell(n.parentNode);let a,c,u;(o?n.previousSibling:r.isFormatElement(n.previousElementSibling))?i.display="none":(this._variable._lineBreakComp=n,c=e.element.wysiwyg.scrollTop,a=r.getOffset(t,e.element.wysiwygFrame).top+c,u=s.offsetWidth/2/2,i.top=a-c-12+"px",i.left=r.getOffset(s).left+u+"px",i.display="block"),(o?n.nextSibling:r.isFormatElement(n.nextElementSibling))?l.display="none":(a||(this._variable._lineBreakComp=n,c=e.element.wysiwyg.scrollTop,a=r.getOffset(t,e.element.wysiwygFrame).top+c,u=s.offsetWidth/2/2),l.top=a+s.offsetHeight-c-12+"px",l.left=r.getOffset(s).left+s.offsetWidth-u-24+"px",l.display="block")},_checkDuplicateNode:function(e,t){!function e(n){d._dupleCheck(n,t);const i=n.childNodes;for(let t=0,n=i.length;t<n;t++)e(i[t])}(e)},_dupleCheck:function(e,t){if(!r.isTextStyleElement(e))return;const n=(e.style.cssText.match(/[^;]+;/g)||[]).map((function(e){return e.trim()})),i=e.nodeName;if(/^span$/i.test(i)&&0===n.length)return e;let l=!1;return function t(s){if(!r.isWysiwygDiv(s)&&r.isTextStyleElement(s)){if(s.nodeName===i){l=!0;const t=s.style.cssText.match(/[^;]+;/g)||[];for(let e,i=0,l=t.length;i<l;i++)(e=n.indexOf(t[i].trim()))>-1&&n.splice(e,1);for(let t=0,n=s.classList.length;t<n;t++)e.classList.remove(s.classList[t])}t(s.parentElement)}}(t),l&&((e.style.cssText=n.join(" "))||(e.setAttribute("style",""),e.removeAttribute("style")),e.attributes.length||e.setAttribute("data-se-duple","true")),e},insertNode:function(t,n,i){if(this.isReadOnly||i&&!this.checkCharCount(t,null))return null;let s,o,a,c=this.getRange(),u=r.isListCell(c.commonAncestorContainer)?c.commonAncestorContainer:r.getFormatElement(this.getSelectionNode(),null),d=r.isListCell(u)&&(r.isListCell(t)||r.isList(t)),h=null;const p=r.isFreeFormatElement(u),g=!p&&(r.isFormatElement(t)||r.isRangeFormatElement(t))||r.isComponent(t);if(d&&(a=n||r.isList(t)?u.lastChild:u.nextElementSibling,h=r.isList(t)?u:(a||u).parentNode),!n&&(g||r.isComponent(t)||r.isMedia(t))){const e=this.isEdgePoint(c.endContainer,c.endOffset,"end"),t=this.removeNode(),i=t.container,l=i===t.prevContainer&&c.collapsed?null:t.prevContainer;if(d&&l)if(h=3===l.nodeType?l.parentNode:l,h.contains(i)){let e=!0;for(a=i;a.parentNode&&a.parentNode!==h;)a=a.parentNode,e=!1;e&&i===l&&(a=a.nextSibling)}else a=null;else if(d&&r.isListCell(i)&&!u.parentElement)u=r.createElement("LI"),h.appendChild(u),i.appendChild(h),a=null;else if(3===i.nodeType||r.isBreak(i)||d){const l=r.getParentElement(i,function(e){return this.isRangeFormatElement(e)||this.isListCell(e)}.bind(r));if(n=r.splitElement(i,t.offset,l?r.getElementDepth(l)+1:0))if(d){if(u.contains(i)){const t=r.isList(u.lastElementChild);let i=null;e||(i=u.cloneNode(!1),i.appendChild(n.textContent.trim()?n:r.createTextNode(r.zeroWidthSpace))),t&&(i||(i=u.cloneNode(!1),i.appendChild(r.createTextNode(r.zeroWidthSpace))),i.appendChild(u.lastElementChild)),i&&(u.parentNode.insertBefore(i,u.nextElementSibling),a=n=i)}}else n=n.previousSibling;else a=n=u}}c=n||g?this.getRange():this.getRange_addLine(this.getRange(),null);const m=c.commonAncestorContainer,f=c.startOffset,_=c.endOffset,b=c.startContainer===m&&r.isFormatElement(m),v=b&&(m.childNodes[f]||m.childNodes[0])||c.startContainer,y=b&&(m.childNodes[_]||m.childNodes[m.childNodes.length-1])||c.endContainer;if(!d)if(n)s=n.parentNode,n=n.nextSibling,o=!0;else if(s=v,3===v.nodeType&&(s=v.parentNode),c.collapsed)if(3===m.nodeType)n=m.textContent.length>_?m.splitText(_):m.nextSibling;else if(r.isBreak(s))n=s,s=s.parentNode;else{let e=s.childNodes[f];const i=e&&3===e.nodeType&&r.onlyZeroWidthSpace(e)&&r.isBreak(e.nextSibling)?e.nextSibling:e;i?!i.nextSibling&&r.isBreak(i)?(s.removeChild(i),n=null):n=r.isBreak(i)&&!r.isBreak(t)?i:i.nextSibling:n=null}else{if(v===y){n=this.isEdgePoint(y,_)?y.nextSibling:y.splitText(_);let e=v;this.isEdgePoint(v,f)||(e=v.splitText(f)),s.removeChild(e),0===s.childNodes.length&&g&&(s.innerHTML="<br>")}else{const e=this.removeNode(),i=e.container,o=e.prevContainer;if(i&&0===i.childNodes.length&&g&&(r.isFormatElement(i)?i.innerHTML="<br>":r.isRangeFormatElement(i)&&(i.innerHTML="<"+l.defaultTag+"><br></"+l.defaultTag+">")),r.isListCell(i)&&3===t.nodeType)s=i,n=null;else if(!g&&o)if(s=3===o.nodeType?o.parentNode:o,s.contains(i)){let e=!0;for(n=i;n.parentNode&&n.parentNode!==s;)n=n.parentNode,e=!1;e&&i===o&&(n=n.nextSibling)}else n=null;else r.isWysiwygDiv(i)&&!r.isFormatElement(t)?(s=i.appendChild(r.createElement(l.defaultTag)),n=null):s=(n=g?y:i===o?i.nextSibling:i)&&n.parentNode?n.parentNode:m;for(;n&&!r.isFormatElement(n)&&n.parentNode!==m;)n=n.parentNode}}try{if(!d){if((r.isWysiwygDiv(n)||s===e.element.wysiwyg.parentNode)&&(s=e.element.wysiwyg,n=null),r.isFormatElement(t)||r.isRangeFormatElement(t)||!r.isListCell(s)&&r.isComponent(t)){const e=s;if(r.isList(n))s=n,n=null;else if(r.isListCell(n))s=n.previousElementSibling||n;else if(!o&&!n){const e=this.removeNode(),t=3===e.container.nodeType?r.isListCell(r.getFormatElement(e.container,null))?e.container:r.getFormatElement(e.container,null)||e.container.parentNode:e.container,i=r.isWysiwygDiv(t)||r.isRangeFormatElement(t);s=i?t:t.parentNode,n=i?null:t.nextSibling}0===e.childNodes.length&&s!==e&&r.removeItem(e)}if(!g||p||r.isRangeFormatElement(s)||r.isListCell(s)||r.isWysiwygDiv(s)||(n=s.nextElementSibling,s=s.parentNode),r.isWysiwygDiv(s)&&(3===t.nodeType||r.isBreak(t))){const e=r.createElement(l.defaultTag);e.appendChild(t),t=e}}if(d?h.parentNode?(s=h,n=a):(s=e.element.wysiwyg,n=null):n=s===n?s.lastChild:n,r.isListCell(t)&&!r.isList(s)){if(r.isListCell(s))n=s.nextElementSibling,s=s.parentNode;else{const e=r.createElement("ol");s.insertBefore(e,n),s=e,n=null}d=!0}if(this._checkDuplicateNode(t,s),s.insertBefore(t,n),d)if(r.onlyZeroWidthSpace(u.textContent.trim()))r.removeItem(u),t=t.lastChild;else{const e=r.getArrayItem(u.children,r.isList);e&&(t!==e?(t.appendChild(e),t=e.previousSibling):(s.appendChild(t),t=s),r.onlyZeroWidthSpace(u.textContent.trim())&&r.removeItem(u))}}catch(e){s.appendChild(t),console.warn("[SUNEDITOR.insertNode.warn] "+e)}finally{const e=s.querySelectorAll("[data-se-duple]");if(e.length>0)for(let n,i,l,s,o=0,a=e.length;o<a;o++){for(n=e[o],l=n.childNodes,s=n.parentNode;l[0];)i=l[0],s.insertBefore(i,n);n===t&&(t=i),r.removeItem(n)}if((r.isFormatElement(t)||r.isComponent(t))&&v===y){const e=r.getFormatElement(m,null);e&&1===e.nodeType&&r.isEmptyLine(e)&&r.removeItem(e)}if(p&&(r.isFormatElement(t)||r.isRangeFormatElement(t))&&(t=this._setIntoFreeFormat(t)),!r.isComponent(t)){let e=1;if(3===t.nodeType){const e=t.previousSibling,n=t.nextSibling,i=!e||1===e.nodeType||r.onlyZeroWidthSpace(e)?"":e.textContent,l=!n||1===n.nodeType||r.onlyZeroWidthSpace(n)?"":n.textContent;e&&i.length>0&&(t.textContent=i+t.textContent,r.removeItem(e)),n&&n.length>0&&(t.textContent+=l,r.removeItem(n));const s={container:t,startOffset:i.length,endOffset:t.textContent.length-l.length};return this.setRange(t,s.startOffset,t,s.endOffset),s}if(!r.isBreak(t)&&!r.isListCell(t)&&r.isFormatElement(s)){let n=null;t.previousSibling&&!r.isBreak(t.previousSibling)||(n=r.createTextNode(r.zeroWidthSpace),t.parentNode.insertBefore(n,t)),t.nextSibling&&!r.isBreak(t.nextSibling)||(n=r.createTextNode(r.zeroWidthSpace),t.parentNode.insertBefore(n,t.nextSibling)),r._isIgnoreNodeChange(t)&&(t=t.nextSibling,e=0)}this.setRange(t,e,t,e)}return this.history.push(!0),t}},_setIntoFreeFormat:function(e){const t=e.parentNode;let n,i;for(;r.isFormatElement(e)||r.isRangeFormatElement(e);){for(n=e.childNodes,i=null;n[0];)if(i=n[0],r.isFormatElement(i)||r.isRangeFormatElement(i)){if(this._setIntoFreeFormat(i),!e.parentNode)break;n=e.childNodes}else t.insertBefore(i,e);0===e.childNodes.length&&r.removeItem(e),e=r.createElement("BR"),t.insertBefore(e,i.nextSibling)}return e},removeNode:function(){this._resetRangeToTextNode();const t=this.getRange();if(t.startContainer===t.endContainer){const e=r.getParentElement(t.startContainer,r.isMediaComponent);if(e){const t=r.createElement("BR"),n=r.createElement(l.defaultTag);return n.appendChild(t),r.changeElement(e,n),d.setRange(n,0,n,0),this.history.push(!0),{container:n,offset:0,prevContainer:null}}}const n=0===t.startOffset,i=d.isEdgePoint(t.endContainer,t.endOffset,"end");let s=null,o=null,a=null;n&&(o=r.getFormatElement(t.startContainer),o&&(s=o.previousElementSibling,o=s)),i&&(a=r.getFormatElement(t.endContainer),a=a?a.nextElementSibling:a);let c,u=0,h=t.startContainer,p=t.endContainer,g=t.startOffset,m=t.endOffset;const f=3===t.commonAncestorContainer.nodeType&&t.commonAncestorContainer.parentNode===h.parentNode?h.parentNode:t.commonAncestorContainer;if(f===h&&f===p&&(h=f.children[g],p=f.children[m],g=m=0),!h||!p)return{container:f,offset:0};if(h===p&&t.collapsed&&h.textContent&&r.onlyZeroWidthSpace(h.textContent.substr(g)))return{container:h,offset:g,prevContainer:h&&h.parentNode?h:null};let _=null,b=null;const v=r.getListChildNodes(f,null);let y=r.getArrayIndex(v,h),C=r.getArrayIndex(v,p);if(v.length>0&&y>-1&&C>-1){for(let e=y+1,t=h;e>=0;e--)v[e]===t.parentNode&&v[e].firstChild===t&&0===g&&(y=e,t=t.parentNode);for(let e=C-1,t=p;e>y;e--)v[e]===t.parentNode&&1===v[e].nodeType&&(v.splice(e,1),t=t.parentNode,--C)}else{if(0===v.length){if(r.isFormatElement(f)||r.isRangeFormatElement(f)||r.isWysiwygDiv(f)||r.isBreak(f)||r.isMedia(f))return{container:f,offset:0};if(3===f.nodeType)return{container:f,offset:m};v.push(f),h=p=f}else if(h=p=v[0],r.isBreak(h)||r.onlyZeroWidthSpace(h))return{container:r.isMedia(f)?f:h,offset:0};y=C=0}for(let e=y;e<=C;e++){const t=v[e];if(0===t.length||3===t.nodeType&&void 0===t.data)this._nodeRemoveListItem(t);else if(t!==h)if(t!==p)this._nodeRemoveListItem(t);else{if(1===p.nodeType){if(r.isComponent(p))continue;b=r.createTextNode(p.textContent)}else b=r.createTextNode(p.substringData(m,p.length-m));b.length>0?p.data=b.data:this._nodeRemoveListItem(p)}else{if(1===h.nodeType){if(r.isComponent(h))continue;_=r.createTextNode(h.textContent)}else t===p?(_=r.createTextNode(h.substringData(0,g)+p.substringData(m,p.length-m)),u=g):_=r.createTextNode(h.substringData(0,g));if(_.length>0?h.data=_.data:this._nodeRemoveListItem(h),t===p)break}}const w=r.getParentElement(p,"ul"),E=r.getParentElement(h,"li");if(w&&E&&E.contains(w)?(c=w.previousSibling,u=c.textContent.length):(c=p&&p.parentNode?p:h&&h.parentNode?h:t.endContainer||t.startContainer,u=n||i?i?c.textContent.length:0:u),!r.isWysiwygDiv(c)&&0===c.childNodes.length){const t=r.removeItemAllParents(c,null,null);t&&(c=t.sc||t.ec||e.element.wysiwyg)}return r.getFormatElement(c)||h&&h.parentNode||(a?(c=a,u=0):o&&(c=o,u=1)),this.setRange(c,u,c,u),this.history.push(!0),{container:c,offset:u,prevContainer:s}},_nodeRemoveListItem:function(e){const t=r.getFormatElement(e,null);r.removeItem(e),r.isListCell(t)&&(r.removeItemAllParents(t,null,null),t&&r.isList(t.firstChild)&&t.insertBefore(r.createTextNode(r.zeroWidthSpace),t.firstChild))},applyRangeFormatElement:function(e){this.getRange_addLine(this.getRange(),null);const t=this.getSelectedElementsAndComponents(!1);if(!t||0===t.length)return;e:for(let e,n,i,l,s,o,a=0,c=t.length;a<c;a++)if(e=t[a],r.isListCell(e))if(n=e.lastElementChild,n&&r.isListCell(e.nextElementSibling)&&t.indexOf(e.nextElementSibling)>-1&&(l=n.lastElementChild,t.indexOf(l)>-1)){let e=null;for(;e=l.lastElementChild;)if(r.isList(e)){if(!(t.indexOf(e.lastElementChild)>-1))continue e;l=e.lastElementChild}i=n.firstElementChild,s=t.indexOf(i),o=t.indexOf(l),t.splice(s,o-s+1),c=t.length}else;let n,i,l,s=t[t.length-1];n=r.isRangeFormatElement(s)||r.isFormatElement(s)?s:r.getRangeFormatElement(s,null)||r.getFormatElement(s,null),r.isCell(n)?(i=null,l=n):(i=n.nextSibling,l=n.parentNode);let o=r.getElementDepth(n),a=null;const c=[],u=function(e,t,n){let i=null;if(e!==t&&!r.isTable(t)){if(t&&r.getElementDepth(e)===r.getElementDepth(t))return n;i=r.removeItemAllParents(t,null,e)}return i?i.ec:n};for(let n,s,d,h,p,g,m,f=0,_=t.length;f<_;f++)if(n=t[f],s=n.parentNode,s&&!e.contains(s))if(d=r.getElementDepth(n),r.isList(s)){if(null===a&&(g?(a=g,m=!0,g=null):a=s.cloneNode(!1)),c.push(n),p=t[f+1],f===_-1||p&&p.parentNode!==s){p&&n.contains(p.parentNode)&&(g=p.parentNode.cloneNode(!1));let t,f=s.parentNode;for(;r.isList(f);)t=r.createElement(f.nodeName),t.appendChild(a),a=t,f=f.parentNode;const _=this.detachRangeFormatElement(s,c,null,!0,!0);o>=d?(o=d,l=_.cc,i=u(l,s,_.ec),i&&(l=i.parentNode)):l===_.cc&&(i=_.ec),l!==_.cc&&(h=u(l,_.cc,h),i=void 0!==h?h:_.cc);for(let e=0,t=_.removeArray.length;e<t;e++)a.appendChild(_.removeArray[e]);m||e.appendChild(a),g&&_.removeArray[_.removeArray.length-1].appendChild(g),a=null,m=!1}}else o>=d&&(o=d,l=s,i=n.nextSibling),e.appendChild(n),l!==s&&(h=u(l,s),void 0!==h&&(i=h));if(this.effectNode=null,r.mergeSameTags(e,null,!1),r.mergeNestedTags(e,function(e){return this.isList(e)}.bind(r)),i&&r.getElementDepth(i)>0&&(r.isList(i.parentNode)||r.isList(i.parentNode.parentNode))){const t=r.getParentElement(i,function(e){return this.isRangeFormatElement(e)&&!this.isList(e)}.bind(r)),n=r.splitElement(i,null,t?r.getElementDepth(t)+1:0);n.parentNode.insertBefore(e,n)}else l.insertBefore(e,i),u(e,i);const d=r.getEdgeChildNodes(e.firstElementChild,e.lastElementChild);t.length>1?this.setRange(d.sc,0,d.ec,d.ec.textContent.length):this.setRange(d.ec,d.ec.textContent.length,d.ec,d.ec.textContent.length),this.history.push(!1)},detachRangeFormatElement:function(e,t,n,i,s){const o=this.getRange();let a=o.startOffset,c=o.endOffset,u=r.getListChildNodes(e,(function(t){return t.parentNode===e})),d=e.parentNode,h=null,p=null,g=e.cloneNode(!1);const m=[],f=r.isList(n);let _=!1,b=!1,v=!1;function y(t,n,i,l){if(r.onlyZeroWidthSpace(n)&&(n.innerHTML=r.zeroWidthSpace,a=c=1),3===n.nodeType)return t.insertBefore(n,i),n;const s=(v?n:l).childNodes;let o=n.cloneNode(!1),u=null,d=null;for(;s[0];)d=s[0],!r._notTextNode(d)||r.isBreak(d)||r.isListCell(o)?o.appendChild(d):(o.childNodes.length>0&&(u||(u=o),t.insertBefore(o,i),o=n.cloneNode(!1)),t.insertBefore(d,i),u||(u=d));if(o.childNodes.length>0){if(r.isListCell(t)&&r.isListCell(o)&&r.isList(i))if(f){for(u=i;i;)o.appendChild(i),i=i.nextSibling;t.parentNode.insertBefore(o,t.nextElementSibling)}else{const t=l.nextElementSibling,n=r.detachNestedList(l,!1);if(e!==n||t!==l.nextElementSibling){const t=o.childNodes;for(;t[0];)l.appendChild(t[0]);e=n,b=!0}}else t.insertBefore(o,i);u||(u=o)}return u}for(let s,o,a,c=0,C=u.length;c<C;c++)if(s=u[c],3!==s.nodeType||!r.isList(g))if(v=!1,i&&0===c&&(h=t&&t.length!==C&&t[0]!==s?g:e.previousSibling),t&&(o=t.indexOf(s)),t&&-1===o)g||(g=e.cloneNode(!1)),g.appendChild(s);else{if(t&&(a=t[o+1]),g&&g.children.length>0&&(d.insertBefore(g,e),g=null),!f&&r.isListCell(s))if(a&&r.getElementDepth(s)!==r.getElementDepth(a)&&(r.isListCell(d)||r.getArrayItem(s.children,r.isList,!1))){const t=s.nextElementSibling,n=r.detachNestedList(s,!1);e===n&&t===s.nextElementSibling||(e=n,b=!0)}else{const t=s;s=r.createElement(i?t.nodeName:r.isList(e.parentNode)||r.isListCell(e.parentNode)?"LI":r.isCell(e.parentNode)?"DIV":l.defaultTag);const n=r.isListCell(s),o=t.childNodes;for(;o[0]&&(!r.isList(o[0])||n);)s.appendChild(o[0]);r.copyFormatAttributes(s,t),v=!0}else s=s.cloneNode(!1);if(!b&&(i?(m.push(s),r.removeItem(u[c])):(n?(_||(d.insertBefore(n,e),_=!0),s=y(n,s,null,u[c])):s=y(d,s,e,u[c]),b||(t?(p=s,h||(h=s)):h||(h=p=s))),b)){b=v=!1,u=r.getListChildNodes(e,(function(t){return t.parentNode===e})),g=e.cloneNode(!1),d=e.parentNode,c=-1,C=u.length;continue}}const C=e.parentNode;let w=e.nextSibling;g&&g.children.length>0&&C.insertBefore(g,w),n?h=n.previousSibling:h||(h=e.previousSibling),w=e.nextSibling!==g?e.nextSibling:g?g.nextSibling:null,0===e.children.length||0===e.textContent.length?r.removeItem(e):r.removeEmptyNode(e,null,!1);let E=null;if(i)E={cc:C,sc:h,so:a,ec:w,eo:c,removeArray:m};else{h||(h=p),p||(p=h);const e=r.getEdgeChildNodes(h,p.parentNode?h:p);E={cc:(e.sc||e.ec).parentNode,sc:e.sc,so:a,ec:e.ec,eo:c,removeArray:null}}if(this.effectNode=null,s)return E;!i&&E&&(t?this.setRange(E.sc,a,E.ec,c):this.setRange(E.sc,0,E.sc,0)),this.history.push(!1)},detachList:function(e,t){let n={},i=!1,l=!1,s=null,o=null;const a=function(e){return!this.isComponent(e)}.bind(r);for(let c,u,d,h,p=0,g=e.length;p<g;p++){if(d=p===g-1,u=r.getRangeFormatElement(e[p],a),h=r.isList(u),!c&&h)c=u,n={r:c,f:[r.getParentElement(e[p],"LI")]},0===p&&(i=!0);else if(c&&h)if(c!==u){const a=this.detachRangeFormatElement(n.f[0].parentNode,n.f,null,t,!0);u=e[p].parentNode,i&&(s=a.sc,i=!1),d&&(o=a.ec),h?(c=u,n={r:c,f:[r.getParentElement(e[p],"LI")]},d&&(l=!0)):c=null}else n.f.push(r.getParentElement(e[p],"LI")),d&&(l=!0);if(d&&r.isList(c)){const e=this.detachRangeFormatElement(n.f[0].parentNode,n.f,null,t,!0);(l||1===g)&&(o=e.ec),i&&(s=e.sc||o)}}return{sc:s,ec:o}},nodeChange:function(e,t,n,i){this._resetRangeToTextNode();let l=this.getRange_addLine(this.getRange(),null);t=!!(t&&t.length>0)&&t,n=!!(n&&n.length>0)&&n;const s=!e,o=s&&!n&&!t;let c=l.startContainer,u=l.startOffset,d=l.endContainer,h=l.endOffset;if(o&&l.collapsed&&r.isFormatElement(c.parentNode)||c===d&&1===c.nodeType&&r.isNonEditable(c)){const e=c.parentNode;if(!r.isListCell(e)||!r.getValues(e.style).some(function(e){return this._listKebab.indexOf(e)>-1}.bind(this)))return}if(l.collapsed&&!o&&1===c.nodeType&&!r.isBreak(c)&&!r.isComponent(c)){let e=null;const t=c.childNodes[u];t&&(e=t.nextSibling?r.isBreak(t)?t:t.nextSibling:null);const n=r.createTextNode(r.zeroWidthSpace);c.insertBefore(n,e),this.setRange(n,1,n,1),l=this.getRange(),c=l.startContainer,u=l.startOffset,d=l.endContainer,h=l.endOffset}r.isFormatElement(c)&&(c=c.childNodes[u]||c.firstChild,u=0),r.isFormatElement(d)&&(d=d.childNodes[h]||d.lastChild,h=d.textContent.length),s&&(e=r.createElement("DIV"));const p=a.RegExp,g=e.nodeName;if(!o&&c===d&&!n&&e){let t=c,n=0;const i=[],l=e.style;for(let e=0,t=l.length;e<t;e++)i.push(l[e]);const o=e.classList;for(let e=0,t=o.length;e<t;e++)i.push("."+o[e]);if(i.length>0){for(;!r.isFormatElement(t)&&!r.isWysiwygDiv(t);){for(let l=0;l<i.length;l++)if(1===t.nodeType){const o=i[l],a=!!/^\./.test(o)&&new p("\\s*"+o.replace(/^\./,"")+"(\\s+|$)","ig"),r=s?!!t.style[o]:!!t.style[o]&&!!e.style[o]&&t.style[o]===e.style[o],c=!1!==a&&(s?!!t.className.match(a):!!t.className.match(a)&&!!e.className.match(a));(r||c)&&n++}t=t.parentNode}if(n>=i.length)return}}let m,f={},_={},b="",v="",y="";if(t){for(let e,n=0,i=t.length;n<i;n++)e=t[n],/^\./.test(e)?v+=(v?"|":"\\s*(?:")+e.replace(/^\./,""):b+=(b?"|":"(?:;|^|\\s)(?:")+e;b&&(b+=")\\s*:[^;]*\\s*(?:;|$)",b=new p(b,"ig")),v&&(v+=")(?=\\s+|$)",v=new p(v,"ig"))}if(n){y="^(?:"+n[0];for(let e=1;e<n.length;e++)y+="|"+n[e];y+=")$",y=new p(y,"i")}const C=a.Boolean,w={v:!1},E=function(e){const t=e.cloneNode(!1);if(3===t.nodeType||r.isBreak(t))return t;if(o)return null;const n=!y&&s||y&&y.test(t.nodeName);if(n&&!i)return w.v=!0,null;const l=t.style.cssText;let a="";b&&l.length>0&&(a=l.replace(b,"").trim(),a!==l&&(w.v=!0));const c=t.className;let u="";return v&&c.length>0&&(u=c.replace(v,"").trim(),u!==c&&(w.v=!0)),(!s||!v&&c||!b&&l||a||u||!n)&&(a||u||t.nodeName!==g||C(b)!==C(l)||C(v)!==C(c))?(b&&l.length>0&&(t.style.cssText=a),t.style.cssText||t.removeAttribute("style"),v&&c.length>0&&(t.className=u.trim()),t.className.trim()||t.removeAttribute("class"),t.style.cssText||t.className||t.nodeName!==g&&!n?t:(w.v=!0,null)):(w.v=!0,null)},x=this.getSelectedElements(null);l=this.getRange(),c=l.startContainer,u=l.startOffset,d=l.endContainer,h=l.endOffset,r.getFormatElement(c,null)||(c=r.getChildElement(x[0],(function(e){return 3===e.nodeType}),!1),u=0),r.getFormatElement(d,null)||(d=r.getChildElement(x[x.length-1],(function(e){return 3===e.nodeType}),!1),h=d.textContent.length);const S=r.getFormatElement(c,null)===r.getFormatElement(d,null),A=x.length-(S?0:1);m=e.cloneNode(!1);const N=o||s&&function(e){for(let t=0,n=e.length;t<n;t++)if(r._isMaintainedNode(e[t])||r._isSizeNode(e[t]))return!0;return!1}(n),T=s||r._isSizeNode(m),k=this._util_getMaintainedNode.bind(r,N,T),L=this._util_isMaintainedNode.bind(r,N,T);if(S){this._resetCommonListCell(x[0],t)&&(l=this.setRange(c,u,d,h));const e=this._nodeChange_oneLine(x[0],m,E,c,u,d,h,o,s,l.collapsed,w,k,L);f.container=e.startContainer,f.offset=e.startOffset,_.container=e.endContainer,_.offset=e.endOffset,f.container===_.container&&r.onlyZeroWidthSpace(f.container)&&(f.offset=_.offset=1),this._setCommonListStyle(e.ancestor,null)}else{let n=!1;A>0&&this._resetCommonListCell(x[A],t)&&(n=!0),this._resetCommonListCell(x[0],t)&&(n=!0),n&&this.setRange(c,u,d,h),A>0&&(m=e.cloneNode(!1),_=this._nodeChange_endLine(x[A],m,E,d,h,o,s,w,k,L));for(let n,i=A-1;i>0;i--)this._resetCommonListCell(x[i],t),m=e.cloneNode(!1),n=this._nodeChange_middleLine(x[i],m,E,o,s,w,_.container),n.endContainer&&n.ancestor.contains(n.endContainer)&&(_.ancestor=null,_.container=n.endContainer),this._setCommonListStyle(n.ancestor,null);m=e.cloneNode(!1),f=this._nodeChange_startLine(x[0],m,E,c,u,o,s,w,k,L,_.container),f.endContainer&&(_.ancestor=null,_.container=f.endContainer),A<=0?_=f:_.container||(_.ancestor=null,_.container=f.container,_.offset=f.container.textContent.length),this._setCommonListStyle(f.ancestor,null),this._setCommonListStyle(_.ancestor||r.getFormatElement(_.container),null)}this.controllersOff(),this.setRange(f.container,f.offset,_.container,_.offset),this.history.push(!1)},_resetCommonListCell:function(e,t){if(!r.isListCell(e))return;t||(t=this._listKebab);const n=r.getArrayItem(e.childNodes,(function(e){return!r.isBreak(e)}),!0),i=e.style,s=[],o=[],a=r.getValues(i);for(let e=0,n=this._listKebab.length;e<n;e++)a.indexOf(this._listKebab[e])>-1&&t.indexOf(this._listKebab[e])>-1&&(s.push(this._listCamel[e]),o.push(this._listKebab[e]));if(!s.length)return;const c=r.createElement("SPAN");for(let e=0,t=s.length;e<t;e++)c.style[s[e]]=i[o[e]],i.removeProperty(o[e]);let u=c.cloneNode(!1),d=null,h=!1;for(let t,i,o=0,a=n.length;o<a;o++)t=n[o],l._textTagsMap[t.nodeName.toLowerCase()]||(i=r.getValues(t.style),0===i.length||s.some((function(e){return-1===i.indexOf(e)}))&&i.some((function(e){s.indexOf(e)}))?(d=t.nextSibling,u.appendChild(t)):u.childNodes.length>0&&(e.insertBefore(u,d),u=c.cloneNode(!1),d=null,h=!0));return u.childNodes.length>0&&(e.insertBefore(u,d),h=!0),i.length||e.removeAttribute("style"),h},_setCommonListStyle:function(e,t){if(!r.isListCell(e))return;const n=r.getArrayItem((t||e).childNodes,(function(e){return!r.isBreak(e)}),!0);if(!(t=n[0])||n.length>1||1!==t.nodeType)return;const i=t.style,s=e.style,o=t.nodeName.toLowerCase();let a=!1;l._textTagsMap[o]===l._defaultCommand.bold.toLowerCase()&&(s.fontWeight="bold"),l._textTagsMap[o]===l._defaultCommand.italic.toLowerCase()&&(s.fontStyle="italic");const c=r.getValues(i);if(c.length>0)for(let e=0,t=this._listCamel.length;e<t;e++)c.indexOf(this._listKebab[e])>-1&&(s[this._listCamel[e]]=i[this._listCamel[e]],i.removeProperty(this._listKebab[e]),a=!0);if(this._setCommonListStyle(e,t),a&&!i.length){const e=t.childNodes,n=t.parentNode,i=t.nextSibling;for(;e.length>0;)n.insertBefore(e[0],i);r.removeItem(t)}},_stripRemoveNode:function(e){const t=e.parentNode;if(!e||3===e.nodeType||!t)return;const n=e.childNodes;for(;n[0];)t.insertBefore(n[0],e);t.removeChild(e)},_util_getMaintainedNode:function(e,t,n){return!n||e?null:this.getParentElement(n,this._isMaintainedNode.bind(this))||(t?null:this.getParentElement(n,this._isSizeNode.bind(this)))},_util_isMaintainedNode:function(e,t,n){if(!n||e||1!==n.nodeType)return!1;const i=this._isMaintainedNode(n);return this.getParentElement(n,this._isMaintainedNode.bind(this))?i:i||!t&&this._isSizeNode(n)},_nodeChange_oneLine:function(e,t,n,i,l,s,o,c,u,d,h,p,g){let m=i.parentNode;for(;!(m.nextSibling||m.previousSibling||r.isFormatElement(m.parentNode)||r.isWysiwygDiv(m.parentNode))&&m.nodeName!==t.nodeName;)m=m.parentNode;if(!u&&m===s.parentNode&&m.nodeName===t.nodeName&&r.onlyZeroWidthSpace(i.textContent.slice(0,l))&&r.onlyZeroWidthSpace(s.textContent.slice(o))){const n=m.childNodes;let a=!0;for(let e,t,l,o,c=0,u=n.length;c<u;c++)if(e=n[c],o=!r.onlyZeroWidthSpace(e),e!==i)if(e!==s){if(!t&&o||t&&l&&o){a=!1;break}}else l=!0;else t=!0;if(a)return r.copyTagAttributes(m,t),{ancestor:e,startContainer:i,startOffset:l,endContainer:s,endOffset:o}}h.v=!1;const f=e,_=[t],b=e.cloneNode(!1),v=i===s;let y,C,w,E,x,S=i,A=l,N=s,T=o,k=!1,L=!1;const B=a.RegExp;function I(e){const t=new B("(?:;|^|\\s)(?:"+E+"null)\\s*:[^;]*\\s*(?:;|$)","ig");let n="";return t&&e.style.cssText.length>0&&(n=t.test(e.style.cssText)),!n}if(function e(i,l){const s=i.childNodes;for(let i,o=0,a=s.length;o<a;o++){let a=s[o];if(!a)continue;let u,h=l;if(!k&&a===S){let e=b;x=p(a);const s=r.createTextNode(1===S.nodeType?"":S.substringData(0,A)),o=r.createTextNode(1===S.nodeType?"":S.substringData(A,v&&T>=A?T-A:S.data.length-A));if(x){const t=p(l);if(t&&t.parentNode!==e){let n=t,i=null;for(;n.parentNode!==e;){for(l=i=n.parentNode.cloneNode(!1);n.childNodes[0];)i.appendChild(n.childNodes[0]);n.appendChild(i),n=n.parentNode}n.parentNode.appendChild(t)}x=x.cloneNode(!1)}r.onlyZeroWidthSpace(s)||l.appendChild(s);const c=p(l);for(c&&(x=c),x&&(e=x),C=a,y=[],E="";C!==e&&C!==f&&null!==C;)i=g(C)?null:n(C),i&&1===C.nodeType&&I(C)&&(y.push(i),E+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;const u=y.pop()||o;for(w=C=u;y.length>0;)C=y.pop(),w.appendChild(C),w=C;if(t.appendChild(u),e.appendChild(t),x&&!p(N)&&(t=t.cloneNode(!1),b.appendChild(t),_.push(t)),S=o,A=0,k=!0,C!==o&&C.appendChild(S),!v)continue}if(L||a!==N){if(k){if(1===a.nodeType&&!r.isBreak(a)){r._isIgnoreNodeChange(a)?(b.appendChild(a.cloneNode(!0)),d||(t=t.cloneNode(!1),b.appendChild(t),_.push(t))):e(a,a);continue}C=a,y=[],E="";const s=[];for(;null!==C.parentNode&&C!==f&&C!==t;)i=L?C.cloneNode(!1):n(C),1===C.nodeType&&!r.isBreak(a)&&i&&I(C)&&(g(C)?x||s.push(i):y.push(i),E+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;y=y.concat(s);const o=y.pop()||a;for(w=C=o;y.length>0;)C=y.pop(),w.appendChild(C),w=C;if(!g(t.parentNode)||g(o)||r.onlyZeroWidthSpace(t)||(t=t.cloneNode(!1),b.appendChild(t),_.push(t)),L||x||!g(o))o===a?l=L?b:t:L?(b.appendChild(o),l=C):(t.appendChild(o),l=C);else{t=t.cloneNode(!1);const e=o.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);o.appendChild(t),b.appendChild(o),_.push(t),l=t.children.length>0?C:t}if(x&&3===a.nodeType)if(p(a)){const e=r.getParentElement(l,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===b}.bind(r));x.appendChild(e),t=e.cloneNode(!1),_.push(t),b.appendChild(t)}else x=null}u=a.cloneNode(!1),l.appendChild(u),1!==a.nodeType||r.isBreak(a)||(h=u),e(a,h)}else{x=p(a);const e=r.createTextNode(1===N.nodeType?"":N.substringData(T,N.length-T)),l=r.createTextNode(v||1===N.nodeType?"":N.substringData(0,T));if(x?x=x.cloneNode(!1):g(t.parentNode)&&!x&&(t=t.cloneNode(!1),b.appendChild(t),_.push(t)),!r.onlyZeroWidthSpace(e)){C=a,E="",y=[];const t=[];for(;C!==b&&C!==f&&null!==C;)1===C.nodeType&&I(C)&&(g(C)?t.push(C.cloneNode(!1)):y.push(C.cloneNode(!1)),E+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;for(y=y.concat(t),u=w=C=y.pop()||e;y.length>0;)C=y.pop(),w.appendChild(C),w=C;b.appendChild(u),C.textContent=e.data}if(x&&u){const e=p(u);e&&(x=e)}for(C=a,y=[],E="";C!==b&&C!==f&&null!==C;)i=g(C)?null:n(C),i&&1===C.nodeType&&I(C)&&(y.push(i),E+=C.style.cssText.substr(0,C.style.cssText.indexOf(":"))+"|"),C=C.parentNode;const s=y.pop()||l;for(w=C=s;y.length>0;)C=y.pop(),w.appendChild(C),w=C;x?((t=t.cloneNode(!1)).appendChild(s),x.insertBefore(t,x.firstChild),b.appendChild(x),_.push(t),x=null):t.appendChild(s),N=l,T=l.data.length,L=!0,!c&&d&&(t=l,l.textContent=r.zeroWidthSpace),C!==l&&C.appendChild(N)}}}(e,b),u&&!c&&!h.v)return{ancestor:e,startContainer:i,startOffset:l,endContainer:s,endOffset:o};if(c=c&&u)for(let e=0;e<_.length;e++){let t,n,i,l=_[e];if(d)t=r.createTextNode(r.zeroWidthSpace),b.replaceChild(t,l);else{const e=l.childNodes;for(n=e[0];e[0];)i=e[0],b.insertBefore(i,l);r.removeItem(l)}0===e&&(d?S=N=t:(S=n,N=i))}else{if(u)for(let e=0;e<_.length;e++)this._stripRemoveNode(_[e]);d&&(S=N=t)}r.removeEmptyNode(b,t,!1),d&&(A=S.textContent.length,T=N.textContent.length);const R=c||0===N.textContent.length;r.isBreak(N)||0!==N.textContent.length||(r.removeItem(N),N=S),T=R?N.textContent.length:T;const M={s:0,e:0},O=r.getNodePath(S,b,M),z=!N.parentNode;z&&(N=S);const D={s:0,e:0},H=r.getNodePath(N,b,z||R?null:D);A+=M.s,T=d?A:z?S.textContent.length:R?T+M.s:T+D.s;const F=r.mergeSameTags(b,[O,H],!0);return e.parentNode.replaceChild(b,e),S=r.getNodeFromPath(O,b),N=r.getNodeFromPath(H,b),{ancestor:b,startContainer:S,startOffset:A+F[0],endContainer:N,endOffset:T+F[1]}},_nodeChange_startLine:function(e,t,n,i,l,s,o,a,c,u,d){let h=i.parentNode;for(;!(h.nextSibling||h.previousSibling||r.isFormatElement(h.parentNode)||r.isWysiwygDiv(h.parentNode))&&h.nodeName!==t.nodeName;)h=h.parentNode;if(!o&&h.nodeName===t.nodeName&&!r.isFormatElement(h)&&!h.nextSibling&&r.onlyZeroWidthSpace(i.textContent.slice(0,l))){let n=!0,s=i.previousSibling;for(;s;){if(!r.onlyZeroWidthSpace(s)){n=!1;break}s=s.previousSibling}if(n)return r.copyTagAttributes(h,t),{ancestor:e,container:i,offset:l}}a.v=!1;const p=e,g=[t],m=e.cloneNode(!1);let f,_,b,v,y=i,C=l,w=!1;if(function e(i,l){const s=i.childNodes;for(let i,o,a=0,h=s.length;a<h;a++){const h=s[a];if(!h)continue;let E=l;if(w&&!r.isBreak(h)){if(1===h.nodeType){if(r._isIgnoreNodeChange(h)){if(t=t.cloneNode(!1),o=h.cloneNode(!0),m.appendChild(o),m.appendChild(t),g.push(t),d&&h.contains(d)){const e=r.getNodePath(d,h);d=r.getNodeFromPath(e,o)}}else e(h,h);continue}_=h,f=[];const s=[];for(;null!==_.parentNode&&_!==p&&_!==t;)i=n(_),1===_.nodeType&&i&&(u(_)?v||s.push(i):f.push(i)),_=_.parentNode;f=f.concat(s);const a=f.length>0,y=f.pop()||h;for(b=_=y;f.length>0;)_=f.pop(),b.appendChild(_),b=_;if(u(t.parentNode)&&!u(y)&&(t=t.cloneNode(!1),m.appendChild(t),g.push(t)),!v&&u(y)){t=t.cloneNode(!1);const e=y.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);y.appendChild(t),m.appendChild(y),l=u(_)?t:_,g.push(t)}else a?(t.appendChild(y),l=_):l=t;if(v&&3===h.nodeType)if(c(h)){const e=r.getParentElement(l,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===m}.bind(r));v.appendChild(e),t=e.cloneNode(!1),g.push(t),m.appendChild(t)}else v=null}if(w||h!==y)i=w?n(h):h.cloneNode(!1),i&&(l.appendChild(i),1!==h.nodeType||r.isBreak(h)||(E=i)),e(h,E);else{let e=m;v=c(h);const s=r.createTextNode(1===y.nodeType?"":y.substringData(0,C)),o=r.createTextNode(1===y.nodeType?"":y.substringData(C,y.length-C));if(v){const t=c(l);if(t&&t.parentNode!==e){let n=t,i=null;for(;n.parentNode!==e;){for(l=i=n.parentNode.cloneNode(!1);n.childNodes[0];)i.appendChild(n.childNodes[0]);n.appendChild(i),n=n.parentNode}n.parentNode.appendChild(t)}v=v.cloneNode(!1)}r.onlyZeroWidthSpace(s)||l.appendChild(s);const a=c(l);for(a&&(v=a),v&&(e=v),_=l,f=[];_!==e&&null!==_;)i=n(_),1===_.nodeType&&i&&f.push(i),_=_.parentNode;const u=f.pop()||l;for(b=_=u;f.length>0;)_=f.pop(),b.appendChild(_),b=_;u!==l?(t.appendChild(u),l=_):l=t,r.isBreak(h)&&t.appendChild(h.cloneNode(!1)),e.appendChild(t),y=o,C=0,w=!0,l.appendChild(y)}}}(e,m),o&&!s&&!a.v)return{ancestor:e,container:i,offset:l,endContainer:d};if(s=s&&o)for(let e=0;e<g.length;e++){let t=g[e];const n=t.childNodes,i=n[0];for(;n[0];)m.insertBefore(n[0],t);r.removeItem(t),0===e&&(y=i)}else if(o){t=t.firstChild;for(let e=0;e<g.length;e++)this._stripRemoveNode(g[e])}if(s||0!==m.childNodes.length){r.removeEmptyNode(m,t,!1),r.onlyZeroWidthSpace(m.textContent)&&(y=m.firstChild,C=0);const n={s:0,e:0},i=r.getNodePath(y,m,n);C+=n.s;const l=r.mergeSameTags(m,[i],!0);e.parentNode.replaceChild(m,e),y=r.getNodeFromPath(i,m),C+=l[0]}else e.childNodes?y=e.childNodes[0]:(y=r.createTextNode(r.zeroWidthSpace),e.appendChild(y));return{ancestor:m,container:y,offset:C,endContainer:d}},_nodeChange_middleLine:function(e,t,n,i,l,s,o){if(!l){let n=null;o&&e.contains(o)&&(n=r.getNodePath(o,e));const i=e.cloneNode(!0),l=t.nodeName,s=t.style.cssText,a=t.className;let c,u=i.childNodes,d=0,h=u.length;for(;d<h&&(c=u[d],3!==c.nodeType);d++){if(c.nodeName!==l){if(!r.isBreak(c)&&r._isIgnoreNodeChange(c))continue;if(1===h){u=c.childNodes,h=u.length,d=-1;continue}break}c.style.cssText+=s,r.addClass(c,a)}if(h>0&&d===h)return e.innerHTML=i.innerHTML,{ancestor:e,endContainer:n?r.getNodeFromPath(n,e):null}}s.v=!1;const a=e.cloneNode(!1),c=[t];let u=!0;if(function e(i,l){const s=i.childNodes;for(let i,d,h=0,p=s.length;h<p;h++){let p=s[h];if(!p)continue;let g=l;if(r.isBreak(p)||!r._isIgnoreNodeChange(p))i=n(p),i&&(u=!1,l.appendChild(i),1===p.nodeType&&(g=i)),r.isBreak(p)||e(p,g);else if(t.childNodes.length>0&&(a.appendChild(t),t=t.cloneNode(!1)),d=p.cloneNode(!0),a.appendChild(d),a.appendChild(t),c.push(t),l=t,o&&p.contains(o)){const e=r.getNodePath(o,p);o=r.getNodeFromPath(e,d)}}}(e,t),u||l&&!i&&!s.v)return{ancestor:e,endContainer:o};if(a.appendChild(t),i&&l)for(let e=0;e<c.length;e++){let t=c[e];const n=t.childNodes;for(;n[0];)a.insertBefore(n[0],t);r.removeItem(t)}else if(l){t=t.firstChild;for(let e=0;e<c.length;e++)this._stripRemoveNode(c[e])}return r.removeEmptyNode(a,t,!1),r.mergeSameTags(a,null,!0),e.parentNode.replaceChild(a,e),{ancestor:a,endContainer:o}},_nodeChange_endLine:function(e,t,n,i,l,s,o,a,c,u){let d=i.parentNode;for(;!(d.nextSibling||d.previousSibling||r.isFormatElement(d.parentNode)||r.isWysiwygDiv(d.parentNode))&&d.nodeName!==t.nodeName;)d=d.parentNode;if(!o&&d.nodeName===t.nodeName&&!r.isFormatElement(d)&&!d.previousSibling&&r.onlyZeroWidthSpace(i.textContent.slice(l))){let n=!0,s=i.nextSibling;for(;s;){if(!r.onlyZeroWidthSpace(s)){n=!1;break}s=s.nextSibling}if(n)return r.copyTagAttributes(d,t),{ancestor:e,container:i,offset:l}}a.v=!1;const h=e,p=[t],g=e.cloneNode(!1);let m,f,_,b,v=i,y=l,C=!1;if(function e(i,l){const s=i.childNodes;for(let i,o=s.length-1;0<=o;o--){const a=s[o];if(!a)continue;let d=l;if(C&&!r.isBreak(a)){if(1===a.nodeType){if(r._isIgnoreNodeChange(a)){t=t.cloneNode(!1);const e=a.cloneNode(!0);g.insertBefore(e,l),g.insertBefore(t,e),p.push(t)}else e(a,a);continue}f=a,m=[];const s=[];for(;null!==f.parentNode&&f!==h&&f!==t;)i=n(f),i&&1===f.nodeType&&(u(f)?b||s.push(i):m.push(i)),f=f.parentNode;m=m.concat(s);const o=m.length>0,d=m.pop()||a;for(_=f=d;m.length>0;)f=m.pop(),_.appendChild(f),_=f;if(u(t.parentNode)&&!u(d)&&(t=t.cloneNode(!1),g.insertBefore(t,g.firstChild),p.push(t)),!b&&u(d)){t=t.cloneNode(!1);const e=d.childNodes;for(let n=0,i=e.length;n<i;n++)t.appendChild(e[n]);d.appendChild(t),g.insertBefore(d,g.firstChild),p.push(t),l=t.children.length>0?f:t}else o?(t.insertBefore(d,t.firstChild),l=f):l=t;if(b&&3===a.nodeType)if(c(a)){const e=r.getParentElement(l,function(e){return this._isMaintainedNode(e.parentNode)||e.parentNode===g}.bind(r));b.appendChild(e),t=e.cloneNode(!1),p.push(t),g.insertBefore(t,g.firstChild)}else b=null}if(C||a!==v)i=C?n(a):a.cloneNode(!1),i&&(l.insertBefore(i,l.firstChild),1!==a.nodeType||r.isBreak(a)||(d=i)),e(a,d);else{b=c(a);const e=r.createTextNode(1===v.nodeType?"":v.substringData(y,v.length-y)),s=r.createTextNode(1===v.nodeType?"":v.substringData(0,y));if(b){b=b.cloneNode(!1);const e=c(l);if(e&&e.parentNode!==g){let t=e,n=null;for(;t.parentNode!==g;){for(l=n=t.parentNode.cloneNode(!1);t.childNodes[0];)n.appendChild(t.childNodes[0]);t.appendChild(n),t=t.parentNode}t.parentNode.insertBefore(e,t.parentNode.firstChild)}b=b.cloneNode(!1)}else u(t.parentNode)&&!b&&(t=t.cloneNode(!1),g.appendChild(t),p.push(t));for(r.onlyZeroWidthSpace(e)||l.insertBefore(e,l.firstChild),f=l,m=[];f!==g&&null!==f;)i=u(f)?null:n(f),i&&1===f.nodeType&&m.push(i),f=f.parentNode;const o=m.pop()||l;for(_=f=o;m.length>0;)f=m.pop(),_.appendChild(f),_=f;o!==l?(t.insertBefore(o,t.firstChild),l=f):l=t,r.isBreak(a)&&t.appendChild(a.cloneNode(!1)),b?(b.insertBefore(t,b.firstChild),g.insertBefore(b,g.firstChild),b=null):g.insertBefore(t,g.firstChild),v=s,y=s.data.length,C=!0,l.insertBefore(v,l.firstChild)}}}(e,g),o&&!s&&!a.v)return{ancestor:e,container:i,offset:l};if(s=s&&o)for(let e=0;e<p.length;e++){let t=p[e];const n=t.childNodes;let i=null;for(;n[0];)i=n[0],g.insertBefore(i,t);r.removeItem(t),e===p.length-1&&(v=i,y=i.textContent.length)}else if(o){t=t.firstChild;for(let e=0;e<p.length;e++)this._stripRemoveNode(p[e])}if(s||0!==g.childNodes.length){if(!o&&0===t.textContent.length)return r.removeEmptyNode(g,null,!1),{ancestor:null,container:null,offset:0};r.removeEmptyNode(g,t,!1),r.onlyZeroWidthSpace(g.textContent)?(v=g.firstChild,y=v.textContent.length):r.onlyZeroWidthSpace(v)&&(v=t,y=1);const n={s:0,e:0},i=r.getNodePath(v,g,n);y+=n.s;const l=r.mergeSameTags(g,[i],!0);e.parentNode.replaceChild(g,e),v=r.getNodeFromPath(i,g),y+=l[0]}else e.childNodes?v=e.childNodes[0]:(v=r.createTextNode(r.zeroWidthSpace),e.appendChild(v));return{ancestor:g,container:v,offset:1===v.nodeType&&1===y?v.childNodes.length:y}},actionCall:function(t,n,i){if(n){if(/more/i.test(n)){if(i!==this._moreLayerActiveButton){const n=e.element.toolbar.querySelector("."+t);n&&(this._moreLayerActiveButton&&this.moreLayerOff(),this._moreLayerActiveButton=i,n.style.display="block",h._showToolbarBalloon(),h._showToolbarInline()),r.addClass(i,"on")}else{e.element.toolbar.querySelector("."+this._moreLayerActiveButton.getAttribute("data-command"))&&(this.moreLayerOff(),h._showToolbarBalloon(),h._showToolbarInline())}return}if(/container/.test(n)&&(null===this._menuTray[t]||i!==this.containerActiveButton))return void this.callPlugin(t,this.containerOn.bind(this,i),i);if(this.isReadOnly&&r.arrayIncludes(this.resizingDisabledButtons,i))return;if(/submenu/.test(n)&&(null===this._menuTray[t]||i!==this.submenuActiveButton))return void this.callPlugin(t,this.submenuOn.bind(this,i),i);if(/dialog/.test(n))return void this.callPlugin(t,this.plugins[t].open.bind(this),i);/command/.test(n)?this.callPlugin(t,this.plugins[t].action.bind(this),i):/fileBrowser/.test(n)&&this.callPlugin(t,this.plugins[t].open.bind(this,null),i)}else t&&this.commandHandler(i,t);/submenu/.test(n)?this.submenuOff():/command/.test(n)||(this.submenuOff(),this.containerOff())},commandHandler:function(t,n){if(!d.isReadOnly||/copy|cut|selectAll|codeView|fullScreen|print|preview|showBlocks/.test(n))switch(n){case"copy":case"cut":this.execCommand(n);break;case"paste":break;case"selectAll":this.containerOff();const i=e.element.wysiwyg;let s=r.getChildElement(i.firstChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!1)||i.firstChild,o=r.getChildElement(i.lastChild,(function(e){return 0===e.childNodes.length||3===e.nodeType}),!0)||i.lastChild;if(!s||!o)return;if(r.isMedia(s)){const e=this.getFileComponent(s),t=r.createElement("BR"),n=r.createElement(l.defaultTag);n.appendChild(t),s=e?e.component:s,s.parentNode.insertBefore(n,s),s=t}if(r.isMedia(o)){const e=r.createElement("BR"),t=r.createElement(l.defaultTag);t.appendChild(e),i.appendChild(t),o=e}h._showToolbarBalloon(this.setRange(s,0,o,o.textContent.length));break;case"codeView":this.toggleCodeView();break;case"fullScreen":this.toggleFullScreen(t);break;case"indent":case"outdent":this.indent(n);break;case"undo":this.history.undo();break;case"redo":this.history.redo();break;case"removeFormat":this.removeFormat(),this.focus();break;case"print":this.print();break;case"preview":this.preview();break;case"showBlocks":this.toggleDisplayBlocks();break;case"dir":this.setDir(l.rtl?"ltr":"rtl");break;case"dir_ltr":this.setDir("ltr");break;case"dir_rtl":this.setDir("rtl");break;case"save":if("function"==typeof l.callBackSave)l.callBackSave(this.getContents(!1),this._variable.isChanged);else{if(!this._variable.isChanged||"function"!=typeof p.save)throw Error("[SUNEDITOR.core.commandHandler.fail] Please register call back function in creation option. (callBackSave : Function)");p.save()}this._variable.isChanged=!1,e.tool.save&&e.tool.save.setAttribute("disabled",!0);break;default:n=l._defaultCommand[n.toLowerCase()]||n,this.commandMap[n]||(this.commandMap[n]=t);const a=this._variable.currentNodesMap,c=a.indexOf(n)>-1?null:r.createElement(n);let u=n;/^SUB$/i.test(n)&&a.indexOf("SUP")>-1?u="SUP":/^SUP$/i.test(n)&&a.indexOf("SUB")>-1&&(u="SUB"),this.nodeChange(c,this._commandMapStyles[n]||null,[u],!1),this.focus()}},removeFormat:function(){this.nodeChange(null,null,null,null)},indent:function(e){const t=this.getRange(),n=this.getSelectedElements(null),i=[],s="indent"!==e,o=l.rtl?"marginRight":"marginLeft";let a=t.startContainer,c=t.endContainer,u=t.startOffset,d=t.endOffset;for(let e,t,l=0,a=n.length;l<a;l++)e=n[l],r.isListCell(e)&&this.plugins.list?(s||e.previousElementSibling)&&i.push(e):(t=/\d+/.test(e.style[o])?r.getNumber(e.style[o],0):0,s?t-=25:t+=25,r.setStyle(e,o,t<=0?"":t+"px"));i.length>0&&this.plugins.list.editInsideList.call(this,s,i),this.effectNode=null,this.setRange(a,u,c,d),this.history.push(!1)},toggleDisplayBlocks:function(){const t=e.element.wysiwyg;r.toggleClass(t,"se-show-block"),r.hasClass(t,"se-show-block")?r.addClass(this._styleCommandMap.showBlocks,"active"):r.removeClass(this._styleCommandMap.showBlocks,"active"),this._resourcesStateChange()},toggleCodeView:function(){const t=this._variable.isCodeView;this.controllersOff(),r.setDisabledButtons(!t,this.codeViewDisabledButtons),t?(r.isNonEditable(e.element.wysiwygFrame)||this._setCodeDataToEditor(),e.element.wysiwygFrame.scrollTop=0,e.element.code.style.display="none",e.element.wysiwygFrame.style.display="block",this._variable._codeOriginCssText=this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: none"),this._variable._wysiwygOriginCssText=this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: block"),"auto"!==l.height||l.codeMirrorEditor||(e.element.code.style.height="0px"),this._variable.isCodeView=!1,this._variable.isFullScreen||(this._notHideToolbar=!1,/balloon|balloon-always/i.test(l.mode)&&(e.element._arrow.style.display="",this._isInline=!1,this._isBalloon=!0,h._hideToolbar())),this.nativeFocus(),r.removeClass(this._styleCommandMap.codeView,"active"),r.isNonEditable(e.element.wysiwygFrame)||(this.history.push(!1),this.history._resetCachingButton())):(this._setEditorDataToCodeView(),this._variable._codeOriginCssText=this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: block"),this._variable._wysiwygOriginCssText=this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/,"display: none"),this._variable.isFullScreen?e.element.code.style.height="100%":"auto"!==l.height||l.codeMirrorEditor||(e.element.code.style.height=e.element.code.scrollHeight>0?e.element.code.scrollHeight+"px":"auto"),l.codeMirrorEditor&&l.codeMirrorEditor.refresh(),this._variable.isCodeView=!0,this._variable.isFullScreen||(this._notHideToolbar=!0,this._isBalloon&&(e.element._arrow.style.display="none",e.element.toolbar.style.left="",this._isInline=!0,this._isBalloon=!1,h._showToolbarInline())),this._variable._range=null,e.element.code.focus(),r.addClass(this._styleCommandMap.codeView,"active")),this._checkPlaceholder(),this.isReadOnly&&r.setDisabledButtons(!0,this.resizingDisabledButtons),"function"==typeof p.toggleCodeView&&p.toggleCodeView(this._variable.isCodeView,this)},_setCodeDataToEditor:function(){const t=this._getCodeView();if(l.fullPage){const e=this._parser.parseFromString(t,"text/html");if(!this.options.__allowedScriptTag){const t=e.head.children;for(let n=0,i=t.length;n<i;n++)/^script$/i.test(t[n].tagName)&&(e.head.removeChild(t[n]),n--,i--)}let n=e.head.innerHTML;e.head.querySelector('link[rel="stylesheet"]')&&("auto"!==this.options.height||e.head.querySelector("style"))||(n+=r._setIframeCssTags(this.options)),this._wd.head.innerHTML=n,this._wd.body.innerHTML=this.convertContentsForEditor(e.body.innerHTML);const i=e.body.attributes;for(let e=0,t=i.length;e<t;e++)"contenteditable"!==i[e].name&&this._wd.body.setAttribute(i[e].name,i[e].value);if(!r.hasClass(this._wd.body,"sun-editor-editable")){const e=l._editableClass.split(" ");for(let t=0;t<e.length;t++)r.addClass(this._wd.body,l._editableClass[t])}}else e.element.wysiwyg.innerHTML=t.length>0?this.convertContentsForEditor(t):"<"+l.defaultTag+"><br></"+l.defaultTag+">"},_setEditorDataToCodeView:function(){const t=this.convertHTMLForCodeView(e.element.wysiwyg,!1);let n="";if(l.fullPage){const e=r.getAttributesToString(this._wd.body,null);n="<!DOCTYPE html>\n<html>\n"+this._wd.head.outerHTML.replace(/>(?!\n)/g,">\n")+"<body "+e+">\n"+t+"</body>\n</html>"}else n=t;e.element.code.style.display="block",e.element.wysiwygFrame.style.display="none",this._setCodeView(n)},toggleFullScreen:function(t){const n=e.element.topArea,i=e.element.toolbar,s=e.element.editorArea,u=e.element.wysiwygFrame,d=e.element.code,g=this._variable;this.controllersOff();const m="none"===i.style.display||this._isInline&&!this._inlineToolbarAttr.isShow;g.isFullScreen?(g.isFullScreen=!1,u.style.cssText=g._wysiwygOriginCssText,d.style.cssText=g._codeOriginCssText,i.style.cssText="",s.style.cssText=g._editorAreaOriginCssText,n.style.cssText=g._originCssText,o.body.style.overflow=g._bodyOverflow,"auto"!==l.height||l.codeMirrorEditor||h._codeViewAutoHeight(),l.toolbarContainer&&l.toolbarContainer.appendChild(i),l.stickyToolbar>-1&&r.removeClass(i,"se-toolbar-sticky"),g._fullScreenAttrs.sticky&&!l.toolbarContainer&&(g._fullScreenAttrs.sticky=!1,e.element._stickyDummy.style.display="block",r.addClass(i,"se-toolbar-sticky")),this._isInline=g._fullScreenAttrs.inline,this._isBalloon=g._fullScreenAttrs.balloon,this._isInline&&h._showToolbarInline(),l.toolbarContainer&&r.removeClass(i,"se-toolbar-balloon"),h.onScroll_window(),t&&r.changeElement(t.firstElementChild,c.expansion),e.element.topArea.style.marginTop="",r.removeClass(this._styleCommandMap.fullScreen,"active")):(g.isFullScreen=!0,g._fullScreenAttrs.inline=this._isInline,g._fullScreenAttrs.balloon=this._isBalloon,(this._isInline||this._isBalloon)&&(this._isInline=!1,this._isBalloon=!1),l.toolbarContainer&&e.element.relative.insertBefore(i,s),n.style.position="fixed",n.style.top="0",n.style.left="0",n.style.width="100%",n.style.maxWidth="100%",n.style.height="100%",n.style.zIndex="2147483647",""!==e.element._stickyDummy.style.display&&(g._fullScreenAttrs.sticky=!0,e.element._stickyDummy.style.display="none",r.removeClass(i,"se-toolbar-sticky")),g._bodyOverflow=o.body.style.overflow,o.body.style.overflow="hidden",g._editorAreaOriginCssText=s.style.cssText,g._wysiwygOriginCssText=u.style.cssText,g._codeOriginCssText=d.style.cssText,s.style.cssText=i.style.cssText="",u.style.cssText=(u.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)||[""])[0]+l._editorStyles.editor,d.style.cssText=(d.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/)||[""])[0],i.style.width=u.style.height=d.style.height="100%",i.style.position="relative",i.style.display="block",g.innerHeight_fullScreen=a.innerHeight-i.offsetHeight,s.style.height=g.innerHeight_fullScreen-l.fullScreenOffset+"px",t&&r.changeElement(t.firstElementChild,c.reduction),l.iframe&&"auto"===l.height&&(s.style.overflow="auto",this._iframeAutoHeight()),e.element.topArea.style.marginTop=l.fullScreenOffset+"px",r.addClass(this._styleCommandMap.fullScreen,"active")),m&&p.toolbar.hide(),"function"==typeof p.toggleFullScreen&&p.toggleFullScreen(this._variable.isFullScreen,this)},print:function(){const e=r.createElement("IFRAME");e.style.display="none",o.body.appendChild(e);const t=l.printTemplate?l.printTemplate.replace(/\{\{\s*contents\s*\}\}/i,this.getContents(!0)):this.getContents(!0),n=r.getIframeDocument(e),i=this._wd;if(l.iframe){const e=null!==l._printClass?'class="'+l._printClass+'"':l.fullPage?r.getAttributesToString(i.body,["contenteditable"]):'class="'+l._editableClass+'"';n.write("<!DOCTYPE html><html><head>"+i.head.innerHTML+"</head><body "+e+">"+t+"</body></html>")}else{const e=o.head.getElementsByTagName("link"),i=o.head.getElementsByTagName("style");let s="";for(let t=0,n=e.length;t<n;t++)s+=e[t].outerHTML;for(let e=0,t=i.length;e<t;e++)s+=i[e].outerHTML;n.write("<!DOCTYPE html><html><head>"+s+'</head><body class="'+(null!==l._printClass?l._printClass:l._editableClass)+'">'+t+"</body></html>")}this.showLoading(),a.setTimeout((function(){try{if(e.focus(),r.isIE_Edge||r.isChromium||o.documentMode||a.StyleMedia)try{e.contentWindow.document.execCommand("print",!1,null)}catch(t){e.contentWindow.print()}else e.contentWindow.print()}catch(e){throw Error("[SUNEDITOR.core.print.fail] error: "+e)}finally{d.closeLoading(),r.removeItem(e)}}),1e3)},preview:function(){d.submenuOff(),d.containerOff(),d.controllersOff();const e=l.previewTemplate?l.previewTemplate.replace(/\{\{\s*contents\s*\}\}/i,this.getContents(!0)):this.getContents(!0),t=a.open("","_blank");t.mimeType="text/html";const n=this._wd;if(l.iframe){const i=null!==l._printClass?'class="'+l._printClass+'"':l.fullPage?r.getAttributesToString(n.body,["contenteditable"]):'class="'+l._editableClass+'"';t.document.write("<!DOCTYPE html><html><head>"+n.head.innerHTML+"<style>body {overflow:auto !important; margin: 10px auto !important; height:auto !important; outline:1px dashed #ccc;}</style></head><body "+i+">"+e+"</body></html>")}else{const n=o.head.getElementsByTagName("link"),s=o.head.getElementsByTagName("style");let a="";for(let e=0,t=n.length;e<t;e++)a+=n[e].outerHTML;for(let e=0,t=s.length;e<t;e++)a+=s[e].outerHTML;t.document.write('<!DOCTYPE html><html><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><title>'+i.toolbar.preview+"</title>"+a+'</head><body class="'+(null!==l._printClass?l._printClass:l._editableClass)+'" style="margin:10px auto !important; height:auto !important; outline:1px dashed #ccc;">'+e+"</body></html>")}},setDir:function(t){const n="rtl"===t,s=this._prevRtl!==n;this._prevRtl=l.rtl=n,s&&(this.plugins.align&&this.plugins.align.exchangeDir.call(this),e.tool.indent&&r.changeElement(e.tool.indent.firstElementChild,c.indent),e.tool.outdent&&r.changeElement(e.tool.outdent.firstElementChild,c.outdent));const o=e.element;n?(r.addClass(o.topArea,"se-rtl"),r.addClass(o.wysiwygFrame,"se-rtl")):(r.removeClass(o.topArea,"se-rtl"),r.removeClass(o.wysiwygFrame,"se-rtl"));const a=r.getListChildren(o.wysiwyg,(function(e){return r.isFormatElement(e)&&(e.style.marginRight||e.style.marginLeft||e.style.textAlign)}));for(let e,t,n,i=0,l=a.length;i<l;i++)e=a[i],n=e.style.marginRight,t=e.style.marginLeft,(n||t)&&(e.style.marginRight=t,e.style.marginLeft=n),n=e.style.textAlign,"left"===n?e.style.textAlign="right":"right"===n&&(e.style.textAlign="left");const u=e.tool;u.dir&&(r.changeTxt(u.dir.querySelector(".se-tooltip-text"),i.toolbar[l.rtl?"dir_ltr":"dir_rtl"]),r.changeElement(u.dir.firstElementChild,c[l.rtl?"dir_ltr":"dir_rtl"])),u.dir_ltr&&(n?r.removeClass(u.dir_ltr,"active"):r.addClass(u.dir_ltr,"active")),u.dir_rtl&&(n?r.addClass(u.dir_rtl,"active"):r.removeClass(u.dir_rtl,"active"))},setContents:function(t){this.removeRange();const n=null==t?"":this.convertContentsForEditor(t,null,null);if(this._variable.isCodeView){const e=this.convertHTMLForCodeView(n,!1);this._setCodeView(e)}else e.element.wysiwyg.innerHTML=n,this._resetComponents(),this.history.push(!1)},setIframeContents:function(e){if(!l.iframe)return!1;e.head&&(this._wd.head.innerHTML=this.options.__allowedScriptTag?e.head:e.head.replace(this.__scriptTagRegExp,"")),e.body&&(this._wd.body.innerHTML=this.convertContentsForEditor(e.body)),this._resetComponents()},getContents:function(t){const n=this.cleanHTML(e.element.wysiwyg.innerHTML,null,null),i=r.createElement("DIV");i.innerHTML=n;const s=r.getListChildren(i,(function(e){return e.hasAttribute("contenteditable")}));for(let e=0,t=s.length;e<t;e++)s[e].removeAttribute("contenteditable");if(l.fullPage&&!t){const e=r.getAttributesToString(this._wd.body,["contenteditable"]);return"<!DOCTYPE html><html>"+this._wd.head.outerHTML+"<body "+e+">"+i.innerHTML+"</body></html>"}return i.innerHTML},getFullContents:function(e){return'<div class="sun-editor-editable'+(l.rtl?" se-rtl":"")+'">'+this.getContents(e)+"</div>"},_makeLine:function(e,t){const n=l.defaultTag;if(1===e.nodeType){if(this.__disallowedTagNameRegExp.test(e.nodeName))return"";if(/__se__tag/.test(e.className))return e.outerHTML;const i=r.getListChildNodes(e,(function(e){return r.isSpanWithoutAttr(e)&&!r.getParentElement(e,r.isNotCheckingNode)}))||[];for(let e=i.length-1;e>=0;e--)i[e].outerHTML=i[e].innerHTML;return!t||r.isFormatElement(e)||r.isRangeFormatElement(e)||r.isComponent(e)||r.isFigures(e)||r.isAnchor(e)&&r.isMedia(e.firstElementChild)?r.isSpanWithoutAttr(e)?e.innerHTML:e.outerHTML:"<"+n+">"+(r.isSpanWithoutAttr(e)?e.innerHTML:e.outerHTML)+"</"+n+">"}if(3===e.nodeType){if(!t)return r._HTMLConvertor(e.textContent);const i=e.textContent.split(/\n/g);let l="";for(let e,t=0,s=i.length;t<s;t++)e=i[t].trim(),e.length>0&&(l+="<"+n+">"+r._HTMLConvertor(e)+"</"+n+">");return l}return 8===e.nodeType&&this._allowHTMLComments?"\x3c!--"+e.textContent.trim()+"--\x3e":""},_tagConvertor:function(e){if(!this._disallowedTextTagsRegExp)return e;const t=l._textTagsMap;return e.replace(this._disallowedTextTagsRegExp,(function(e,n,i,l){return n+("string"==typeof t[i]?t[i]:i)+(l?" "+l:"")}))},_deleteDisallowedTags:function(e){return e=e.replace(this.__disallowedTagsRegExp,"").replace(/<[a-z0-9]+\:[a-z0-9]+[^>^\/]*>[^>]*<\/[a-z0-9]+\:[a-z0-9]+>/gi,""),/\bfont\b/i.test(this.options._editorTagsWhitelist)||(e=e.replace(/(<\/?)font(\s?)/gi,"$1span$2")),e.replace(this.editorTagsWhitelistRegExp,"").replace(this.editorTagsBlacklistRegExp,"")},_convertFontSize:function(e,t){const n=this._w.Math,i=t.match(/(\d+(?:\.\d+)?)(.+)/),l=i?1*i[1]:r.fontValueMap[t],s=i?i[2]:"rem";let o=l;switch(/em/.test(s)?o=n.round(l/.0625):"pt"===s?o=n.round(1.333*l):"%"===s&&(o=l/100),e){case"em":case"rem":case"%":return(.0625*o).toFixed(2)+e;case"pt":return n.floor(o/1.333)+e;default:return o+e}},_cleanStyle:function(e,t,n){let i=(e.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/)||[])[0];if(/span/i.test(n)&&!i&&(e.match(/<[^\s]+\s(.+)/)||[])[1]){const t=(e.match(/\ssize="([^"]+)"/i)||[])[1],n=(e.match(/\sface="([^"]+)"/i)||[])[1],l=(e.match(/\scolor="([^"]+)"/i)||[])[1];(t||n||l)&&(i='style="'+(t?"font-size:"+this.util.getNumber(t/3.333,1)+"rem;":"")+(n?"font-family:"+n+";":"")+(l?"color:"+l+";":"")+'"')}if(i){t||(t=[]);const e=i.replace(/&quot;/g,"").match(this._cleanStyleRegExp[n]);if(e){const n=[];for(let t,i=0,s=e.length;i<s;i++)if(t=e[i].match(/([a-zA-Z0-9-]+)(:)([^"']+)/),t&&!/inherit|initial|revert|unset/i.test(t[3])){const e=r.kebabToCamelCase(t[1].trim()),i=this.wwComputedStyle[e].replace(/"/g,""),s=t[3].trim();switch(e){case"fontFamily":if(!l.plugins.font||-1===l.font.indexOf(s))continue;break;case"fontSize":if(!l.plugins.fontSize)continue;this._cleanStyleRegExp.fontSizeUnit.test(t[0])||(t[0]=t[0].replace((t[0].match(/:\s*([^;]+)/)||[])[1],this._convertFontSize.bind(this,l.fontSizeUnit)));break;case"color":if(!l.plugins.fontColor||/rgba\(([0-9]+\s*,\s*){3}0\)|windowtext/i.test(s))continue;break;case"backgroundColor":if(!l.plugins.hiliteColor||/rgba\(([0-9]+\s*,\s*){3}0\)|windowtext/i.test(s))continue}i!==s&&n.push(t[0])}n.length>0&&t.push('style="'+n.join(";")+'"')}}return t},_cleanTags:function(e,t,n){if(/^<[a-z0-9]+\:[a-z0-9]+/i.test(t))return t;let i=null;const l=n.match(/(?!<)[a-zA-Z0-9\-]+/)[0].toLowerCase(),s=this._attributesTagsBlacklist[l];t=t.replace(/\s(?:on[a-z]+)\s*=\s*(")[^"]*\1/gi,""),t=s?t.replace(s,""):t.replace(this._attributesBlacklistRegExp,"");const o=this._attributesTagsWhitelist[l];if(i=o?t.match(o):t.match(e?this._attributesWhitelistRegExp:this._attributesWhitelistRegExp_all_data),e||"span"===l||"li"===l||this._cleanStyleRegExp[l])if("a"===l){const e=t.match(/(?:(?:id|name)\s*=\s*(?:"|')[^"']*(?:"|'))/g);e&&(i||(i=[]),i.push(e[0]))}else i&&/style=/i.test(i.toString())||("span"!==l&&"li"!==l||(i=this._cleanStyle(t,i,"span")),this._cleanStyleRegExp[l]?i=this._cleanStyle(t,i,l):/^(P|DIV|H[1-6]|PRE)$/i.test(l)&&(i=this._cleanStyle(t,i,"format")));else{const e=t.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);e&&!i?i=[e[0]]:e&&!i.some((function(e){return/^style/.test(e.trim())}))&&i.push(e[0])}if(r.isFigures(l)){const e=t.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);i||(i=[]),e&&i.push(e[0])}if(i)for(let e,t=0,l=i.length;t<l;t++)e=/^(?:href|src)\s*=\s*('|"|\s)*javascript\s*\:/i.test(i[t].trim())?"":i[t],n+=(/^\s/.test(e)?"":" ")+e;return n},_editFormat:function(e){let t,n="";const i=e.childNodes;for(let e,s=0,o=i.length;s<o;s++)e=i[s],8===e.nodeType?n+="\x3c!-- "+e.textContent+" --\x3e":r.isFormatElement(e)||r.isRangeFormatElement(e)||r.isComponent(e)||/meta/i.test(e.nodeName)?(t&&(n+=t.outerHTML,t=null),n+=e.outerHTML):(t||(t=r.createElement(l.defaultTag)),t.appendChild(e),s--,o--);return t&&(n+=t.outerHTML),o.createRange().createContextualFragment(n)},_convertListCell:function(e){let t="";for(let n,i=0,l=e.length;i<l;i++)n=e[i],1===n.nodeType?r.isList(n)?t+=n.innerHTML:r.isListCell(n)?t+=n.outerHTML:r.isFormatElement(n)?t+="<li>"+(n.innerHTML.trim()||"<br>")+"</li>":r.isRangeFormatElement(n)&&!r.isTable(n)?t+=this._convertListCell(n):t+="<li>"+n.outerHTML+"</li>":t+="<li>"+(n.textContent||"<br>")+"</li>";return t},_isFormatData:function(e){let t=!1;for(let n,i=0,l=e.length;i<l;i++)if(n=e[i],1===n.nodeType&&!r.isTextStyleElement(n)&&!r.isBreak(n)&&!this.__disallowedTagNameRegExp.test(n.nodeName)){t=!0;break}return t},cleanHTML:function(e,t,n){if(!l.strictMode)return e;e=this._deleteDisallowedTags(this._parser.parseFromString(r.htmlCompress(e),"text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g,this._cleanTags.bind(this,!0)).replace(/<br\/?>$/i,"");const i=o.createRange().createContextualFragment(e);try{r._consistencyCheckOfHTML(i,this._htmlCheckWhitelistRegExp,this._htmlCheckBlacklistRegExp,this._classNameFilter)}catch(e){console.warn("[SUNEDITOR.cleanHTML.consistencyCheck.fail] "+e)}if(this.managedTagsInfo&&this.managedTagsInfo.query){const e=i.querySelectorAll(this.managedTagsInfo.query);for(let t,n,i=0,l=e.length;i<l;i++){n=[].slice.call(e[i].classList);for(let l=0,s=n.length;l<s;l++)if(t=this.managedTagsInfo.map[n[l]],t){t(e[i]);break}}}let s=i.childNodes,a="";const c=this._isFormatData(s);c&&(s=this._editFormat(i).childNodes);for(let e,t=0,n=s.length;t<n;t++)e=s[t],this.__allowedScriptRegExp.test(e.nodeName)?a+=e.outerHTML:a+=this._makeLine(e,c);return a=r.htmlRemoveWhiteSpace(a),a?(t&&(a=a.replace("string"==typeof t?r.createTagsWhitelist(t):t,"")),n&&(a=a.replace("string"==typeof n?r.createTagsBlacklist(n):n,""))):a=e,this._tagConvertor(a)},convertContentsForEditor:function(e){if(!l.strictMode)return e;e=this._deleteDisallowedTags(this._parser.parseFromString(r.htmlCompress(e),"text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g,this._cleanTags.bind(this,!0));const t=o.createRange().createContextualFragment(e);try{r._consistencyCheckOfHTML(t,this._htmlCheckWhitelistRegExp,this._htmlCheckBlacklistRegExp,this._classNameFilter)}catch(e){console.warn("[SUNEDITOR.convertContentsForEditor.consistencyCheck.fail] "+e)}if(this.managedTagsInfo&&this.managedTagsInfo.query){const e=t.querySelectorAll(this.managedTagsInfo.query);for(let t,n,i=0,l=e.length;i<l;i++){n=[].slice.call(e[i].classList);for(let l=0,s=n.length;l<s;l++)if(t=this.managedTagsInfo.map[n[l]],t){t(e[i]);break}}}const n=t.childNodes;let i="",s=null;for(let e,t=0;t<n.length;t++)if(e=n[t],this.__allowedScriptRegExp.test(e.nodeName))i+=e.outerHTML;else{if(!(r.isFormatElement(e)||r.isRangeFormatElement(e)||r.isComponent(e)||r.isFigures(e)||8===e.nodeType||/__se__tag/.test(e.className))){if(s||(s=r.createElement(l.defaultTag)),s.appendChild(e),t--,n[t+1]&&!r.isFormatElement(n[t+1]))continue;e=s,s=null}s&&(i+=this._makeLine(s,!0),s=null),i+=this._makeLine(e,!0)}return s&&(i+=this._makeLine(s,!0)),0===i.length?"<"+l.defaultTag+"><br></"+l.defaultTag+">":(i=r.htmlRemoveWhiteSpace(i),this._tagConvertor(i))},convertHTMLForCodeView:function(e,t){let n="";const i=a.RegExp,l=new i("^(BLOCKQUOTE|PRE|TABLE|THEAD|TBODY|TR|TH|TD|OL|UL|IMG|IFRAME|VIDEO|AUDIO|FIGURE|FIGCAPTION|HR|BR|CANVAS|SELECT)$","i"),s="string"==typeof e?o.createRange().createContextualFragment(e):e,c=function(e){return this.isFormatElement(e)||this.isComponent(e)}.bind(r),u=t?"":"\n";let d=t?0:1*this._variable.codeIndent;return d=d>0?new a.Array(d+1).join(" "):"",function e(t,s){const o=t.childNodes,h=l.test(t.nodeName),p=h?s:"";for(let g,m,f,_,b,v,y=0,C=o.length;y<C;y++)g=o[y],_=l.test(g.nodeName),m=_?u:"",f=!c(g)||h||/^(TH|TD)$/i.test(t.nodeName)?"":u,8!==g.nodeType?3!==g.nodeType?0!==g.childNodes.length?g.outerHTML?(b=g.nodeName.toLowerCase(),v=p||_?s:"",n+=(f||(h?"":m))+v+g.outerHTML.match(i("<"+b+"[^>]*>","i"))[0]+m,e(g,s+d),n+=(/\n$/.test(n)?v:"")+"</"+b+">"+(f||m||h||/^(TH|TD)$/i.test(g.nodeName)?u:"")):n+=(new a.XMLSerializer).serializeToString(g):n+=(/^HR$/i.test(g.nodeName)?u:"")+(/^PRE$/i.test(g.parentElement.nodeName)&&/^BR$/i.test(g.nodeName)?"":p)+g.outerHTML+m:r.isList(g.parentElement)||(n+=r._HTMLConvertor(/^\n+$/.test(g.data)?"":g.data)):n+="\n\x3c!-- "+g.textContent.trim()+" --\x3e"+m}(s,""),n.trim()+u},addDocEvent:function(e,t,n){o.addEventListener(e,t,n),l.iframe&&this._wd.addEventListener(e,t)},removeDocEvent:function(e,t){o.removeEventListener(e,t),l.iframe&&this._wd.removeEventListener(e,t)},_charCount:function(e){const t=l.maxCharCount,n=l.charCounterType;let i=0;if(e&&(i=this.getCharLength(e,n)),this._setCharCount(),t>0){let e=!1;const l=p.getCharCount(n);if(l>t){if(e=!0,i>0){this._editorRange();const e=this.getRange(),n=e.endOffset-1,i=this.getSelectionNode().textContent,s=e.endOffset-(l-t);this.getSelectionNode().textContent=i.slice(0,s<0?0:s)+i.slice(e.endOffset,i.length),this.setRange(e.endContainer,n,e.endContainer,n)}}else l+i>t&&(e=!0);if(e&&(this._callCounterBlink(),i>0))return!1}return!0},checkCharCount:function(e,t){if(l.maxCharCount){const n=t||l.charCounterType,i=this.getCharLength("string"==typeof e?e:this._charTypeHTML&&1===e.nodeType?e.outerHTML:e.textContent,n);if(i>0&&i+p.getCharCount(n)>l.maxCharCount)return this._callCounterBlink(),!1}return!0},getCharLength:function(e,t){return/byte/.test(t)?r.getByteLength(e):e.length},resetResponsiveToolbar:function(){d.controllersOff();const t=h._responsiveButtonSize;if(t){let n=0;n=(d._isBalloon||d._isInline)&&"auto"===l.toolbarWidth?e.element.topArea.offsetWidth:e.element.toolbar.offsetWidth;let i="default";for(let e=1,l=t.length;e<l;e++)if(n<t[e]){i=t[e]+"";break}h._responsiveCurrentSize!==i&&(h._responsiveCurrentSize=i,p.setToolbarButtons(h._responsiveButtons[i]))}},_setCharCount:function(){e.element.charCounter&&a.setTimeout(function(e,t){this.textContent&&e&&(this.textContent=e.getCharCount(t.charCounterType))}.bind(e.element.charCounter,p,l),0)},_callCounterBlink:function(){const t=e.element.charWrapper;t&&!r.hasClass(t,"se-blink")&&(r.addClass(t,"se-blink"),a.setTimeout((function(){r.removeClass(t,"se-blink")}),600))},_checkComponents:function(){for(let e=0,t=this._fileInfoPluginsCheck.length;e<t;e++)this._fileInfoPluginsCheck[e]()},_resetComponents:function(){for(let e=0,t=this._fileInfoPluginsReset.length;e<t;e++)this._fileInfoPluginsReset[e]()},_setCodeView:function(t){l.codeMirrorEditor?l.codeMirrorEditor.getDoc().setValue(t):e.element.code.value=t},_getCodeView:function(){return l.codeMirrorEditor?l.codeMirrorEditor.getDoc().getValue():e.element.code.value},_setKeyEffect:function(e){const t=this.commandMap,i=this.activePlugins;for(let l in t)e.indexOf(l)>-1||!r.hasOwn(t,l)||(i.indexOf(l)>-1?n[l].active.call(this,null):t.OUTDENT&&/^OUTDENT$/i.test(l)?r.isImportantDisabled(t.OUTDENT)||t.OUTDENT.setAttribute("disabled",!0):t.INDENT&&/^INDENT$/i.test(l)?r.isImportantDisabled(t.INDENT)||t.INDENT.removeAttribute("disabled"):r.removeClass(t[l],"active"))},_init:function(i,s){const c=a.RegExp;this._ww=l.iframe?e.element.wysiwygFrame.contentWindow:a,this._wd=o,this._charTypeHTML="byte-html"===l.charCounterType,this.wwComputedStyle=a.getComputedStyle(e.element.wysiwyg),this._editorHeight=e.element.wysiwygFrame.offsetHeight,this._editorHeightPadding=r.getNumber(this.wwComputedStyle.getPropertyValue("padding-top"))+r.getNumber(this.wwComputedStyle.getPropertyValue("padding-bottom")),this._classNameFilter=function(e){return this.test(e)?e:""}.bind(l.allowedClassNames);const u=l.__allowedScriptTag?"":"script|";if(this.__scriptTagRegExp=new c("<(script)[^>]*>([\\s\\S]*?)<\\/\\1>|<script[^>]*\\/?>","gi"),this.__disallowedTagsRegExp=new c("<("+u+"style)[^>]*>([\\s\\S]*?)<\\/\\1>|<("+u+"style)[^>]*\\/?>","gi"),this.__disallowedTagNameRegExp=new c("^("+u+"meta|link|style|[a-z]+:[a-z]+)$","i"),this.__allowedScriptRegExp=new c("^"+(l.__allowedScriptTag?"script":"")+"$","i"),!l.iframe&&"function"==typeof a.ShadowRoot){let t=e.element.wysiwygFrame;for(;t;){if(t.shadowRoot){this._shadowRoot=t.shadowRoot;break}if(t instanceof a.ShadowRoot){this._shadowRoot=t;break}t=t.parentNode}this._shadowRoot&&(this._shadowRootControllerEventTarget=[])}const d=a.Object.keys(l._textTagsMap),h=l.addTagsWhitelist?l.addTagsWhitelist.split("|").filter((function(e){return/b|i|ins|s|strike/i.test(e)})):[];for(let e=0;e<h.length;e++)d.splice(d.indexOf(h[e].toLowerCase()),1);this._disallowedTextTagsRegExp=0===d.length?null:new c("(<\\/?)("+d.join("|")+")\\b\\s*([^>^<]+)?\\s*(?=>)","gi");const p=function(e,t){return e?"*"===e?"[a-z-]+":t?e+"|"+t:e:"^"},g="contenteditable|colspan|rowspan|target|href|download|rel|src|alt|class|type|controls|origin-size";this._allowHTMLComments=l._editorTagsWhitelist.indexOf("//")>-1||"*"===l._editorTagsWhitelist,this._htmlCheckWhitelistRegExp=new c("^("+p(l._editorTagsWhitelist.replace("|//",""),"")+")$","i"),this._htmlCheckBlacklistRegExp=new c("^("+(l.tagsBlacklist||"^")+")$","i"),this.editorTagsWhitelistRegExp=r.createTagsWhitelist(p(l._editorTagsWhitelist.replace("|//","|\x3c!--|--\x3e"),"")),this.editorTagsBlacklistRegExp=r.createTagsBlacklist(l.tagsBlacklist.replace("|//","|\x3c!--|--\x3e")),this.pasteTagsWhitelistRegExp=r.createTagsWhitelist(p(l.pasteTagsWhitelist,"")),this.pasteTagsBlacklistRegExp=r.createTagsBlacklist(l.pasteTagsBlacklist);const m='\\s*=\\s*(")[^"]*\\1',f=l.attributesWhitelist;let _={},b="";if(f)for(let e in f)r.hasOwn(f,e)&&!/^on[a-z]+$/i.test(f[e])&&("all"===e?b=p(f[e],g):_[e]=new c("\\s(?:"+p(f[e],"")+")"+m,"ig"));this._attributesWhitelistRegExp=new c("\\s(?:"+(b||g+"|data-format|data-size|data-file-size|data-file-name|data-origin|data-align|data-image-link|data-rotate|data-proportion|data-percentage|data-exp|data-font-size")+")"+m,"ig"),this._attributesWhitelistRegExp_all_data=new c("\\s(?:"+(b||g)+"|data-[a-z0-9\\-]+)"+m,"ig"),this._attributesTagsWhitelist=_;const v=l.attributesBlacklist;if(_={},b="",v)for(let e in v)r.hasOwn(v,e)&&("all"===e?b=p(v[e],""):_[e]=new c("\\s(?:"+p(v[e],"")+")"+m,"ig"));this._attributesBlacklistRegExp=new c("\\s(?:"+(b||"^")+")"+m,"ig"),this._attributesTagsBlacklist=_,this._isInline=/inline/i.test(l.mode),this._isBalloon=/balloon|balloon-always/i.test(l.mode),this._isBalloonAlways=/balloon-always/i.test(l.mode),this._cachingButtons(),this._fileInfoPluginsCheck=[],this._fileInfoPluginsReset=[],this.managedTagsInfo={query:"",map:{}};const y=[];this.activePlugins=[],this._fileManager.tags=[],this._fileManager.pluginMap={};let C,w,E=[];for(let e in n)if(r.hasOwn(n,e)){if(C=n[e],w=t[e],(C.active||C.action)&&w&&this.callPlugin(e,null,w),"function"==typeof C.checkFileInfo&&"function"==typeof C.resetFileInfo&&(this.callPlugin(e,null,w),this._fileInfoPluginsCheck.push(C.checkFileInfo.bind(this)),this._fileInfoPluginsReset.push(C.resetFileInfo.bind(this))),a.Array.isArray(C.fileTags)){const t=C.fileTags;this.callPlugin(e,null,w),this._fileManager.tags=this._fileManager.tags.concat(t),E.push(e);for(let n=0,i=t.length;n<i;n++)this._fileManager.pluginMap[t[n].toLowerCase()]=e}if(C.managedTags){const e=C.managedTags();y.push("."+e.className),this.managedTagsInfo.map[e.className]=e.method.bind(this)}}this.managedTagsInfo.query=y.toString(),this._fileManager.queryString=this._fileManager.tags.join(","),this._fileManager.regExp=new c("^("+(this._fileManager.tags.join("|")||"^")+")$","i"),this._fileManager.pluginRegExp=new c("^("+(0===E.length?"^":E.join("|"))+")$","i"),this._variable._originCssText=e.element.topArea.style.cssText,this._placeholder=e.element.placeholder,this._lineBreaker=e.element.lineBreaker,this._lineBreakerButton=this._lineBreaker.querySelector("button"),this.history=function(e,t){const n=e._w,i=e.util,l=e.options.historyStackDelayTime;let s=e.context.element,o=e.context.tool.undo,a=e.context.tool.redo,r=null,c=0,u=[];function d(){const n=u[c];s.wysiwyg.innerHTML=n.contents,e.setRange(i.getNodeFromPath(n.s.path,s.wysiwyg),n.s.offset,i.getNodeFromPath(n.e.path,s.wysiwyg),n.e.offset),e.focus(),u.length<=1?(o&&o.setAttribute("disabled",!0),a&&a.setAttribute("disabled",!0)):0===c?(o&&o.setAttribute("disabled",!0),a&&a.removeAttribute("disabled")):c===u.length-1?(o&&o.removeAttribute("disabled"),a&&a.setAttribute("disabled",!0)):(o&&o.removeAttribute("disabled"),a&&a.removeAttribute("disabled")),e.controllersOff(),e._checkComponents(),e._setCharCount(),e._resourcesStateChange(),t()}function h(){e._checkComponents();const n=s.wysiwyg.innerHTML;if(!n||u[c]&&n===u[c].contents)return;c++;const l=e._variable._range;u.length>c&&(u=u.slice(0,c),a&&a.setAttribute("disabled",!0)),u[c]=l?{contents:n,s:{path:i.getNodePath(l.startContainer,null,null),offset:l.startOffset},e:{path:i.getNodePath(l.endContainer,null,null),offset:l.endOffset}}:{contents:n,s:{path:[0,0],offset:[0,0]},e:{path:0,offset:0}},1===c&&o&&o.removeAttribute("disabled"),e._setCharCount(),t()}return{stack:u,push:function(t){n.setTimeout(e._resourcesStateChange.bind(e));const i="number"==typeof t?t>0?t:0:t?l:0;i&&!r||(n.clearTimeout(r),i)?r=n.setTimeout((function(){n.clearTimeout(r),r=null,h()}),i):h()},undo:function(){c>0&&(c--,d())},redo:function(){u.length-1>c&&(c++,d())},go:function(e){c=e<0?u.length-1:e,d()},getCurrentIndex:function(){return c},reset:function(n){o&&o.setAttribute("disabled",!0),a&&a.setAttribute("disabled",!0),e._variable.isChanged=!1,e.context.tool.save&&e.context.tool.save.setAttribute("disabled",!0),u.splice(0),c=0,u[c]={contents:e.getContents(!0),s:{path:[0,0],offset:0},e:{path:[0,0],offset:0}},n||t()},_resetCachingButton:function(){s=e.context.element,o=e.context.tool.undo,a=e.context.tool.redo,0===c?(o&&o.setAttribute("disabled",!0),a&&c===u.length-1&&a.setAttribute("disabled",!0),e._variable.isChanged=!1,e.context.tool.save&&e.context.tool.save.setAttribute("disabled",!0)):c===u.length-1&&a&&a.setAttribute("disabled",!0)},_destroy:function(){r&&n.clearTimeout(r),u=null}}}(this,this._onChange_historyStack.bind(this)),this.addModule([I]),l.iframe&&(this._wd=e.element.wysiwygFrame.contentDocument,e.element.wysiwyg=this._wd.body,l._editorStyles.editor&&(e.element.wysiwyg.style.cssText=l._editorStyles.editor),"auto"===l.height&&(this._iframeAuto=this._wd.body)),this._initWysiwygArea(i,s)},_cachingButtons:function(){this.codeViewDisabledButtons=e.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~="se-code-view-enabled"]):not([data-display="MORE"])'),this.resizingDisabledButtons=e.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~="se-resizing-enabled"]):not([data-display="MORE"])');const t=e.tool,n=this.commandMap;n.INDENT=t.indent,n.OUTDENT=t.outdent,n[l.textTags.bold.toUpperCase()]=t.bold,n[l.textTags.underline.toUpperCase()]=t.underline,n[l.textTags.italic.toUpperCase()]=t.italic,n[l.textTags.strike.toUpperCase()]=t.strike,n[l.textTags.sub.toUpperCase()]=t.subscript,n[l.textTags.sup.toUpperCase()]=t.superscript,this._styleCommandMap={fullScreen:t.fullScreen,showBlocks:t.showBlocks,codeView:t.codeView},this._saveButtonStates()},_initWysiwygArea:function(t,n){e.element.wysiwyg.innerHTML=t?n:this.convertContentsForEditor(("string"==typeof n?n:/^TEXTAREA$/i.test(e.element.originElement.nodeName)?e.element.originElement.value:e.element.originElement.innerHTML)||"")},_resourcesStateChange:function(){this._iframeAutoHeight(),this._checkPlaceholder()},_onChange_historyStack:function(){this.hasFocus&&h._applyTagEffects(),this._variable.isChanged=!0,e.tool.save&&e.tool.save.removeAttribute("disabled"),p.onChange&&p.onChange(this.getContents(!0),this),"block"===e.element.toolbar.style.display&&h._showToolbarBalloon()},_iframeAutoHeight:function(){this._iframeAuto?a.setTimeout((function(){const t=d._iframeAuto.offsetHeight;e.element.wysiwygFrame.style.height=t+"px",r.isResizeObserverSupported||d.__callResizeFunction(t,null)})):r.isResizeObserverSupported||d.__callResizeFunction(e.element.wysiwygFrame.offsetHeight,null)},__callResizeFunction:function(e,t){e=-1===e?t.borderBoxSize&&t.borderBoxSize[0]?t.borderBoxSize[0].blockSize:t.contentRect.height+this._editorHeightPadding:e,this._editorHeight!==e&&("function"==typeof p.onResizeEditor&&p.onResizeEditor(e,this._editorHeight,d,t),this._editorHeight=e)},_checkPlaceholder:function(){if(this._placeholder){if(this._variable.isCodeView)return void(this._placeholder.style.display="none");const t=e.element.wysiwyg;!r.onlyZeroWidthSpace(t.textContent)||t.querySelector(r._allowedEmptyNodeList)||(t.innerText.match(/\n/g)||"").length>1?this._placeholder.style.display="none":this._placeholder.style.display="block"}},_setDefaultFormat:function(e){if(this._fileManager.pluginRegExp.test(this.currentControllerName))return;const t=this.getRange(),n=t.commonAncestorContainer,i=t.startContainer,s=r.getRangeFormatElement(n,null);let o,a,c;const u=r.getParentElement(n,r.isComponent);if(!u||r.isTable(u)){if(1===n.nodeType&&"true"===n.getAttribute("data-se-embed")){let e=n.nextElementSibling;return r.isFormatElement(e)||(e=this.appendFormatTag(n,l.defaultTag)),void this.setRange(e.firstChild,0,e.firstChild,0)}if(!r.isRangeFormatElement(i)&&!r.isWysiwygDiv(i)||!r.isComponent(i.children[t.startOffset])&&!r.isComponent(i.children[t.startOffset-1])){if(r.getParentElement(n,r.isNotCheckingNode))return null;if(s)return c=r.createElement(e||l.defaultTag),c.innerHTML=s.innerHTML,0===c.childNodes.length&&(c.innerHTML=r.zeroWidthSpace),s.innerHTML=c.outerHTML,c=s.firstChild,o=r.getEdgeChildNodes(c,null).sc,o||(o=r.createTextNode(r.zeroWidthSpace),c.insertBefore(o,c.firstChild)),a=o.textContent.length,void this.setRange(o,a,o,a);if(r.isRangeFormatElement(n)&&n.childNodes.length<=1){let e=null;return 1===n.childNodes.length&&r.isBreak(n.firstChild)?e=n.firstChild:(e=r.createTextNode(r.zeroWidthSpace),n.appendChild(e)),void this.setRange(e,1,e,1)}try{if(3===n.nodeType&&(c=r.createElement(e||l.defaultTag),n.parentNode.insertBefore(c,n),c.appendChild(n)),r.isBreak(c.nextSibling)&&r.removeItem(c.nextSibling),r.isBreak(c.previousSibling)&&r.removeItem(c.previousSibling),r.isBreak(o)){const e=r.createTextNode(r.zeroWidthSpace);o.parentNode.insertBefore(e,o),o=e}}catch(t){this.execCommand("formatBlock",!1,e||l.defaultTag),this.removeRange(),this._editorRange()}if(r.isBreak(c.nextSibling)&&r.removeItem(c.nextSibling),r.isBreak(c.previousSibling)&&r.removeItem(c.previousSibling),r.isBreak(o)){const e=r.createTextNode(r.zeroWidthSpace);o.parentNode.insertBefore(e,o),o=e}this.effectNode=null,this.nativeFocus()}}},_setOptionsInit:function(t,n){this.context=e=B(t.originElement,this._getConstructed(t),l),this._componentsInfoReset=!0,this._editorInit(!0,n)},_editorInit:function(t,n){this._init(t,n),h._addEvent(),this._setCharCount(),h._offStickyToolbar(),h.onResize_window(),e.element.toolbar.style.visibility="";const i=l.frameAttrbutes;for(let t in i)e.element.wysiwyg.setAttribute(t,i[t]);this._checkComponents(),this._componentsInfoInit=!1,this._componentsInfoReset=!1,this.history.reset(!0),a.setTimeout((function(){"function"==typeof d._resourcesStateChange&&(h._resizeObserver&&h._resizeObserver.observe(e.element.wysiwygFrame),h._toolbarObserver&&h._toolbarObserver.observe(e.element._toolbarShadow),d._resourcesStateChange(),"function"==typeof p.onload&&p.onload(d,t))}))},_getConstructed:function(e){return{_top:e.topArea,_relative:e.relative,_toolBar:e.toolbar,_toolbarShadow:e._toolbarShadow,_menuTray:e._menuTray,_editorArea:e.editorArea,_wysiwygArea:e.wysiwygFrame,_codeArea:e.code,_placeholder:e.placeholder,_resizingBar:e.resizingBar,_navigation:e.navigation,_charCounter:e.charCounter,_charWrapper:e.charWrapper,_loading:e.loading,_lineBreaker:e.lineBreaker,_lineBreaker_t:e.lineBreaker_t,_lineBreaker_b:e.lineBreaker_b,_resizeBack:e.resizeBackground,_stickyDummy:e._stickyDummy,_arrow:e._arrow}}},h={_IEisComposing:!1,_lineBreakerBind:null,_responsiveCurrentSize:"default",_responsiveButtonSize:null,_responsiveButtons:null,_cursorMoveKeyCode:new a.RegExp("^(8|3[2-9]|40|46)$"),_directionKeyCode:new a.RegExp("^(8|13|3[2-9]|40|46)$"),_nonTextKeyCode:new a.RegExp("^(8|13|1[6-9]|20|27|3[3-9]|40|45|46|11[2-9]|12[0-3]|144|145)$"),_historyIgnoreKeyCode:new a.RegExp("^(1[6-9]|20|27|3[3-9]|40|45|11[2-9]|12[0-3]|144|145)$"),_onButtonsCheck:new a.RegExp("^("+a.Object.keys(l._textTagsMap).join("|")+")$","i"),_frontZeroWidthReg:new a.RegExp(r.zeroWidthSpace+"+",""),_keyCodeShortcut:{65:"A",66:"B",83:"S",85:"U",73:"I",89:"Y",90:"Z",219:"[",221:"]"},_shortcutCommand:function(e,t){let n=null;const i=h._keyCodeShortcut[e];switch(i){case"A":n="selectAll";break;case"B":-1===l.shortcutsDisable.indexOf("bold")&&(n="bold");break;case"S":t&&-1===l.shortcutsDisable.indexOf("strike")?n="strike":t||-1!==l.shortcutsDisable.indexOf("save")||(n="save");break;case"U":-1===l.shortcutsDisable.indexOf("underline")&&(n="underline");break;case"I":-1===l.shortcutsDisable.indexOf("italic")&&(n="italic");break;case"Z":-1===l.shortcutsDisable.indexOf("undo")&&(n=t?"redo":"undo");break;case"Y":-1===l.shortcutsDisable.indexOf("undo")&&(n="redo");break;case"[":-1===l.shortcutsDisable.indexOf("indent")&&(n=l.rtl?"indent":"outdent");break;case"]":-1===l.shortcutsDisable.indexOf("indent")&&(n=l.rtl?"outdent":"indent")}return n?(d.commandHandler(d.commandMap[n],n),!0):!!i},_applyTagEffects:function(){let t=d.getSelectionNode();if(t===d.effectNode)return;d.effectNode=t;const i=l.rtl?"marginRight":"marginLeft",s=d.commandMap,o=h._onButtonsCheck,a=[],c=[],u=d.activePlugins,p=u.length;let g="";for(;t.firstChild;)t=t.firstChild;for(let e=t;!r.isWysiwygDiv(e)&&e;e=e.parentNode)if(1===e.nodeType&&!r.isBreak(e)){if(g=e.nodeName.toUpperCase(),c.push(g),!d.isReadOnly)for(let t,i=0;i<p;i++)t=u[i],-1===a.indexOf(t)&&n[t].active.call(d,e)&&a.push(t);r.isFormatElement(e)?(-1===a.indexOf("OUTDENT")&&s.OUTDENT&&!r.isImportantDisabled(s.OUTDENT)&&(r.isListCell(e)||e.style[i]&&r.getNumber(e.style[i],0)>0)&&(a.push("OUTDENT"),s.OUTDENT.removeAttribute("disabled")),-1===a.indexOf("INDENT")&&s.INDENT&&!r.isImportantDisabled(s.INDENT)&&(a.push("INDENT"),r.isListCell(e)&&!e.previousElementSibling?s.INDENT.setAttribute("disabled",!0):s.INDENT.removeAttribute("disabled"))):o&&o.test(g)&&(a.push(g),r.addClass(s[g],"active"))}d._setKeyEffect(a),d._variable.currentNodes=c.reverse(),d._variable.currentNodesMap=a,l.showPathLabel&&(e.element.navigation.textContent=d._variable.currentNodes.join(" > "))},_buttonsEventHandler:function(e){let t=e.target;if(d._bindControllersOff&&e.stopPropagation(),/^(input|textarea|select|option)$/i.test(t.nodeName)?d._antiBlur=!1:e.preventDefault(),r.getParentElement(t,".se-submenu"))e.stopPropagation(),d._notHideToolbar=!0;else{let n=t.getAttribute("data-command"),i=t.className;for(;!n&&!/se-menu-list/.test(i)&&!/sun-editor-common/.test(i);)t=t.parentNode,n=t.getAttribute("data-command"),i=t.className;n!==d._submenuName&&n!==d._containerName||e.stopPropagation()}},addGlobalEvent:(e,t,n)=>(l.iframe&&d._ww.addEventListener(e,t,n),d._w.addEventListener(e,t,n),{type:e,listener:t,useCapture:n}),removeGlobalEvent(e,t,n){e&&("object"==typeof e&&(t=e.listener,n=e.useCapture,e=e.type),l.iframe&&d._ww.removeEventListener(e,t,n),d._w.removeEventListener(e,t,n))},onClick_toolbar:function(e){let t=e.target,n=t.getAttribute("data-display"),i=t.getAttribute("data-command"),l=t.className;for(d.controllersOff();t.parentNode&&!i&&!/se-menu-list/.test(l)&&!/se-toolbar/.test(l);)t=t.parentNode,i=t.getAttribute("data-command"),n=t.getAttribute("data-display"),l=t.className;(i||n)&&(t.disabled||d.actionCall(i,n,t))},__selectionSyncEvent:null,onMouseDown_wysiwyg:function(t){if(d.isReadOnly||r.isNonEditable(e.element.wysiwyg))return;if(r._isExcludeSelectionElement(t.target))return void t.preventDefault();if(h.removeGlobalEvent(h.__selectionSyncEvent),h.__selectionSyncEvent=h.addGlobalEvent("mouseup",(function(){d._editorRange(),h.removeGlobalEvent(h.__selectionSyncEvent)})),"function"==typeof p.onMouseDown&&!1===p.onMouseDown(t,d))return;const n=r.getParentElement(t.target,r.isCell);if(n){const e=d.plugins.table;e&&n!==e._fixedCell&&!e._shift&&d.callPlugin("table",(function(){e.onTableCellMultiSelect.call(d,n,!1)}),null)}d._isBalloon&&h._hideToolbar()},onClick_wysiwyg:function(t){const n=t.target;if(d.isReadOnly)return t.preventDefault(),r.isAnchor(n)&&a.open(n.href,n.target),!1;if(r.isNonEditable(e.element.wysiwyg))return;if("function"==typeof p.onClick&&!1===p.onClick(t,d))return;const i=d.getFileComponent(n);if(i)return t.preventDefault(),void d.selectComponent(i.target,i.pluginName);const s=r.getParentElement(n,"FIGCAPTION");if(s&&r.isNonEditable(s)&&(t.preventDefault(),s.focus(),d._isInline&&!d._inlineToolbarAttr.isShow)){h._showToolbarInline();const e=function(){h._hideToolbar(),s.removeEventListener("blur",e)};s.addEventListener("blur",e)}if(d._editorRange(),3===t.detail){let e=d.getRange();r.isFormatElement(e.endContainer)&&0===e.endOffset&&(e=d.setRange(e.startContainer,e.startOffset,e.startContainer,e.startContainer.length),d._rangeInfo(e,d.getSelection()))}const o=d.getSelectionNode(),c=r.getFormatElement(o,null),u=r.getRangeFormatElement(o,null);let g=o;for(;g.firstChild;)g=g.firstChild;const m=d.getFileComponent(g);if(m){const e=d.getRange();u||e.startContainer!==e.endContainer||d.selectComponent(m.target,m.pluginName)}else d.currentFileComponentInfo&&d.controllersOff();if(c||r.isNonEditable(n)||r.isList(u))h._applyTagEffects();else{const e=d.getRange();if(r.getFormatElement(e.startContainer)===r.getFormatElement(e.endContainer))if(r.isList(u)){t.preventDefault();const e=r.createElement("LI"),n=o.nextElementSibling;e.appendChild(o),u.insertBefore(e,n),d.focus()}else r.isWysiwygDiv(o)||r.isComponent(o)||r.isTable(o)&&!r.isCell(o)||null===d._setDefaultFormat(r.isRangeFormatElement(u)?"DIV":l.defaultTag)?h._applyTagEffects():(t.preventDefault(),d.focus())}d._isBalloon&&a.setTimeout(h._toggleToolbarBalloon)},_balloonDelay:null,_showToolbarBalloonDelay:function(){h._balloonDelay&&a.clearTimeout(h._balloonDelay),h._balloonDelay=a.setTimeout(function(){a.clearTimeout(this._balloonDelay),this._balloonDelay=null,this._showToolbarBalloon()}.bind(h),350)},_toggleToolbarBalloon:function(){d._editorRange();const e=d.getRange();d._bindControllersOff||!d._isBalloonAlways&&e.collapsed?h._hideToolbar():h._showToolbarBalloon(e)},_showToolbarBalloon:function(t){if(!d._isBalloon)return;const n=t||d.getRange(),i=e.element.toolbar,s=e.element.topArea,o=d.getSelection();let c;if(d._isBalloonAlways&&n.collapsed)c=!0;else if(o.focusNode===o.anchorNode)c=o.focusOffset<o.anchorOffset;else{const e=r.getListChildNodes(n.commonAncestorContainer,null);c=r.getArrayIndex(e,o.focusNode)<r.getArrayIndex(e,o.anchorNode)}let u=n.getClientRects();u=u[c?0:u.length-1];const p=d.getGlobalScrollOffset();let g=p.left,m=p.top;const f=s.offsetWidth,_=h._getEditorOffsets(null),b=_.top,v=_.left;if(i.style.top="-10000px",i.style.visibility="hidden",i.style.display="block",!u){const t=d.getSelectionNode();if(r.isFormatElement(t)){const e=r.createTextNode(r.zeroWidthSpace);d.insertNode(e,null,!1),d.setRange(e,1,e,1),d._editorRange(),u=d.getRange().getClientRects(),u=u[c?0:u.length-1]}if(!u){const n=r.getOffset(t,e.element.wysiwygFrame);u={left:n.left,top:n.top,right:n.left,bottom:n.top+t.offsetHeight,noText:!0},g=0,m=0}c=!0}const y=a.Math.round(e.element._arrow.offsetWidth/2),C=i.offsetWidth,w=i.offsetHeight,E=/iframe/i.test(e.element.wysiwygFrame.nodeName)?e.element.wysiwygFrame.getClientRects()[0]:null;if(E&&(u={left:u.left+E.left,top:u.top+E.top,right:u.right+E.right-E.width,bottom:u.bottom+E.bottom-E.height}),h._setToolbarOffset(c,u,i,v,f,g,m,b,y),C===i.offsetWidth&&w===i.offsetHeight||h._setToolbarOffset(c,u,i,v,f,g,m,b,y),l.toolbarContainer){const e=s.parentElement;let t=l.toolbarContainer,n=t.offsetLeft,o=t.offsetTop;for(;!t.parentElement.contains(e)||!/^(BODY|HTML)$/i.test(t.parentElement.nodeName);)t=t.offsetParent,n+=t.offsetLeft,o+=t.offsetTop;i.style.left=i.offsetLeft-n+s.offsetLeft+"px",i.style.top=i.offsetTop-o+s.offsetTop+"px"}i.style.visibility=""},_setToolbarOffset:function(t,n,i,l,s,c,u,d,p){const g=i.offsetWidth,m=n.noText&&!t?0:i.offsetHeight,f=(t?n.left:n.right)-l-g/2+c,_=f+g-s;let b=(t?n.top-m-p:n.bottom+p)-(n.noText?0:d)+u,v=f<0?1:_<0?f:f-_-1-1,y=!1;const C=b+(t?h._getEditorOffsets(null).top:i.offsetHeight-e.element.wysiwyg.offsetHeight);!t&&C>0&&h._getPageBottomSpace()<C?(t=!0,y=!0):t&&o.documentElement.offsetTop>C&&(t=!1,y=!0),y&&(b=(t?n.top-m-p:n.bottom+p)-(n.noText?0:d)+u),i.style.left=a.Math.floor(v)+"px",i.style.top=a.Math.floor(b)+"px",t?(r.removeClass(e.element._arrow,"se-arrow-up"),r.addClass(e.element._arrow,"se-arrow-down"),e.element._arrow.style.top=m+"px"):(r.removeClass(e.element._arrow,"se-arrow-down"),r.addClass(e.element._arrow,"se-arrow-up"),e.element._arrow.style.top=-p+"px");const w=a.Math.floor(g/2+(f-v));e.element._arrow.style.left=(w+p>i.offsetWidth?i.offsetWidth-p:w<p?p:w)+"px"},_showToolbarInline:function(){if(!d._isInline)return;const t=e.element.toolbar;l.toolbarContainer?t.style.position="relative":t.style.position="absolute",t.style.visibility="hidden",t.style.display="block",d._inlineToolbarAttr.width=t.style.width=l.toolbarWidth,d._inlineToolbarAttr.top=t.style.top=(l.toolbarContainer?0:-1-t.offsetHeight)+"px","function"==typeof p.showInline&&p.showInline(t,e,d),h.onScroll_window(),d._inlineToolbarAttr.isShow=!0,t.style.visibility=""},_hideToolbar:function(){d._notHideToolbar||d._variable.isFullScreen||(e.element.toolbar.style.display="none",d._inlineToolbarAttr.isShow=!1)},onInput_wysiwyg:function(e){if(/AUDIO/.test(e.target.nodeName))return!1;if(d.isReadOnly||d.isDisabled)return e.preventDefault(),e.stopPropagation(),d.history.go(d.history.getCurrentIndex()),!1;d._editorRange();const t=(null===e.data?"":void 0===e.data?" ":e.data)||"";if(!d._charCount(t))return e.preventDefault(),e.stopPropagation(),!1;"function"==typeof p.onInput&&!1===p.onInput(e,d)||d.history.push(!0)},_isUneditableNode:function(e,t){const n=t?e.startContainer:e.endContainer,i=t?e.startOffset:e.endOffset,l=t?"previousSibling":"nextSibling";let s;return 1===n.nodeType?(s=h._isUneditableNode_getSibling(n.childNodes[i],l,n),s&&1===s.nodeType&&"false"===s.getAttribute("contenteditable")):(s=h._isUneditableNode_getSibling(n,l,n),d.isEdgePoint(n,i,t?"front":"end")&&s&&1===s.nodeType&&"false"===s.getAttribute("contenteditable"))},_isUneditableNode_getSibling:function(e,t,n){if(!e)return null;let i=e[t];if(!i){if(i=r.getFormatElement(n),i=i?i[t]:null,!i||r.isComponent(i))return null;i="previousSibling"===t?i.firstChild:i.lastChild}return i},_onShortcutKey:!1,onKeyDown_wysiwyg:function(t){let n=d.getSelectionNode();if(r.isInputElement(n))return;const i=t.keyCode,s=t.shiftKey,o=t.ctrlKey||t.metaKey||91===i||92===i||224===i,c=t.altKey;if(h._IEisComposing=229===i,!o&&d.isReadOnly&&!h._cursorMoveKeyCode.test(i))return t.preventDefault(),!1;if(d.submenuOff(),d._isBalloon&&h._hideToolbar(),"function"==typeof p.onKeyDown&&!1===p.onKeyDown(t,d))return;if(o&&h._shortcutCommand(i,s))return h._onShortcutKey=!0,t.preventDefault(),t.stopPropagation(),!1;h._onShortcutKey&&(h._onShortcutKey=!1);const g=d.getRange(),m=!g.collapsed||g.startContainer!==g.endContainer,f=d._fileManager.pluginRegExp.test(d.currentControllerName)?d.currentControllerName:"";let _=r.getFormatElement(n,null)||n,b=r.getRangeFormatElement(_,null);if(!/37|38|39|40/.test(t.keyCode)||!1!==h._onKeyDown_wysiwyg_arrowKey(t)){switch(i){case 8:if(!m&&f){t.preventDefault(),t.stopPropagation(),d.plugins[f].destroy.call(d);break}if(m&&h._hardDelete()){t.preventDefault(),t.stopPropagation();break}if(!r.isFormatElement(_)&&!e.element.wysiwyg.firstElementChild&&!r.isComponent(n)&&null!==d._setDefaultFormat(l.defaultTag))return t.preventDefault(),t.stopPropagation(),!1;if(!m&&!_.previousElementSibling&&0===g.startOffset&&!n.previousSibling&&!r.isListCell(_)&&r.isFormatElement(_)&&(!r.isFreeFormatElement(_)||r.isClosureFreeFormatElement(_))){if(r.isClosureRangeFormatElement(_.parentNode))return t.preventDefault(),t.stopPropagation(),!1;if(r.isWysiwygDiv(_.parentNode)&&_.childNodes.length<=1&&(!_.firstChild||r.onlyZeroWidthSpace(_.textContent))){if(t.preventDefault(),t.stopPropagation(),_.nodeName.toUpperCase()===l.defaultTag.toUpperCase()){_.innerHTML="<br>";const e=_.attributes;for(;e[0];)_.removeAttribute(e[0].name)}else{const e=r.createElement(l.defaultTag);e.innerHTML="<br>",_.parentElement.replaceChild(e,_)}return d.nativeFocus(),!1}}const i=g.startContainer;if(_&&!_.previousElementSibling&&0===g.startOffset&&3===i.nodeType&&!r.isFormatElement(i.parentNode)){let e=i.parentNode.previousSibling;const t=i.parentNode.nextSibling;e||(t?e=t:(e=r.createElement("BR"),_.appendChild(e)));let n=i;for(;_.contains(n)&&!n.previousSibling;)n=n.parentNode;if(!_.contains(n)){i.textContent="",r.removeItemAllParents(i,null,_);break}}if(h._isUneditableNode(g,!0)){t.preventDefault(),t.stopPropagation();break}!m&&d._isEdgeFormat(g.startContainer,g.startOffset,"start")&&r.isFormatElement(_.previousElementSibling)&&(d._formatAttrsTemp=_.previousElementSibling.attributes);const v=g.commonAncestorContainer;if(_=r.getFormatElement(g.startContainer,null),b=r.getRangeFormatElement(_,null),b&&_&&!r.isCell(b)&&!/^FIGCAPTION$/i.test(b.nodeName)){if(r.isListCell(_)&&r.isList(b)&&(r.isListCell(b.parentNode)||_.previousElementSibling)&&(n===_||3===n.nodeType&&(!n.previousSibling||r.isList(n.previousSibling)))&&(r.getFormatElement(g.startContainer,null)!==r.getFormatElement(g.endContainer,null)?b.contains(g.startContainer):0===g.startOffset&&g.collapsed)){if(g.startContainer!==g.endContainer)t.preventDefault(),d.removeNode(),3===g.startContainer.nodeType&&d.setRange(g.startContainer,g.startContainer.textContent.length,g.startContainer,g.startContainer.textContent.length),d.history.push(!0);else{let e=_.previousElementSibling||b.parentNode;if(r.isListCell(e)){t.preventDefault();let n=e;if(!e.contains(_)&&r.isListCell(n)&&r.isList(n.lastElementChild)){for(n=n.lastElementChild.lastElementChild;r.isListCell(n)&&r.isList(n.lastElementChild);)n=n.lastElementChild&&n.lastElementChild.lastElementChild;e=n}let i=e===b.parentNode?b.previousSibling:e.lastChild;i||(i=r.createTextNode(r.zeroWidthSpace),b.parentNode.insertBefore(i,b.parentNode.firstChild));const l=3===i.nodeType?i.textContent.length:1,s=_.childNodes;let o=i,a=s[0];for(;a=s[0];)e.insertBefore(a,o.nextSibling),o=a;r.removeItem(_),0===b.children.length&&r.removeItem(b),d.setRange(i,l,i,l),d.history.push(!0)}}break}if(!m&&0===g.startOffset){let e=!0,n=v;for(;n&&n!==b&&!r.isWysiwygDiv(n);){if(n.previousSibling&&(1===n.previousSibling.nodeType||!r.onlyZeroWidthSpace(n.previousSibling.textContent.trim()))){e=!1;break}n=n.parentNode}if(e&&b.parentNode){t.preventDefault(),d.detachRangeFormatElement(b,r.isListCell(_)?[_]:null,null,!1,!1),d.history.push(!0);break}}}if(!m&&_&&(0===g.startOffset||n===_&&_.childNodes[g.startOffset])){const e=n===_?_.childNodes[g.startOffset]:n,i=_.previousSibling,l=(3===v.nodeType||r.isBreak(v))&&!v.previousSibling&&0===g.startOffset;if(e&&!e.previousSibling&&(v&&r.isComponent(v.previousSibling)||l&&r.isComponent(i))){const e=d.getFileComponent(i);e?(t.preventDefault(),t.stopPropagation(),0===_.textContent.length&&r.removeItem(_),!1===d.selectComponent(e.target,e.pluginName)&&d.blur()):r.isComponent(i)&&(t.preventDefault(),t.stopPropagation(),r.removeItem(i));break}if(e&&r.isNonEditable(e.previousSibling)){t.preventDefault(),t.stopPropagation(),r.removeItem(e.previousSibling);break}}break;case 46:if(f){t.preventDefault(),t.stopPropagation(),d.plugins[f].destroy.call(d);break}if(m&&h._hardDelete()){t.preventDefault(),t.stopPropagation();break}if(h._isUneditableNode(g,!1)){t.preventDefault(),t.stopPropagation();break}if((r.isFormatElement(n)||null===n.nextSibling||r.onlyZeroWidthSpace(n.nextSibling)&&null===n.nextSibling.nextSibling)&&g.startOffset===n.textContent.length){const e=_.nextElementSibling;if(!e)break;if(r.isComponent(e)){if(t.preventDefault(),r.onlyZeroWidthSpace(_)&&(r.removeItem(_),r.isTable(e))){let t=r.getChildElement(e,r.isCell,!1);t=t.firstElementChild||t,d.setRange(t,0,t,0);break}const n=d.getFileComponent(e);n?(t.stopPropagation(),!1===d.selectComponent(n.target,n.pluginName)&&d.blur()):r.isComponent(e)&&(t.stopPropagation(),r.removeItem(e));break}}if(!m&&(d.isEdgePoint(g.endContainer,g.endOffset)||n===_&&_.childNodes[g.startOffset])){const e=n===_&&_.childNodes[g.startOffset]||n;if(e&&r.isNonEditable(e.nextSibling)){t.preventDefault(),t.stopPropagation(),r.removeItem(e.nextSibling);break}if(r.isComponent(e)){t.preventDefault(),t.stopPropagation(),r.removeItem(e);break}}if(!m&&d._isEdgeFormat(g.endContainer,g.endOffset,"end")&&r.isFormatElement(_.nextElementSibling)&&(d._formatAttrsTemp=_.attributes),_=r.getFormatElement(g.startContainer,null),b=r.getRangeFormatElement(_,null),r.isListCell(_)&&r.isList(b)&&(n===_||3===n.nodeType&&(!n.nextSibling||r.isList(n.nextSibling))&&(r.getFormatElement(g.startContainer,null)!==r.getFormatElement(g.endContainer,null)?b.contains(g.endContainer):g.endOffset===n.textContent.length&&g.collapsed))){g.startContainer!==g.endContainer&&d.removeNode();let e=r.getArrayItem(_.children,r.isList,!1);if(e=e||_.nextElementSibling||b.parentNode.nextElementSibling,e&&(r.isList(e)||r.getArrayItem(e.children,r.isList,!1))){let n,i;if(t.preventDefault(),r.isList(e)){const t=e.firstElementChild;for(i=t.childNodes,n=i[0];i[0];)_.insertBefore(i[0],e);r.removeItem(t)}else{for(n=e.firstChild,i=e.childNodes;i[0];)_.appendChild(i[0]);r.removeItem(e)}d.setRange(n,0,n,0),d.history.push(!0)}break}break;case 9:if(f||l.tabDisable)break;if(t.preventDefault(),o||c||r.isWysiwygDiv(n))break;const y=!g.collapsed||d.isEdgePoint(g.startContainer,g.startOffset),C=d.getSelectedElements(null);n=d.getSelectionNode();const w=[];let E=[],x=r.isListCell(C[0]),S=r.isListCell(C[C.length-1]),A={sc:g.startContainer,so:g.startOffset,ec:g.endContainer,eo:g.endOffset};for(let e,t=0,n=C.length;t<n;t++)if(e=C[t],r.isListCell(e)){if(!e.previousElementSibling&&!s)continue;w.push(e)}else E.push(e);if(w.length>0&&y&&d.plugins.list)A=d.plugins.list.editInsideList.call(d,s,w);else{const e=r.getParentElement(n,r.isCell);if(e&&y){const t=r.getParentElement(e,"table"),n=r.getListChildren(t,r.isCell);let i=s?r.prevIdx(n,e):r.nextIdx(n,e);i!==n.length||s||(i=0),-1===i&&s&&(i=n.length-1);let l=n[i];if(!l)break;l=l.firstElementChild||l,d.setRange(l,0,l,0);break}E=E.concat(w),x=S=null}if(E.length>0)if(s){const e=E.length-1;for(let t,n=0;n<=e;n++){t=E[n].childNodes;for(let e,n=0,i=t.length;n<i&&(e=t[n],e);n++)if(!r.onlyZeroWidthSpace(e)){/^\s{1,4}$/.test(e.textContent)?r.removeItem(e):/^\s{1,4}/.test(e.textContent)&&(e.textContent=e.textContent.replace(/^\s{1,4}/,""));break}}const t=r.getChildElement(E[0],"text",!1),n=r.getChildElement(E[e],"text",!0);!x&&t&&(A.sc=t,A.so=0),!S&&n&&(A.ec=n,A.eo=n.textContent.length)}else{const e=r.createTextNode(new a.Array(d._variable.tabSize+1).join(" "));if(1===E.length){const t=d.insertNode(e,null,!0);if(!t)return!1;x||(A.sc=e,A.so=t.endOffset),S||(A.ec=e,A.eo=t.endOffset)}else{const t=E.length-1;for(let n,i=0;i<=t;i++)n=E[i].firstChild,n&&(r.isBreak(n)?E[i].insertBefore(e.cloneNode(!1),n):n.textContent=e.textContent+n.textContent);const n=r.getChildElement(E[0],"text",!1),i=r.getChildElement(E[t],"text",!0);!x&&n&&(A.sc=n,A.so=0),!S&&i&&(A.ec=i,A.eo=i.textContent.length)}}d.setRange(A.sc,A.so,A.ec,A.eo),d.history.push(!1);break;case 13:const N=r.getFreeFormatElement(n,null);if(d._charTypeHTML){let e="";if(e=!s&&N||s?"<br>":"<"+_.nodeName+"><br></"+_.nodeName+">",!d.checkCharCount(e,"byte-html"))return t.preventDefault(),!1}if(!s&&!f){const i=d._isEdgeFormat(g.endContainer,g.endOffset,"end"),s=d._isEdgeFormat(g.startContainer,g.startOffset,"start");if(i&&(/^H[1-6]$/i.test(_.nodeName)||/^HR$/i.test(_.nodeName))){h._enterPrevent(t);let e=null;const n=d.appendFormatTag(_,l.defaultTag);if(i&&i.length>0){e=i.pop();const t=e;for(;i.length>0;)e=e.appendChild(i.pop());n.appendChild(t)}if(e=e?e.appendChild(n.firstChild):n.firstChild,r.isBreak(e)){const t=r.createTextNode(r.zeroWidthSpace);e.parentNode.insertBefore(t,e),d.setRange(t,1,t,1)}else d.setRange(e,0,e,0);break}if(b&&_&&!r.isCell(b)&&!/^FIGCAPTION$/i.test(b.nodeName)){const e=d.getRange();if(d.isEdgePoint(e.endContainer,e.endOffset)&&r.isList(n.nextSibling)){h._enterPrevent(t);const e=r.createElement("LI"),i=r.createElement("BR");e.appendChild(i),_.parentNode.insertBefore(e,_.nextElementSibling),e.appendChild(n.nextSibling),d.setRange(i,1,i,1);break}if((3!==e.commonAncestorContainer.nodeType||!e.commonAncestorContainer.nextElementSibling)&&r.onlyZeroWidthSpace(_.innerText.trim())&&!r.isListCell(_.nextElementSibling)){h._enterPrevent(t);let e=null;if(r.isListCell(b.parentNode)){const t=_.parentNode.parentNode;b=t.parentNode;const n=r.createElement("LI");n.innerHTML="<br>",r.copyTagAttributes(n,_,l.lineAttrReset),e=n,b.insertBefore(e,t.nextElementSibling)}else{const t=r.isCell(b.parentNode)?"DIV":r.isList(b.parentNode)?"LI":r.isFormatElement(b.nextElementSibling)&&!r.isRangeFormatElement(b.nextElementSibling)?b.nextElementSibling.nodeName:r.isFormatElement(b.previousElementSibling)&&!r.isRangeFormatElement(b.previousElementSibling)?b.previousElementSibling.nodeName:l.defaultTag;e=r.createElement(t),r.copyTagAttributes(e,_,l.lineAttrReset);const n=d.detachRangeFormatElement(b,[_],null,!0,!0);n.cc.insertBefore(e,n.ec)}e.innerHTML="<br>",r.removeItemAllParents(_,null,null),d.setRange(e,1,e,1);break}}if(N){h._enterPrevent(t);const e=n===N,i=d.getSelection(),l=n.childNodes,s=i.focusOffset,o=n.previousElementSibling,a=n.nextSibling;if(!r.isClosureFreeFormatElement(N)&&l&&(e&&g.collapsed&&l.length-1<=s+1&&r.isBreak(l[s])&&(!l[s+1]||(!l[s+2]||r.onlyZeroWidthSpace(l[s+2].textContent))&&3===l[s+1].nodeType&&r.onlyZeroWidthSpace(l[s+1].textContent))&&s>0&&r.isBreak(l[s-1])||!e&&r.onlyZeroWidthSpace(n.textContent)&&r.isBreak(o)&&(r.isBreak(o.previousSibling)||!r.onlyZeroWidthSpace(o.previousSibling.textContent))&&(!a||!r.isBreak(a)&&r.onlyZeroWidthSpace(a.textContent)))){e?r.removeItem(l[s-1]):r.removeItem(n);const t=d.appendFormatTag(N,r.isFormatElement(N.nextElementSibling)&&!r.isRangeFormatElement(N.nextElementSibling)?N.nextElementSibling:null);r.copyFormatAttributes(t,N),d.setRange(t,1,t,1);break}if(e){p.insertHTML(g.collapsed&&r.isBreak(g.startContainer.childNodes[g.startOffset-1])?"<br>":"<br><br>",!0,!1);let e=i.focusNode;const t=i.focusOffset;N===e&&(e=e.childNodes[t-s>1?t-1:t]),d.setRange(e,1,e,1)}else{const e=i.focusNode.nextSibling,t=r.createElement("BR");d.insertNode(t,null,!1);const n=t.previousSibling,l=t.nextSibling;r.isBreak(e)||r.isBreak(n)||l&&!r.onlyZeroWidthSpace(l)?d.setRange(l,0,l,0):(t.parentNode.insertBefore(t.cloneNode(!1),t),d.setRange(t,1,t,1))}h._onShortcutKey=!0;break}if(g.collapsed&&(s||i)){h._enterPrevent(t),u&&(_.innerHTML=u.makeHtml(_.innerHTML).replace(/<\/?p[^>]*>/g,""));const e=r.createElement("BR"),o=r.createElement(_.nodeName);r.copyTagAttributes(o,_,l.lineAttrReset);let a=e;do{if(!r.isBreak(n)&&1===n.nodeType){const e=n.cloneNode(!1);e.appendChild(a),a=e}n=n.parentNode}while(_!==n&&_.contains(n));o.appendChild(a),_.parentNode.insertBefore(o,s&&!i?_:_.nextElementSibling),i&&d.setRange(e,1,e,1);break}if(_){let n;t.stopPropagation();let o=0;if(g.collapsed)n=r.onlyZeroWidthSpace(_)?d.appendFormatTag(_,_.cloneNode(!1)):r.splitElement(g.endContainer,g.endOffset,r.getElementDepth(_));else{const a=r.getFormatElement(g.startContainer,null)!==r.getFormatElement(g.endContainer,null),c=_.cloneNode(!1);c.innerHTML="<br>";const u=d.removeNode();if(n=r.getFormatElement(u.container,null),!n){r.isWysiwygDiv(u.container)&&(h._enterPrevent(t),e.element.wysiwyg.appendChild(c),n=c,r.copyTagAttributes(n,_,l.lineAttrReset),d.setRange(n,o,n,o));break}const p=r.getRangeFormatElement(u.container);if(n=n.contains(p)?r.getChildElement(p,r.getFormatElement.bind(r)):n,a){if(i&&!s)n.parentNode.insertBefore(c,u.prevContainer&&u.container!==u.prevContainer?n:n.nextElementSibling),n=c,o=0;else if(o=u.offset,s){const e=n.parentNode.insertBefore(c,n);i&&(n=e,o=0)}}else i&&s?(n.parentNode.insertBefore(c,u.prevContainer&&u.container===u.prevContainer?n.nextElementSibling:n),n=c,o=0):n=r.splitElement(u.container,u.offset,r.getElementDepth(_))}h._enterPrevent(t),r.copyTagAttributes(n,_,l.lineAttrReset),d.setRange(n,o,n,o);break}}if(m)break;if(b&&r.getParentElement(b,"FIGCAPTION")&&r.getParentElement(b,r.isList)&&(h._enterPrevent(t),_=d.appendFormatTag(_,null),d.setRange(_,0,_,0)),f){t.preventDefault(),t.stopPropagation(),d.containerOff(),d.controllersOff();const n=e[f],i=n._container,o=i.previousElementSibling||i.nextElementSibling;let a=null;r.isListCell(i.parentNode)?a=r.createElement("BR"):(a=r.createElement(r.isFormatElement(o)&&!r.isRangeFormatElement(o)?o.nodeName:l.defaultTag),a.innerHTML="<br>"),s?i.parentNode.insertBefore(a,i):i.parentNode.insertBefore(a,i.nextElementSibling),d.setRange(a,0,a,0),d.callPlugin(f,(function(){!1===d.selectComponent(n._element,f)&&d.blur()}),null)}break;case 27:if(f)return t.preventDefault(),t.stopPropagation(),d.controllersOff(),!1}if(s&&16===i){t.preventDefault(),t.stopPropagation();const e=d.plugins.table;if(e&&!e._shift&&!e._ref){const t=r.getParentElement(_,r.isCell);if(t)return void e.onTableCellMultiSelect.call(d,t,!0)}}else if(s&&(r.isOSX_IOS?c:o)&&32===i){t.preventDefault(),t.stopPropagation();const e=d.insertNode(r.createTextNode(" "));if(e&&e.container)return void d.setRange(e.container,e.endOffset,e.container,e.endOffset)}if(r.isIE&&!o&&!c&&!m&&!h._nonTextKeyCode.test(i)&&r.isBreak(g.commonAncestorContainer)){const e=r.createTextNode(r.zeroWidthSpace);d.insertNode(e,null,!1),d.setRange(e,1,e,1)}h._directionKeyCode.test(i)&&(d._editorRange(),h._applyTagEffects())}},_onKeyDown_wysiwyg_arrowKey:function(e){if(e.shiftKey)return;let t=d.getSelectionNode();const n=function(t,n=0){if(e.preventDefault(),e.stopPropagation(),!t)return;let i=d.getFileComponent(t);i?d.selectComponent(i.target,i.pluginName):(d.setRange(t,n,t,n),d.controllersOff())},i=r.getParentElement(t,"table");if(i){const l=r.getParentElement(t,"tr"),s=r.getParentElement(t,"td");let o=s,a=s;if(s){for(;o.firstChild;)o=o.firstChild;for(;a.lastChild;)a=a.lastChild}let c=t;for(;c.firstChild;)c=c.firstChild;const u=c===o,h=c===a;let p=null,g=0;if(38===e.keyCode&&u){const e=l&&l.previousElementSibling;for(p=e?e.children[s.cellIndex]:r.getPreviousDeepestNode(i,d.context.element.wysiwyg);p.lastChild;)p=p.lastChild;p&&(g=p.textContent.length)}else if(40===e.keyCode&&h){const e=l&&l.nextElementSibling;for(p=e?e.children[s.cellIndex]:r.getNextDeepestNode(i,d.context.element.wysiwyg);p.firstChild;)p=p.firstChild}if(p)return n(p,g),!1}const l=d.getFileComponent(t);if(l){const t=/37|38/.test(e.keyCode),i=/39|40/.test(e.keyCode);if(t){const e=r.getPreviousDeepestNode(l.target,d.context.element.wysiwyg);n(e,e&&e.textContent.length)}else if(i){n(r.getNextDeepestNode(l.target,d.context.element.wysiwyg))}}},onKeyUp_wysiwyg:function(e){if(h._onShortcutKey)return;d._editorRange();const t=e.keyCode,n=e.ctrlKey||e.metaKey||91===t||92===t||224===t,i=e.altKey;if(d.isReadOnly)return void(!n&&h._cursorMoveKeyCode.test(t)&&h._applyTagEffects());const s=d.getRange();let o=d.getSelectionNode();if(d._isBalloon&&(d._isBalloonAlways&&27!==t||!s.collapsed)){if(!d._isBalloonAlways)return void h._showToolbarBalloon();27!==t&&h._showToolbarBalloonDelay()}let a=o;for(;a.firstChild;)a=a.firstChild;const c=d.getFileComponent(a);if(16!==e.keyCode&&!e.shiftKey&&c?d.selectComponent(c.target,c.pluginName):d.currentFileComponentInfo&&d.controllersOff(),8===t&&r.isWysiwygDiv(o)&&""===o.textContent&&0===o.children.length){e.preventDefault(),e.stopPropagation(),o.innerHTML="";const t=r.createElement(r.isFormatElement(d._variable.currentNodes[0])?d._variable.currentNodes[0]:l.defaultTag);return t.innerHTML="<br>",o.appendChild(t),d.setRange(t,0,t,0),h._applyTagEffects(),void d.history.push(!1)}const u=r.getFormatElement(o,null),g=r.getRangeFormatElement(o,null),m=d._formatAttrsTemp;if(m){for(let e=0,n=m.length;e<n;e++)13===t&&/^id$/i.test(m[e].name)?u.removeAttribute("id"):u.setAttribute(m[e].name,m[e].value);d._formatAttrsTemp=null}u||!s.collapsed||r.isComponent(o)||r.isList(o)||null===d._setDefaultFormat(r.isRangeFormatElement(g)?"DIV":l.defaultTag)||(o=d.getSelectionNode());if(!n&&!i&&!h._nonTextKeyCode.test(t)&&3===o.nodeType&&r.zeroWidthRegExp.test(o.textContent)&&!(void 0!==e.isComposing?e.isComposing:h._IEisComposing)){let e=s.startOffset,t=s.endOffset;const n=(o.textContent.substring(0,t).match(h._frontZeroWidthReg)||"").length;e=s.startOffset-n,t=s.endOffset-n,o.textContent=o.textContent.replace(r.zeroWidthRegExp,""),d.setRange(o,e<0?0:e,o,t<0?0:t)}d._charCount(""),"function"==typeof p.onKeyUp&&!1===p.onKeyUp(e,d)||n||i||h._historyIgnoreKeyCode.test(t)||d.history.push(!0)},onScroll_wysiwyg:function(e){d.controllersOff(),d._isBalloon&&h._hideToolbar(),"function"==typeof p.onScroll&&p.onScroll(e,d)},onFocus_wysiwyg:function(e){d._antiBlur||(d.hasFocus=!0,a.setTimeout(h._applyTagEffects),d._isInline&&h._showToolbarInline(),"function"==typeof p.onFocus&&p.onFocus(e,d))},onBlur_wysiwyg:function(t){d._antiBlur||d._variable.isCodeView||(d.hasFocus=!1,d.effectNode=null,d.controllersOff(),(d._isInline||d._isBalloon)&&h._hideToolbar(),d._setKeyEffect([]),d._variable.currentNodes=[],d._variable.currentNodesMap=[],l.showPathLabel&&(e.element.navigation.textContent=""),"function"==typeof p.onBlur&&p.onBlur(t,d,this))},onMouseDown_resizingBar:function(t){t.stopPropagation(),d.submenuOff(),d.controllersOff(),d._variable.resizeClientY=t.clientY,e.element.resizeBackground.style.display="block",o.addEventListener("mousemove",h._resize_editor),o.addEventListener("mouseup",(function t(){e.element.resizeBackground.style.display="none",o.removeEventListener("mousemove",h._resize_editor),o.removeEventListener("mouseup",t)}))},_resize_editor:function(t){const n=e.element.editorArea.offsetHeight+(t.clientY-d._variable.resizeClientY),i=n<d._variable.minResizingSize?d._variable.minResizingSize:n;e.element.wysiwygFrame.style.height=e.element.code.style.height=i+"px",d._variable.resizeClientY=t.clientY,r.isResizeObserverSupported||d.__callResizeFunction(i,null)},onResize_window:function(){r.isResizeObserverSupported||d.resetResponsiveToolbar();const t=e.element.toolbar,n="none"===t.style.display||d._isInline&&!d._inlineToolbarAttr.isShow;if(0!==t.offsetWidth||n){if(e.fileBrowser&&"block"===e.fileBrowser.area.style.display&&(e.fileBrowser.body.style.maxHeight=a.innerHeight-e.fileBrowser.header.offsetHeight-50+"px"),d.submenuActiveButton&&d.submenu&&d._setMenuPosition(d.submenuActiveButton,d.submenu),d._variable.isFullScreen)return d._variable.innerHeight_fullScreen+=a.innerHeight-t.offsetHeight-d._variable.innerHeight_fullScreen,void(e.element.editorArea.style.height=d._variable.innerHeight_fullScreen+"px");d._variable.isCodeView&&d._isInline?h._showToolbarInline():(d._iframeAutoHeight(),d._sticky&&(t.style.width=e.element.topArea.offsetWidth-2+"px",h.onScroll_window()))}},onScroll_window:function(){if(d._variable.isFullScreen||0===e.element.toolbar.offsetWidth||l.stickyToolbar<0)return;const t=e.element,n=t.editorArea.offsetHeight,i=(this.scrollY||o.documentElement.scrollTop)+l.stickyToolbar,s=h._getEditorOffsets(l.toolbarContainer).top-(d._isInline?t.toolbar.offsetHeight:0),a=d._isInline&&i-s>0?i-s-e.element.toolbar.offsetHeight:0;i<s?h._offStickyToolbar():i+d._variable.minResizingSize>=n+s?(d._sticky||h._onStickyToolbar(a),t.toolbar.style.top=a+n+s+l.stickyToolbar-i-d._variable.minResizingSize+"px"):i>=s&&h._onStickyToolbar(a)},_getEditorOffsets:function(t){let n=t||e.element.topArea,i=0,l=0,s=0;for(;n;)i+=n.offsetTop,l+=n.offsetLeft,s+=n.scrollTop,n=n.offsetParent;return{top:i,left:l,scroll:s}},_getPageBottomSpace:function(){return o.documentElement.scrollHeight-(h._getEditorOffsets(null).top+e.element.topArea.offsetHeight)},_onStickyToolbar:function(t){const n=e.element;d._isInline||l.toolbarContainer||(n._stickyDummy.style.height=n.toolbar.offsetHeight+"px",n._stickyDummy.style.display="block"),n.toolbar.style.top=l.stickyToolbar+t+"px",n.toolbar.style.width=d._isInline?d._inlineToolbarAttr.width:n.toolbar.offsetWidth+"px",r.addClass(n.toolbar,"se-toolbar-sticky"),d._sticky=!0},_offStickyToolbar:function(){const t=e.element;t._stickyDummy.style.display="none",t.toolbar.style.top=d._isInline?d._inlineToolbarAttr.top:"",t.toolbar.style.width=d._isInline?d._inlineToolbarAttr.width:"",t.editorArea.style.marginTop="",r.removeClass(t.toolbar,"se-toolbar-sticky"),d._sticky=!1},_codeViewAutoHeight:function(){d._variable.isFullScreen||(e.element.code.style.height=e.element.code.scrollHeight+"px")},_hardDelete:function(){const e=d.getRange(),t=e.startContainer,n=e.endContainer,i=r.getRangeFormatElement(t),l=r.getRangeFormatElement(n),s=r.isCell(i),o=r.isCell(l),a=e.commonAncestorContainer;if((s&&!i.previousElementSibling&&!i.parentElement.previousElementSibling||o&&!l.nextElementSibling&&!l.parentElement.nextElementSibling)&&i!==l)if(s){if(o)return r.removeItem(r.getParentElement(i,(function(e){return a===e.parentNode}))),d.nativeFocus(),!0;r.removeItem(r.getParentElement(i,(function(e){return a===e.parentNode})))}else r.removeItem(r.getParentElement(l,(function(e){return a===e.parentNode})));const c=1===t.nodeType?r.getParentElement(t,".se-component"):null,u=1===n.nodeType?r.getParentElement(n,".se-component"):null;return c&&r.removeItem(c),u&&r.removeItem(u),!1},onPaste_wysiwyg:function(e){const t=r.isIE?a.clipboardData:e.clipboardData;return!t||h._dataTransferAction("paste",e,t)},_setClipboardComponent:function(e,t,n){e.preventDefault(),e.stopPropagation(),n.setData("text/html",t.component.outerHTML)},onCopy_wysiwyg:function(e){const t=r.isIE?a.clipboardData:e.clipboardData;if("function"==typeof p.onCopy&&!1===p.onCopy(e,t,d))return e.preventDefault(),e.stopPropagation(),!1;const n=d.currentFileComponentInfo;n&&!r.isIE&&(h._setClipboardComponent(e,n,t),r.addClass(n.component,"se-component-copy"),a.setTimeout((function(){r.removeClass(n.component,"se-component-copy")}),150))},onSave_wysiwyg:function(e){"function"!=typeof p.onSave||p.onSave(e,d)},onCut_wysiwyg:function(e){const t=r.isIE?a.clipboardData:e.clipboardData;if("function"==typeof p.onCut&&!1===p.onCut(e,t,d))return e.preventDefault(),e.stopPropagation(),!1;const n=d.currentFileComponentInfo;n&&!r.isIE&&(h._setClipboardComponent(e,n,t),r.removeItem(n.component),d.controllersOff()),a.setTimeout((function(){d.history.push(!1)}))},onDrop_wysiwyg:function(e){if(d.isReadOnly||r.isIE)return e.preventDefault(),e.stopPropagation(),!1;const t=e.dataTransfer;return!t||(h._setDropLocationSelection(e),d.removeNode(),document.body.contains(d.currentControllerTarget)||d.controllersOff(),h._dataTransferAction("drop",e,t))},_setDropLocationSelection:function(e){const t={startContainer:null,startOffset:null,endContainer:null,endOffset:null};let n=null;if(e.rangeParent?(t.startContainer=e.rangeParent,t.startOffset=e.rangeOffset,t.endContainer=e.rangeParent,t.endOffset=e.rangeOffset):n=d._wd.caretRangeFromPoint?d._wd.caretRangeFromPoint(e.clientX,e.clientY):d.getRange(),n&&(t.startContainer=n.startContainer,t.startOffset=n.startOffset,t.endContainer=n.endContainer,t.endOffset=n.endOffset),t.startContainer===t.endContainer){const e=r.getParentElement(t.startContainer,r.isComponent);e&&(t.startContainer=e,t.startOffset=0,t.endContainer=e,t.endOffset=0)}d.setRange(t.startContainer,t.startOffset,t.endContainer,t.endOffset)},_dataTransferAction:function(t,n,i){let l,s;if(r.isIE){l=i.getData("Text");const o=d.getRange(),c=r.createElement("DIV"),u={sc:o.startContainer,so:o.startOffset,ec:o.endContainer,eo:o.endOffset};return c.setAttribute("contenteditable",!0),c.style.cssText="position:absolute; top:0; left:0; width:1px; height:1px; overflow:hidden;",e.element.relative.appendChild(c),c.focus(),a.setTimeout((function(){s=c.innerHTML,r.removeItem(c),d.setRange(u.sc,u.so,u.ec,u.eo),h._setClipboardData(t,n,l,s,i)})),!0}if(l=i.getData("text/plain"),s=i.getData("text/html"),!1===h._setClipboardData(t,n,l,s,i))return n.preventDefault(),n.stopPropagation(),!1},_setClipboardData:function(e,t,n,i,l){const s=/class=["']*Mso(Normal|List)/i.test(i)||/content=["']*Word.Document/i.test(i)||/content=["']*OneNote.File/i.test(i)||/content=["']*Excel.Sheet/i.test(i);!i?i=r._HTMLConvertor(n).replace(/\n/g,"<br>"):(i=i.replace(/^<html>\r?\n?<body>\r?\n?\x3C!--StartFragment--\>|\x3C!--EndFragment-->\r?\n?<\/body\>\r?\n?<\/html>$/g,""),s&&(i=i.replace(/\n/g," "),n=n.replace(/\n/g," ")),i=d.cleanHTML(i,d.pasteTagsWhitelistRegExp,d.pasteTagsBlacklistRegExp));const o=d._charCount(d._charTypeHTML?i:n);if("paste"===e&&"function"==typeof p.onPaste){const e=p.onPaste(t,i,o,d);if(!1===e)return!1;if("string"==typeof e){if(!e)return!1;i=e}}if("drop"===e&&"function"==typeof p.onDrop){const e=p.onDrop(t,i,o,d);if(!1===e)return!1;if("string"==typeof e){if(!e)return!1;i=e}}const a=l.files;return a.length>0&&!s?(/^image/.test(a[0].type)&&d.plugins.image&&p.insertImage(a),!1):!!o&&(i?(p.insertHTML(i,!0,!1),!1):void 0)},onMouseMove_wysiwyg:function(t){if(d.isDisabled||d.isReadOnly)return!1;const n=r.getParentElement(t.target,r.isComponent),i=d._lineBreaker.style;if(n&&!d.currentControllerName){const s=e.element;let o=0,a=s.wysiwyg;do{o+=a.scrollTop,a=a.parentElement}while(a&&!/^(BODY|HTML)$/i.test(a.nodeName));const c=s.wysiwyg.scrollTop,u=h._getEditorOffsets(null),p=r.getOffset(n,s.wysiwygFrame).top+c,g=t.pageY+o+(l.iframe&&!l.toolbarContainer?s.toolbar.offsetHeight:0),m=p+(l.iframe?o:u.top),f=r.isListCell(n.parentNode);let _="",b="";if((f?!n.previousSibling:!r.isFormatElement(n.previousElementSibling))&&g<m+20)b=p,_="t";else{if((f?n.nextSibling:r.isFormatElement(n.nextElementSibling))||!(g>m+n.offsetHeight-20))return void(i.display="none");b=p+n.offsetHeight,_="b"}d._variable._lineBreakComp=n,d._variable._lineBreakDir=_,i.top=b-c+"px",d._lineBreakerButton.style.left=r.getOffset(n).left+n.offsetWidth/2-15+"px",i.display="block"}else"none"!==i.display&&(i.display="none")},_enterPrevent(e){e.preventDefault(),r.isMobile&&r.isOSX_IOS&&(d.__focusTemp.focus(),d.focus())},_onMouseDown_lineBreak:function(e){e.preventDefault()},_onLineBreak:function(e){e.preventDefault();const t=d._variable._lineBreakComp,n=this?this:d._variable._lineBreakDir,i=r.isListCell(t.parentNode),s=r.createElement(i?"BR":r.isCell(t.parentNode)?"DIV":l.defaultTag);if(i||(s.innerHTML="<br>"),d._charTypeHTML&&!d.checkCharCount(s.outerHTML,"byte-html"))return;t.parentNode.insertBefore(s,"t"===n?t:t.nextSibling),d._lineBreaker.style.display="none",d._variable._lineBreakComp=null;const o=i?s:s.firstChild;d.setRange(o,1,o,1),d.history.push(!1)},_resizeObserver:null,_toolbarObserver:null,_addEvent:function(){const t=l.iframe?d._ww:e.element.wysiwyg;r.isResizeObserverSupported&&(this._resizeObserver=new a.ResizeObserver((function(e){d.__callResizeFunction(-1,e[0])}))),e.element.toolbar.addEventListener("mousedown",h._buttonsEventHandler,!1),e.element._menuTray.addEventListener("mousedown",h._buttonsEventHandler,!1),e.element.toolbar.addEventListener("click",h.onClick_toolbar,!1),t.addEventListener("mousedown",h.onMouseDown_wysiwyg,!1),t.addEventListener("click",h.onClick_wysiwyg,!1),t.addEventListener(r.isIE?"textinput":"input",h.onInput_wysiwyg,!1),t.addEventListener("keydown",h.onKeyDown_wysiwyg,!1),t.addEventListener("keyup",h.onKeyUp_wysiwyg,!1),t.addEventListener("paste",h.onPaste_wysiwyg,!1),t.addEventListener("copy",h.onCopy_wysiwyg,!1),t.addEventListener("cut",h.onCut_wysiwyg,!1),t.addEventListener("drop",h.onDrop_wysiwyg,!1),t.addEventListener("scroll",h.onScroll_wysiwyg,!1),t.addEventListener("focus",h.onFocus_wysiwyg,!1),t.addEventListener("blur",h.onBlur_wysiwyg,!1),h._lineBreakerBind={a:h._onLineBreak.bind(""),t:h._onLineBreak.bind("t"),b:h._onLineBreak.bind("b")},t.addEventListener("mousemove",h.onMouseMove_wysiwyg,!1),d._lineBreakerButton.addEventListener("mousedown",h._onMouseDown_lineBreak,!1),d._lineBreakerButton.addEventListener("click",h._lineBreakerBind.a,!1),e.element.lineBreaker_t.addEventListener("mousedown",h._lineBreakerBind.t,!1),e.element.lineBreaker_b.addEventListener("mousedown",h._lineBreakerBind.b,!1),t.addEventListener("touchstart",h.onMouseDown_wysiwyg,{passive:!0,useCapture:!1}),t.addEventListener("touchend",h.onClick_wysiwyg,{passive:!0,useCapture:!1}),"auto"!==l.height||l.codeMirrorEditor||(e.element.code.addEventListener("keydown",h._codeViewAutoHeight,!1),e.element.code.addEventListener("keyup",h._codeViewAutoHeight,!1),e.element.code.addEventListener("paste",h._codeViewAutoHeight,!1)),e.element.resizingBar&&(/\d+/.test(l.height)&&l.resizeEnable?e.element.resizingBar.addEventListener("mousedown",h.onMouseDown_resizingBar,!1):r.addClass(e.element.resizingBar,"se-resizing-none")),h._setResponsiveToolbar(),r.isResizeObserverSupported&&(this._toolbarObserver=new a.ResizeObserver(d.resetResponsiveToolbar)),a.addEventListener("resize",h.onResize_window,!1),l.stickyToolbar>-1&&a.addEventListener("scroll",h.onScroll_window,!1)},_removeEvent:function(){const t=l.iframe?d._ww:e.element.wysiwyg;e.element.toolbar.removeEventListener("mousedown",h._buttonsEventHandler),e.element._menuTray.removeEventListener("mousedown",h._buttonsEventHandler),e.element.toolbar.removeEventListener("click",h.onClick_toolbar),t.removeEventListener("mousedown",h.onMouseDown_wysiwyg),t.removeEventListener("click",h.onClick_wysiwyg),t.removeEventListener(r.isIE?"textinput":"input",h.onInput_wysiwyg),t.removeEventListener("keydown",h.onKeyDown_wysiwyg),t.removeEventListener("keyup",h.onKeyUp_wysiwyg),t.removeEventListener("paste",h.onPaste_wysiwyg),t.removeEventListener("copy",h.onCopy_wysiwyg),t.removeEventListener("cut",h.onCut_wysiwyg),t.removeEventListener("drop",h.onDrop_wysiwyg),t.removeEventListener("scroll",h.onScroll_wysiwyg),t.removeEventListener("mousemove",h.onMouseMove_wysiwyg),d._lineBreakerButton.removeEventListener("mousedown",h._onMouseDown_lineBreak),d._lineBreakerButton.removeEventListener("click",h._lineBreakerBind.a),e.element.lineBreaker_t.removeEventListener("mousedown",h._lineBreakerBind.t),e.element.lineBreaker_b.removeEventListener("mousedown",h._lineBreakerBind.b),h._lineBreakerBind=null,t.removeEventListener("touchstart",h.onMouseDown_wysiwyg,{passive:!0,useCapture:!1}),t.removeEventListener("touchend",h.onClick_wysiwyg,{passive:!0,useCapture:!1}),t.removeEventListener("focus",h.onFocus_wysiwyg),t.removeEventListener("blur",h.onBlur_wysiwyg),e.element.code.removeEventListener("keydown",h._codeViewAutoHeight),e.element.code.removeEventListener("keyup",h._codeViewAutoHeight),e.element.code.removeEventListener("paste",h._codeViewAutoHeight),e.element.resizingBar&&e.element.resizingBar.removeEventListener("mousedown",h.onMouseDown_resizingBar),h._resizeObserver&&(h._resizeObserver.unobserve(e.element.wysiwygFrame),h._resizeObserver=null),h._toolbarObserver&&(h._toolbarObserver.unobserve(e.element._toolbarShadow),h._toolbarObserver=null),a.removeEventListener("resize",h.onResize_window),a.removeEventListener("scroll",h.onScroll_window)},_setResponsiveToolbar:function(){if(0===s.length)return void(s=null);h._responsiveCurrentSize="default";const e=h._responsiveButtonSize=[],t=h._responsiveButtons={default:s[0]};for(let n,i,l=1,o=s.length;l<o;l++)i=s[l],n=1*i[0],e.push(n),t[n]=i[1];e.sort((function(e,t){return e-t})).unshift("default")}},p={core:d,util:r,onload:null,onScroll:null,onMouseDown:null,onClick:null,onInput:null,onKeyDown:null,onKeyUp:null,onCopy:null,onCut:null,onFocus:null,onBlur:null,onChange:null,onSave:null,onDrop:null,onPaste:null,showInline:null,showController:null,toggleCodeView:null,toggleFullScreen:null,imageUploadHandler:null,videoUploadHandler:null,audioUploadHandler:null,onImageUploadBefore:null,onVideoUploadBefore:null,onAudioUploadBefore:null,onImageUpload:null,onVideoUpload:null,onAudioUpload:null,onImageUploadError:null,onVideoUploadError:null,onAudioUploadError:null,onResizeEditor:null,onSetToolbarButtons:null,setToolbarButtons:function(t){d.submenuOff(),d.containerOff(),d.moreLayerOff();const n=L._createToolBar(o,t,d.plugins,l);s=n.responsiveButtons,h._setResponsiveToolbar(),e.element.toolbar.replaceChild(n._buttonTray,e.element._buttonTray);const i=B(e.element.originElement,d._getConstructed(e.element),l);e.element=i.element,e.tool=i.tool,l.iframe&&(e.element.wysiwyg=d._wd.body),d._recoverButtonStates(),d._cachingButtons(),d.history._resetCachingButton(),d.effectNode=null,d.hasFocus&&h._applyTagEffects(),d.isReadOnly&&r.setDisabledButtons(!0,d.resizingDisabledButtons),"function"==typeof p.onSetToolbarButtons&&p.onSetToolbarButtons(n._buttonTray.querySelectorAll("button"),d)},setOptions:function(o){h._removeEvent(),d._resetComponents(),r.removeClass(d._styleCommandMap.showBlocks,"active"),r.removeClass(d._styleCommandMap.codeView,"active"),d._variable.isCodeView=!1,d._iframeAuto=null,d.plugins=o.plugins||d.plugins;const c=[l,o].reduce((function(e,t){for(let n in t)if(r.hasOwn(t,n))if("plugins"===n&&t[n]&&e[n]){let i=e[n],l=t[n];i=i.length?i:a.Object.keys(i).map((function(e){return i[e]})),l=l.length?l:a.Object.keys(l).map((function(e){return l[e]})),e[n]=l.filter((function(e){return-1===i.indexOf(e)})).concat(i)}else e[n]=t[n];return e}),{}),u=e.element,p=u.wysiwyg.innerHTML,g=L._setOptions(c,e,l);g.callButtons&&(t=g.callButtons,d.initPlugins={}),g.plugins&&(d.plugins=n=g.plugins),0===u._menuTray.children.length&&(this._menuTray={}),s=g.toolbar.responsiveButtons,d.options=l=c,d.lang=i=l.lang,l.iframe&&u.wysiwygFrame.addEventListener("load",(function(){r._setIframeDocument(this,l),d._setOptionsInit(u,p)})),u.editorArea.appendChild(u.wysiwygFrame),l.iframe||d._setOptionsInit(u,p)},setDefaultStyle:function(t){const n=l._editorStyles=r._setDefaultOptionStyle(l,t),i=e.element;i.topArea.style.cssText=n.top,i.code.style.cssText=l._editorStyles.frame,i.code.style.display="none","auto"===l.height?i.code.style.overflow="hidden":i.code.style.overflow="",l.iframe?(i.wysiwygFrame.style.cssText=n.frame,i.wysiwyg.style.cssText=n.editor):i.wysiwygFrame.style.cssText=n.frame+n.editor},noticeOpen:function(e){d.notice.open.call(d,e)},noticeClose:function(){d.notice.close.call(d)},save:function(){const t=d.getContents(!1);e.element.originElement.value=t,h.onSave_wysiwyg(t,d)},getContext:function(){return e},getContents:function(e){return d.getContents(e)},getText:function(){return e.element.wysiwyg.textContent},getCharCount:function(t){return t="string"==typeof t?t:l.charCounterType,d.getCharLength(d._charTypeHTML?e.element.wysiwyg.innerHTML:e.element.wysiwyg.textContent,t)},getImagesInfo:function(){return e.image?e.image._infoList:[]},getFilesInfo:function(t){return e[t]?e[t]._infoList:[]},insertImage:function(e){d.plugins.image&&e&&(d.initPlugins.image?d.plugins.image.submitAction.call(d,e):d.callPlugin("image",d.plugins.image.submitAction.bind(d,e),null),d.focus())},insertHTML:function(t,n,i,l){if(e.element.wysiwygFrame.contains(d.getSelection().focusNode)||d.focus(),"string"==typeof t){n||(t=d.cleanHTML(t,null,null)),M.a&&(t=M()({input:t,options:{attributes:{target:"_blank"}}}));try{if(r.isListCell(r.getFormatElement(d.getSelectionNode(),null))){const e=o.createRange().createContextualFragment(t).childNodes;d._isFormatData(e)&&(t=d._convertListCell(e))}const e=o.createRange().createContextualFragment(t).childNodes;if(i){const t=d._charTypeHTML?"outerHTML":"textContent";let n="";for(let i=0,l=e.length;i<l;i++)n+=e[i][t];if(!d.checkCharCount(n,null))return}let n,s,a,c,u;for(;n=e[0];)c&&3===c.nodeType&&s&&1===s.nodeType&&r.isBreak(n)?(c=n,r.removeItem(n)):(a=d.insertNode(n,s,!1),s=a.container||a,u||(u=a),c=n);3===c.nodeType&&1===s.nodeType&&(s=c);const h=3===s.nodeType?a.endOffset||s.textContent.length:s.childNodes.length;l?d.setRange(u.container||u,u.startOffset||0,s,h):1===s.nodeType&&s.lastChild?d.setRange(s.lastChild,s.lastChild.textContent.length,s.lastChild,s.lastChild.textContent.length):d.setRange(s,h,s,h)}catch(e){if(d.isDisabled||d.isReadOnly)return;console.warn("[SUNEDITOR.insertHTML.fail] "+e),d.execCommand("insertHTML",!1,t)}}else if(r.isComponent(t))d.insertComponent(t,!1,i,!1);else{let e=null;(r.isFormatElement(t)||r.isMedia(t))&&(e=r.getFormatElement(d.getSelectionNode(),null)),d.insertNode(t,e,i)}d.effectNode=null,d.focus(),d.history.push(!1)},setContents:function(e){d.setContents(e)},appendContents:function(t){const n=d.convertContentsForEditor(t);if(d._variable.isCodeView)d._setCodeView(d._getCodeView()+"\n"+d.convertHTMLForCodeView(n,!1));else{const t=r.createElement("DIV");t.innerHTML=n;const i=e.element.wysiwyg,l=t.children;for(let e=0,t=l.length;e<t;e++)l[e]&&i.appendChild(l[e])}d.history.push(!1)},readOnly:function(t){d.isReadOnly=t,r.setDisabledButtons(!!t,d.resizingDisabledButtons),t?(d.controllersOff(),d.submenuActiveButton&&d.submenuActiveButton.disabled&&d.submenuOff(),d._moreLayerActiveButton&&d._moreLayerActiveButton.disabled&&d.moreLayerOff(),d.containerActiveButton&&d.containerActiveButton.disabled&&d.containerOff(),d.modalForm&&d.plugins.dialog.close.call(d),e.element.code.setAttribute("readOnly","true"),r.addClass(e.element.wysiwygFrame,"se-read-only")):(e.element.code.removeAttribute("readOnly"),r.removeClass(e.element.wysiwygFrame,"se-read-only")),l.codeMirrorEditor&&l.codeMirrorEditor.setOption("readOnly",!!t)},disable:function(){this.toolbar.disable(),this.wysiwyg.disable()},disabled:function(){this.disable()},enable:function(){this.toolbar.enable(),this.wysiwyg.enable()},enabled:function(){this.enable()},show:function(){const t=e.element.topArea.style;"none"===t.display&&(t.display=l.display)},hide:function(){e.element.topArea.style.display="none"},destroy:function(){d.submenuOff(),d.containerOff(),d.controllersOff(),d.notice&&d.notice.close.call(d),d.modalForm&&d.plugins.dialog.close.call(d),d.history._destroy(),h._removeEvent(),r.removeItem(e.element.toolbar),r.removeItem(e.element.topArea);for(let e in d.functions)r.hasOwn(d,e)&&delete d.functions[e];for(let e in d)r.hasOwn(d,e)&&delete d[e];for(let e in h)r.hasOwn(h,e)&&delete h[e];for(let t in e)r.hasOwn(e,t)&&delete e[t];for(let e in t)r.hasOwn(t,e)&&delete t[e];for(let e in this)r.hasOwn(this,e)&&delete this[e]},toolbar:{disable:function(){d.submenuOff(),d.moreLayerOff(),d.containerOff(),e.tool.cover.style.display="block"},disabled:function(){this.disable()},enable:function(){e.tool.cover.style.display="none"},enabled:function(){this.enable()},show:function(){d._isInline?h._showToolbarInline():(e.element.toolbar.style.display="",e.element._stickyDummy.style.display=""),h.onResize_window()},hide:function(){d._isInline?h._hideToolbar():(e.element.toolbar.style.display="none",e.element._stickyDummy.style.display="none"),h.onResize_window()}},wysiwyg:{disable:function(){d.controllersOff(),d.modalForm&&d.plugins.dialog.close.call(d),e.element.wysiwyg.setAttribute("contenteditable",!1),d.isDisabled=!0,l.codeMirrorEditor?l.codeMirrorEditor.setOption("readOnly",!0):e.element.code.setAttribute("disabled","disabled")},enable:function(){e.element.wysiwyg.setAttribute("contenteditable",!0),d.isDisabled=!1,l.codeMirrorEditor?l.codeMirrorEditor.setOption("readOnly",!1):e.element.code.removeAttribute("disabled")}}};d.functions=p,d.options=l;let g=e.element,m=g.originElement,f=g.topArea;return m.style.display="none",f.style.display="block",l.iframe&&g.wysiwygFrame.addEventListener("load",(function(){r._setIframeDocument(this,l),d._editorInit(!1,l.value),l.value=null})),"object"==typeof m.nextElementSibling?m.parentNode.insertBefore(f,m.nextElementSibling):m.parentNode.appendChild(f),g.editorArea.appendChild(g.wysiwygFrame),g=m=f=null,l.iframe||(d._editorInit(!1,l.value),l.value=null),p}(B(i,l.constructed,l.options),l.pluginCallButtons,l.plugins,l.options.lang,t,l._responsiveButtons)}};window.SUNEDITOR||Object.defineProperty(window,"SUNEDITOR",{enumerable:!0,writable:!1,configurable:!1,value:D.init({plugins:x})})},ZED3:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"component",set_container:function(e,t){const n=this.util.createElement("DIV");return n.className="se-component "+t,n.appendChild(e),n},set_cover:function(e){const t=this.util.createElement("FIGURE");return t.appendChild(e),t},create_caption:function(){const e=this.util.createElement("FIGCAPTION");return e.innerHTML="<div>"+this.lang.dialogBox.caption+"</div>",e}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"component",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},bhjb:function(e,t,n){e.exports=function(){"use strict";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function t(e,t){return e(t={exports:{}},t.exports),t.exports}var n=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TLDs=void 0,t.TLDs="(AAA|AARP|ABB|ABBOTT|ABBVIE|ABC|ABLE|ABOGADO|ABUDHABI|AC|ACADEMY|ACCENTURE|ACCOUNTANT|ACCOUNTANTS|ACO|ACTOR|AD|ADS|ADULT|AE|AEG|AERO|AETNA|AF|AFL|AFRICA|AG|AGAKHAN|AGENCY|AI|AIG|AIRBUS|AIRFORCE|AIRTEL|AKDN|AL|ALIBABA|ALIPAY|ALLFINANZ|ALLSTATE|ALLY|ALSACE|ALSTOM|AM|AMAZON|AMERICANEXPRESS|AMERICANFAMILY|AMEX|AMFAM|AMICA|AMSTERDAM|ANALYTICS|ANDROID|ANQUAN|ANZ|AO|AOL|APARTMENTS|APP|APPLE|AQ|AQUARELLE|AR|ARAB|ARAMCO|ARCHI|ARMY|ARPA|ART|ARTE|AS|ASDA|ASIA|ASSOCIATES|AT|ATHLETA|ATTORNEY|AU|AUCTION|AUDI|AUDIBLE|AUDIO|AUSPOST|AUTHOR|AUTO|AUTOS|AW|AWS|AX|AXA|AZ|AZURE|BA|BABY|BAIDU|BANAMEX|BAND|BANK|BAR|BARCELONA|BARCLAYCARD|BARCLAYS|BAREFOOT|BARGAINS|BASEBALL|BASKETBALL|BAUHAUS|BAYERN|BB|BBC|BBT|BBVA|BCG|BCN|BD|BE|BEATS|BEAUTY|BEER|BENTLEY|BERLIN|BEST|BESTBUY|BET|BF|BG|BH|BHARTI|BI|BIBLE|BID|BIKE|BING|BINGO|BIO|BIZ|BJ|BLACK|BLACKFRIDAY|BLOCKBUSTER|BLOG|BLOOMBERG|BLUE|BM|BMS|BMW|BN|BNPPARIBAS|BO|BOATS|BOEHRINGER|BOFA|BOM|BOND|BOO|BOOK|BOOKING|BOSCH|BOSTIK|BOSTON|BOT|BOUTIQUE|BOX|BR|BRADESCO|BRIDGESTONE|BROADWAY|BROKER|BROTHER|BRUSSELS|BS|BT|BUILD|BUILDERS|BUSINESS|BUY|BUZZ|BV|BW|BY|BZ|BZH|CA|CAB|CAFE|CAL|CALL|CALVINKLEIN|CAM|CAMERA|CAMP|CANON|CAPETOWN|CAPITAL|CAPITALONE|CAR|CARAVAN|CARDS|CARE|CAREER|CAREERS|CARS|CASA|CASE|CASH|CASINO|CAT|CATERING|CATHOLIC|CBA|CBN|CBRE|CC|CD|CENTER|CEO|CERN|CF|CFA|CFD|CG|CH|CHANEL|CHANNEL|CHARITY|CHASE|CHAT|CHEAP|CHINTAI|CHRISTMAS|CHROME|CHURCH|CI|CIPRIANI|CIRCLE|CISCO|CITADEL|CITI|CITIC|CITY|CK|CL|CLAIMS|CLEANING|CLICK|CLINIC|CLINIQUE|CLOTHING|CLOUD|CLUB|CLUBMED|CM|CN|CO|COACH|CODES|COFFEE|COLLEGE|COLOGNE|COM|COMMBANK|COMMUNITY|COMPANY|COMPARE|COMPUTER|COMSEC|CONDOS|CONSTRUCTION|CONSULTING|CONTACT|CONTRACTORS|COOKING|COOL|COOP|CORSICA|COUNTRY|COUPON|COUPONS|COURSES|CPA|CR|CREDIT|CREDITCARD|CREDITUNION|CRICKET|CROWN|CRS|CRUISE|CRUISES|CU|CUISINELLA|CV|CW|CX|CY|CYMRU|CYOU|CZ|DABUR|DAD|DANCE|DATA|DATE|DATING|DATSUN|DAY|DCLK|DDS|DE|DEAL|DEALER|DEALS|DEGREE|DELIVERY|DELL|DELOITTE|DELTA|DEMOCRAT|DENTAL|DENTIST|DESI|DESIGN|DEV|DHL|DIAMONDS|DIET|DIGITAL|DIRECT|DIRECTORY|DISCOUNT|DISCOVER|DISH|DIY|DJ|DK|DM|DNP|DO|DOCS|DOCTOR|DOG|DOMAINS|DOT|DOWNLOAD|DRIVE|DTV|DUBAI|DUNLOP|DUPONT|DURBAN|DVAG|DVR|DZ|EARTH|EAT|EC|ECO|EDEKA|EDU|EDUCATION|EE|EG|EMAIL|EMERCK|ENERGY|ENGINEER|ENGINEERING|ENTERPRISES|EPSON|EQUIPMENT|ER|ERICSSON|ERNI|ES|ESQ|ESTATE|ET|EU|EUROVISION|EUS|EVENTS|EXCHANGE|EXPERT|EXPOSED|EXPRESS|EXTRASPACE|FAGE|FAIL|FAIRWINDS|FAITH|FAMILY|FAN|FANS|FARM|FARMERS|FASHION|FAST|FEDEX|FEEDBACK|FERRARI|FERRERO|FI|FIDELITY|FIDO|FILM|FINAL|FINANCE|FINANCIAL|FIRE|FIRESTONE|FIRMDALE|FISH|FISHING|FIT|FITNESS|FJ|FK|FLICKR|FLIGHTS|FLIR|FLORIST|FLOWERS|FLY|FM|FO|FOO|FOOD|FOOTBALL|FORD|FOREX|FORSALE|FORUM|FOUNDATION|FOX|FR|FREE|FRESENIUS|FRL|FROGANS|FRONTIER|FTR|FUJITSU|FUN|FUND|FURNITURE|FUTBOL|FYI|GA|GAL|GALLERY|GALLO|GALLUP|GAME|GAMES|GAP|GARDEN|GAY|GB|GBIZ|GD|GDN|GE|GEA|GENT|GENTING|GEORGE|GF|GG|GGEE|GH|GI|GIFT|GIFTS|GIVES|GIVING|GL|GLASS|GLE|GLOBAL|GLOBO|GM|GMAIL|GMBH|GMO|GMX|GN|GODADDY|GOLD|GOLDPOINT|GOLF|GOO|GOODYEAR|GOOG|GOOGLE|GOP|GOT|GOV|GP|GQ|GR|GRAINGER|GRAPHICS|GRATIS|GREEN|GRIPE|GROCERY|GROUP|GS|GT|GU|GUCCI|GUGE|GUIDE|GUITARS|GURU|GW|GY|HAIR|HAMBURG|HANGOUT|HAUS|HBO|HDFC|HDFCBANK|HEALTH|HEALTHCARE|HELP|HELSINKI|HERE|HERMES|HIPHOP|HISAMITSU|HITACHI|HIV|HK|HKT|HM|HN|HOCKEY|HOLDINGS|HOLIDAY|HOMEDEPOT|HOMEGOODS|HOMES|HOMESENSE|HONDA|HORSE|HOSPITAL|HOST|HOSTING|HOT|HOTELS|HOTMAIL|HOUSE|HOW|HR|HSBC|HT|HU|HUGHES|HYATT|HYUNDAI|IBM|ICBC|ICE|ICU|ID|IE|IEEE|IFM|IKANO|IL|IM|IMAMAT|IMDB|IMMO|IMMOBILIEN|IN|INC|INDUSTRIES|INFINITI|INFO|ING|INK|INSTITUTE|INSURANCE|INSURE|INT|INTERNATIONAL|INTUIT|INVESTMENTS|IO|IPIRANGA|IQ|IR|IRISH|IS|ISMAILI|IST|ISTANBUL|IT|ITAU|ITV|JAGUAR|JAVA|JCB|JE|JEEP|JETZT|JEWELRY|JIO|JLL|JM|JMP|JNJ|JO|JOBS|JOBURG|JOT|JOY|JP|JPMORGAN|JPRS|JUEGOS|JUNIPER|KAUFEN|KDDI|KE|KERRYHOTELS|KERRYLOGISTICS|KERRYPROPERTIES|KFH|KG|KH|KI|KIA|KIDS|KIM|KINDLE|KITCHEN|KIWI|KM|KN|KOELN|KOMATSU|KOSHER|KP|KPMG|KPN|KR|KRD|KRED|KUOKGROUP|KW|KY|KYOTO|KZ|LA|LACAIXA|LAMBORGHINI|LAMER|LANCASTER|LAND|LANDROVER|LANXESS|LASALLE|LAT|LATINO|LATROBE|LAW|LAWYER|LB|LC|LDS|LEASE|LECLERC|LEFRAK|LEGAL|LEGO|LEXUS|LGBT|LI|LIDL|LIFE|LIFEINSURANCE|LIFESTYLE|LIGHTING|LIKE|LILLY|LIMITED|LIMO|LINCOLN|LINK|LIPSY|LIVE|LIVING|LK|LLC|LLP|LOAN|LOANS|LOCKER|LOCUS|LOL|LONDON|LOTTE|LOTTO|LOVE|LPL|LPLFINANCIAL|LR|LS|LT|LTD|LTDA|LU|LUNDBECK|LUXE|LUXURY|LV|LY|MA|MADRID|MAIF|MAISON|MAKEUP|MAN|MANAGEMENT|MANGO|MAP|MARKET|MARKETING|MARKETS|MARRIOTT|MARSHALLS|MATTEL|MBA|MC|MCKINSEY|MD|ME|MED|MEDIA|MEET|MELBOURNE|MEME|MEMORIAL|MEN|MENU|MERCKMSD|MG|MH|MIAMI|MICROSOFT|MIL|MINI|MINT|MIT|MITSUBISHI|MK|ML|MLB|MLS|MM|MMA|MN|MO|MOBI|MOBILE|MODA|MOE|MOI|MOM|MONASH|MONEY|MONSTER|MORMON|MORTGAGE|MOSCOW|MOTO|MOTORCYCLES|MOV|MOVIE|MP|MQ|MR|MS|MSD|MT|MTN|MTR|MU|MUSEUM|MUSIC|MV|MW|MX|MY|MZ|NA|NAB|NAGOYA|NAME|NATURA|NAVY|NBA|NC|NE|NEC|NET|NETBANK|NETFLIX|NETWORK|NEUSTAR|NEW|NEWS|NEXT|NEXTDIRECT|NEXUS|NF|NFL|NG|NGO|NHK|NI|NICO|NIKE|NIKON|NINJA|NISSAN|NISSAY|NL|NO|NOKIA|NORTON|NOW|NOWRUZ|NOWTV|NP|NR|NRA|NRW|NTT|NU|NYC|NZ|OBI|OBSERVER|OFFICE|OKINAWA|OLAYAN|OLAYANGROUP|OLLO|OM|OMEGA|ONE|ONG|ONL|ONLINE|OOO|OPEN|ORACLE|ORANGE|ORG|ORGANIC|ORIGINS|OSAKA|OTSUKA|OTT|OVH|PA|PAGE|PANASONIC|PARIS|PARS|PARTNERS|PARTS|PARTY|PAY|PCCW|PE|PET|PF|PFIZER|PG|PH|PHARMACY|PHD|PHILIPS|PHONE|PHOTO|PHOTOGRAPHY|PHOTOS|PHYSIO|PICS|PICTET|PICTURES|PID|PIN|PING|PINK|PIONEER|PIZZA|PK|PL|PLACE|PLAY|PLAYSTATION|PLUMBING|PLUS|PM|PN|PNC|POHL|POKER|POLITIE|PORN|POST|PR|PRAMERICA|PRAXI|PRESS|PRIME|PRO|PROD|PRODUCTIONS|PROF|PROGRESSIVE|PROMO|PROPERTIES|PROPERTY|PROTECTION|PRU|PRUDENTIAL|PS|PT|PUB|PW|PWC|PY|QA|QPON|QUEBEC|QUEST|RACING|RADIO|RE|READ|REALESTATE|REALTOR|REALTY|RECIPES|RED|REDSTONE|REDUMBRELLA|REHAB|REISE|REISEN|REIT|RELIANCE|REN|RENT|RENTALS|REPAIR|REPORT|REPUBLICAN|REST|RESTAURANT|REVIEW|REVIEWS|REXROTH|RICH|RICHARDLI|RICOH|RIL|RIO|RIP|RO|ROCKS|RODEO|ROGERS|ROOM|RS|RSVP|RU|RUGBY|RUHR|RUN|RW|RWE|RYUKYU|SA|SAARLAND|SAFE|SAFETY|SAKURA|SALE|SALON|SAMSCLUB|SAMSUNG|SANDVIK|SANDVIKCOROMANT|SANOFI|SAP|SARL|SAS|SAVE|SAXO|SB|SBI|SBS|SC|SCB|SCHAEFFLER|SCHMIDT|SCHOLARSHIPS|SCHOOL|SCHULE|SCHWARZ|SCIENCE|SCOT|SD|SE|SEARCH|SEAT|SECURE|SECURITY|SEEK|SELECT|SENER|SERVICES|SEVEN|SEW|SEX|SEXY|SFR|SG|SH|SHANGRILA|SHARP|SHAW|SHELL|SHIA|SHIKSHA|SHOES|SHOP|SHOPPING|SHOUJI|SHOW|SI|SILK|SINA|SINGLES|SITE|SJ|SK|SKI|SKIN|SKY|SKYPE|SL|SLING|SM|SMART|SMILE|SN|SNCF|SO|SOCCER|SOCIAL|SOFTBANK|SOFTWARE|SOHU|SOLAR|SOLUTIONS|SONG|SONY|SOY|SPA|SPACE|SPORT|SPOT|SR|SRL|SS|ST|STADA|STAPLES|STAR|STATEBANK|STATEFARM|STC|STCGROUP|STOCKHOLM|STORAGE|STORE|STREAM|STUDIO|STUDY|STYLE|SU|SUCKS|SUPPLIES|SUPPLY|SUPPORT|SURF|SURGERY|SUZUKI|SV|SWATCH|SWISS|SX|SY|SYDNEY|SYSTEMS|SZ|TAB|TAIPEI|TALK|TAOBAO|TARGET|TATAMOTORS|TATAR|TATTOO|TAX|TAXI|TC|TCI|TD|TDK|TEAM|TECH|TECHNOLOGY|TEL|TEMASEK|TENNIS|TEVA|TF|TG|TH|THD|THEATER|THEATRE|TIAA|TICKETS|TIENDA|TIPS|TIRES|TIROL|TJ|TJMAXX|TJX|TK|TKMAXX|TL|TM|TMALL|TN|TO|TODAY|TOKYO|TOOLS|TOP|TORAY|TOSHIBA|TOTAL|TOURS|TOWN|TOYOTA|TOYS|TR|TRADE|TRADING|TRAINING|TRAVEL|TRAVELERS|TRAVELERSINSURANCE|TRUST|TRV|TT|TUBE|TUI|TUNES|TUSHU|TV|TVS|TW|TZ|UA|UBANK|UBS|UG|UK|UNICOM|UNIVERSITY|UNO|UOL|UPS|US|UY|UZ|VA|VACATIONS|VANA|VANGUARD|VC|VE|VEGAS|VENTURES|VERISIGN|VERSICHERUNG|VET|VG|VI|VIAJES|VIDEO|VIG|VIKING|VILLAS|VIN|VIP|VIRGIN|VISA|VISION|VIVA|VIVO|VLAANDEREN|VN|VODKA|VOLVO|VOTE|VOTING|VOTO|VOYAGE|VU|WALES|WALMART|WALTER|WANG|WANGGOU|WATCH|WATCHES|WEATHER|WEATHERCHANNEL|WEBCAM|WEBER|WEBSITE|WED|WEDDING|WEIBO|WEIR|WF|WHOSWHO|WIEN|WIKI|WILLIAMHILL|WIN|WINDOWS|WINE|WINNERS|WME|WOLTERSKLUWER|WOODSIDE|WORK|WORKS|WORLD|WOW|WS|WTC|WTF|XBOX|XEROX|XIHUAN|XIN|XN--11B4C3D|XN--1CK2E1B|XN--1QQW23A|XN--2SCRJ9C|XN--30RR7Y|XN--3BST00M|XN--3DS443G|XN--3E0B707E|XN--3HCRJ9C|XN--3PXU8K|XN--42C2D9A|XN--45BR5CYL|XN--45BRJ9C|XN--45Q11C|XN--4DBRK0CE|XN--4GBRIM|XN--54B7FTA0CC|XN--55QW42G|XN--55QX5D|XN--5SU34J936BGSG|XN--5TZM5G|XN--6FRZ82G|XN--6QQ986B3XL|XN--80ADXHKS|XN--80AO21A|XN--80AQECDR1A|XN--80ASEHDB|XN--80ASWG|XN--8Y0A063A|XN--90A3AC|XN--90AE|XN--90AIS|XN--9DBQ2A|XN--9ET52U|XN--9KRT00A|XN--B4W605FERD|XN--BCK1B9A5DRE4C|XN--C1AVG|XN--C2BR7G|XN--CCK2B3B|XN--CCKWCXETD|XN--CG4BKI|XN--CLCHC0EA0B2G2A9GCD|XN--CZR694B|XN--CZRS0T|XN--CZRU2D|XN--D1ACJ3B|XN--D1ALF|XN--E1A4C|XN--ECKVDTC9D|XN--EFVY88H|XN--FCT429K|XN--FHBEI|XN--FIQ228C5HS|XN--FIQ64B|XN--FIQS8S|XN--FIQZ9S|XN--FJQ720A|XN--FLW351E|XN--FPCRJ9C3D|XN--FZC2C9E2C|XN--FZYS8D69UVGM|XN--G2XX48C|XN--GCKR3F0F|XN--GECRJ9C|XN--GK3AT1E|XN--H2BREG3EVE|XN--H2BRJ9C|XN--H2BRJ9C8C|XN--HXT814E|XN--I1B6B1A6A2E|XN--IMR513N|XN--IO0A7I|XN--J1AEF|XN--J1AMH|XN--J6W193G|XN--JLQ480N2RG|XN--JVR189M|XN--KCRX77D1X4A|XN--KPRW13D|XN--KPRY57D|XN--KPUT3I|XN--L1ACC|XN--LGBBAT1AD8J|XN--MGB9AWBF|XN--MGBA3A3EJT|XN--MGBA3A4F16A|XN--MGBA7C0BBN0A|XN--MGBAAM7A8H|XN--MGBAB2BD|XN--MGBAH1A3HJKRD|XN--MGBAI9AZGQP6J|XN--MGBAYH7GPA|XN--MGBBH1A|XN--MGBBH1A71E|XN--MGBC0A9AZCG|XN--MGBCA7DZDO|XN--MGBCPQ6GPA1A|XN--MGBERP4A5D4AR|XN--MGBGU82A|XN--MGBI4ECEXP|XN--MGBPL2FH|XN--MGBT3DHD|XN--MGBTX2B|XN--MGBX4CD0AB|XN--MIX891F|XN--MK1BU44C|XN--MXTQ1M|XN--NGBC5AZD|XN--NGBE9E0A|XN--NGBRX|XN--NODE|XN--NQV7F|XN--NQV7FS00EMA|XN--NYQY26A|XN--O3CW4H|XN--OGBPF8FL|XN--OTU796D|XN--P1ACF|XN--P1AI|XN--PGBS0DH|XN--PSSY2U|XN--Q7CE6A|XN--Q9JYB4C|XN--QCKA1PMC|XN--QXA6A|XN--QXAM|XN--RHQV96G|XN--ROVU88B|XN--RVC1E0AM3E|XN--S9BRJ9C|XN--SES554G|XN--T60B56A|XN--TCKWE|XN--TIQ49XQYJ|XN--UNUP4Y|XN--VERMGENSBERATER-CTB|XN--VERMGENSBERATUNG-PWB|XN--VHQUV|XN--VUQ861B|XN--W4R85EL8FHU5DNRA|XN--W4RS40L|XN--WGBH1C|XN--WGBL6A|XN--XHQ521B|XN--XKC2AL3HYE2A|XN--XKC2DL3A5EE0H|XN--Y9A3AQ|XN--YFRO4I67O|XN--YGBI2AMMX|XN--ZFR164B|XXX|XYZ|YACHTS|YAHOO|YAMAXUN|YANDEX|YE|YODOBASHI|YOGA|YOKOHAMA|YOU|YOUTUBE|YT|YUN|ZA|ZAPPOS|ZARA|ZERO|ZIP|ZM|ZONE|ZUERICH|ZW|TEST)"}));e(n),n.TLDs;var i=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TLDs=t.nonLatinAlphabetRanges=t.htmlAttributes=t.parenthesis=t.closingParenthesis=t.openingParenthesis=void 0,t.openingParenthesis="([\"'{",t.closingParenthesis=")]\"'}",t.parenthesis=t.openingParenthesis.split("").map((function(e,n){return"".concat(e).concat(t.closingParenthesis.charAt(n))})),t.htmlAttributes=["src","data","href","cite","formaction","icon","manifest","poster","codebase","background","profile","usemap","itemtype","action","longdesc","classid","archive"],t.nonLatinAlphabetRanges="\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC",t.TLDs=n.TLDs}));e(i),i.TLDs,i.nonLatinAlphabetRanges,i.htmlAttributes,i.parenthesis,i.closingParenthesis,i.openingParenthesis;var l=t((function(e,t){function n(e,t,n){return"function"==typeof n?n(e,t):n}Object.defineProperty(t,"__esModule",{value:!0}),t.transform=void 0,t.transform=function(e,t){var i="",l=1/0,s={},o=!1;if(t&&t.specialTransform)for(var a=0;a<t.specialTransform.length;a++){var r=t.specialTransform[a];if(r.test.test(e.string))return r.transform(e.string,e)}return t&&t.exclude&&n(e.string,e,t.exclude)?e.string:(t&&t.protocol&&(i=n(e.string,e,t.protocol)),e.protocol?i="":i||(i=e.isEmail?"mailto:":e.isFile?"file:///":"http://"),t&&t.truncate&&(l=n(e.string,e,t.truncate)),t&&t.middleTruncation&&(o=n(e.string,e,t.middleTruncation)),t&&t.attributes&&(s=n(e.string,e,t.attributes)),"<a ".concat(Object.keys(s).map((function(e){return!0===s[e]?e:"".concat(e,'="').concat(s[e],'" ')})).join(" "),'href="').concat(i).concat(e.string,'">').concat(e.string.length>l?o?e.string.substring(0,Math.floor(l/2))+"…"+e.string.substring(e.string.length-Math.ceil(l/2),e.string.length):e.string.substring(0,l)+"…":e.string,"</a>"))}}));e(l),l.transform;var s=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.iidxes=t.urlRegex=t.fileRegex=t.emailRegex=t.ipRegex=t.finalRegex=t.final2=t.final1=t.file=t.url=t.email=void 0;var n="(?:(?:(?:[a-z\\d]|[a-z\\d][\\w\\-]*[a-z\\d]))\\.)+(xn--[a-z\\d]{2,}|[a-z]{2,})(?=[^.]|\\b)",l="((?:/|\\?)(?:([".concat("\\w\\-.~\\!$&*+,;=:@%'\"\\[\\]()?#").concat(i.nonLatinAlphabetRanges,"\\/](?:[\\w\\-~+=#&\\/").concat(i.nonLatinAlphabetRanges,"]|\\b)+)*)+)"),s="((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))",o="(".concat("(ht{2}ps?:|ftps?:)\\/\\/",")\\S+\\b"),a="(((".concat("(ht{2}ps?:|ftps?:)\\/\\/",")?(").concat(n,"|").concat(s,")(?=\\b|_)").concat("(:(\\d{1,5}))?",")|(?:").concat(o,"))");t.email="\\b(mailto:)?".concat("([\\w!#$%&'*+=?^`{|}~-]+(?:\\.[\\w!#$%&'*+=?^`{|}~-]+)*)","@(").concat(n,"|").concat(s,")"),t.url="(".concat(a,")").concat(l,"?"),t.file="(file:\\/\\/\\/)(?:[a-z]+:(?:\\/|\\\\)+)?([\\w.]+(?:[\\/\\\\]?)+)+",t.final1="(?<=\\b|_)((".concat(t.email,")|(").concat(t.file,")|(").concat(t.url,"))(\\b)?"),t.final2="((\\b)(".concat(t.email,")|(\\b)(").concat(t.file,")|(\\b)(").concat(t.url,"))(\\b)?"),t.finalRegex=new RegExp(t.final2,"gi");try{t.finalRegex=new RegExp(t.final1,"gi")}catch(e){t.finalRegex=new RegExp(t.final2,"gi")}t.ipRegex=new RegExp("^(".concat(s,"|").concat("\\[(?:(?:[a-f\\d:]+:+)+[a-f\\d]+)\\]",")$"),"i"),t.emailRegex=new RegExp("^(".concat(t.email,")$"),"i"),t.fileRegex=new RegExp("^(".concat(t.file,")$"),"i"),t.urlRegex=new RegExp("^(".concat(t.url,")$"),"i"),t.iidxes={isFile:8,file:{fileName:10,protocol:9},isEmail:2,email:{protocol:3,local:4,host:5},isURL:11,url:{TLD:[18,6],protocol:[15,22],host:[17],ipv4:19,byProtocol:13,port:21,protocolWithDomain:12,path:24}}}));e(s),s.iidxes,s.urlRegex,s.fileRegex,s.emailRegex,s.ipRegex,s.finalRegex,s.final2,s.final1,s.file,s.url,s.email;var o=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.isInsideAnchorTag=t.isInsideAttribute=t.maximumAttrLength=t.checkParenthesis=void 0,t.checkParenthesis=function(e,t,n,i){return i===t&&(n.split(e).length-n.split(t).length==1||e===t&&n.split(e).length%2==0||void 0)},t.maximumAttrLength=i.htmlAttributes.sort((function(e,t){return t.length-e.length}))[0].length,t.isInsideAttribute=function(e){return/\s[a-z0-9-]+=('|")$/i.test(e)||/: ?url\(('|")?$/i.test(e)},t.isInsideAnchorTag=function(e,t,n){for(var i=e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),l=new RegExp("(?=(<a))(?!([\\s\\S]*)(<\\/a>)(".concat(i,"))[\\s\\S]*?(").concat(i,")(?!\"|')"),"gi"),s=null;null!==(s=l.exec(t));)if(s.index+s[0].length===n)return!0;return!1}}));return e(o),o.isInsideAnchorTag,o.isInsideAttribute,o.maximumAttrLength,o.checkParenthesis,e(t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=new RegExp("^(".concat(i.TLDs,")$"),"i"),a=function(e,t){void 0===t&&(t=!0);for(var l=[],a=null,r=function(){var r=a.index,c=r+a[0].length,u=a[0],d=a[s.iidxes.url.protocol[0]]||a[s.iidxes.url.protocol[1]]||a[s.iidxes.url.protocol[2]];if(i.closingParenthesis.indexOf(e.charAt(c))>-1&&i.parenthesis.forEach((function(t){var n=t.charAt(0),i=t.charAt(1);(0,o.checkParenthesis)(n,i,u,e.charAt(c))&&(u+=e.charAt(c),c++)})),t){if(-1!==['""',"''","()"].indexOf(e.charAt(r-1)+e.charAt(c))&&(0,o.isInsideAttribute)(e.substring(r-o.maximumAttrLength-15,r)))return"continue";if(e.substring(c,e.length).indexOf("</a>")>-1&&e.substring(0,r).indexOf("<a")>-1&&(0,o.isInsideAnchorTag)(u,e,c))return"continue"}var h=a[s.iidxes.url.TLD[0]]||a[s.iidxes.url.TLD[1]];if(h&&!d&&!a[s.iidxes.email.protocol]&&!h.startsWith("xn--")&&!n.test(h))return"continue";if(a[s.iidxes.isURL]){var p=a[s.iidxes.url.host[0]]||a[s.iidxes.url.host[1]]||a[s.iidxes.url.host[2]],g=(u.match(/(?:[^\/:]|])((?:\/[^?#\s]+)+)/)||[])[1],m=(u.match(/(?:\?)([^#]+)\b/)||[])[1],f=(u.match(/(?:#)(.+)\b/)||[])[1],_=void 0===p?(u.match(/\/\/\[((?:(?:[a-f\d:]+:+)+[a-f\d]+))\]/)||[])[1]:void 0;l.push({start:r,end:c,string:u,isURL:!0,protocol:d,port:a[s.iidxes.url.port],ipv4:a[s.iidxes.url.ipv4],ipv6:_,host:_?"["+_+"]":p,confirmedByProtocol:!!d,path:g||void 0,query:m,fragment:f,reason:"url"})}else if(a[s.iidxes.isFile]){var b=u.substr(8);l.push({start:r,end:c,string:u,isFile:!0,protocol:a[s.iidxes.file.protocol],filename:a[s.iidxes.file.fileName],filePath:b,fileDirectory:b.substr(0,b.length-a[s.iidxes.file.fileName].length),reason:"file"})}else a[s.iidxes.isEmail]?l.push({start:r,end:c,string:u,isEmail:!0,local:a[s.iidxes.email.local],protocol:a[s.iidxes.email.protocol],host:a[s.iidxes.email.host],reason:"email"}):l.push({start:r,end:c,string:u,reason:"unknown"})};null!==(a=s.finalRegex.exec(e));)r();return l},r=function(e){var t="string"==typeof e?{input:e,options:void 0,extensions:void 0}:e,n=t.input,i=t.options,s=t.extensions;if(s)for(var o=0;o<s.length;o++){var r=s[o];n=n.replace(r.test,r.transform)}var c=a(n,(i||{}).skipHTML),u="";for(o=0;o<c.length;o++)u=(u||(0===o?n.substring(0,c[o].start):""))+(0,l.transform)(c[o],i)+(c[o+1]?n.substring(c[o].end,c[o+1].start):n.substring(c[o].end));return u||n};r.list=a,r.validate={ip:function(e){return s.ipRegex.test(e)},email:function(e){return s.emailRegex.test(e)},file:function(e){return s.fileRegex.test(e)},url:function(e){return s.urlRegex.test(e)||s.ipRegex.test(e)}},t.default=r})))}()},ee5k:function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"resizing",add:function(e){const t=e.icons,n=e.context;n.resizing={_resizeClientX:0,_resizeClientY:0,_resize_plugin:"",_resize_w:0,_resize_h:0,_origin_w:0,_origin_h:0,_rotateVertical:!1,_resize_direction:"",_move_path:null,_isChange:!1,alignIcons:{basic:t.align_justify,left:t.align_left,right:t.align_right,center:t.align_center}};let i=this.setController_resize(e);n.resizing.resizeContainer=i,n.resizing.resizeDiv=i.querySelector(".se-modal-resize"),n.resizing.resizeDot=i.querySelector(".se-resize-dot"),n.resizing.resizeDisplay=i.querySelector(".se-resize-display");let l=this.setController_button(e);n.resizing.resizeButton=l;let s=n.resizing.resizeHandles=n.resizing.resizeDot.querySelectorAll("span");n.resizing.resizeButtonGroup=l.querySelector("._se_resizing_btn_group"),n.resizing.rotationButtons=l.querySelectorAll("._se_resizing_btn_group ._se_rotation"),n.resizing.percentageButtons=l.querySelectorAll("._se_resizing_btn_group ._se_percentage"),n.resizing.alignMenu=l.querySelector(".se-resizing-align-list"),n.resizing.alignMenuList=n.resizing.alignMenu.querySelectorAll("button"),n.resizing.alignButton=l.querySelector("._se_resizing_align_button"),n.resizing.autoSizeButton=l.querySelector("._se_resizing_btn_group ._se_auto_size"),n.resizing.captionButton=l.querySelector("._se_resizing_caption_button"),i.addEventListener("mousedown",(function(e){e.preventDefault()})),s[0].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),s[1].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),s[2].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),s[3].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),s[4].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),s[5].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),s[6].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),s[7].addEventListener("mousedown",this.onMouseDown_resize_handle.bind(e)),l.addEventListener("click",this.onClick_resizeButton.bind(e)),n.element.relative.appendChild(i),n.element.relative.appendChild(l),i=null,l=null,s=null},setController_resize:function(e){const t=e.util.createElement("DIV");return t.className="se-controller se-resizing-container",t.style.display="none",t.innerHTML='<div class="se-modal-resize"></div><div class="se-resize-dot"><span class="tl"></span><span class="tr"></span><span class="bl"></span><span class="br"></span><span class="lw"></span><span class="th"></span><span class="rw"></span><span class="bh"></span><div class="se-resize-display"></div></div>',t},setController_button:function(e){const t=e.lang,n=e.icons,i=e.util.createElement("DIV");return i.className="se-controller se-controller-resizing",i.innerHTML='<div class="se-arrow se-arrow-up"></div><div class="se-btn-group _se_resizing_btn_group"><button type="button" data-command="percent" data-value="1" class="se-tooltip _se_percentage"><span>100%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize100+'</span></span></button><button type="button" data-command="percent" data-value="0.75" class="se-tooltip _se_percentage"><span>75%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize75+'</span></span></button><button type="button" data-command="percent" data-value="0.5" class="se-tooltip _se_percentage"><span>50%</span><span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.resize50+'</span></span></button><button type="button" data-command="auto" class="se-btn se-tooltip _se_auto_size">'+n.auto_size+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.autoSize+'</span></span></button><button type="button" data-command="rotate" data-value="-90" class="se-btn se-tooltip _se_rotation">'+n.rotate_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.rotateLeft+'</span></span></button><button type="button" data-command="rotate" data-value="90" class="se-btn se-tooltip _se_rotation">'+n.rotate_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.rotateRight+'</span></span></button></div><div class="se-btn-group" style="padding-top: 0;"><button type="button" data-command="mirror" data-value="h" class="se-btn se-tooltip">'+n.mirror_horizontal+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.mirrorHorizontal+'</span></span></button><button type="button" data-command="mirror" data-value="v" class="se-btn se-tooltip">'+n.mirror_vertical+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.mirrorVertical+'</span></span></button><button type="button" data-command="onalign" class="se-btn se-tooltip _se_resizing_align_button">'+n.align_justify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.toolbar.align+'</span></span></button><div class="se-btn-group-sub sun-editor-common se-list-layer se-resizing-align-list"><div class="se-list-inner"><ul class="se-list-basic"><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="basic">'+n.align_justify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.basic+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="left">'+n.align_left+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.left+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="center">'+n.align_center+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.center+'</span></span></button></li><li><button type="button" class="se-btn-list se-tooltip" data-command="align" data-value="right">'+n.align_right+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.right+'</span></span></button></li></ul></div></div><button type="button" data-command="caption" class="se-btn se-tooltip _se_resizing_caption_button">'+n.caption+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.caption+'</span></span></button><button type="button" data-command="revert" class="se-btn se-tooltip">'+n.revert+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.dialogBox.revertButton+'</span></span></button><button type="button" data-command="update" class="se-btn se-tooltip">'+n.modify+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.edit+'</span></span></button><button type="button" data-command="delete" class="se-btn se-tooltip">'+n.delete+'<span class="se-tooltip-inner"><span class="se-tooltip-text">'+t.controller.remove+"</span></span></button></div>",i},_module_getSizeX:function(e,t,n,i){return t||(t=e._element),n||(n=e._cover),i||(i=e._container),t?/%$/.test(t.style.width)?(i&&this.util.getNumber(i.style.width,2)||100)+"%":t.style.width:""},_module_getSizeY:function(e,t,n,i){return t||(t=e._element),n||(n=e._cover),i||(i=e._container),i&&n?this.util.getNumber(n.style.paddingBottom,0)>0&&!this.context.resizing._rotateVertical?n.style.height:/%$/.test(t.style.height)&&/%$/.test(t.style.width)?(i&&this.util.getNumber(i.style.height,2)||100)+"%":t.style.height:t&&t.style.height||""},_module_setModifyInputSize:function(e,t){const n=e._onlyPercentage&&this.context.resizing._rotateVertical;e.proportion.checked=e._proportionChecked="false"!==e._element.getAttribute("data-proportion");let i=n?"":this.plugins.resizing._module_getSizeX.call(this,e);if(i===e._defaultSizeX&&(i=""),e._onlyPercentage&&(i=this.util.getNumber(i,2)),e.inputX.value=i,t.setInputSize.call(this,"x"),!e._onlyPercentage){let t=n?"":this.plugins.resizing._module_getSizeY.call(this,e);t===e._defaultSizeY&&(t=""),e._onlyPercentage&&(t=this.util.getNumber(t,2)),e.inputY.value=t}e.inputX.disabled=!!n,e.inputY.disabled=!!n,e.proportion.disabled=!!n,t.setRatio.call(this)},_module_setInputSize:function(e,t){if(e._onlyPercentage)"x"===t&&e.inputX.value>100&&(e.inputX.value=100);else if(e.proportion.checked&&e._ratio&&/\d/.test(e.inputX.value)&&/\d/.test(e.inputY.value)){const n=e.inputX.value.replace(/\d+|\./g,"")||e.sizeUnit,i=e.inputY.value.replace(/\d+|\./g,"")||e.sizeUnit;if(n!==i)return;const l="%"===n?2:0;"x"===t?e.inputY.value=this.util.getNumber(e._ratioY*this.util.getNumber(e.inputX.value,l),l)+i:e.inputX.value=this.util.getNumber(e._ratioX*this.util.getNumber(e.inputY.value,l),l)+n}},_module_setRatio:function(e){const t=e.inputX.value,n=e.inputY.value;if(e.proportion.checked&&/\d+/.test(t)&&/\d+/.test(n)){if((t.replace(/\d+|\./g,"")||e.sizeUnit)!==(n.replace(/\d+|\./g,"")||e.sizeUnit))e._ratio=!1;else if(!e._ratio){const i=this.util.getNumber(t,0),l=this.util.getNumber(n,0);e._ratio=!0,e._ratioX=i/l,e._ratioY=l/i}}else e._ratio=!1},_module_sizeRevert:function(e){e._onlyPercentage?e.inputX.value=e._origin_w>100?100:e._origin_w:(e.inputX.value=e._origin_w,e.inputY.value=e._origin_h)},_module_saveCurrentSize:function(e){const t=this.plugins.resizing._module_getSizeX.call(this,e),n=this.plugins.resizing._module_getSizeY.call(this,e);e._element.setAttribute("width",t.replace("px","")),e._element.setAttribute("height",n.replace("px","")),e._element.setAttribute("data-size",t+","+n),e._videoRatio&&(e._videoRatio=n)},call_controller_resize:function(e,t){const n=this.context.resizing,i=this.context[t];n._resize_plugin=t;const l=n.resizeContainer,s=n.resizeDiv,o=this.util.getOffset(e,this.context.element.wysiwygFrame),a=n._rotateVertical=/^(90|270)$/.test(Math.abs(e.getAttribute("data-rotate")).toString()),r=a?e.offsetHeight:e.offsetWidth,c=a?e.offsetWidth:e.offsetHeight,u=o.top,d=o.left-this.context.element.wysiwygFrame.scrollLeft;l.style.top=u+"px",l.style.left=d+"px",l.style.width=r+"px",l.style.height=c+"px",s.style.top="0px",s.style.left="0px",s.style.width=r+"px",s.style.height=c+"px";let h=e.getAttribute("data-align")||"basic";h="none"===h?"basic":h;const p=this.util.getParentElement(e,this.util.isComponent),g=this.util.getParentElement(e,"FIGURE"),m=this.plugins.resizing._module_getSizeX.call(this,i,e,g,p)||"auto",f=i._onlyPercentage&&"image"===t?"":", "+(this.plugins.resizing._module_getSizeY.call(this,i,e,g,p)||"auto");this.util.changeTxt(n.resizeDisplay,this.lang.dialogBox[h]+" ("+m+f+")"),n.resizeButtonGroup.style.display=i._resizing?"":"none";const _=!i._resizing||i._resizeDotHide||i._onlyPercentage?"none":"flex",b=n.resizeHandles;for(let e=0,t=b.length;e<t;e++)b[e].style.display=_;if(i._resizing){const e=n.rotationButtons;e[0].style.display=e[1].style.display=i._rotation?"":"none"}if(i._alignHide)n.alignButton.style.display="none";else{n.alignButton.style.display="";const e=n.alignMenuList;this.util.changeElement(n.alignButton.firstElementChild,n.alignIcons[h]);for(let t=0,n=e.length;t<n;t++)e[t].getAttribute("data-value")===h?this.util.addClass(e[t],"on"):this.util.removeClass(e[t],"on")}const v=n.percentageButtons,y=/%$/.test(e.style.width)&&/%$/.test(p.style.width)?this.util.getNumber(p.style.width,0)/100+"":"";for(let e=0,t=v.length;e<t;e++)v[e].getAttribute("data-value")===y?this.util.addClass(v[e],"active"):this.util.removeClass(v[e],"active");i._captionShow?(n.captionButton.style.display="",this.util.getChildElement(e.parentNode,"figcaption")?(this.util.addClass(n.captionButton,"active"),i._captionChecked=!0):(this.util.removeClass(n.captionButton,"active"),i._captionChecked=!1)):n.captionButton.style.display="none",l.style.display="block";const C={left:0,top:50};this.options.iframe&&(C.left-=this.context.element.wysiwygFrame.parentElement.offsetLeft,C.top-=this.context.element.wysiwygFrame.parentElement.offsetTop),this.setControllerPosition(n.resizeButton,l,"bottom",C),this.controllersOn(l,n.resizeButton,function(){this.util.setDisabledButtons.call(this.util,!1,this.resizingDisabledButtons),this.history._resetCachingButton()}.bind(this),e,t),this.util.setDisabledButtons(!0,this.resizingDisabledButtons),n._resize_w=r,n._resize_h=c;const w=(e.getAttribute("origin-size")||"").split(",");return n._origin_w=w[0]||e.naturalWidth,n._origin_h=w[1]||e.naturalHeight,{w:r,h:c,t:u,l:d}},_closeAlignMenu:null,openAlignMenu:function(){const e=this.context.resizing.alignButton;this.util.addClass(e,"on"),this.context.resizing.alignMenu.style.top=e.offsetTop+e.offsetHeight+"px",this.context.resizing.alignMenu.style.left=e.offsetLeft-e.offsetWidth/2+"px",this.context.resizing.alignMenu.style.display="block",this.plugins.resizing._closeAlignMenu=function(){this.util.removeClass(this.context.resizing.alignButton,"on"),this.context.resizing.alignMenu.style.display="none",this.removeDocEvent("click",this.plugins.resizing._closeAlignMenu),this.plugins.resizing._closeAlignMenu=null}.bind(this),this.addDocEvent("click",this.plugins.resizing._closeAlignMenu)},onClick_resizeButton:function(e){e.stopPropagation();const t=e.target,n=t.getAttribute("data-command")||t.parentNode.getAttribute("data-command");if(!n)return;const i=t.getAttribute("data-value")||t.parentNode.getAttribute("data-value"),l=this.context.resizing._resize_plugin,s=this.context[l],o=s._element,a=this.plugins[l];if(e.preventDefault(),"function"!=typeof this.plugins.resizing._closeAlignMenu||(this.plugins.resizing._closeAlignMenu(),"onalign"!==n)){switch(n){case"auto":this.plugins.resizing.resetTransform.call(this,o),a.setAutoSize.call(this),this.selectComponent(o,l);break;case"percent":let e=this.plugins.resizing._module_getSizeY.call(this,s);if(this.context.resizing._rotateVertical){const t=o.getAttribute("data-percentage");t&&(e=t.split(",")[1])}this.plugins.resizing.resetTransform.call(this,o),a.setPercentSize.call(this,100*i,null!==this.util.getNumber(e,0)&&/%$/.test(e)?e:""),this.selectComponent(o,l);break;case"mirror":const t=o.getAttribute("data-rotate")||"0";let n=o.getAttribute("data-rotateX")||"",r=o.getAttribute("data-rotateY")||"";"h"===i&&!this.context.resizing._rotateVertical||"v"===i&&this.context.resizing._rotateVertical?r=r?"":"180":n=n?"":"180",o.setAttribute("data-rotateX",n),o.setAttribute("data-rotateY",r),this.plugins.resizing._setTransForm(o,t,n,r);break;case"rotate":const c=this.context.resizing,u=1*o.getAttribute("data-rotate")+1*i,d=this._w.Math.abs(u)>=360?0:u;o.setAttribute("data-rotate",d),c._rotateVertical=/^(90|270)$/.test(this._w.Math.abs(d).toString()),this.plugins.resizing.setTransformSize.call(this,o,null,null),this.selectComponent(o,l);break;case"onalign":return void this.plugins.resizing.openAlignMenu.call(this);case"align":const h="basic"===i?"none":i;a.setAlign.call(this,h,null,null,null),this.selectComponent(o,l);break;case"caption":const p=!s._captionChecked;if(a.openModify.call(this,!0),s._captionChecked=s.captionCheckEl.checked=p,a.update_image.call(this,!1,!1,!1),p){const e=this.util.getChildElement(s._caption,(function(e){return 3===e.nodeType}));e?this.setRange(e,0,e,e.textContent.length):s._caption.focus(),this.controllersOff()}else this.selectComponent(o,l),a.openModify.call(this,!0);break;case"revert":a.setOriginSize.call(this),this.selectComponent(o,l);break;case"update":a.openModify.call(this),this.controllersOff();break;case"delete":a.destroy.call(this)}this.history.push(!1)}},resetTransform:function(e){const t=(e.getAttribute("data-size")||e.getAttribute("data-origin")||"").split(",");this.context.resizing._rotateVertical=!1,e.style.maxWidth="",e.style.transform="",e.style.transformOrigin="",e.setAttribute("data-rotate",""),e.setAttribute("data-rotateX",""),e.setAttribute("data-rotateY",""),this.plugins[this.context.resizing._resize_plugin].setSize.call(this,t[0]?t[0]:"auto",t[1]?t[1]:"",!0)},setTransformSize:function(e,t,n){let i=e.getAttribute("data-percentage");const l=this.context.resizing._rotateVertical,s=1*e.getAttribute("data-rotate");let o="";if(i&&!l)i=i.split(","),"auto"===i[0]&&"auto"===i[1]?this.plugins[this.context.resizing._resize_plugin].setAutoSize.call(this):this.plugins[this.context.resizing._resize_plugin].setPercentSize.call(this,i[0],i[1]);else{const i=this.util.getParentElement(e,"FIGURE"),a=t||e.offsetWidth,r=n||e.offsetHeight,c=(l?r:a)+"px",u=(l?a:r)+"px";if(this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this),this.plugins[this.context.resizing._resize_plugin].setSize.call(this,a+"px",r+"px",!0),i.style.width=c,i.style.height=this.context[this.context.resizing._resize_plugin]._caption?"":u,l){let e=a/2+"px "+a/2+"px 0",t=r/2+"px "+r/2+"px 0";o=90===s||-270===s?t:e}}e.style.transformOrigin=o,this.plugins.resizing._setTransForm(e,s.toString(),e.getAttribute("data-rotateX")||"",e.getAttribute("data-rotateY")||""),e.style.maxWidth=l?"none":"",this.plugins.resizing.setCaptionPosition.call(this,e)},_setTransForm:function(e,t,n,i){let l=(e.offsetWidth-e.offsetHeight)*(/-/.test(t)?1:-1),s="";if(/[1-9]/.test(t)&&(n||i))switch(s=n?"Y":"X",t){case"90":s=n&&i?"X":i?s:"";break;case"270":l*=-1,s=n&&i?"Y":n?s:"";break;case"-90":s=n&&i?"Y":n?s:"";break;case"-270":l*=-1,s=n&&i?"X":i?s:"";break;default:s=""}t%180==0&&(e.style.maxWidth=""),e.style.transform="rotate("+t+"deg)"+(n?" rotateX("+n+"deg)":"")+(i?" rotateY("+i+"deg)":"")+(s?" translate"+s+"("+l+"px)":"")},setCaptionPosition:function(e){const t=this.util.getChildElement(this.util.getParentElement(e,"FIGURE"),"FIGCAPTION");t&&(t.style.marginTop=(this.context.resizing._rotateVertical?e.offsetWidth-e.offsetHeight:0)+"px")},onMouseDown_resize_handle:function(e){e.stopPropagation(),e.preventDefault();const t=this.context.resizing,n=t._resize_direction=e.target.classList[0];t._resizeClientX=e.clientX,t._resizeClientY=e.clientY,this.context.element.resizeBackground.style.display="block",t.resizeButton.style.display="none",t.resizeDiv.style.float=/l/.test(n)?"right":/r/.test(n)?"left":"none";const i=function(e){if("keydown"===e.type&&27!==e.keyCode)return;const s=t._isChange;t._isChange=!1,this.removeDocEvent("mousemove",l),this.removeDocEvent("mouseup",i),this.removeDocEvent("keydown",i),"keydown"===e.type?(this.controllersOff(),this.context.element.resizeBackground.style.display="none",this.plugins[this.context.resizing._resize_plugin].init.call(this)):(this.plugins.resizing.cancel_controller_resize.call(this,n),s&&this.history.push(!1))}.bind(this),l=this.plugins.resizing.resizing_element.bind(this,t,n,this.context[t._resize_plugin]);this.addDocEvent("mousemove",l),this.addDocEvent("mouseup",i),this.addDocEvent("keydown",i)},resizing_element:function(e,t,n,i){const l=i.clientX,s=i.clientY;let o=n._element_w,a=n._element_h;const r=n._element_w+(/r/.test(t)?l-e._resizeClientX:e._resizeClientX-l),c=n._element_h+(/b/.test(t)?s-e._resizeClientY:e._resizeClientY-s),u=n._element_h/n._element_w*r;/t/.test(t)&&(e.resizeDiv.style.top=n._element_h-(/h/.test(t)?c:u)+"px"),/l/.test(t)&&(e.resizeDiv.style.left=n._element_w-r+"px"),/r|l/.test(t)&&(e.resizeDiv.style.width=r+"px",o=r),/^(t|b)[^h]$/.test(t)?(e.resizeDiv.style.height=u+"px",a=u):/^(t|b)h$/.test(t)&&(e.resizeDiv.style.height=c+"px",a=c),e._resize_w=o,e._resize_h=a,this.util.changeTxt(e.resizeDisplay,this._w.Math.round(o)+" x "+this._w.Math.round(a)),e._isChange=!0},cancel_controller_resize:function(e){const t=this.context.resizing._rotateVertical;this.controllersOff(),this.context.element.resizeBackground.style.display="none";let n=this._w.Math.round(t?this.context.resizing._resize_h:this.context.resizing._resize_w),i=this._w.Math.round(t?this.context.resizing._resize_w:this.context.resizing._resize_h);if(!t&&!/%$/.test(n)){const e=16,t=this.context.element.wysiwygFrame.clientWidth-2*e-2;this.util.getNumber(n,0)>t&&(i=this._w.Math.round(i/n*t),n=t)}const l=this.context.resizing._resize_plugin;this.plugins[l].setSize.call(this,n,i,!1,e),t&&this.plugins.resizing.setTransformSize.call(this,this.context[this.context.resizing._resize_plugin]._element,n,i),this.selectComponent(this.context[l]._element,l)}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"resizing",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)},"gjS+":function(e,t,n){"use strict";var i,l;i="undefined"!=typeof window?window:this,l=function(e,t){const n={name:"fileManager",_xmlHttp:null,_checkMediaComponent:function(e){return!/IMG/i.test(e)||!/FIGURE/i.test(e.parentElement.nodeName)||!/FIGURE/i.test(e.parentElement.parentElement.nodeName)},upload:function(e,t,n,i,l){this.showLoading();const s=this.plugins.fileManager,o=s._xmlHttp=this.util.getXMLHttpRequest();if(o.onreadystatechange=s._callBackUpload.bind(this,o,i,l),o.open("post",e,!0),null!==t&&"object"==typeof t&&this._w.Object.keys(t).length>0)for(let e in t)o.setRequestHeader(e,t[e]);o.send(n)},_callBackUpload:function(e,t,n){if(4===e.readyState)if(200===e.status)try{t(e)}catch(e){throw Error('[SUNEDITOR.fileManager.upload.callBack.fail] cause : "'+e.message+'"')}finally{this.closeLoading()}else{this.closeLoading();const t=e.responseText?JSON.parse(e.responseText):e;if("function"!=typeof n||n("",t,this)){const n="[SUNEDITOR.fileManager.upload.serverException] status: "+e.status+", response: "+(t.errorMessage||e.responseText);throw this.functions.noticeOpen(n),Error(n)}}},checkInfo:function(e,t,n,i,l){let s=[];for(let e=0,n=t.length;e<n;e++)s=s.concat([].slice.call(this.context.element.wysiwyg.querySelectorAll(t[e]+':not([data-se-embed="true"])')));const o=this.plugins.fileManager,a=this.context[e],r=a._infoList,c=o.setInfo.bind(this);if(s.length===r.length){if(this._componentsInfoReset){for(let t=0,i=s.length;t<i;t++)c(e,s[t],n,null,l);return}{let e=!1;for(let t,n=0,i=r.length;n<i;n++)if(t=r[n],0===s.filter((function(e){return t.src===e.src&&t.index.toString()===e.getAttribute("data-index")})).length){e=!0;break}if(!e)return}}const u=l?this.context.resizing._resize_plugin:"";l&&(this.context.resizing._resize_plugin=e);const d=[],h=[];for(let e=0,t=r.length;e<t;e++)h[e]=r[e].index;for(a.__updateTags=s;s.length>0;){const t=s.shift();this.util.getParentElement(t,this.util.isMediaComponent)&&o._checkMediaComponent(t)?!t.getAttribute("data-index")||h.indexOf(1*t.getAttribute("data-index"))<0?(d.push(a._infoIndex),t.removeAttribute("data-index"),c(e,t,n,null,l)):d.push(1*t.getAttribute("data-index")):(d.push(a._infoIndex),i(t))}for(let e,t=0;t<r.length;t++)e=r[t].index,d.indexOf(e)>-1||(r.splice(t,1),"function"==typeof n&&n(null,e,"delete",null,0,this),t--);l&&(this.context.resizing._resize_plugin=u)},setInfo:function(e,t,n,i,l){const s=l?this.context.resizing._resize_plugin:"";l&&(this.context.resizing._resize_plugin=e);const o=this.plugins[e],a=this.context[e],r=a._infoList;let c=t.getAttribute("data-index"),u=null,d="";if(i||(i={name:t.getAttribute("data-file-name")||("string"==typeof t.src?t.src.split("/").pop():""),size:t.getAttribute("data-file-size")||0}),!c||this._componentsInfoInit)d="create",c=a._infoIndex++,t.setAttribute("data-index",c),t.setAttribute("data-file-name",i.name),t.setAttribute("data-file-size",i.size),u={src:t.src,index:1*c,name:i.name,size:i.size},r.push(u);else{d="update",c*=1;for(let e=0,t=r.length;e<t;e++)if(c===r[e].index){u=r[e];break}u||(c=a._infoIndex++,u={index:c},r.push(u)),u.src=t.src,u.name=t.getAttribute("data-file-name"),u.size=1*t.getAttribute("data-file-size")}if(u.element=t,u.delete=o.destroy.bind(this,t),u.select=function(e){e.scrollIntoView(!0),this._w.setTimeout(o.select.bind(this,e))}.bind(this,t),l){if(!t.getAttribute("origin-size")&&t.naturalWidth&&t.setAttribute("origin-size",t.naturalWidth+","+t.naturalHeight),!t.getAttribute("data-origin")){const e=this.util.getParentElement(t,this.util.isMediaComponent),n=this.util.getParentElement(t,"FIGURE"),i=this.plugins.resizing._module_getSizeX.call(this,a,t,n,e),l=this.plugins.resizing._module_getSizeY.call(this,a,t,n,e);t.setAttribute("data-origin",i+","+l),t.setAttribute("data-size",i+","+l)}if(!t.style.width){const e=(t.getAttribute("data-size")||t.getAttribute("data-origin")||"").split(",");o.onModifyMode.call(this,t,null),o.applySize.call(this,e[0],e[1])}this.context.resizing._resize_plugin=s}"function"==typeof n&&n(t,c,d,u,--a._uploadFileLength<0?0:a._uploadFileLength,this)},deleteInfo:function(e,t,n){if(t>=0){const i=this.context[e]._infoList;for(let e=0,l=i.length;e<l;e++)if(t===i[e].index)return i.splice(e,1),void("function"==typeof n&&n(null,t,"delete",null,0,this))}},resetInfo:function(e,t){const n=this.context[e];if("function"==typeof t){const e=n._infoList;for(let n=0,i=e.length;n<i;n++)t(null,e[n].index,"delete",null,0,this)}n._infoList=[],n._infoIndex=0}};return void 0===t&&(e.SUNEDITOR_MODULES||Object.defineProperty(e,"SUNEDITOR_MODULES",{enumerable:!0,writable:!1,configurable:!1,value:{}}),Object.defineProperty(e.SUNEDITOR_MODULES,"fileManager",{enumerable:!0,writable:!1,configurable:!1,value:n})),n},"object"==typeof e.exports?e.exports=i.document?l(i,!0):function(e){if(!e.document)throw new Error("SUNEDITOR_MODULES a window with a document");return l(e)}:l(i)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9maWxlQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL29wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zaG93ZG93bi5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2FuY2hvcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2F1dG9MaW5rcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvYmxvY2tHYW11dC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvYmxvY2tRdW90ZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2NvZGVCbG9ja3MuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2NvZGVTcGFucy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvY29tcGxldGVIVE1MRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2RldGFiLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9lbGxpcHNpcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvZW1vamkuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2VuY29kZUFtcHNBbmRBbmdsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2VuY29kZUJhY2tzbGFzaEVzY2FwZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2VuY29kZUNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2dpdGh1YkNvZGVCbG9ja3MuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2hhc2hCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvaGFzaENvZGVUYWdzLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9oYXNoRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvaGFzaEhUTUxCbG9ja3MuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2hhc2hIVE1MU3BhbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2hhc2hQcmVDb2RlVGFncy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvaGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvaG9yaXpvbnRhbFJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2ltYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvaXRhbGljc0FuZEJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL2xpc3RzLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvb3V0ZGVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvcGFyYWdyYXBocy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvcnVuRXh0ZW5zaW9uLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9zcGFuR2FtdXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL3N0cmlrZXRocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL3N0cmlwTGlua0RlZmluaXRpb25zLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy90YWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL3VuZGVybGluZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvdW5lc2NhcGVTcGVjaWFsQ2hhcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9ibG9ja3F1b3RlLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vY29kZUJsb2NrLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vY29kZVNwYW4uanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9lbXBoYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL2hlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL2hyLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9saW5rcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9saXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1YlBhcnNlcnMvbWFrZU1hcmtkb3duL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9wYXJhZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9wcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi9zdHJpa2V0aHJvdWdoLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vc3Ryb25nLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3ViUGFyc2Vycy9tYWtlTWFya2Rvd24vdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi90YWJsZUNlbGwuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdWJQYXJzZXJzL21ha2VNYXJrZG93bi90eHQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhbmcvZW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9fY29sb3JQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS9mb250Q29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS9oaWxpdGVDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L3RlbXBsYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL21vZHVsZXMvX3NlbGVjdE1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9fYW5jaG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2RpYWxvZy9saW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2RpYWxvZy9pbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9kaWFsb2cvdmlkZW8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvZGlhbG9nL2F1ZGlvLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2RpYWxvZy9tYXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL2NvbW1hbmQvYmxvY2txdW90ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L2FsaWduLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvZm9udC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L2ZvbnRTaXplLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvaG9yaXpvbnRhbFJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS9saXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL3N1Ym1lbnUvdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS9mb3JtYXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L2xpbmVIZWlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvc3VibWVudS9wYXJhZ3JhcGhTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9zdWJtZW51L3RleHRTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9maWxlQnJvd3Nlci9pbWFnZUdhbGxlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9kZWZhdWx0SWNvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9saWIvY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL21vZHVsZXMvX25vdGljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3VuZWRpdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9saWIvY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N1bmVkaXRvcl9idWlsZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9tb2R1bGVzL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5jaG9ybWUvZGlzdC9icm93c2VyL2FuY2hvcm1lLmpzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW5zL21vZHVsZXMvcmVzaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbW9kdWxlcy9maWxlTWFuYWdlci5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImZhY3RvcnkiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJkaWFsb2ciLCJhZGQiLCJjb3JlIiwiY29udGV4dCIsImtpbmQiLCJ1cGRhdGVNb2RhbCIsIl9jbG9zZVNpZ25hbCIsImRpYWxvZ19kaXYiLCJ1dGlsIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImRpYWxvZ19iYWNrIiwic3R5bGUiLCJkaXNwbGF5IiwiZGlhbG9nX2FyZWEiLCJhcHBlbmRDaGlsZCIsIm1vZGFsQXJlYSIsImJhY2siLCJtb2RhbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfb25Nb3VzZURvd25fZGlhbG9nIiwiX29uQ2xpY2tfZGlhbG9nIiwiZWxlbWVudCIsInJlbGF0aXZlIiwiZSIsInRlc3QiLCJ0YXJnZXQiLCJnZXRBdHRyaWJ1dGUiLCJwbHVnaW5zIiwiY2xvc2UiLCJvcGVuIiwidXBkYXRlIiwibW9kYWxGb3JtIiwiX2JpbmRDbG9zZSIsIl9kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImtleUNvZGUiLCJvcHRpb25zIiwicG9wdXBEaXNwbGF5IiwicG9zaXRpb24iLCJmb2N1c0VsZW1lbnQiLCJvbiIsImZvY3VzIiwiaW5pdCIsIlNVTkVESVRPUl9NT0RVTEVTIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJkb2N1bWVudCIsInciLCJFcnJvciIsImZpbGVCcm93c2VyIiwiX3htbEh0dHAiLCJfbG9hZGluZyIsImFyZWEiLCJoZWFkZXIiLCJ0YWdBcmVhIiwiYm9keSIsImxpc3QiLCJ0YWdFbGVtZW50cyIsIml0ZW1zIiwic2VsZWN0ZWRUYWdzIiwic2VsZWN0b3JIYW5kbGVyIiwiY29udGV4dFBsdWdpbiIsImNvbHVtblNpemUiLCJicm93c2VyX2RpdiIsImNvbnRlbnQiLCJpbm5lckhUTUwiLCJzZXRfYnJvd3NlciIsInF1ZXJ5U2VsZWN0b3IiLCJ0aXRsZUFyZWEiLCJvbkNsaWNrVGFnIiwib25DbGlja0ZpbGUiLCJfb25Nb3VzZURvd25fYnJvd3NlciIsIl9vbkNsaWNrX2Jyb3dzZXIiLCJsYW5nIiwiZGlhbG9nQm94IiwiaWNvbnMiLCJjYW5jZWwiLCJzdG9wUHJvcGFnYXRpb24iLCJwbHVnaW5OYW1lIiwiZmlsZUJyb3dzZXJDb250ZXh0IiwicGx1Z2luQ29udGV4dCIsImxpc3RDbGFzc05hbWUiLCJsaXN0Q2xhc3MiLCJoYXNDbGFzcyIsInRleHRDb250ZW50IiwidGl0bGUiLCJfZHJhd0ZpbGVMaXN0IiwidXJsIiwiZmlsZUJyb3dzZXJQbHVnaW4iLCJhYm9ydCIsInNob3dCcm93c2VyTG9hZGluZyIsImNsb3NlQnJvd3NlckxvYWRpbmciLCJicm93c2VySGVhZGVyIiwieG1sSHR0cCIsImdldFhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiX2NhbGxCYWNrR2V0IiwiX3ciLCJrZXlzIiwibGVuZ3RoIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwicmVzdWx0IiwiX2RyYXdMaXN0SXRlbSIsIm51bGxNZXNzYWdlIiwibWVzc2FnZSIsIm1heEhlaWdodCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiZXJyIiwiZXJyb3JNZXNzYWdlIiwiX3RhZ3MiLCJsZW4iLCJzcGxpdFNpemUiLCJNYXRoIiwicm91bmQiLCJkcmF3SXRlbUhhbmRsZXIiLCJpdGVtVGVtcGxhdGVIYW5kbGVyIiwidGFnc0hUTUwiLCJsaXN0SFRNTCIsImNvbHVtbnMiLCJpdGVtIiwidGFncyIsInRhZyIsInNwbGl0IiwibWFwIiwidiIsInRyaW0iLCJ0TGVuIiwiaW5kZXhPZiIsInB1c2giLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXNBbmNob3IiLCJ0YWdOYW1lIiwic2VsZWN0VGFnIiwic1RhZ0luZGV4Iiwic3BsaWNlIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImZpbHRlciIsInNvbWUiLCJwcmV2ZW50RGVmYXVsdCIsImxpc3RFbCIsImNvbW1hbmQiLCJwYXJlbnROb2RlIiwiZ2V0RGVmYXVsdE9wdHMiLCJzaW1wbGUiLCJkZWZhdWx0T3B0aW9ucyIsIm9taXRFeHRyYVdMSW5Db2RlQmxvY2tzIiwiZGVmYXVsdFZhbHVlIiwiZGVzY3JpYmUiLCJ0eXBlIiwibm9IZWFkZXJJZCIsInByZWZpeEhlYWRlcklkIiwicmF3UHJlZml4SGVhZGVySWQiLCJnaENvbXBhdGlibGVIZWFkZXJJZCIsInJhd0hlYWRlcklkIiwiaGVhZGVyTGV2ZWxTdGFydCIsInBhcnNlSW1nRGltZW5zaW9ucyIsInNpbXBsaWZpZWRBdXRvTGluayIsImV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHMiLCJsaXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzIiwibGl0ZXJhbE1pZFdvcmRBc3Rlcmlza3MiLCJzdHJpa2V0aHJvdWdoIiwidGFibGVzIiwidGFibGVzSGVhZGVySWQiLCJnaENvZGVCbG9ja3MiLCJ0YXNrbGlzdHMiLCJzbW9vdGhMaXZlUHJldmlldyIsInNtYXJ0SW5kZW50YXRpb25GaXgiLCJkaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHMiLCJzaW1wbGVMaW5lQnJlYWtzIiwicmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQiLCJnaE1lbnRpb25zIiwiZ2hNZW50aW9uc0xpbmsiLCJlbmNvZGVFbWFpbHMiLCJvcGVuTGlua3NJbk5ld1dpbmRvdyIsImJhY2tzbGFzaEVzY2FwZXNIVE1MVGFncyIsImVtb2ppIiwidW5kZXJsaW5lIiwiZWxsaXBzaXMiLCJjb21wbGV0ZUhUTUxEb2N1bWVudCIsIm1ldGFkYXRhIiwic3BsaXRBZGphY2VudEJsb2NrcXVvdGVzIiwic3RyaW5naWZ5IiwicmV0Iiwib3B0Iiwic2hvd2Rvd24iLCJwYXJzZXJzIiwiZXh0ZW5zaW9ucyIsImdsb2JhbE9wdGlvbnMiLCJzZXRGbGF2b3IiLCJmbGF2b3IiLCJnaXRodWIiLCJvcmlnaW5hbCIsImdob3N0IiwidmFuaWxsYSIsImFsbE9uIiwiYWxsT3B0aW9uc09uIiwidmFsaWRhdGUiLCJleHRlbnNpb24iLCJlcnJNc2ciLCJ2YWxpZCIsImVycm9yIiwiaGVscGVyIiwiaXNBcnJheSIsImJhc2VNc2ciLCJleHQiLCJpc1N0cmluZyIsInRvTG93ZXJDYXNlIiwiaXNVbmRlZmluZWQiLCJsaXN0ZW5lcnMiLCJyZWdleCIsImxuIiwiUmVnRXhwIiwicmVwbGFjZSIsImVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayIsIndob2xlTWF0Y2giLCJtMSIsImNoYXJDb2RlQXQiLCJzZXRPcHRpb24iLCJnZXRPcHRpb24iLCJnZXRPcHRpb25zIiwicmVzZXRPcHRpb25zIiwicHJlc2V0Iiwib3B0aW9uIiwiZ2V0Rmxhdm9yIiwiZ2V0Rmxhdm9yT3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic3ViUGFyc2VyIiwiZnVuYyIsInN0ZEV4dE5hbWUiLCJ2YWxpZEV4dGVuc2lvbiIsImdldEFsbEV4dGVuc2lvbnMiLCJyZW1vdmVFeHRlbnNpb24iLCJyZXNldEV4dGVuc2lvbnMiLCJ2YWxpZGF0ZUV4dGVuc2lvbiIsImNvbnNvbGUiLCJ3YXJuIiwiYSIsIlN0cmluZyIsImlzRnVuY3Rpb24iLCJ0b1N0cmluZyIsIkFycmF5IiwiZm9yRWFjaCIsIm9iaiIsImNhbGxiYWNrIiwicHJvcCIsImVzY2FwZUNoYXJhY3RlcnMiLCJ0ZXh0IiwiY2hhcnNUb0VzY2FwZSIsImFmdGVyQmFja3NsYXNoIiwicmVnZXhTdHJpbmciLCJ1bmVzY2FwZUhUTUxFbnRpdGllcyIsInR4dCIsInJneEZpbmRNYXRjaFBvcyIsInN0ciIsImxlZnQiLCJyaWdodCIsImZsYWdzIiwic3RhcnQiLCJlbmQiLCJmIiwiZyIsIngiLCJwb3MiLCJleGVjIiwibGFzdEluZGV4IiwiaW5kZXgiLCJtYXRjaCIsIm1hdGNoUmVjdXJzaXZlUmVnRXhwIiwibWF0Y2hQb3MiLCJyZXN1bHRzIiwic2xpY2UiLCJyZXBsYWNlUmVjdXJzaXZlUmVnRXhwIiwicmVwbGFjZW1lbnQiLCJyZXBTdHIiLCJmaW5hbFN0ciIsImxuZyIsImJpdHMiLCJqb2luIiwicmVnZXhJbmRleE9mIiwiZnJvbUluZGV4Iiwic3Vic3RyaW5nIiwic2VhcmNoIiwic3BsaXRBdEluZGV4IiwiZW5jb2RlRW1haWxBZGRyZXNzIiwibWFpbCIsImVuY29kZSIsImNoIiwiZmxvb3IiLCJyYW5kb20iLCJwYWRFbmQiLCJ0YXJnZXRMZW5ndGgiLCJwYWRTdHJpbmciLCJyZXBlYXQiLCJtc2ciLCJhbGVydCIsImxvZyIsInJlZ2V4ZXMiLCJhc3Rlcmlza0Rhc2hBbmRDb2xvbiIsImVtb2ppcyIsIkNvbnZlcnRlciIsImNvbnZlcnRlck9wdGlvbnMiLCJsYW5nRXh0ZW5zaW9ucyIsIm91dHB1dE1vZGlmaWVycyIsInNldENvbnZGbGF2b3IiLCJwYXJzZWQiLCJyYXciLCJmb3JtYXQiLCJfcGFyc2VFeHRlbnNpb24iLCJsZWdhY3lFeHRlbnNpb25Mb2FkaW5nIiwidmFsaWRFeHQiLCJsaXN0ZW4iLCJnT3B0IiwiX2NvbnN0cnVjdG9yIiwiX2Rpc3BhdGNoIiwiZXZ0TmFtZSIsImdsb2JhbHMiLCJlaSIsIm5UZXh0IiwibWFrZUh0bWwiLCJnSHRtbEJsb2NrcyIsImdIdG1sTWRCbG9ja3MiLCJnSHRtbFNwYW5zIiwiZ1VybHMiLCJnVGl0bGVzIiwiZ0RpbWVuc2lvbnMiLCJnTGlzdExldmVsIiwiaGFzaExpbmtDb3VudHMiLCJjb252ZXJ0ZXIiLCJyc3AiLCJyZ3giLCJyVHJpbUlucHV0VGV4dCIsIm1ha2VNYXJrZG93biIsIm1ha2VNZCIsInNyYyIsIkhUTUxQYXJzZXIiLCJkb2MiLCJwcmVMaXN0IiwicHJlcyIsInByZXNQSCIsImNoaWxkRWxlbWVudENvdW50IiwiZmlyc3RDaGlsZCIsImxhbmd1YWdlIiwiY2xhc3NlcyIsIm1hdGNoZXMiLCJvdXRlckhUTUwiLCJzZXRBdHRyaWJ1dGUiLCJzdWJzdGl0dXRlUHJlQ29kZVRhZ3MiLCJjbGVhbiIsIm5vZGUiLCJjaGlsZE5vZGVzIiwiY2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInJlbW92ZUNoaWxkIiwibm9kZXMiLCJtZERvYyIsImFkZEV4dGVuc2lvbiIsInVzZUV4dGVuc2lvbiIsImV4dGVuc2lvbk5hbWUiLCJpaSIsIm91dHB1dCIsImdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGFGb3JtYXQiLCJfc2V0TWV0YWRhdGFQYWlyIiwiX3NldE1ldGFkYXRhRm9ybWF0IiwiX3NldE1ldGFkYXRhUmF3Iiwid3JpdGVBbmNob3JUYWciLCJsaW5rVGV4dCIsImxpbmtJZCIsIm01IiwibTYiLCJ3bSIsInN0IiwiZXNjYXBlIiwibWVudGlvbnMiLCJ1c2VybmFtZSIsImxuayIsInNpbXBsZVVSTFJlZ2V4Iiwic2ltcGxlVVJMUmVnZXgyIiwiZGVsaW1VcmxSZWdleCIsInNpbXBsZU1haWxSZWdleCIsImRlbGltTWFpbFJlZ2V4IiwicmVwbGFjZUxpbmsiLCJsZWFkaW5nTWFnaWNDaGFycyIsImxpbmsiLCJtMiIsIm0zIiwidHJhaWxpbmdQdW5jdHVhdGlvbiIsInRyYWlsaW5nTWFnaWNDaGFycyIsImxua1R4dCIsImFwcGVuZCIsImxtYyIsInRtYyIsInJlcGxhY2VNYWlsIiwiYiIsImhyZWYiLCJicSIsInByZSIsImNvZGVibG9jayIsIm5leHRDaGFyIiwiZG9jdHlwZSIsImRvY3R5cGVQYXJzZWQiLCJjaGFyc2V0IiwibWV0YSIsImxlYWRpbmdUZXh0IiwibnVtU3BhY2VzIiwiZW1vamlDb2RlIiwiZGVsaW0iLCJibG9ja1RleHQiLCJibG9ja1RhZ3MiLCJyZXBGdW5jIiwiaW5zaWRlIiwib3BUYWdQb3MiLCJyZ3gxIiwicGF0TGVmdCIsInBhdFJpZ2h0Iiwic3ViVGV4dHMiLCJuZXdTdWJUZXh0MSIsImNvbmNhdCIsImhhc2hIVE1MU3BhbiIsImh0bWwiLCJyZXBUZXh0IiwibGltaXQiLCJudW0iLCIkMSIsImlzTmFOIiwicGFyc2VJbnQiLCJzZXRleHRSZWdleEgxIiwic2V0ZXh0UmVnZXhIMiIsInNwYW5HYW11dCIsImhJRCIsImhlYWRlcklkIiwiaGFzaEJsb2NrIiwibWF0Y2hGb3VuZCIsImhMZXZlbCIsImF0eFN0eWxlIiwicHJlZml4IiwiY3VzdG9taXplZEhlYWRlcklkIiwiaFRleHQiLCJzcGFuIiwid3JpdGVJbWFnZVRhZyIsImFsdFRleHQiLCJ3aWR0aCIsImhlaWdodCIsImdEaW1zIiwicGFyc2VJbnNpZGUiLCJsZWFkIiwicHJvY2Vzc0xpc3RJdGVtcyIsImxpc3RTdHIiLCJ0cmltVHJhaWxpbmciLCJpc1BhcmFncmFwaGVkIiwibTQiLCJ0YXNrYnRuIiwiY2hlY2tlZCIsImJ1bGxldFN0eWxlIiwib3RwIiwid20yIiwic3R5bGVTdGFydE51bWJlciIsImxpc3RUeXBlIiwicGFyc2VDb25zZWN1dGl2ZUxpc3RzIiwib2xSZ3giLCJ1bFJneCIsImNvdW50ZXJSeGciLCJwYXJzZUNMIiwicGFyc2VNZXRhZGF0YUNvbnRlbnRzIiwid2hvbGVtYXRjaCIsImdyYWZzIiwiZ3JhZnNPdXQiLCJncmFmc091dEl0IiwiY29kZUZsYWciLCIkMiIsInJlIiwicmVwbGFjZUZ1bmMiLCJibGFua0xpbmVzIiwicGFyc2VDZWxscyIsImNlbGwiLCJwYXJzZVRhYmxlIiwicmF3VGFibGUiLCJ0YWJsZUxpbmVzIiwic0xpbmUiLCJpZCIsInJhd0hlYWRlcnMiLCJyYXdTdHlsZXMiLCJyYXdDZWxscyIsImhlYWRlcnMiLCJzdHlsZXMiLCJjZWxscyIsInNoaWZ0IiwidGFibGVIZWFkZXJJZCIsInJvdyIsInRiIiwidGJsTGduIiwiYnVpbGRUYWJsZSIsImNoYXJDb2RlVG9SZXBsYWNlIiwiZnJvbUNoYXJDb2RlIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuIiwiY2hpbGRyZW5MZW5ndGgiLCJpbm5lclR4dCIsImhlYWRlckxldmVsIiwiaGVhZGVyTWFyayIsImhhc0F0dHJpYnV0ZSIsImxpc3RJdGVtcyIsImxpc3RJdGVtc0xlbmdodCIsImxpc3ROdW0iLCJsaXN0SXRlbVR4dCIsImNoaWxkcmVuTGVuZ2h0Iiwic3BhbnNPbmx5IiwiZGF0YSIsInRhYmxlQXJyYXkiLCJoZWFkaW5ncyIsInJvd3MiLCJoZWFkQ29udGVudCIsImFsbGlnbiIsImNvbHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNlbGxDb250ZW50IiwiY2VsbFNwYWNlc0NvdW50Iiwic3RyTGVuIiwiZGVmaW5lIiwiY29kZSIsInRvb2xiYXIiLCJkZWZhdWx0Iiwic2F2ZSIsImZvbnQiLCJmb3JtYXRzIiwiZm9udFNpemUiLCJib2xkIiwiaXRhbGljIiwic3RyaWtlIiwic3Vic2NyaXB0Iiwic3VwZXJzY3JpcHQiLCJyZW1vdmVGb3JtYXQiLCJmb250Q29sb3IiLCJoaWxpdGVDb2xvciIsImluZGVudCIsIm91dGRlbnQiLCJhbGlnbiIsImFsaWduTGVmdCIsImFsaWduUmlnaHQiLCJhbGlnbkNlbnRlciIsImFsaWduSnVzdGlmeSIsIm9yZGVyTGlzdCIsInVub3JkZXJMaXN0IiwiaG9yaXpvbnRhbFJ1bGUiLCJocl9zb2xpZCIsImhyX2RvdHRlZCIsImhyX2Rhc2hlZCIsInRhYmxlIiwibWF0aCIsImltYWdlIiwidmlkZW8iLCJhdWRpbyIsImZ1bGxTY3JlZW4iLCJzaG93QmxvY2tzIiwiY29kZVZpZXciLCJ1bmRvIiwicmVkbyIsInByZXZpZXciLCJwcmludCIsInRhZ19wIiwidGFnX2RpdiIsInRhZ19oIiwidGFnX2Jsb2NrcXVvdGUiLCJ0YWdfcHJlIiwidGVtcGxhdGUiLCJsaW5lSGVpZ2h0IiwicGFyYWdyYXBoU3R5bGUiLCJ0ZXh0U3R5bGUiLCJpbWFnZUdhbGxlcnkiLCJkaXJfbHRyIiwiZGlyX3J0bCIsIm1lbnRpb24iLCJsaW5rQm94IiwibmV3V2luZG93Q2hlY2siLCJkb3dubG9hZExpbmtDaGVjayIsImJvb2ttYXJrIiwibWF0aEJveCIsImlucHV0TGFiZWwiLCJmb250U2l6ZUxhYmVsIiwicHJldmlld0xhYmVsIiwiaW1hZ2VCb3giLCJmaWxlIiwidmlkZW9Cb3giLCJhdWRpb0JveCIsImJyb3dzZXIiLCJjYXB0aW9uIiwic3VibWl0QnV0dG9uIiwicmV2ZXJ0QnV0dG9uIiwicHJvcG9ydGlvbiIsImJhc2ljIiwiY2VudGVyIiwic2l6ZSIsInJhdGlvIiwiY29udHJvbGxlciIsImVkaXQiLCJ1bmxpbmsiLCJyZW1vdmUiLCJpbnNlcnRSb3dBYm92ZSIsImluc2VydFJvd0JlbG93IiwiZGVsZXRlUm93IiwiaW5zZXJ0Q29sdW1uQmVmb3JlIiwiaW5zZXJ0Q29sdW1uQWZ0ZXIiLCJkZWxldGVDb2x1bW4iLCJmaXhlZENvbHVtbldpZHRoIiwicmVzaXplMTAwIiwicmVzaXplNzUiLCJyZXNpemU1MCIsInJlc2l6ZTI1IiwiYXV0b1NpemUiLCJtaXJyb3JIb3Jpem9udGFsIiwibWlycm9yVmVydGljYWwiLCJyb3RhdGVMZWZ0Iiwicm90YXRlUmlnaHQiLCJtYXhTaXplIiwibWluU2l6ZSIsInRhYmxlSGVhZGVyIiwibWVyZ2VDZWxscyIsInNwbGl0Q2VsbHMiLCJIb3Jpem9udGFsU3BsaXQiLCJWZXJ0aWNhbFNwbGl0IiwibWVudSIsInNwYWNlZCIsImJvcmRlcmVkIiwibmVvbiIsInRyYW5zbHVjZW50Iiwic2hhZG93IiwiU1VORURJVE9SX0xBTkciLCJjb2xvclBpY2tlciIsImNvbG9yTGlzdEhUTUwiLCJfY29sb3JJbnB1dCIsIl9kZWZhdWx0Q29sb3IiLCJfc3R5bGVQcm9wZXJ0eSIsIl9jdXJyZW50Q29sb3IiLCJfY29sb3JMaXN0IiwiY3JlYXRlQ29sb3JMaXN0IiwiX21ha2VDb2xvckxpc3QiLCJtYWtlQ29sb3IiLCJjb2xvckxpc3QiLCJjb2xvckFyciIsImNvbG9yIiwiZXJhc2UiLCJmaWxsQ29sb3IiLCJnZXRDb2xvckluTm9kZSIsImlzSGV4Q29sb3IiLCJyZ2IyaGV4Iiwic2V0SW5wdXRUZXh0IiwiY29sb3JOYW1lMmhleCIsInNldEN1cnJlbnRDb2xvciIsImhleENvbG9yU3RyIiwiYm9yZGVyQ29sb3IiLCJmaW5kQ29sb3IiLCJzdHlsZVByb3BlcnR5IiwiaXNXeXNpd3lnRGl2IiwicmdiIiwicmdiTWF0Y2giLCJjb2xvck5hbWUiLCJ0ZW1wIiwiY29sb3JzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJlbW92ZUl0ZW0iLCJzdWJzdHIiLCJ0YXJnZXRFbGVtZW50IiwiYWRkTW9kdWxlIiwicHJldmlld0VsIiwiY29sb3JJbnB1dCIsImxpc3REaXYiLCJzZXRTdWJtZW51Iiwib25DaGFuZ2VJbnB1dCIsInN1Ym1pdCIsInBpY2t1cCIsImluaXRNZW51VGFyZ2V0IiwiY29sb3JBcmVhIiwiY29udGV4dFBpY2tlciIsImNvbnRleHRGb250Q29sb3IiLCJ3d0NvbXB1dGVkU3R5bGUiLCJnZXRTZWxlY3Rpb25Ob2RlIiwiYXBwbHlDb2xvciIsIm5vZGVDaGFuZ2UiLCJzdWJtZW51T2ZmIiwibmV3Tm9kZSIsImNvbnRleHRIaWxpdGVDb2xvciIsImJhY2tncm91bmRDb2xvciIsInNlbGVjdGVkSW5kZXgiLCJ0ZW1wbGF0ZURpdiIsInRlbXBsYXRlTGlzdCIsInRlbXBsYXRlcyIsInNldENvbnRlbnRzIiwic2VsZWN0TWVudSIsImNhbGxlciIsImNhbGxlckNvbnRleHQiLCJzZXRGb3JtIiwiY3JlYXRlTGlzdCIsImxpc3RDb250ZXh0IiwiZm9ybSIsIm1lbnVzIiwiaW5pdEV2ZW50IiwiZm9ybXMiLCJjbGlja01ldGhvZCIsImNhbGxlck5hbWUiLCJvbk1vdXNlZG93bl9saXN0Iiwib25Nb3VzZU1vdmVfbGlzdCIsIm9uQ2xpY2tfbGlzdCIsIm1vdmVJdGVtIiwic2VsZWN0SW5kZXgiLCJnZXRJdGVtIiwicG9zaXRpb25IYW5kbGVyIiwidmlzaWJpbGl0eSIsImFuY2hvciIsInNldERpYWxvZ0Zvcm0iLCJob3N0IiwibG9jYXRpb24iLCJvcmlnaW4iLCJwYXRobmFtZSIsInJlbExpc3QiLCJsaW5rUmVsIiwiZGVmYXVsdFJlbCIsImxpbmtSZWxEZWZhdWx0IiwicHJvdG9jb2wiLCJkb3dubG9hZCIsInJlbCIsImFuY2hvclBsdWdpbiIsInVybElucHV0IiwibGlua0RlZmF1bHRSZWwiLCJjdXJyZW50UmVsIiwibGlua0FuY2hvciIsImxpbmtWYWx1ZSIsIl9jaGFuZ2UiLCJjaGVja19uZXdfd2luZG93IiwiY2hlY2tfYm9va21hcmsiLCJhbmNob3JUZXh0IiwiZG93bmxvYWRDaGVjayIsImJvb2ttYXJrQnV0dG9uIiwicmVsQnV0dG9uIiwicmVsUHJldmlldyIsIm9uQ2xpY2tfcmVsQnV0dG9uIiwib25DbGlja19yZWxMaXN0Iiwib25DaGFuZ2VfbmV3V2luZG93Q2hlY2siLCJvbkNoYW5nZV9kb3dubG9hZENoZWNrIiwib25DaGFuZ2VBbmNob3JUZXh0Iiwib25DaGFuZ2VVcmxJbnB1dCIsIm9uS2V5RG93blVybElucHV0Iiwib25Gb2N1c1VybElucHV0Iiwib25CbHVyVXJsSW5wdXQiLCJvbkNsaWNrX2Jvb2ttYXJrQnV0dG9uIiwiY29udGV4dEFuY2hvciIsInNlbGZQYXRoQm9va21hcmsiLCJsYXN0SW5kZXhPZiIsImdldFNlbGVjdGlvbiIsImxpbmtUYXJnZXROZXdXaW5kb3ciLCJzZXRSZWwiLCJzZXRMaW5rUHJldmlldyIsInNldEhlYWRlckJvb2ttYXJrIiwicGF0aCIsIl9jbG9zZVJlbE1lbnUiLCJ0b2dnbGVSZWxMaXN0Iiwic2hvdyIsInJ0bCIsIm9mZnNldExlZnQiLCJvZmZzZXRXaWR0aCIsInRvcCIsIm9mZnNldFRvcCIsImNvbnRhaW5zIiwiY21kIiwiY3VycmVudCIsInRvZ2dsZUNsYXNzIiwicmVsQXR0ciIsInJlbExpc3RFbCIsInJlbHMiLCJjaGVja2VkUmVsIiwiY3JlYXRlSGVhZGVyTGlzdCIsImNvbnRleHRMaXN0IiwidXJsVmFsdWUiLCJnZXRMaXN0Q2hpbGRyZW4iLCJ3eXNpd3lnIiwibm9kZU5hbWUiLCJ2YWx1ZVJlZ0V4cCIsImgiLCJfc2V0TWVudUxpc3RQb3NpdGlvbiIsImNvbnRleHRMaW5rIiwibGlua1Byb3RvY29sIiwibm9QcmVmaXgiLCJsaW5rTm9QcmVmaXgiLCJyZXNlcnZlZFByb3RvY29sIiwic2FtZVByb3RvY29sIiwiZXNjYXBlU3RyaW5nUmVnZXhwIiwic2V0Q3R4IiwidXBkYXRlQW5jaG9yIiwiZGlzcGxheVRleHQiLCJub3RUZXh0IiwicmVtb3ZlQXR0cmlidXRlIiwiY3JlYXRlQW5jaG9yIiwib0EiLCJfcmVsTWVyZ2UiLCJfcmVsRGVsZXRlIiwiX2xpbmtBbmNob3IiLCJhbmNob3JDdHgiLCJsaW5rX2RpYWxvZyIsInNldERpYWxvZyIsImxpbmtfY29udHJvbGxlciIsInNldENvbnRyb2xsZXJfTGlua0J1dHRvbiIsImxpbmtDb250cm9sbGVyIiwib25DbGlja19saW5rQ29udHJvbGxlciIsImxpbmtfYnRuIiwiZGVsZXRlIiwiY3VycmVudENvbnRyb2xsZXJOYW1lIiwic2hvd0xvYWRpbmciLCJ0ZXh0Tm9kZSIsInNldFJhbmdlIiwic2VsZWN0ZWRGb3JtYXRzIiwiZ2V0U2VsZWN0ZWRFbGVtZW50cyIsIm9Gb3JtYXQiLCJpbnNlcnROb2RlIiwiY2xvc2VMb2FkaW5nIiwiaGlzdG9yeSIsImFjdGl2ZSIsImNvbnRyb2xsZXJBcnJheSIsImNhbGxfY29udHJvbGxlciIsImNvbnRyb2xsZXJzT2ZmIiwic2VsZWN0aW9uQVRhZyIsImVkaXRMaW5rIiwibGlua0J0biIsInNldENvbnRyb2xsZXJQb3NpdGlvbiIsImNvbnRyb2xsZXJzT24iLCJzYyIsImdldENoaWxkRWxlbWVudCIsImVjIiwiY29tcG9uZW50IiwicmVzaXppbmciLCJmaWxlTWFuYWdlciIsImNvbnRleHRJbWFnZSIsIl9pbmZvTGlzdCIsIl9pbmZvSW5kZXgiLCJfdXBsb2FkRmlsZUxlbmd0aCIsInNpemVVbml0IiwiX2ltYWdlU2l6ZVVuaXQiLCJfbGlua0VsZW1lbnQiLCJfYWx0VGV4dCIsIl9hbGlnbiIsIl9mbG9hdENsYXNzUmVnRXhwIiwiX3Zfc3JjIiwiX2xpbmtWYWx1ZSIsInN2Z0RlZmF1bHRTaXplIiwiYmFzZTY0UmVuZGVySW5kZXgiLCJfZWxlbWVudCIsIl9jb3ZlciIsIl9jb250YWluZXIiLCJpbnB1dFgiLCJpbnB1dFkiLCJfZWxlbWVudF93IiwiX2VsZW1lbnRfaCIsIl9lbGVtZW50X2wiLCJfZWxlbWVudF90IiwiX2RlZmF1bHRTaXplWCIsIl9kZWZhdWx0U2l6ZVkiLCJfb3JpZ2luX3ciLCJpbWFnZVdpZHRoIiwiX29yaWdpbl9oIiwiaW1hZ2VIZWlnaHQiLCJfcHJvcG9ydGlvbkNoZWNrZWQiLCJfcmVzaXppbmciLCJpbWFnZVJlc2l6aW5nIiwiX3Jlc2l6ZURvdEhpZGUiLCJpbWFnZUhlaWdodFNob3ciLCJfcm90YXRpb24iLCJpbWFnZVJvdGF0aW9uIiwiX2FsaWduSGlkZSIsImltYWdlQWxpZ25TaG93IiwiX29ubHlQZXJjZW50YWdlIiwiaW1hZ2VTaXplT25seVBlcmNlbnRhZ2UiLCJfcmF0aW8iLCJfcmF0aW9YIiwiX3JhdGlvWSIsIl9jYXB0aW9uU2hvdyIsIl9jYXB0aW9uQ2hlY2tlZCIsIl9jYXB0aW9uIiwiY2FwdGlvbkNoZWNrRWwiLCJpbWFnZV9kaWFsb2ciLCJpbWdJbnB1dEZpbGUiLCJpbWdVcmxGaWxlIiwicHJldmlld1NyYyIsIm9wZW5UYWIiLCJfcmVtb3ZlU2VsZWN0ZWRGaWxlcyIsIl9vbkxpbmtQcmV2aWV3IiwiX2ZpbGVJbnB1dENoYW5nZSIsImltYWdlR2FsbGVyeUJ1dHRvbiIsIl9vcGVuR2FsbGVyeSIsInNldElucHV0U2l6ZSIsInNldFJhdGlvIiwic2l6ZVJldmVydCIsImltYWdlRmlsZUlucHV0IiwiaW1hZ2VBY2NlcHQiLCJpbWFnZU11bHRpcGxlRmlsZSIsImltYWdlVXJsSW5wdXQiLCJpbWFnZUdhbGxlcnlVcmwiLCJpbWFnZV9nYWxsZXJ5Iiwib25seVBlcmNlbnRhZ2UiLCJvbmx5UGVyY2VudERpc3BsYXkiLCJoZWlnaHREaXNwbGF5IiwicmV2ZXJ0IiwidGV4dERlY29yYXRpb24iLCJjYWxsUGx1Z2luIiwiX3NldFVybElucHV0IiwiYWx0IiwiZmlsZVRhZ3MiLCJzZWxlY3QiLCJvbk1vZGlmeU1vZGUiLCJjYWxsX2NvbnRyb2xsZXJfcmVzaXplIiwiZGVzdHJveSIsImltYWdlRWwiLCJpbWFnZUNvbnRhaW5lciIsImdldFBhcmVudEVsZW1lbnQiLCJpc01lZGlhQ29tcG9uZW50IiwiZGF0YUluZGV4IiwiZnVuY3Rpb25zIiwib25JbWFnZURlbGV0ZUJlZm9yZSIsImZvY3VzRWwiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZW1wdHlEaXYiLCJyZW1vdmVJdGVtQWxsUGFyZW50cyIsImZvY3VzRWRnZSIsImRlbGV0ZUluZm8iLCJvbkltYWdlVXBsb2FkIiwidGFiTmFtZSIsInRhYkNvbnRlbnQiLCJ0YWJMaW5rcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpbWFnZVBsdWdpbiIsInVwZGF0ZV9pbWFnZSIsImZpbGVzIiwic3VibWl0QWN0aW9uIiwib25SZW5kZXJfaW1nVXJsIiwiZmlsZUxpc3QiLCJmaWxlU2l6ZSIsImxpbWl0U2l6ZSIsImltYWdlVXBsb2FkU2l6ZUxpbWl0IiwiaW5mb1NpemUiLCJpbWFnZXNJbmZvIiwib25JbWFnZVVwbG9hZEVycm9yIiwibm90aWNlT3BlbiIsImluZm8iLCJpbnB1dFdpZHRoIiwiaW5wdXRIZWlnaHQiLCJpc1VwZGF0ZSIsIm9uSW1hZ2VVcGxvYWRCZWZvcmUiLCJyZWdpc3RlciIsInVwbG9hZCIsInJlc3BvbnNlIiwiaW1hZ2VVcGxvYWRVcmwiLCJmaWxlc0xlbiIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJpbWFnZVVwbG9hZEhlYWRlciIsImNhbGxCYWNrX2ltZ1VwbG9hZCIsInNldHVwX3JlYWRlciIsImltYWdlVXBsb2FkSGFuZGxlciIsInVwZGF0ZV9zcmMiLCJjcmVhdGVfaW1hZ2UiLCJ3RmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJmaWxlc1N0YWNrIiwicmVhZGVyIiwib25sb2FkIiwidXBkYXRlRWxlbWVudCIsIm9uUmVuZGVyX2ltZ0Jhc2U2NCIsInJlYWRBc0RhdGFVUkwiLCJ1cGRhdGVNZXRob2QiLCJjcmVhdGVNZXRob2QiLCJwb3AiLCJvblJlbmRlcl9saW5rIiwiaW1nVGFnIiwieHkiLCJfbW9kdWxlX3NldElucHV0U2l6ZSIsIl9tb2R1bGVfc2V0UmF0aW8iLCJjaGVja0ZpbGVJbmZvIiwibW9kaWZ5SGFuZGxlciIsIm9wZW5Nb2RpZnkiLCJnZXRGb3JtYXRFbGVtZW50IiwidGV4dEFsaWduIiwiZmxvYXQiLCJjaGVja0luZm8iLCJyZXNldEZpbGVJbmZvIiwicmVzZXRJbmZvIiwiX3Jlc2l6ZV9wbHVnaW4iLCJvSW1nIiwiY2xvbmVOb2RlIiwiY292ZXIiLCJzZXRfY292ZXIiLCJjb250YWluZXIiLCJzZXRfY29udGFpbmVyIiwiY3JlYXRlX2NhcHRpb24iLCJhcHBseVNpemUiLCJzZXRBbGlnbiIsIl9pbWFnZV9jcmVhdGVfb25sb2FkIiwiaW5zZXJ0Q29tcG9uZW50Iiwic2V0SW5mbyIsIm1lZGlhQXV0b1NlbGVjdCIsInNlbGVjdENvbXBvbmVudCIsImxpbmUiLCJhcHBlbmRGb3JtYXRUYWciLCJvcGVuQ29udHJvbGxlciIsIm5vdEhpc3RvcnlQdXNoIiwiY2hhbmdlU2l6ZSIsImlzTmV3Q29udGFpbmVyIiwiaXNOdW1iZXIiLCJ5IiwibW9kaWZpZWRDYXB0aW9uIiwiaXNOZXdBbmNob3IiLCJpbnNlcnRCZWZvcmUiLCJpbWFnZUVsZW1lbnQiLCJuZXdFbCIsImV4aXN0RWxlbWVudCIsImlzUmFuZ2VGb3JtYXRFbGVtZW50IiwiaXNOb3RDaGVja2luZ05vZGUiLCJyZXBsYWNlQ2hpbGQiLCJpc0xpc3RDZWxsIiwicmVmZXIiLCJyZW1vdmVFbXB0eU5vZGUiLCJpc0Zvcm1hdEVsZW1lbnQiLCJzcGxpdEVsZW1lbnQiLCJodG1sUmVtb3ZlV2hpdGVTcGFjZSIsInByZXZpb3VzU2libGluZyIsIl9fdXBkYXRlVGFncyIsImlzRmlndXJlcyIsIl9yb3RhdGVWZXJ0aWNhbCIsInJlc2V0VHJhbnNmb3JtIiwic2V0VHJhbnNmb3JtU2l6ZSIsImdldE51bWJlciIsInNldFRpbWVvdXQiLCJ1c2VyU2l6ZSIsIm5vdE9wZW4iLCJfbW9kdWxlX3NldE1vZGlmeUlucHV0U2l6ZSIsInNldFBlcmNlbnRTaXplIiwic2V0U2l6ZSIsInNldEF1dG9TaXplIiwiX21vZHVsZV9zaXplUmV2ZXJ0Iiwibm90UmVzZXRQZXJjZW50YWdlIiwiZGlyZWN0aW9uIiwib25seVciLCJjYW5jZWxQZXJjZW50QXR0ciIsIl9tb2R1bGVfc2F2ZUN1cnJlbnRTaXplIiwibWFyZ2luVG9wIiwibWF4V2lkdGgiLCJzZXRPcmlnaW5TaXplIiwib3JpZ2luU2l6ZSIsImhlaWdodFBlcmNlbnRhZ2UiLCJzZXRDYXB0aW9uUG9zaXRpb24iLCJtaW5XaWR0aCIsImNvbnRleHRWaWRlbyIsIl92aWRlb1NpemVVbml0IiwiX3lvdXR1YmVRdWVyeSIsInlvdXR1YmVRdWVyeSIsIl92aWRlb1JhdGlvIiwidmlkZW9SYXRpbyIsIl9kZWZhdWx0UmF0aW8iLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJ2aWRlb1Jlc2l6aW5nIiwidmlkZW9IZWlnaHRTaG93IiwidmlkZW9Sb3RhdGlvbiIsInZpZGVvQWxpZ25TaG93IiwidmlkZW9TaXplT25seVBlcmNlbnRhZ2UiLCJ2aWRlb19kaWFsb2ciLCJ2aWRlb0lucHV0RmlsZSIsInZpZGVvVXJsRmlsZSIsInZpZGVvUmF0aW9PcHRpb24iLCJzZXRWaWRlb1JhdGlvIiwidmlkZW9GaWxlSW5wdXQiLCJ2aWRlb0FjY2VwdCIsInZpZGVvTXVsdGlwbGVGaWxlIiwidmlkZW9VcmxJbnB1dCIsInJhdGlvTGlzdCIsInZpZGVvUmF0aW9MaXN0IiwicmF0aW9EaXNwbGF5IiwidmlkZW9SYXRpb1Nob3ciLCJvbmx5V2lkdGhEaXNwbGF5IiwiX3NldFRhZ0F0dHJzIiwiYXR0cnMiLCJ2aWRlb1RhZ0F0dHJzIiwiaGFzT3duIiwiY3JlYXRlVmlkZW9UYWciLCJ2aWRlb1RhZyIsIl9zZXRJZnJhbWVBdHRycyIsImZyYW1lQm9yZGVyIiwiYWxsb3dGdWxsc2NyZWVuIiwidmlkZW9JZnJhbWVBdHRycyIsImNyZWF0ZUlmcmFtZVRhZyIsImlmcmFtZVRhZyIsImZyYW1lIiwib25WaWRlb0RlbGV0ZUJlZm9yZSIsIm9uVmlkZW9VcGxvYWQiLCJkaXNhYmxlZCIsInNldFZpZGVvUmF0aW9TZWxlY3QiLCJwbGFjZWhvbGRlciIsInZpZGVvUGx1Z2luIiwic2V0dXBfdXJsIiwidmlkZW9VcGxvYWRTaXplTGltaXQiLCJ2aWRlb3NJbmZvIiwib25WaWRlb1VwbG9hZEVycm9yIiwib25WaWRlb1VwbG9hZEJlZm9yZSIsInZpZGVvVXBsb2FkVXJsIiwidmlkZW9VcGxvYWRIZWFkZXIiLCJjYWxsQmFja192aWRlb1VwbG9hZCIsInZpZGVvVXBsb2FkSGFuZGxlciIsImNyZWF0ZV92aWRlbyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInNwbGl0VXJsIiwiZW5kc1dpdGgiLCJvRnJhbWUiLCJpc1lvdXR1YmUiLCJpc1ZpbWVvIiwibmV3VGFnIiwiaW5wdXRVcGRhdGUiLCJfbW9kdWxlX2dldFNpemVYIiwiX21vZHVsZV9nZXRTaXplWSIsImlzUGVyY2VudCIsImNoYW5nZWQiLCJfdXBkYXRlX3ZpZGVvQ292ZXIiLCJwcmV2RnJhbWUiLCJmaWdjYXB0aW9uIiwicmF0aW9TZWxlY3RlZCIsInJhdGlvT3B0aW9ucyIsInNlbGVjdGVkIiwib25seUgiLCJwYWRkaW5nQm90dG9tIiwiZGF0YVNpemUiLCJjb250ZXh0QXVkaW8iLCJ0YXJnZXRTZWxlY3QiLCJhdWRpb1dpZHRoIiwiYXVkaW9IZWlnaHQiLCJhdWRpb19kaWFsb2ciLCJhdWRpb0lucHV0RmlsZSIsImF1ZGlvVXJsRmlsZSIsImF1ZGlvX2NvbnRyb2xsZXIiLCJzZXRDb250cm9sbGVyIiwib25DbGlja19jb250cm9sbGVyIiwiYXVkaW9GaWxlSW5wdXQiLCJhdWRpb0FjY2VwdCIsImF1ZGlvTXVsdGlwbGVGaWxlIiwiYXVkaW9VcmxJbnB1dCIsIl9jcmVhdGVBdWRpb1RhZyIsIm9BdWRpbyIsImNzc1RleHQiLCJhdWRpb1RhZ0F0dHJzIiwiaXNDb21wb25lbnQiLCJvbkF1ZGlvRGVsZXRlQmVmb3JlIiwib25BdWRpb1VwbG9hZCIsInVwZGF0ZUNvdmVyIiwic2V0dXBVcmwiLCJhdWRpb1VwbG9hZFNpemVMaW1pdCIsImF1ZGlvc0luZm8iLCJvbkF1ZGlvVXBsb2FkRXJyb3IiLCJvbkF1ZGlvVXBsb2FkQmVmb3JlIiwiYXVkaW9VcGxvYWRVcmwiLCJhdWRpb1VwbG9hZEhlYWRlciIsImNhbGxCYWNrX3VwbG9hZCIsImF1ZGlvVXBsb2FkSGFuZGxlciIsImNyZWF0ZV9hdWRpbyIsInByZXZFbGVtZW50Iiwic2VsZWN0aW9uVGFnIiwib25Db250cm9sbGVyT2ZmIiwicHJldmlld0VsZW1lbnQiLCJmb250U2l6ZUVsZW1lbnQiLCJkZWZhdWx0Rm9udFNpemUiLCJfbWF0aEV4cCIsIm1hdGhfZGlhbG9nIiwiaXNJRSIsIl9yZW5kZXJNYXRoRXhwIiwibWF0aF9jb250cm9sbGVyIiwic2V0Q29udHJvbGxlcl9NYXRoQnV0dG9uIiwibWF0aENvbnRyb2xsZXIiLCJvbkNsaWNrX21hdGhDb250cm9sbGVyIiwibWF0aEZvbnRTaXplIiwibWF0aF9idG4iLCJtYW5hZ2VkVGFncyIsIm1ldGhvZCIsImthdGV4IiwiZG9tIiwiY3JlYXRlUmFuZ2UiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJfcmVuZGVyZXIiLCJIVE1MRGVjb2RlciIsImV4cCIsInJlbmRlclRvU3RyaW5nIiwidGhyb3dPbkVycm9yIiwiZGlzcGxheU1vZGUiLCJjb250ZXh0TWF0aCIsIm1hdGhFeHAiLCJrYXRleEVsIiwiSFRNTEVuY29kZXIiLCJjb250YWluZXJFbCIsImVtcHR5IiwiY3JlYXRlVGV4dE5vZGUiLCJ6ZXJvV2lkdGhTcGFjZSIsIm5leHRTaWJsaW5nIiwibWF0aFRhZyIsIm1hdGhCdG4iLCJibG9ja3F1b3RlIiwidGFyZ2V0QnV0dG9uIiwiYWN0aW9uIiwiY3VycmVudEJsb2NrcXVvdGUiLCJkZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQiLCJhcHBseVJhbmdlRm9ybWF0RWxlbWVudCIsIl9pdGVtTWVudSIsIl9hbGlnbkxpc3QiLCJjdXJyZW50QWxpZ24iLCJkZWZhdWx0RGlyIiwianVzdGlmeSIsImFsaWduX2p1c3RpZnkiLCJhbGlnbl9sZWZ0IiwiYWxpZ25fcmlnaHQiLCJhbGlnbl9jZW50ZXIiLCJsaXN0VWwiLCJhbGlnbkl0ZW1zIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJhbGlnbkNvbnRleHQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNoYW5nZUVsZW1lbnQiLCJhbGlnbkxpc3QiLCJleGNoYW5nZURpciIsImRpciIsImxlZnRCdG4iLCJyaWdodEJ0biIsImxwIiwicGFyZW50RWxlbWVudCIsInJwIiwic2VsZWN0ZWRGb3Jtc3RzIiwic2V0U3R5bGUiLCJlZmZlY3ROb2RlIiwidGFyZ2V0VGV4dCIsInRhcmdldFRvb2x0aXAiLCJfZm9udExpc3QiLCJjdXJyZW50Rm9udCIsImZvbnRMaXN0IiwidG9vbHRpcCIsImZvbnRGYW1pbHkiLCJzZWxlY3RGb250IiwiY2hhbmdlVHh0IiwiaGFzRm9jdXMiLCJmb250Q29udGV4dCIsIl9zaXplTGlzdCIsImN1cnJlbnRTaXplIiwic2l6ZUxpc3QiLCJ1bml0IiwiZm9udFNpemVVbml0IiwiX2NvbnZlcnRGb250U2l6ZSIsImZvbnRTaXplQ29udGV4dCIsImN1cnJlbnRIUiIsImhvcml6b250YWxSdWxlUGljayIsImhySXRlbXMiLCJjbGFzcyIsImFwcGVuZEhyIiwiaHJUZW1wIiwib05vZGUiLCJfbGlzdCIsImN1cnJlbnRMaXN0IiwiYnVsbGV0cyIsImxpc3RfYnVsbGV0cyIsIm51bWJlciIsImxpc3RfbnVtYmVyIiwiYnV0dG9uIiwiaWNvbiIsImlzTGlzdCIsImVkaXRMaXN0Iiwic2VsZWN0ZWRDZWxscyIsImRldGFjaCIsInJhbmdlIiwiZ2V0UmFuZ2UiLCJnZXRTZWxlY3RlZEVsZW1lbnRzQW5kQ29tcG9uZW50cyIsImdldFJhbmdlX2FkZExpbmUiLCJzb3J0QnlEZXB0aCIsImZpcnN0U2VsIiwibGFzdFNlbCIsInRvcEVsIiwiYm90dG9tRWwiLCJpc0NvbGxhcHNlZCIsImNvbGxhcHNlZCIsIm9yaWdpblJhbmdlIiwic3RhcnRDb250YWluZXIiLCJzbyIsImVuZENvbnRhaW5lciIsIm9ubHlaZXJvV2lkdGhTcGFjZSIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZW8iLCJhZnRlclJhbmdlIiwiaXNSZW1vdmUiLCJnZXRSYW5nZUZvcm1hdEVsZW1lbnQiLCJ0b3BFbFBhcmVudCIsImJvdHRvbUVsUGFyZW50IiwibWVyZ2VUb3AiLCJtZXJnZUJvdHRvbSIsImZpcnN0TGlzdCIsImxhc3RMaXN0IiwidG9wTnVtYmVyIiwiYm90dG9tTnVtYmVyIiwicGFzc0NvbXBvbmVudCIsIm5ld0NlbGwiLCJmVGFnIiwiaXNDZWxsIiwibmV4dCIsIm9yaWdpblBhcmVudCIsIm5leHRQYXJlbnQiLCJwYXJlbnRUYWciLCJzaWJsaW5nVGFnIiwicmFuZ2VUYWciLCJfaXNJZ25vcmVOb2RlQ2hhbmdlIiwiY29weUZvcm1hdEF0dHJpYnV0ZXMiLCJpc0hSIiwiZkNoaWxkcmVuIiwiZ2V0RWxlbWVudERlcHRoIiwiaiIsImN1cnJlbnRGb3JtYXQiLCJyYW5nZUFyciIsInRlbXBMaXN0IiwiX2RldGFjaE5lc3RlZCIsImZpcnN0IiwibGFzdCIsIm9yaWdpbkxpc3QiLCJzaWJsaW5nIiwiY0xlbiIsIm5ld0xpc3QiLCJnZXRQb3NpdGlvbkluZGV4IiwibWVyZ2VTYW1lVGFncyIsImVkZ2UiLCJnZXRFZGdlQ2hpbGROb2RlcyIsImNjIiwiZWRpdEluc2lkZUxpc3QiLCJjZWxsc0xlbiIsImVsIiwibGFzdENlbGwiLCJpbm5lckxpc3QiLCJwcmV2Iiwibm9kZVBhdGgiLCJzbCIsIl9pbnNpZWRMaXN0IiwiZ2V0Tm9kZUZyb21QYXRoIiwiaW5zZXJ0UHJldiIsImdldE5vZGVQYXRoIiwic2xQYXRoIiwibGFzdEVsZW1lbnRDaGlsZCIsIm1lcmdlTmVzdGVkVGFncyIsImNvbnRleHRUYWJsZSIsIl90ZEVsZW1lbnQiLCJfdHJFbGVtZW50IiwiX3RyRWxlbWVudHMiLCJfdGFibGVYWSIsIl9tYXhXaWR0aCIsIl9maXhlZENvbHVtbiIsIl9ydGwiLCJjZWxsQ29udHJvbGxlclRvcCIsInRhYmxlQ2VsbENvbnRyb2xsZXJQb3NpdGlvbiIsInJlc2l6ZVRleHQiLCJoZWFkZXJCdXR0b24iLCJtZXJnZUJ1dHRvbiIsInNwbGl0QnV0dG9uIiwic3BsaXRNZW51IiwibWF4VGV4dCIsIm1pblRleHQiLCJfcGh5c2ljYWxfY2VsbENudCIsIl9sb2dpY2FsX2NlbGxDbnQiLCJfcm93Q250IiwiX3Jvd0luZGV4IiwiX3BoeXNpY2FsX2NlbGxJbmRleCIsIl9sb2dpY2FsX2NlbGxJbmRleCIsIl9jdXJyZW50X2NvbFNwYW4iLCJfY3VycmVudF9yb3dTcGFuIiwiZXhwYW5zaW9uIiwicmVkdWN0aW9uIiwidGFibGVQaWNrZXIiLCJ0YWJsZUhpZ2hsaWdodCIsInRhYmxlVW5IaWdobGlnaHQiLCJ0YWJsZURpc3BsYXkiLCJ0YWJsZUNvbnRyb2xsZXIiLCJzZXRDb250cm9sbGVyX3RhYmxlIiwicmVzaXplQnV0dG9uIiwiY29sdW1uRml4ZWRCdXR0b24iLCJyZXNpemVEaXYiLCJzZXRDb250cm9sbGVyX3RhYmxlRWRpdG9yIiwiaW5zZXJ0Um93QWJvdmVCdXR0b24iLCJpbnNlcnRSb3dCZWxvd0J1dHRvbiIsIm9uTW91c2VNb3ZlX3RhYmxlUGlja2VyIiwiYXBwZW5kVGFibGUiLCJvbkNsaWNrX3RhYmxlQ29udHJvbGxlciIsInRhYmxlUmVzaXplIiwiZml4ZWRfY29sdW1uX3dpZHRoIiwidGFibGVfaGVhZGVyIiwiaW5zZXJ0X3Jvd19hYm92ZSIsImluc2VydF9yb3dfYmVsb3ciLCJkZWxldGVfcm93IiwibWVyZ2VfY2VsbCIsImluc2VydF9jb2x1bW5fbGVmdCIsImluc2VydF9jb2x1bW5fcmlnaHQiLCJkZWxldGVfY29sdW1uIiwic3BsaXRfY2VsbCIsIm9UYWJsZSIsImNyZWF0ZUNlbGxzIiwidGFibGVIVE1MIiwiZmlyc3RUZCIsInJlc2V0X3RhYmxlX3BpY2tlciIsImNudCIsInJldHVybkVsZW1lbnQiLCJjZWxsc0hUTUwiLCJjZWlsIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJoaWdobGlnaHQiLCJ1bkhpZ2hsaWdodCIsInRhYmxlUGx1Z2luIiwiX3JlbW92ZUV2ZW50cyIsIl9zZWxlY3RlZFRhYmxlIiwiX3RvZ2dsZUVkaXRvciIsIl9zaGlmdCIsIl9zZWxlY3RlZENlbGxzIiwiX3JlZiIsIl9maXhlZENlbGwiLCJfc2VsZWN0ZWRDZWxsIiwiX2ZpeGVkQ2VsbE5hbWUiLCJjYWxsX2NvbnRyb2xsZXJfdGFibGVFZGl0IiwidGRFbGVtZW50IiwidGFibGVFbGVtZW50IiwidGFibGVMYXlvdXQiLCJzZXRUYWJsZVN0eWxlIiwic2V0UG9zaXRpb25Db250cm9sbGVyVG9wIiwic2V0UG9zaXRpb25Db250cm9sbGVyRGl2IiwicmVzZXQiLCJzZXRDZWxsSW5mbyIsImNlbGxJbmRleCIsImNlbGxDbnQiLCJjb2xTcGFuIiwicm93SW5kZXgiLCJyb3dTcGFuIiwicm93U3BhbkFyciIsInNwYW5JbmRleCIsImNzIiwicnMiLCJsb2djYWxJbmRleCIsImFyciIsInNvcnQiLCJlZGl0VGFibGUiLCJpc1JvdyIsInRhYmxlQXR0ciIsInBvc2l0aW9uQ2VsbCIsImVkaXRSb3ciLCJyZW1vdmVDZWxscyIsImZpcnN0Um93IiwicmlnaHRDZWxsIiwiZWRpdENlbGwiLCJwb3NpdGlvblJlc2V0RWxlbWVudCIsInVwIiwib3JpZ2luUm93SW5kZXgiLCJzaWduIiwic3BhbkNlbGxzIiwic3BhbkNlbGwiLCJpbnNlcnRSb3ciLCJwYXNzQ2VsbCIsInJlbW92ZUNlbGwiLCJyZW1vdmVTcGFuQXJyIiwiaW5zZXJ0SW5kZXgiLCJhcHBseVNwYW4iLCJjZWxsQ29sU3BhbiIsInJlbW92ZUluZGV4IiwiZ2V0T3ZlcmxhcFJhbmdlQXRJbmRleCIsInJlbW92ZUZpcnN0IiwicmVtb3ZlRW5kIiwickxlbiIsImdldEFycmF5SW5kZXgiLCJyb3dTcGFuQ2VsbCIsIl9jbG9zZVNwbGl0TWVudSIsIm9wZW5TcGxpdE1lbnUiLCJyZW1vdmVEb2NFdmVudCIsImFkZERvY0V2ZW50IiwidmVydGljYWwiLCJjdXJyZW50Q2VsbCIsImN1cnJlbnRSb3ciLCJjdXJyZW50Q29sU3BhbiIsImN1cnJlbnRSb3dTcGFuIiwibmV3Um93U3BhbiIsIm5leHRSb3dJbmRleCIsIm5leHRSb3ciLCJuZXh0Q2VsbHMiLCJuZXdSb3ciLCJwaHlzaWNhbEluZGV4IiwicmVmIiwibWVyZ2VDZWxsIiwiZW1wdHlSb3dGaXJzdCIsImVtcHR5Um93TGFzdCIsImNlIiwibWVyZ2VIVE1MIiwicm93SW5kZXhGaXJzdCIsInJvd0luZGV4TGFzdCIsInJlbW92ZVJvd3MiLCJzZXRBY3RpdmVCdXR0b24iLCJ0b2dnbGVIZWFkZXIiLCJzaXplSWNvbiIsImZpeGVkQ2VsbCIsInNlbGVjdGVkQ2VsbCIsIl9iaW5kT25TZWxlY3QiLCJfYmluZE9mZlNlbGVjdCIsIl9iaW5kT2ZmU2hpZnQiLCJlbmFibGVkIiwiX29mZkNlbGxNdWx0aVNlbGVjdCIsIl9pbml0QmluZCIsIl93ZCIsIl9vbkNlbGxNdWx0aVNlbGVjdCIsIl9hbnRpQmx1ciIsIl9zZXRNdWx0aUNlbGxzIiwic3RhcnRDZWxsIiwiZW5kQ2VsbCIsImZpbmRTZWxlY3RlZENlbGwiLCJfaSIsIm5ld0NzIiwibmV3Q2UiLCJuZXdScyIsIm5ld1JlIiwib25UYWJsZUNlbGxNdWx0aVNlbGVjdCIsImZvcm1hdEJsb2NrIiwiX2Zvcm1hdExpc3QiLCJwaWNrVXAiLCJsYW5nX3Rvb2xiYXIiLCJkZWZhdWx0Rm9ybWF0cyIsImZvcm1hdExpc3QiLCJmb3JtYXRUaXRsZSIsImZvcm1hdENvbnRleHQiLCJyYW5nZUVsZW1lbnQiLCJmaXJzdFBhdGgiLCJsYXN0UGF0aCIsInJsaXN0IiwiZGV0YWNoTGlzdCIsIm1vZGlmaWVkRm9ybXN0cyIsImZyZWVFbGVtZW50IiwiYmVmb3JlIiwiaW5uZXIiLCJpc0NvbXAiLCJpc1NhbWVBdHRyaWJ1dGVzIiwibmV3Rm9ybWF0IiwibGluZUhlaWdodHMiLCJsaW5lSGVpZ2h0Q29udGV4dCIsIl9jbGFzc0xpc3QiLCJtZW51TGFuZyIsImRlZmF1bHRMaXN0IiwiX2NsYXNzIiwicGFyYWdyYXBoU3R5bGVzIiwiZGVmYXVsdFN0eWxlIiwicGFyYWdyYXBoTGlzdCIsIl9zdHlsZUxpc3QiLCJzdHlsZUxpc3QiLCJ0ZXh0U3R5bGVzIiwic3R5bGVCdXR0b25MaXN0Iiwic2VsZWN0aW9uTm9kZSIsImJ0biIsImNoZWNrU3R5bGVzIiwiY2xhc3NMaXN0IiwicmVtb3ZlTm9kZXMiLCJpbWFnZUdhbGxlcnlIZWFkZXIiLCJkcmF3SXRlbXMiLCJzZXRJbWFnZSIsInNyY05hbWUiLCJ0aHVtYm5haWwiLCJmaWxlTmFtZSIsImNvZGVfdmlldyIsImxpbmVfaGVpZ2h0IiwicGFyYWdyYXBoX3N0eWxlIiwidGV4dF9zdHlsZSIsImFycm93X2Rvd24iLCJmb250X2NvbG9yIiwiaGlnaGxpZ2h0X2NvbG9yIiwiaG9yaXpvbnRhbF9ydWxlIiwic2hvd19ibG9ja3MiLCJtb2RpZnkiLCJhdXRvX3NpemUiLCJyb3RhdGVfbGVmdCIsInJvdGF0ZV9yaWdodCIsIm1pcnJvcl9ob3Jpem9udGFsIiwibWlycm9yX3ZlcnRpY2FsIiwibGluZV9icmVhayIsImFsZXJ0X291dGxpbmUiLCJtb3JlX3RleHQiLCJtb3JlX3BhcmFncmFwaCIsIm1vcmVfcGx1cyIsIm1vcmVfaG9yaXpvbnRhbCIsIm1vcmVfdmVydGljYWwiLCJhdHRhY2htZW50IiwibWFnaWNfc3RpY2siLCJlbXB0eV9maWxlIiwiaXNJRV9FZGdlIiwiaXNPU1hfSU9TIiwiaXNDaHJvbWl1bSIsImlzTW9iaWxlIiwiaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCIsIl9wcm9wZXJ0aWVzSW5pdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImFwcFZlcnNpb24iLCJwbGF0Zm9ybSIsImNocm9tZSIsIlJlc2l6ZU9ic2VydmVyIiwibWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwiX2FsbG93ZWRFbXB0eU5vZGVMaXN0IiwiX0hUTUxDb252ZXJ0b3IiLCJjb250ZW50cyIsIiciLCJ6ZXJvV2lkdGhSZWdFeHAiLCJvbmx5WmVyb1dpZHRoUmVnRXhwIiwiZm9udFZhbHVlTWFwIiwiQWN0aXZlWE9iamVjdCIsIlhNTEh0dHBSZXF1ZXN0IiwiZTEiLCJnZXRWYWx1ZXMiLCJjYW1lbFRvS2ViYWJDYXNlIiwicGFyYW0iLCJsZXR0ZXIiLCJrZWJhYlRvQ2FtZWxDYXNlIiwiZWxlbWVudE5hbWUiLCJfaGFzT3duIiwiZ2V0SW5jbHVkZVBhdGgiLCJuYW1lQXJyYXkiLCJwYXRoTGlzdCIsInJlZ0V4cCIsImV4dFJlZ0V4cCIsImVkaXRvclRhZyIsImdldFBhZ2VTdHlsZSIsInNoZWV0cyIsInN0eWxlU2hlZXRzIiwicnVsZXMiLCJjc3NSdWxlcyIsImdldElmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid0RvY3VtZW50IiwiY29udGVudFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsImdldEF0dHJpYnV0ZXNUb1N0cmluZyIsImV4Y2VwdEF0dHJzIiwiYXR0cmlidXRlcyIsImF0dHJTdHJpbmciLCJnZXRCeXRlTGVuZ3RoIiwiZW5jb2RlciIsImVuY29kZVVSSUNvbXBvbmVudCIsImNyIiwiY2wiLCJ1bmVzY2FwZSIsIlRleHRFbmNvZGVyIiwiaXNOb25FZGl0YWJsZSIsImlzVGV4dFN0eWxlRWxlbWVudCIsImlzSW5wdXRFbGVtZW50IiwiaXNDbG9zdXJlUmFuZ2VGb3JtYXRFbGVtZW50IiwiaXNGcmVlRm9ybWF0RWxlbWVudCIsImlzQ2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50IiwiaXNVbmVkaXRhYmxlQ29tcG9uZW50IiwidmFsaWRhdGlvbiIsImdldEZyZWVGb3JtYXRFbGVtZW50IiwiZ2V0Q2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50IiwiY29weVRhZ0F0dHJpYnV0ZXMiLCJvcmlnaW5FbCIsImNvcHlFbCIsImJsYWNrbGlzdCIsImNvcHlTdHlsZXMiLCJnZXRBcnJheUl0ZW0iLCJhcnJheSIsIm11bHRpIiwiYXJyYXlJbmNsdWRlcyIsImlkeCIsIm5leHRJZHgiLCJwcmV2SWR4IiwiX25ld09mZnNldHMiLCJmaW5kcyIsInRlbXBUZXh0IiwicHJldmlvdXMiLCJyZXZlcnNlIiwib2Zmc2V0cyIsInN0eWxlX2EiLCJzdHlsZV9iIiwiY29tcFN0eWxlIiwiY2xhc3NfYSIsImNsYXNzX2IiLCJyZWciLCJjb21wQ2xhc3MiLCJpc0VtcHR5TGluZSIsImlzU3BhbldpdGhvdXRBdHRyIiwiaXNUYWJsZSIsImlzQnJlYWsiLCJpc01lZGlhIiwibWF4RGVjIiwidG9GaXhlZCIsInJlY3Vyc2lvbkZ1bmMiLCJnZXRMaXN0Q2hpbGROb2RlcyIsImRlcHRoIiwiY29tcGFyZUVsZW1lbnRzIiwiYU5vZGUiLCJiTm9kZSIsImFuY2VzdG9yIiwiYUluZGV4IiwiYkluZGV4IiwicXVlcnkiLCJjaGVjayIsImF0dHIiLCJnZXRQcmV2aW91c0RlZXBlc3ROb2RlIiwiY2VpbGluZyIsInByZXZpb3VzTm9kZSIsImxhc3RDaGlsZCIsImdldE5leHREZWVwZXN0Tm9kZSIsIm5leHROb2RlIiwiY2hpbGRMaXN0IiwiZ2V0T2Zmc2V0Iiwid3lzaXd5Z0ZyYW1lIiwib2Zmc2V0RWxlbWVudCIsIm9mZnNldFBhcmVudCIsInNjcm9sbFRvcCIsImFTdGFydCIsImFFbmQiLCJiU3RhcnQiLCJiRW5kIiwib3ZlcmxhcCIsIm5ld0VsZW1lbnQiLCJzdHlsZU5hbWUiLCJpc0ltcG9ydGFudERpc2FibGVkIiwic2V0RGlzYWJsZWRCdXR0b25zIiwiYnV0dG9uTGlzdCIsImltcG9ydGFudCIsInN0b3BQYXJlbnQiLCJwYXJlbnQiLCJkZXRhY2hOZXN0ZWRMaXN0IiwiYmFzZU5vZGUiLCJhbGwiLCJyTm9kZSIsIl9kZWxldGVOZXN0ZWRMaXN0IiwiY05vZGVzIiwickNoaWxkcmVuIiwiYmFzZVBhcmVudCIsImxpU2libGluZyIsImxpUGFyZW50Iiwib2Zmc2V0IiwiYnAiLCJzdWZmaXhJbmRleCIsInNwbGl0VGV4dCIsImFmdGVyIiwiZGVwdGhFbCIsInBFbGVtZW50Iiwibm9kZVBhdGhBcnJheSIsIm9ubHlUZXh0IiwiaW5zdCIsIm5vZGVQYXRoTGVuIiwiYXBwbHkiLCJOdW1iZXIiLCJ2YWx1ZU9mIiwiZGVwdGhJbmRleCIsImNEZXB0aCIsInNwbGljZURlcHRoIiwiY2hpbGRzIiwiY2hpbGRMZW5ndGgiLCJuTGVuIiwiYWRkT2Zmc2V0IiwidGV4dE9mZnNldCIsInRlbXBMIiwibm90UmVtb3ZlTm9kZSIsImZvcmNlRGVsZXRlIiwiX25vdFRleHROb2RlIiwiaHRtbENvbXByZXNzIiwiZGVzIiwic3RyaW5nIiwiVHlwZUVycm9yIiwiX2lzRXhjbHVkZVNlbGVjdGlvbkVsZW1lbnQiLCJfaXNNYWludGFpbmVkTm9kZSIsIl9pc1NpemVOb2RlIiwiX2Rpc2FsbG93ZWRUYWdzIiwiY3JlYXRlVGFnc1doaXRlbGlzdCIsImNyZWF0ZVRhZ3NCbGFja2xpc3QiLCJfY29uc2lzdGVuY3lDaGVja09mSFRNTCIsImRvY3VtZW50RnJhZ21lbnQiLCJodG1sQ2hlY2tXaGl0ZWxpc3RSZWdFeHAiLCJodG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAiLCJjbGFzc05hbWVGaWx0ZXIiLCJyZW1vdmVUYWdzIiwiZW1wdHlUYWdzIiwid3JvbmdMaXN0Iiwid2l0aG91dEZvcm1hdENlbGxzIiwid3JvbmdUYWdzIiwibnJ0YWciLCJmZWwiLCJjaGVja1RhZ3MiLCJjZWxsQ2hpbGRyZW4iLCJ0cCIsIl9zZXREZWZhdWx0T3B0aW9uU3R5bGUiLCJvcHRpb25TdHlsZSIsIm1pbkhlaWdodCIsImVkaXRvciIsInN0eWxlQXJyIiwiX3NldElmcmFtZURvY3VtZW50IiwiaGVhZCIsIl9zZXRJZnJhbWVDc3NUYWdzIiwiX2VkaXRhYmxlQ2xhc3MiLCJsaW5rTmFtZXMiLCJpZnJhbWVDU1NGaWxlTmFtZSIsIndSZWdFeHAiLCJ0YWdTdHJpbmciLCJDU1NGaWxlTmFtZSIsInN0eWxlVGFnIiwiX2luaXRPcHRpb25zIiwidG9wX2RpdiIsInRvb2xfYmFyIiwiX2NyZWF0ZVRvb2xCYXIiLCJ0b29sYmFyU2hhZG93IiwicGx1Z2luQ2FsbEJ1dHRvbnMiLCJfY2hlY2tLYXRleE1hdGgiLCJhcnJvdyIsInN0aWNreV9kdW1teSIsImVkaXRvcl9kaXYiLCJpbml0RWxlbWVudHMiLCJfaW5pdEVsZW1lbnRzIiwiYm90dG9tQmFyIiwid3lzaXd5Z19kaXYiLCJwbGFjZWhvbGRlcl9zcGFuIiwidGV4dGFyZWEiLCJyZXNpemluZ19iYXIiLCJyZXNpemluZ0JhciIsIm5hdmlnYXRpb24iLCJjaGFyX3dyYXBwZXIiLCJjaGFyV3JhcHBlciIsImNoYXJfY291bnRlciIsImNoYXJDb3VudGVyIiwibG9hZGluZ19ib3giLCJsaW5lX2JyZWFrZXIiLCJsaW5lX2JyZWFrZXJfdCIsImxpbmVfYnJlYWtlcl9iIiwicmVzaXplX2JhY2siLCJmb2N1c1RlbXAiLCJ0YWJJbmRleCIsInRvb2xiYXJDb250YWluZXIiLCJyZXNpemluZ0JhckNvbnRhaW5lciIsIl9jaGVja0NvZGVNaXJyb3IiLCJjb25zdHJ1Y3RlZCIsIl90b3AiLCJfcmVsYXRpdmUiLCJfdG9vbEJhciIsIl90b29sYmFyU2hhZG93IiwiX21lbnVUcmF5IiwiX2VkaXRvckFyZWEiLCJfd3lzaXd5Z0FyZWEiLCJfY29kZUFyZWEiLCJfcGxhY2Vob2xkZXIiLCJfcmVzaXppbmdCYXIiLCJfbmF2aWdhdGlvbiIsIl9jaGFyV3JhcHBlciIsIl9jaGFyQ291bnRlciIsIl9saW5lQnJlYWtlciIsIl9saW5lQnJlYWtlcl90IiwiX2xpbmVCcmVha2VyX2IiLCJfcmVzaXplQmFjayIsIl9zdGlja3lEdW1teSIsIl9hcnJvdyIsIl9mb2N1c1RlbXAiLCJfcmVzcG9uc2l2ZUJ1dHRvbnMiLCJyZXNwb25zaXZlQnV0dG9ucyIsImNvZGVNaXJyb3IiLCJjbU9wdGlvbnMiLCJodG1sTW9kZSIsImxpbmVOdW1iZXJzIiwibGluZVdyYXBwaW5nIiwicmVkdWNlIiwidmlld3BvcnRNYXJnaW4iLCJJbmZpbml0eSIsImNtIiwiZnJvbVRleHRBcmVhIiwid3JhcHBlciIsImNvZGVNaXJyb3JFZGl0b3IiLCJrYXRleE9wdGlvbnMiLCJfc2V0T3B0aW9ucyIsIm1lcmdlT3B0aW9ucyIsIm9yaWdpbk9wdGlvbnMiLCJvcmlnaW5FbGVtZW50IiwiZWRpdG9yQXJlYSIsImlzTmV3VG9vbGJhckNvbnRhaW5lciIsImlzTmV3VG9vbGJhciIsInRvcEFyZWEiLCJjYWxsQnV0dG9ucyIsInRvcERpdiIsInRvb2xCYXIiLCJ0b29sQmFyQXJyb3ciLCJfZWRpdG9yU3R5bGVzIiwidG9vbGJhcldpZHRoIiwid3lzaXd5Z0RpdiIsImlmcmFtZUF0dHJpYnV0ZXMiLCJvdmVyZmxvdyIsImNoYXJDb3VudGVyTGFiZWwiLCJjaGFyTGFiZWwiLCJtYXhDaGFyQ291bnQiLCJjaGFyX21heCIsImlubmVyVGV4dCIsIl9wbHVnaW5zIiwicGx1Z2luc1ZhbHVlcyIsInN0cmljdE1vZGUiLCJfZGVmYXVsdExhbmciLCJhbGxvd2VkQ2xhc3NOYW1lcyIsImhpc3RvcnlTdGFja0RlbGF5VGltZSIsImZyYW1lQXR0cmJ1dGVzIiwiZGVmYXVsdFRhZyIsInRleHRUYWdzIiwic3ViIiwic3VwIiwiX2RlZmF1bHQiLCJfbmV3IiwiX3RleHRUYWdzTWFwIiwiX2RlZmF1bHRDb21tYW5kIiwiX19hbGxvd2VkU2NyaXB0VGFnIiwidGFnc0JsYWNrbGlzdCIsIl9kZWZhdWx0VGFnc1doaXRlbGlzdCIsIl9lZGl0b3JUYWdzV2hpdGVsaXN0IiwiYWRkVGFnc1doaXRlbGlzdCIsIl9zZXRXaGl0ZWxpc3QiLCJwYXN0ZVRhZ3NCbGFja2xpc3QiLCJwYXN0ZVRhZ3NXaGl0ZWxpc3QiLCJhdHRyaWJ1dGVzV2hpdGVsaXN0IiwiYXR0cmlidXRlc0JsYWNrbGlzdCIsImxpbmVBdHRyUmVzZXQiLCJfcHJpbnRDbGFzcyIsInN0aWNreVRvb2xiYXIiLCJ1bmRlZmluZWQiLCJoaWRlVG9vbGJhciIsImZ1bGxTY3JlZW5PZmZzZXQiLCJmdWxsUGFnZSIsInByZXZpZXdUZW1wbGF0ZSIsInByaW50VGVtcGxhdGUiLCJzaG93UGF0aExhYmVsIiwicmVzaXplRW5hYmxlIiwiY2hhckNvdW50ZXJUeXBlIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJ0YWJEaXNhYmxlIiwic2hvcnRjdXRzRGlzYWJsZSIsInNob3J0Y3V0c0hpbnQiLCJjYWxsQmFja1NhdmUiLCJfaWNvbnMiLCJfX2xpc3RDb21tb25TdHlsZSIsIndoaXRlbGlzdCIsIl9kZWZhdWx0QnV0dG9ucyIsImFkZFNoaWZ0IiwiaW5kZW50S2V5IiwiaW5kZW50SWNvbiIsIl9jcmVhdGVNb2R1bGVHcm91cCIsIm9EaXYiLCJvVWwiLCJfY3JlYXRlQnV0dG9uIiwiYnV0dG9uQ2xhc3MiLCJkYXRhQ29tbWFuZCIsImRhdGFEaXNwbGF5IiwiX2Rpc2FibGVkIiwib0xpIiwib0J1dHRvbiIsImxhYmVsIiwic2VwYXJhdG9yX3ZlcnRpY2FsIiwiX2J1dHRvblRyYXkiLCJkZWZhdWx0QnV0dG9uTGlzdCIsIm1vZHVsZUVsZW1lbnQiLCJidXR0b25FbGVtZW50IiwibW9yZUxheWVyIiwiYnV0dG9uR3JvdXBMb29wIiwibW9yZSIsIm1vcmVDb250YWluZXIiLCJtb3JlQ29tbWFuZCIsImJ1dHRvbkdyb3VwIiwibW9yZUJ1dHRvbiIsImRpdiIsInVsIiwibWF0Y2hlZCIsImN1c3RvbSIsImxpIiwic3YiLCJlbnRlckRpdiIsInVuc2hpZnQiLCJ0b29sX2NvdmVyIiwiX0NvbnRleHQiLCJjb25zIiwibG9hZGluZyIsImxpbmVCcmVha2VyIiwibGluZUJyZWFrZXJfdCIsImxpbmVCcmVha2VyX2IiLCJyZXNpemVCYWNrZ3JvdW5kIiwidG9vbCIsIm5vdGljZSIsIm5vdGljZV9kaXYiLCJub3RpY2Vfc3BhbiIsIm5vdGljZV9idXR0b24iLCJvbkNsaWNrX2NhbmNlbCIsImluaXRfb3B0aW9ucyIsImlkT3JFbGVtZW50IiwiX2luaXRfb3B0aW9ucyIsInZhbCIsImdldEVsZW1lbnRCeUlkIiwiX0NvbnN0cnVjdG9yIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiX3V0aWwiLCJtZENvbnZlcnRlciIsIl9wYXJzZXIiLCJfcHJldlJ0bCIsIl9lZGl0b3JIZWlnaHQiLCJfZWRpdG9ySGVpZ2h0UGFkZGluZyIsIl9saXN0Q2FtZWwiLCJfbGlzdEtlYmFiIiwiX19mb2N1c1RlbXAiLCJfd3ciLCJfc2hhZG93Um9vdCIsIl9zaGFkb3dSb290Q29udHJvbGxlckV2ZW50VGFyZ2V0IiwiX25vdGljZSIsImluaXRQbHVnaW5zIiwiX3RhcmdldFBsdWdpbnMiLCJzdWJtZW51IiwiX3N1Ym1lbnVOYW1lIiwiX2JpbmRlZFN1Ym1lbnVPZmYiLCJfYmluZGVkQ29udGFpbmVyT2ZmIiwic3VibWVudUFjdGl2ZUJ1dHRvbiIsImNvbnRhaW5lckFjdGl2ZUJ1dHRvbiIsImN1cnJlbnRDb250cm9sbGVyVGFyZ2V0IiwiY3VycmVudEZpbGVDb21wb25lbnRJbmZvIiwiY29kZVZpZXdEaXNhYmxlZEJ1dHRvbnMiLCJyZXNpemluZ0Rpc2FibGVkQnV0dG9ucyIsIl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24iLCJfaHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwIiwiX2h0bWxDaGVja0JsYWNrbGlzdFJlZ0V4cCIsIl9kaXNhbGxvd2VkVGV4dFRhZ3NSZWdFeHAiLCJlZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwIiwiZWRpdG9yVGFnc0JsYWNrbGlzdFJlZ0V4cCIsInBhc3RlVGFnc1doaXRlbGlzdFJlZ0V4cCIsInBhc3RlVGFnc0JsYWNrbGlzdFJlZ0V4cCIsImlzRGlzYWJsZWQiLCJpc1JlYWRPbmx5IiwiX2F0dHJpYnV0ZXNXaGl0ZWxpc3RSZWdFeHAiLCJfYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cF9hbGxfZGF0YSIsIl9hdHRyaWJ1dGVzQmxhY2tsaXN0UmVnRXhwIiwiX2F0dHJpYnV0ZXNUYWdzV2hpdGVsaXN0IiwiX2F0dHJpYnV0ZXNUYWdzQmxhY2tsaXN0IiwiX2JpbmRDb250cm9sbGVyc09mZiIsIl9pc0lubGluZSIsIl9pc0JhbGxvb24iLCJfaXNCYWxsb29uQWx3YXlzIiwiX2lubGluZVRvb2xiYXJBdHRyIiwiaXNTaG93IiwiX25vdEhpZGVUb29sYmFyIiwiX3N0aWNreSIsIl9saW5lQnJlYWtlckJ1dHRvbiIsIl9jb21wb25lbnRzSW5mb0luaXQiLCJfY29tcG9uZW50c0luZm9SZXNldCIsImFjdGl2ZVBsdWdpbnMiLCJtYW5hZ2VkVGFnc0luZm8iLCJfY2hhclR5cGVIVE1MIiwiX2ZpbGVJbmZvUGx1Z2luc0NoZWNrIiwiX2ZpbGVJbmZvUGx1Z2luc1Jlc2V0IiwiX2ZpbGVNYW5hZ2VyIiwicXVlcnlTdHJpbmciLCJwbHVnaW5SZWdFeHAiLCJwbHVnaW5NYXAiLCJjb21tYW5kTWFwIiwiX2NvbW1hbmRNYXBTdHlsZXMiLCJTVFJPTkciLCJVIiwiRU0iLCJERUwiLCJfc3R5bGVDb21tYW5kTWFwIiwiX2NsZWFuU3R5bGVSZWdFeHAiLCJfdmFyaWFibGUiLCJpc0NoYW5nZWQiLCJpc0NvZGVWaWV3IiwiaXNGdWxsU2NyZWVuIiwiaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiIsInJlc2l6ZUNsaWVudFkiLCJ0YWJTaXplIiwiY29kZUluZGVudCIsIm1pblJlc2l6aW5nU2l6ZSIsImN1cnJlbnROb2RlcyIsImN1cnJlbnROb2Rlc01hcCIsIl9yYW5nZSIsIl9zZWxlY3Rpb25Ob2RlIiwiX29yaWdpbkNzc1RleHQiLCJfYm9keU92ZXJmbG93IiwiX2VkaXRvckFyZWFPcmlnaW5Dc3NUZXh0IiwiX3d5c2l3eWdPcmlnaW5Dc3NUZXh0IiwiX2NvZGVPcmlnaW5Dc3NUZXh0IiwiX2Z1bGxTY3JlZW5BdHRycyIsInN0aWNreSIsImJhbGxvb24iLCJpbmxpbmUiLCJfbGluZUJyZWFrQ29tcCIsIl9saW5lQnJlYWtEaXIiLCJfZm9ybWF0QXR0cnNUZW1wIiwiX3NhdmVCdXR0b25TdGF0ZXMiLCJhbGxDb21tYW5kQnV0dG9ucyIsImN1cnJlbnRCdXR0b25zIiwiX3JlY292ZXJCdXR0b25TdGF0ZXMiLCJvbGRCdXR0b24iLCJjYWxsQmFja0Z1bmN0aW9uIiwiX3RhcmdldCIsIm1vZHVsZUFycmF5IiwibW9kdWxlTmFtZSIsImdldEdsb2JhbFNjcm9sbE9mZnNldCIsInNjcm9sbExlZnQiLCJzdWJtZW51T24iLCJzdWJtZW51TmFtZSIsIl9zZXRNZW51UG9zaXRpb24iLCJtb3JlTGF5ZXJPZmYiLCJjb250YWluZXJPbiIsImNvbnRhaW5lck5hbWUiLCJfY29udGFpbmVyTmFtZSIsImNvbnRhaW5lck9mZiIsInRvb2xiYXJXIiwidG9vbGJhck9mZnNldCIsImV2ZW50IiwiX2dldEVkaXRvck9mZnNldHMiLCJtZW51VyIsImVsZW1lbnRXIiwicnRsVyIsInJ0bEwiLCJvdmVyTGVmdCIsIm9mZnNldEVsIiwiYnQiLCJ0b29sYmFyVG9wIiwibWVudUhlaWdodCIsIm1lbnVIZWlnaHRfYm90dG9tIiwibWVudVRvcCIsImluc1RvcCIsIm1lbnVIZWlnaHRfdG9wIiwiYXJnIiwiYXJndW1lbnRzIiwiZ2V0RmlsZUNvbXBvbmVudCIsInNob3dDb250cm9sbGVyIiwicmVmZXJFbCIsInRvcE1hcmdpbiIsImNvbnRyb2xsZXJXIiwicmVmZXJFbFciLCJhbGxvdyIsIm92ZXJTaXplIiwiZXhlY0NvbW1hbmQiLCJzaG93RGVmYXVsdFVJIiwibmF0aXZlRm9jdXMiLCJfX2ZvY3VzIiwiX2VkaXRvclJhbmdlIiwiY3VycmVudE5vZGUiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImJyIiwiX2FwcGx5VGFnRWZmZWN0cyIsIl90b2dnbGVUb29sYmFyQmFsbG9vbiIsImZpbGVDb21wb25lbnRJbmZvIiwiYmx1ciIsInN0YXJ0Q29uIiwic3RhcnRPZmYiLCJlbmRDb24iLCJlbmRPZmYiLCJzZXRTdGFydCIsInNldEVuZCIsInNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiX3JhbmdlSW5mbyIsInJlbW92ZVJhbmdlIiwiX3NldEtleUVmZmVjdCIsIl9jcmVhdGVEZWZhdWx0UmFuZ2UiLCJmb2N1c05vZGUiLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c09mZnNldCIsImNvbXBhcmVWYWx1ZSIsInJpZ2h0RGlyIiwiX3NlbGVjdGlvblZvaWQiLCJvcCIsImFjdGl2ZUVsIiwiYWN0aXZlRWxlbWVudCIsImV4dGVudE5vZGUiLCJmaXJzdEZvcm1hdCIsImNvbW0iLCJfcmVzZXRSYW5nZVRvVGV4dE5vZGUiLCJ0ZW1wQ29uIiwidGVtcE9mZnNldCIsInRlbXBDaGlsZCIsIm9ubHlCcmVhayIsImVtcHR5VGV4dCIsImNvbW1vbkNvbiIsImxpbmVOb2RlcyIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzdGFydElkeCIsImVuZElkeCIsIm9ubHlUYWJsZSIsInN0YXJ0UmFuZ2VFbCIsImVuZFJhbmdlRWwiLCJzYW1lUmFuZ2UiLCJyZW1vdmVEdXBsaWNhdGUiLCJteUNvbXBvbmVudCIsInNlbGVjdGVkTGluZXMiLCJpc0VkZ2VQb2ludCIsIl9pc0VkZ2VGb3JtYXQiLCJmb3JtYXROb2RlIiwiY3VycmVudEZvcm1hdEVsIiwib0Zvcm1hdE5hbWUiLCJjaGVja0NoYXJDb3VudCIsIm5vdFNlbGVjdCIsInJlbW92ZU5vZGUiLCJmb3JtYXRFbCIsImRlcHRoRm9ybWF0IiwicGx1Z2luIiwiX3NldENvbXBvbmVudExpbmVCcmVha2VyIiwidF9zdHlsZSIsImJfc3R5bGUiLCJyZXNpemVDb250YWluZXIiLCJjb21wb25lbnRUb3AiLCJ3U2Nyb2xsIiwiX2NoZWNrRHVwbGljYXRlTm9kZSIsIl9kdXBsZUNoZWNrIiwib1N0eWxlcyIsImR1cGxlIiwiYWZ0ZXJOb2RlIiwib3JpZ2luQWZ0ZXIiLCJ0ZW1wQWZ0ZXJOb2RlIiwiaW5zZXJ0TGlzdENlbGwiLCJ0ZW1wUGFyZW50Tm9kZSIsImZyZWVGb3JtYXQiLCJpc0Zvcm1hdHMiLCJpc0VkZ2UiLCJwcmV2Q29udGFpbmVyIiwic2FtZVBhcmVudCIsInN1Ykxpc3QiLCJmb3JtYXRSYW5nZSIsInJlbW92ZWRUYWciLCJvbGRQYXJlbnQiLCJyYW5nZUNvbiIsImZOb2RlIiwiY2hMaXN0IiwiZHVwbGVOb2RlcyIsImNJdGVtIiwiX3NldEludG9GcmVlRm9ybWF0IiwicHJldmlvdXNUZXh0IiwibmV4dFRleHQiLCJuZXdSYW5nZSIsInplcm9XaWR0aCIsIm9Ob2RlQ2hpbGRyZW4iLCJsYXN0T05vZGUiLCJmaWxlQ29tcG9uZW50IiwiaXNTdGFydEVkZ2UiLCJpc0VuZEVkZ2UiLCJzdGFydFByZXZFbCIsImVuZE5leHRFbCIsImJlZm9yZU5vZGUiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiX25vZGVSZW1vdmVMaXN0SXRlbSIsInN1YnN0cmluZ0RhdGEiLCJlbmRVbCIsInN0YXJ0TGkiLCJyYyIsInJhbmdlTGluZXMiLCJsaW5lc0xvb3AiLCJuZXN0ZWQiLCJmRWwiLCJsRWwiLCJzdGFuZFRhZyIsImJlZm9yZVRhZyIsInBhcmVudERlcHRoIiwibGlzdFBhcmVudCIsImxpbmVBcnIiLCJyZW1vdmVJdGVtcyIsIm5leHRMaW5lIiwibmV4dExpc3QiLCJyZW1vdmVBcnJheSIsInNwbGl0UmFuZ2UiLCJuZXdSYW5nZUVsZW1lbnQiLCJmaXJzdE5vZGUiLCJsYXN0Tm9kZSIsInJhbmdlRWwiLCJpbnNlcnRlZE5ldyIsIm1vdmVDb21wbGV0ZSIsImFwcGVuZE5vZGUiLCJpbnNOb2RlIiwib3JpZ2luTm9kZSIsImluc0NoaWxkcmVuIiwib3JpZ2luTmV4dCIsImRldGFjaFJhbmdlIiwibGluZUluZGV4IiwiaW5zTmV4dCIsImlubmVyQ2hpbGRyZW4iLCJyYW5nZVBhcmVudCIsInJhbmdlUmlnaHQiLCJjaGlsZEVkZ2UiLCJsaXN0Rmlyc3QiLCJsaXN0TGFzdCIsInN0eWxlQXJyYXkiLCJyZW1vdmVOb2RlQXJyYXkiLCJzdHJpY3RSZW1vdmUiLCJpc1JlbW92ZU5vZGUiLCJpc1JlbW92ZUZvcm1hdCIsImsiLCJuZXdOb2RlTmFtZSIsInNOb2RlIiwiY2hlY2tDbnQiLCJjaGVja0F0dHJzIiwiY2tlY2tDbGFzc2VzIiwiY2xhc3NSZWciLCJzdHlsZUNoZWNrIiwiY2xhc3NDaGVjayIsInN0eWxlUmVnRXhwIiwiY2xhc3NSZWdFeHAiLCJyZW1vdmVOb2RlUmVnRXhwIiwid0Jvb2xlYW4iLCJCb29sZWFuIiwiX3JlbW92ZUNoZWNrIiwiY2hlY2tOb2RlIiwidk5vZGUiLCJ0YWdSZW1vdmUiLCJvcmlnaW5TdHlsZSIsIm9yaWdpbkNsYXNzZXMiLCJvbmVMaW5lIiwiZW5kTGVuZ3RoIiwiaXNSZW1vdmVBbmNob3IiLCJpc1NpemVOb2RlIiwiX2dldE1haW50YWluZWROb2RlIiwiX3V0aWxfZ2V0TWFpbnRhaW5lZE5vZGUiLCJfdXRpbF9pc01haW50YWluZWROb2RlIiwiX3Jlc2V0Q29tbW9uTGlzdENlbGwiLCJfbm9kZUNoYW5nZV9vbmVMaW5lIiwiX3NldENvbW1vbkxpc3RTdHlsZSIsImFwcGxpZWRDb21tb25MaXN0IiwiX25vZGVDaGFuZ2VfZW5kTGluZSIsIl9ub2RlQ2hhbmdlX21pZGRsZUxpbmUiLCJfbm9kZUNoYW5nZV9zdGFydExpbmUiLCJlbFN0eWxlcyIsImVrIiwiZWxLZXlzIiwicmVtb3ZlUHJvcGVydHkiLCJzZWwiLCJhcHBsaWVkRWwiLCJjaGlsZFN0eWxlIiwiZWxTdHlsZSIsImZvbnRXZWlnaHQiLCJmb250U3R5bGUiLCJjS2V5cyIsIl9zdHJpcFJlbW92ZU5vZGUiLCJfaXNSZW1vdmUiLCJuZXdJbm5lck5vZGUiLCJwYXJlbnRDb24iLCJzYW1lVGFnIiwieiIsIm5Ob2RlQXJyYXkiLCJwTm9kZSIsImlzU2FtZU5vZGUiLCJwQ3VycmVudCIsInN0YXJ0UGFzcyIsImVuZFBhc3MiLCJjaGVja0NzcyIsImNvdmVyTm9kZSIsInByZXZOb2RlIiwicHJldkFuY2hvck5vZGUiLCJjaGlsZE5vZGUiLCJhbmNob3JzIiwiYUNoaWxkcmVuIiwiYUxlbiIsImFuY2VzdG9yQW5jaG9yTm9kZSIsImFmdGVyQW5jaG9yTm9kZSIsInRleHROb2RlX3MiLCJ0ZXh0Tm9kZV9lIiwiZW5kQ29uUmVzZXQiLCJuZXdTdGFydE9mZnNldCIsInN0YXJ0UGF0aCIsIm1lcmdlRW5kQ29uIiwibmV3RW5kT2Zmc2V0IiwiZW5kUGF0aCIsIm5ld09mZnNldHMiLCJfZW5kQ29udGFpbmVyIiwicGFzc05vZGUiLCJjbG9uZUNoaWxkIiwiaXNUb3BOb2RlIiwidGVtcE5vZGUiLCJuZXdDc3NUZXh0IiwibmV3Q2xhc3MiLCJub25lQ2hhbmdlIiwiYWN0aW9uQ2FsbCIsImxheWVyIiwiX3Nob3dUb29sYmFyQmFsbG9vbiIsIl9zaG93VG9vbGJhcklubGluZSIsImNvbW1hbmRIYW5kbGVyIiwidG9nZ2xlQ29kZVZpZXciLCJ0b2dnbGVGdWxsU2NyZWVuIiwidG9nZ2xlRGlzcGxheUJsb2NrcyIsInNldERpciIsImdldENvbnRlbnRzIiwibm9kZXNNYXAiLCJtYXJnaW5EaXIiLCJtYXJnaW4iLCJfcmVzb3VyY2VzU3RhdGVDaGFuZ2UiLCJfc2V0Q29kZURhdGFUb0VkaXRvciIsIl9oaWRlVG9vbGJhciIsIl9yZXNldENhY2hpbmdCdXR0b24iLCJfc2V0RWRpdG9yRGF0YVRvQ29kZVZpZXciLCJzY3JvbGxIZWlnaHQiLCJyZWZyZXNoIiwiX2NoZWNrUGxhY2Vob2xkZXIiLCJjb2RlX2h0bWwiLCJfZ2V0Q29kZVZpZXciLCJwYXJzZURvY3VtZW50IiwiaGVhZENoaWxkcmVuIiwiY29udmVydENvbnRlbnRzRm9yRWRpdG9yIiwiZWRpdGFibGVDbGFzc2VzIiwiY29kZUNvbnRlbnRzIiwiY29udmVydEhUTUxGb3JDb2RlVmlldyIsImNvZGVWYWx1ZSIsIl9zZXRDb2RlVmlldyIsIl92YXIiLCJ3YXNUb29sYmFySGlkZGVuIiwiX2NvZGVWaWV3QXV0b0hlaWdodCIsIm9uU2Nyb2xsX3dpbmRvdyIsInpJbmRleCIsIl9pZnJhbWVBdXRvSGVpZ2h0IiwiaGlkZSIsImNvbnRlbnRzSFRNTCIsInByaW50RG9jdW1lbnQiLCJ3RG9jIiwiYXJydHMiLCJ3cml0ZSIsImxpbmtzIiwibGlua0hUTUwiLCJkb2N1bWVudE1vZGUiLCJTdHlsZU1lZGlhIiwid2luZG93T2JqZWN0IiwibWltZVR5cGUiLCJjaGFuZ2VEaXIiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkxlZnQiLCJjb252ZXJ0VmFsdWUiLCJfcmVzZXRDb21wb25lbnRzIiwic2V0SWZyYW1lQ29udGVudHMiLCJjdHgiLCJfX3NjcmlwdFRhZ1JlZ0V4cCIsIm9ubHlDb250ZW50cyIsImNsZWFuSFRNTCIsInJlbmRlckhUTUwiLCJlZGl0YWJsZUVscyIsImdldEZ1bGxDb250ZW50cyIsIl9tYWtlTGluZSIsInJlcXVpcmVGb3JtYXQiLCJfX2Rpc2FsbG93ZWRUYWdOYW1lUmVnRXhwIiwidGV4dEFycmF5IiwiX2FsbG93SFRNTENvbW1lbnRzIiwiX3RhZ0NvbnZlcnRvciIsIl9kZWxldGVEaXNhbGxvd2VkVGFncyIsIl9fZGlzYWxsb3dlZFRhZ3NSZWdFeHAiLCJ0byIsInNpemVOdW0iLCJmcm9tIiwicHhTaXplIiwiX2NsZWFuU3R5bGUiLCJmYWNlIiwiYWxsb3dlZFN0eWxlIiwiX2NsZWFuVGFncyIsImxvd0xldmVsQ2hlY2siLCJiQXR0ciIsIndBdHRyIiwiX2VkaXRGb3JtYXQiLCJ0ZW1wVHJlZSIsIl9jb252ZXJ0TGlzdENlbGwiLCJkb21UcmVlIiwiX2lzRm9ybWF0RGF0YSIsIl9jbGFzc05hbWVGaWx0ZXIiLCJ0ZXh0Q29tcExpc3QiLCJpbml0TWV0aG9kIiwiX19hbGxvd2VkU2NyaXB0UmVnRXhwIiwiY29tcCIsInJldHVybkhUTUwiLCJiclJlZyIsImlzRm9ybWF0IiwiYnJDaGFyIiwiaW5kZW50U2l6ZSIsImVsZW1lbnRSZWdUZXN0IiwiZWxlbWVudEluZGVudCIsImxpbmVCUiIsIm5vZGVSZWdUZXN0IiwidGFnSW5kZW50IiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwibGlzdGVuZXIiLCJ1c2VDYXB0dXJlIiwiX2NoYXJDb3VudCIsImlucHV0VGV4dCIsImNvdW50VHlwZSIsIm5leHRDaGFyQ291bnQiLCJnZXRDaGFyTGVuZ3RoIiwiX3NldENoYXJDb3VudCIsIm92ZXIiLCJjb3VudCIsImdldENoYXJDb3VudCIsInNsaWNlUG9zaXRpb24iLCJfY2FsbENvdW50ZXJCbGluayIsInJlc2V0UmVzcG9uc2l2ZVRvb2xiYXIiLCJyZXNwb25zaXZlU2l6ZSIsIl9yZXNwb25zaXZlQnV0dG9uU2l6ZSIsInJlc3BvbnNpdmVXaWR0aCIsIl9yZXNwb25zaXZlQ3VycmVudFNpemUiLCJzZXRUb29sYmFyQnV0dG9ucyIsIl9jaGVja0NvbXBvbmVudHMiLCJnZXREb2MiLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwiaWdub3JlZExpc3QiLCJPVVRERU5UIiwiSU5ERU5UIiwiX2luaXQiLCJyZWxvYWQiLCJfaW5pdEhUTUwiLCJnZXRQcm9wZXJ0eVZhbHVlIiwic1ByZWZpeCIsIlNoYWRvd1Jvb3QiLCJzaGFkb3dSb290IiwiZGlzYWxsb3dUZXh0VGFncyIsImFsbG93VGV4dFRhZ3MiLCJnZXRSZWdMaXN0Iiwic3RyMiIsImRlZmF1bHRBdHRyIiwicmVnRW5kU3RyIiwiX3dBdHRyIiwidGFnc0F0dHIiLCJhbGxBdHRyIiwiX2JBdHRyIiwiX2NhY2hpbmdCdXR0b25zIiwibWFuYWdlZENsYXNzIiwiZmlsZVBsdWdpblJlZ0V4cCIsImNoYW5nZSIsImRlbGF5VGltZSIsInB1c2hEZWxheSIsInN0YWNrSW5kZXgiLCJzdGFjayIsInNldENvbnRlbnRzRnJvbVN0YWNrIiwicHVzaFN0YWNrIiwiZGVsYXkiLCJ0aW1lIiwiY2xlYXJUaW1lb3V0IiwiZ28iLCJnZXRDdXJyZW50SW5kZXgiLCJpZ25vcmVDaGFuZ2VFdmVudCIsIl9kZXN0cm95IiwiX2hpc3RvcnkiLCJfb25DaGFuZ2VfaGlzdG9yeVN0YWNrIiwiX2lmcmFtZUF1dG8iLCJfaW5pdFd5c2l3eWdBcmVhIiwib25DaGFuZ2UiLCJfX2NhbGxSZXNpemVGdW5jdGlvbiIsInJlc2l6ZU9ic2VydmVyRW50cnkiLCJib3JkZXJCb3hTaXplIiwiYmxvY2tTaXplIiwiY29udGVudFJlY3QiLCJvblJlc2l6ZUVkaXRvciIsIl9zZXREZWZhdWx0Rm9ybWF0IiwiZm9ybWF0TmFtZSIsIl9zZXRPcHRpb25zSW5pdCIsIl9nZXRDb25zdHJ1Y3RlZCIsIl9lZGl0b3JJbml0IiwiX2FkZEV2ZW50IiwiX29mZlN0aWNreVRvb2xiYXIiLCJvblJlc2l6ZV93aW5kb3ciLCJfcmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiX3Rvb2xiYXJPYnNlcnZlciIsImNvbnRleHRFbCIsIl9JRWlzQ29tcG9zaW5nIiwiX2xpbmVCcmVha2VyQmluZCIsIl9jdXJzb3JNb3ZlS2V5Q29kZSIsIl9kaXJlY3Rpb25LZXlDb2RlIiwiX25vblRleHRLZXlDb2RlIiwiX2hpc3RvcnlJZ25vcmVLZXlDb2RlIiwiX29uQnV0dG9uc0NoZWNrIiwiX2Zyb250WmVyb1dpZHRoUmVnIiwiX2tleUNvZGVTaG9ydGN1dCIsIjY1IiwiNjYiLCI4MyIsIjg1IiwiNzMiLCI4OSIsIjkwIiwiMjE5IiwiMjIxIiwiX3Nob3J0Y3V0Q29tbWFuZCIsImtleVN0ciIsImNsYXNzT25DaGVjayIsImNvbW1hbmRNYXBOb2RlcyIsIl9idXR0b25zRXZlbnRIYW5kbGVyIiwiYWRkR2xvYmFsRXZlbnQiLCJyZW1vdmVHbG9iYWxFdmVudCIsIm9uQ2xpY2tfdG9vbGJhciIsIl9fc2VsZWN0aW9uU3luY0V2ZW50Iiwib25Nb3VzZURvd25fd3lzaXd5ZyIsIm9uTW91c2VEb3duIiwidGFibGVDZWxsIiwib25DbGlja193eXNpd3lnIiwib25DbGljayIsImRldGFpbCIsInNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCIsInNlbGVjdGVkQ29tcG9uZW50SW5mbyIsInByZXZMaSIsIl9iYWxsb29uRGVsYXkiLCJfc2hvd1Rvb2xiYXJCYWxsb29uRGVsYXkiLCJyYW5nZU9iaiIsImlzRGlyVG9wIiwicmVjdHMiLCJnZXRDbGllbnRSZWN0cyIsImdsb2JhbFNjcm9sbCIsImVkaXRvcldpZHRoIiwic3RpY2t5VG9wIiwiZWRpdG9yTGVmdCIsIm5vZGVPZmZzZXQiLCJib3R0b20iLCJub1RleHQiLCJhcnJvd01hcmdpbiIsInRvb2xiYXJIZWlnaHQiLCJpZnJhbWVSZWN0cyIsIl9zZXRUb29sYmFyT2Zmc2V0IiwiZWRpdG9yUGFyZW50IiwiYWJzb2x1dGVMZWZ0Iiwib3ZlclJpZ2h0IiwicmVzZXRUb3AiLCJzcGFjZSIsIl9nZXRQYWdlQm90dG9tU3BhY2UiLCJkb2N1bWVudEVsZW1lbnQiLCJhcnJvd19sZWZ0Iiwic2hvd0lubGluZSIsIm9uSW5wdXRfd3lzaXd5ZyIsIm9uSW5wdXQiLCJfaXNVbmVkaXRhYmxlTm9kZSIsImlzRnJvbnQiLCJzaWJsaW5nS2V5Iiwic2libGluZ05vZGUiLCJfaXNVbmVkaXRhYmxlTm9kZV9nZXRTaWJsaW5nIiwic2VsZWN0Tm9kZSIsIl9vblNob3J0Y3V0S2V5Iiwib25LZXlEb3duX3d5c2l3eWciLCJzaGlmdEtleSIsImN0cmwiLCJjdHJsS2V5IiwibWV0YUtleSIsImFsdEtleSIsIm9uS2V5RG93biIsInNlbGVjdFJhbmdlIiwiZmlsZUNvbXBvbmVudE5hbWUiLCJfb25LZXlEb3duX3d5c2l3eWdfYXJyb3dLZXkiLCJfaGFyZERlbGV0ZSIsImRlZmF1bHRGb3JtYXQiLCJjb24iLCJwcmV2TGFzdCIsImlnbm9yZVpXUyIsIm5leHRFbCIsImxpbmVzIiwiZmMiLCJsYyIsIm1vdmVDZWxsIiwiZW5kQ2hpbGQiLCJ0YWJUZXh0IiwidGV4dFJhbmdlIiwiZnJlZUZvcm1hdEVsIiwiZW50ZXJIVE1MIiwiZm9ybWF0RW5kRWRnZSIsImZvcm1hdFN0YXJ0RWRnZSIsIl9lbnRlclByZXZlbnQiLCJpbm5lck5vZGUiLCJwYXJlbnRMaSIsIm5ld0xpc3RDZWxsIiwic2VsZWN0aW9uRm9ybWF0Iiwid1NlbGVjdGlvbiIsImluc2VydEhUTUwiLCJ3T2Zmc2V0IiwiZm9jdXNOZXh0IiwiYnJQcmV2IiwiYnJOZXh0IiwiZm9jdXNCUiIsImlzTXVsdGlMaW5lIiwiaW5uZXJSYW5nZSIsInRlbXBFbCIsImNvbXBDb250ZXh0IiwibmJzcCIsImNvbXBvbmVudEluZm8iLCJjdXJyZW50Q2VsbEZpcnN0Tm9kZSIsImN1cnJlbnRDZWxsTGFzdE5vZGUiLCJpc0NlbGxGaXJzdE5vZGUiLCJpc0NlbGxMYXN0Tm9kZSIsInNpYmxpbmdUb1NldCIsInByZXZpb3VzUm93Iiwic2VsZWN0UHJldmlvdXMiLCJzZWxlY3ROZXh0IiwicHJldmlvdXNEZWVwZXN0Tm9kZSIsIm9uS2V5VXBfd3lzaXd5ZyIsIm9Gb3JtYXRUYWciLCJpc0NvbXBvc2luZyIsImZyb250WmVyb1dpZHRoQ250Iiwib25LZXlVcCIsIm9uU2Nyb2xsX3d5c2l3eWciLCJvblNjcm9sbCIsIm9uRm9jdXNfd3lzaXd5ZyIsIm9uRm9jdXMiLCJvbkJsdXJfd3lzaXd5ZyIsIm9uQmx1ciIsIm9uTW91c2VEb3duX3Jlc2l6aW5nQmFyIiwiY2xpZW50WSIsIl9yZXNpemVfZWRpdG9yIiwiY2xvc3VyZUZ1bmMiLCJyZXNpemVJbnRlcnZhbCIsImlzVG9vbGJhckhpZGRlbiIsImVkaXRvckhlaWdodCIsInNjcm9sbFkiLCJlZGl0b3JUb3AiLCJpbmxpbmVPZmZzZXQiLCJfb25TdGlja3lUb29sYmFyIiwic2Nyb2xsIiwic0NlbGwiLCJlQ2VsbCIsInNJc0NlbGwiLCJlSXNDZWxsIiwic0NvbXAiLCJlQ29tcCIsIm9uUGFzdGVfd3lzaXd5ZyIsImNsaXBib2FyZERhdGEiLCJfZGF0YVRyYW5zZmVyQWN0aW9uIiwiX3NldENsaXBib2FyZENvbXBvbmVudCIsInNldERhdGEiLCJvbkNvcHlfd3lzaXd5ZyIsIm9uQ29weSIsIm9uU2F2ZV93eXNpd3lnIiwib25TYXZlIiwib25DdXRfd3lzaXd5ZyIsIm9uQ3V0Iiwib25Ecm9wX3d5c2l3eWciLCJkYXRhVHJhbnNmZXIiLCJfc2V0RHJvcExvY2F0aW9uU2VsZWN0aW9uIiwicmFuZ2VPZmZzZXQiLCJjYXJldFJhbmdlRnJvbVBvaW50IiwiY2xpZW50WCIsInBsYWluVGV4dCIsImNsZWFuRGF0YSIsImdldERhdGEiLCJ0ZW1wRGl2IiwidGVtcFJhbmdlIiwiX3NldENsaXBib2FyZERhdGEiLCJNU0RhdGEiLCJvblBhc3RlIiwib25Ecm9wIiwiaW5zZXJ0SW1hZ2UiLCJvbk1vdXNlTW92ZV93eXNpd3lnIiwibGluZUJyZWFrZXJTdHlsZSIsImN0eEVsIiwicGFnZVkiLCJfb25Nb3VzZURvd25fbGluZUJyZWFrIiwiX29uTGluZUJyZWFrIiwiZXZlbnRXeXNpd3lnIiwiZW50cmllcyIsInBhc3NpdmUiLCJfc2V0UmVzcG9uc2l2ZVRvb2xiYXIiLCJfcmVtb3ZlRXZlbnQiLCJ1bm9ic2VydmUiLCJzaXplQXJyYXkiLCJidXR0b25zT2JqIiwib25TZXRUb29sYmFyQnV0dG9ucyIsIm5ld1Rvb2xiYXIiLCJuZXdDb250ZXh0Iiwic2V0T3B0aW9ucyIsIl9vcHRpb25zIiwic2V0RGVmYXVsdFN0eWxlIiwibmV3U3R5bGVzIiwibm90aWNlQ2xvc2UiLCJnZXRDb250ZXh0IiwiZ2V0VGV4dCIsImdldEltYWdlc0luZm8iLCJnZXRGaWxlc0luZm8iLCJub3RDbGVhbmluZ0RhdGEiLCJyYW5nZVNlbGVjdGlvbiIsImFuY2hvcm1lIiwiaW5wdXQiLCJjaGVja0hUTUwiLCJmaXJzdENvbiIsImFwcGVuZENvbnRlbnRzIiwicmVhZE9ubHkiLCJkaXNhYmxlIiwiZW5hYmxlIiwidG9wQXJlYVN0eWxlIiwiU1VORURJVE9SIiwic3VuZWRpdG9yIiwidW53cmFwRXhwb3J0cyIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZm4iLCJ0bGRzIiwiVExEcyIsImRpY3Rpb25hcnkiLCJub25MYXRpbkFscGhhYmV0UmFuZ2VzIiwiaHRtbEF0dHJpYnV0ZXMiLCJwYXJlbnRoZXNpcyIsImNsb3NpbmdQYXJlbnRoZXNpcyIsIm9wZW5pbmdQYXJlbnRoZXNpcyIsInRyYW5zZm9ybV8xIiwiYXBwbHlPcHRpb24iLCJwcm9wcyIsInRyYW5zZm9ybSIsInRydW5jYXRpb24iLCJ0cnVuY2F0ZUZyb21UaGVNaWRkbGUiLCJzcGVjaWFsVHJhbnNmb3JtIiwidHJhbnNmb3JtZXIiLCJleGNsdWRlIiwiaXNFbWFpbCIsImlzRmlsZSIsInRydW5jYXRlIiwibWlkZGxlVHJ1bmNhdGlvbiIsImlpZHhlcyIsInVybFJlZ2V4IiwiZmlsZVJlZ2V4IiwiZW1haWxSZWdleCIsImlwUmVnZXgiLCJmaW5hbFJlZ2V4IiwiZmluYWwyIiwiZmluYWwxIiwiZW1haWwiLCJkb21haW4iLCJpcHY0IiwiY29uZmlybWVkQnlQcm90b2NvbCIsImZxZG4iLCJ1dGlscyIsImlzSW5zaWRlQW5jaG9yVGFnIiwiaXNJbnNpZGVBdHRyaWJ1dGUiLCJtYXhpbXVtQXR0ckxlbmd0aCIsImNoZWNrUGFyZW50aGVzaXMiLCJvcGVuaW5nIiwiY2xvc2luZyIsInByZXZGcmFnbWVudCIsImZ1bGxJbnB1dCIsInRhcmdldEVuZCIsImVzY2FwZWRUYXJnZXQiLCJUTERzUmdleCIsInNraXBIVE1MIiwiZm91bmQiLCJfbG9vcF8xIiwidGxkIiwiVExEIiwic3RhcnRzV2l0aCIsImlzVVJMIiwiZnJhZ21lbnQiLCJpcHY2IiwicG9ydCIsInJlYXNvbiIsImZpbGVQYXRoIiwiZmlsZW5hbWUiLCJmaWxlRGlyZWN0b3J5IiwibG9jYWwiLCJfYSIsIm5ld1N0ciIsImlwIiwiX3Jlc2l6ZUNsaWVudFgiLCJfcmVzaXplQ2xpZW50WSIsIl9yZXNpemVfdyIsIl9yZXNpemVfaCIsIl9yZXNpemVfZGlyZWN0aW9uIiwiX21vdmVfcGF0aCIsIl9pc0NoYW5nZSIsImFsaWduSWNvbnMiLCJyZXNpemVfZGl2X2NvbnRhaW5lciIsInNldENvbnRyb2xsZXJfcmVzaXplIiwicmVzaXplRG90IiwicmVzaXplRGlzcGxheSIsInJlc2l6ZV9idXR0b24iLCJzZXRDb250cm9sbGVyX2J1dHRvbiIsInJlc2l6ZV9oYW5kbGVzIiwicmVzaXplSGFuZGxlcyIsInJlc2l6ZUJ1dHRvbkdyb3VwIiwicm90YXRpb25CdXR0b25zIiwicGVyY2VudGFnZUJ1dHRvbnMiLCJhbGlnbk1lbnUiLCJhbGlnbk1lbnVMaXN0IiwiYWxpZ25CdXR0b24iLCJhdXRvU2l6ZUJ1dHRvbiIsImNhcHRpb25CdXR0b24iLCJvbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlIiwib25DbGlja19yZXNpemVCdXR0b24iLCJyZXNpemVfY29udGFpbmVyIiwicGx1Z2luT2JqIiwicGVyY2VudGFnZVJvdGF0aW9uIiwieFVuaXQiLCJ5VW5pdCIsImRlYyIsInhWYWx1ZSIsInlWYWx1ZSIsImNvbnRleHRSZXNpemluZyIsImlzVmVydGljYWwiLCJhYnMiLCJkaXNwbGF5WCIsImRpc3BsYXlZIiwicmVzaXplRG90U2hvdyIsInJvdGF0aW9ucyIsInBCdXR0b25zIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsIl9jbG9zZUFsaWduTWVudSIsIm9wZW5BbGlnbk1lbnUiLCJjdXJyZW50Q29udGV4dCIsImN1cnJlbnRNb2R1bGUiLCJwZXJjZW50WSIsInBlcmNlbnRhZ2UiLCJfc2V0VHJhbnNGb3JtIiwic2xvcGUiLCJkZWciLCJhbGlnblZhbHVlIiwiY2FwdGlvblRleHQiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc09yaWdpbiIsIm9mZnNldFciLCJvZmZzZXRIIiwidHJhbnNXIiwidHJhbnNIIiwidHJhbnNsYXRlIiwiY2xvc3VyZUZ1bmNfYmluZCIsInJlc2l6aW5nX2VsZW1lbnRfYmluZCIsImNhbmNlbF9jb250cm9sbGVyX3Jlc2l6ZSIsInJlc2l6aW5nX2VsZW1lbnQiLCJyZXN1bHRXIiwicmVzdWx0SCIsIndoIiwicGFkZGluZyIsIl9jaGVja01lZGlhQ29tcG9uZW50IiwidXBsb2FkVXJsIiwidXBsb2FkSGVhZGVyIiwiY2FsbEJhY2siLCJlcnJvckNhbGxCYWNrIiwiZmlsZVBsdWdpbiIsIl9jYWxsQmFja1VwbG9hZCIsInRhZ05hbWVzIiwidXBsb2FkRXZlbnRIYW5kbGVyIiwiZmlsZU1hbmFnZXJQbHVnaW4iLCJpbmZvTGlzdCIsInNldEZpbGVJbmZvIiwiaW5mb1VwZGF0ZSIsImN1cnJlbnRUYWdzIiwiaW5mb0luZGV4IiwicGxndWluIiwic3RhdGUiLCJzY3JvbGxJbnRvVmlldyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksUSxzQ0N6RXBELElBQVVDLEVBQVFDLEVBQVJELEVBYVMsb0JBQVhFLE9BQXlCQSxPQUFTQyxLQWJ4QkYsRUFhOEIsU0FBVUMsRUFBUUUsR0FDL0QsTUFBTUMsRUFBUyxDQUNYOUIsS0FBTSxTQUtOK0IsSUFBSyxTQUFVQyxHQUNYLE1BQU1DLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRSCxPQUFTLENBQ2JJLEtBQU0sR0FDTkMsYUFBYSxFQUNiQyxjQUFjLEdBSWxCLElBQUlDLEVBQWFMLEVBQUtNLEtBQUtDLGNBQWMsT0FDekNGLEVBQVdHLFVBQVksOEJBRXZCLElBQUlDLEVBQWNULEVBQUtNLEtBQUtDLGNBQWMsT0FDMUNFLEVBQVlELFVBQVksaUJBQ3hCQyxFQUFZQyxNQUFNQyxRQUFVLE9BRTVCLElBQUlDLEVBQWNaLEVBQUtNLEtBQUtDLGNBQWMsT0FDMUNLLEVBQVlKLFVBQVksa0JBQ3hCSSxFQUFZRixNQUFNQyxRQUFVLE9BRTVCTixFQUFXUSxZQUFZSixHQUN2QkosRUFBV1EsWUFBWUQsR0FFdkJYLEVBQVFILE9BQU9nQixVQUFZVCxFQUMzQkosRUFBUUgsT0FBT2lCLEtBQU9OLEVBQ3RCUixFQUFRSCxPQUFPa0IsTUFBUUosRUFHdkJYLEVBQVFILE9BQU9rQixNQUFNQyxpQkFBaUIsWUFBYXJCLEtBQUtzQixvQkFBb0JqQyxLQUFLZSxJQUNqRkMsRUFBUUgsT0FBT2tCLE1BQU1DLGlCQUFpQixRQUFTckIsS0FBS3VCLGdCQUFnQmxDLEtBQUtlLElBR3pFQyxFQUFRbUIsUUFBUUMsU0FBU1IsWUFBWVIsR0FHckNBLEVBQWEsS0FBTUksRUFBYyxLQUFNRyxFQUFjLE1BUXpETSxvQkFBcUIsU0FBVUksR0FDdkIsa0JBQWtCQyxLQUFLRCxFQUFFRSxPQUFPaEIsV0FDaENaLEtBQUtLLFFBQVFILE9BQU9NLGNBQWUsRUFFbkNSLEtBQUtLLFFBQVFILE9BQU9NLGNBQWUsR0FTM0NlLGdCQUFpQixTQUFVRyxJQUNuQixRQUFRQyxLQUFLRCxFQUFFRSxPQUFPQyxhQUFhLGtCQUFvQjdCLEtBQUtLLFFBQVFILE9BQU9NLGVBQzNFUixLQUFLOEIsUUFBUTVCLE9BQU82QixNQUFNL0QsS0FBS2dDLE9BU3ZDZ0MsS0FBTSxTQUFVMUIsRUFBTTJCLEdBQ2xCLEdBQUlqQyxLQUFLa0MsVUFBVyxPQUFPLEVBQ3ZCbEMsS0FBSzhCLFFBQVE1QixPQUFPaUMsYUFDcEJuQyxLQUFLb0MsR0FBR0Msb0JBQW9CLFVBQVdyQyxLQUFLOEIsUUFBUTVCLE9BQU9pQyxZQUMzRG5DLEtBQUs4QixRQUFRNUIsT0FBT2lDLFdBQWEsTUFHckNuQyxLQUFLOEIsUUFBUTVCLE9BQU9pQyxXQUFhLFNBQVVULEdBQ2xDLEtBQUtDLEtBQUtELEVBQUVZLFVBQ2pCdEMsS0FBSzhCLFFBQVE1QixPQUFPNkIsTUFBTS9ELEtBQUtnQyxPQUNqQ1gsS0FBS1csTUFDUEEsS0FBS29DLEdBQUdmLGlCQUFpQixVQUFXckIsS0FBSzhCLFFBQVE1QixPQUFPaUMsWUFFeERuQyxLQUFLSyxRQUFRSCxPQUFPSyxZQUFjMEIsRUFFQSxTQUE5QmpDLEtBQUt1QyxRQUFRQyxhQUNieEMsS0FBS0ssUUFBUUgsT0FBT2dCLFVBQVVKLE1BQU0yQixTQUFXLFFBRS9DekMsS0FBS0ssUUFBUUgsT0FBT2dCLFVBQVVKLE1BQU0yQixTQUFXLFdBR25EekMsS0FBS0ssUUFBUUgsT0FBT0ksS0FBT0EsRUFDM0JOLEtBQUtrQyxVQUFZbEMsS0FBS0ssUUFBUUMsR0FBTWMsTUFDcEMsTUFBTXNCLEVBQWUxQyxLQUFLSyxRQUFRQyxHQUFNb0MsYUFFSCxtQkFBMUIxQyxLQUFLOEIsUUFBUXhCLEdBQU1xQyxJQUFtQjNDLEtBQUs4QixRQUFReEIsR0FBTXFDLEdBQUczRSxLQUFLZ0MsS0FBTWlDLEdBRWxGakMsS0FBS0ssUUFBUUgsT0FBT2dCLFVBQVVKLE1BQU1DLFFBQVUsUUFDOUNmLEtBQUtLLFFBQVFILE9BQU9pQixLQUFLTCxNQUFNQyxRQUFVLFFBQ3pDZixLQUFLSyxRQUFRSCxPQUFPa0IsTUFBTU4sTUFBTUMsUUFBVSxRQUMxQ2YsS0FBS2tDLFVBQVVwQixNQUFNQyxRQUFVLFFBRTNCMkIsR0FBY0EsRUFBYUUsU0FHbkNULFdBQVksS0FNWkosTUFBTyxXQUNDL0IsS0FBSzhCLFFBQVE1QixPQUFPaUMsYUFDcEJuQyxLQUFLb0MsR0FBR0Msb0JBQW9CLFVBQVdyQyxLQUFLOEIsUUFBUTVCLE9BQU9pQyxZQUMzRG5DLEtBQUs4QixRQUFRNUIsT0FBT2lDLFdBQWEsTUFHckMsTUFBTTdCLEVBQU9OLEtBQUtLLFFBQVFILE9BQU9JLEtBQ2pDTixLQUFLa0MsVUFBVXBCLE1BQU1DLFFBQVUsT0FDL0JmLEtBQUtLLFFBQVFILE9BQU9pQixLQUFLTCxNQUFNQyxRQUFVLE9BQ3pDZixLQUFLSyxRQUFRSCxPQUFPZ0IsVUFBVUosTUFBTUMsUUFBVSxPQUM5Q2YsS0FBS0ssUUFBUUgsT0FBT0ssYUFBYyxFQUNLLG1CQUE1QlAsS0FBSzhCLFFBQVF4QixHQUFNdUMsTUFBcUI3QyxLQUFLOEIsUUFBUXhCLEdBQU11QyxLQUFLN0UsS0FBS2dDLE1BQ2hGQSxLQUFLSyxRQUFRSCxPQUFPSSxLQUFPLEdBQzNCTixLQUFLa0MsVUFBWSxLQUNqQmxDLEtBQUs0QyxVQXNCYixZQWxCd0IsSUFBYjNDLElBQ0ZGLEVBQU8rQyxtQkFDUnZFLE9BQU9DLGVBQWV1QixFQUFRLG9CQUFxQixDQUMvQ3RCLFlBQVksRUFDWnNFLFVBQVUsRUFDVkMsY0FBYyxFQUNkbEUsTUFBTyxLQUlmUCxPQUFPQyxlQUFldUIsRUFBTytDLGtCQUFtQixTQUFVLENBQ3REckUsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPb0IsS0FJUkEsR0FuS3FELGlCQUFuQnRDLEVBQU9ELFFBQzVDQyxFQUFPRCxRQUFVa0MsRUFBT29ELFNBQ3BCbkQsRUFBUUQsR0FBUSxHQUNoQixTQUFVcUQsR0FDTixJQUFLQSxFQUFFRCxTQUNILE1BQU0sSUFBSUUsTUFBTSw4Q0FFcEIsT0FBT3JELEVBQVFvRCxJQUd2QnBELEVBQVFELEksMkRDWGYsSUFBVUEsRUFBUUMsRUFBUkQsRUFhUyxvQkFBWEUsT0FBeUJBLE9BQVNDLEtBYnhCRixFQWE4QixTQUFVQyxFQUFRRSxHQUMvRCxNQUFNbUQsRUFBYyxDQUNoQmhGLEtBQU0sY0FDTmlGLFNBQVUsS0FDVkMsU0FBVSxLQU1WbkQsSUFBSyxTQUFVQyxHQUNYLE1BQU1DLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRK0MsWUFBYyxDQUNsQjVDLGNBQWMsRUFDZCtDLEtBQU0sS0FDTkMsT0FBUSxLQUNSQyxRQUFTLEtBQ1RDLEtBQU0sS0FDTkMsS0FBTSxLQUNOQyxZQUFhLEtBQ2JDLE1BQU8sR0FDUEMsYUFBYyxHQUNkQyxnQkFBaUIsS0FDakJDLGNBQWUsR0FDZkMsV0FBWSxHQUloQixJQUFJQyxFQUFjOUQsRUFBS00sS0FBS0MsY0FBYyxPQUMxQ3VELEVBQVl0RCxVQUFZLG9DQUV4QixJQUFJTyxFQUFPZixFQUFLTSxLQUFLQyxjQUFjLE9BQ25DUSxFQUFLUCxVQUFZLHVCQUVqQixJQUFJdUQsRUFBVS9ELEVBQUtNLEtBQUtDLGNBQWMsT0FDdEN3RCxFQUFRdkQsVUFBWSx3QkFDcEJ1RCxFQUFRQyxVQUFZcEUsS0FBS3FFLFlBQVlqRSxHQUVyQzhELEVBQVlqRCxZQUFZRSxHQUN4QitDLEVBQVlqRCxZQUFZa0QsR0FDeEJuRSxLQUFLc0QsU0FBV1ksRUFBWUksY0FBYyxtQkFFMUNqRSxFQUFRK0MsWUFBWUcsS0FBT1csRUFDM0I3RCxFQUFRK0MsWUFBWUksT0FBU1csRUFBUUcsY0FBYywyQkFDbkRqRSxFQUFRK0MsWUFBWW1CLFVBQVlKLEVBQVFHLGNBQWMsMEJBQ3REakUsRUFBUStDLFlBQVlLLFFBQVVVLEVBQVFHLGNBQWMseUJBQ3BEakUsRUFBUStDLFlBQVlNLEtBQU9TLEVBQVFHLGNBQWMseUJBQ2pEakUsRUFBUStDLFlBQVlPLEtBQU9RLEVBQVFHLGNBQWMseUJBR2pEakUsRUFBUStDLFlBQVlLLFFBQVFwQyxpQkFBaUIsUUFBU3JCLEtBQUt3RSxXQUFXbkYsS0FBS2UsSUFDM0VDLEVBQVErQyxZQUFZTyxLQUFLdEMsaUJBQWlCLFFBQVNyQixLQUFLeUUsWUFBWXBGLEtBQUtlLElBQ3pFK0QsRUFBUTlDLGlCQUFpQixZQUFhckIsS0FBSzBFLHFCQUFxQnJGLEtBQUtlLElBQ3JFK0QsRUFBUTlDLGlCQUFpQixRQUFTckIsS0FBSzJFLGlCQUFpQnRGLEtBQUtlLElBRzdEQyxFQUFRbUIsUUFBUUMsU0FBU1IsWUFBWWlELEdBR3JDQSxFQUFjLEtBQU0vQyxFQUFPLEtBQU1nRCxFQUFVLE1BRy9DRSxZQUFhLFNBQVVqRSxHQUNuQixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUVsQixNQUFPLGlMQUUrR0EsRUFBS0MsVUFBVTlDLE1BQVEsaUJBQW1CNkMsRUFBS0MsVUFBVTlDLE1BQVEsS0FDM0szQixFQUFLMEUsTUFBTUMsT0FIaEIscVJBb0JYTCxxQkFBc0IsU0FBVWhELEdBQ3hCLHdCQUF3QkMsS0FBS0QsRUFBRUUsT0FBT2hCLFdBQ3RDWixLQUFLSyxRQUFRK0MsWUFBWTVDLGNBQWUsRUFFeENSLEtBQUtLLFFBQVErQyxZQUFZNUMsY0FBZSxHQVNoRG1FLGlCQUFrQixTQUFVakQsR0FDeEJBLEVBQUVzRCxtQkFFRSxRQUFRckQsS0FBS0QsRUFBRUUsT0FBT0MsYUFBYSxrQkFBb0I3QixLQUFLSyxRQUFRK0MsWUFBWTVDLGVBQ2hGUixLQUFLOEIsUUFBUXNCLFlBQVlyQixNQUFNL0QsS0FBS2dDLE9BUzVDZ0MsS0FBTSxTQUFVaUQsRUFBWWxCLEdBQ3BCL0QsS0FBSzhCLFFBQVFzQixZQUFZakIsYUFDekJuQyxLQUFLb0MsR0FBR0Msb0JBQW9CLFVBQVdyQyxLQUFLOEIsUUFBUXNCLFlBQVlqQixZQUNoRW5DLEtBQUs4QixRQUFRc0IsWUFBWWpCLFdBQWEsTUFHMUNuQyxLQUFLOEIsUUFBUXNCLFlBQVlqQixXQUFhLFNBQVVULEdBQ3ZDLEtBQUtDLEtBQUtELEVBQUVZLFVBQ2pCdEMsS0FBSzhCLFFBQVFzQixZQUFZckIsTUFBTS9ELEtBQUtnQyxPQUN0Q1gsS0FBS1csTUFDUEEsS0FBS29DLEdBQUdmLGlCQUFpQixVQUFXckIsS0FBSzhCLFFBQVFzQixZQUFZakIsWUFFN0QsTUFBTStDLEVBQXFCbEYsS0FBS0ssUUFBUStDLFlBQ3hDOEIsRUFBbUJsQixjQUFnQmlCLEVBQ25DQyxFQUFtQm5CLGdCQUFrQkEsRUFFckMsTUFBTW9CLEVBQWdCbkYsS0FBS0ssUUFBUTRFLEdBQzdCRyxFQUFnQkQsRUFBY0UsVUFDL0JyRixLQUFLVSxLQUFLNEUsU0FBU0osRUFBbUJ2QixLQUFNeUIsS0FDN0NGLEVBQW1CdkIsS0FBSy9DLFVBQVksd0JBQTBCd0UsR0FHaEMsU0FBOUJwRixLQUFLdUMsUUFBUUMsYUFDYjBDLEVBQW1CM0IsS0FBS3pDLE1BQU0yQixTQUFXLFFBRXpDeUMsRUFBbUIzQixLQUFLekMsTUFBTTJCLFNBQVcsV0FHN0N5QyxFQUFtQlgsVUFBVWdCLFlBQWNKLEVBQWNLLE1BQ3pETixFQUFtQjNCLEtBQUt6QyxNQUFNQyxRQUFVLFFBRXhDZixLQUFLOEIsUUFBUXNCLFlBQVlxQyxjQUFjekgsS0FBS2dDLEtBQU1BLEtBQUtLLFFBQVE0RSxHQUFZUyxJQUFLMUYsS0FBS0ssUUFBUTRFLEdBQVl6QixTQUc3R3JCLFdBQVksS0FNWkosTUFBTyxXQUNILE1BQU00RCxFQUFvQjNGLEtBQUs4QixRQUFRc0IsWUFFbkN1QyxFQUFrQnRDLFVBQ2xCc0MsRUFBa0J0QyxTQUFTdUMsUUFHM0JELEVBQWtCeEQsYUFDbEJuQyxLQUFLb0MsR0FBR0Msb0JBQW9CLFVBQVdzRCxFQUFrQnhELFlBQ3pEd0QsRUFBa0J4RCxXQUFhLE1BR25DLE1BQU0rQyxFQUFxQmxGLEtBQUtLLFFBQVErQyxZQUN4QzhCLEVBQW1CM0IsS0FBS3pDLE1BQU1DLFFBQVUsT0FDeENtRSxFQUFtQm5CLGdCQUFrQixLQUNyQ21CLEVBQW1CcEIsYUFBZSxHQUNsQ29CLEVBQW1CckIsTUFBUSxHQUMzQnFCLEVBQW1CdkIsS0FBS1MsVUFBWWMsRUFBbUJ6QixRQUFRVyxVQUFZYyxFQUFtQlgsVUFBVWdCLFlBQWMsR0FFbkQsbUJBQXhEdkYsS0FBSzhCLFFBQVFvRCxFQUFtQmxCLGVBQWVuQixNQUFxQjdDLEtBQUs4QixRQUFRb0QsRUFBbUJsQixlQUFlbkIsS0FBSzdFLEtBQUtnQyxNQUN4SWtGLEVBQW1CbEIsY0FBZ0IsSUFNdkM2QixtQkFBb0IsV0FDaEI3RixLQUFLc0QsU0FBU3hDLE1BQU1DLFFBQVUsU0FNbEMrRSxvQkFBcUIsV0FDakI5RixLQUFLc0QsU0FBU3hDLE1BQU1DLFFBQVUsUUFHbEMwRSxjQUFlLFNBQVVDLEVBQUtLLEdBQzFCLE1BQU1KLEVBQW9CM0YsS0FBSzhCLFFBQVFzQixZQUVqQzRDLEVBQVVMLEVBQWtCdEMsU0FBV3JELEtBQUtVLEtBQUt1RixvQkFHdkQsR0FGQUQsRUFBUUUsbUJBQXFCUCxFQUFrQlEsYUFBYTlHLEtBQUtXLEtBQU1nRyxHQUN2RUEsRUFBUWhFLEtBQUssTUFBTzBELEdBQUssR0FDSixPQUFsQkssR0FBbUQsaUJBQWxCQSxHQUE4Qi9GLEtBQUtvRyxHQUFHN0gsT0FBTzhILEtBQUtOLEdBQWVPLE9BQVMsRUFDMUcsSUFBSSxJQUFJbEgsS0FBTzJHLEVBQ1hDLEVBQVFPLGlCQUFpQm5ILEVBQUsyRyxFQUFjM0csSUFHcEQ0RyxFQUFRUSxLQUFLLE1BRWJ4RyxLQUFLOEIsUUFBUXNCLFlBQVl5QyxzQkFHN0JNLGFBQWMsU0FBVUgsR0FDcEIsR0FBMkIsSUFBdkJBLEVBQVFTLFdBRVIsR0FEQXpHLEtBQUs4QixRQUFRc0IsWUFBWUMsU0FBVyxLQUNiLE1BQW5CMkMsRUFBUVUsT0FDUixJQUNJLE1BQU1DLEVBQU1DLEtBQUtDLE1BQU1iLEVBQVFjLGNBQzNCSCxFQUFJSSxPQUFPVCxPQUFTLEVBQ3BCdEcsS0FBSzhCLFFBQVFzQixZQUFZNEQsY0FBY2hKLEtBQUtnQyxLQUFNMkcsRUFBSUksUUFBUSxHQUN2REosRUFBSU0sY0FDWGpILEtBQUtLLFFBQVErQyxZQUFZTyxLQUFLUyxVQUFZdUMsRUFBSU0sYUFFcEQsTUFBT3ZGLEdBQ0wsTUFBTXlCLE1BQU0sa0RBQW9EekIsRUFBRXdGLFFBQVUsS0FDOUUsUUFDRWxILEtBQUs4QixRQUFRc0IsWUFBWTBDLHNCQUN6QjlGLEtBQUtLLFFBQVErQyxZQUFZTSxLQUFLNUMsTUFBTXFHLFVBQWFuSCxLQUFLb0csR0FBR2dCLFlBQWNwSCxLQUFLSyxRQUFRK0MsWUFBWUksT0FBTzZELGFBQWUsR0FBTSxVQUloSSxHQURBckgsS0FBSzhCLFFBQVFzQixZQUFZMEMsc0JBQ0YsSUFBbkJFLEVBQVFVLE9BQWMsQ0FDdEIsTUFBTUMsRUFBT1gsRUFBUWMsYUFBeUJGLEtBQUtDLE1BQU1iLEVBQVFjLGNBQTdCZCxFQUM5QnNCLEVBQU0sdURBQXlEdEIsRUFBUVUsT0FBUyxnQkFBa0JDLEVBQUlZLGNBQWdCdkIsRUFBUWMsY0FDcEksTUFBTTNELE1BQU1tRSxLQU01Qk4sY0FBZSxTQUFVbkQsRUFBTzVCLEdBQzVCLE1BQU1pRCxFQUFxQmxGLEtBQUtLLFFBQVErQyxZQUNsQytCLEVBQWdCbkYsS0FBS0ssUUFBUTZFLEVBQW1CbEIsZUFFaER3RCxFQUFRLEdBQ1JDLEVBQU01RCxFQUFNeUMsT0FDWnJDLEVBQWFrQixFQUFjbEIsWUFBY2lCLEVBQW1CakIsV0FDNUR5RCxFQUFZekQsR0FBYyxFQUFJLEVBQUswRCxLQUFLQyxNQUFNSCxFQUFJeEQsSUFBZSxFQUNqRTRELEVBQWtCMUMsRUFBYzJDLG9CQUV0QyxJQUFJQyxFQUFXLEdBQ1hDLEVBQVcsb0NBQ1hDLEVBQVUsRUFDZCxJQUFLLElBQVdDLEVBQU1DLEVBQWJ0SyxFQUFJLEVBQWVBLEVBQUk0SixFQUFLNUosSUFXakMsR0FWQXFLLEVBQU9yRSxFQUFNaEcsR0FDYnNLLEVBQVFELEVBQUtFLElBQStCLGlCQUFiRixFQUFLRSxJQUFtQkYsRUFBS0UsSUFBSUMsTUFBTSxLQUFPSCxFQUFLRSxJQUEvRCxHQUNuQkQsRUFBT0QsRUFBS0UsSUFBTUQsRUFBS0csS0FBSSxTQUFVQyxHQUFLLE9BQU9BLEVBQUVDLFVBQ25EUixHQUFZSCxFQUFnQkssSUFFdkJySyxFQUFJLEdBQUs2SixHQUFjLEdBQUtPLEVBQVVoRSxHQUFlcEcsRUFBSSxFQUFLNEosSUFDL0RRLElBQ0FELEdBQVksMkNBR1ovRixHQUFVa0csRUFBSzdCLE9BQVMsRUFDeEIsSUFBSyxJQUErQjhCLEVBQTNCckosRUFBSSxFQUFHMEosRUFBT04sRUFBSzdCLE9BQWF2SCxFQUFJMEosRUFBTTFKLElBQy9DcUosRUFBTUQsRUFBS3BKLEdBQ1BxSixJQUErQixJQUF4QlosRUFBTWtCLFFBQVFOLEtBQ3JCWixFQUFNbUIsS0FBS1AsR0FDWEwsR0FBWSxhQUFlSyxFQUFNLGlCQUFtQkEsRUFBTSxLQUFPQSxFQUFNLFFBS3ZGSixHQUFZLFNBRVo5QyxFQUFtQnZCLEtBQUtTLFVBQVk0RCxFQUVoQy9GLElBQ0FpRCxFQUFtQnJCLE1BQVFBLEVBQzNCcUIsRUFBbUJ6QixRQUFRVyxVQUFZMkQsRUFDdkM3QyxFQUFtQnRCLFlBQWNzQixFQUFtQnpCLFFBQVFtRixpQkFBaUIsT0FJckZwRSxXQUFZLFNBQVU5QyxHQUNsQixNQUFNRSxFQUFTRixFQUFFRSxPQUNqQixJQUFLNUIsS0FBS1UsS0FBS21JLFNBQVNqSCxHQUFTLE9BRWpDLE1BQU1rSCxFQUFVbEgsRUFBTzJELFlBQ2pCSSxFQUFvQjNGLEtBQUs4QixRQUFRc0IsWUFDakM4QixFQUFxQmxGLEtBQUtLLFFBQVErQyxZQUVsQzJGLEVBQVk3RCxFQUFtQnpCLFFBQVFhLGNBQWMsWUFBY3dFLEVBQVUsTUFDN0VoRixFQUFlb0IsRUFBbUJwQixhQUNsQ2tGLEVBQVlsRixFQUFhNEUsUUFBUUksR0FFbkNFLEdBQWEsR0FDYmxGLEVBQWFtRixPQUFPRCxFQUFXLEdBQy9CaEosS0FBS1UsS0FBS3dJLFlBQVlILEVBQVcsUUFFakNqRixFQUFhNkUsS0FBS0csR0FDbEI5SSxLQUFLVSxLQUFLeUksU0FBU0osRUFBVyxPQUdsQ3BELEVBQWtCcUIsY0FBY2hKLEtBQUtnQyxLQUNULElBQXhCOEQsRUFBYXdDLE9BQ2JwQixFQUFtQnJCLE1BQ25CcUIsRUFBbUJyQixNQUFNdUYsUUFBTyxTQUFVbEIsR0FDdEMsT0FBT0EsRUFBS0UsSUFBSWlCLE1BQUssU0FBVWpCLEdBQzNCLE9BQU90RSxFQUFhNEUsUUFBUU4sSUFBUSxTQUV4QyxJQUdaM0QsWUFBYSxTQUFVL0MsR0FDbkJBLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFFRixNQUFNRSxFQUFxQmxGLEtBQUtLLFFBQVErQyxZQUNsQ21HLEVBQVNyRSxFQUFtQnZCLEtBQ2xDLElBQUkvQixFQUFTRixFQUFFRSxPQUNYNEgsRUFBVSxLQUVkLEdBQUk1SCxJQUFXMkgsRUFBZixDQUVBLEtBQU9BLElBQVczSCxFQUFPNkgsYUFDckJELEVBQVU1SCxFQUFPQyxhQUFhLGlCQUMxQjJILElBQ0o1SCxFQUFTQSxFQUFPNkgsV0FHZkQsS0FFWXRFLEVBQW1CbkIsaUJBQW1CL0QsS0FBS0ssUUFBUTZFLEVBQW1CbEIsZUFBZUQsaUJBQzlGbkMsRUFBUUEsRUFBTzZILFdBQVduRixjQUFjLG1CQUFtQmlCLGFBQ25FdkYsS0FBSzhCLFFBQVFzQixZQUFZckIsTUFBTS9ELEtBQUtnQyxVQXNCNUMsWUFsQndCLElBQWJDLElBQ0ZGLEVBQU8rQyxtQkFDUnZFLE9BQU9DLGVBQWV1QixFQUFRLG9CQUFxQixDQUMvQ3RCLFlBQVksRUFDWnNFLFVBQVUsRUFDVkMsY0FBYyxFQUNkbEUsTUFBTyxLQUlmUCxPQUFPQyxlQUFldUIsRUFBTytDLGtCQUFtQixjQUFlLENBQzNEckUsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPc0UsS0FJUkEsR0ExV3FELGlCQUFuQnhGLEVBQU9ELFFBQzVDQyxFQUFPRCxRQUFVa0MsRUFBT29ELFNBQ3BCbkQsRUFBUUQsR0FBUSxHQUNoQixTQUFVcUQsR0FDTixJQUFLQSxFQUFFRCxTQUNILE1BQU0sSUFBSUUsTUFBTSw4Q0FFcEIsT0FBT3JELEVBQVFvRCxJQUd2QnBELEVBQVFELEk7WUNoQmhCLFNBQVM2SixFQUFnQkMsR0FDdkIsYUFFQSxJQUFJQyxFQUFpQixDQUNuQkMsd0JBQXlCLENBQ3ZCQyxjQUFjLEVBQ2RDLFNBQVUsd0RBQ1ZDLEtBQU0sV0FFUkMsV0FBWSxDQUNWSCxjQUFjLEVBQ2RDLFNBQVUsa0NBQ1ZDLEtBQU0sV0FFUkUsZUFBZ0IsQ0FDZEosY0FBYyxFQUNkQyxTQUFVLDRKQUNWQyxLQUFNLFVBRVJHLGtCQUFtQixDQUNqQkwsY0FBYyxFQUNkQyxTQUFVLHVLQUNWQyxLQUFNLFdBRVJJLHFCQUFzQixDQUNwQk4sY0FBYyxFQUNkQyxTQUFVLG9JQUNWQyxLQUFNLFdBRVJLLFlBQWEsQ0FDWFAsY0FBYyxFQUNkQyxTQUFVLDJKQUNWQyxLQUFNLFdBRVJNLGlCQUFrQixDQUNoQlIsY0FBYyxFQUNkQyxTQUFVLGdDQUNWQyxLQUFNLFdBRVJPLG1CQUFvQixDQUNsQlQsY0FBYyxFQUNkQyxTQUFVLHNDQUNWQyxLQUFNLFdBRVJRLG1CQUFvQixDQUNsQlYsY0FBYyxFQUNkQyxTQUFVLGlDQUNWQyxLQUFNLFdBRVJTLG1DQUFvQyxDQUNsQ1gsY0FBYyxFQUNkQyxTQUFVLHNFQUNWQyxLQUFNLFdBRVJVLDBCQUEyQixDQUN6QlosY0FBYyxFQUNkQyxTQUFVLG1EQUNWQyxLQUFNLFdBRVJXLHdCQUF5QixDQUN2QmIsY0FBYyxFQUNkQyxTQUFVLCtDQUNWQyxLQUFNLFdBRVJZLGNBQWUsQ0FDYmQsY0FBYyxFQUNkQyxTQUFVLG9DQUNWQyxLQUFNLFdBRVJhLE9BQVEsQ0FDTmYsY0FBYyxFQUNkQyxTQUFVLDZCQUNWQyxLQUFNLFdBRVJjLGVBQWdCLENBQ2RoQixjQUFjLEVBQ2RDLFNBQVUsNkJBQ1ZDLEtBQU0sV0FFUmUsYUFBYyxDQUNaakIsY0FBYyxFQUNkQyxTQUFVLDZDQUNWQyxLQUFNLFdBRVJnQixVQUFXLENBQ1RsQixjQUFjLEVBQ2RDLFNBQVUsbUNBQ1ZDLEtBQU0sV0FFUmlCLGtCQUFtQixDQUNqQm5CLGNBQWMsRUFDZEMsU0FBVSxrRUFDVkMsS0FBTSxXQUVSa0Isb0JBQXFCLENBQ25CcEIsY0FBYyxFQUNkQyxTQUFVLGtEQUNWQyxLQUFNLFdBRVJtQixxQ0FBc0MsQ0FDcENyQixjQUFjLEVBQ2RDLFNBQVUsb0VBQ1ZDLEtBQU0sV0FFUm9CLGlCQUFrQixDQUNoQnRCLGNBQWMsRUFDZEMsU0FBVSxnREFDVkMsS0FBTSxXQUVScUIsOEJBQStCLENBQzdCdkIsY0FBYyxFQUNkQyxTQUFVLDZFQUNWQyxLQUFNLFdBRVJzQixXQUFZLENBQ1Z4QixjQUFjLEVBQ2RDLFNBQVUsMkJBQ1ZDLEtBQU0sV0FFUnVCLGVBQWdCLENBQ2R6QixhQUFjLHlCQUNkQyxTQUFVLHlGQUNWQyxLQUFNLFVBRVJ3QixhQUFjLENBQ1oxQixjQUFjLEVBQ2RDLFNBQVUsMElBQ1ZDLEtBQU0sV0FFUnlCLHFCQUFzQixDQUNwQjNCLGNBQWMsRUFDZEMsU0FBVSxnQ0FDVkMsS0FBTSxXQUVSMEIseUJBQTBCLENBQ3hCNUIsY0FBYyxFQUNkQyxTQUFVLG9EQUNWQyxLQUFNLFdBRVIyQixNQUFPLENBQ0w3QixjQUFjLEVBQ2RDLFNBQVUsc0RBQ1ZDLEtBQU0sV0FFUjRCLFVBQVcsQ0FDVDlCLGNBQWMsRUFDZEMsU0FBVSxnTEFDVkMsS0FBTSxXQUVSNkIsU0FBVSxDQUNSL0IsY0FBYyxFQUNkQyxTQUFVLDBEQUNWQyxLQUFNLFdBRVI4QixxQkFBc0IsQ0FDcEJoQyxjQUFjLEVBQ2RDLFNBQVUsbUZBQ1ZDLEtBQU0sV0FFUitCLFNBQVUsQ0FDUmpDLGNBQWMsRUFDZEMsU0FBVSxnSUFDVkMsS0FBTSxXQUVSZ0MseUJBQTBCLENBQ3hCbEMsY0FBYyxFQUNkQyxTQUFVLG1DQUNWQyxLQUFNLFlBR1YsSUFBZSxJQUFYTCxFQUNGLE9BQU8vQyxLQUFLQyxNQUFNRCxLQUFLcUYsVUFBVXJDLElBRW5DLElBQUlzQyxFQUFNLEdBQ1YsSUFBSyxJQUFJQyxLQUFPdkMsRUFDVkEsRUFBZWxLLGVBQWV5TSxLQUNoQ0QsRUFBSUMsR0FBT3ZDLEVBQWV1QyxHQUFLckMsY0FHbkMsT0FBT29DLEVDbExULElBQUlFLEVBQVcsR0FDWEMsRUFBVSxHQUNWQyxFQUFhLEdBQ2JDLEVBQWdCN0MsR0FBZSxHQUMvQjhDLEVBQVksVUFDWkMsRUFBUyxDQUNQQyxPQUFRLENBQ043Qyx5QkFBc0MsRUFDdENXLG9CQUFzQyxFQUN0Q0Msb0NBQXNDLEVBQ3RDQywyQkFBc0MsRUFDdENFLGVBQXNDLEVBQ3RDQyxRQUFzQyxFQUN0Q0MsZ0JBQXNDLEVBQ3RDQyxjQUFzQyxFQUN0Q0MsV0FBc0MsRUFDdENHLHNDQUFzQyxFQUN0Q0Msa0JBQXNDLEVBQ3RDQywrQkFBc0MsRUFDdENqQixzQkFBc0MsRUFDdENrQixZQUFzQyxFQUN0Q0ksMEJBQXNDLEVBQ3RDQyxPQUFzQyxFQUN0Q0ssMEJBQXNDLEdBRXhDVyxTQUFVLENBQ1IxQyxZQUFzQyxFQUN0Q2MsY0FBc0MsR0FFeEM2QixNQUFPLENBQ0wvQyx5QkFBc0MsRUFDdENVLG9CQUFzQyxFQUN0Q0Msb0JBQXNDLEVBQ3RDQyxvQ0FBc0MsRUFDdENDLDJCQUFzQyxFQUN0Q0UsZUFBc0MsRUFDdENDLFFBQXNDLEVBQ3RDQyxnQkFBc0MsRUFDdENDLGNBQXNDLEVBQ3RDQyxXQUFzQyxFQUN0Q0MsbUJBQXNDLEVBQ3RDRyxrQkFBc0MsRUFDdENDLCtCQUFzQyxFQUN0Q0MsWUFBc0MsRUFDdENFLGNBQXNDLEdBRXhDcUIsUUFBU25ELEdBQWUsR0FDeEJvRCxNRHNJTixXQUNFLGFBQ0EsSUFBSXZLLEVBQVVtSCxHQUFlLEdBQ3pCd0MsRUFBTSxHQUNWLElBQUssSUFBSUMsS0FBTzVKLEVBQ1ZBLEVBQVE3QyxlQUFleU0sS0FDekJELEVBQUlDLElBQU8sR0FHZixPQUFPRCxFQy9JSWEsSUFtTmIsU0FBU0MsRUFBVUMsRUFBVzdPLEdBQzVCLGFBRUEsSUFBSThPLEVBQVU5TyxFQUFRLFlBQWNBLEVBQU8sZUFBaUIsNkJBQ3hEOE4sRUFBTSxDQUNKaUIsT0FBTyxFQUNQQyxNQUFPLElBR1JoQixFQUFTaUIsT0FBT0MsUUFBUUwsS0FDM0JBLEVBQVksQ0FBQ0EsSUFHZixJQUFLLElBQUlwUCxFQUFJLEVBQUdBLEVBQUlvUCxFQUFVM0csU0FBVXpJLEVBQUcsQ0FDekMsSUFBSTBQLEVBQVVMLEVBQVMsa0JBQW9CclAsRUFBSSxLQUMzQzJQLEVBQU1QLEVBQVVwUCxHQUNwQixHQUFtQixpQkFBUjJQLEVBR1QsT0FGQXRCLEVBQUlpQixPQUFRLEVBQ1pqQixFQUFJa0IsTUFBUUcsRUFBVSxpQ0FBbUNDLEVBQU0sU0FDeER0QixFQUdULElBQUtFLEVBQVNpQixPQUFPSSxTQUFTRCxFQUFJeEQsTUFHaEMsT0FGQWtDLEVBQUlpQixPQUFRLEVBQ1pqQixFQUFJa0IsTUFBUUcsRUFBVSxnREFBa0RDLEVBQUl4RCxLQUFPLFNBQzVFa0MsRUFHVCxJQUFJbEMsRUFBT3dELEVBQUl4RCxLQUFPd0QsRUFBSXhELEtBQUswRCxjQVcvQixHQVJhLGFBQVQxRCxJQUNGQSxFQUFPd0QsRUFBSXhELEtBQU8sUUFHUCxTQUFUQSxJQUNGQSxFQUFPd0QsRUFBSXhELEtBQU8sVUFHUCxTQUFUQSxHQUE0QixXQUFUQSxHQUE4QixhQUFUQSxFQUcxQyxPQUZBa0MsRUFBSWlCLE9BQVEsRUFDWmpCLEVBQUlrQixNQUFRRyxFQUFVLFFBQVV2RCxFQUFPLGlGQUNoQ2tDLEVBR1QsR0FBYSxhQUFUbEMsR0FDRixHQUFJb0MsRUFBU2lCLE9BQU9NLFlBQVlILEVBQUlJLFdBR2xDLE9BRkExQixFQUFJaUIsT0FBUSxFQUNaakIsRUFBSWtCLE1BQVFHLEVBQVUsMEVBQ2ZyQixPQUdULEdBQUlFLEVBQVNpQixPQUFPTSxZQUFZSCxFQUFJcEUsU0FBV2dELEVBQVNpQixPQUFPTSxZQUFZSCxFQUFJSyxPQUc3RSxPQUZBM0IsRUFBSWlCLE9BQVEsRUFDWmpCLEVBQUlrQixNQUFRRyxFQUFVdkQsRUFBTyx5RUFDdEJrQyxFQUlYLEdBQUlzQixFQUFJSSxVQUFXLENBQ2pCLEdBQTZCLGlCQUFsQkosRUFBSUksVUFHYixPQUZBMUIsRUFBSWlCLE9BQVEsRUFDWmpCLEVBQUlrQixNQUFRRyxFQUFVLHFEQUF1REMsRUFBSUksVUFBWSxTQUN0RjFCLEVBRVQsSUFBSyxJQUFJNEIsS0FBTU4sRUFBSUksVUFDakIsR0FBSUosRUFBSUksVUFBVWxPLGVBQWVvTyxJQUNFLG1CQUF0Qk4sRUFBSUksVUFBVUUsR0FJdkIsT0FIQTVCLEVBQUlpQixPQUFRLEVBQ1pqQixFQUFJa0IsTUFBUUcsRUFBVSwrRUFBaUZPLEVBQ3JHLGtDQUFvQ04sRUFBSUksVUFBVUUsR0FBTSxTQUNuRDVCLEVBTWYsR0FBSXNCLEVBQUlwRSxRQUNOLEdBQTBCLG1CQUFmb0UsRUFBSXBFLE9BR2IsT0FGQThDLEVBQUlpQixPQUFRLEVBQ1pqQixFQUFJa0IsTUFBUUcsRUFBVSwyQ0FBNkNDLEVBQUlwRSxPQUFTLFNBQ3pFOEMsT0FFSixHQUFJc0IsRUFBSUssTUFBTyxDQUlwQixHQUhJekIsRUFBU2lCLE9BQU9JLFNBQVNELEVBQUlLLFNBQy9CTCxFQUFJSyxNQUFRLElBQUlFLE9BQU9QLEVBQUlLLE1BQU8sUUFFOUJMLEVBQUlLLGlCQUFpQkUsUUFHekIsT0FGQTdCLEVBQUlpQixPQUFRLEVBQ1pqQixFQUFJa0IsTUFBUUcsRUFBVSwyRUFBNkVDLEVBQUlLLE1BQVEsU0FDeEczQixFQUVULEdBQUlFLEVBQVNpQixPQUFPTSxZQUFZSCxFQUFJUSxTQUdsQyxPQUZBOUIsRUFBSWlCLE9BQVEsRUFDWmpCLEVBQUlrQixNQUFRRyxFQUFVLGlFQUNmckIsR0FJYixPQUFPQSxFQ25RVCxTQUFTK0IsRUFBMEJDLEVBQVlDLEdBQzdDLGFBRUEsTUFBTyxLQURnQkEsRUFBR0MsV0FBVyxHQUNKLElEL0NuQ2hDLEVBQVNpQixPQUFTLEdBTWxCakIsRUFBU0UsV0FBYSxHQVN0QkYsRUFBU2lDLFVBQVksU0FBVWpQLEVBQUtOLEdBQ2xDLGFBRUEsT0FEQXlOLEVBQWNuTixHQUFPTixFQUNka0IsTUFTVG9NLEVBQVNrQyxVQUFZLFNBQVVsUCxHQUM3QixhQUNBLE9BQU9tTixFQUFjbk4sSUFRdkJnTixFQUFTbUMsV0FBYSxXQUNwQixhQUNBLE9BQU9oQyxHQU9USCxFQUFTb0MsYUFBZSxXQUN0QixhQUNBakMsRUFBZ0I3QyxHQUFlLElBT2pDMEMsRUFBU0ksVUFBWSxTQUFVcE8sR0FDN0IsYUFDQSxJQUFLcU8sRUFBTy9NLGVBQWV0QixHQUN6QixNQUFNK0UsTUFBTS9FLEVBQU8seUJBRXJCZ08sRUFBU29DLGVBQ1QsSUFBSUMsRUFBU2hDLEVBQU9yTyxHQUVwQixJQUFLLElBQUlzUSxLQURUbEMsRUFBWXBPLEVBQ09xUSxFQUNiQSxFQUFPL08sZUFBZWdQLEtBQ3hCbkMsRUFBY21DLEdBQVVELEVBQU9DLEtBU3JDdEMsRUFBU3VDLFVBQVksV0FDbkIsYUFDQSxPQUFPbkMsR0FRVEosRUFBU3dDLGlCQUFtQixTQUFVeFEsR0FDcEMsYUFDQSxHQUFJcU8sRUFBTy9NLGVBQWV0QixHQUN4QixPQUFPcU8sRUFBT3JPLElBVWxCZ08sRUFBU3lDLGtCQUFvQixTQUFVbEYsR0FDckMsYUFDQSxPQUFPRCxFQUFlQyxJQWF4QnlDLEVBQVMwQyxVQUFZLFNBQVUxUSxFQUFNMlEsR0FDbkMsYUFDQSxHQUFJM0MsRUFBU2lCLE9BQU9JLFNBQVNyUCxHQUFPLENBQ2xDLFFBQW9CLElBQVQyUSxFQUVKLENBQ0wsR0FBSTFDLEVBQVEzTSxlQUFldEIsR0FDekIsT0FBT2lPLEVBQVFqTyxHQUVmLE1BQU0rRSxNQUFNLG1CQUFxQi9FLEVBQU8sb0JBTDFDaU8sRUFBUWpPLEdBQVEyUSxJQWtCdEIzQyxFQUFTYSxVQUFZLFNBQVU3TyxFQUFNb1AsR0FDbkMsYUFFQSxJQUFLcEIsRUFBU2lCLE9BQU9JLFNBQVNyUCxHQUM1QixNQUFNK0UsTUFBTSxxQ0FNZCxHQUhBL0UsRUFBT2dPLEVBQVNpQixPQUFPMkIsV0FBVzVRLEdBRzlCZ08sRUFBU2lCLE9BQU9NLFlBQVlILEdBQU0sQ0FDcEMsSUFBS2xCLEVBQVc1TSxlQUFldEIsR0FDN0IsTUFBTStFLE1BQU0sbUJBQXFCL0UsRUFBTyx1QkFFMUMsT0FBT2tPLEVBQVdsTyxHQUtDLG1CQUFSb1AsSUFDVEEsRUFBTUEsS0FJSHBCLEVBQVNpQixPQUFPQyxRQUFRRSxLQUMzQkEsRUFBTSxDQUFDQSxJQUdULElBQUl5QixFQUFpQmpDLEVBQVNRLEVBQUtwUCxHQUVuQyxJQUFJNlEsRUFBZTlCLE1BR2pCLE1BQU1oSyxNQUFNOEwsRUFBZTdCLE9BRjNCZCxFQUFXbE8sR0FBUW9QLEdBV3pCcEIsRUFBUzhDLGlCQUFtQixXQUMxQixhQUNBLE9BQU81QyxHQU9URixFQUFTK0MsZ0JBQWtCLFNBQVUvUSxHQUNuQyxvQkFDT2tPLEVBQVdsTyxJQU1wQmdPLEVBQVNnRCxnQkFBa0IsV0FDekIsYUFDQTlDLEVBQWEsSUFvSGZGLEVBQVNpRCxrQkFBb0IsU0FBVTdCLEdBQ3JDLGFBRUEsSUFBSTZCLEVBQW9CckMsRUFBU1EsRUFBSyxNQUN0QyxRQUFLNkIsRUFBa0JsQyxRQUNyQm1DLFFBQVFDLEtBQUtGLEVBQWtCakMsUUFDeEIsSUNwWE5oQixFQUFTMU0sZUFBZSxZQUMzQjBNLEVBQVNpQixPQUFTLElBU3BCakIsRUFBU2lCLE9BQU9JLFNBQVcsU0FBVStCLEdBQ25DLGFBQ0EsTUFBcUIsaUJBQU5BLEdBQWtCQSxhQUFhQyxRQVNoRHJELEVBQVNpQixPQUFPcUMsV0FBYSxTQUFVRixHQUNyQyxhQUVBLE9BQU9BLEdBQWtDLHNCQUQzQixHQUNNRyxTQUFTM1IsS0FBS3dSLElBU3BDcEQsRUFBU2lCLE9BQU9DLFFBQVUsU0FBVWtDLEdBQ2xDLGFBQ0EsT0FBT0ksTUFBTXRDLFFBQVFrQyxJQVN2QnBELEVBQVNpQixPQUFPTSxZQUFjLFNBQVU3TyxHQUN0QyxhQUNBLFlBQXdCLElBQVZBLEdBVWhCc04sRUFBU2lCLE9BQU93QyxRQUFVLFNBQVVDLEVBQUtDLEdBQ3ZDLGFBRUEsR0FBSTNELEVBQVNpQixPQUFPTSxZQUFZbUMsR0FDOUIsTUFBTSxJQUFJM00sTUFBTSx5QkFHbEIsR0FBSWlKLEVBQVNpQixPQUFPTSxZQUFZb0MsR0FDOUIsTUFBTSxJQUFJNU0sTUFBTSw4QkFHbEIsSUFBS2lKLEVBQVNpQixPQUFPcUMsV0FBV0ssR0FDOUIsTUFBTSxJQUFJNU0sTUFBTSw2Q0FHbEIsR0FBMkIsbUJBQWhCMk0sRUFBSUQsUUFDYkMsRUFBSUQsUUFBUUUsUUFDUCxHQUFJM0QsRUFBU2lCLE9BQU9DLFFBQVF3QyxHQUNqQyxJQUFLLElBQUlqUyxFQUFJLEVBQUdBLEVBQUlpUyxFQUFJeEosT0FBUXpJLElBQzlCa1MsRUFBU0QsRUFBSWpTLEdBQUlBLEVBQUdpUyxPQUVqQixJQUFxQixpQkFBVEEsRUFPakIsTUFBTSxJQUFJM00sTUFBTSwwREFOaEIsSUFBSyxJQUFJNk0sS0FBUUYsRUFDWEEsRUFBSXBRLGVBQWVzUSxJQUNyQkQsRUFBU0QsRUFBSUUsR0FBT0EsRUFBTUYsS0FjbEMxRCxFQUFTaUIsT0FBTzJCLFdBQWEsU0FBVXBQLEdBQ3JDLGFBQ0EsT0FBT0EsRUFBRW9PLFFBQVEsaUJBQWtCLElBQUlBLFFBQVEsTUFBTyxJQUFJTixlQWdCNUR0QixFQUFTaUIsT0FBT1kseUJBQTJCQSxFQVUzQzdCLEVBQVNpQixPQUFPNEMsaUJBQW1CLFNBQVVDLEVBQU1DLEVBQWVDLEdBQ2hFLGFBR0EsSUFBSUMsRUFBYyxLQUFPRixFQUFjbkMsUUFBUSxjQUFlLFFBQVUsS0FFcEVvQyxJQUNGQyxFQUFjLE9BQVNBLEdBR3pCLElBQUl4QyxFQUFRLElBQUlFLE9BQU9zQyxFQUFhLEtBR3BDLE9BRkFILEVBQU9BLEVBQUtsQyxRQUFRSCxFQUFPSSxJQVU3QjdCLEVBQVNpQixPQUFPaUQscUJBQXVCLFNBQVVDLEdBQy9DLGFBRUEsT0FBT0EsRUFDSnZDLFFBQVEsVUFBVyxLQUNuQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsU0FBVSxNQUd2QixJQUFJd0MsRUFBa0IsU0FBVUMsRUFBS0MsRUFBTUMsRUFBT0MsR0FDaEQsYUFDQSxJQUtJN1IsRUFBR2EsRUFBRzNCLEVBQUc0UyxFQUFPQyxFQUxoQkMsRUFBSUgsR0FBUyxHQUNiSSxFQUFJRCxFQUFFckksUUFBUSxNQUFRLEVBQ3RCdUksRUFBSSxJQUFJbEQsT0FBTzJDLEVBQU8sSUFBTUMsRUFBTyxJQUFNSSxFQUFFL0MsUUFBUSxLQUFNLEtBQ3pEbFEsRUFBSSxJQUFJaVEsT0FBTzJDLEVBQU1LLEVBQUUvQyxRQUFRLEtBQU0sS0FDckNrRCxFQUFNLEdBR1YsR0FFRSxJQURBblMsRUFBSSxFQUNJZCxFQUFJZ1QsRUFBRUUsS0FBS1YsSUFDakIsR0FBSTNTLEVBQUU2RCxLQUFLMUQsRUFBRSxJQUNMYyxNQUVKOFIsR0FEQWpSLEVBQUlxUixFQUFFRyxXQUNNblQsRUFBRSxHQUFHcUksYUFFZCxHQUFJdkgsTUFDRkEsRUFBRyxDQUNSK1IsRUFBTTdTLEVBQUVvVCxNQUFRcFQsRUFBRSxHQUFHcUksT0FDckIsSUFBSXdKLEVBQU0sQ0FDUlksS0FBTSxDQUFDRyxNQUFPQSxFQUFPQyxJQUFLbFIsR0FDMUIwUixNQUFPLENBQUNULE1BQU9qUixFQUFHa1IsSUFBSzdTLEVBQUVvVCxPQUN6QlYsTUFBTyxDQUFDRSxNQUFPNVMsRUFBRW9ULE1BQU9QLElBQUtBLEdBQzdCNUMsV0FBWSxDQUFDMkMsTUFBT0EsRUFBT0MsSUFBS0EsSUFHbEMsR0FEQUksRUFBSXZJLEtBQUttSCxJQUNKa0IsRUFDSCxPQUFPRSxTQUtSblMsSUFBTWtTLEVBQUVHLFVBQVl4UixJQUU3QixPQUFPc1IsR0FnQ1Q5RSxFQUFTaUIsT0FBT2tFLHFCQUF1QixTQUFVZCxFQUFLQyxFQUFNQyxFQUFPQyxHQUNqRSxhQUtBLElBSEEsSUFBSVksRUFBV2hCLEVBQWlCQyxFQUFLQyxFQUFNQyxFQUFPQyxHQUM5Q2EsRUFBVSxHQUVMNVQsRUFBSSxFQUFHQSxFQUFJMlQsRUFBU2xMLFNBQVV6SSxFQUNyQzRULEVBQVE5SSxLQUFLLENBQ1g4SCxFQUFJaUIsTUFBTUYsRUFBUzNULEdBQUdxUSxXQUFXMkMsTUFBT1csRUFBUzNULEdBQUdxUSxXQUFXNEMsS0FDL0RMLEVBQUlpQixNQUFNRixFQUFTM1QsR0FBR3lULE1BQU1ULE1BQU9XLEVBQVMzVCxHQUFHeVQsTUFBTVIsS0FDckRMLEVBQUlpQixNQUFNRixFQUFTM1QsR0FBRzZTLEtBQUtHLE1BQU9XLEVBQVMzVCxHQUFHNlMsS0FBS0ksS0FDbkRMLEVBQUlpQixNQUFNRixFQUFTM1QsR0FBRzhTLE1BQU1FLE1BQU9XLEVBQVMzVCxHQUFHOFMsTUFBTUcsT0FHekQsT0FBT1csR0FZVHJGLEVBQVNpQixPQUFPc0UsdUJBQXlCLFNBQVVsQixFQUFLbUIsRUFBYWxCLEVBQU1DLEVBQU9DLEdBQ2hGLGFBRUEsSUFBS3hFLEVBQVNpQixPQUFPcUMsV0FBV2tDLEdBQWMsQ0FDNUMsSUFBSUMsRUFBU0QsRUFDYkEsRUFBYyxXQUNaLE9BQU9DLEdBSVgsSUFBSUwsRUFBV2hCLEVBQWdCQyxFQUFLQyxFQUFNQyxFQUFPQyxHQUM3Q2tCLEVBQVdyQixFQUNYc0IsRUFBTVAsRUFBU2xMLE9BRW5CLEdBQUl5TCxFQUFNLEVBQUcsQ0FDWCxJQUFJQyxFQUFPLEdBQzBCLElBQWpDUixFQUFTLEdBQUd0RCxXQUFXMkMsT0FDekJtQixFQUFLckosS0FBSzhILEVBQUlpQixNQUFNLEVBQUdGLEVBQVMsR0FBR3RELFdBQVcyQyxRQUVoRCxJQUFLLElBQUloVCxFQUFJLEVBQUdBLEVBQUlrVSxJQUFPbFUsRUFDekJtVSxFQUFLckosS0FDSGlKLEVBQ0VuQixFQUFJaUIsTUFBTUYsRUFBUzNULEdBQUdxUSxXQUFXMkMsTUFBT1csRUFBUzNULEdBQUdxUSxXQUFXNEMsS0FDL0RMLEVBQUlpQixNQUFNRixFQUFTM1QsR0FBR3lULE1BQU1ULE1BQU9XLEVBQVMzVCxHQUFHeVQsTUFBTVIsS0FDckRMLEVBQUlpQixNQUFNRixFQUFTM1QsR0FBRzZTLEtBQUtHLE1BQU9XLEVBQVMzVCxHQUFHNlMsS0FBS0ksS0FDbkRMLEVBQUlpQixNQUFNRixFQUFTM1QsR0FBRzhTLE1BQU1FLE1BQU9XLEVBQVMzVCxHQUFHOFMsTUFBTUcsT0FHckRqVCxFQUFJa1UsRUFBTSxHQUNaQyxFQUFLckosS0FBSzhILEVBQUlpQixNQUFNRixFQUFTM1QsR0FBR3FRLFdBQVc0QyxJQUFLVSxFQUFTM1QsRUFBSSxHQUFHcVEsV0FBVzJDLFFBRzNFVyxFQUFTTyxFQUFNLEdBQUc3RCxXQUFXNEMsSUFBTUwsRUFBSW5LLFFBQ3pDMEwsRUFBS3JKLEtBQUs4SCxFQUFJaUIsTUFBTUYsRUFBU08sRUFBTSxHQUFHN0QsV0FBVzRDLE1BRW5EZ0IsRUFBV0UsRUFBS0MsS0FBSyxJQUV2QixPQUFPSCxHQWFUMUYsRUFBU2lCLE9BQU82RSxhQUFlLFNBQVV6QixFQUFLNUMsRUFBT3NFLEdBQ25ELGFBQ0EsSUFBSy9GLEVBQVNpQixPQUFPSSxTQUFTZ0QsR0FDNUIsS0FBTSxrR0FFUixHQUFJNUMsYUFBaUJFLFNBQVcsRUFDOUIsS0FBTSxnSEFFUixJQUFJckYsRUFBVStILEVBQUkyQixVQUFVRCxHQUFhLEdBQUdFLE9BQU94RSxHQUNuRCxPQUFRbkYsR0FBVyxFQUFNQSxHQUFXeUosR0FBYSxHQUFNekosR0FVekQwRCxFQUFTaUIsT0FBT2lGLGFBQWUsU0FBVTdCLEVBQUtZLEdBQzVDLGFBQ0EsSUFBS2pGLEVBQVNpQixPQUFPSSxTQUFTZ0QsR0FDNUIsS0FBTSxrR0FFUixNQUFPLENBQUNBLEVBQUkyQixVQUFVLEVBQUdmLEdBQVFaLEVBQUkyQixVQUFVZixLQVlqRGpGLEVBQVNpQixPQUFPa0YsbUJBQXFCLFNBQVVDLEdBQzdDLGFBQ0EsSUFBSUMsRUFBUyxDQUNYLFNBQVVDLEdBQ1IsTUFBTyxLQUFPQSxFQUFHdEUsV0FBVyxHQUFLLEtBRW5DLFNBQVVzRSxHQUNSLE1BQU8sTUFBUUEsRUFBR3RFLFdBQVcsR0FBR3VCLFNBQVMsSUFBTSxLQUVqRCxTQUFVK0MsR0FDUixPQUFPQSxJQWtCWCxPQWRBRixFQUFPQSxFQUFLeEUsUUFBUSxNQUFNLFNBQVUwRSxHQUNsQyxHQUFXLE1BQVBBLEVBRUZBLEVBQUtELEVBQU85SyxLQUFLZ0wsTUFBc0IsRUFBaEJoTCxLQUFLaUwsV0FBZUYsT0FDdEMsQ0FDTCxJQUFJL1QsRUFBSWdKLEtBQUtpTCxTQUViRixFQUNFL1QsRUFBSSxHQUFNOFQsRUFBTyxHQUFHQyxHQUFNL1QsRUFBSSxJQUFPOFQsRUFBTyxHQUFHQyxHQUFNRCxFQUFPLEdBQUdDLEdBR25FLE9BQU9BLE1BYVh0RyxFQUFTaUIsT0FBT3dGLE9BQVMsU0FBaUJwQyxFQUFLcUMsRUFBY0MsR0FDM0QsYUFNQSxPQUhBRCxJQUE2QixFQUU3QkMsRUFBWXRELE9BQU9zRCxHQUFhLEtBQzVCdEMsRUFBSW5LLE9BQVN3TSxFQUNSckQsT0FBT2dCLEtBRWRxQyxHQUE4QnJDLEVBQUluSyxRQUNmeU0sRUFBVXpNLFNBQzNCeU0sR0FBYUEsRUFBVUMsT0FBT0YsRUFBZUMsRUFBVXpNLFNBRWxEbUosT0FBT2dCLEdBQU9zQyxFQUFVckIsTUFBTSxFQUFFb0IsS0FRbEIsb0JBQWJ4RCxVQUNWQSxRQUFVLENBQ1JDLEtBQU0sU0FBVTBELEdBQ2QsYUFDQUMsTUFBTUQsSUFFUkUsSUFBSyxTQUFVRixHQUNiLGFBQ0FDLE1BQU1ELElBRVI3RixNQUFPLFNBQVU2RixHQUNmLGFBQ0EsTUFBTUEsS0FTWjdHLEVBQVNpQixPQUFPK0YsUUFBVSxDQUN4QkMscUJBQXNCLGFBTXhCakgsRUFBU2lCLE9BQU9pRyxPQUFTLENBQ3ZCLEtBQUcsS0FDSCxLQUFHLEtBQ0gsSUFBSSxLQUNKLEtBQUssS0FDTCxrQkFBZ0IsS0FDaEIsa0JBQWdCLEtBQ2hCLGtCQUFnQixLQUNoQixRQUFNLEtBQ04sRUFBRSxNQUNGLEdBQUcsS0FDSCxJQUFJLEtBQ0osS0FBSyxLQUNMLE9BQU8sS0FDUCxlQUFlLEtBQ2YsU0FBUyxLQUNULFlBQVksSUFDWixRQUFRLEtBQ1IsTUFBTSxLQUNOLFVBQVUsS0FDVixRQUFRLEtBQ1IsT0FBTyxLQUNQLE1BQU0sS0FDTixNQUFNLEtBQ04sTUFBTSxLQUNOLFVBQVUsS0FDVixJQUFJLEtBQ0osTUFBTSxLQUNOLFNBQVMsS0FDVCxNQUFNLEtBQ04sZUFBZSxLQUNmLGtCQUFrQixJQUNsQixnQkFBZ0IsSUFDaEIsV0FBVyxLQUNYLGlCQUFpQixLQUNqQixjQUFjLEtBQ2QsbUJBQW1CLEtBQ25CLGlCQUFpQixLQUNqQixXQUFXLEtBQ1gsaUJBQWlCLEtBQ2pCLGtCQUFrQixLQUNsQixZQUFZLEtBQ1osaUJBQWlCLEtBQ2pCLFNBQVMsS0FDVCxjQUFjLEtBQ2QsZUFBZSxLQUNmLGlCQUFpQixLQUNqQixrQkFBa0IsS0FDbEIsaUJBQWlCLEtBQ2pCLHdCQUF3QixLQUN4QixJQUFJLEtBQ0osa0JBQWtCLEtBQ2xCLHFCQUFxQixLQUNyQixXQUFXLEtBQ1gsY0FBYyxLQUNkLElBQUksS0FDSixZQUFZLEtBQ1osUUFBUSxLQUNSLEVBQUUsTUFDRixLQUFLLEtBQ0wsWUFBWSxLQUNaLFdBQVcsS0FDWCxZQUFZLEtBQ1osS0FBSyxLQUNMLE1BQU0sS0FDTixVQUFVLEtBQ1YsY0FBYyxLQUNkLGVBQWUsS0FDZixjQUFjLEtBQ2QsUUFBUSxLQUNSLFdBQVcsS0FDWCxzQkFBc0IsS0FDdEIsT0FBTyxLQUNQLE9BQU8sS0FDUCxTQUFTLEtBQ1QsS0FBSyxLQUNMLFVBQVUsS0FDVixPQUFPLEtBQ1AsU0FBUyxLQUNULFdBQVcsS0FDWCxlQUFlLEtBQ2YsaUJBQWlCLFlBQ2pCLElBQUksS0FDSixLQUFLLEtBQ0wsUUFBUSxLQUNSLFFBQVEsS0FDUixlQUFlLEtBQ2YsS0FBSyxLQUNMLElBQUksS0FDSixJQUFJLEtBQ0osS0FBSyxLQUNMLE1BQU0sS0FDTixPQUFPLEtBQ1AsU0FBUyxLQUNULEtBQUssS0FDTCxhQUFhLEtBQ2IsTUFBTSxLQUNOLFdBQVcsS0FDWCxLQUFLLEtBQ0wsYUFBYSxZQUNiLE9BQU8sS0FDUCxVQUFVLEtBQ1YsS0FBSyxLQUNMLFNBQVMsS0FDVCxhQUFhLEtBQ2IsV0FBVyxLQUNYLFlBQVksS0FDWixZQUFZLEtBQ1osbUJBQW1CLEtBQ25CLDBCQUEwQixLQUMxQixvQkFBb0IsS0FDcEIsVUFBVSxLQUNWLG1CQUFtQixLQUNuQixvQkFBb0IsS0FDcEIsV0FBVyxLQUNYLGFBQWEsWUFDYixRQUFRLEtBQ1IsU0FBUyxLQUNULFVBQVUsS0FDVixTQUFTLEtBQ1QsV0FBVyxLQUNYLE1BQU0sS0FDTixLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsU0FBUyxLQUNULGNBQWMsS0FDZCxNQUFNLEtBQ04sS0FBSyxLQUNMLEtBQUssS0FDTCxRQUFRLEtBQ1IsV0FBVyxLQUNYLGNBQWMsS0FDZCxhQUFhLFlBQ2IsUUFBUSxLQUNSLGFBQWEsS0FDYixJQUFJLEtBQ0osTUFBTSxLQUNOLGdCQUFnQixLQUNoQixnQkFBZ0IsS0FDaEIsVUFBVSxLQUNWLGFBQWEsS0FDYixJQUFJLEtBQ0osc0JBQXNCLEtBQ3RCLEtBQUssS0FDTCxrQkFBa0IsS0FDbEIsaUJBQWlCLEtBQ2pCLFFBQVEsS0FDUixJQUFJLEtBQ0oseUJBQXlCLEtBQ3pCLFFBQVEsS0FDUixtQkFBbUIsS0FDbkIsb0JBQW9CLEtBQ3BCLFVBQVUsS0FDVixPQUFPLEtBQ1AsS0FBSyxLQUNMLFNBQVMsS0FDVCxhQUFhLEtBQ2IsUUFBUSxLQUNSLE1BQU0sS0FDTixPQUFPLEtBQ1AsYUFBYSxLQUNiLFFBQVEsS0FDUixPQUFPLEtBQ1AsT0FBTyxLQUNQLE1BQU0sS0FDTixNQUFNLEtBQ04sYUFBYSxLQUNiLFVBQVUsS0FDVixJQUFJLEtBQ0osY0FBYyxLQUNkLFdBQVcsS0FDWCxvQkFBb0IsS0FDcEIsZUFBZSxLQUNmLE9BQU8sS0FDUCxJQUFJLEtBQ0osS0FBSyxLQUNMLEdBQUcsS0FDSCxPQUFPLElBQ1AsVUFBVSxLQUNWLE1BQU0sS0FDTiwyQkFBMkIsS0FDM0IseUJBQXlCLEtBQ3pCLGVBQWUsS0FDZixPQUFPLEtBQ1AsU0FBUyxLQUNULGVBQWUsS0FDZixTQUFTLEtBQ1QsUUFBUSxLQUNSLGtCQUFrQixLQUNsQixTQUFTLEtBQ1QsY0FBYyxLQUNkLGVBQWUsS0FDZixPQUFPLEtBQ1AsT0FBTyxLQUNQLFlBQVksS0FDWixhQUFhLEtBQ2IsWUFBWSxLQUNaLFVBQVUsS0FDVixHQUFHLEtBQ0gsTUFBTSxLQUNOLEtBQUssS0FDTCxRQUFRLEtBQ1IsbUJBQW1CLEtBQ25CLGlCQUFpQixLQUNqQixVQUFVLEtBQ1YsT0FBTyxLQUNQLFFBQVEsS0FDUixVQUFVLEtBQ1YsUUFBUSxLQUNSLFVBQVUsS0FDVixRQUFRLEtBQ1IsVUFBVSxLQUNWLFNBQVMsS0FDVCxPQUFPLEtBQ1AsU0FBUyxLQUNULE9BQU8sS0FDUCxTQUFTLEtBQ1QsT0FBTyxLQUNQLFNBQVMsS0FDVCxPQUFPLEtBQ1AsU0FBUyxLQUNULE9BQU8sS0FDUCxTQUFTLEtBQ1QsT0FBTyxLQUNQLFNBQVMsS0FDVCxPQUFPLEtBQ1AsU0FBUyxLQUNULE9BQU8sS0FDUCxTQUFTLEtBQ1QsWUFBWSxLQUNaLHFCQUFxQixLQUNyQixnQkFBZ0IsS0FDaEIsTUFBTSxLQUNOLHFCQUFxQixLQUNyQiw4QkFBOEIsSUFDOUIsZ0JBQWdCLEtBQ2hCLGdCQUFnQixLQUNoQixXQUFXLEtBQ1gsTUFBTSxLQUNOLFNBQVMsS0FDVCxPQUFPLEtBQ1AsT0FBTyxLQUNQLFdBQVcsS0FDWCxNQUFNLEtBQ04sU0FBUyxLQUNULGVBQWUsS0FDZixjQUFjLEtBQ2QsV0FBVyxLQUNYLFNBQVMsS0FDVCxnQkFBZ0IsS0FDaEIsYUFBYSxLQUNiLHdCQUF3QixLQUN4QiwwQkFBMEIsWUFDMUIsY0FBYyxLQUNkLGtCQUFrQixLQUNsQixPQUFPLEtBQ1AsS0FBSyxLQUNMLFVBQVUsS0FDVixVQUFVLEtBQ1YsS0FBSyxLQUNMLGVBQWUsS0FDZixPQUFPLEtBQ1AsNEJBQTRCLEtBQzVCLDBCQUEwQixtQkFDMUIsOEJBQThCLG1CQUM5QixtQkFBbUIsMEJBQ25CLHFCQUFxQixLQUNyQix1QkFBdUIsMEJBQ3ZCLElBQUksS0FDSixLQUFLLEtBQ0wsZ0JBQWdCLEtBQ2hCLEtBQUssS0FDTCxPQUFPLEtBQ1AsWUFBWSxLQUNaLGNBQWMsS0FDZCxRQUFRLEtBQ1IsVUFBVSxLQUNWLFVBQVUsS0FDVixnQkFBZ0IsS0FDaEIsY0FBYyxLQUNkLGVBQWUsS0FDZixNQUFNLEtBQ04sSUFBSSxLQUNKLGdCQUFnQixLQUNoQixhQUFhLEtBQ2IsU0FBUyxLQUNULE1BQU0sS0FDTixXQUFXLElBQ1gsa0JBQWtCLEtBQ2xCLE1BQU0sS0FDTixRQUFRLEtBQ1IsUUFBUSxLQUNSLFFBQVEsS0FDUixPQUFPLEtBQ1AsT0FBTyxLQUNQLGNBQWMsS0FDZCxZQUFZLFlBQ1osTUFBTSxLQUNOLGdCQUFnQixLQUNoQixLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxlQUFlLEtBQ2YsS0FBSyxLQUNMLGlCQUFpQixLQUNqQixlQUFlLEtBQ2YsT0FBTyxLQUNQLGNBQWMsS0FDZCxpQkFBaUIsS0FDakIsZUFBZSxNQUNmLGdDQUFnQyxLQUNoQyxTQUFTLEtBQ1QsYUFBYSxLQUNiLHNCQUFzQixLQUN0QixNQUFNLEtBQ04sV0FBVyxLQUNYLGNBQWMsS0FDZCxJQUFJLEtBQ0osS0FBSyxLQUNMLE9BQU8sS0FDUCxNQUFNLEtBQ04sUUFBUSxLQUNSLEtBQUssS0FDTCxTQUFTLEtBQ1QsS0FBSyxLQUNMLE9BQU8sS0FDUCxZQUFZLEtBQ1osTUFBTSxLQUNOLGdCQUFnQixLQUNoQixjQUFjLEtBQ2QsUUFBUSxLQUNSLEtBQUssS0FDTCxLQUFLLEtBQ0wsSUFBSSxLQUNKLFNBQU8sS0FDUCxNQUFNLEtBQ04sSUFBSSxLQUNKLFlBQVksS0FDWixhQUFhLEtBQ2IsZUFBZSxLQUNmLFdBQVcsS0FDWCxJQUFJLEtBQ0osU0FBUyxLQUNULHlCQUF5QixLQUN6QixzQkFBc0IsS0FDdEIsY0FBYyxLQUNkLFNBQVMsS0FDVCxNQUFNLEtBQ04sSUFBSSxLQUNKLG9CQUFvQixLQUNwQixLQUFLLEtBQ0wsZ0JBQWdCLEtBQ2hCLHFCQUFxQixLQUNyQixlQUFlLEtBQ2YsWUFBWSxLQUNaLGVBQWUsS0FDZixJQUFJLEtBQ0osa0JBQWtCLFlBQ2xCLFdBQVcsS0FDWCxLQUFLLEtBQ0wsdUJBQXVCLEtBQ3ZCLHNCQUFzQixLQUN0QixjQUFjLEtBQ2QsUUFBUSxLQUNSLFlBQVksS0FDWixxQkFBcUIsS0FDckIsZUFBZSxZQUNmLG1CQUFtQixtQkFDbkIsZ0JBQWdCLFlBQ2hCLG9CQUFvQixtQkFDcEIscUJBQXFCLG1CQUNyQixtQkFBbUIsbUJBQ25CLHVCQUF1QiwwQkFDdkIsb0JBQW9CLG1CQUNwQix3QkFBd0IsMEJBQ3hCLHlCQUF5QiwwQkFDekIseUJBQXlCLDBCQUN6QixzQkFBc0IsbUJBQ3RCLDBCQUEwQiwwQkFDMUIsMkJBQTJCLDBCQUMzQixpQkFBaUIsWUFDakIscUJBQXFCLG1CQUNyQixrQkFBa0IsWUFDbEIsc0JBQXNCLG1CQUN0Qix1QkFBdUIsbUJBQ3ZCLHVCQUF1QixtQkFDdkIsMkJBQTJCLDBCQUMzQix3QkFBd0IsbUJBQ3hCLDRCQUE0QiwwQkFDNUIsNkJBQTZCLDBCQUM3QixhQUFhLElBQ2IsSUFBSSxLQUNKLFFBQVEsS0FDUixLQUFLLEtBQ0wsaUJBQWlCLGFBQ2pCLGFBQWEsS0FDYixNQUFNLElBQ04sYUFBYSxLQUNiLGFBQWEsS0FDYixZQUFZLEtBQ1osZUFBZSxLQUNmLFdBQVcsS0FDWCxLQUFLLEtBQ0wsWUFBWSxLQUNaLFVBQVUsS0FDVixtQkFBbUIsS0FDbkIsNkJBQTZCLEtBQzdCLEtBQUssS0FDTCxVQUFVLEtBQ1Ysc0JBQXNCLEtBQ3RCLFlBQVksSUFDWixVQUFVLEtBQ1YsV0FBVyxLQUNYLE1BQU0sS0FDTixXQUFXLEtBQ1gsYUFBYSxLQUNiLGVBQWUsS0FDZixpQkFBaUIsS0FDakIsWUFBWSxLQUNaLHFCQUFxQixLQUNyQixRQUFRLEtBQ1IsSUFBSSxLQUNKLE1BQU0sS0FDTixTQUFTLEtBQ1QsV0FBVyxLQUNYLGVBQWUsS0FDZixTQUFTLEtBQ1QsYUFBYSxLQUNiLGlCQUFpQixLQUNqQixTQUFTLEtBQ1QsZUFBZSxLQUNmLEtBQUssS0FDTCxVQUFVLEtBQ1YsYUFBYSxLQUNiLE1BQU0sS0FDTixLQUFLLEtBQ0wsU0FBUyxLQUNULGNBQWMsS0FDZCxhQUFhLFlBQ2IsZUFBZSxLQUNmLGNBQWMsS0FDZCxTQUFTLEtBQ1QsVUFBVSxLQUNWLG9CQUFvQixLQUNwQixZQUFZLEtBQ1osU0FBUyxLQUNULEtBQUssS0FDTCxJQUFJLEtBQ0osT0FBTyxLQUNQLE1BQU0sS0FDTixLQUFLLEtBQ0wsV0FBVyxLQUNYLEtBQUssS0FDTCxxQkFBcUIsS0FDckIsU0FBUyxLQUNULEtBQUssS0FDTCxLQUFLLEtBQ0wsWUFBWSxNQUNaLGNBQWMsYUFDZCxRQUFRLEtBQ1IsT0FBTyxLQUNQLFlBQVksS0FDWixXQUFXLEtBQ1gsWUFBWSxLQUNaLFlBQVksS0FDWixpQkFBaUIsSUFDakIsY0FBYyxJQUNkLFVBQVUsS0FDVixLQUFLLEtBQ0wsU0FBUyxLQUNULFVBQVUsS0FDVixZQUFZLFlBQ1osT0FBTyxLQUNQLElBQUksS0FDSixjQUFjLEtBQ2QsWUFBWSxZQUNaLFVBQVUsS0FDVixPQUFPLEtBQ1AsZ0JBQWdCLElBQ2hCLGtCQUFrQixLQUNsQixRQUFRLEtBQ1IsS0FBSyxJQUNMLFFBQVEsS0FDUixVQUFVLEtBQ1YsT0FBTyxLQUNQLGNBQWMsS0FDZCxlQUFlLEtBQ2YsV0FBVyxLQUNYLGFBQWEsS0FDYixNQUFNLEtBQ04saUJBQWlCLEtBQ2pCLFdBQVcsS0FDWCxlQUFlLEtBQ2YsVUFBVSxLQUNWLFdBQVcsS0FDWCxPQUFPLEtBQ1AsaUJBQWlCLEtBQ2pCLG9CQUFvQixJQUNwQixrQkFBa0IsS0FDbEIsd0JBQXdCLEtBQ3hCLGlCQUFpQixJQUNqQix1QkFBdUIsS0FDdkIsZ0JBQWdCLElBQ2hCLFdBQVcsS0FDWCxLQUFLLEtBQ0wsU0FBUyxLQUNULGdCQUFnQixLQUNoQixVQUFVLEtBQ1YsTUFBTSxLQUNOLEtBQUssS0FDTCxVQUFVLEtBQ1YsTUFBTSxLQUNOLGFBQWEsS0FDYixTQUFTLEtBQ1QsV0FBVyxLQUNYLE9BQU8sS0FDUCxNQUFNLEtBQ04sV0FBVyxLQUNYLFVBQVUsS0FDVix1QkFBdUIsSUFDdkIsTUFBTSxLQUNOLGtCQUFrQixLQUNsQixPQUFPLEtBQ1AsS0FBSyxLQUNMLE9BQU8sS0FDUCxVQUFVLEtBQ1YsV0FBVyxLQUNYLFVBQVUsSUFDVixTQUFTLEtBQ1QsR0FBRyxLQUNILG9CQUFvQixLQUNwQixJQUFJLEtBQ0osV0FBVyxLQUNYLGtCQUFrQixLQUNsQixtQkFBbUIsS0FDbkIsbUJBQW1CLEtBQ25CLFNBQVMsS0FDVCxZQUFZLEtBQ1osT0FBTyxLQUNQLGdCQUFnQixLQUNoQixlQUFlLEtBQ2YsTUFBTSxLQUNOLGdCQUFnQixLQUNoQixnQkFBZ0IsS0FDaEIsY0FBYyxLQUNkLE1BQU0sS0FDTixJQUFJLEtBQ0osUUFBUSxLQUNSLFNBQVMsS0FDVCxNQUFNLEtBQ04sSUFBSSxLQUNKLFNBQVMsS0FDVCxXQUFXLEtBQ1gsYUFBYSxLQUNiLE9BQU8sS0FDUCxLQUFLLEtBQ0wsUUFBUSxLQUNSLFlBQVksS0FDWixvQkFBb0IsS0FDcEIsY0FBYyxLQUNkLHFCQUFxQixLQUNyQixXQUFXLEtBQ1gsTUFBTSxLQUNOLEtBQUssS0FDTCxNQUFNLEtBQ04sa0JBQWtCLEtBQ2xCLG1CQUFtQixLQUNuQixxQkFBcUIsS0FDckIsa0JBQWtCLEtBQ2xCLDRCQUE0QixLQUM1QixZQUFZLEtBQ1osU0FBUyxLQUNULE9BQU8sS0FDUCxPQUFPLEtBQ1AsYUFBYSxLQUNiLGlCQUFpQixLQUNqQiwwQkFBMEIsS0FDMUIsTUFBTSxLQUNOLElBQUksS0FDSixRQUFRLEtBQ1IsYUFBYSxLQUNiLE1BQU0sS0FDTixXQUFXLEtBQ1gsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsU0FBUyxLQUNULE9BQU8sS0FDUCxLQUFLLEtBQ0wsa0JBQWtCLEtBQ2xCLFNBQVMsS0FDVCxLQUFLLElBQ0wsV0FBVyxLQUNYLFlBQVksS0FDWixXQUFXLEtBQ1gsWUFBWSxLQUNaLGVBQWUsS0FDZixXQUFXLEtBQ1gsRUFBRSxLQUNGLElBQUksS0FDSixVQUFVLEtBQ1YsUUFBUSxNQUNSLFFBQVEsS0FDUixlQUFlLEtBQ2Ysa0JBQWtCLEtBQ2xCLHFCQUFxQixLQUNyQixJQUFJLEtBQ0osV0FBVyxZQUNYLGNBQWMsWUFDZCxpQkFBaUIsWUFDakIsU0FBUyxZQUNULFlBQVksS0FDWixnQkFBZ0IsWUFDaEIsbUJBQW1CLFlBQ25CLFdBQVcsWUFDWCxnQkFBZ0IsWUFDaEIsa0JBQWtCLFlBQ2xCLGNBQWMsS0FDZCxVQUFVLFlBQ1YsYUFBYSxZQUNiLGFBQWEsWUFDYixrQkFBa0IsWUFDbEIsVUFBVSxZQUNWLHFCQUFxQixZQUNyQix1QkFBdUIsWUFDdkIsY0FBYyxZQUNkLGNBQWMsWUFDZCxXQUFXLFlBQ1gsWUFBWSxZQUNaLFlBQVksWUFDWixpQkFBaUIsWUFDakIsb0JBQW9CLEtBQ3BCLGdCQUFnQixLQUNoQixVQUFVLEtBQ1YsVUFBVSxLQUNWLGtCQUFrQixLQUNsQixXQUFXLEtBQ1gscUJBQXFCLEtBQ3JCLEtBQUssS0FDTCxjQUFjLEtBQ2QsWUFBWSxZQUNaLGFBQWEsS0FDYixlQUFlLEtBQ2YsYUFBYSxLQUNiLEtBQUssS0FDTCxNQUFNLEtBQ04sS0FBSyxLQUNMLGNBQWMsWUFDZCxRQUFRLEtBQ1IsS0FBSyxLQUNMLE1BQU0sS0FDTixNQUFNLEtBQ04sV0FBVyxLQUNYLFdBQVcsS0FDWCxXQUFXLEtBQ1gsVUFBVSxLQUNWLFFBQVEsS0FDUixTQUFTLEtBQ1QsaUJBQWlCLEtBQ2pCLGlCQUFpQixLQUNqQixpQkFBaUIsS0FDakIsU0FBUyxLQUNULE9BQU8sS0FDUCxZQUFZLEtBQ1osU0FBUyxLQUNULEtBQUssS0FDTCxhQUFhLEtBQ2IsT0FBTyxLQUNQLFdBQVcsS0FDWCxjQUFjLEtBQ2QsV0FBVyxLQUNYLFNBQVMsS0FDVCxXQUFXLEtBQ1gsU0FBUyxJQUNULG9CQUFvQixLQUNwQixzQkFBc0IsWUFDdEIsa0JBQWtCLEtBQ2xCLGlCQUFpQixLQUNqQixjQUFjLEtBQ2QsTUFBTSxLQUNOLE9BQU8sS0FDUCxhQUFhLEtBQ2IsTUFBTSxLQUNOLFVBQVUsS0FDVixPQUFPLEtBQ1AsU0FBUyxLQUNULGlCQUFpQixLQUNqQixhQUFhLEtBQ2IsY0FBYyxLQUNkLEtBQUssS0FDTCxVQUFVLEtBQ1YsV0FBVyxLQUNYLGNBQWMsS0FDZCxlQUFlLEtBQ2YsUUFBUSxLQUNSLDRCQUE0QixJQUM1QixVQUFVLEtBQ1YsYUFBYSxLQUNiLElBQUksS0FDSixTQUFTLEtBQ1QsbUJBQW1CLEtBQ25CLFVBQVUsS0FDVixlQUFlLEtBQ2Ysa0JBQWtCLElBQ2xCLEdBQUcsS0FDSCxZQUFZLFlBQ1osY0FBYyxLQUNkLGlCQUFpQixLQUNqQixRQUFRLEtBQ1IsWUFBWSxLQUNaLFNBQVMsS0FDVCxjQUFjLEtBQ2QsaUJBQWlCLEtBQ2pCLFNBQVMsS0FDVCxlQUFlLEtBQ2YsV0FBVyxLQUNYLG9CQUFrQixLQUNsQixLQUFLLEtBQ0wsU0FBUyxLQUNULCtCQUErQixLQUMvQixNQUFNLEtBQ04sYUFBYSxLQUNiLEVBQUUsS0FDRixHQUFHLE1BQ0gsTUFBTSxLQUNOLFFBQVEsS0FDUixLQUFLLEtBQ0wsT0FBTyxLQUNQLFNBQVMsS0FDVCxHQUFHLEtBQ0gsUUFBUSxLQUNSLE9BQU8sWUFDUCxTQUFTLEtBQ1QsUUFBUSxLQUNSLFVBQVUsS0FDVixZQUFZLEtBQ1osR0FBRyxLQUNILEdBQUcsS0FDSCxvQkFBb0IsS0FDcEIsYUFBYSxLQUNiLG9CQUFvQixLQUNwQixjQUFjLEtBQ2QsaUJBQWlCLEtBQ2pCLFdBQVcsS0FDWCxXQUFXLEtBQ1gsY0FBYyxLQUNkLFVBQVUsSUFDVixZQUFZLEtBQ1osZUFBZSxLQUNmLFlBQVksS0FDWixJQUFJLEtBQ0osR0FBRyxLQUNILFFBQVEsS0FDUixlQUFlLEtBQ2YsZUFBZSxLQUNmLE1BQU0sS0FDTixXQUFXLEtBQ1gsVUFBVSxLQUNWLFNBQVMsS0FDVCxXQUFXLEtBQ1gsVUFBVSxLQUNWLFdBQVcsS0FDWCxrQkFBa0IsSUFDbEIsUUFBUSxNQUNSLHNCQUFzQixLQUN0QixhQUFhLEtBQ2IsZUFBZSxLQUNmLGlCQUFpQixLQUNqQixhQUFhLElBQ2IsYUFBYSxLQUNiLE1BQU0sS0FDTixRQUFRLEtBQ1IsS0FBSyxLQUNMLElBQUksS0FDSixRQUFRLEtBQ1IsUUFBUSxLQUNSLFFBQVEsS0FDUixnQkFBZ0IsS0FDaEIsVUFBVSxLQUNWLGVBQWUsS0FDZixjQUFjLEtBQ2QsTUFBTSxLQUNOLEtBQUssSUFDTCxJQUFJLEtBQ0osS0FBSyxLQUNMLFNBQVMsS0FDVCxLQUFLLEtBQ0wsVUFBVSxLQUNWLFVBQVUsS0FDVixPQUFPLEtBQ1AsTUFBTSxLQUNOLGlCQUFpQixLQUNqQixtQkFBbUIsS0FDbkIscUJBQXFCLElBQ3JCLFdBQVcsS0FDWCxXQUFXLEtBQ1gsWUFBWSxLQUNaLFNBQVMsS0FDVCxXQUFXLEtBQ1gsV0FBVyxLQUNYLFlBQVksWUFDWixPQUFPLEtBQ1AsUUFBUSxLQUNSLFlBQVksS0FDWixZQUFZLEtBQ1osUUFBUSxLQUNSLGNBQWMsS0FDZCxPQUFPLEtBQ1AsTUFBTSxLQUNOLFlBQVksS0FDWixNQUFNLEtBQ04sS0FBSyxLQUNMLFlBQVksS0FDWixZQUFZLFlBQ1osS0FBSyxLQUNMLGFBQWEsS0FDYixlQUFlLEtBQ2Ysc0JBQXNCLElBQ3RCLE9BQU8sS0FDUCxTQUFTLEtBQ1QsUUFBUSxLQUNSLGFBQWEsS0FDYixNQUFNLEtBQ04sUUFBUSxLQUNSLHdCQUF3QixLQUN4QixTQUFTLElBQ1QsT0FBTyxLQUNQLFFBQVEsS0FDUixVQUFVLEtBQ1YsV0FBVyxLQUNYLE1BQU0sS0FDTixhQUFhLEtBQ2IsWUFBWSxLQUNaLFlBQVksS0FDWixjQUFjLEtBQ2QsUUFBUSxLQUNSLGFBQWEsYUFDYixvQkFBb0IsS0FDcEIsaUNBQWlDLEtBQ2pDLGFBQWEsS0FDYixtQkFBbUIsS0FDbkIsaUJBQWlCLFlBQ2pCLElBQUksS0FDSixNQUFNLEtBQ04sSUFBSSxLQUNKLGNBQWMsSUFDZCxRQUFRLEtBQ1IsV0FBVyxLQUNYLFdBQVcsS0FDWCxRQUFRLEtBQ1IsU0FBUyxLQUNULGdCQUFnQixLQUNoQixPQUFPLEtBQ1AsV0FBVyxLQUNYLHFCQUFxQixJQUNyQixTQUFTLEtBQ1QsaUJBQWlCLEtBQ2pCLE9BQU8sSUFDUCxXQUFXLEtBQ1gsT0FBTyxLQUNQLEtBQUssS0FDTCxVQUFVLEtBQ1YsYUFBYSxLQUNiLFdBQVcsS0FDWCxtQkFBbUIsS0FDbkIsS0FBSyxLQUNMLE1BQU0sS0FDTixPQUFPLEtBQ1AsS0FBSyxLQUNMLFVBQVUsS0FDVixlQUFlLEtBQ2YsUUFBUSxLQUNSLEtBQUssS0FDTCxRQUFRLEtBQ1IsZUFBZSxLQUNmLGNBQWMsS0FDZCxXQUFXLEtBQ1gsYUFBYSxZQUNiLGVBQWUsS0FDZixZQUFZLEtBQ1osd0JBQXdCLEtBQ3hCLGNBQWMsWUFDZCxHQUFHLE1BQ0gsWUFBWSxLQUNaLEtBQUssS0FDTCxPQUFPLEtBQ1AsTUFBTSxLQUNOLFVBQVUsS0FDVixVQUFVLEtBQ1YsT0FBTyxLQUNQLGVBQWUsS0FDZixTQUFTLEtBQ1QsU0FBUyxLQUNULFNBQVMsS0FDVCxPQUFPLEtBQ1AsV0FBVyxLQUNYLE9BQU8sS0FDUCxLQUFLLEtBQ0wsT0FBTyxLQUNQLFlBQVksS0FDWixTQUFTLEtBQ1QsT0FBTyxLQUNQLG9CQUFvQixLQUNwQixTQUFTLEtBQ1QsTUFBTSxLQUNOLFdBQVcsS0FDWCxNQUFNLEtBQ04sTUFBTSxLQUNOLE9BQU8sS0FDUCxjQUFjLElBQ2QsS0FBSyxLQUNMLE1BQU0sS0FDTixTQUFTLEtBQ1QsY0FBYyxLQUNkLE9BQU8sS0FDUCxPQUFPLEtBQ1AsZ0JBQWdCLEtBQ2hCLGlCQUFpQixLQUNqQixJQUFJLEtBQ0osTUFBTSxJQUNOLE1BQU0sS0FDTixxQkFBcUIsS0FDckIsU0FBUyxLQUNULGFBQWEsS0FDYixPQUFPLEtBQ1AsdUJBQXVCLEtBQ3ZCLHNCQUFzQixLQUN0QixhQUFhLEtBQ2IsZUFBZSxLQUNmLG1CQUFtQixLQUNuQixxQkFBcUIsS0FDckIsbUJBQW1CLEtBQ25CLHdCQUF3QixLQUN4QixNQUFNLEtBQ04sVUFBVSxLQUNWLE9BQU8sS0FDUCxXQUFXLEtBQ1gsWUFBWSxLQUNaLE1BQU0sS0FDTixVQUFVLEtBQ1YsUUFBUSxLQUNSLE1BQU0sS0FDTixNQUFNLEtBQ04sY0FBYyxLQUNkLFlBQVksS0FDWixVQUFVLEtBQ1YsUUFBUSxLQUNSLGtCQUFrQixLQUNsQixJQUFJLEtBQ0osT0FBTyxLQUNQLEtBQUssS0FDTCxJQUFJLEtBQ0osTUFBTSxLQUNOLGNBQWMsS0FDZCxPQUFPLEtBQ1AsVUFBVSxLQUNWLFFBQVEsS0FDUixTQUFTLEtBQ1QsU0FBUyxJQUNULGdCQUFnQixLQUNoQixjQUFjLEtBQ2QsUUFBUSxLQUNSLGNBQWMsS0FDZCxlQUFlLEtBQ2YsVUFBVSxLQUNWLE9BQU8sS0FDUCxXQUFXLEtBQ1gsZ0JBQWdCLEtBQ2hCLGVBQWUsS0FDZixNQUFNLEtBQ04sTUFBTSxLQUNOLFFBQVEsS0FDUixLQUFLLEtBQ0wsTUFBTSxLQUNOLGtCQUFrQixLQUNsQixjQUFjLEtBQ2QsTUFBTSxLQUNOLFFBQVEsS0FDUixrQkFBa0IsS0FDbEIsaUJBQWlCLEtBQ2pCLEtBQUssS0FDTCxZQUFZLElBQ1osVUFBVSxLQUNWLFVBQVUsSUFDVixlQUFlLEtBQ2YsV0FBVyxLQUNYLGlCQUFpQixLQUNqQiw2QkFBNkIsS0FDN0IsNkJBQTZCLEtBQzdCLGtCQUFrQixLQUNsQixrQkFBa0IsS0FDbEIsdUJBQXVCLEtBQ3ZCLHNCQUFzQixLQUN0Qix1QkFBdUIsS0FDdkIsY0FBYyxLQUNkLFVBQVUsS0FDVixXQUFXLEtBQ1gsTUFBTSxLQUNOLFFBQVEsS0FDUix1QkFBdUIsS0FDdkIsWUFBWSxLQUNaLGNBQWMsWUFDZCxNQUFNLEtBQ04sbUJBQW1CLEtBQ25CLE1BQU0sS0FDTixZQUFZLEtBQ1osWUFBWSxLQUNaLGFBQWEsS0FDYixhQUFhLEtBQ2IsZUFBZSxZQUNmLFFBQVEsS0FDUixVQUFVLEtBQ1YsUUFBUSxLQUNSLEtBQUssS0FDTCxLQUFLLEtBQ0wsY0FBYyxLQUNkLE9BQU8sS0FDUCxLQUFLLEtBQ0wsSUFBSSxLQUNKLG1CQUFtQixLQUNuQixVQUFVLEtBQ1YsT0FBTyxLQUNQLEtBQUssS0FDTCxZQUFZLEtBQ1osU0FBUyxLQUNULGdCQUFnQixLQUNoQixPQUFPLEtBQ1AsUUFBUSxLQUNSLE1BQU0sS0FDTixPQUFPLEtBQ1AsWUFBWSxJQUNaLGlCQUFpQixZQUNqQixXQUFXLEtBQ1gsR0FBRyxLQUNILE9BQU8sS0FDUCxZQUFZLEtBQ1osT0FBTyxLQUNQLE9BQU8sS0FDUCxJQUFJLEtBQ0osT0FBTyxLQUNQLFFBQVEsS0FDUixVQUFVLEtBQ1YsUUFBUSxLQUNSLGNBQWMsS0FDZCxNQUFNLEtBQ04sT0FBTyxLQUNQLEtBQUssS0FDTCx3QkFBd0IsS0FDeEIsaUJBQWlCLEtBQ2pCLFFBQVEsS0FDUixRQUFRLEtBQ1IsV0FBVyxLQUNYLE9BQU8sS0FDUCxlQUFlLEtBQ2YsY0FBYyxLQUNkLE1BQU0sS0FDTixRQUFRLEtBQ1IsTUFBTSxLQUNOLGNBQWMsS0FDZCxPQUFPLEtBQ1AsT0FBTyxLQUNQLEdBQUcsS0FDSCwwQkFBMEIsS0FDMUIsV0FBVyxLQUNYLHNCQUFzQixLQUN0Qix3QkFBd0IsS0FDeEIsTUFBTSxLQUNOLE1BQU0sS0FDTixNQUFNLEtBQ04sTUFBTSxNQUNOLE1BQU0sTUFDTixNQUFNLEtBQ04sTUFBTSxLQUNOLE1BQU0sTUFDTixNQUFNLEtBQ04sTUFBTSxLQUNOLE1BQU0sS0FDTixTQUFTLEtBQ1QsU0FBUyxLQUNULFNBQVMsS0FDVCxRQUFRLEtBQ1IsT0FBTyxLQUNQLEdBQUcsS0FDSCxpQkFBaUIsS0FDakIsRUFBRSxLQUNGLHVCQUF1QixLQUN2QixJQUFJLEtBQ0osZUFBZSxLQUNmLGFBQWEsS0FDYixXQUFXLEtBQ1gsT0FBTyxLQUNQLE1BQU0sS0FDTixRQUFRLEtBQ1IsV0FBVyxLQUNYLEdBQUcsS0FDSCxjQUFjLEtBQ2QsWUFBWSxLQUNaLGNBQWMsWUFDZCxxQkFBcUIsS0FDckIsb0JBQW9CLEtBQ3BCLFFBQVEsS0FDUixZQUFZLEtBQ1osTUFBTSxLQUNOLGNBQWMsS0FDZCxXQUFXLEtBQ1gsS0FBSyxLQUNMLFVBQVUsS0FDVixxQkFBcUIsS0FDckIsR0FBRyxLQUNILE1BQU0sS0FDTixRQUFRLEtBQ1IsbUJBQW1CLE1BQ25CLHFCQUFxQixhQUNyQixNQUFNLEtBQ04sT0FBTyxLQUNQLGdCQUFnQixLQUNoQixXQUFXLEtBQ1gsaUJBQWlCLElBQ2pCLGFBQWEsS0FDYixXQUFXLE1BQ1gsYUFBYSxLQUNiLG1CQUFtQixLQUNuQiwwQkFBMEIsS0FDMUIsb0JBQW9CLEtBQ3BCLG1CQUFtQixLQUNuQixvQkFBb0IsS0FDcEIsY0FBYyxLQUNkLFdBQVcsS0FDWCxVQUFVLEtBQ1YsV0FBVyxLQUNYLEtBQUssS0FDTCxLQUFLLEtBQ0wsTUFBTSxLQUNOLGFBQWEsWUFDYixnQkFBZ0IsWUFDaEIsbUJBQW1CLFlBQ25CLFdBQVcsWUFDWCxrQkFBa0IsWUFDbEIscUJBQXFCLFlBQ3JCLGFBQWEsWUFDYixrQkFBa0IsWUFDbEIsb0JBQW9CLFlBQ3BCLFlBQVksWUFDWixlQUFlLFlBQ2YsZUFBZSxZQUNmLG9CQUFvQixZQUNwQixZQUFZLFlBQ1osdUJBQXVCLFlBQ3ZCLHlCQUF5QixZQUN6QixnQkFBZ0IsWUFDaEIsZ0JBQWdCLFlBQ2hCLGFBQWEsWUFDYixjQUFjLFlBQ2QsY0FBYyxZQUNkLG1CQUFtQixZQUNuQixrQkFBa0IsWUFDbEIsZUFBZSxLQUNmLFdBQVcsS0FDWCxnQkFBZ0IsWUFDaEIsT0FBTyxLQUNQLFVBQVUsS0FDVixRQUFRLEtBQ1IsT0FBTyxLQUNQLGFBQWEsS0FDYixFQUFFLElBQ0YsYUFBYSxLQUNiLElBQUksS0FDSixTQUFTLEtBQ1QsSUFBSSxLQUNKLElBQUksS0FDSixrQkFBa0IsS0FDbEIsSUFBSSxLQUdKLFFBQVksb0lBQ1osU0FBWSwrTEN2akRkbEgsRUFBU21ILFVBQVksU0FBVUMsR0FDN0IsYUFFQSxJQU1JalIsRUFBVSxHQU9Wa1IsRUFBaUIsR0FPakJDLEVBQWtCLEdBT2xCOUYsRUFBWSxHQUtaK0YsRUFBZ0JuSCxFQU1oQlQsRUFBVyxDQUNUNkgsT0FBUSxHQUNSQyxJQUFLLEdBQ0xDLE9BQVEsSUF5Q2QsU0FBU0MsRUFBaUJ2RyxFQUFLcFAsR0FJN0IsR0FGQUEsRUFBT0EsR0FBUSxLQUVYZ08sRUFBU2lCLE9BQU9JLFNBQVNELEdBQU0sQ0FLakMsR0FIQXBQLEVBREFvUCxFQUFNcEIsRUFBU2lCLE9BQU8yQixXQUFXeEIsR0FJN0JwQixFQUFTRSxXQUFXa0IsR0FJdEIsT0FIQThCLFFBQVFDLEtBQUssd0JBQTBCL0IsRUFBMUIscUlBc0RuQixTQUFpQ0EsRUFBS3BQLEdBQ2pCLG1CQUFSb1AsSUFDVEEsRUFBTUEsRUFBSSxJQUFJcEIsRUFBU21ILFlBRXBCbkgsRUFBU2lCLE9BQU9DLFFBQVFFLEtBQzNCQSxFQUFNLENBQUNBLElBRVQsSUFBSUwsRUFBUUgsRUFBU1EsRUFBS3BQLEdBRTFCLElBQUsrTyxFQUFNQSxNQUNULE1BQU1oSyxNQUFNZ0ssRUFBTUMsT0FHcEIsSUFBSyxJQUFJdlAsRUFBSSxFQUFHQSxFQUFJMlAsRUFBSWxILFNBQVV6SSxFQUNoQyxPQUFRMlAsRUFBSTNQLEdBQUdtTSxNQUNiLElBQUssT0FDSHlKLEVBQWU5SyxLQUFLNkUsRUFBSTNQLElBQ3hCLE1BQ0YsSUFBSyxTQUNINlYsRUFBZ0IvSyxLQUFLNkUsRUFBSTNQLElBQ3pCLE1BQ0YsUUFDRSxNQUFNc0YsTUFBTSxpREExRWQ2USxDQUF1QjVILEVBQVNFLFdBQVdrQixHQUFNQSxHQUk1QyxHQUFLcEIsRUFBU2lCLE9BQU9NLFlBQVlyQixFQUFXa0IsSUFJakQsTUFBTXJLLE1BQU0sY0FBZ0JxSyxFQUFNLCtFQUhsQ0EsRUFBTWxCLEVBQVdrQixHQU9GLG1CQUFSQSxJQUNUQSxFQUFNQSxLQUdIcEIsRUFBU2lCLE9BQU9DLFFBQVFFLEtBQzNCQSxFQUFNLENBQUNBLElBR1QsSUFBSXlHLEVBQVdqSCxFQUFTUSxFQUFLcFAsR0FDN0IsSUFBSzZWLEVBQVM5RyxNQUNaLE1BQU1oSyxNQUFNOFEsRUFBUzdHLE9BR3ZCLElBQUssSUFBSXZQLEVBQUksRUFBR0EsRUFBSTJQLEVBQUlsSCxTQUFVekksRUFBRyxDQUNuQyxPQUFRMlAsRUFBSTNQLEdBQUdtTSxNQUViLElBQUssT0FDSHlKLEVBQWU5SyxLQUFLNkUsRUFBSTNQLElBQ3hCLE1BRUYsSUFBSyxTQUNINlYsRUFBZ0IvSyxLQUFLNkUsRUFBSTNQLElBRzdCLEdBQUkyUCxFQUFJM1AsR0FBRzZCLGVBQWUsYUFDeEIsSUFBSyxJQUFJb08sS0FBTU4sRUFBSTNQLEdBQUcrUCxVQUNoQkosRUFBSTNQLEdBQUcrUCxVQUFVbE8sZUFBZW9PLElBQ2xDb0csRUFBT3BHLEVBQUlOLEVBQUkzUCxHQUFHK1AsVUFBVUUsS0E2Q3RDLFNBQVNvRyxFQUFROVYsRUFBTTJSLEdBQ3JCLElBQUszRCxFQUFTaUIsT0FBT0ksU0FBU3JQLEdBQzVCLE1BQU0rRSxNQUFNLG9GQUFzRi9FLEVBQU8sVUFHM0csR0FBd0IsbUJBQWIyUixFQUNULE1BQU01TSxNQUFNLDBGQUE0RjRNLEVBQVcsVUFHaEhuQyxFQUFVbE8sZUFBZXRCLEtBQzVCd1AsRUFBVXhQLEdBQVEsSUFFcEJ3UCxFQUFVeFAsR0FBTXVLLEtBQUtvSCxJQTVJdkIsV0FHRSxJQUFLLElBQUlvRSxLQUZUWCxFQUFtQkEsR0FBb0IsR0FFdEJqSCxFQUNYQSxFQUFjN00sZUFBZXlVLEtBQy9CNVIsRUFBUTRSLEdBQVE1SCxFQUFjNEgsSUFLbEMsR0FBZ0MsaUJBQXJCWCxFQU9ULE1BQU1yUSxNQUFNLHNFQUF3RXFRLEVBQ3BGLHdCQVBBLElBQUssSUFBSXJILEtBQU9xSCxFQUNWQSxFQUFpQjlULGVBQWV5TSxLQUNsQzVKLEVBQVE0SixHQUFPcUgsRUFBaUJySCxJQVFsQzVKLEVBQVErSixZQUNWRixFQUFTaUIsT0FBT3dDLFFBQVF0TixFQUFRK0osV0FBWXlILEdBNUJoREssR0FvS0FwVSxLQUFLcVUsVUFBWSxTQUFtQkMsRUFBU3BFLEVBQU0zTixFQUFTZ1MsR0FDMUQsR0FBSTNHLEVBQVVsTyxlQUFlNFUsR0FDM0IsSUFBSyxJQUFJRSxFQUFLLEVBQUdBLEVBQUs1RyxFQUFVMEcsR0FBU2hPLFNBQVVrTyxFQUFJLENBQ3JELElBQUlDLEVBQVE3RyxFQUFVMEcsR0FBU0UsR0FBSUYsRUFBU3BFLEVBQU1sUSxLQUFNdUMsRUFBU2dTLEdBQzdERSxRQUEwQixJQUFWQSxJQUNsQnZFLEVBQU91RSxHQUliLE9BQU92RSxHQVNUbFEsS0FBS2tVLE9BQVMsU0FBVTlWLEVBQU0yUixHQUU1QixPQURBbUUsRUFBTzlWLEVBQU0yUixHQUNOL1AsTUFRVEEsS0FBSzBVLFNBQVcsU0FBVXhFLEdBRXhCLElBQUtBLEVBQ0gsT0FBT0EsRUFHVCxJQUFJcUUsRUFBVSxDQUNaSSxZQUFpQixHQUNqQkMsY0FBaUIsR0FDakJDLFdBQWlCLEdBQ2pCQyxNQUFpQixHQUNqQkMsUUFBaUIsR0FDakJDLFlBQWlCLEdBQ2pCQyxXQUFpQixFQUNqQkMsZUFBaUIsR0FDakJ6QixlQUFpQkEsRUFDakJDLGdCQUFpQkEsRUFDakJ5QixVQUFpQm5WLEtBQ2pCK0ssYUFBaUIsR0FDakJnQixTQUFVLENBQ1I2SCxPQUFRLEdBQ1JDLElBQUssR0FDTEMsT0FBUSxLQXVFWixPQXBEQTVELEdBSEFBLEdBREFBLEdBSEFBLEdBTEFBLEVBQU9BLEVBQUtsQyxRQUFRLEtBQU0sT0FLZEEsUUFBUSxNQUFPLE9BR2ZBLFFBQVEsUUFBUyxPQUNqQkEsUUFBUSxNQUFPLE9BR2ZBLFFBQVEsVUFBVyxVQUUzQnpMLEVBQVEySSxzQkFDVmdGLEVBdkZKLFNBQXlCQSxHQUN2QixJQUFJa0YsRUFBTWxGLEVBQUtvQixNQUFNLFFBQVEsR0FBR2hMLE9BQzVCK08sRUFBTSxJQUFJdEgsT0FBTyxVQUFZcUgsRUFBTSxJQUFLLE1BQzVDLE9BQU9sRixFQUFLbEMsUUFBUXFILEVBQUssSUFvRmhCQyxDQUFlcEYsSUFJeEJBLEVBQU8sT0FBU0EsRUFBTyxPQVd2QkEsR0FSQUEsRUFBTzlELEVBQVMwQyxVQUFVLFFBQW5CMUMsQ0FBNEI4RCxFQUFNM04sRUFBU2dTLElBUXRDdkcsUUFBUSxhQUFjLElBR2xDNUIsRUFBU2lCLE9BQU93QyxRQUFRNEQsR0FBZ0IsU0FBVWpHLEdBQ2hEMEMsRUFBTzlELEVBQVMwQyxVQUFVLGVBQW5CMUMsQ0FBbUNvQixFQUFLMEMsRUFBTTNOLEVBQVNnUyxNQUloRXJFLEVBQU85RCxFQUFTMEMsVUFBVSxXQUFuQjFDLENBQStCOEQsRUFBTTNOLEVBQVNnUyxHQUNyRHJFLEVBQU85RCxFQUFTMEMsVUFBVSxrQkFBbkIxQyxDQUFzQzhELEVBQU0zTixFQUFTZ1MsR0FDNURyRSxFQUFPOUQsRUFBUzBDLFVBQVUsbUJBQW5CMUMsQ0FBdUM4RCxFQUFNM04sRUFBU2dTLEdBQzdEckUsRUFBTzlELEVBQVMwQyxVQUFVLGlCQUFuQjFDLENBQXFDOEQsRUFBTTNOLEVBQVNnUyxHQUMzRHJFLEVBQU85RCxFQUFTMEMsVUFBVSxlQUFuQjFDLENBQW1DOEQsRUFBTTNOLEVBQVNnUyxHQUN6RHJFLEVBQU85RCxFQUFTMEMsVUFBVSx1QkFBbkIxQyxDQUEyQzhELEVBQU0zTixFQUFTZ1MsR0FDakVyRSxFQUFPOUQsRUFBUzBDLFVBQVUsYUFBbkIxQyxDQUFpQzhELEVBQU0zTixFQUFTZ1MsR0FDdkRyRSxFQUFPOUQsRUFBUzBDLFVBQVUsa0JBQW5CMUMsQ0FBc0M4RCxFQUFNM04sRUFBU2dTLEdBTzVEckUsR0FIQUEsR0FIQUEsRUFBTzlELEVBQVMwQyxVQUFVLHVCQUFuQjFDLENBQTJDOEQsRUFBTTNOLEVBQVNnUyxJQUdyRHZHLFFBQVEsTUFBTyxPQUdmQSxRQUFRLE1BQU8sS0FHM0JrQyxFQUFPOUQsRUFBUzBDLFVBQVUsdUJBQW5CMUMsQ0FBMkM4RCxFQUFNM04sRUFBU2dTLEdBR2pFbkksRUFBU2lCLE9BQU93QyxRQUFRNkQsR0FBaUIsU0FBVWxHLEdBQ2pEMEMsRUFBTzlELEVBQVMwQyxVQUFVLGVBQW5CMUMsQ0FBbUNvQixFQUFLMEMsRUFBTTNOLEVBQVNnUyxNQUloRXhJLEVBQVd3SSxFQUFReEksU0FDWm1FLEdBU1RsUSxLQUFLdVYsYUFBZXZWLEtBQUt3VixPQUFTLFNBQVVDLEVBQUtDLEdBVy9DLEdBRkFELEdBTEFBLEdBREFBLEVBQU1BLEVBQUl6SCxRQUFRLFFBQVMsT0FDakJBLFFBQVEsTUFBTyxPQUtmQSxRQUFRLFdBQVksYUFFekIwSCxFQUFZLENBQ2YsSUFBSTNWLFNBQVVBLE9BQU9rRCxTQUduQixNQUFNLElBQUlFLE1BQU0sNkhBRmhCdVMsRUFBYTNWLE9BQU9rRCxTQU14QixJQUFJMFMsRUFBTUQsRUFBVy9VLGNBQWMsT0FDbkNnVixFQUFJdlIsVUFBWXFSLEVBRWhCLElBQUlsQixFQUFVLENBQ1pxQixRQXFDRixTQUFnQ0QsR0FLOUIsSUFIQSxJQUFJRSxFQUFPRixFQUFJL00saUJBQWlCLE9BQzVCa04sRUFBUyxHQUVKalksRUFBSSxFQUFHQSxFQUFJZ1ksRUFBS3ZQLFNBQVV6SSxFQUVqQyxHQUFrQyxJQUE5QmdZLEVBQUtoWSxHQUFHa1ksbUJBQXdFLFNBQTdDRixFQUFLaFksR0FBR21ZLFdBQVdsTixRQUFRNEUsY0FBMEIsQ0FDMUYsSUFBSXZKLEVBQVUwUixFQUFLaFksR0FBR21ZLFdBQVc1UixVQUFVb0UsT0FDdkN5TixFQUFXSixFQUFLaFksR0FBR21ZLFdBQVduVSxhQUFhLGtCQUFvQixHQUduRSxHQUFpQixLQUFib1UsRUFFRixJQURBLElBQUlDLEVBQVVMLEVBQUtoWSxHQUFHbVksV0FBV3BWLFVBQVV5SCxNQUFNLEtBQ3hDbkssRUFBSSxFQUFHQSxFQUFJZ1ksRUFBUTVQLFNBQVVwSSxFQUFHLENBQ3ZDLElBQUlpWSxFQUFVRCxFQUFRaFksR0FBR29ULE1BQU0sbUJBQy9CLEdBQWdCLE9BQVo2RSxFQUFrQixDQUNwQkYsRUFBV0UsRUFBUSxHQUNuQixPQU1OaFMsRUFBVWlJLEVBQVNpQixPQUFPaUQscUJBQXFCbk0sR0FFL0MyUixFQUFPbk4sS0FBS3hFLEdBQ1owUixFQUFLaFksR0FBR3VZLFVBQVksc0JBQXdCSCxFQUFXLGlCQUFtQnBZLEVBQUU4UixXQUFhLG9CQUV6Rm1HLEVBQU9uTixLQUFLa04sRUFBS2hZLEdBQUd1RyxXQUNwQnlSLEVBQUtoWSxHQUFHdUcsVUFBWSxHQUNwQnlSLEVBQUtoWSxHQUFHd1ksYUFBYSxTQUFVeFksRUFBRThSLFlBR3JDLE9BQU9tRyxFQXZFRVEsQ0FBc0JYLEtBaUJqQyxTQUFTWSxFQUFPQyxHQUNkLElBQUssSUFBSWxYLEVBQUksRUFBR0EsRUFBSWtYLEVBQUtDLFdBQVduUSxTQUFVaEgsRUFBRyxDQUMvQyxJQUFJb1gsRUFBUUYsRUFBS0MsV0FBV25YLEdBQ0wsSUFBbkJvWCxFQUFNQyxTQUNMLEtBQU9oVixLQUFLK1UsRUFBTUUsWUFBZSxTQUFTalYsS0FBSytVLEVBQU1FLFlBSXRERixFQUFNRSxVQUFZRixFQUFNRSxVQUFVdk8sTUFBTSxNQUFNNEosS0FBSyxLQUNuRHlFLEVBQU1FLFVBQVlGLEVBQU1FLFVBQVU1SSxRQUFRLFNBQVUsUUFKcER3SSxFQUFLSyxZQUFZSCxLQUNmcFgsR0FLd0IsSUFBbkJvWCxFQUFNQyxVQUNmSixFQUFNRyxJQXpCWkgsQ0FBTVosR0FTTixJQUhBLElBQUltQixFQUFRbkIsRUFBSWMsV0FDWk0sRUFBUSxHQUVIbFosRUFBSSxFQUFHQSxFQUFJaVosRUFBTXhRLE9BQVF6SSxJQUNoQ2taLEdBQVMzSyxFQUFTMEMsVUFBVSxvQkFBbkIxQyxDQUF3QzBLLEVBQU1qWixHQUFJMFcsR0E0RDdELE9BQU93QyxHQVFUL1csS0FBS3FPLFVBQVksU0FBVWpQLEVBQUtOLEdBQzlCeUQsRUFBUW5ELEdBQU9OLEdBUWpCa0IsS0FBS3NPLFVBQVksU0FBVWxQLEdBQ3pCLE9BQU9tRCxFQUFRbkQsSUFPakJZLEtBQUt1TyxXQUFhLFdBQ2hCLE9BQU9oTSxHQVFUdkMsS0FBS2dYLGFBQWUsU0FBVS9KLEVBQVc3TyxHQUV2QzJWLEVBQWdCOUcsRUFEaEI3TyxFQUFPQSxHQUFRLE9BUWpCNEIsS0FBS2lYLGFBQWUsU0FBVUMsR0FDNUJuRCxFQUFnQm1ELElBT2xCbFgsS0FBS3dNLFVBQVksU0FBVXBPLEdBQ3pCLElBQUtxTyxFQUFPL00sZUFBZXRCLEdBQ3pCLE1BQU0rRSxNQUFNL0UsRUFBTyx5QkFFckIsSUFBSXFRLEVBQVNoQyxFQUFPck8sR0FFcEIsSUFBSyxJQUFJc1EsS0FEVGlGLEVBQWdCdlYsRUFDR3FRLEVBQ2JBLEVBQU8vTyxlQUFlZ1AsS0FDeEJuTSxFQUFRbU0sR0FBVUQsRUFBT0MsS0FTL0IxTyxLQUFLMk8sVUFBWSxXQUNmLE9BQU9nRixHQVNUM1QsS0FBS21QLGdCQUFrQixTQUFVbEMsR0FDMUJiLEVBQVNpQixPQUFPQyxRQUFRTCxLQUMzQkEsRUFBWSxDQUFDQSxJQUVmLElBQUssSUFBSXVDLEVBQUksRUFBR0EsRUFBSXZDLEVBQVUzRyxTQUFVa0osRUFBRyxDQUV6QyxJQURBLElBQUloQyxFQUFNUCxFQUFVdUMsR0FDWDNSLEVBQUksRUFBR0EsRUFBSTRWLEVBQWVuTixTQUFVekksRUFDdkM0VixFQUFlNVYsS0FBTzJQLEdBQ3hCaUcsRUFBZXhLLE9BQU9wTCxFQUFHLEdBRzdCLElBQUssSUFBSXNaLEVBQUssRUFBR0EsRUFBS3pELEVBQWdCcE4sU0FBVTZRLEVBQzFDekQsRUFBZ0J5RCxLQUFRM0osR0FDMUJrRyxFQUFnQnpLLE9BQU9rTyxFQUFJLEtBVW5DblgsS0FBS2tQLGlCQUFtQixXQUN0QixNQUFPLENBQ0wrRyxTQUFVeEMsRUFDVjJELE9BQVExRCxJQVNaMVQsS0FBS3FYLFlBQWMsU0FBVXhELEdBQzNCLE9BQUlBLEVBQ0s5SCxFQUFTOEgsSUFFVDlILEVBQVM2SCxRQVFwQjVULEtBQUtzWCxrQkFBb0IsV0FDdkIsT0FBT3ZMLEVBQVMrSCxRQVFsQjlULEtBQUt1WCxpQkFBbUIsU0FBVW5ZLEVBQUtOLEdBQ3JDaU4sRUFBUzZILE9BQU94VSxHQUFPTixHQU96QmtCLEtBQUt3WCxtQkFBcUIsU0FBVTFELEdBQ2xDL0gsRUFBUytILE9BQVNBLEdBT3BCOVQsS0FBS3lYLGdCQUFrQixTQUFVNUQsR0FDL0I5SCxFQUFTOEgsSUFBTUEsSUNwbEJuQnpILEVBQVMwQyxVQUFVLFdBQVcsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDckQsYUFJQSxJQUFJbUQsRUFBaUIsU0FBVXhKLEVBQVl5SixFQUFVQyxFQUFRbFMsRUFBS21TLEVBQUlDLEVBQUl0UyxHQU94RSxHQU5JNEcsRUFBU2lCLE9BQU9NLFlBQVluSSxLQUM5QkEsRUFBUSxJQUVWb1MsRUFBU0EsRUFBT2xLLGNBR1pRLEVBQVdtRSxPQUFPLGlDQUFtQyxFQUN2RDNNLEVBQU0sUUFDRCxJQUFLQSxFQUFLLENBT2YsR0FOS2tTLElBRUhBLEVBQVNELEVBQVNqSyxjQUFjTSxRQUFRLFFBQVMsTUFFbkR0SSxFQUFNLElBQU1rUyxFQUVQeEwsRUFBU2lCLE9BQU9NLFlBQVk0RyxFQUFRTyxNQUFNOEMsSUFNN0MsT0FBTzFKLEVBTFB4SSxFQUFNNk8sRUFBUU8sTUFBTThDLEdBQ2Z4TCxFQUFTaUIsT0FBT00sWUFBWTRHLEVBQVFRLFFBQVE2QyxNQUMvQ3BTLEVBQVErTyxFQUFRUSxRQUFRNkMsSUFVOUIsSUFBSTdRLEVBQVMsYUFGYnJCLEVBQU1BLEVBQUlzSSxRQUFRNUIsRUFBU2lCLE9BQU8rRixRQUFRQyxxQkFBc0JqSCxFQUFTaUIsT0FBT1ksMkJBRS9DLElBa0JqQyxNQWhCYyxLQUFWekksR0FBMEIsT0FBVkEsSUFJbEJ1QixHQUFVLFlBRFZ2QixHQUZBQSxFQUFRQSxFQUFNd0ksUUFBUSxLQUFNLFdBRWRBLFFBQVE1QixFQUFTaUIsT0FBTytGLFFBQVFDLHFCQUFzQmpILEVBQVNpQixPQUFPWSwyQkFDckQsS0FLN0IxTCxFQUFRa0osdUJBQXlCLEtBQUs5SixLQUFLK0QsS0FFN0NxQixHQUFVLGtEQUdaQSxHQUFVLElBQU00USxFQUFXLFFBMkM3QixPQXZCQXpILEdBTkFBLEdBSkFBLEdBSkFBLEdBckRBQSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxpQkFBa0JuRSxFQUFNM04sRUFBU2dTLElBcUR4RHZHLFFBQVEsMERBQTJEMEosSUFJbkUxSixRQUFRLDZGQUNsQjBKLElBR1UxSixRQUFRLHFIQUNsQjBKLElBS1UxSixRQUFRLDJCQUE0QjBKLEdBRzVDblYsRUFBUStJLGFBQ1Y0RSxFQUFPQSxFQUFLbEMsUUFBUSx1REFBdUQsU0FBVStKLEVBQUlDLEVBQUlDLEVBQVFDLEVBQVVDLEdBQzdHLEdBQWUsT0FBWEYsRUFDRixPQUFPRCxFQUFLRSxFQUlkLElBQUs5TCxFQUFTaUIsT0FBT0ksU0FBU2xMLEVBQVFnSixnQkFDcEMsTUFBTSxJQUFJcEksTUFBTSwwQ0FFbEIsSUFBSWlWLEVBQU03VixFQUFRZ0osZUFBZXlDLFFBQVEsUUFBU21LLEdBQzlDdlcsRUFBUyxHQUliLE9BSElXLEVBQVFrSix1QkFDVjdKLEVBQVMsa0RBRUpvVyxFQUFLLFlBQWNJLEVBQU0sSUFBTXhXLEVBQVMsSUFBTXNXLEVBQVcsV0FJcEVoSSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxnQkFBaUJuRSxFQUFNM04sRUFBU2dTLE1DN0ZyRSxJQUFJOEQsRUFBa0IsOEZBQ2xCQyxFQUFrQiwwR0FDbEJDLEVBQWtCLHNEQUNsQkMsRUFBa0Isb0dBQ2xCQyxFQUFrQixnRUFFbEJDLEVBQWMsU0FBVW5XLEdBQ3RCLGFBQ0EsT0FBTyxTQUFVd1YsRUFBSVksRUFBbUJDLEVBQU1DLEVBQUlDLEVBQUlDLEVBQXFCQyxHQUV6RSxJQUFJQyxFQURKTCxFQUFPQSxFQUFLNUssUUFBUTVCLEVBQVNpQixPQUFPK0YsUUFBUUMscUJBQXNCakgsRUFBU2lCLE9BQU9ZLDBCQUU5RWlMLEVBQVMsR0FDVHRYLEVBQVMsR0FDVHVYLEVBQVNSLEdBQXFCLEdBQzlCUyxFQUFTSixHQUFzQixHQVVuQyxNQVRHLFVBQVdyWCxLQUFLaVgsS0FDakJBLEVBQU9BLEVBQUs1SyxRQUFRLFVBQVcsZ0JBRTdCekwsRUFBUWtJLG9DQUFzQ3NPLElBQ2hERyxFQUFTSCxHQUVQeFcsRUFBUWtKLHVCQUNWN0osRUFBUyxrREFFSnVYLEVBQU0sWUFBY1AsRUFBTyxJQUFNaFgsRUFBUyxJQUFNcVgsRUFBUyxPQUFTQyxFQUFTRSxJQUl0RkMsRUFBYyxTQUFVOVcsRUFBU2dTLEdBQy9CLGFBQ0EsT0FBTyxTQUFVckcsRUFBWW9MLEVBQUc5RyxHQUM5QixJQUFJK0csRUFBTyxVQVNYLE9BUkFELEVBQUlBLEdBQUssR0FDVDlHLEVBQU9wRyxFQUFTMEMsVUFBVSx1QkFBbkIxQyxDQUEyQ29HLEVBQU1qUSxFQUFTZ1MsR0FDN0RoUyxFQUFRaUosY0FDVitOLEVBQU9uTixFQUFTaUIsT0FBT2tGLG1CQUFtQmdILEVBQU8vRyxHQUNqREEsRUFBT3BHLEVBQVNpQixPQUFPa0YsbUJBQW1CQyxJQUUxQytHLEdBQWMvRyxFQUVUOEcsRUFBSSxZQUFjQyxFQUFPLEtBQU8vRyxFQUFPLFNBSXREcEcsRUFBUzBDLFVBQVUsYUFBYSxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUN2RCxhQVNBLE9BSkFyRSxHQURBQSxHQUZBQSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxtQkFBb0JuRSxFQUFNM04sRUFBU2dTLElBRTFEdkcsUUFBUXVLLEVBQWVHLEVBQVluVyxLQUNuQ3lMLFFBQVF5SyxFQUFnQlksRUFBWTlXLEVBQVNnUyxJQUV6RHJFLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGtCQUFtQm5FLEVBQU0zTixFQUFTZ1MsTUFLdkVuSSxFQUFTMEMsVUFBVSx1QkFBdUIsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDakUsYUFFQSxPQUFLaFMsRUFBUWlJLG9CQUliMEYsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsNkJBQThCbkUsRUFBTTNOLEVBQVNnUyxHQU9oRnJFLEdBSkVBLEVBREUzTixFQUFRa0ksbUNBQ0h5RixFQUFLbEMsUUFBUXNLLEVBQWlCSSxFQUFZblcsSUFFMUMyTixFQUFLbEMsUUFBUXFLLEVBQWdCSyxFQUFZblcsS0FFdEN5TCxRQUFRd0ssRUFBaUJhLEVBQVk5VyxFQUFTZ1MsSUFFMURyRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSw0QkFBNkJuRSxFQUFNM04sRUFBU2dTLElBWnRFckUsS0MzRFg5RCxFQUFTMEMsVUFBVSxjQUFjLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3hELGFBeUJBLE9BdkJBckUsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsb0JBQXFCbkUsRUFBTTNOLEVBQVNnUyxHQUl2RXJFLEVBQU85RCxFQUFTMEMsVUFBVSxjQUFuQjFDLENBQWtDOEQsRUFBTTNOLEVBQVNnUyxHQUN4RHJFLEVBQU85RCxFQUFTMEMsVUFBVSxVQUFuQjFDLENBQThCOEQsRUFBTTNOLEVBQVNnUyxHQUdwRHJFLEVBQU85RCxFQUFTMEMsVUFBVSxpQkFBbkIxQyxDQUFxQzhELEVBQU0zTixFQUFTZ1MsR0FFM0RyRSxFQUFPOUQsRUFBUzBDLFVBQVUsUUFBbkIxQyxDQUE0QjhELEVBQU0zTixFQUFTZ1MsR0FDbERyRSxFQUFPOUQsRUFBUzBDLFVBQVUsYUFBbkIxQyxDQUFpQzhELEVBQU0zTixFQUFTZ1MsR0FDdkRyRSxFQUFPOUQsRUFBUzBDLFVBQVUsU0FBbkIxQyxDQUE2QjhELEVBQU0zTixFQUFTZ1MsR0FNbkRyRSxFQUFPOUQsRUFBUzBDLFVBQVUsaUJBQW5CMUMsQ0FBcUM4RCxFQUFNM04sRUFBU2dTLEdBQzNEckUsRUFBTzlELEVBQVMwQyxVQUFVLGFBQW5CMUMsQ0FBaUM4RCxFQUFNM04sRUFBU2dTLEdBRXZEckUsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsbUJBQW9CbkUsRUFBTTNOLEVBQVNnUyxNQzVCeEVuSSxFQUFTMEMsVUFBVSxlQUFlLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3pELGFBRUFyRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxxQkFBc0JuRSxFQUFNM04sRUFBU2dTLEdBR3hFckUsR0FBYyxPQUVkLElBQUltRixFQUFNLG9DQWdDVixPQTlCSTlTLEVBQVF5SiwyQkFDVnFKLEVBQU0sOEJBR1JuRixFQUFPQSxFQUFLbEMsUUFBUXFILEdBQUssU0FBVW1FLEdBc0JqQyxPQWRBQSxHQUZBQSxHQUhBQSxFQUFLQSxFQUFHeEwsUUFBUSxtQkFBb0IsS0FHNUJBLFFBQVEsTUFBTyxLQUVmQSxRQUFRLGFBQWMsSUFDOUJ3TCxFQUFLcE4sRUFBUzBDLFVBQVUsbUJBQW5CMUMsQ0FBdUNvTixFQUFJalgsRUFBU2dTLEdBS3pEaUYsR0FGQUEsR0FGQUEsRUFBS3BOLEVBQVMwQyxVQUFVLGFBQW5CMUMsQ0FBaUNvTixFQUFJalgsRUFBU2dTLElBRTNDdkcsUUFBUSxVQUFXLFNBRW5CQSxRQUFRLDhCQUE4QixTQUFVRSxFQUFZQyxHQUNsRSxJQUFJc0wsRUFBTXRMLEVBSVYsT0FEQXNMLEdBREFBLEVBQU1BLEVBQUl6TCxRQUFRLFFBQVMsT0FDakJBLFFBQVEsTUFBTyxPQUlwQjVCLEVBQVMwQyxVQUFVLFlBQW5CMUMsQ0FBNkIsaUJBQXNCb04sRUFBSyxrQkFBbUJqWCxFQUFTZ1MsTUFHN0ZyRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxvQkFBcUJuRSxFQUFNM04sRUFBU2dTLE1DcEN6RW5JLEVBQVMwQyxVQUFVLGNBQWMsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDeEQsYUFFQXJFLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLG9CQUFxQm5FLEVBQU0zTixFQUFTZ1MsR0E4QnZFLE9BSEFyRSxHQXJCQUEsR0FIQUEsR0FBUSxNQUdJbEMsUUFERSxvRUFDZSxTQUFVRSxFQUFZQyxFQUFJMEssR0FDckQsSUFBSWEsRUFBWXZMLEVBQ1p3TCxFQUFXZCxFQUNYL0gsRUFBTSxLQWNWLE9BWkE0SSxFQUFZdE4sRUFBUzBDLFVBQVUsVUFBbkIxQyxDQUE4QnNOLEVBQVduWCxFQUFTZ1MsR0FDOURtRixFQUFZdE4sRUFBUzBDLFVBQVUsYUFBbkIxQyxDQUFpQ3NOLEVBQVduWCxFQUFTZ1MsR0FHakVtRixHQURBQSxHQURBQSxFQUFZdE4sRUFBUzBDLFVBQVUsUUFBbkIxQyxDQUE0QnNOLEVBQVduWCxFQUFTZ1MsSUFDdEN2RyxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxJQUVuQ3pMLEVBQVFzSCwwQkFDVmlILEVBQU0sSUFHUjRJLEVBQVksY0FBZ0JBLEVBQVk1SSxFQUFNLGdCQUV2QzFFLEVBQVMwQyxVQUFVLFlBQW5CMUMsQ0FBZ0NzTixFQUFXblgsRUFBU2dTLEdBQVdvRixNQUk1RDNMLFFBQVEsS0FBTSxJQUUxQmtDLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLG1CQUFvQm5FLEVBQU0zTixFQUFTZ1MsTUNWeEVuSSxFQUFTMEMsVUFBVSxhQUFhLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3ZELGFBb0JBLFlBaEJzQixLQUZ0QnJFLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLG1CQUFvQm5FLEVBQU0zTixFQUFTZ1MsTUFHcEVyRSxFQUFPLElBRVRBLEVBQU9BLEVBQUtsQyxRQUFRLHVDQUNsQixTQUFVRSxFQUFZQyxFQUFJMEssRUFBSUMsR0FDNUIsSUFBSTVhLEVBQUk0YSxFQU1SLE9BSkE1YSxHQURBQSxFQUFJQSxFQUFFOFAsUUFBUSxhQUFjLEtBQ3RCQSxRQUFRLFdBQVksSUFFMUI5UCxFQUFJaVEsRUFBSyxVQURUalEsRUFBSWtPLEVBQVMwQyxVQUFVLGFBQW5CMUMsQ0FBaUNsTyxFQUFHcUUsRUFBU2dTLElBQ3pCLFVBQ3hCclcsRUFBSWtPLEVBQVMwQyxVQUFVLGdCQUFuQjFDLENBQW9DbE8sRUFBR3FFLEVBQVNnUyxNQUt4RHJFLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGtCQUFtQm5FLEVBQU0zTixFQUFTZ1MsTUMxQ3ZFbkksRUFBUzBDLFVBQVUsd0JBQXdCLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ2xFLGFBRUEsSUFBS2hTLEVBQVF1SixxQkFDWCxPQUFPb0UsRUFHVEEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsOEJBQStCbkUsRUFBTTNOLEVBQVNnUyxHQUVqRixJQUFJcUYsRUFBVSxPQUNWQyxFQUFnQixvQkFDaEJyVSxFQUFRLEdBQ1JzVSxFQUFVLDJCQUNWbFYsRUFBTyxHQUNQbUgsRUFBVyxHQVVmLElBQUssSUFBSWdPLFVBUnNDLElBQXBDeEYsRUFBUXhJLFNBQVM2SCxPQUFPZ0csVUFDakNDLEVBQWdCLGFBQWdCdEYsRUFBUXhJLFNBQVM2SCxPQUFPZ0csUUFBVSxNQUVsRCxVQURoQkEsRUFBVXJGLEVBQVF4SSxTQUFTNkgsT0FBT2dHLFFBQVFqSyxXQUFXakMsZ0JBQ2YsVUFBWmtNLElBQ3hCRSxFQUFVLDJCQUlHdkYsRUFBUXhJLFNBQVM2SCxPQUNoQyxHQUFJVyxFQUFReEksU0FBUzZILE9BQU9sVSxlQUFlcWEsR0FDekMsT0FBUUEsRUFBS3JNLGVBQ1gsSUFBSyxVQUNILE1BRUYsSUFBSyxRQUNIbEksRUFBUSxVQUFhK08sRUFBUXhJLFNBQVM2SCxPQUFPcE8sTUFBUSxhQUNyRCxNQUVGLElBQUssVUFFRHNVLEVBRGMsU0FBWkYsR0FBa0MsVUFBWkEsRUFDZCxrQkFBb0JyRixFQUFReEksU0FBUzZILE9BQU9rRyxRQUFVLE9BRXRELGlDQUFtQ3ZGLEVBQVF4SSxTQUFTNkgsT0FBT2tHLFFBQVUsT0FFakYsTUFFRixJQUFLLFdBQ0wsSUFBSyxPQUNIbFYsRUFBTyxVQUFZMlAsRUFBUXhJLFNBQVM2SCxPQUFPbUcsR0FBUSxJQUNuRGhPLEdBQVksZUFBaUJnTyxFQUFPLGNBQWdCeEYsRUFBUXhJLFNBQVM2SCxPQUFPbUcsR0FBUSxPQUNwRixNQUVGLFFBQ0VoTyxHQUFZLGVBQWlCZ08sRUFBTyxjQUFnQnhGLEVBQVF4SSxTQUFTNkgsT0FBT21HLEdBQVEsT0FRNUYsT0FIQTdKLEVBQU8ySixFQUFnQixRQUFValYsRUFBTyxjQUFnQlksRUFBUXNVLEVBQVUvTixFQUFXLG9CQUFzQm1FLEVBQUsxSCxPQUFTLHFCQUV6SDBILEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLDZCQUE4Qm5FLEVBQU0zTixFQUFTZ1MsTUN4RGxGbkksRUFBUzBDLFVBQVUsU0FBUyxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUNuRCxhQTJCQSxPQUhBckUsR0FEQUEsR0FiQUEsR0FIQUEsR0FIQUEsR0FIQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsZUFBZ0JuRSxFQUFNM04sRUFBU2dTLElBR3REdkcsUUFBUSxZQUFhLFNBR3JCQSxRQUFRLE1BQU8sU0FHZkEsUUFBUSxjQUFjLFNBQVVFLEVBQVlDLEdBS3RELElBSkEsSUFBSTZMLEVBQWM3TCxFQUNkOEwsRUFBWSxFQUFJRCxFQUFZMVQsT0FBUyxFQUdoQ3pJLEVBQUksRUFBR0EsRUFBSW9jLEVBQVdwYyxJQUM3Qm1jLEdBQWUsSUFHakIsT0FBT0EsTUFJR2hNLFFBQVEsTUFBTyxTQUNmQSxRQUFRLE1BQU8sSUFFM0JrQyxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxjQUFlbkUsRUFBTTNOLEVBQVNnUyxNQzlCbkVuSSxFQUFTMEMsVUFBVSxZQUFZLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3RELGFBRUEsT0FBS2hTLEVBQVFzSixVQU1icUUsR0FGQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsa0JBQW1CbkUsRUFBTTNOLEVBQVNnUyxJQUV6RHZHLFFBQVEsVUFBVyxLQUUvQmtDLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGlCQUFrQm5FLEVBQU0zTixFQUFTZ1MsSUFQM0RyRSxLQ0NYOUQsRUFBUzBDLFVBQVUsU0FBUyxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUNuRCxhQUVBLElBQUtoUyxFQUFRb0osTUFDWCxPQUFPdUUsRUFnQlQsT0FUQUEsR0FKQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsZUFBZ0JuRSxFQUFNM04sRUFBU2dTLElBSXREdkcsUUFGRyxlQUVlLFNBQVUrSixFQUFJbUMsR0FDMUMsT0FBSTlOLEVBQVNpQixPQUFPaUcsT0FBTzVULGVBQWV3YSxHQUNqQzlOLEVBQVNpQixPQUFPaUcsT0FBTzRHLEdBRXpCbkMsS0FHVDdILEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGNBQWVuRSxFQUFNM04sRUFBU2dTLE1DcEJuRW5JLEVBQVMwQyxVQUFVLHVCQUF1QixTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUNqRSxhQWlCQSxPQUhBckUsR0FIQUEsR0FIQUEsR0FIQUEsR0FKQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsNkJBQThCbkUsRUFBTTNOLEVBQVNnUyxJQUlwRXZHLFFBQVEscUNBQXNDLFVBRzlDQSxRQUFRLG9CQUFxQixTQUc3QkEsUUFBUSxLQUFNLFNBR2RBLFFBQVEsS0FBTSxRQUUxQmtDLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLDRCQUE2Qm5FLEVBQU0zTixFQUFTZ1MsTUNUakZuSSxFQUFTMEMsVUFBVSwwQkFBMEIsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDcEUsYUFPQSxPQUhBckUsR0FEQUEsR0FGQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsZ0NBQWlDbkUsRUFBTTNOLEVBQVNnUyxJQUV2RXZHLFFBQVEsVUFBVzVCLEVBQVNpQixPQUFPWSwyQkFDbkNELFFBQVEsK0JBQWdDNUIsRUFBU2lCLE9BQU9ZLDBCQUVwRWlDLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLCtCQUFnQ25FLEVBQU0zTixFQUFTZ1MsTUNicEZuSSxFQUFTMEMsVUFBVSxjQUFjLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3hELGFBZUEsT0FUQXJFLEdBSkFBLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLG9CQUFxQm5FLEVBQU0zTixFQUFTZ1MsSUFLcEV2RyxRQUFRLEtBQU0sU0FFZEEsUUFBUSxLQUFNLFFBQ2RBLFFBQVEsS0FBTSxRQUVkQSxRQUFRLHFCQUFzQjVCLEVBQVNpQixPQUFPWSwwQkFFakRpQyxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxtQkFBb0JuRSxFQUFNM04sRUFBU2dTLE1DaEJ4RW5JLEVBQVMwQyxVQUFVLHlDQUF5QyxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUNuRixhQW1CQSxPQU5BckUsR0FOQUEsR0FOQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsK0NBQWdEbkUsRUFBTTNOLEVBQVNnUyxJQU10RnZHLFFBSEcsd0NBR1csU0FBVUUsR0FDbEMsT0FBT0EsRUFDSkYsUUFBUSxxQkFBc0IsT0FDOUJBLFFBQVEsZ0JBQWlCNUIsRUFBU2lCLE9BQU9ZLDhCQUdsQ0QsUUFSRyxpREFRZSxTQUFVRSxHQUN0QyxPQUFPQSxFQUNKRixRQUFRLGdCQUFpQjVCLEVBQVNpQixPQUFPWSw2QkFHOUNpQyxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSw4Q0FBK0NuRSxFQUFNM04sRUFBU2dTLE1DYm5HbkksRUFBUzBDLFVBQVUsb0JBQW9CLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQzlELGFBR0EsT0FBS2hTLEVBQVF3SSxjQUlibUYsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsMEJBQTJCbkUsRUFBTTNOLEVBQVNnUyxHQXdCN0VyRSxHQXBCQUEsR0FGQUEsR0FBUSxNQUVJbEMsUUFBUSw0RUFBNEUsU0FBVUUsRUFBWWlNLEVBQU9sRSxFQUFVeUQsR0FDckksSUFBSTVJLEVBQU92TyxFQUFRc0gsd0JBQTJCLEdBQUssS0FlbkQsT0FaQTZQLEVBQVl0TixFQUFTMEMsVUFBVSxhQUFuQjFDLENBQWlDc04sRUFBV25YLEVBQVNnUyxHQUtqRW1GLEVBQVksY0FBZ0J6RCxFQUFXLFdBQWFBLEVBQVcsYUFBZUEsRUFBVyxJQUFNLElBQU0sS0FGckd5RCxHQURBQSxHQURBQSxFQUFZdE4sRUFBUzBDLFVBQVUsUUFBbkIxQyxDQUE0QnNOLEVBQVduWCxFQUFTZ1MsSUFDdEN2RyxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQUVnRjhDLEVBQU0sZ0JBRTdINEksRUFBWXROLEVBQVMwQyxVQUFVLFlBQW5CMUMsQ0FBZ0NzTixFQUFXblgsRUFBU2dTLEdBS3pELFVBQVlBLEVBQVF4SixhQUFhcEMsS0FBSyxDQUFDdUgsS0FBTWhDLEVBQVl3TCxVQUFXQSxJQUFjLEdBQUssWUFJcEYxTCxRQUFRLEtBQU0sSUFFbkJ1RyxFQUFRWSxVQUFVZCxVQUFVLHlCQUEwQm5FLEVBQU0zTixFQUFTZ1MsSUE3Qm5FckUsS0NmWDlELEVBQVMwQyxVQUFVLGFBQWEsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDdkQsYUFLQSxPQUhBckUsR0FEQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsbUJBQW9CbkUsRUFBTTNOLEVBQVNnUyxJQUMxRHZHLFFBQVEsZUFBZ0IsSUFDcENrQyxFQUFPLFVBQVlxRSxFQUFRSSxZQUFZaE0sS0FBS3VILEdBQVEsR0FBSyxRQUN6REEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsa0JBQW1CbkUsRUFBTTNOLEVBQVNnUyxNQ0Z2RW5JLEVBQVMwQyxVQUFVLGdCQUFnQixTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUMxRCxhQUNBckUsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsc0JBQXVCbkUsRUFBTTNOLEVBQVNnUyxHQVd6RSxPQUhBckUsRUFBTzlELEVBQVNpQixPQUFPc0UsdUJBQXVCekIsR0FOaEMsU0FBVWhDLEVBQVlvRCxFQUFPWixFQUFNQyxHQUMvQyxJQUFJK0ksRUFBWWhKLEVBQU90RSxFQUFTMEMsVUFBVSxhQUFuQjFDLENBQWlDa0YsRUFBTy9PLEVBQVNnUyxHQUFXNUQsRUFDbkYsTUFBTyxNQUFRNEQsRUFBUU0sV0FBV2xNLEtBQUsrUSxHQUFhLEdBQUssTUFJRSxpQkFBa0IsVUFBVyxPQUUxRnhKLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLHFCQUFzQm5FLEVBQU0zTixFQUFTZ1MsTUNmMUVuSSxFQUFTMEMsVUFBVSxlQUFlLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3pELGFBRUEsT0FBTyxTQUFVckcsRUFBWUMsR0FDM0IsSUFBSWlNLEVBQVlqTSxFQVloQixPQUxBaU0sR0FIQUEsR0FEQUEsRUFBWUEsRUFBVXBNLFFBQVEsUUFBUyxPQUNqQkEsUUFBUSxNQUFPLEtBR2ZBLFFBQVEsUUFBUyxJQUd2Q29NLEVBQVksVUFBWTdGLEVBQVFJLFlBQVloTSxLQUFLeVIsR0FBYSxHQUFLLFlDZHZFaE8sRUFBUzBDLFVBQVUsa0JBQWtCLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQzVELGFBQ0FyRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSx3QkFBeUJuRSxFQUFNM04sRUFBU2dTLEdBRTNFLElBQUk4RixFQUFZLENBQ1YsTUFDQSxNQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLGFBQ0EsUUFDQSxLQUNBLEtBQ0EsS0FDQSxTQUNBLFdBQ0EsT0FDQSxXQUNBLFNBQ0EsT0FDQSxRQUNBLFVBQ0EsU0FDQSxTQUNBLE1BQ0EsVUFDQSxRQUNBLFVBQ0EsUUFDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFFBQ0EsS0FFRkMsRUFBVSxTQUFVcE0sRUFBWW9ELEVBQU9aLEVBQU1DLEdBQzNDLElBQUlKLEVBQU1yQyxFQU1WLE9BSHFDLElBQWpDd0MsRUFBSzJCLE9BQU8sa0JBQ2Q5QixFQUFNRyxFQUFPNkQsRUFBUVksVUFBVVQsU0FBU3BELEdBQVNYLEdBRTVDLFVBQVk0RCxFQUFRSSxZQUFZaE0sS0FBSzRILEdBQU8sR0FBSyxTQUcxRGhPLEVBQVFtSiwyQkFFVndFLEVBQU9BLEVBQUtsQyxRQUFRLG9CQUFvQixTQUFVK0osRUFBSXdDLEdBQ3BELE1BQU8sT0FBU0EsRUFBUyxXQUs3QixJQUFLLElBQUkxYyxFQUFJLEVBQUdBLEVBQUl3YyxFQUFVL1QsU0FBVXpJLEVBT3RDLElBTEEsSUFBSTJjLEVBQ0FDLEVBQVcsSUFBSTFNLE9BQU8sWUFBY3NNLEVBQVV4YyxHQUFLLGFBQWMsTUFDakU2YyxFQUFXLElBQU1MLEVBQVV4YyxHQUFLLFlBQ2hDOGMsRUFBVyxLQUFPTixFQUFVeGMsR0FBSyxLQUU2QixLQUExRDJjLEVBQVdwTyxFQUFTaUIsT0FBTzZFLGFBQWFoQyxFQUFNdUssS0FBZSxDQU1uRSxJQUFJRyxFQUFXeE8sRUFBU2lCLE9BQU9pRixhQUFhcEMsRUFBTXNLLEdBRTlDSyxFQUFjek8sRUFBU2lCLE9BQU9zRSx1QkFBdUJpSixFQUFTLEdBQUlOLEVBQVNJLEVBQVNDLEVBQVUsTUFHbEcsR0FBSUUsSUFBZ0JELEVBQVMsR0FDM0IsTUFFRjFLLEVBQU8wSyxFQUFTLEdBQUdFLE9BQU9ELEdBaUI5QixPQWJBM0ssRUFBT0EsRUFBS2xDLFFBQVEsb0RBQ2xCNUIsRUFBUzBDLFVBQVUsY0FBbkIxQyxDQUFrQzhELEVBQU0zTixFQUFTZ1MsSUFRbkRyRSxHQUxBQSxFQUFPOUQsRUFBU2lCLE9BQU9zRSx1QkFBdUJ6QixHQUFNLFNBQVVLLEdBQzVELE1BQU8sVUFBWWdFLEVBQVFJLFlBQVloTSxLQUFLNEgsR0FBTyxHQUFLLFVBQ3ZELGlCQUFlLFNBQU8sT0FHYnZDLFFBQVEseURBQ2xCNUIsRUFBUzBDLFVBQVUsY0FBbkIxQyxDQUFrQzhELEVBQU0zTixFQUFTZ1MsSUFFbkRyRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSx1QkFBd0JuRSxFQUFNM04sRUFBU2dTLE1DNUY1RW5JLEVBQVMwQyxVQUFVLGlCQUFpQixTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUMzRCxhQUdBLFNBQVN3RyxFQUFjQyxHQUNyQixNQUFPLE1BQVF6RyxFQUFRTSxXQUFXbE0sS0FBS3FTLEdBQVEsR0FBSyxJQTBCdEQsT0FQQTlLLEdBTEFBLEdBTEFBLEdBTEFBLEdBUEFBLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLHVCQUF3Qm5FLEVBQU0zTixFQUFTZ1MsSUFPOUR2RyxRQUFRLGdCQUFnQixTQUFVK0osR0FDNUMsT0FBT2dELEVBQWFoRCxPQUlWL0osUUFBUSw2QkFBNkIsU0FBVStKLEdBQ3pELE9BQU9nRCxFQUFhaEQsT0FJVi9KLFFBQVEscUNBQXFDLFNBQVUrSixHQUNqRSxPQUFPZ0QsRUFBYWhELE9BSVYvSixRQUFRLGNBQWMsU0FBVStKLEdBQzFDLE9BQU9nRCxFQUFhaEQsTUFLdEI3SCxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxzQkFBdUJuRSxFQUFNM04sRUFBU2dTLE1BTzNFbkksRUFBUzBDLFVBQVUsbUJBQW1CLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQzdELGFBQ0FyRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSx5QkFBMEJuRSxFQUFNM04sRUFBU2dTLEdBRTVFLElBQUssSUFBSTFXLEVBQUksRUFBR0EsRUFBSTBXLEVBQVFNLFdBQVd2TyxTQUFVekksRUFBRyxDQUtsRCxJQUpBLElBQUlvZCxFQUFVMUcsRUFBUU0sV0FBV2hYLEdBRTdCcWQsRUFBUSxFQUVOLFdBQVl2WixLQUFLc1osSUFBVSxDQUMvQixJQUFJRSxFQUFNcE4sT0FBTXFOLEdBRWhCLEdBREFILEVBQVVBLEVBQVFqTixRQUFRLEtBQU9tTixFQUFNLElBQUs1RyxFQUFRTSxXQUFXc0csSUFDakQsS0FBVkQsRUFBYyxDQUNoQjVMLFFBQVFsQyxNQUFNLDBDQUNkLFFBRUE4TixFQUVKaEwsRUFBT0EsRUFBS2xDLFFBQVEsS0FBT25RLEVBQUksSUFBS29kLEdBSXRDLE9BREEvSyxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSx3QkFBeUJuRSxFQUFNM04sRUFBU2dTLE1DMUQ3RW5JLEVBQVMwQyxVQUFVLG1CQUFtQixTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUM3RCxhQUNBckUsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUseUJBQTBCbkUsRUFBTTNOLEVBQVNnUyxHQVk1RSxPQUhBckUsRUFBTzlELEVBQVNpQixPQUFPc0UsdUJBQXVCekIsR0FQaEMsU0FBVWhDLEVBQVlvRCxFQUFPWixFQUFNQyxHQUUvQyxJQUFJK0ksRUFBWWhKLEVBQU90RSxFQUFTMEMsVUFBVSxhQUFuQjFDLENBQWlDa0YsRUFBTy9PLEVBQVNnUyxHQUFXNUQsRUFDbkYsTUFBTyxVQUFZNEQsRUFBUXhKLGFBQWFwQyxLQUFLLENBQUN1SCxLQUFNaEMsRUFBWXdMLFVBQVdBLElBQWMsR0FBSyxVQUluQyx5Q0FBMEMsMkJBQTRCLE9BRW5JeEosRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsd0JBQXlCbkUsRUFBTTNOLEVBQVNnUyxNQ2hCN0VuSSxFQUFTMEMsVUFBVSxXQUFXLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3JELGFBRUFyRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxpQkFBa0JuRSxFQUFNM04sRUFBU2dTLEdBRXBFLElBQUlqSyxFQUFvQitRLE1BQU1DLFNBQVMvWSxFQUFRK0gsbUJBQXNCLEVBQUlnUixTQUFTL1ksRUFBUStILGtCQVN0RmlSLEVBQWlCaFosRUFBUTBJLGtCQUFxQixnQ0FBa0MsNkJBQ2hGdVEsRUFBaUJqWixFQUFRMEksa0JBQXFCLGdDQUFrQyw2QkFXcEZpRixHQVRBQSxFQUFPQSxFQUFLbEMsUUFBUXVOLEdBQWUsU0FBVXJOLEVBQVlDLEdBRXZELElBQUlzTixFQUFZclAsRUFBUzBDLFVBQVUsWUFBbkIxQyxDQUFnQytCLEVBQUk1TCxFQUFTZ1MsR0FDekRtSCxFQUFPblosRUFBUTBILFdBQWMsR0FBSyxRQUFVMFIsRUFBU3hOLEdBQU0sSUFFM0R5TixFQUFZLEtBREh0UixFQUNtQm9SLEVBQU0sSUFBTUQsRUFBWSxNQUQzQ25SLEVBQzRELElBQ3pFLE9BQU84QixFQUFTMEMsVUFBVSxZQUFuQjFDLENBQWdDd1AsRUFBV3JaLEVBQVNnUyxPQUdqRHZHLFFBQVF3TixHQUFlLFNBQVVLLEVBQVkxTixHQUN2RCxJQUFJc04sRUFBWXJQLEVBQVMwQyxVQUFVLFlBQW5CMUMsQ0FBZ0MrQixFQUFJNUwsRUFBU2dTLEdBQ3pEbUgsRUFBT25aLEVBQVEwSCxXQUFjLEdBQUssUUFBVTBSLEVBQVN4TixHQUFNLElBQzNEMk4sRUFBU3hSLEVBQW1CLEVBQzVCc1IsRUFBWSxLQUFPRSxFQUFTSixFQUFNLElBQU1ELEVBQVksTUFBUUssRUFBUyxJQUN6RSxPQUFPMVAsRUFBUzBDLFVBQVUsWUFBbkIxQyxDQUFnQ3dQLEVBQVdyWixFQUFTZ1MsTUFVN0QsSUFBSXdILEVBQVl4WixFQUFROEksOEJBQWlDLG9DQUFzQyxvQ0FnQi9GLFNBQVNzUSxFQUFVMWQsR0FDakIsSUFBSXVILEVBQ0F3VyxFQUdKLEdBQUl6WixFQUFRMFosbUJBQW9CLENBQzlCLElBQUkzSyxFQUFRclQsRUFBRXFULE1BQU0sbUJBQ2hCQSxHQUFTQSxFQUFNLEtBQ2pCclQsRUFBSXFULEVBQU0sSUF1RGQsT0FuREE5TCxFQUFRdkgsRUFJTitkLEVBREU1UCxFQUFTaUIsT0FBT0ksU0FBU2xMLEVBQVEySCxnQkFDMUIzSCxFQUFRMkgsZ0JBQ21CLElBQTNCM0gsRUFBUTJILGVBQ1IsV0FFQSxHQUdOM0gsRUFBUTRILG9CQUNYM0UsRUFBUXdXLEVBQVN4VyxHQUlqQkEsRUFERWpELEVBQVE2SCxxQkFDRjVFLEVBQ0x3SSxRQUFRLEtBQU0sS0FFZEEsUUFBUSxTQUFVLElBQ2xCQSxRQUFRLE1BQU8sSUFDZkEsUUFBUSxNQUFPLElBR2ZBLFFBQVEseUNBQTBDLElBQ2xETixjQUNNbkwsRUFBUThILFlBQ1Q3RSxFQUNMd0ksUUFBUSxLQUFNLEtBRWRBLFFBQVEsU0FBVSxLQUNsQkEsUUFBUSxNQUFPLEtBQ2ZBLFFBQVEsTUFBTyxLQUVmQSxRQUFRLFFBQVMsS0FDakJOLGNBRUtsSSxFQUNMd0ksUUFBUSxTQUFVLElBQ2xCTixjQUdEbkwsRUFBUTRILG9CQUNWM0UsRUFBUXdXLEVBQVN4VyxHQUdmK08sRUFBUVcsZUFBZTFQLEdBQ3pCQSxFQUFRQSxFQUFRLElBQU8rTyxFQUFRVyxlQUFlMVAsS0FFOUMrTyxFQUFRVyxlQUFlMVAsR0FBUyxFQUUzQkEsRUFJVCxPQWpGQTBLLEVBQU9BLEVBQUtsQyxRQUFRK04sR0FBVSxTQUFVN04sRUFBWUMsRUFBSTBLLEdBQ3RELElBQUlxRCxFQUFRckQsRUFDUnRXLEVBQVEwWixxQkFDVkMsRUFBUXJELEVBQUc3SyxRQUFRLHFCQUFzQixLQUczQyxJQUFJbU8sRUFBTy9QLEVBQVMwQyxVQUFVLFlBQW5CMUMsQ0FBZ0M4UCxFQUFPM1osRUFBU2dTLEdBQ3ZEbUgsRUFBT25aLEVBQVEwSCxXQUFjLEdBQUssUUFBVTBSLEVBQVM5QyxHQUFNLElBQzNEaUQsRUFBU3hSLEVBQW1CLEVBQUk2RCxFQUFHN0gsT0FDbkM5QyxFQUFTLEtBQU9zWSxFQUFTSixFQUFNLElBQU1TLEVBQU8sTUFBUUwsRUFBUyxJQUVqRSxPQUFPMVAsRUFBUzBDLFVBQVUsWUFBbkIxQyxDQUFnQzVJLEVBQVFqQixFQUFTZ1MsTUFxRTFEckUsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsZ0JBQWlCbkUsRUFBTTNOLEVBQVNnUyxNQ3hIckVuSSxFQUFTMEMsVUFBVSxrQkFBa0IsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDNUQsYUFDQXJFLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLHdCQUF5Qm5FLEVBQU0zTixFQUFTZ1MsR0FFM0UsSUFBSW5WLEVBQU1nTixFQUFTMEMsVUFBVSxZQUFuQjFDLENBQTZCLFNBQWE3SixFQUFTZ1MsR0FNN0QsT0FIQXJFLEdBREFBLEdBREFBLEVBQU9BLEVBQUtsQyxRQUFRLDRCQUE2QjVPLElBQ3JDNE8sUUFBUSw2QkFBOEI1TyxJQUN0QzRPLFFBQVEsNEJBQTZCNU8sR0FFakQ4USxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSx1QkFBd0JuRSxFQUFNM04sRUFBU2dTLE1DVDVFbkksRUFBUzBDLFVBQVUsVUFBVSxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUNwRCxhQWVBLFNBQVM2SCxFQUFlbE8sRUFBWW1PLEVBQVN6RSxFQUFRbFMsRUFBSzRXLEVBQU9DLEVBQVExRSxFQUFJclMsR0FFM0UsSUFBSXNQLEVBQVVQLEVBQVFPLE1BQ2xCQyxFQUFVUixFQUFRUSxRQUNsQnlILEVBQVVqSSxFQUFRUyxZQVF0QixHQU5BNEMsRUFBU0EsRUFBT2xLLGNBRVhsSSxJQUNIQSxFQUFRLElBR04wSSxFQUFXbUUsT0FBTyxpQ0FBbUMsRUFDdkQzTSxFQUFNLFFBRUQsR0FBWSxLQUFSQSxHQUFzQixPQUFSQSxFQUFjLENBT3JDLEdBTmUsS0FBWGtTLEdBQTRCLE9BQVhBLElBRW5CQSxFQUFTeUUsRUFBUTNPLGNBQWNNLFFBQVEsUUFBUyxNQUVsRHRJLEVBQU0sSUFBTWtTLEVBRVB4TCxFQUFTaUIsT0FBT00sWUFBWW1ILEVBQU04QyxJQVVyQyxPQUFPMUosRUFUUHhJLEVBQU1vUCxFQUFNOEMsR0FDUHhMLEVBQVNpQixPQUFPTSxZQUFZb0gsRUFBUTZDLE1BQ3ZDcFMsRUFBUXVQLEVBQVE2QyxJQUVieEwsRUFBU2lCLE9BQU9NLFlBQVk2TyxFQUFNNUUsTUFDckMwRSxFQUFRRSxFQUFNNUUsR0FBUTBFLE1BQ3RCQyxFQUFTQyxFQUFNNUUsR0FBUTJFLFFBTzdCRixFQUFVQSxFQUNQck8sUUFBUSxLQUFNLFVBRWRBLFFBQVE1QixFQUFTaUIsT0FBTytGLFFBQVFDLHFCQUFzQmpILEVBQVNpQixPQUFPWSwwQkFHekUsSUFBSWxILEVBQVMsY0FEYnJCLEVBQU1BLEVBQUlzSSxRQUFRNUIsRUFBU2lCLE9BQU8rRixRQUFRQyxxQkFBc0JqSCxFQUFTaUIsT0FBT1ksMkJBQzlDLFVBQVlvTyxFQUFVLElBb0J4RCxPQWxCSTdXLEdBQVM0RyxFQUFTaUIsT0FBT0ksU0FBU2pJLEtBS3BDdUIsR0FBVSxZQUpWdkIsRUFBUUEsRUFDTHdJLFFBQVEsS0FBTSxVQUVkQSxRQUFRNUIsRUFBU2lCLE9BQU8rRixRQUFRQyxxQkFBc0JqSCxFQUFTaUIsT0FBT1ksMkJBQzFDLEtBRzdCcU8sR0FBU0MsSUFJWHhWLEdBQVUsWUFIVnVWLEVBQW9CLE1BQVZBLEVBQWlCLE9BQVNBLEdBR0wsSUFDL0J2VixHQUFVLGFBSFZ3VixFQUFxQixNQUFYQSxFQUFrQixPQUFTQSxHQUdKLEtBR25DeFYsR0FBVSxNQXVCWixPQUhBbUosR0FIQUEsR0FIQUEsR0FIQUEsR0FMQUEsR0EvRUFBLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGdCQUFpQm5FLEVBQU0zTixFQUFTZ1MsSUErRXZEdkcsUUExRVksbURBMEVhb08sSUFLekJwTyxRQWhGWSxzS0FJeEIsU0FBOEJFLEVBQVltTyxFQUFTekUsRUFBUWxTLEVBQUs0VyxFQUFPQyxFQUFRMUUsRUFBSXJTLEdBRWpGLE9BQU80VyxFQUFlbE8sRUFBWW1PLEVBQVN6RSxFQUQzQ2xTLEVBQU1BLEVBQUlzSSxRQUFRLE1BQU8sSUFDK0JzTyxFQUFPQyxFQUFRMUUsRUFBSXJTLE9BNkVqRXdJLFFBcEZZLHFJQW9GU29PLElBR3JCcE8sUUF4RlkseUpBd0ZVb08sSUFHdEJwTyxRQXZGWSw0QkF1RmVvTyxHQUV2Q2xNLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGVBQWdCbkUsRUFBTTNOLEVBQVNnUyxNQ3JHcEVuSSxFQUFTMEMsVUFBVSxrQkFBa0IsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDNUQsYUFRQSxTQUFTa0ksRUFBYWxNLEVBQUtHLEVBQU1DLEdBTS9CLE9BQU9ELEVBQU9ILEVBQU1JLEVBcUR0QixPQWpFQVQsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsd0JBQXlCbkUsRUFBTTNOLEVBQVNnUyxHQXVCekVyRSxFQVBFM04sRUFBUW1JLDJCQUlWd0YsR0FIQUEsRUFBT0EsRUFBS2xDLFFBQVEsMkJBQTJCLFNBQVUrSixFQUFJeEgsR0FDM0QsT0FBT2tNLEVBQWFsTSxFQUFLLGVBQWdCLHNCQUUvQnZDLFFBQVEseUJBQXlCLFNBQVUrSixFQUFJeEgsR0FDekQsT0FBT2tNLEVBQWFsTSxFQUFLLFdBQVksaUJBRTNCdkMsUUFBUSx1QkFBdUIsU0FBVStKLEVBQUl4SCxHQUN2RCxPQUFPa00sRUFBYWxNLEVBQUssT0FBUSxhQU1uQ0wsR0FIQUEsRUFBT0EsRUFBS2xDLFFBQVEsdUJBQXVCLFNBQVUrSixFQUFJOVosR0FDdkQsTUFBTyxNQUFPMEQsS0FBSzFELEdBQU13ZSxFQUFheGUsRUFBRyxlQUFnQixrQkFBb0I4WixNQUVuRS9KLFFBQVEscUJBQXFCLFNBQVUrSixFQUFJOVosR0FDckQsTUFBTyxNQUFPMEQsS0FBSzFELEdBQU13ZSxFQUFheGUsRUFBRyxXQUFZLGFBQWU4WixNQUUxRC9KLFFBQVEsdUJBQXVCLFNBQVUrSixFQUFJOVosR0FFdkQsTUFBTyxNQUFPMEQsS0FBSzFELEdBQU13ZSxFQUFheGUsRUFBRyxPQUFRLFNBQVc4WixLQVk5RDdILEVBUEUzTixFQUFRb0kseUJBSVZ1RixHQUhBQSxFQUFPQSxFQUFLbEMsUUFBUSwrQ0FBK0MsU0FBVStKLEVBQUkyRSxFQUFNbk0sR0FDckYsT0FBT2tNLEVBQWFsTSxFQUFLbU0sRUFBTyxlQUFnQixzQkFFdEMxTyxRQUFRLDJDQUEyQyxTQUFVK0osRUFBSTJFLEVBQU1uTSxHQUNqRixPQUFPa00sRUFBYWxNLEVBQUttTSxFQUFPLFdBQVksaUJBRWxDMU8sUUFBUSx1Q0FBdUMsU0FBVStKLEVBQUkyRSxFQUFNbk0sR0FDN0UsT0FBT2tNLEVBQWFsTSxFQUFLbU0sRUFBTyxPQUFRLGFBTTFDeE0sR0FIQUEsRUFBT0EsRUFBS2xDLFFBQVEsNkJBQTZCLFNBQVUrSixFQUFJOVosR0FDN0QsTUFBTyxNQUFPMEQsS0FBSzFELEdBQU13ZSxFQUFheGUsRUFBRyxlQUFnQixrQkFBb0I4WixNQUVuRS9KLFFBQVEseUJBQXlCLFNBQVUrSixFQUFJOVosR0FDekQsTUFBTyxNQUFPMEQsS0FBSzFELEdBQU13ZSxFQUFheGUsRUFBRyxXQUFZLGFBQWU4WixNQUUxRC9KLFFBQVEseUJBQXlCLFNBQVUrSixFQUFJOVosR0FFekQsTUFBTyxNQUFPMEQsS0FBSzFELEdBQU13ZSxFQUFheGUsRUFBRyxPQUFRLFNBQVc4WixLQUtoRTdILEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLHVCQUF3Qm5FLEVBQU0zTixFQUFTZ1MsTUNoRTVFbkksRUFBUzBDLFVBQVUsU0FBUyxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUNuRCxhQVNBLFNBQVNvSSxFQUFrQkMsRUFBU0MsR0FxQmxDdEksRUFBUVUsYUFHUjJILEVBQVVBLEVBQVE1TyxRQUFRLFVBQVcsTUFLckMsSUFBSXFILEVBQU0sbUhBQ055SCxFQUFnQixtQkFBb0JuYixLQUh4Q2liLEdBQVcsTUFpRlgsT0F6RUlyYSxFQUFRNEksdUNBQ1ZrSyxFQUFNLGdIQWdFUnVILEdBN0RBQSxFQUFVQSxFQUFRNU8sUUFBUXFILEdBQUssU0FBVW5ILEVBQVlDLEVBQUkwSyxFQUFJQyxFQUFJaUUsRUFBSUMsRUFBU0MsR0FDNUVBLEVBQVdBLEdBQThCLEtBQW5CQSxFQUFRelUsT0FFOUIsSUFBSU4sRUFBT2tFLEVBQVMwQyxVQUFVLFVBQW5CMUMsQ0FBOEIyUSxFQUFJeGEsRUFBU2dTLEdBQ2xEMkksRUFBYyxHQXFEbEIsT0FsRElGLEdBQVd6YSxFQUFReUksWUFDckJrUyxFQUFjLHlEQUNkaFYsRUFBT0EsRUFBSzhGLFFBQVEsdUJBQXVCLFdBQ3pDLElBQUltUCxFQUFNLG9HQUtWLE9BSklGLElBQ0ZFLEdBQU8sWUFFVEEsR0FBTyxRQWFYalYsRUFBT0EsRUFBSzhGLFFBQVEsZ0NBQWdDLFNBQVVvUCxHQUM1RCxNQUFPLEtBQU9BLEtBTVpqUCxHQUFPakcsRUFBS21LLE9BQU8sV0FBYSxHQUNsQ25LLEVBQU9rRSxFQUFTMEMsVUFBVSxtQkFBbkIxQyxDQUF1Q2xFLEVBQU0zRixFQUFTZ1MsR0FDN0RyTSxFQUFPa0UsRUFBUzBDLFVBQVUsYUFBbkIxQyxDQUFpQ2xFLEVBQU0zRixFQUFTZ1MsS0FJdkRyTSxHQURBQSxFQUFPa0UsRUFBUzBDLFVBQVUsUUFBbkIxQyxDQUE0QmxFLEVBQU0zRixFQUFTZ1MsSUFDdEN2RyxRQUFRLE1BQU8sSUFJM0I5RixHQUhBQSxFQUFPa0UsRUFBUzBDLFVBQVUsaUJBQW5CMUMsQ0FBcUNsRSxFQUFNM0YsRUFBU2dTLElBRy9DdkcsUUFBUSxTQUFVLFFBRTVCOUYsRUFERTRVLEVBQ0sxUSxFQUFTMEMsVUFBVSxhQUFuQjFDLENBQWlDbEUsRUFBTTNGLEVBQVNnUyxHQUVoRG5JLEVBQVMwQyxVQUFVLFlBQW5CMUMsQ0FBZ0NsRSxFQUFNM0YsRUFBU2dTLElBTzFEck0sRUFBUSxNQUFRZ1YsRUFBYyxLQUY5QmhWLEVBQU9BLEVBQUs4RixRQUFRLEtBQU0sS0FFaUIsY0FNM0JBLFFBQVEsTUFBTyxJQUVqQ3VHLEVBQVFVLGFBRUo0SCxJQUNGRCxFQUFVQSxFQUFRNU8sUUFBUSxPQUFRLEtBRzdCNE8sRUFHVCxTQUFTUyxFQUFrQjFaLEVBQU0yWixHQUUvQixHQUFpQixPQUFiQSxFQUFtQixDQUNyQixJQUFJM1csRUFBTWhELEVBQUsyTixNQUFNLGNBQ3JCLEdBQUkzSyxHQUFrQixNQUFYQSxFQUFJLEdBQ2IsTUFBTyxXQUFhQSxFQUFJLEdBQUssSUFHakMsTUFBTyxHQVVULFNBQVM0VyxFQUF1QjVaLEVBQU0yWixFQUFVVCxHQUc5QyxJQUFJVyxFQUFTamIsRUFBUTRJLHFDQUF3QyxrQkFBb0Isc0JBQzdFc1MsRUFBU2xiLEVBQVE0SSxxQ0FBd0Msa0JBQW9CLHNCQUM3RXVTLEVBQTJCLE9BQWJKLEVBQXFCRSxFQUFRQyxFQUMzQzFXLEVBQVMsR0FFYixJQUFpQyxJQUE3QnBELEVBQUswTyxPQUFPcUwsSUFDZCxTQUFVQyxFQUFTcE4sR0FDakIsSUFBSVcsRUFBTVgsRUFBSThCLE9BQU9xTCxHQUNqQjVjLEVBQVF1YyxFQUFpQjFaLEVBQU0yWixJQUN0QixJQUFUcE0sR0FFRm5LLEdBQVUsUUFBVXVXLEVBQVd4YyxFQUFRLE1BQVE2YixFQUFpQnBNLEVBQUltQixNQUFNLEVBQUdSLEtBQVEyTCxHQUFnQixLQUFPUyxFQUFXLE1BSXZISSxFQUEyQixRQUQzQkosRUFBeUIsT0FBYkEsRUFBcUIsS0FBTyxNQUNMRSxFQUFRQyxFQUczQ0UsRUFBUXBOLEVBQUltQixNQUFNUixLQUVsQm5LLEdBQVUsUUFBVXVXLEVBQVd4YyxFQUFRLE1BQVE2YixFQUFpQnBNLElBQU9zTSxHQUFnQixLQUFPUyxFQUFXLE1BZDdHLENBZ0JHM1osT0FDRSxDQUNMLElBQUk3QyxFQUFRdWMsRUFBaUIxWixFQUFNMlosR0FDbkN2VyxFQUFTLFFBQVV1VyxFQUFXeGMsRUFBUSxNQUFRNmIsRUFBaUJoWixJQUFRa1osR0FBZ0IsS0FBT1MsRUFBVyxNQUczRyxPQUFPdlcsRUE0QlQsT0F4QkFtSixFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxlQUFnQm5FLEVBQU0zTixFQUFTZ1MsR0FHbEVyRSxHQUFRLEtBbUJSQSxHQWhCRUEsRUFERXFFLEVBQVFVLFdBQ0gvRSxFQUFLbEMsUUFBUSw2RkFDbEIsU0FBVUUsRUFBWXZLLEVBQU1rVixHQUUxQixPQUFPMEUsRUFBc0I1WixFQURia1YsRUFBR3hHLE9BQU8sV0FBYSxFQUFLLEtBQU8sTUFDTixNQUkxQ25DLEVBQUtsQyxRQUFRLHVHQUNsQixTQUFVRSxFQUFZQyxFQUFJeEssRUFBTW1WLEdBRTlCLE9BQU95RSxFQUFzQjVaLEVBRGJtVixFQUFHekcsT0FBTyxXQUFhLEVBQUssS0FBTyxNQUNOLE9BTXZDckUsUUFBUSxLQUFNLElBQzFCa0MsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsY0FBZW5FLEVBQU0zTixFQUFTZ1MsTUNyTW5FbkksRUFBUzBDLFVBQVUsWUFBWSxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUN0RCxhQUVBLElBQUtoUyxFQUFRd0osU0FDWCxPQUFPbUUsRUFLVCxTQUFTME4sRUFBdUJ6WixHQUU5Qm9RLEVBQVF4SSxTQUFTOEgsSUFBTTFQLEdBVXZCQSxHQU5BQSxFQUFVQSxFQUVQNkosUUFBUSxLQUFNLFNBRWRBLFFBQVEsS0FBTSxXQUVDQSxRQUFRLFVBQVcsTUFDN0JBLFFBQVEsNkJBQTZCLFNBQVUrSixFQUFJM1ksRUFBS04sR0FFOUQsT0FEQXlWLEVBQVF4SSxTQUFTNkgsT0FBT3hVLEdBQU9OLEVBQ3hCLE1Bb0JYLE9BSEFvUixHQVJBQSxHQUxBQSxHQXJCQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsa0JBQW1CbkUsRUFBTTNOLEVBQVNnUyxJQXFCekR2RyxRQUFRLHNDQUFzQyxTQUFVNlAsRUFBWS9KLEVBQVEzUCxHQUV0RixPQURBeVosRUFBc0J6WixHQUNmLFNBR0c2SixRQUFRLHNDQUFzQyxTQUFVNlAsRUFBWS9KLEVBQVEzUCxHQUt0RixPQUpJMlAsSUFDRlMsRUFBUXhJLFNBQVMrSCxPQUFTQSxHQUU1QjhKLEVBQXNCelosR0FDZixTQUdHNkosUUFBUSxNQUFPLElBRTNCa0MsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsaUJBQWtCbkUsRUFBTTNOLEVBQVNnUyxNQzNDdEVuSSxFQUFTMEMsVUFBVSxXQUFXLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ3JELGFBV0EsT0FIQXJFLEdBSEFBLEdBSkFBLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGlCQUFrQm5FLEVBQU0zTixFQUFTZ1MsSUFJeER2RyxRQUFRLG1CQUFvQixPQUc1QkEsUUFBUSxNQUFPLElBRTNCa0MsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsZ0JBQWlCbkUsRUFBTTNOLEVBQVNnUyxNQ1hyRW5JLEVBQVMwQyxVQUFVLGNBQWMsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDeEQsYUFXQSxJQUpBLElBQUl1SixHQUZKNU4sR0FEQUEsR0FGQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsb0JBQXFCbkUsRUFBTTNOLEVBQVNnUyxJQUUzRHZHLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxRQUFTLEtBRVozRixNQUFNLFdBQ25CMFYsRUFBVyxHQUNYak4sRUFBTWdOLEVBQU14WCxPQUVQekksRUFBSSxFQUFHQSxFQUFJaVQsRUFBS2pULElBQUssQ0FDNUIsSUFBSTRTLEVBQU1xTixFQUFNamdCLEdBRVo0UyxFQUFJNEIsT0FBTyxtQkFBcUIsRUFDbEMwTCxFQUFTcFYsS0FBSzhILEdBSUxBLEVBQUk0QixPQUFPLE9BQVMsSUFFN0I1QixHQURBQSxFQUFNckUsRUFBUzBDLFVBQVUsWUFBbkIxQyxDQUFnQ3FFLEVBQUtsTyxFQUFTZ1MsSUFDMUN2RyxRQUFRLGFBQWMsT0FDaEN5QyxHQUFPLE9BQ1BzTixFQUFTcFYsS0FBSzhILElBTWxCLElBREFLLEVBQU1pTixFQUFTelgsT0FDVnpJLEVBQUksRUFBR0EsRUFBSWlULEVBQUtqVCxJQUFLLENBTXhCLElBTEEsSUFBSXVjLEVBQVksR0FDWjRELEVBQWFELEVBQVNsZ0IsR0FDdEJvZ0IsR0FBVyxFQUdULGdCQUFpQnRjLEtBQUtxYyxJQUFhLENBQ3ZDLElBQUk3RCxFQUFRcE0sT0FBTXFOLEdBQ2RELEVBQVFwTixPQUFNbVEsR0FhbEI5RCxHQVZFQSxFQURZLE1BQVZELEVBQ1U1RixFQUFRSSxZQUFZd0csR0FHNUI4QyxFQUVVN1IsRUFBUzBDLFVBQVUsYUFBbkIxQyxDQUFpQ21JLEVBQVF4SixhQUFhb1EsR0FBS2pMLEtBQU0zTixFQUFTZ1MsR0FFMUVBLEVBQVF4SixhQUFhb1EsR0FBS3pCLFdBR3BCMUwsUUFBUSxNQUFPLFFBRXJDZ1EsRUFBYUEsRUFBV2hRLFFBQVEsNEJBQTZCb00sR0FFMUQsZ0NBQWlDelksS0FBS3FjLEtBQ3ZDQyxHQUFXLEdBR2ZGLEVBQVNsZ0IsR0FBS21nQixFQU1oQixPQURBOU4sR0FEQUEsR0FGQUEsRUFBTzZOLEVBQVM5TCxLQUFLLE9BRVRqRSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxJQUN0QnVHLEVBQVFZLFVBQVVkLFVBQVUsbUJBQW9CbkUsRUFBTTNOLEVBQVNnUyxNQ2pFeEVuSSxFQUFTMEMsVUFBVSxnQkFBZ0IsU0FBVXRCLEVBQUswQyxFQUFNM04sRUFBU2dTLEdBQy9ELGFBRUEsR0FBSS9HLEVBQUlwRSxPQUNOOEcsRUFBTzFDLEVBQUlwRSxPQUFPOEcsRUFBTXFFLEVBQVFZLFVBQVc1UyxRQUV0QyxHQUFJaUwsRUFBSUssTUFBTyxDQUVwQixJQUFJc1EsRUFBSzNRLEVBQUlLLE1BQ1BzUSxhQUFjcFEsU0FDbEJvUSxFQUFLLElBQUlwUSxPQUFPb1EsRUFBSSxNQUV0QmpPLEVBQU9BLEVBQUtsQyxRQUFRbVEsRUFBSTNRLEVBQUlRLFNBRzlCLE9BQU9rQyxLQ2RUOUQsRUFBUzBDLFVBQVUsYUFBYSxTQUFVb0IsRUFBTTNOLEVBQVNnUyxHQUN2RCxhQTBDQSxPQXhDQXJFLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLG1CQUFvQm5FLEVBQU0zTixFQUFTZ1MsR0FDdEVyRSxFQUFPOUQsRUFBUzBDLFVBQVUsWUFBbkIxQyxDQUFnQzhELEVBQU0zTixFQUFTZ1MsR0FDdERyRSxFQUFPOUQsRUFBUzBDLFVBQVUsd0NBQW5CMUMsQ0FBNEQ4RCxFQUFNM04sRUFBU2dTLEdBQ2xGckUsRUFBTzlELEVBQVMwQyxVQUFVLHlCQUFuQjFDLENBQTZDOEQsRUFBTTNOLEVBQVNnUyxHQUluRXJFLEVBQU85RCxFQUFTMEMsVUFBVSxTQUFuQjFDLENBQTZCOEQsRUFBTTNOLEVBQVNnUyxHQUNuRHJFLEVBQU85RCxFQUFTMEMsVUFBVSxVQUFuQjFDLENBQThCOEQsRUFBTTNOLEVBQVNnUyxHQUtwRHJFLEVBQU85RCxFQUFTMEMsVUFBVSxZQUFuQjFDLENBQWdDOEQsRUFBTTNOLEVBQVNnUyxHQUN0RHJFLEVBQU85RCxFQUFTMEMsVUFBVSxzQkFBbkIxQyxDQUEwQzhELEVBQU0zTixFQUFTZ1MsR0FDaEVyRSxFQUFPOUQsRUFBUzBDLFVBQVUsUUFBbkIxQyxDQUE0QjhELEVBQU0zTixFQUFTZ1MsR0FDbERyRSxFQUFPOUQsRUFBUzBDLFVBQVUsWUFBbkIxQyxDQUFnQzhELEVBQU0zTixFQUFTZ1MsR0FDdERyRSxFQUFPOUQsRUFBUzBDLFVBQVUsaUJBQW5CMUMsQ0FBcUM4RCxFQUFNM04sRUFBU2dTLEdBQzNEckUsRUFBTzlELEVBQVMwQyxVQUFVLGdCQUFuQjFDLENBQW9DOEQsRUFBTTNOLEVBQVNnUyxHQUMxRHJFLEVBQU85RCxFQUFTMEMsVUFBVSxXQUFuQjFDLENBQStCOEQsRUFBTTNOLEVBQVNnUyxHQUdyRHJFLEVBQU85RCxFQUFTMEMsVUFBVSxnQkFBbkIxQyxDQUFvQzhELEVBQU0zTixFQUFTZ1MsR0FHMURyRSxFQUFPOUQsRUFBUzBDLFVBQVUsc0JBQW5CMUMsQ0FBMEM4RCxFQUFNM04sRUFBU2dTLEdBRzVEaFMsRUFBUTZJLGlCQUdQLFNBQVd6SixLQUFLdU8sS0FDakJBLEVBQU9BLEVBQUtsQyxRQUFRLE9BQVEsYUFJOUJrQyxFQUFPQSxFQUFLbEMsUUFBUSxTQUFVLFlBR2hDa0MsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsa0JBQW1CbkUsRUFBTTNOLEVBQVNnUyxNQzlDdkVuSSxFQUFTMEMsVUFBVSxpQkFBaUIsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDM0QsYUFlQSxPQU5JaFMsRUFBUXFJLGdCQUVWc0YsR0FEQUEsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsdUJBQXdCbkUsRUFBTTNOLEVBQVNnUyxJQUM5RHZHLFFBQVEsK0JBQStCLFNBQVUrSixFQUFJeEgsR0FBTyxPQVQxRSxTQUFzQkEsR0FJcEIsT0FISWhPLEVBQVFpSSxxQkFDVitGLEVBQU1uRSxFQUFTMEMsVUFBVSxzQkFBbkIxQyxDQUEwQ21FLEVBQUtoTyxFQUFTZ1MsSUFFekQsUUFBVWhFLEVBQU0sU0FLd0RrTSxDQUFZbE0sTUFDM0ZMLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLHNCQUF1Qm5FLEVBQU0zTixFQUFTZ1MsSUFHcEVyRSxLQ1hUOUQsRUFBUzBDLFVBQVUsd0JBQXdCLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ2xFLGFBRUEsSUFNSTZKLEVBQWMsU0FBVWxRLEVBQVkwSixFQUFRbFMsRUFBSzRXLEVBQU9DLEVBQVE4QixFQUFZN1ksR0FJOUUsT0FEQW9TLEVBQVNBLEVBQU9sSyxjQUNad0MsRUFBS3hDLGNBQWNyRixNQUFNdVAsR0FBUXRSLE9BQVMsRUFBSSxFQUN6QzRILEdBRUx4SSxFQUFJNEwsTUFBTSwwQkFFWmlELEVBQVFPLE1BQU04QyxHQUFVbFMsRUFBSXNJLFFBQVEsTUFBTyxJQUUzQ3VHLEVBQVFPLE1BQU04QyxHQUFVeEwsRUFBUzBDLFVBQVUsc0JBQW5CMUMsQ0FBMEMxRyxFQUFLbkQsRUFBU2dTLEdBRzlFOEosRUFHS0EsRUFBYTdZLEdBR2hCQSxJQUNGK08sRUFBUVEsUUFBUTZDLEdBQVVwUyxFQUFNd0ksUUFBUSxPQUFRLFdBRTlDekwsRUFBUWdJLG9CQUFzQitSLEdBQVNDLElBQ3pDaEksRUFBUVMsWUFBWTRDLEdBQVUsQ0FDNUIwRSxNQUFRQSxFQUNSQyxPQUFRQSxJQUtQLE1BV1QsT0FGQXJNLEdBSEFBLEdBRkFBLEdBckNBQSxHQUFRLE1BcUNJbEMsUUF4Q00sZ05Bd0Nlb1EsSUFFckJwUSxRQTNDTSxzS0EyQ1NvUSxJQUdmcFEsUUFBUSxLQUFNLE9DdEQ1QjVCLEVBQVMwQyxVQUFVLFVBQVUsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDcEQsYUFFQSxJQUFLaFMsRUFBUXNJLE9BQ1gsT0FBT3FGLEVBK0JULFNBQVNvTyxFQUFZQyxFQUFNemQsR0FFekIsTUFBTyxNQUFRQSxFQUFRLElBRFRzTCxFQUFTMEMsVUFBVSxZQUFuQjFDLENBQWdDbVMsRUFBTWhjLEVBQVNnUyxHQUN0QixVQXVCekMsU0FBU2lLLEVBQVlDLEdBQ25CLElBQUk1Z0IsRUFBRzZnQixFQUFhRCxFQUFTcFcsTUFBTSxNQUVuQyxJQUFLeEssRUFBSSxFQUFHQSxFQUFJNmdCLEVBQVdwWSxTQUFVekksRUFFaEMsWUFBYThELEtBQUsrYyxFQUFXN2dCLE1BQzlCNmdCLEVBQVc3Z0IsR0FBSzZnQixFQUFXN2dCLEdBQUdtUSxRQUFRLFlBQWEsS0FFbEQsWUFBYXJNLEtBQUsrYyxFQUFXN2dCLE1BQzlCNmdCLEVBQVc3Z0IsR0FBSzZnQixFQUFXN2dCLEdBQUdtUSxRQUFRLFlBQWEsS0FHckQwUSxFQUFXN2dCLEdBQUt1TyxFQUFTMEMsVUFBVSxZQUFuQjFDLENBQWdDc1MsRUFBVzdnQixHQUFJMEUsRUFBU2dTLEdBRzFFLElBaEVvQm9LLEVBWUNuYixFQUFRMUMsRUFDekI4ZCxFQW1EQUMsRUFBYUgsRUFBVyxHQUFHclcsTUFBTSxLQUFLQyxLQUFJLFNBQVUxSSxHQUFLLE9BQU9BLEVBQUU0SSxVQUNsRXNXLEVBQVlKLEVBQVcsR0FBR3JXLE1BQU0sS0FBS0MsS0FBSSxTQUFVMUksR0FBSyxPQUFPQSxFQUFFNEksVUFDakV1VyxFQUFXLEdBQ1hDLEVBQVUsR0FDVkMsRUFBUyxHQUNUQyxFQUFRLEdBS1osSUFIQVIsRUFBV1MsUUFDWFQsRUFBV1MsUUFFTnRoQixFQUFJLEVBQUdBLEVBQUk2Z0IsRUFBV3BZLFNBQVV6SSxFQUNOLEtBQXpCNmdCLEVBQVc3Z0IsR0FBRzJLLFFBR2xCdVcsRUFBU3BXLEtBQ1ArVixFQUFXN2dCLEdBQ1J3SyxNQUFNLEtBQ05DLEtBQUksU0FBVTFJLEdBQ2IsT0FBT0EsRUFBRTRJLFdBS2pCLEdBQUlxVyxFQUFXdlksT0FBU3dZLEVBQVV4WSxPQUNoQyxPQUFPbVksRUFHVCxJQUFLNWdCLEVBQUksRUFBR0EsRUFBSWloQixFQUFVeFksU0FBVXpJLEVBQ2xDb2hCLEVBQU90VyxNQTVGV2dXLEVBNEZNRyxFQUFVamhCLEdBM0ZqQyxlQUFnQjhELEtBQUtnZCxHQUNmLDRCQUNDLHFCQUFzQmhkLEtBQUtnZCxHQUM1Qiw2QkFDQyxzQkFBdUJoZCxLQUFLZ2QsR0FDN0IsOEJBRUEsS0F1RlQsSUFBSzlnQixFQUFJLEVBQUdBLEVBQUlnaEIsRUFBV3ZZLFNBQVV6SSxFQUMvQnVPLEVBQVNpQixPQUFPTSxZQUFZc1IsRUFBT3BoQixNQUNyQ29oQixFQUFPcGhCLEdBQUssSUFFZG1oQixFQUFRclcsTUF2RlduRixFQXVGT3FiLEVBQVdoaEIsR0F2RlZpRCxFQXVGY21lLEVBQU9waEIsR0F0RjlDK2dCLFdBQUssR0FDVHBiLEVBQVNBLEVBQU9nRixRQUVaakcsRUFBUXVJLGdCQUFrQnZJLEVBQVE2YyxpQkFDcENSLEVBQUssUUFBVXBiLEVBQU93SyxRQUFRLEtBQU0sS0FBS04sY0FBZ0IsS0FJcEQsTUFBUWtSLEVBQUs5ZCxFQUFRLEtBRjVCMEMsRUFBUzRJLEVBQVMwQyxVQUFVLFlBQW5CMUMsQ0FBZ0M1SSxFQUFRakIsRUFBU2dTLElBRWYsWUFpRjNDLElBQUsxVyxFQUFJLEVBQUdBLEVBQUlraEIsRUFBU3pZLFNBQVV6SSxFQUFHLENBRXBDLElBREEsSUFBSXdoQixFQUFNLEdBQ0RsSSxFQUFLLEVBQUdBLEVBQUs2SCxFQUFRMVksU0FBVTZRLEVBQ2xDL0ssRUFBU2lCLE9BQU9NLFlBQVlvUixFQUFTbGhCLEdBQUdzWixJQUc1Q2tJLEVBQUkxVyxLQUFLMlYsRUFBV1MsRUFBU2xoQixHQUFHc1osR0FBSzhILEVBQU85SCxLQUU5QytILEVBQU12VyxLQUFLMFcsR0FHYixPQXBGRixTQUFxQkwsRUFBU0UsR0FJNUIsSUFIQSxJQUFJSSxFQUFLLDJCQUNMQyxFQUFTUCxFQUFRMVksT0FFWnpJLEVBQUksRUFBR0EsRUFBSTBoQixJQUFVMWhCLEVBQzVCeWhCLEdBQU1OLEVBQVFuaEIsR0FJaEIsSUFGQXloQixHQUFNLDZCQUVEemhCLEVBQUksRUFBR0EsRUFBSXFoQixFQUFNNVksU0FBVXpJLEVBQUcsQ0FDakN5aEIsR0FBTSxTQUNOLElBQUssSUFBSW5JLEVBQUssRUFBR0EsRUFBS29JLElBQVVwSSxFQUM5Qm1JLEdBQU1KLEVBQU1yaEIsR0FBR3NaLEdBRWpCbUksR0FBTSxVQUdSLE9BREFBLEdBQU0sdUJBb0VDRSxDQUFXUixFQUFTRSxHQWdCN0IsT0FKQWhQLEdBSEFBLEdBSEFBLEdBSEFBLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLGdCQUFpQm5FLEVBQU0zTixFQUFTZ1MsSUFHdkR2RyxRQUFRLFVBQVc1QixFQUFTaUIsT0FBT1ksMkJBR25DRCxRQTlIUyx1SEE4SFN3USxJQUdsQnhRLFFBL0hTLG9IQStIZXdRLEdBRXBDdE8sRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsZUFBZ0JuRSxFQUFNM04sRUFBU2dTLE1DMUlwRW5JLEVBQVMwQyxVQUFVLGFBQWEsU0FBVW9CLEVBQU0zTixFQUFTZ1MsR0FDdkQsYUFFQSxPQUFLaFMsRUFBUXFKLFdBSWJzRSxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSxtQkFBb0JuRSxFQUFNM04sRUFBU2dTLEdBbUJ0RXJFLEdBYkVBLEVBSkUzTixFQUFRbUksMkJBQ1Z3RixFQUFPQSxFQUFLbEMsUUFBUSwyQkFBMkIsU0FBVStKLEVBQUl4SCxHQUMzRCxNQUFPLE1BQVFBLEVBQU0sV0FFWHZDLFFBQVEseUJBQXlCLFNBQVUrSixFQUFJeEgsR0FDekQsTUFBTyxNQUFRQSxFQUFNLFdBR3ZCTCxFQUFPQSxFQUFLbEMsUUFBUSx1QkFBdUIsU0FBVStKLEVBQUk5WixHQUN2RCxNQUFPLE1BQU8wRCxLQUFLMUQsR0FBTSxNQUFRQSxFQUFJLE9BQVM4WixNQUVwQy9KLFFBQVEscUJBQXFCLFNBQVUrSixFQUFJOVosR0FDckQsTUFBTyxNQUFPMEQsS0FBSzFELEdBQU0sTUFBUUEsRUFBSSxPQUFTOFosTUFLdEMvSixRQUFRLE9BQVE1QixFQUFTaUIsT0FBT1ksMEJBRTVDaUMsRUFBT3FFLEVBQVFZLFVBQVVkLFVBQVUsa0JBQW1CbkUsRUFBTTNOLEVBQVNnUyxJQXhCNURyRSxLQ0RYOUQsRUFBUzBDLFVBQVUsd0JBQXdCLFNBQVVvQixFQUFNM04sRUFBU2dTLEdBQ2xFLGFBU0EsT0FOQXJFLEdBRkFBLEVBQU9xRSxFQUFRWSxVQUFVZCxVQUFVLDhCQUErQm5FLEVBQU0zTixFQUFTZ1MsSUFFckV2RyxRQUFRLGFBQWEsU0FBVUUsRUFBWUMsR0FDckQsSUFBSXNSLEVBQW9CbkUsU0FBU25OLEdBQ2pDLE9BQU9zQixPQUFPaVEsYUFBYUQsTUFHN0J2UCxFQUFPcUUsRUFBUVksVUFBVWQsVUFBVSw2QkFBOEJuRSxFQUFNM04sRUFBU2dTLE1DWmxGbkksRUFBUzBDLFVBQVUsMkJBQTJCLFNBQVUwSCxFQUFNakMsR0FDNUQsYUFFQSxJQUFJaEUsRUFBTSxHQUNWLEdBQUlpRyxFQUFLbUosZ0JBSVAsSUFIQSxJQUFJQyxFQUFXcEosRUFBS0MsV0FDaEJvSixFQUFpQkQsRUFBU3RaLE9BRXJCekksRUFBSSxFQUFHQSxFQUFJZ2lCLElBQWtCaGlCLEVBQUcsQ0FDdkMsSUFBSWlpQixFQUFXMVQsRUFBUzBDLFVBQVUsb0JBQW5CMUMsQ0FBd0N3VCxFQUFTL2hCLEdBQUkwVyxHQUVuRCxLQUFidUwsSUFHSnZQLEdBQU91UCxHQU1YLE9BREF2UCxFQUFNLE1BRE5BLEVBQU1BLEVBQUkvSCxRQUNPSCxNQUFNLE1BQU00SixLQUFLLFdDbkJwQzdGLEVBQVMwQyxVQUFVLDBCQUEwQixTQUFVMEgsRUFBTWpDLEdBQzNELGFBRUEsSUFBSTNQLEVBQU80UixFQUFLM1UsYUFBYSxZQUN6QnNaLEVBQU8zRSxFQUFLM1UsYUFBYSxjQUM3QixNQUFPLE1BQVErQyxFQUFPLEtBQU8yUCxFQUFRcUIsUUFBUXVGLEdBQU8sV0NMdEQvTyxFQUFTMEMsVUFBVSx5QkFBeUIsU0FBVTBILEdBQ3BELGFBRUEsTUFBTyxJQUFNQSxFQUFLcFMsVUFBWSxPQ0hoQ2dJLEVBQVMwQyxVQUFVLHlCQUF5QixTQUFVMEgsRUFBTWpDLEdBQzFELGFBRUEsSUFBSWhFLEVBQU0sR0FDVixHQUFJaUcsRUFBS21KLGdCQUFpQixDQUN4QnBQLEdBQU8sSUFHUCxJQUZBLElBQUlxUCxFQUFXcEosRUFBS0MsV0FDaEJvSixFQUFpQkQsRUFBU3RaLE9BQ3JCekksRUFBSSxFQUFHQSxFQUFJZ2lCLElBQWtCaGlCLEVBQ3BDMFMsR0FBT25FLEVBQVMwQyxVQUFVLG9CQUFuQjFDLENBQXdDd1QsRUFBUy9oQixHQUFJMFcsR0FFOURoRSxHQUFPLElBRVQsT0FBT0EsS0NiVG5FLEVBQVMwQyxVQUFVLHVCQUF1QixTQUFVMEgsRUFBTWpDLEVBQVN3TCxHQUNqRSxhQUVBLElBQUlDLEVBQWEsSUFBSXBRLE1BQU1tUSxFQUFjLEdBQUc5TixLQUFLLEtBQzdDMUIsRUFBTSxHQUVWLEdBQUlpRyxFQUFLbUosZ0JBQWlCLENBQ3hCcFAsRUFBTXlQLEVBQWEsSUFJbkIsSUFIQSxJQUFJSixFQUFXcEosRUFBS0MsV0FDaEJvSixFQUFpQkQsRUFBU3RaLE9BRXJCekksRUFBSSxFQUFHQSxFQUFJZ2lCLElBQWtCaGlCLEVBQ3BDMFMsR0FBT25FLEVBQVMwQyxVQUFVLG9CQUFuQjFDLENBQXdDd1QsRUFBUy9oQixHQUFJMFcsR0FHaEUsT0FBT2hFLEtDZlRuRSxFQUFTMEMsVUFBVSxtQkFBbUIsV0FDcEMsYUFFQSxNQUFPLFNDSFQxQyxFQUFTMEMsVUFBVSxzQkFBc0IsU0FBVTBILEdBQ2pELGFBRUEsSUFBSWpHLEVBQU0sR0FhVixPQVpJaUcsRUFBS3lKLGFBQWEsU0FDcEIxUCxHQUFPLEtBQU9pRyxFQUFLM1UsYUFBYSxPQUFTLEtBQ3pDME8sR0FBTyxJQUFNaUcsRUFBSzNVLGFBQWEsT0FBUyxJQUNwQzJVLEVBQUt5SixhQUFhLFVBQVl6SixFQUFLeUosYUFBYSxZQUNsRDFQLEdBQU8sS0FBT2lHLEVBQUszVSxhQUFhLFNBQVcsSUFBTTJVLEVBQUszVSxhQUFhLFdBR2pFMlUsRUFBS3lKLGFBQWEsV0FDcEIxUCxHQUFPLEtBQU9pRyxFQUFLM1UsYUFBYSxTQUFXLEtBRTdDME8sR0FBTyxLQUVGQSxLQ2hCVG5FLEVBQVMwQyxVQUFVLHNCQUFzQixTQUFVMEgsRUFBTWpDLEdBQ3ZELGFBRUEsSUFBSWhFLEVBQU0sR0FDVixHQUFJaUcsRUFBS21KLGlCQUFtQm5KLEVBQUt5SixhQUFhLFFBQVMsQ0FDckQsSUFBSUwsRUFBV3BKLEVBQUtDLFdBQ2hCb0osRUFBaUJELEVBQVN0WixPQUM5QmlLLEVBQU0sSUFDTixJQUFLLElBQUkxUyxFQUFJLEVBQUdBLEVBQUlnaUIsSUFBa0JoaUIsRUFDcEMwUyxHQUFPbkUsRUFBUzBDLFVBQVUsb0JBQW5CMUMsQ0FBd0N3VCxFQUFTL2hCLEdBQUkwVyxHQUU5RGhFLEdBQU8sS0FDUEEsR0FBTyxJQUFNaUcsRUFBSzNVLGFBQWEsUUFBVSxJQUNyQzJVLEVBQUt5SixhQUFhLFdBQ3BCMVAsR0FBTyxLQUFPaUcsRUFBSzNVLGFBQWEsU0FBVyxLQUU3QzBPLEdBQU8sSUFFVCxPQUFPQSxLQ2xCVG5FLEVBQVMwQyxVQUFVLHFCQUFxQixTQUFVMEgsRUFBTWpDLEVBQVN2SyxHQUMvRCxhQUVBLElBQUl1RyxFQUFNLEdBQ1YsSUFBS2lHLEVBQUttSixnQkFDUixNQUFPLEdBTVQsSUFKQSxJQUFJTyxFQUFrQjFKLEVBQUtDLFdBQ3ZCMEosRUFBa0JELEVBQVU1WixPQUM1QjhaLEVBQVU1SixFQUFLM1UsYUFBYSxVQUFZLEVBRW5DaEUsRUFBSSxFQUFHQSxFQUFJc2lCLElBQW1CdGlCLEVBQ3JDLFFBQW9DLElBQXpCcWlCLEVBQVVyaUIsR0FBR2lMLFNBQWtFLE9BQXZDb1gsRUFBVXJpQixHQUFHaUwsUUFBUTRFLGNBQXhFLENBYUE2QyxJQVBhLE9BQVR2RyxFQUNPb1csRUFBUXpRLFdBQWEsS0FFckIsTUFJS3ZELEVBQVMwQyxVQUFVLHdCQUFuQjFDLENBQTRDOFQsRUFBVXJpQixHQUFJMFcsS0FDeEU2TCxFQUtKLE9BREE3UCxHQUFPLHNCQUNJL0gsVUMvQmI0RCxFQUFTMEMsVUFBVSx5QkFBeUIsU0FBVTBILEVBQU1qQyxHQUMxRCxhQU9BLElBTEEsSUFBSThMLEVBQWMsR0FFZFQsRUFBV3BKLEVBQUtDLFdBQ2hCNkosRUFBaUJWLEVBQVN0WixPQUVyQnpJLEVBQUksRUFBR0EsRUFBSXlpQixJQUFrQnppQixFQUNwQ3dpQixHQUFlalUsRUFBUzBDLFVBQVUsb0JBQW5CMUMsQ0FBd0N3VCxFQUFTL2hCLEdBQUkwVyxHQWN0RSxNQVhHLE1BQVE1UyxLQUFLMGUsR0FJZEEsRUFBY0EsRUFDWGhZLE1BQU0sTUFDTjRKLEtBQUssVUFDTGpFLFFBQVEsV0FBWSxJQUNwQkEsUUFBUSxTQUFVLFFBUHJCcVMsR0FBZSxLQVVWQSxLQ3JCVGpVLEVBQVMwQyxVQUFVLHFCQUFxQixTQUFVMEgsRUFBTWpDLEVBQVNnTSxHQUMvRCxhQUVBQSxFQUFZQSxJQUFhLEVBRXpCLElBQUloUSxFQUFNLEdBR1YsR0FBc0IsSUFBbEJpRyxFQUFLRyxTQUNQLE9BQU92SyxFQUFTMEMsVUFBVSxtQkFBbkIxQyxDQUF1Q29LLEVBQU1qQyxHQUl0RCxHQUFzQixJQUFsQmlDLEVBQUtHLFNBQ1AsTUFBTyxVQUFTSCxFQUFLZ0ssS0FBTyxhQUk5QixHQUFzQixJQUFsQmhLLEVBQUtHLFNBQ1AsTUFBTyxHQUtULE9BRmNILEVBQUsxTixRQUFRNEUsZUFPekIsSUFBSyxLQUNFNlMsSUFBYWhRLEVBQU1uRSxFQUFTMEMsVUFBVSxzQkFBbkIxQyxDQUEwQ29LLEVBQU1qQyxFQUFTLEdBQUssUUFDdEYsTUFDRixJQUFLLEtBQ0VnTSxJQUFhaFEsRUFBTW5FLEVBQVMwQyxVQUFVLHNCQUFuQjFDLENBQTBDb0ssRUFBTWpDLEVBQVMsR0FBSyxRQUN0RixNQUNGLElBQUssS0FDRWdNLElBQWFoUSxFQUFNbkUsRUFBUzBDLFVBQVUsc0JBQW5CMUMsQ0FBMENvSyxFQUFNakMsRUFBUyxHQUFLLFFBQ3RGLE1BQ0YsSUFBSyxLQUNFZ00sSUFBYWhRLEVBQU1uRSxFQUFTMEMsVUFBVSxzQkFBbkIxQyxDQUEwQ29LLEVBQU1qQyxFQUFTLEdBQUssUUFDdEYsTUFDRixJQUFLLEtBQ0VnTSxJQUFhaFEsRUFBTW5FLEVBQVMwQyxVQUFVLHNCQUFuQjFDLENBQTBDb0ssRUFBTWpDLEVBQVMsR0FBSyxRQUN0RixNQUNGLElBQUssS0FDRWdNLElBQWFoUSxFQUFNbkUsRUFBUzBDLFVBQVUsc0JBQW5CMUMsQ0FBMENvSyxFQUFNakMsRUFBUyxHQUFLLFFBQ3RGLE1BRUYsSUFBSyxJQUNFZ00sSUFBYWhRLEVBQU1uRSxFQUFTMEMsVUFBVSx5QkFBbkIxQyxDQUE2Q29LLEVBQU1qQyxHQUFXLFFBQ3RGLE1BRUYsSUFBSyxhQUNFZ00sSUFBYWhRLEVBQU1uRSxFQUFTMEMsVUFBVSwwQkFBbkIxQyxDQUE4Q29LLEVBQU1qQyxHQUFXLFFBQ3ZGLE1BRUYsSUFBSyxLQUNFZ00sSUFBYWhRLEVBQU1uRSxFQUFTMEMsVUFBVSxrQkFBbkIxQyxDQUFzQ29LLEVBQU1qQyxHQUFXLFFBQy9FLE1BRUYsSUFBSyxLQUNFZ00sSUFBYWhRLEVBQU1uRSxFQUFTMEMsVUFBVSxvQkFBbkIxQyxDQUF3Q29LLEVBQU1qQyxFQUFTLE1BQVEsUUFDdkYsTUFFRixJQUFLLEtBQ0VnTSxJQUFhaFEsRUFBTW5FLEVBQVMwQyxVQUFVLG9CQUFuQjFDLENBQXdDb0ssRUFBTWpDLEVBQVMsTUFBUSxRQUN2RixNQUVGLElBQUssVUFDRWdNLElBQWFoUSxFQUFNbkUsRUFBUzBDLFVBQVUseUJBQW5CMUMsQ0FBNkNvSyxFQUFNakMsR0FBVyxRQUN0RixNQUVGLElBQUssTUFDRWdNLElBQWFoUSxFQUFNbkUsRUFBUzBDLFVBQVUsbUJBQW5CMUMsQ0FBdUNvSyxFQUFNakMsR0FBVyxRQUNoRixNQUVGLElBQUssUUFDRWdNLElBQWFoUSxFQUFNbkUsRUFBUzBDLFVBQVUscUJBQW5CMUMsQ0FBeUNvSyxFQUFNakMsR0FBVyxRQUNsRixNQUtGLElBQUssT0FDSGhFLEVBQU1uRSxFQUFTMEMsVUFBVSx3QkFBbkIxQyxDQUE0Q29LLEVBQU1qQyxHQUN4RCxNQUVGLElBQUssS0FDTCxJQUFLLElBQ0hoRSxFQUFNbkUsRUFBUzBDLFVBQVUsd0JBQW5CMUMsQ0FBNENvSyxFQUFNakMsR0FDeEQsTUFFRixJQUFLLFNBQ0wsSUFBSyxJQUNIaEUsRUFBTW5FLEVBQVMwQyxVQUFVLHNCQUFuQjFDLENBQTBDb0ssRUFBTWpDLEdBQ3RELE1BRUYsSUFBSyxNQUNIaEUsRUFBTW5FLEVBQVMwQyxVQUFVLDZCQUFuQjFDLENBQWlEb0ssRUFBTWpDLEdBQzdELE1BRUYsSUFBSyxJQUNIaEUsRUFBTW5FLEVBQVMwQyxVQUFVLHFCQUFuQjFDLENBQXlDb0ssRUFBTWpDLEdBQ3JELE1BRUYsSUFBSyxNQUNIaEUsRUFBTW5FLEVBQVMwQyxVQUFVLHFCQUFuQjFDLENBQXlDb0ssRUFBTWpDLEdBQ3JELE1BRUYsUUFDRWhFLEVBQU1pRyxFQUFLSixVQUFZLE9BTTNCLE9BQU83RixLQ3RIVG5FLEVBQVMwQyxVQUFVLDBCQUEwQixTQUFVMEgsRUFBTWpDLEdBQzNELGFBRUEsSUFBSWhFLEVBQU0sR0FDVixHQUFJaUcsRUFBS21KLGdCQUdQLElBRkEsSUFBSUMsRUFBV3BKLEVBQUtDLFdBQ2hCb0osRUFBaUJELEVBQVN0WixPQUNyQnpJLEVBQUksRUFBR0EsRUFBSWdpQixJQUFrQmhpQixFQUNwQzBTLEdBQU9uRSxFQUFTMEMsVUFBVSxvQkFBbkIxQyxDQUF3Q3dULEVBQVMvaEIsR0FBSTBXLEdBT2hFLE9BRkFoRSxFQUFNQSxFQUFJL0gsVUNiWjRELEVBQVMwQyxVQUFVLG9CQUFvQixTQUFVMEgsRUFBTWpDLEdBQ3JELGFBRUEsSUFBSTRHLEVBQU8zRSxFQUFLM1UsYUFBYSxVQUM3QixNQUFPLFFBQVUwUyxFQUFRcUIsUUFBUXVGLEdBQU8sWUNKMUMvTyxFQUFTMEMsVUFBVSw4QkFBOEIsU0FBVTBILEVBQU1qQyxHQUMvRCxhQUVBLElBQUloRSxFQUFNLEdBQ1YsR0FBSWlHLEVBQUttSixnQkFBaUIsQ0FDeEJwUCxHQUFPLEtBR1AsSUFGQSxJQUFJcVAsRUFBV3BKLEVBQUtDLFdBQ2hCb0osRUFBaUJELEVBQVN0WixPQUNyQnpJLEVBQUksRUFBR0EsRUFBSWdpQixJQUFrQmhpQixFQUNwQzBTLEdBQU9uRSxFQUFTMEMsVUFBVSxvQkFBbkIxQyxDQUF3Q3dULEVBQVMvaEIsR0FBSTBXLEdBRTlEaEUsR0FBTyxLQUVULE9BQU9BLEtDYlRuRSxFQUFTMEMsVUFBVSx1QkFBdUIsU0FBVTBILEVBQU1qQyxHQUN4RCxhQUVBLElBQUloRSxFQUFNLEdBQ1YsR0FBSWlHLEVBQUttSixnQkFBaUIsQ0FDeEJwUCxHQUFPLEtBR1AsSUFGQSxJQUFJcVAsRUFBV3BKLEVBQUtDLFdBQ2hCb0osRUFBaUJELEVBQVN0WixPQUNyQnpJLEVBQUksRUFBR0EsRUFBSWdpQixJQUFrQmhpQixFQUNwQzBTLEdBQU9uRSxFQUFTMEMsVUFBVSxvQkFBbkIxQyxDQUF3Q3dULEVBQVMvaEIsR0FBSTBXLEdBRTlEaEUsR0FBTyxLQUVULE9BQU9BLEtDYlRuRSxFQUFTMEMsVUFBVSxzQkFBc0IsU0FBVTBILEVBQU1qQyxHQUN2RCxhQUVBLElBSUkxVyxFQUFHc1osRUFKSDVHLEVBQU0sR0FDTmtRLEVBQWEsQ0FBQyxHQUFJLElBQ2xCQyxFQUFhbEssRUFBSzVOLGlCQUFpQixlQUNuQytYLEVBQWFuSyxFQUFLNU4saUJBQWlCLFlBRXZDLElBQUsvSyxFQUFJLEVBQUdBLEVBQUk2aUIsRUFBU3BhLFNBQVV6SSxFQUFHLENBQ3BDLElBQUkraUIsRUFBY3hVLEVBQVMwQyxVQUFVLHlCQUFuQjFDLENBQTZDc1UsRUFBUzdpQixHQUFJMFcsR0FDeEVzTSxFQUFTLE1BRWIsR0FBSUgsRUFBUzdpQixHQUFHb2lCLGFBQWEsU0FFM0IsT0FEWVMsRUFBUzdpQixHQUFHZ0UsYUFBYSxTQUFTNkwsY0FBY00sUUFBUSxNQUFPLEtBRXpFLElBQUssbUJBQ0g2UyxFQUFTLE9BQ1QsTUFDRixJQUFLLG9CQUNIQSxFQUFTLE9BQ1QsTUFDRixJQUFLLHFCQUNIQSxFQUFTLFFBSWZKLEVBQVcsR0FBRzVpQixHQUFLK2lCLEVBQVlwWSxPQUMvQmlZLEVBQVcsR0FBRzVpQixHQUFLZ2pCLEVBR3JCLElBQUtoakIsRUFBSSxFQUFHQSxFQUFJOGlCLEVBQUtyYSxTQUFVekksRUFBRyxDQUNoQyxJQUFJYyxFQUFJOGhCLEVBQVc5WCxLQUFLLElBQU0sRUFDMUJtWSxFQUFPSCxFQUFLOWlCLEdBQUdrakIscUJBQXFCLE1BRXhDLElBQUs1SixFQUFLLEVBQUdBLEVBQUt1SixFQUFTcGEsU0FBVTZRLEVBQUksQ0FDdkMsSUFBSTZKLEVBQWMsU0FDTSxJQUFiRixFQUFLM0osS0FDZDZKLEVBQWM1VSxFQUFTMEMsVUFBVSx5QkFBbkIxQyxDQUE2QzBVLEVBQUszSixHQUFLNUMsSUFFdkVrTSxFQUFXOWhCLEdBQUdnSyxLQUFLcVksSUFJdkIsSUFBSUMsRUFBa0IsRUFDdEIsSUFBS3BqQixFQUFJLEVBQUdBLEVBQUk0aUIsRUFBV25hLFNBQVV6SSxFQUNuQyxJQUFLc1osRUFBSyxFQUFHQSxFQUFLc0osRUFBVzVpQixHQUFHeUksU0FBVTZRLEVBQUksQ0FDNUMsSUFBSStKLEVBQVNULEVBQVc1aUIsR0FBR3NaLEdBQUk3USxPQUMzQjRhLEVBQVNELElBQ1hBLEVBQWtCQyxHQUt4QixJQUFLcmpCLEVBQUksRUFBR0EsRUFBSTRpQixFQUFXbmEsU0FBVXpJLEVBQUcsQ0FDdEMsSUFBS3NaLEVBQUssRUFBR0EsRUFBS3NKLEVBQVc1aUIsR0FBR3lJLFNBQVU2USxFQUM5QixJQUFOdFosRUFDa0MsTUFBaEM0aUIsRUFBVzVpQixHQUFHc1osR0FBSXpGLE9BQU8sR0FDM0IrTyxFQUFXNWlCLEdBQUdzWixHQUFNL0ssRUFBU2lCLE9BQU93RixPQUFPNE4sRUFBVzVpQixHQUFHc1osR0FBSXpGLE9BQU8sR0FBSXVQLEVBQWtCLEVBQUcsS0FBTyxJQUVwR1IsRUFBVzVpQixHQUFHc1osR0FBTS9LLEVBQVNpQixPQUFPd0YsT0FBTzROLEVBQVc1aUIsR0FBR3NaLEdBQUs4SixFQUFpQixLQUdqRlIsRUFBVzVpQixHQUFHc1osR0FBTS9LLEVBQVNpQixPQUFPd0YsT0FBTzROLEVBQVc1aUIsR0FBR3NaLEdBQUs4SixHQUdsRTFRLEdBQU8sS0FBT2tRLEVBQVc1aUIsR0FBR29VLEtBQUssT0FBUyxPQUc1QyxPQUFPMUIsRUFBSS9ILFVDcEViNEQsRUFBUzBDLFVBQVUsMEJBQTBCLFNBQVUwSCxFQUFNakMsR0FDM0QsYUFFQSxJQUFJaEUsRUFBTSxHQUNWLElBQUtpRyxFQUFLbUosZ0JBQ1IsTUFBTyxHQUtULElBSEEsSUFBSUMsRUFBV3BKLEVBQUtDLFdBQ2hCb0osRUFBaUJELEVBQVN0WixPQUVyQnpJLEVBQUksRUFBR0EsRUFBSWdpQixJQUFrQmhpQixFQUNwQzBTLEdBQU9uRSxFQUFTMEMsVUFBVSxvQkFBbkIxQyxDQUF3Q3dULEVBQVMvaEIsR0FBSTBXLEdBQVMsR0FFdkUsT0FBT2hFLEVBQUkvSCxVQ2JiNEQsRUFBUzBDLFVBQVUsb0JBQW9CLFNBQVUwSCxHQUMvQyxhQUVBLElBQUlqRyxFQUFNaUcsRUFBS0ksVUFzQ2YsT0FoQ0FyRyxHQUhBQSxFQUFNQSxFQUFJdkMsUUFBUSxNQUFPLE1BR2ZBLFFBQVEsVUFBVyxLQThCN0J1QyxHQUhBQSxHQUhBQSxHQUhBQSxHQUhBQSxHQUhBQSxHQUhBQSxHQUhBQSxHQU5BQSxFQUFNbkUsRUFBU2lCLE9BQU9pRCxxQkFBcUJDLElBTWpDdkMsUUFBUSxhQUFjLFNBR3RCQSxRQUFRLFdBQVksVUFHcEJBLFFBQVEsT0FBUSxRQUdoQkEsUUFBUSx5QkFBMEIsYUFHbENBLFFBQVEsbUJBQW9CLFVBRzVCQSxRQUFRLG9CQUFxQixXQUc3QkEsUUFBUSxjQUFlLGFBR3ZCQSxRQUFRLDJCQUE0QixtQkNoQzdDLEtBSERtVCxhQUNFLGFBQ0EsT0FBTy9VLEdBQ1IsZ0MsOENDRUYsSUFBVXZNLEVBQVFDLEVBQVJELEVBYVMsb0JBQVhFLE9BQXlCQSxPQUFTQyxLQWJ4QkYsRUFhOEIsU0FBVUMsRUFBUUUsR0FDL0QsTUFBTTJFLEVBQU8sQ0FDVHdjLEtBQU0sS0FDTkMsUUFBUyxDQUNMQyxRQUFTLFVBQ1RDLEtBQU0sT0FDTkMsS0FBTSxPQUNOQyxRQUFTLFVBQ1RDLFNBQVUsT0FDVkMsS0FBTSxPQUNOL1YsVUFBVyxZQUNYZ1csT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFVBQVcsWUFDWEMsWUFBYSxjQUNiQyxhQUFjLGdCQUNkQyxVQUFXLGFBQ1hDLFlBQWEsa0JBQ2JDLE9BQVEsU0FDUkMsUUFBUyxVQUNUQyxNQUFPLFFBQ1BDLFVBQVcsYUFDWEMsV0FBWSxjQUNaQyxZQUFhLGVBQ2JDLGFBQWMsZ0JBQ2Q5ZSxLQUFNLE9BQ04rZSxVQUFXLGVBQ1hDLFlBQWEsaUJBQ2JDLGVBQWdCLGtCQUNoQkMsU0FBVSxRQUNWQyxVQUFXLFNBQ1hDLFVBQVcsU0FDWEMsTUFBTyxRQUNQcEssS0FBTSxPQUNOcUssS0FBTSxPQUNOQyxNQUFPLFFBQ1BDLE1BQU8sUUFDUEMsTUFBTyxRQUNQQyxXQUFZLGNBQ1pDLFdBQVksY0FDWkMsU0FBVSxZQUNWQyxLQUFNLE9BQ05DLEtBQU0sT0FDTkMsUUFBUyxVQUNUQyxNQUFPLFFBQ1BDLE1BQU8sWUFDUEMsUUFBUyxlQUNUQyxNQUFPLFNBQ1BDLGVBQWdCLFFBQ2hCQyxRQUFTLE9BQ1RDLFNBQVUsV0FDVkMsV0FBWSxjQUNaQyxlQUFnQixrQkFDaEJDLFVBQVcsYUFDWEMsYUFBYyxnQkFDZEMsUUFBUyxnQkFDVEMsUUFBUyxnQkFDVEMsUUFBUyxXQUViM2YsVUFBVyxDQUNQNGYsUUFBUyxDQUNMamYsTUFBTyxjQUNQRSxJQUFLLGNBQ0x3SyxLQUFNLGtCQUNOd1UsZUFBZ0IscUJBQ2hCQyxrQkFBbUIsZ0JBQ25CQyxTQUFVLFlBRWRDLFFBQVMsQ0FDTHJmLE1BQU8sT0FDUHNmLFdBQVksd0JBQ1pDLGNBQWUsWUFDZkMsYUFBYyxXQUVsQkMsU0FBVSxDQUNOemYsTUFBTyxlQUNQMGYsS0FBTSxvQkFDTnhmLElBQUssWUFDTDJXLFFBQVMsb0JBRWI4SSxTQUFVLENBQ04zZixNQUFPLGVBQ1AwZixLQUFNLG9CQUNOeGYsSUFBSyxrQ0FFVDBmLFNBQVUsQ0FDTjVmLE1BQU8sZUFDUDBmLEtBQU0sb0JBQ054ZixJQUFLLGFBRVQyZixRQUFTLENBQ0xsZCxLQUFNLE9BQ05rSyxPQUFRLFVBRVppVCxRQUFTLHFCQUNUdmpCLE1BQU8sUUFDUHdqQixhQUFjLFNBQ2RDLGFBQWMsU0FDZEMsV0FBWSx3QkFDWkMsTUFBTyxRQUNQaFYsS0FBTSxPQUNOQyxNQUFPLFFBQ1BnVixPQUFRLFNBQ1JySixNQUFPLFFBQ1BDLE9BQVEsU0FDUnFKLEtBQU0sT0FDTkMsTUFBTyxTQUVYQyxXQUFZLENBQ1JDLEtBQU0sT0FDTkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLGVBQWdCLG1CQUNoQkMsZUFBZ0IsbUJBQ2hCQyxVQUFXLGFBQ1hDLG1CQUFvQix1QkFDcEJDLGtCQUFtQixzQkFDbkJDLGFBQWMsZ0JBQ2RDLGlCQUFrQixxQkFDbEJDLFVBQVcsY0FDWEMsU0FBVSxhQUNWQyxTQUFVLGFBQ1ZDLFNBQVUsYUFDVkMsU0FBVSxZQUNWQyxpQkFBa0IscUJBQ2xCQyxlQUFnQixtQkFDaEJDLFdBQVksY0FDWkMsWUFBYSxlQUNiQyxRQUFTLFdBQ1RDLFFBQVMsV0FDVEMsWUFBYSxlQUNiQyxXQUFZLGNBQ1pDLFdBQVksY0FDWkMsZ0JBQWlCLG1CQUNqQkMsY0FBZSxrQkFFbkJDLEtBQU0sQ0FDRkMsT0FBUSxTQUNSQyxTQUFVLFdBQ1ZDLEtBQU0sT0FDTkMsWUFBYSxjQUNiQyxPQUFRLFNBQ1IxRyxLQUFNLFNBc0JkLFlBbEJ3QixJQUFibmhCLElBQ0ZGLEVBQU9nb0IsZ0JBQ1J4cEIsT0FBT0MsZUFBZXVCLEVBQVEsaUJBQWtCLENBQzVDdEIsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPLEtBSWZQLE9BQU9DLGVBQWV1QixFQUFPZ29CLGVBQWdCLEtBQU0sQ0FDL0N0cEIsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPOEYsS0FJUkEsR0FoTHFELGlCQUFuQmhILEVBQU9ELFFBQzVDQyxFQUFPRCxRQUFVa0MsRUFBT29ELFNBQ3BCbkQsRUFBUUQsR0FBUSxHQUNoQixTQUFVcUQsR0FDTixJQUFLQSxFQUFFRCxTQUNILE1BQU0sSUFBSUUsTUFBTSwyQ0FFcEIsT0FBT3JELEVBQVFvRCxJQUd2QnBELEVBQVFELEksd0ZDWEQsR0FDWHpCLEtBQU0sY0FLTitCLElBQUssU0FBVUMsR0FDWCxNQUFNQyxFQUFVRCxFQUFLQyxRQUNyQkEsRUFBUTJuQixZQUFjLENBQ2xCQyxjQUFlLEdBQ2ZDLFlBQWEsR0FDYkMsY0FBZSxPQUNmQyxlQUFnQixRQUNoQkMsY0FBZSxHQUNmQyxXQUFZLElBSWhCam9CLEVBQVEybkIsWUFBWUMsY0FBZ0Jqb0IsS0FBS3VvQixnQkFBZ0Jub0IsRUFBTUosS0FBS3dvQixpQkFTeEVELGdCQUFpQixTQUFVbm9CLEVBQU1xb0IsR0FDN0IsTUFBTS9aLEVBQVN0TyxFQUFLbUMsUUFDZHFDLEVBQU94RSxFQUFLd0UsS0FDWjhqQixFQUFhaGEsRUFBT2dhLFdBQXlDLElBQTVCaGEsRUFBT2dhLFVBQVVwaUIsT0FRaERvSSxFQUFPZ2EsVUFQWCxDQUNJLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUN4RixVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFDeEYsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ3hGLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUN4RixVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFDeEYsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFdBR2hHLElBQUlDLEVBQVcsR0FDWGhsQixFQUFPLDhCQUNQLElBQUssSUFBbUNpbEIsRUFBL0IvcUIsRUFBSSxFQUFHNEosRUFBTWloQixFQUFVcGlCLE9BQWV6SSxFQUFJNEosRUFBSzVKLElBQ3BEK3FCLEVBQVFGLEVBQVU3cUIsR0FDYitxQixJQUVnQixpQkFBVkEsSUFDUEQsRUFBU2hnQixLQUFLaWdCLEdBQ1YvcUIsRUFBSTRKLEVBQU0sS0FFZGtoQixFQUFTcmlCLE9BQVMsSUFDbEIzQyxHQUFRLGtDQUFvQzhrQixFQUFVRSxHQUFZLFNBQ2xFQSxFQUFXLElBRU0saUJBQVZDLElBQ1BqbEIsR0FBUSxrQ0FBb0M4a0IsRUFBVUcsR0FBUyxZQWUzRSxPQVpJamxCLEdBQVEsMkxBRzZFaUIsRUFBS0MsVUFBVTBnQixhQUFlLGlCQUFtQjNnQixFQUFLQyxVQUFVMGdCLGFBQWUsS0FDNUpubEIsRUFBSzBFLE1BQU1tWSxRQUpYLGdGQU1xRXJZLEVBQUt5YyxRQUFRVyxhQUFlLGlCQUFtQnBkLEVBQUt5YyxRQUFRVyxhQUFlLEtBQ2hKNWhCLEVBQUswRSxNQUFNK2pCLE1BUFgseUJBWUxsbEIsR0FRWDZrQixlQUFnQixTQUFVRSxHQUN0QixJQUFJL2tCLEVBQU8sR0FFWEEsR0FBUSwrQkFDUixJQUFLLElBQW1DaWxCLEVBQS9CL3FCLEVBQUksRUFBRzRKLEVBQU1paEIsRUFBVXBpQixPQUFlekksRUFBSTRKLEVBQUs1SixJQUNwRCtxQixFQUFRRixFQUFVN3FCLEdBQ0csaUJBQVYrcUIsSUFDUGpsQixHQUFRLHlDQUMyQ2lsQixFQUFRLFlBQWNBLEVBQVEsaUJBQW1CQSxFQUFRLDZCQUErQkEsRUFEbkkscUJBT2hCLE9BRkFqbEIsR0FBUSxRQUVEQSxHQVFYZCxLQUFNLFNBQVUyVCxFQUFNb1MsR0FDbEIsTUFBTVosRUFBY2hvQixLQUFLOEIsUUFBUWttQixZQUNqQyxJQUFJYyxFQUFZRixJQUFnQlosRUFBWWUsZUFBZS9xQixLQUFLZ0MsS0FBTXdXLElBQVN4VyxLQUFLSyxRQUFRMm5CLFlBQVlHLGVBQ3hHVyxFQUFZZCxFQUFZZ0IsV0FBV0YsR0FBYUEsRUFBWWQsRUFBWWlCLFFBQVFILElBQWNBLEVBRTlGLE1BQU1KLEVBQVkxb0IsS0FBS0ssUUFBUTJuQixZQUFZTSxXQUMzQyxHQUFJSSxFQUNBLElBQUssSUFBSTdxQixFQUFJLEVBQUc0SixFQUFNaWhCLEVBQVVwaUIsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDekNpckIsRUFBVXBiLGdCQUFrQmdiLEVBQVU3cUIsR0FBR2dFLGFBQWEsY0FBYzZMLGNBQ3BFMU4sS0FBS1UsS0FBS3lJLFNBQVN1ZixFQUFVN3FCLEdBQUksVUFFakNtQyxLQUFLVSxLQUFLd0ksWUFBWXdmLEVBQVU3cUIsR0FBSSxVQUtoRG1xQixFQUFZa0IsYUFBYWxyQixLQUFLZ0MsS0FBTWdvQixFQUFZbUIsY0FBY25yQixLQUFLZ0MsS0FBTThvQixLQU83RU0sZ0JBQWlCLFNBQVVDLEdBQ3ZCcnBCLEtBQUtLLFFBQVEybkIsWUFBWUssY0FBZ0JnQixFQUN6Q3JwQixLQUFLSyxRQUFRMm5CLFlBQVlFLFlBQVlwbkIsTUFBTXdvQixZQUFjRCxHQU83REgsYUFBYyxTQUFVRyxHQUNwQkEsRUFBYyxLQUFLMW5CLEtBQUswbkIsR0FBZUEsRUFBYyxJQUFNQSxFQUMzRHJwQixLQUFLSyxRQUFRMm5CLFlBQVlFLFlBQVlwcEIsTUFBUXVxQixFQUM3Q3JwQixLQUFLOEIsUUFBUWttQixZQUFZb0IsZ0JBQWdCcHJCLEtBQUtnQyxLQUFNcXBCLElBUXhETixlQUFnQixTQUFVdlMsR0FDdEIsSUFBSStTLEVBQVksR0FDaEIsTUFBTUMsRUFBZ0J4cEIsS0FBS0ssUUFBUTJuQixZQUFZSSxlQUUvQyxLQUFPNVIsSUFBU3hXLEtBQUtVLEtBQUsrb0IsYUFBYWpULElBQThCLElBQXJCK1MsRUFBVWpqQixRQUNoQyxJQUFsQmtRLEVBQUtHLFVBQWtCSCxFQUFLMVYsTUFBTTBvQixLQUFnQkQsRUFBWS9TLEVBQUsxVixNQUFNMG9CLElBQzdFaFQsRUFBT0EsRUFBSy9NLFdBR2hCLE9BQU84ZixHQU9YUCxXQUFZLFNBQVV2WSxHQUNsQixNQUFPLGtDQUFrQzlPLEtBQUs4TyxJQVFsRHdZLFFBQVMsU0FBVVMsR0FDZixNQUFNQyxFQUFXRCxFQUFJcFksTUFBTSx3RUFFM0IsT0FBUXFZLEdBQWdDLElBQXBCQSxFQUFTcmpCLE9BQWdCLEtBQ3hDLElBQU1nVixTQUFTcU8sRUFBUyxHQUFHLElBQUloYSxTQUFTLEtBQUsrQixPQUFPLElBQ3BELElBQU00SixTQUFTcU8sRUFBUyxHQUFHLElBQUloYSxTQUFTLEtBQUsrQixPQUFPLElBQ3BELElBQU00SixTQUFTcU8sRUFBUyxHQUFHLElBQUloYSxTQUFTLEtBQUsrQixPQUFPLEdBQUssSUFRbEV5WCxjQUFlLFNBQVVTLEdBQ3JCLEdBQUksS0FBS2pvQixLQUFLaW9CLEdBQVksT0FBT0EsRUFDakMsSUFBSUMsRUFBTzdwQixLQUFLVSxLQUFLQyxjQUFjLE9BQ25Da3BCLEVBQUsvb0IsTUFBTUMsUUFBVSxPQUNyQjhvQixFQUFLL29CLE1BQU04bkIsTUFBUWdCLEVBQ25CLElBQUlFLEVBQVM5cEIsS0FBS29HLEdBQUcyakIsaUJBQWlCL3BCLEtBQUtvQyxHQUFHc0IsS0FBS3pDLFlBQVk0b0IsSUFBT2pCLE1BQU10WCxNQUFNLFFBQVFoSixLQUFJLFNBQVVrSCxHQUFLLE9BQU84TCxTQUFTOUwsRUFBRSxPQUUvSCxPQURBeFAsS0FBS1UsS0FBS3NwQixXQUFXSCxHQUNiQyxFQUFPeGpCLFFBQVUsR0FBSyxNQUFTLEdBQUssS0FBT3dqQixFQUFPLElBQU0sS0FBT0EsRUFBTyxJQUFNLEdBQUtBLEVBQU8sSUFBSW5hLFNBQVMsSUFBSXNhLE9BQU8sS0MzTGpILEdBQ1g3ckIsS0FBTSxZQUNOMkMsUUFBUyxVQUNUWixJQUFLLFNBQVVDLEVBQU04cEIsR0FDakI5cEIsRUFBSytwQixVQUFVLENBQUNuQyxJQUVoQixNQUFNM25CLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRNGhCLFVBQVksQ0FDaEJtSSxVQUFXLEtBQ1hDLFdBQVksS0FDWjNCLFVBQVcsTUFJZixJQUFJNEIsRUFBVXRxQixLQUFLdXFCLFdBQVducUIsR0FDOUJDLEVBQVE0aEIsVUFBVW9JLFdBQWFDLEVBQVFobUIsY0FBYywyQkFHckRqRSxFQUFRNGhCLFVBQVVvSSxXQUFXaHBCLGlCQUFpQixRQUFTckIsS0FBS3dxQixjQUFjbnJCLEtBQUtlLElBQy9Fa3FCLEVBQVFobUIsY0FBYyw0QkFBNEJqRCxpQkFBaUIsUUFBU3JCLEtBQUt5cUIsT0FBT3ByQixLQUFLZSxJQUM3RmtxQixFQUFRaG1CLGNBQWMsNEJBQTRCakQsaUJBQWlCLFFBQVNyQixLQUFLaW1CLE9BQU81bUIsS0FBS2UsSUFDN0ZrcUIsRUFBUWpwQixpQkFBaUIsUUFBU3JCLEtBQUswcUIsT0FBT3JyQixLQUFLZSxJQUNuREMsRUFBUTRoQixVQUFVeUcsVUFBWTRCLEVBQVExaEIsaUJBQWlCLGFBR3ZEeEksRUFBS3VxQixlQUFlM3FCLEtBQUs1QixLQUFNOHJCLEVBQWVJLEdBRzlDQSxFQUFVLE1BR2RDLFdBQVksU0FBVW5xQixHQUNsQixNQUFNd3FCLEVBQVl4cUIsRUFBS0MsUUFBUTJuQixZQUFZQyxjQUNyQ3FDLEVBQVVscUIsRUFBS00sS0FBS0MsY0FBYyxPQUt4QyxPQUhBMnBCLEVBQVExcEIsVUFBWSwyQkFDcEIwcEIsRUFBUWxtQixVQUFZd21CLEVBRWJOLEdBTVgzbkIsR0FBSSxXQUNBLE1BQU1rb0IsRUFBZ0I3cUIsS0FBS0ssUUFBUTJuQixZQUM3QjhDLEVBQW1COXFCLEtBQUtLLFFBQVE0aEIsVUFFdEM0SSxFQUFjM0MsWUFBYzRDLEVBQWlCVCxXQUM3QyxNQUFNekIsRUFBUTVvQixLQUFLK3FCLGdCQUFnQm5DLE1BQ25DaUMsRUFBYzFDLGNBQWdCUyxFQUFRNW9CLEtBQUs4QixRQUFRa21CLFlBQVlnQixXQUFXSixHQUFTQSxFQUFRNW9CLEtBQUs4QixRQUFRa21CLFlBQVlpQixRQUFRTCxHQUFTLFVBQ3JJaUMsRUFBY3pDLGVBQWlCLFFBQy9CeUMsRUFBY3ZDLFdBQWF3QyxFQUFpQnBDLFVBRTVDMW9CLEtBQUs4QixRQUFRa21CLFlBQVlubEIsS0FBSzdFLEtBQUtnQyxLQUFNQSxLQUFLZ3JCLG1CQUFvQixPQU10RVIsY0FBZSxTQUFVOW9CLEdBQ3JCMUIsS0FBSzhCLFFBQVFrbUIsWUFBWW9CLGdCQUFnQnByQixLQUFLZ0MsS0FBTTBCLEVBQUVFLE9BQU85QyxRQUdqRTJyQixPQUFRLFdBQ0p6cUIsS0FBSzhCLFFBQVFtZ0IsVUFBVWdKLFdBQVdqdEIsS0FBS2dDLEtBQU1BLEtBQUtLLFFBQVEybkIsWUFBWUssZ0JBRzFFcUMsT0FBUSxTQUFVaHBCLEdBQ2RBLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFFRmhGLEtBQUs4QixRQUFRbWdCLFVBQVVnSixXQUFXanRCLEtBQUtnQyxLQUFNMEIsRUFBRUUsT0FBT0MsYUFBYSxnQkFHdkVva0IsT0FBUSxXQUNKam1CLEtBQUtrckIsV0FBVyxLQUFNLENBQUMsU0FBVSxDQUFDLFNBQVMsR0FDM0NsckIsS0FBS21yQixjQUdURixXQUFZLFNBQVVyQyxHQUNsQixJQUFLQSxFQUFPLE9BRVosTUFBTXdDLEVBQVVwckIsS0FBS1UsS0FBS0MsY0FBYyxRQUN4Q3lxQixFQUFRdHFCLE1BQU04bkIsTUFBUUEsRUFDdEI1b0IsS0FBS2tyQixXQUFXRSxFQUFTLENBQUMsU0FBVSxLQUFNLE1BRTFDcHJCLEtBQUttckIsZUN2RkUsR0FDWC9zQixLQUFNLGNBQ04yQyxRQUFTLFVBQ1RaLElBQUssU0FBVUMsRUFBTThwQixHQUNqQjlwQixFQUFLK3BCLFVBQVUsQ0FBQ25DLElBRWhCLE1BQU0zbkIsRUFBVUQsRUFBS0MsUUFDckJBLEVBQVE2aEIsWUFBYyxDQUNsQmtJLFVBQVcsS0FDWEMsV0FBWSxLQUNaM0IsVUFBVyxNQUlmLElBQUk0QixFQUFVdHFCLEtBQUt1cUIsV0FBV25xQixHQUM5QkMsRUFBUTZoQixZQUFZbUksV0FBYUMsRUFBUWhtQixjQUFjLDJCQUd2RGpFLEVBQVE2aEIsWUFBWW1JLFdBQVdocEIsaUJBQWlCLFFBQVNyQixLQUFLd3FCLGNBQWNuckIsS0FBS2UsSUFDakZrcUIsRUFBUWhtQixjQUFjLDRCQUE0QmpELGlCQUFpQixRQUFTckIsS0FBS3lxQixPQUFPcHJCLEtBQUtlLElBQzdGa3FCLEVBQVFobUIsY0FBYyw0QkFBNEJqRCxpQkFBaUIsUUFBU3JCLEtBQUtpbUIsT0FBTzVtQixLQUFLZSxJQUM3RmtxQixFQUFRanBCLGlCQUFpQixRQUFTckIsS0FBSzBxQixPQUFPcnJCLEtBQUtlLElBRW5EQyxFQUFRNmhCLFlBQVl3RyxVQUFZNEIsRUFBUTFoQixpQkFBaUIsYUFHekR4SSxFQUFLdXFCLGVBQWUzcUIsS0FBSzVCLEtBQU04ckIsRUFBZUksR0FHOUNBLEVBQVUsTUFHZEMsV0FBWSxTQUFVbnFCLEdBQ2xCLE1BQU13cUIsRUFBWXhxQixFQUFLQyxRQUFRMm5CLFlBQVlDLGNBQ3JDcUMsRUFBVWxxQixFQUFLTSxLQUFLQyxjQUFjLE9BS3hDLE9BSEEycEIsRUFBUTFwQixVQUFZLDJCQUNwQjBwQixFQUFRbG1CLFVBQVl3bUIsRUFFYk4sR0FNWDNuQixHQUFJLFdBQ0EsTUFBTWtvQixFQUFnQjdxQixLQUFLSyxRQUFRMm5CLFlBQzdCcUQsRUFBcUJyckIsS0FBS0ssUUFBUTZoQixZQUV4QzJJLEVBQWMzQyxZQUFjbUQsRUFBbUJoQixXQUMvQyxNQUFNekIsRUFBUTVvQixLQUFLK3FCLGdCQUFnQk8sZ0JBQ25DVCxFQUFjMUMsY0FBZ0JTLEVBQVE1b0IsS0FBSzhCLFFBQVFrbUIsWUFBWWdCLFdBQVdKLEdBQVNBLEVBQVE1b0IsS0FBSzhCLFFBQVFrbUIsWUFBWWlCLFFBQVFMLEdBQVMsVUFDcklpQyxFQUFjekMsZUFBaUIsa0JBQy9CeUMsRUFBY3ZDLFdBQWErQyxFQUFtQjNDLFVBRTlDMW9CLEtBQUs4QixRQUFRa21CLFlBQVlubEIsS0FBSzdFLEtBQUtnQyxLQUFNQSxLQUFLZ3JCLG1CQUFvQixPQU10RVIsY0FBZSxTQUFVOW9CLEdBQ3JCMUIsS0FBSzhCLFFBQVFrbUIsWUFBWW9CLGdCQUFnQnByQixLQUFLZ0MsS0FBTTBCLEVBQUVFLE9BQU85QyxRQUdqRTJyQixPQUFRLFdBQ0p6cUIsS0FBSzhCLFFBQVFvZ0IsWUFBWStJLFdBQVdqdEIsS0FBS2dDLEtBQU1BLEtBQUtLLFFBQVEybkIsWUFBWUssZ0JBRzVFcUMsT0FBUSxTQUFVaHBCLEdBQ2RBLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFFRmhGLEtBQUs4QixRQUFRb2dCLFlBQVkrSSxXQUFXanRCLEtBQUtnQyxLQUFNMEIsRUFBRUUsT0FBT0MsYUFBYSxnQkFHekVva0IsT0FBUSxXQUNKam1CLEtBQUtrckIsV0FBVyxLQUFNLENBQUMsb0JBQXFCLENBQUMsU0FBUyxHQUN0RGxyQixLQUFLbXJCLGNBR1RGLFdBQVksU0FBVXJDLEdBQ2xCLElBQUtBLEVBQU8sT0FFWixNQUFNd0MsRUFBVXByQixLQUFLVSxLQUFLQyxjQUFjLFFBQ3hDeXFCLEVBQVF0cUIsTUFBTXdxQixnQkFBa0IxQyxFQUNoQzVvQixLQUFLa3JCLFdBQVdFLEVBQVMsQ0FBQyxvQkFBcUIsS0FBTSxNQUVyRHByQixLQUFLbXJCLGVDMUZFLEdBQ1gvc0IsS0FBTSxXQUNOMkMsUUFBUyxVQUNUWixJQUFLLFNBQVVDLEVBQU04cEIsR0FDRDlwQixFQUFLQyxRQUNiNGpCLFNBQVcsQ0FDZnNILGVBQWdCLEdBSXBCLElBQUlDLEVBQWN4ckIsS0FBS3VxQixXQUFXbnFCLEdBR2xDb3JCLEVBQVlsbkIsY0FBYyxNQUFNakQsaUJBQWlCLFFBQVNyQixLQUFLMHFCLE9BQU9yckIsS0FBS2UsSUFHM0VBLEVBQUt1cUIsZUFBZTNxQixLQUFLNUIsS0FBTThyQixFQUFlc0IsR0FHOUNBLEVBQWMsTUFHbEJqQixXQUFZLFNBQVVucUIsR0FDbEIsTUFBTXFyQixFQUFlcnJCLEVBQUttQyxRQUFRbXBCLFVBQ2xDLElBQUtELEdBQXdDLElBQXhCQSxFQUFhbmxCLE9BQzlCLE1BQU1uRCxNQUFNLHlHQUdoQixNQUFNbW5CLEVBQVVscUIsRUFBS00sS0FBS0MsY0FBYyxPQUN4QzJwQixFQUFRMXBCLFVBQVksZ0JBRXBCLElBQUkrQyxFQUFPLG1FQUVYLElBQUssSUFBc0M1RSxFQUFsQ2xCLEVBQUksRUFBRzRKLEVBQU1na0IsRUFBYW5sQixPQUFXekksRUFBSTRKLEVBQUs1SixJQUNuRGtCLEVBQUkwc0IsRUFBYTV0QixHQUNqQjhGLEdBQVEsNkRBQStEOUYsRUFBSSxZQUFja0IsRUFBRVgsS0FBTyxpQkFBbUJXLEVBQUVYLEtBQU8sS0FBT1csRUFBRVgsS0FBTyxpQkFNbEosT0FKQXVGLEdBQVEsY0FFUjJtQixFQUFRbG1CLFVBQVlULEVBRWIybUIsR0FHWEksT0FBUSxTQUFVaHBCLEdBQ2QsSUFBSyxZQUFZQyxLQUFLRCxFQUFFRSxPQUFPa0gsU0FBVSxPQUFPLEVBRWhEcEgsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUVGaEYsS0FBS0ssUUFBUTRqQixTQUFTc0gsY0FBc0QsRUFBdEM3cEIsRUFBRUUsT0FBT0MsYUFBYSxjQUM1RCxNQUFNZ29CLEVBQU83cEIsS0FBS3VDLFFBQVFtcEIsVUFBVTFyQixLQUFLSyxRQUFRNGpCLFNBQVNzSCxlQUUxRCxJQUFJMUIsRUFBSzdPLEtBSUwsTUFEQWhiLEtBQUttckIsYUFDQ2hvQixNQUFNLG1FQUhabkQsS0FBSzJyQixZQUFZOUIsRUFBSzdPLE1BTTFCaGIsS0FBS21yQixlLHFCQzVERSxHQUNYL3NCLEtBQU0sYUFDTitCLElBQUssU0FBVUMsR0FDWEEsRUFBS0MsUUFBUXVyQixXQUFhLENBQ3RCQyxPQUFRLEdBQ1JDLGNBQWUsT0FJdkJDLFFBQVMsV0FDTCxNQUFPLHNDQUdYQyxXQUFZLFNBQVVDLEVBQWFwb0IsRUFBT21YLEdBQ3RDaVIsRUFBWUMsS0FBSzluQixVQUFZLE9BQVM0VyxFQUFPLFFBQzdDaVIsRUFBWXBvQixNQUFRQSxFQUNwQm9vQixFQUFZRSxNQUFRRixFQUFZQyxLQUFLdGpCLGlCQUFpQixPQUcxRHdqQixVQUFXLFNBQVVubkIsRUFBWW9uQixHQUM3QixNQUFNSCxFQUFPRyxFQUFNL25CLGNBQWMsbUJBQzNCakUsRUFBVUwsS0FBS0ssUUFBUXVyQixXQUFXQyxPQUFPNW1CLEdBQWMsQ0FDekRpbkIsS0FBTUEsRUFDTnJvQixNQUFPLEdBQ1Bzb0IsTUFBTyxHQUNQOWEsT0FBUSxFQUNSbkosS0FBTSxLQUNOb2tCLFlBQWEsS0FDYkMsV0FBWXRuQixHQUdoQmluQixFQUFLN3FCLGlCQUFpQixZQUFhckIsS0FBSzhCLFFBQVE4cEIsV0FBV1ksa0JBQzNETixFQUFLN3FCLGlCQUFpQixZQUFhckIsS0FBSzhCLFFBQVE4cEIsV0FBV2EsaUJBQWlCcHRCLEtBQUtXLEtBQU1LLElBQ3ZGNnJCLEVBQUs3cUIsaUJBQWlCLFFBQVNyQixLQUFLOEIsUUFBUThwQixXQUFXYyxhQUFhcnRCLEtBQUtXLEtBQU1LLEtBR25GbXNCLGlCQUFrQixTQUFVOXFCLEdBQ3hCQSxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0QsbUJBR055bkIsaUJBQWtCLFNBQVVwc0IsRUFBU3FCLEdBQ2pDMUIsS0FBS1UsS0FBS3lJLFNBQVM5SSxFQUFRNnJCLEtBQU0sK0JBQ2pDLE1BQU03YSxFQUFRM1AsRUFBRUUsT0FBT0MsYUFBYSxjQUMvQndQLElBQ0xoUixFQUFRZ1IsTUFBZ0IsRUFBUkEsSUFHcEJxYixhQUFjLFNBQVVyc0IsRUFBU3FCLEdBQzdCLE1BQU0yUCxFQUFRM1AsRUFBRUUsT0FBT0MsYUFBYSxjQUMvQndQLEdBQ0xoUixFQUFRaXNCLFlBQVl0dUIsS0FBS2dDLEtBQU1LLEVBQVF3RCxNQUFNd04sS0FHakRzYixTQUFVLFNBQVVWLEVBQWE5USxHQUM3Qm5iLEtBQUtVLEtBQUt3SSxZQUFZK2lCLEVBQVlDLEtBQU0sK0JBQ3hDL1EsRUFBTThRLEVBQVk1YSxNQUFROEosRUFDMUIsTUFBTWdSLEVBQVFGLEVBQVlFLE1BQ3BCMWtCLEVBQU0wa0IsRUFBTTdsQixPQUNac21CLEVBQWNYLEVBQVk1YSxNQUFROEosR0FBTzFULEVBQU0sRUFBSTBULEVBQU0sRUFBSTFULEVBQU0sRUFBSTBULEVBRTdFLElBQUssSUFBSXRkLEVBQUksRUFBR0EsRUFBSTRKLEVBQUs1SixJQUNqQkEsSUFBTSt1QixFQUNONXNCLEtBQUtVLEtBQUt5SSxTQUFTZ2pCLEVBQU10dUIsR0FBSSxVQUU3Qm1DLEtBQUtVLEtBQUt3SSxZQUFZaWpCLEVBQU10dUIsR0FBSSxVQUl4Q291QixFQUFZL2pCLEtBQU8rakIsRUFBWXBvQixNQUFNK29CLElBR3pDQyxRQUFTLFNBQVVaLEVBQWE1YSxHQUU1QixPQURBQSxHQUFVQSxHQUFTQSxFQUFRLEVBQUs0YSxFQUFZNWEsTUFBUUEsRUFDN0M0YSxFQUFZcG9CLE1BQU13TixJQUc3QjFPLEdBQUksU0FBVTRwQixFQUFZRCxHQUN0QixNQUFNTCxFQUFjanNCLEtBQUtLLFFBQVF1ckIsV0FBV0MsT0FBT1UsR0FDbkR2c0IsS0FBS0ssUUFBUXVyQixXQUFXRSxjQUFnQkcsRUFDeENBLEVBQVlLLFlBQWNBLEVBQzFCTCxFQUFZTSxXQUFhQSxHQUc3QnZxQixLQUFNLFNBQVVpcUIsRUFBYWEsR0FDekIsTUFBTVosRUFBT0QsRUFBWUMsS0FDekJBLEVBQUtwckIsTUFBTWlzQixXQUFhLFNBQ3hCYixFQUFLcHJCLE1BQU1DLFFBQVUsUUFDckIrckIsRUFBZ0JaLEdBQ2hCQSxFQUFLcHJCLE1BQU1pc0IsV0FBYSxJQUc1QmhyQixNQUFPLFNBQVVrcUIsR0FDYkEsRUFBWUMsS0FBS3ByQixNQUFNQyxRQUFVLE9BQ2pDa3JCLEVBQVlwb0IsTUFBUSxHQUNwQm9vQixFQUFZRSxNQUFRLEdBQ3BCRixFQUFZNWEsT0FBUyxFQUNyQjRhLEVBQVkvakIsS0FBTyxNQUd2QnJGLEtBQU0sU0FBVW9wQixHQUNQQSxJQUNMQSxFQUFZcG9CLE1BQVEsR0FDcEJvb0IsRUFBWUUsTUFBUSxHQUNwQkYsRUFBWTVhLE9BQVMsRUFDckI0YSxFQUFZL2pCLEtBQU8sS0FDbkIrakIsRUFBWU0sV0FBYSxHQUN6QnZzQixLQUFLSyxRQUFRdXJCLFdBQVdFLGNBQWdCLFFDekdqQyxHQUNYMXRCLEtBQU0sU0FDTitCLElBQUssU0FBVUMsR0FDWEEsRUFBSytwQixVQUFVLENBQUN5QixJQUVoQnhyQixFQUFLQyxRQUFRMnNCLE9BQVMsQ0FDbEJuQixPQUFRLEdBQ1JRLE1BQU9yc0IsS0FBS2l0QixjQUFjN3NCLEdBQzFCOHNCLE1BQU85c0IsRUFBS2dHLEdBQUcrbUIsU0FBU0MsT0FBU2h0QixFQUFLZ0csR0FBRyttQixTQUFTRSxVQUFVcmYsUUFBUSxNQUFPLElBQzNFOGQsY0FBZSxPQUt2Qm1CLGNBQWUsU0FBVTdzQixHQUNyQixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUNaMG9CLEVBQVVsdEIsRUFBS21DLFFBQVFnckIsUUFDdkJDLEdBQWNwdEIsRUFBS21DLFFBQVFrckIsZUFBZW5NLFNBQVcsSUFBSWpaLE1BQU0sS0FDL0R2RCxFQUFRMUUsRUFBSzBFLE1BQ2J1bkIsRUFBUWpzQixFQUFLTSxLQUFLQyxjQUFjLE9BRXRDLElBQUlxYSxFQUFPLGtFQUVTcFcsRUFBS0MsVUFBVTRmLFFBQVEvZSxJQUZoQyxpSEFJMEV0RixFQUFLbUMsUUFBUW1yQixVQUFZLElBSm5HLG1HQUtrRzlvQixFQUFLQyxVQUFVNGYsUUFBUUcsU0FBVyxpQkFBbUJoZ0IsRUFBS0MsVUFBVTRmLFFBQVFHLFNBQVcsS0FBTzlmLEVBQU04ZixTQUFXLFlBQ2hOeGtCLEVBQUswQixRQUFROHBCLFdBQVdHLFVBTnpCLGtIQVMyRWpuQixFQUFNOGYsU0FUakYsK0VBVTJFOWYsRUFBTTZvQixTQVZqRiw0RkFlUy9vQixFQUFLQyxVQUFVNGYsUUFBUXZVLEtBZmhDLGtNQWtCcUZ0TCxFQUFLQyxVQUFVNGYsUUFBUUMsZUFsQjVHLGlHQW1Cd0Y5ZixFQUFLQyxVQUFVNGYsUUFBUUUsa0JBQW9CLFdBQzFJLEdBQUkySSxFQUFRaG5CLE9BQVMsRUFBRyxDQUNwQjBVLEdBQVEseVRBS1IsSUFBSyxJQUFpQzRTLEVBQTdCL3ZCLEVBQUksRUFBRzRKLEVBQU02bEIsRUFBUWhuQixPQUFhekksRUFBSTRKLEVBQUs1SixJQUNoRCt2QixFQUFNTixFQUFRenZCLEdBQ2RtZCxHQUFRLGdEQUFrRHdTLEVBQVc5a0IsUUFBUWtsQixJQUFRLEVBQUksY0FBZ0IsSUFBTSxtQkFBcUJBLEVBQU0sWUFBY0EsRUFBTSxpQkFBbUJBLEVBQU0sMEJBQTRCOW9CLEVBQU1tWSxRQUFVLFVBQVkyUSxFQUFNLGlCQUV6UDVTLEdBQVEsMEJBTWhCLE9BSEFBLEdBQVEsZUFFUnFSLEVBQU1qb0IsVUFBWTRXLEVBQ1hxUixHQUdYRCxVQUFXLFNBQVVubkIsRUFBWW9uQixHQUM3QixNQUFNd0IsRUFBZTd0QixLQUFLOEIsUUFBUWtyQixPQUM1QjNzQixFQUFVTCxLQUFLSyxRQUFRMnNCLE9BQU9uQixPQUFPNW1CLEdBQWMsQ0FDckQ3RCxNQUFPaXJCLEVBQ1B5QixTQUFVLEtBQ1ZDLGVBQWdCL3RCLEtBQUt1QyxRQUFRa3JCLGVBQzdCRCxXQUFZeHRCLEtBQUt1QyxRQUFRa3JCLGVBQWVuTSxTQUFXLEdBQ25EME0sV0FBWSxHQUNaQyxXQUFZLEtBQ1pDLFVBQVcsR0FDWEMsU0FBUyxFQUNUNUIsV0FBWXRuQixHQUc4QixpQkFBbkM1RSxFQUFRMHRCLGVBQWV6TSxVQUFzQmpoQixFQUFRMHRCLGVBQWV6TSxRQUFVamhCLEVBQVEwdEIsZUFBZXpNLFFBQVE5WSxRQUNqRSxpQkFBNUNuSSxFQUFRMHRCLGVBQWVLLG1CQUErQi90QixFQUFRMHRCLGVBQWVLLGlCQUFtQi90QixFQUFRMHRCLGVBQWVLLGlCQUFpQjVsQixRQUM5RixpQkFBMUNuSSxFQUFRMHRCLGVBQWVNLGlCQUE2Qmh1QixFQUFRMHRCLGVBQWVNLGVBQWlCaHVCLEVBQVEwdEIsZUFBZU0sZUFBZTdsQixRQUU3SW5JLEVBQVF5dEIsU0FBV3pCLEVBQU0vbkIsY0FBYyxpQkFDdkNqRSxFQUFRaXVCLFdBQWFqQyxFQUFNL25CLGNBQWMsb0JBQ3pDakUsRUFBUXFrQixlQUFpQjJILEVBQU0vbkIsY0FBYyxxQkFDN0NqRSxFQUFRa3VCLGNBQWdCbEMsRUFBTS9uQixjQUFjLHdCQUM1Q2pFLEVBQVFzdEIsU0FBV3RCLEVBQU0vbkIsY0FBYyw2QkFDdkNqRSxFQUFRcWpCLFFBQVUySSxFQUFNL25CLGNBQWMsb0JBQ3RDakUsRUFBUXVrQixTQUFXeUgsRUFBTS9uQixjQUFjLDZCQUN2Q2pFLEVBQVFtdUIsZUFBaUJuQyxFQUFNL25CLGNBQWMsd0JBRTdDdEUsS0FBSzhCLFFBQVE4cEIsV0FBV1EsVUFBVXB1QixLQUFLZ0MsS0FBTWlGLEVBQVlvbkIsR0FDekQsTUFBTUosRUFBY2pzQixLQUFLSyxRQUFRdXJCLFdBQVdDLE9BQU81bUIsR0FHL0NqRixLQUFLdUMsUUFBUWdyQixRQUFRam5CLE9BQVMsSUFDOUJqRyxFQUFRb3VCLFVBQVlwQyxFQUFNL25CLGNBQWMsc0JBQ3hDakUsRUFBUWl0QixRQUFVakIsRUFBTS9uQixjQUFjLGtCQUN0Q2pFLEVBQVFxdUIsV0FBYXJDLEVBQU0vbkIsY0FBYywwQkFDekNqRSxFQUFRb3VCLFVBQVVwdEIsaUJBQWlCLFFBQVN3c0IsRUFBYWMsa0JBQWtCdHZCLEtBQUtXLEtBQU1LLElBQ3RGQSxFQUFRaXRCLFFBQVFqc0IsaUJBQWlCLFFBQVN3c0IsRUFBYWUsZ0JBQWdCdnZCLEtBQUtXLEtBQU1LLEtBR3RGQSxFQUFRcWtCLGVBQWVyakIsaUJBQWlCLFNBQVV3c0IsRUFBYWdCLHdCQUF3Qnh2QixLQUFLVyxLQUFNSyxJQUNsR0EsRUFBUWt1QixjQUFjbHRCLGlCQUFpQixTQUFVd3NCLEVBQWFpQix1QkFBdUJ6dkIsS0FBS1csS0FBTUssSUFDaEdBLEVBQVFpdUIsV0FBV2p0QixpQkFBaUIsUUFBU3dzQixFQUFha0IsbUJBQW1CMXZCLEtBQUtXLEtBQU1LLElBQ3hGQSxFQUFReXRCLFNBQVN6c0IsaUJBQWlCLFFBQVN3c0IsRUFBYW1CLGlCQUFpQjN2QixLQUFLVyxLQUFNSyxJQUNwRkEsRUFBUXl0QixTQUFTenNCLGlCQUFpQixVQUFXd3NCLEVBQWFvQixrQkFBa0I1dkIsS0FBS1csS0FBTWlzQixJQUN2RjVyQixFQUFReXRCLFNBQVN6c0IsaUJBQWlCLFFBQVN3c0IsRUFBYXFCLGdCQUFnQjd2QixLQUFLVyxLQUFNSyxFQUFTNHJCLElBQzVGNXJCLEVBQVF5dEIsU0FBU3pzQixpQkFBaUIsT0FBUXdzQixFQUFhc0IsZUFBZTl2QixLQUFLVyxLQUFNaXNCLElBQ2pGNXJCLEVBQVFtdUIsZUFBZW50QixpQkFBaUIsUUFBU3dzQixFQUFhdUIsdUJBQXVCL3ZCLEtBQUtXLEtBQU1LLEtBR3BHc0MsR0FBSSxTQUFVMHNCLEVBQWVwdEIsR0FDekIsTUFBTTRyQixFQUFlN3RCLEtBQUs4QixRQUFRa3JCLE9BRWxDLEdBQUsvcUIsR0FJRSxHQUFJb3RCLEVBQWNwQixXQUFZLENBQ2pDanVCLEtBQUtLLFFBQVFILE9BQU9LLGFBQWMsRUFDbEMsTUFBTWdaLEVBQU84VixFQUFjcEIsV0FBV3BzQixhQUFhLFFBQ25Ed3RCLEVBQWNuQixVQUFZbUIsRUFBYzNMLFFBQVFuZSxZQUFjOHBCLEVBQWN2QixTQUFTaHZCLE1BQVErdUIsRUFBYXlCLGlCQUFpQnR4QixLQUFLZ0MsS0FBTXVaLEdBQVFBLEVBQUswUSxPQUFPMVEsRUFBS2dXLFlBQVksTUFBUWhXLEVBQ25MOFYsRUFBY2YsV0FBV3h2QixNQUFRdXdCLEVBQWNwQixXQUFXMW9CLFlBQzFEOHBCLEVBQWMzSyxlQUFlekgsVUFBVyxVQUFVdGIsS0FBSzB0QixFQUFjcEIsV0FBV3JzQixRQUNoRnl0QixFQUFjZCxjQUFjdFIsUUFBVW9TLEVBQWNwQixXQUFXTixlQVQvREUsRUFBYWhyQixLQUFLN0UsS0FBS2dDLEtBQU1xdkIsR0FDN0JBLEVBQWNmLFdBQVd4dkIsTUFBUWtCLEtBQUt3dkIsZUFBZTdmLFdBQVduSCxPQUNoRTZtQixFQUFjM0ssZUFBZXpILFFBQVVqZCxLQUFLdUMsUUFBUWt0QixvQkFVeER6dkIsS0FBS0ssUUFBUTJzQixPQUFPbEIsY0FBZ0J1RCxFQUNwQ3hCLEVBQWE2QixPQUFPMXhCLEtBQUtnQyxLQUFNcXZCLEVBQWdCcHRCLEdBQVVvdEIsRUFBY3BCLFdBQWNvQixFQUFjcEIsV0FBV0wsSUFBTXlCLEVBQWM3QixZQUNsSUssRUFBYThCLGVBQWUzeEIsS0FBS2dDLEtBQU1xdkIsRUFBZUEsRUFBY25CLFdBQ3BFbHVCLEtBQUs4QixRQUFROHBCLFdBQVdqcEIsR0FBRzNFLEtBQUtnQyxLQUFNcXZCLEVBQWM5QyxXQUFZdnNCLEtBQUs4QixRQUFRa3JCLE9BQU80QyxvQkFHeEZOLGlCQUFrQixTQUFTTyxHQUN2QixNQUFNdFcsRUFBT3ZaLEtBQUtvRyxHQUFHK21CLFNBQVM1VCxLQUFLdkwsUUFBUSxNQUFPLElBQ2xELE9BQTZCLElBQXRCNmhCLEVBQUtubkIsUUFBUSxNQUFzQyxJQUF2Qm1uQixFQUFLbm5CLFFBQVE2USxJQUFlc1csRUFBS25uQixRQUFRLFNBQWlDLElBQXZCNlEsRUFBSzdRLFFBQVEsS0FBYzZRLEVBQUtqVCxPQUFTaVQsRUFBSzBRLE9BQU8sRUFBRzFRLEVBQUs3USxRQUFRLE1BQU1wQyxTQUdyS3dwQixjQUFlLEtBQ2ZDLGNBQWUsU0FBVVYsRUFBZVcsR0FDcEMsR0FBS0EsRUFFRSxDQUNILE1BQU1wdUIsRUFBU3l0QixFQUFjWixVQUN2Qm5CLEVBQVUrQixFQUFjL0IsUUFDOUJ0dEIsS0FBS1UsS0FBS3lJLFNBQVN2SCxFQUFRLFVBQzNCMHJCLEVBQVF4c0IsTUFBTWlzQixXQUFhLFNBQzNCTyxFQUFReHNCLE1BQU1DLFFBQVUsUUFDbkJmLEtBQUt1QyxRQUFRMHRCLElBQ2IzQyxFQUFReHNCLE1BQU00UCxLQUFROU8sRUFBT3N1QixXQUFhNUMsRUFBUTZDLFlBQWMsRUFBSyxLQURuRDdDLEVBQVF4c0IsTUFBTTRQLEtBQVE5TyxFQUFPc3VCLFdBQWF0dUIsRUFBT3V1QixZQUFjLEVBQUssS0FFM0Y3QyxFQUFReHNCLE1BQU1zdkIsSUFBT3h1QixFQUFPeXVCLFVBQWF6dUIsRUFBT3lGLGFBQWUsRUFBTWltQixFQUFRam1CLGFBQWUsRUFBTSxLQUNsR2ltQixFQUFReHNCLE1BQU1pc0IsV0FBYSxHQUUzQi9zQixLQUFLOEIsUUFBUWtyQixPQUFPOEMsY0FBZ0IsU0FBVXp2QixFQUFTdUIsRUFBUUYsR0FDdkRBLElBQU1yQixFQUFRb3VCLFVBQVU2QixTQUFTNXVCLEVBQUVFLFNBQVd2QixFQUFRaXRCLFFBQVFnRCxTQUFTNXVCLEVBQUVFLFdBQzdFNUIsS0FBS1UsS0FBS3dJLFlBQVl0SCxFQUFRLFVBQzlCdkIsRUFBUWl0QixRQUFReHNCLE1BQU1DLFFBQVUsT0FDaENmLEtBQUtrQyxVQUFVRyxvQkFBb0IsUUFBU3JDLEtBQUs4QixRQUFRa3JCLE9BQU84QyxlQUNoRTl2QixLQUFLOEIsUUFBUWtyQixPQUFPOEMsY0FBZ0IsT0FDdEN6d0IsS0FBS1csS0FBTXF2QixFQUFlenRCLEdBRTVCNUIsS0FBS2tDLFVBQVViLGlCQUFpQixRQUFTckIsS0FBSzhCLFFBQVFrckIsT0FBTzhDLG9CQXBCekQ5dkIsS0FBSzhCLFFBQVFrckIsT0FBTzhDLGVBQWU5dkIsS0FBSzhCLFFBQVFrckIsT0FBTzhDLGlCQXdCbkVuQixrQkFBbUIsU0FBVVUsRUFBZTN0QixHQUN4QzFCLEtBQUs4QixRQUFRa3JCLE9BQU8rQyxjQUFjL3hCLEtBQUtnQyxLQUFNcXZCLEdBQWdCcnZCLEtBQUtVLEtBQUs0RSxTQUFTNUQsRUFBRUUsT0FBUSxZQUc5Rmd0QixnQkFBaUIsU0FBVVMsRUFBZTN0QixHQUN0QyxNQUFNRSxFQUFTRixFQUFFRSxPQUNYMnVCLEVBQU0zdUIsRUFBT0MsYUFBYSxnQkFDaEMsSUFBSzB1QixFQUFLLE9BRVYsTUFBTUMsRUFBVW5CLEVBQWNyQixXQUN4Qi9RLEVBQVVqZCxLQUFLVSxLQUFLK3ZCLFlBQVk3dUIsRUFBUSxjQUN4Q3lQLEVBQVFtZixFQUFROW5CLFFBQVE2bkIsR0FDMUJ0VCxHQUNlLElBQVg1TCxHQUFjbWYsRUFBUTduQixLQUFLNG5CLEdBRTNCbGYsR0FBUyxHQUFHbWYsRUFBUXZuQixPQUFPb0ksRUFBTyxHQUcxQ2dlLEVBQWNYLFdBQVdscEIsTUFBUTZwQixFQUFjWCxXQUFXbnBCLFlBQWNpckIsRUFBUXZlLEtBQUssTUFHekZ5ZCxPQUFRLFNBQVVMLEVBQWVxQixHQUM3QixNQUFNQyxFQUFZdEIsRUFBYy9CLFFBQzFCc0QsRUFBT3ZCLEVBQWNyQixXQUFjMEMsRUFBZUEsRUFBUXJvQixNQUFNLEtBQW5CLEdBQ25ELElBQUtzb0IsRUFBVyxPQUVoQixNQUFNRSxFQUFhRixFQUFVL25CLGlCQUFpQixVQUM5QyxJQUFLLElBQW9DMm5CLEVBQWhDMXlCLEVBQUksRUFBRzRKLEVBQU1vcEIsRUFBV3ZxQixPQUFhekksRUFBSTRKLEVBQUs1SixJQUNuRDB5QixFQUFNTSxFQUFXaHpCLEdBQUdnRSxhQUFhLGdCQUM3Qit1QixFQUFLbG9CLFFBQVE2bkIsSUFBUSxFQUNyQnZ3QixLQUFLVSxLQUFLeUksU0FBUzBuQixFQUFXaHpCLEdBQUksY0FFbENtQyxLQUFLVSxLQUFLd0ksWUFBWTJuQixFQUFXaHpCLEdBQUksY0FJN0N3eEIsRUFBY1gsV0FBV2xwQixNQUFRNnBCLEVBQWNYLFdBQVducEIsWUFBY3FyQixFQUFLM2UsS0FBSyxNQUd0RjZlLGlCQUFrQixTQUFVekIsRUFBZTBCLEVBQWFDLEdBQ3BELE1BQU1oUyxFQUFVaGYsS0FBS1UsS0FBS3V3QixnQkFBZ0JqeEIsS0FBS0ssUUFBUW1CLFFBQVEwdkIsU0FBUyxTQUFTVixHQUM3RSxNQUFPLFVBQVU3dUIsS0FBSzZ1QixFQUFRVyxhQUVsQyxHQUF1QixJQUFuQm5TLEVBQVExWSxPQUFjLE9BRTFCLE1BQU04cUIsRUFBYyxJQUFJcHhCLEtBQUtvRyxHQUFHMkgsT0FBTyxJQUFNaWpCLEVBQVNoakIsUUFBUSxLQUFNLElBQUssS0FDbkVySyxFQUFPLEdBQ2IsSUFBSXFYLEVBQU8sR0FDWCxJQUFJLElBQWlDcVcsRUFBN0J4ekIsRUFBSSxFQUFHNEosRUFBTXVYLEVBQVExWSxPQUFXekksRUFBSTRKLEVBQUs1SixJQUM3Q3d6QixFQUFJclMsRUFBUW5oQixHQUNQdXpCLEVBQVl6dkIsS0FBSzB2QixFQUFFOXJCLGVBQ3hCNUIsRUFBS2dGLEtBQUswb0IsR0FDVnJXLEdBQVEsMENBQTRDbmQsRUFBSSxLQUFPd3pCLEVBQUU5ckIsWUFBYyxTQUcvRCxJQUFoQjVCLEVBQUsyQyxPQUNMdEcsS0FBSzhCLFFBQVE4cEIsV0FBVzdwQixNQUFNL0QsS0FBS2dDLEtBQU0rd0IsSUFFekMvd0IsS0FBSzhCLFFBQVE4cEIsV0FBV0ksV0FBVytFLEVBQWFwdEIsRUFBTXFYLEdBQ3REaGIsS0FBSzhCLFFBQVE4cEIsV0FBVzVwQixLQUFLaEUsS0FBS2dDLEtBQU0rd0IsRUFBYS93QixLQUFLOEIsUUFBUWtyQixPQUFPc0UscUJBQXFCanlCLEtBQUtXLEtBQU1xdkIsTUFJakhpQyxxQkFBc0IsU0FBVWpDLEVBQWUxckIsR0FDM0NBLEVBQUs3QyxNQUFNc3ZCLElBQU9mLEVBQWN2QixTQUFTem1CLGFBQWUsRUFBSyxNQUdqRTRuQixrQkFBbUIsU0FBVThCLEVBQWFydkIsR0FFdEMsT0FEZ0JBLEVBQUVZLFNBRWQsS0FBSyxHQUNEWixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBQ0ZoRixLQUFLOEIsUUFBUThwQixXQUFXZSxTQUFTM3VCLEtBQUtnQyxLQUFNK3dCLEdBQWMsR0FDMUQsTUFDSixLQUFLLEdBQ0RydkIsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGaEYsS0FBSzhCLFFBQVE4cEIsV0FBV2UsU0FBUzN1QixLQUFLZ0MsS0FBTSt3QixFQUFhLEdBQ3pELE1BQ0osS0FBSyxHQUNHQSxFQUFZMWYsT0FBUyxJQUNyQjNQLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFDRmhGLEtBQUs4QixRQUFRa3JCLE9BQU80QyxrQkFBa0I1eEIsS0FBS2dDLEtBQU1BLEtBQUs4QixRQUFROHBCLFdBQVdpQixRQUFRa0UsRUFBYSxVQU05R25CLGtCQUFtQixTQUFVcHNCLEdBQ3pCLE1BQU02ckIsRUFBZ0JydkIsS0FBS0ssUUFBUTJzQixPQUFPbEIsY0FDcENsTixFQUFLcGIsRUFBT29iLElBQU0sS0FBTzVlLEtBQUtvRyxHQUFHdUIsS0FBS2lMLFNBQVNqRCxXQUFXM0IsUUFBUSxPQUFRLElBQ2hGeEssRUFBT29iLEdBQUtBLEVBQ1p5USxFQUFjdkIsU0FBU2h2QixNQUFRLElBQU04ZixFQUVoQ3lRLEVBQWNmLFdBQVd4dkIsTUFBTTBKLFFBQVc2bUIsRUFBY2xCLFVBQ3pEa0IsRUFBY2YsV0FBV3h2QixNQUFRMEUsRUFBTytCLGFBRzVDdkYsS0FBSzhCLFFBQVFrckIsT0FBTzJDLGVBQWUzeEIsS0FBS2dDLEtBQU1xdkIsRUFBZUEsRUFBY3ZCLFNBQVNodkIsT0FDcEZrQixLQUFLOEIsUUFBUThwQixXQUFXN3BCLE1BQU0vRCxLQUFLZ0MsS0FBTUEsS0FBS0ssUUFBUXVyQixXQUFXRSxlQUNqRTlyQixLQUFLSyxRQUFRMnNCLE9BQU9sQixjQUFjZ0MsU0FBU2xyQixTQUcvQ21zQixtQkFBb0IsU0FBVU0sRUFBZTN0QixHQUN6QzJ0QixFQUFjbEIsVUFBWXpzQixFQUFFRSxPQUFPOUMsTUFBTTBKLFFBRzdDd21CLGlCQUFrQixTQUFVSyxFQUFlM3RCLEdBQ3ZDLE1BQU01QyxFQUFRNEMsRUFBRUUsT0FBTzlDLE1BQU0wSixPQUM3QnhJLEtBQUs4QixRQUFRa3JCLE9BQU8yQyxlQUFlM3hCLEtBQUtnQyxLQUFNcXZCLEVBQWV2d0IsR0FFekRrQixLQUFLOEIsUUFBUWtyQixPQUFPc0MsaUJBQWlCdHhCLEtBQUtnQyxLQUFNbEIsR0FBUWtCLEtBQUs4QixRQUFRa3JCLE9BQU84RCxpQkFBaUI5eUIsS0FBS2dDLEtBQU1xdkIsRUFBZXJ2QixLQUFLSyxRQUFRdXJCLFdBQVdFLGNBQWVodEIsR0FDN0prQixLQUFLOEIsUUFBUThwQixXQUFXN3BCLE1BQU0vRCxLQUFLZ0MsS0FBTUEsS0FBS0ssUUFBUXVyQixXQUFXRSxnQkFHMUVvRCxnQkFBaUIsU0FBVUcsRUFBZWtDLEdBQ3RDLE1BQU16eUIsRUFBUXV3QixFQUFjdkIsU0FBU2h2QixNQUNqQ2tCLEtBQUs4QixRQUFRa3JCLE9BQU9zQyxpQkFBaUJ0eEIsS0FBS2dDLEtBQU1sQixJQUFRa0IsS0FBSzhCLFFBQVFrckIsT0FBTzhELGlCQUFpQjl5QixLQUFLZ0MsS0FBTXF2QixFQUFla0MsRUFBYXp5QixJQUc1SXF3QixlQUFnQixTQUFVNEIsR0FDdEIvd0IsS0FBSzhCLFFBQVE4cEIsV0FBVzdwQixNQUFNL0QsS0FBS2dDLEtBQU0rd0IsSUFHN0NwQixlQUFnQixTQUFVdHZCLEVBQVN2QixHQUMvQixNQUFNNGtCLEVBQVVyakIsRUFBUXFqQixRQUNsQmdLLEVBQVcxdEIsS0FBS3VDLFFBQVFpdkIsYUFDeEJDLEVBQVd6eEIsS0FBS3VDLFFBQVFtdkIsYUFDeEJDLEVBQW9CLHlDQUF5Q2h3QixLQUFLN0MsSUFBc0MsSUFBNUJBLEVBQU00SixRQUFRZ2xCLEdBQzFGa0UsSUFBZ0JsRSxHQUFtQjF0QixLQUFLb0csR0FBRzJILE9BQU8sSUFBTS9OLEtBQUtVLEtBQUtteEIsbUJBQW1CL3lCLEVBQU1tckIsT0FBTyxFQUFHeUQsRUFBU3BuQixVQUFVM0UsS0FBSytyQixHQUNuSTV1QixFQUFRdUIsRUFBUTZ0QixVQUFZeEssRUFBUW5lLFlBQWV6RyxFQUFhMnlCLEVBQVczeUIsR0FBUzR1QixHQUFhaUUsR0FBcUJDLEVBQW1DRCxFQUFtQjd5QixFQUFRLFNBQVM2QyxLQUFLN0MsR0FBUyxVQUFZQSxFQUFRa0IsS0FBS0ssUUFBUTJzQixPQUFPRSxNQUFRLE1BQU12ckIsS0FBSzdDLEdBQVMsR0FBSyxLQUFPQSxFQUFySjR1QixFQUFXNXVCLEVBQXRGLEdBRXZEa0IsS0FBSzhCLFFBQVFrckIsT0FBT3NDLGlCQUFpQnR4QixLQUFLZ0MsS0FBTWxCLElBQ2hEdUIsRUFBUXVrQixTQUFTOWpCLE1BQU1DLFFBQVUsUUFDakNmLEtBQUtVLEtBQUt5SSxTQUFTOUksRUFBUW11QixlQUFnQixZQUUzQ251QixFQUFRdWtCLFNBQVM5akIsTUFBTUMsUUFBVSxPQUNqQ2YsS0FBS1UsS0FBS3dJLFlBQVk3SSxFQUFRbXVCLGVBQWdCLFlBRzdDeHVCLEtBQUs4QixRQUFRa3JCLE9BQU9zQyxpQkFBaUJ0eEIsS0FBS2dDLEtBQU1sQixJQUFVdUIsRUFBUWt1QixjQUFjdFIsUUFDakY1YyxFQUFRc3RCLFNBQVM3c0IsTUFBTUMsUUFBVSxRQUVqQ1YsRUFBUXN0QixTQUFTN3NCLE1BQU1DLFFBQVUsUUFJekMrd0IsT0FBUSxTQUFVOUUsRUFBUXFDLEdBQ2pCckMsSUFDTHFDLEVBQWNwQixXQUFhakIsRUFDM0JxQyxFQUFjbkIsVUFBWWxCLEVBQU96VCxLQUNqQzhWLEVBQWNyQixXQUFhaEIsRUFBT1ksSUFBSXZsQixNQUFNLE9BR2hEMHBCLGFBQWMsU0FBVS9FLEVBQVF0bkIsRUFBS3NzQixFQUFhM0MsRUFBZTRDLElBRXhEanlCLEtBQUs4QixRQUFRa3JCLE9BQU9zQyxpQkFBaUJ0eEIsS0FBS2dDLEtBQU0wRixJQUFRMnBCLEVBQWNkLGNBQWN0UixRQUNyRitQLEVBQU8zVyxhQUFhLFdBQVkyYixHQUFldHNCLEdBRS9Dc25CLEVBQU9rRixnQkFBZ0IsWUFJdkI3QyxFQUFjM0ssZUFBZXpILFFBQVMrUCxFQUFPcHJCLE9BQVMsU0FDckRvckIsRUFBT2tGLGdCQUFnQixVQUc1QixNQUFNdEUsRUFBTXlCLEVBQWNyQixXQUFXL2IsS0FBSyxLQUNyQzJiLEVBQ0FaLEVBQU9ZLElBQU1BLEVBRFJaLEVBQU9rRixnQkFBZ0IsT0FJakNsRixFQUFPelQsS0FBTzdULEVBQ1Z1c0IsRUFDK0IsSUFBM0JqRixFQUFPcE4sU0FBU3RaLFNBQWMwbUIsRUFBT3puQixZQUFjLElBRXZEeW5CLEVBQU96bkIsWUFBY3lzQixHQUk3QkcsYUFBYyxTQUFVOUMsRUFBZTRDLEdBQ25DLEdBQXVDLElBQW5DNUMsRUFBY25CLFVBQVU1bkIsT0FBYyxPQUFPLEtBRWpELE1BQU1aLEVBQU0ycEIsRUFBY25CLFVBQ3BCbEIsRUFBU3FDLEVBQWNmLFdBQ3ZCMEQsRUFBc0MsSUFBeEJoRixFQUFPbHVCLE1BQU13SCxPQUFlWixFQUFNc25CLEVBQU9sdUIsTUFFdkRzekIsRUFBSy9DLEVBQWNwQixZQUFjanVCLEtBQUtVLEtBQUtDLGNBQWMsS0FLL0QsT0FKQVgsS0FBSzhCLFFBQVFrckIsT0FBTytFLGFBQWEvekIsS0FBS2dDLEtBQU1veUIsRUFBSTFzQixFQUFLc3NCLEVBQWEzQyxFQUFlNEMsR0FFakY1QyxFQUFjbkIsVUFBWW1CLEVBQWMzTCxRQUFRbmUsWUFBYzhwQixFQUFjdkIsU0FBU2h2QixNQUFRdXdCLEVBQWNmLFdBQVd4dkIsTUFBUSxHQUV2SHN6QixHQUdYaEQsdUJBQXdCLFNBQVVDLEdBQzlCLElBQUkzcEIsRUFBTTJwQixFQUFjdkIsU0FBU2h2QixNQUM3QmtCLEtBQUs4QixRQUFRa3JCLE9BQU9zQyxpQkFBaUJ0eEIsS0FBS2dDLEtBQU0wRixJQUNoREEsRUFBTUEsRUFBSXVrQixPQUFPLEdBQ2pCb0YsRUFBY3pLLFNBQVM5akIsTUFBTUMsUUFBVSxPQUN2Q2YsS0FBS1UsS0FBS3dJLFlBQVltbUIsRUFBY2IsZUFBZ0IsVUFDcER4dUIsS0FBSzhCLFFBQVE4cEIsV0FBVzdwQixNQUFNL0QsS0FBS2dDLEtBQU1BLEtBQUtLLFFBQVF1ckIsV0FBV0UsaUJBRWpFcG1CLEVBQU0sSUFBTUEsRUFDWjJwQixFQUFjekssU0FBUzlqQixNQUFNQyxRQUFVLFFBQ3ZDZixLQUFLVSxLQUFLeUksU0FBU2ttQixFQUFjYixlQUFnQixVQUNqRGEsRUFBY2QsY0FBY3RSLFNBQVUsRUFDdENvUyxFQUFjMUIsU0FBUzdzQixNQUFNQyxRQUFVLE9BQ3ZDZixLQUFLOEIsUUFBUWtyQixPQUFPOEQsaUJBQWlCOXlCLEtBQUtnQyxLQUFNcXZCLEVBQWVydkIsS0FBS0ssUUFBUXVyQixXQUFXRSxjQUFlcG1CLElBRzFHMnBCLEVBQWN2QixTQUFTaHZCLE1BQVE0RyxFQUMvQjFGLEtBQUs4QixRQUFRa3JCLE9BQU8yQyxlQUFlM3hCLEtBQUtnQyxLQUFNcXZCLEVBQWUzcEIsR0FDN0QycEIsRUFBY3ZCLFNBQVNsckIsU0FHM0Jpc0Isd0JBQXlCLFNBQVVRLEVBQWUzdEIsR0FDZSxpQkFBbEQydEIsRUFBY3RCLGVBQWVLLG1CQUNwQzFzQixFQUFFRSxPQUFPcWIsUUFDVGpkLEtBQUs4QixRQUFRa3JCLE9BQU8wQyxPQUFPMXhCLEtBQUtnQyxLQUFNcXZCLEVBQWVydkIsS0FBSzhCLFFBQVFrckIsT0FBT3FGLFVBQVVyMEIsS0FBS2dDLEtBQU1xdkIsRUFBZUEsRUFBY3RCLGVBQWVLLG1CQUUxSXB1QixLQUFLOEIsUUFBUWtyQixPQUFPMEMsT0FBTzF4QixLQUFLZ0MsS0FBTXF2QixFQUFlcnZCLEtBQUs4QixRQUFRa3JCLE9BQU9zRixXQUFXdDBCLEtBQUtnQyxLQUFNcXZCLEVBQWVBLEVBQWN0QixlQUFlSyxxQkFJbkpVLHVCQUF3QixTQUFVTyxFQUFlM3RCLEdBQ3pDQSxFQUFFRSxPQUFPcWIsU0FDVG9TLEVBQWMxQixTQUFTN3NCLE1BQU1DLFFBQVUsUUFDdkNzdUIsRUFBY3pLLFNBQVM5akIsTUFBTUMsUUFBVSxPQUN2Q2YsS0FBS1UsS0FBS3dJLFlBQVltbUIsRUFBY2IsZUFBZ0IsVUFDcERhLEVBQWNuQixVQUFZbUIsRUFBYzNMLFFBQVFuZSxZQUFjOHBCLEVBQWN2QixTQUFTaHZCLE1BQVF1d0IsRUFBY3ZCLFNBQVNodkIsTUFBTWtQLFFBQVEsT0FBUSxJQUMvRSxpQkFBaERxaEIsRUFBY3RCLGVBQWVNLGdCQUNwQ3J1QixLQUFLOEIsUUFBUWtyQixPQUFPMEMsT0FBTzF4QixLQUFLZ0MsS0FBTXF2QixFQUFlcnZCLEtBQUs4QixRQUFRa3JCLE9BQU9xRixVQUFVcjBCLEtBQUtnQyxLQUFNcXZCLEVBQWVBLEVBQWN0QixlQUFlTSxtQkFHOUlnQixFQUFjMUIsU0FBUzdzQixNQUFNQyxRQUFVLE9BQ29CLGlCQUFoRHN1QixFQUFjdEIsZUFBZU0sZ0JBQ3BDcnVCLEtBQUs4QixRQUFRa3JCLE9BQU8wQyxPQUFPMXhCLEtBQUtnQyxLQUFNcXZCLEVBQWVydkIsS0FBSzhCLFFBQVFrckIsT0FBT3NGLFdBQVd0MEIsS0FBS2dDLEtBQU1xdkIsRUFBZUEsRUFBY3RCLGVBQWVNLG1CQUt2SmdFLFVBQVcsU0FBVWhELEVBQWVxQixHQUNoQyxNQUFNRixFQUFVbkIsRUFBY3JCLFdBQzlCLElBQUswQyxFQUFTLE9BQU9GLEVBQVF2ZSxLQUFLLEtBRWxDLEdBQUksVUFBVXRRLEtBQUsrdUIsR0FHZixPQUZBQSxFQUFVQSxFQUFRMWlCLFFBQVEsVUFBVyxJQUFJeEYsT0FDekM2bUIsRUFBY3JCLFdBQWEwQyxFQUFRcm9CLE1BQU0sS0FDbENxb0IsRUFHWCxNQUFNRSxFQUFPRixFQUFRcm9CLE1BQU0sS0FDM0IsSUFBSyxJQUE4QmdKLEVBQTFCeFQsRUFBSSxFQUFHNEosRUFBTW1wQixFQUFLdHFCLE9BQWV6SSxFQUFJNEosRUFBSzVKLElBQy9Dd1QsRUFBUW1mLEVBQVE5bkIsUUFBUWtvQixFQUFLL3lCLEtBQ2QsSUFBWHdULEdBQWNtZixFQUFRN25CLEtBQUtpb0IsRUFBSy95QixJQUd4QyxPQUFPMnlCLEVBQVF2ZSxLQUFLLE1BR3hCcWdCLFdBQVksU0FBVWpELEVBQWVxQixHQUNqQyxJQUFLQSxFQUFTLE9BQU9yQixFQUFjckIsV0FBVy9iLEtBQUssS0FDL0MsVUFBVXRRLEtBQUsrdUIsS0FBVUEsRUFBVUEsRUFBUTFpQixRQUFRLFVBQVcsSUFBSXhGLFFBRXRFLE1BQU1vb0IsRUFBT3ZCLEVBQWNyQixXQUFXL2IsS0FBSyxLQUFLakUsUUFBUWhPLEtBQUtvRyxHQUFHMkgsT0FBTzJpQixFQUFVLFFBQVMsSUFFMUYsT0FEQXJCLEVBQWNyQixXQUFhNEMsRUFBS3ZvQixNQUFNLEtBQy9CdW9CLEdBR1gvdEIsS0FBTSxTQUFVd3NCLEdBQ1pBLEVBQWNwQixXQUFhLEtBQzNCb0IsRUFBY25CLFVBQVltQixFQUFjM0wsUUFBUW5lLFlBQWM4cEIsRUFBY3ZCLFNBQVNodkIsTUFBUSxHQUM3RnV3QixFQUFjZixXQUFXeHZCLE1BQVEsR0FDakN1d0IsRUFBYzNLLGVBQWV6SCxTQUFVLEVBQ3ZDb1MsRUFBY2QsY0FBY3RSLFNBQVUsRUFDdENvUyxFQUFjbEIsU0FBVSxFQUN4Qm51QixLQUFLOEIsUUFBUWtyQixPQUFPMEMsT0FBTzF4QixLQUFLZ0MsS0FBTXF2QixFQUFlQSxFQUFjN0IsWUFDL0Q2QixFQUFjL0IsU0FDZHR0QixLQUFLOEIsUUFBUWtyQixPQUFPK0MsY0FBYy94QixLQUFLZ0MsS0FBTXF2QixHQUFlLEdBRWhFcnZCLEtBQUtLLFFBQVEyc0IsT0FBT2xCLGNBQWdCLEtBQ3BDOXJCLEtBQUs4QixRQUFROHBCLFdBQVcvb0IsS0FBSzdFLEtBQUtnQyxLQUFNQSxLQUFLSyxRQUFRdXJCLFdBQVdFLGlCQzliekQsR0FDWDF0QixLQUFNLE9BQ04yQyxRQUFTLFNBQ1RaLElBQUssU0FBVUMsR0FDWEEsRUFBSytwQixVQUFVLENBQUNqcUIsSUFBUThzQixJQUV4QixNQUFNM3NCLEVBQVVELEVBQUtDLFFBQ2ZreEIsRUFBY2x4QixFQUFRdVksS0FBTyxDQUMvQmxXLGFBQWMsS0FDZDZ2QixZQUFhLEtBQ2JDLFVBQVcsTUFJZixJQUFJQyxFQUFjenlCLEtBQUsweUIsVUFBVXR5QixHQUNqQ214QixFQUFZbndCLE1BQVFxeEIsRUFHcEIsSUFBSUUsRUFBa0IzeUIsS0FBSzR5Qix5QkFBeUJ4eUIsR0FDcERteEIsRUFBWXNCLGVBQWlCRixFQUU3QkYsRUFBWW51QixjQUFjLFFBQVFqRCxpQkFBaUIsU0FBVXJCLEtBQUt5cUIsT0FBT3ByQixLQUFLZSxJQUM5RXV5QixFQUFnQnR4QixpQkFBaUIsUUFBU3JCLEtBQUs4eUIsdUJBQXVCenpCLEtBQUtlLElBRzNFQyxFQUFRSCxPQUFPa0IsTUFBTUgsWUFBWXd4QixHQUdqQ3B5QixFQUFRbUIsUUFBUUMsU0FBU1IsWUFBWTB4QixHQUdyQ3Z5QixFQUFLMEIsUUFBUWtyQixPQUFPWixVQUFVcHVCLEtBQUtvQyxFQUFNLE9BQVFxeUIsR0FDakRsQixFQUFZN3VCLGFBQWVyQyxFQUFRMnNCLE9BQU9uQixPQUFPalQsS0FBS2tWLFNBR3REMkUsRUFBYyxLQUFNRSxFQUFrQixNQUkxQ0QsVUFBVyxTQUFVdHlCLEdBQ2pCLE1BQU13RSxFQUFPeEUsRUFBS3dFLEtBQ1oxRSxFQUFTRSxFQUFLTSxLQUFLQyxjQUFjLE9BQ2pDbUUsRUFBUTFFLEVBQUswRSxNQUVuQjVFLEVBQU9VLFVBQVksb0JBQ25CVixFQUFPWSxNQUFNQyxRQUFVLE9BQ3ZCLElBQUlpYSxFQUFPLHdIQUd1RnBXLEVBQUtDLFVBQVU5QyxNQUFRLGlCQUFtQjZDLEVBQUtDLFVBQVU5QyxNQUFRLEtBQ25KK0MsRUFBTUMsT0FKWCx5Q0FNbUNILEVBQUtDLFVBQVU0ZixRQUFRamYsTUFOMUQsZ0JBUUhwRixFQUFLQyxRQUFRMnNCLE9BQU9YLE1BQU1qb0IsVUFSdkIscUZBVTBEUSxFQUFLQyxVQUFVMGdCLGFBQWUsaUJBQW1CM2dCLEVBQUtDLFVBQVUwZ0IsYUFBZSxXQUFhM2dCLEVBQUtDLFVBQVUwZ0IsYUFWckssZ0NBZVgsT0FEQXJsQixFQUFPa0UsVUFBWTRXLEVBQ1o5YSxHQUlYMHlCLHlCQUEwQixTQUFVeHlCLEdBQ2hDLE1BQU13RSxFQUFPeEUsRUFBS3dFLEtBQ1pFLEVBQVExRSxFQUFLMEUsTUFDYml1QixFQUFXM3lCLEVBQUtNLEtBQUtDLGNBQWMsT0FzQnpDLE9BcEJBb3lCLEVBQVNueUIsVUFBWSxtQ0FDckJteUIsRUFBUzN1QixVQUFZLHFPQUtMVSxFQUFNaWhCLEtBQ04sZ0VBQWtFbmhCLEVBQUtraEIsV0FBV0MsS0FON0UsOEdBU0xqaEIsRUFBTWtoQixPQUNOLGdFQUFrRXBoQixFQUFLa2hCLFdBQVdFLE9BVjdFLDhHQWFMbGhCLEVBQU1rdUIsT0FDTixnRUFBa0VwdUIsRUFBS2toQixXQUFXRyxPQWQ3RSxzQ0FtQmQ4TSxHQU1YL3dCLEtBQU0sV0FDRmhDLEtBQUs4QixRQUFRNUIsT0FBTzhCLEtBQUtoRSxLQUFLZ0MsS0FBTSxPQUFRLFNBQVdBLEtBQUtpekIsd0JBR2hFeEksT0FBUSxTQUFVL29CLEdBQ2QxQixLQUFLa3pCLGNBRUx4eEIsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUVGLElBQ0ksTUFBTW90QixFQUFLcHlCLEtBQUs4QixRQUFRa3JCLE9BQU9tRixhQUFhbjBCLEtBQUtnQyxLQUFNQSxLQUFLSyxRQUFRMnNCLE9BQU9uQixPQUFPalQsTUFBTSxHQUN4RixHQUFXLE9BQVB3WixFQUFhLE9BRWpCLEdBQUtweUIsS0FBS0ssUUFBUUgsT0FBT0ssWUFXbEIsQ0FFSCxNQUFNNHlCLEVBQVduekIsS0FBS0ssUUFBUXVZLEtBQUsyWixZQUFZOWIsV0FBVyxHQUMxRHpXLEtBQUtvekIsU0FBU0QsRUFBVSxFQUFHQSxFQUFVQSxFQUFTNXRCLFlBQVllLFlBZHhCLENBQ2xDLE1BQU0rc0IsRUFBa0JyekIsS0FBS3N6QixzQkFDN0IsR0FBSUQsRUFBZ0Ivc0IsT0FBUyxFQUFHLENBQzVCLE1BQU1pdEIsRUFBVXZ6QixLQUFLVSxLQUFLQyxjQUFjMHlCLEVBQWdCLEdBQUdsQyxVQUUzRCxHQURBb0MsRUFBUXR5QixZQUFZbXhCLElBQ2ZweUIsS0FBS3d6QixXQUFXRCxFQUFTLE1BQU0sR0FBTyxZQUUzQyxJQUFLdnpCLEtBQUt3ekIsV0FBV3BCLEVBQUksTUFBTSxHQUFPLE9BRzFDcHlCLEtBQUtvekIsU0FBU2hCLEVBQUczYixXQUFXLEdBQUksRUFBRzJiLEVBQUczYixXQUFXLEdBQUkyYixFQUFHN3NCLFlBQVllLFNBTTFFLFFBQ0V0RyxLQUFLOEIsUUFBUTVCLE9BQU82QixNQUFNL0QsS0FBS2dDLE1BQy9CQSxLQUFLeXpCLGVBRUx6ekIsS0FBSzB6QixRQUFRL3FCLE1BQUssR0FHdEIsT0FBTyxHQU1YZ3JCLE9BQVEsU0FBVW55QixHQUNkLEdBQUtBLEdBSUUsR0FBSXhCLEtBQUtVLEtBQUttSSxTQUFTckgsSUFBd0QsT0FBNUNBLEVBQVFLLGFBQWEsbUJBSTNELE9BSEk3QixLQUFLNHpCLGdCQUFnQmxyQixRQUFRMUksS0FBS0ssUUFBUXVZLEtBQUtpYSxnQkFBa0IsR0FDakU3eUIsS0FBSzhCLFFBQVE4VyxLQUFLaWIsZ0JBQWdCNzFCLEtBQUtnQyxLQUFNd0IsSUFFMUMsT0FQSHhCLEtBQUs0ekIsZ0JBQWdCbHJCLFFBQVExSSxLQUFLSyxRQUFRdVksS0FBS2lhLGlCQUFtQixHQUNsRTd5QixLQUFLOHpCLGlCQVNiLE9BQU8sR0FNWG54QixHQUFJLFNBQVVWLEdBQ1ZqQyxLQUFLOEIsUUFBUWtyQixPQUFPcnFCLEdBQUczRSxLQUFLZ0MsS0FBTUEsS0FBS0ssUUFBUTJzQixPQUFPbkIsT0FBT2pULEtBQU0zVyxJQUd2RTR4QixnQkFBaUIsU0FBVUUsR0FDdkIvekIsS0FBS2cwQixTQUFXaDBCLEtBQUtLLFFBQVF1WSxLQUFLMlosWUFBY3Z5QixLQUFLSyxRQUFRMnNCLE9BQU9uQixPQUFPalQsS0FBS3FWLFdBQWE4RixFQUM3RixNQUFNRSxFQUFVajBCLEtBQUtLLFFBQVF1WSxLQUFLaWEsZUFDNUJqYSxFQUFPcWIsRUFBUTN2QixjQUFjLEtBRW5Dc1UsRUFBS1csS0FBT3dhLEVBQWN4YSxLQUMxQlgsRUFBS3BULE1BQVF1dUIsRUFBY3h1QixZQUMzQnFULEVBQUtyVCxZQUFjd3VCLEVBQWN4dUIsWUFFakN2RixLQUFLVSxLQUFLeUksU0FBUzRxQixFQUFlLE1BQ2xDL3pCLEtBQUtrMEIsc0JBQXNCRCxFQUFTRixFQUFlLFNBQVUsQ0FBQ3JqQixLQUFNLEVBQUcwZixJQUFLLElBQzVFcHdCLEtBQUttMEIsY0FBY0YsRUFBU0YsRUFBZSxPQUFRL3pCLEtBQUtVLEtBQUt3SSxZQUFZN0osS0FBS1csS0FBS1UsS0FBTVYsS0FBS0ssUUFBUXVZLEtBQUsyWixZQUFhLFFBRzVITyx1QkFBd0IsU0FBVXB4QixHQUM5QkEsRUFBRXNELGtCQUVGLE1BQU13RSxFQUFVOUgsRUFBRUUsT0FBT0MsYUFBYSxpQkFBbUJILEVBQUVFLE9BQU82SCxXQUFXNUgsYUFBYSxnQkFDMUYsR0FBSzJILEVBQUwsQ0FJQSxHQUZBOUgsRUFBRTRILGlCQUVFLFNBQVMzSCxLQUFLNkgsR0FDZHhKLEtBQUs4QixRQUFRNUIsT0FBTzhCLEtBQUtoRSxLQUFLZ0MsS0FBTSxRQUFRLFFBQ3pDLEdBQUksU0FBUzJCLEtBQUs2SCxHQUFVLENBQy9CLE1BQU00cUIsRUFBS3AwQixLQUFLVSxLQUFLMnpCLGdCQUFnQnIwQixLQUFLSyxRQUFRdVksS0FBSzJaLGFBQWEsU0FBVS9CLEdBQVcsT0FBcUMsSUFBOUJBLEVBQVEvWixXQUFXblEsUUFBcUMsSUFBckJrcUIsRUFBUTdaLFlBQW1CLEdBQ3hKMmQsRUFBS3QwQixLQUFLVSxLQUFLMnpCLGdCQUFnQnIwQixLQUFLSyxRQUFRdVksS0FBSzJaLGFBQWEsU0FBVS9CLEdBQVcsT0FBcUMsSUFBOUJBLEVBQVEvWixXQUFXblEsUUFBcUMsSUFBckJrcUIsRUFBUTdaLFlBQW1CLEdBQzlKM1csS0FBS296QixTQUFTZ0IsRUFBSSxFQUFHRSxFQUFJQSxFQUFHL3VCLFlBQVllLFFBQ3hDdEcsS0FBS2tyQixXQUFXLEtBQU0sS0FBTSxDQUFDLE1BQU0sUUFHbkNsckIsS0FBS1UsS0FBS3NwQixXQUFXaHFCLEtBQUtLLFFBQVF1WSxLQUFLMlosYUFDdkN2eUIsS0FBS0ssUUFBUTJzQixPQUFPbkIsT0FBT2pULEtBQUtxVixXQUFhLEtBQzdDanVCLEtBQUs0QyxRQUdMNUMsS0FBSzB6QixRQUFRL3FCLE1BQUssR0FHdEIzSSxLQUFLOHpCLG1CQU1UanhCLEtBQU0sV0FDRjdDLEtBQUtLLFFBQVF1WSxLQUFLaWEsZUFBZS94QixNQUFNQyxRQUFVLE9BQ2pEZixLQUFLOEIsUUFBUWtyQixPQUFPbnFCLEtBQUs3RSxLQUFLZ0MsS0FBTUEsS0FBS0ssUUFBUTJzQixPQUFPbkIsT0FBT2pULFEsK0RDN014RCxHQUNYeGEsS0FBTSxRQUNOMkMsUUFBUyxTQUNUWixJQUFLLFNBQVVDLEdBQ1hBLEVBQUsrcEIsVUFBVSxDQUFDanFCLElBQVE4c0IsRUFBUXVILElBQVdDLElBQVVDLE1BRXJELE1BQU1seUIsRUFBVW5DLEVBQUttQyxRQUNmbEMsRUFBVUQsRUFBS0MsUUFDZnEwQixFQUFlcjBCLEVBQVE2aUIsTUFBUSxDQUNqQ3lSLFVBQVcsR0FDWEMsV0FBWSxFQUNaQyxrQkFBbUIsRUFDbkJueUIsYUFBYyxLQUNkb3lCLFNBQVV2eUIsRUFBUXd5QixlQUNsQkMsYUFBYyxHQUNkQyxTQUFVLEdBQ1ZDLE9BQVEsT0FDUkMsa0JBQW1CLHVCQUNuQkMsT0FBUSxDQUFDQyxXQUFZLElBQ3JCQyxlQUFnQixNQUNoQkMsa0JBQW1CLEVBRW5CQyxTQUFVLEtBQ1ZDLE9BQVEsS0FDUkMsV0FBWSxLQUVaQyxPQUFRLEtBQ1JDLE9BQVEsS0FDUkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxjQUFlLE9BQ2ZDLGNBQWUsT0FDZkMsVUFBa0MsU0FBdkI1ekIsRUFBUTZ6QixXQUF3QixHQUFLN3pCLEVBQVE2ekIsV0FDeERDLFVBQW1DLFNBQXhCOXpCLEVBQVErekIsWUFBeUIsR0FBSy96QixFQUFRK3pCLFlBQ3pEQyxvQkFBb0IsRUFDcEJDLFVBQVdqMEIsRUFBUWswQixjQUNuQkMsZ0JBQWlCbjBCLEVBQVFvMEIsZ0JBQ3pCQyxVQUFXcjBCLEVBQVFzMEIsY0FDbkJDLFlBQWF2MEIsRUFBUXcwQixlQUNyQkMsZ0JBQWlCejBCLEVBQVEwMEIsd0JBQ3pCQyxRQUFRLEVBQ1JDLFFBQVMsRUFDVEMsUUFBUyxFQUNUQyxjQUFjLEVBQ2RDLGlCQUFpQixFQUNqQkMsU0FBVSxLQUNWQyxlQUFnQixNQUlwQixJQUFJQyxFQUFlejNCLEtBQUsweUIsVUFBVXR5QixHQUNsQ3MwQixFQUFhdHpCLE1BQVFxMkIsRUFDckIvQyxFQUFhZ0QsYUFBZUQsRUFBYW56QixjQUFjLG1CQUN2RG93QixFQUFhaUQsV0FBYUYsRUFBYW56QixjQUFjLGtCQUNyRG93QixFQUFhaHlCLGFBQWVneUIsRUFBYWdELGNBQWdCaEQsRUFBYWlELFdBQ3RFakQsRUFBYXJZLFFBQVVvYixFQUFhbnpCLGNBQWMsa0JBQ2xEb3dCLEVBQWE4QyxlQUFpQkMsRUFBYW56QixjQUFjLDRCQUN6RG93QixFQUFha0QsV0FBYUgsRUFBYW56QixjQUFjLDJDQUdyRG16QixFQUFhbnpCLGNBQWMsbUJBQW1CakQsaUJBQWlCLFFBQVNyQixLQUFLNjNCLFFBQVF4NEIsS0FBS2UsSUFDMUZxM0IsRUFBYW56QixjQUFjLFFBQVFqRCxpQkFBaUIsU0FBVXJCLEtBQUt5cUIsT0FBT3ByQixLQUFLZSxJQUMzRXMwQixFQUFhZ0QsY0FBY0QsRUFBYW56QixjQUFjLG1CQUFtQmpELGlCQUFpQixRQUFTckIsS0FBSzgzQixxQkFBcUJ6NEIsS0FBS3ExQixFQUFhZ0QsYUFBY2hELEVBQWFpRCxXQUFZakQsRUFBYWtELGFBQ25NbEQsRUFBYWlELFlBQVlqRCxFQUFhaUQsV0FBV3QyQixpQkFBaUIsUUFBU3JCLEtBQUsrM0IsZUFBZTE0QixLQUFLcTFCLEVBQWFrRCxXQUFZbEQsRUFBYVUsT0FBUTd5QixFQUFRaXZCLGVBQzFKa0QsRUFBYWdELGNBQWdCaEQsRUFBYWlELFlBQVlqRCxFQUFhZ0QsYUFBYXIyQixpQkFBaUIsU0FBVXJCLEtBQUtnNEIsaUJBQWlCMzRCLEtBQUtxMUIsSUFFMUksTUFBTXVELEVBQXFCUixFQUFhbnpCLGNBQWMsa0JBQ2xEMnpCLEdBQW9CQSxFQUFtQjUyQixpQkFBaUIsUUFBU3JCLEtBQUtrNEIsYUFBYTc0QixLQUFLZSxJQUU1RnMwQixFQUFhalAsV0FBYSxHQUMxQmlQLEVBQWFpQixPQUFTLEdBQ3RCakIsRUFBYWtCLE9BQVMsR0FDbEJyekIsRUFBUWswQixnQkFDUi9CLEVBQWFqUCxXQUFhZ1MsRUFBYW56QixjQUFjLCtCQUNyRG93QixFQUFhaUIsT0FBUzhCLEVBQWFuekIsY0FBYyxxQkFDakRvd0IsRUFBYWtCLE9BQVM2QixFQUFhbnpCLGNBQWMscUJBQ2pEb3dCLEVBQWFpQixPQUFPNzJCLE1BQVF5RCxFQUFRNnpCLFdBQ3BDMUIsRUFBYWtCLE9BQU85MkIsTUFBUXlELEVBQVErekIsWUFFcEM1QixFQUFhaUIsT0FBT3QwQixpQkFBaUIsUUFBU3JCLEtBQUttNEIsYUFBYTk0QixLQUFLZSxFQUFNLE1BQzNFczBCLEVBQWFrQixPQUFPdjBCLGlCQUFpQixRQUFTckIsS0FBS200QixhQUFhOTRCLEtBQUtlLEVBQU0sTUFFM0VzMEIsRUFBYWlCLE9BQU90MEIsaUJBQWlCLFNBQVVyQixLQUFLbzRCLFNBQVMvNEIsS0FBS2UsSUFDbEVzMEIsRUFBYWtCLE9BQU92MEIsaUJBQWlCLFNBQVVyQixLQUFLbzRCLFNBQVMvNEIsS0FBS2UsSUFDbEVzMEIsRUFBYWpQLFdBQVdwa0IsaUJBQWlCLFNBQVVyQixLQUFLbzRCLFNBQVMvNEIsS0FBS2UsSUFFdEVxM0IsRUFBYW56QixjQUFjLHlCQUF5QmpELGlCQUFpQixRQUFTckIsS0FBS3E0QixXQUFXaDVCLEtBQUtlLEtBSXZHQyxFQUFRSCxPQUFPa0IsTUFBTUgsWUFBWXcyQixHQUdqQ3IzQixFQUFLMEIsUUFBUWtyQixPQUFPWixVQUFVcHVCLEtBQUtvQyxFQUFNLFFBQVNxM0IsRUFBYW56QixjQUFjLHlCQUM3RW93QixFQUFhbEMsVUFBWXB5QixFQUFLQyxRQUFRMnNCLE9BQU9uQixPQUFPM0ksTUFHcER1VSxFQUFlLE1BSW5CL0UsVUFBVyxTQUFVdHlCLEdBQ2pCLE1BQU1zTyxFQUFTdE8sRUFBS21DLFFBQ2RxQyxFQUFPeEUsRUFBS3dFLEtBQ1oxRSxFQUFTRSxFQUFLTSxLQUFLQyxjQUFjLE9BRXZDVCxFQUFPVSxVQUFZLG9DQUNuQlYsRUFBT1ksTUFBTUMsUUFBVSxPQUV2QixJQUFJaWEsRUFBTyxnSUFFaUdwVyxFQUFLQyxVQUFVOUMsTUFBUSxpQkFBbUI2QyxFQUFLQyxVQUFVOUMsTUFBUSxLQUNqSzNCLEVBQUswRSxNQUFNQyxPQUhaLHlDQUsrQkgsRUFBS0MsVUFBVW9nQixTQUFTemYsTUFMdkQsb0hBUTBFWixFQUFLeWMsUUFBUTZCLE1BUnZGLDJFQVNpRXRlLEVBQUt5YyxRQUFRekksS0FUOUUsZ01BMkNQLEdBNUJZbEssRUFBTzRwQixpQkFDUHRkLEdBQVEsc0NBRVlwVyxFQUFLQyxVQUFVb2dCLFNBQVNDLEtBRnBDLDZHQUl5RXhXLEVBQU82cEIsWUFBYyxLQUFPN3BCLEVBQU84cEIsa0JBQW9CLHVCQUF5QixJQUp6Siw0RkFLZ0c1ekIsRUFBS2toQixXQUFXRyxPQUFTLGlCQUFtQnJoQixFQUFLa2hCLFdBQVdHLE9BQVMsS0FBTzdsQixFQUFLMEUsTUFBTUMsT0FMdkwseUJBVVIySixFQUFPK3BCLGdCQUNQemQsR0FBUSxzQ0FFWXBXLEVBQUtDLFVBQVVvZ0IsU0FBU3ZmLElBRnBDLG9IQUtNZ0osRUFBT2dxQixpQkFBbUJ0NEIsRUFBSzBCLFFBQVF1aUIsYUFBZ0IseUZBQTJGemYsRUFBS3ljLFFBQVFnRCxhQUFlLGlCQUFtQnpmLEVBQUt5YyxRQUFRZ0QsYUFBZSxLQUFPamtCLEVBQUswRSxNQUFNNnpCLGNBQWdCLFlBQWMsSUFMblIsbURBV1ozZCxHQUFRLDRDQUVZcFcsRUFBS0MsVUFBVW9nQixTQUFTNUksUUFGcEMsMEVBS1ozTixFQUFPK25CLGNBQWUsQ0FDdEIsTUFBTW1DLEVBQWlCbHFCLEVBQU91b0Isd0JBQ3hCNEIsRUFBcUJELEVBQWlCLHFDQUF1QyxHQUM3RUUsRUFBaUJwcUIsRUFBT2lvQixnQkFBeUQsR0FBdkMscUNBQ2hEM2IsR0FBUSwrQkFDSTRkLElBQW1CbHFCLEVBQU9pb0IsZ0JBQzFCM2IsR0FBUSwwREFFdUJwVyxFQUFLQyxVQUFVK2dCLEtBRnRDLGlCQUtSNUssR0FBUSwwREFFdUJwVyxFQUFLQyxVQUFVeVgsTUFGdEMsK0VBSXVCMVgsRUFBS0MsVUFBVTBYLE9BSnRDLGlCQU9adkIsR0FDSSx1RUFBeUU0ZCxFQUFpQix5QkFBMkIsZ0JBQWtCQSxFQUFpQixhQUFlLElBRG5LLHFDQUVnQ0UsRUFBZ0IsS0FBT0YsRUFBaUIsSUFBTSxLQUY5RSwwRkFHZ0ZDLEdBQXNCRCxFQUFpQixhQUFlLElBQU1FLEVBSDVJLFdBSU9ELEVBQXFCQyxFQUFnQixpR0FBbUdsMEIsRUFBS0MsVUFBVTRnQixXQUo5Six3Q0FLOEI3Z0IsRUFBS0MsVUFBVTJnQixhQUFlLGlCQUFtQjVnQixFQUFLQyxVQUFVMmdCLGFBQWUsK0RBQWlFcGxCLEVBQUswRSxNQUFNaTBCLE9BTHpMLGtCQStCeEIsT0F0QkkvZCxHQUFRLCtJQUV1R3BXLEVBQUtDLFVBQVV5Z0IsUUFGdEgsb0dBT0FsbEIsRUFBS0MsUUFBUTJzQixPQUFPWCxNQUFNam9CLFVBUDFCLDRDQVVVc0ssRUFBT3FvQixlQUFpQixHQUFLLDBCQVZ2Qyw2R0FXa0hueUIsRUFBS0MsVUFBVTZnQixNQVhqSSw0R0FZMEc5Z0IsRUFBS0MsVUFBVTZMLEtBWnpILDhHQWE0RzlMLEVBQUtDLFVBQVU4Z0IsT0FiM0gsNkdBYzJHL2dCLEVBQUtDLFVBQVU4TCxNQWQxSCxxRUFnQnlEL0wsRUFBS0MsVUFBVTBnQixhQUFlLGlCQUFtQjNnQixFQUFLQyxVQUFVMGdCLGFBQWUsV0FBYTNnQixFQUFLQyxVQUFVMGdCLGFBaEJwSyxnQ0FvQlpybEIsRUFBT2tFLFVBQVk0VyxFQUVaOWEsR0FHWDgzQixpQkFBa0IsV0FDVGg0QixLQUFLMDNCLGFBQWE1NEIsT0FJbkJrQixLQUFLMjNCLFdBQVd0aEIsYUFBYSxZQUFZLEdBQ3pDclcsS0FBSzQzQixXQUFXOTJCLE1BQU1rNEIsZUFBaUIsaUJBSnZDaDVCLEtBQUsyM0IsV0FBV3pGLGdCQUFnQixZQUNoQ2x5QixLQUFLNDNCLFdBQVc5MkIsTUFBTWs0QixlQUFpQixLQU8vQ2xCLHFCQUFzQixTQUFVaEssRUFBVThKLEdBQ3RDNTNCLEtBQUtsQixNQUFRLEdBQ1RndkIsSUFDQUEsRUFBU29FLGdCQUFnQixZQUN6QjBGLEVBQVc5MkIsTUFBTWs0QixlQUFpQixLQUkxQ2QsYUFBYyxXQUNWbDRCLEtBQUtpNUIsV0FBVyxlQUFnQmo1QixLQUFLOEIsUUFBUXVpQixhQUFhcmlCLEtBQUszQyxLQUFLVyxLQUFNQSxLQUFLOEIsUUFBUW9oQixNQUFNZ1csYUFBYTc1QixLQUFLVyxLQUFLSyxRQUFRNmlCLFFBQVMsT0FHeklnVyxhQUFjLFNBQVV0M0IsR0FDcEI1QixLQUFLcWMsUUFBUXZkLE1BQVE4QyxFQUFPdTNCLElBQzVCbjVCLEtBQUtvMUIsT0FBT0MsV0FBYXIxQixLQUFLNDNCLFdBQVdyeUIsWUFBY3ZGLEtBQUsyM0IsV0FBVzc0QixNQUFROEMsRUFBT0MsYUFBYSxlQUFpQkQsRUFBTzZULElBQzNIelYsS0FBSzIzQixXQUFXLzBCLFNBR3BCbTFCLGVBQWdCLFNBQVUxM0IsRUFBU3F0QixFQUFVaHNCLEdBQ3pDLE1BQU01QyxFQUFRNEMsRUFBRUUsT0FBTzlDLE1BQU0wSixPQUM3Qm5JLEVBQVFnMUIsV0FBYXIxQixLQUFLdUYsWUFBZXpHLEVBQWM0dUIsSUFBc0MsSUFBMUI1dUIsRUFBTTRKLFFBQVEsUUFBd0MsSUFBdkI1SixFQUFNNEosUUFBUSxLQUFjZ2xCLEVBQVc1dUIsR0FBa0MsSUFBMUJBLEVBQU00SixRQUFRLE9BQWdCLElBQU01SixFQUFRQSxFQUE1SSxJQU1yRHM2QixTQUFVLENBQUMsT0FPWEMsT0FBUSxTQUFVNzNCLEdBQ2R4QixLQUFLOEIsUUFBUW9oQixNQUFNb1csYUFBYXQ3QixLQUFLZ0MsS0FBTXdCLEVBQVN4QixLQUFLOEIsUUFBUTB5QixTQUFTK0UsdUJBQXVCdjdCLEtBQUtnQyxLQUFNd0IsRUFBUyxXQU16SGc0QixRQUFTLFNBQVVoNEIsR0FDZixNQUFNaTRCLEVBQVVqNEIsR0FBV3hCLEtBQUtLLFFBQVE2aUIsTUFBTXNTLFNBQ3hDa0UsRUFBaUIxNUIsS0FBS1UsS0FBS2k1QixpQkFBaUJGLEVBQVN6NUIsS0FBS1UsS0FBS2s1QixtQkFBcUJILEVBQ3BGSSxFQUFpRCxFQUFyQ0osRUFBUTUzQixhQUFhLGNBR3ZDLEdBQWtELG1CQUF2QzdCLEtBQUs4NUIsVUFBVUMsc0JBQXdILElBQWpGLzVCLEtBQUs4NUIsVUFBVUMsb0JBQW9CTixFQUFTQyxFQUFnQkcsRUFBVzc1QixNQUFrQixPQUUxSixJQUFJZzZCLEVBQVdOLEVBQWVPLHdCQUEwQlAsRUFBZVEsbUJBRXZFLE1BQU1DLEVBQVdULEVBQWVqd0IsV0FDaEN6SixLQUFLVSxLQUFLc3BCLFdBQVcwUCxHQUNyQjE1QixLQUFLOEIsUUFBUW9oQixNQUFNcmdCLEtBQUs3RSxLQUFLZ0MsTUFDN0JBLEtBQUs4ekIsaUJBRURxRyxJQUFhbjZCLEtBQUtLLFFBQVFtQixRQUFRMHZCLFNBQVNseEIsS0FBS1UsS0FBSzA1QixxQkFBcUJELEdBQVUsU0FBVTNKLEdBQVcsT0FBcUMsSUFBOUJBLEVBQVEvWixXQUFXblEsU0FBaUIsTUFHeEp0RyxLQUFLcTZCLFVBQVVMLEdBR2ZoNkIsS0FBSzhCLFFBQVEyeUIsWUFBWTZGLFdBQVd0OEIsS0FBS2dDLEtBQU0sUUFBUzY1QixFQUFXNzVCLEtBQUs4NUIsVUFBVVMsZUFHbEZ2NkIsS0FBSzB6QixRQUFRL3FCLE1BQUssSUFNdEJoRyxHQUFJLFNBQVVWLEdBQ1YsTUFBTXl5QixFQUFlMTBCLEtBQUtLLFFBQVE2aUIsTUFFN0JqaEIsRUFLR3l5QixFQUFhZ0QsY0FBZ0IxM0IsS0FBS3VDLFFBQVFpMkIsbUJBQW1COUQsRUFBYWdELGFBQWF4RixnQkFBZ0IsYUFKM0d3QyxFQUFhaUIsT0FBTzcyQixNQUFRNDFCLEVBQWF5QixVQUFZbjJCLEtBQUt1QyxRQUFRNnpCLGFBQWUxQixFQUFhdUIsY0FBZ0IsR0FBS2oyQixLQUFLdUMsUUFBUTZ6QixXQUNoSTFCLEVBQWFrQixPQUFPOTJCLE1BQVE0MUIsRUFBYTJCLFVBQVlyMkIsS0FBS3VDLFFBQVErekIsY0FBZ0I1QixFQUFhd0IsY0FBZ0IsR0FBS2wyQixLQUFLdUMsUUFBUSt6QixZQUM3SDVCLEVBQWFnRCxjQUFnQjEzQixLQUFLdUMsUUFBUWkyQixtQkFBbUI5RCxFQUFhZ0QsYUFBYXJoQixhQUFhLFdBQVksYUFJeEhyVyxLQUFLOEIsUUFBUWtyQixPQUFPcnFCLEdBQUczRSxLQUFLZ0MsS0FBTTAwQixFQUFhbEMsVUFBV3Z3QixJQU05REQsS0FBTSxXQUNGaEMsS0FBSzhCLFFBQVE1QixPQUFPOEIsS0FBS2hFLEtBQUtnQyxLQUFNLFFBQVMsVUFBWUEsS0FBS2l6Qix3QkFHbEU0RSxRQUFTLFNBQVVuMkIsR0FDZixNQUFNTixFQUFRcEIsS0FBS0ssUUFBUTZpQixNQUFNOWhCLE1BQzNCOG9CLEVBQXVCLFNBQU54b0IsRUFBZU4sRUFBTWtELGNBQWMsaUJBQW1CNUMsRUFBRUUsT0FFL0UsSUFBSyxZQUFZRCxLQUFLdW9CLEVBQWNwaEIsU0FDaEMsT0FBTyxFQUlYLE1BQU0weEIsRUFBVXRRLEVBQWNyb0IsYUFBYSxpQkFFM0MsSUFBSWhFLEVBQUc0OEIsRUFBWUMsRUFJbkIsSUFEQUQsRUFBYXI1QixFQUFNdTVCLHVCQUpNLG1CQUtwQjk4QixFQUFJLEVBQUdBLEVBQUk0OEIsRUFBV24wQixPQUFRekksSUFDL0I0OEIsRUFBVzU4QixHQUFHaUQsTUFBTUMsUUFBVSxPQUtsQyxJQURBMjVCLEVBQVd0NUIsRUFBTXU1Qix1QkFBdUIsZ0JBQ25DOThCLEVBQUksRUFBR0EsRUFBSTY4QixFQUFTcDBCLE9BQVF6SSxJQUM3Qm1DLEtBQUtVLEtBQUt3SSxZQUFZd3hCLEVBQVM3OEIsR0FBSSxVQWN2QyxPQVZBdUQsRUFBTWtELGNBQWMsb0JBQStCazJCLEdBQVMxNUIsTUFBTUMsUUFBVSxRQUM1RWYsS0FBS1UsS0FBS3lJLFNBQVMrZ0IsRUFBZSxVQUdsQixVQUFac1EsR0FBdUJ4NkIsS0FBS0ssUUFBUTZpQixNQUFNeGdCLGFBQzFDMUMsS0FBS0ssUUFBUTZpQixNQUFNeGdCLGFBQWFFLFFBQ2IsUUFBWjQzQixHQUNQeDZCLEtBQUtLLFFBQVEyc0IsT0FBT25CLE9BQU8zSSxNQUFNNEssU0FBU2xyQixTQUd2QyxHQUdYNm5CLE9BQVEsU0FBVS9vQixHQUNkLE1BQU1nekIsRUFBZTEwQixLQUFLSyxRQUFRNmlCLE1BQzVCMFgsRUFBYzU2QixLQUFLOEIsUUFBUW9oQixNQUVqQ3hoQixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUYwdkIsRUFBYU8sU0FBV1AsRUFBYXJZLFFBQVF2ZCxNQUM3QzQxQixFQUFhUSxPQUFTUixFQUFhdHpCLE1BQU1rRCxjQUFjLCtDQUErQ3hGLE1BQ3RHNDFCLEVBQWE0QyxnQkFBa0I1QyxFQUFhOEMsZUFBZXZhLFFBQ3ZEeVgsRUFBYThCLFlBQVc5QixFQUFhNkIsbUJBQXFCN0IsRUFBYWpQLFdBQVd4SSxTQUV0RixJQUNRamQsS0FBS0ssUUFBUUgsT0FBT0ssYUFDcEJxNkIsRUFBWUMsYUFBYTc4QixLQUFLZ0MsTUFBTSxHQUFPLEdBQU0sR0FHakQwMEIsRUFBYWdELGNBQWdCaEQsRUFBYWdELGFBQWFvRCxNQUFNeDBCLE9BQVMsR0FDdEV0RyxLQUFLa3pCLGNBQ0wwSCxFQUFZRyxhQUFhLzhCLEtBQUtnQyxLQUFNQSxLQUFLSyxRQUFRNmlCLE1BQU13VSxhQUFhb0QsUUFDN0RwRyxFQUFhaUQsWUFBY2pELEVBQWFVLE9BQU9DLFdBQVcvdUIsT0FBUyxJQUMxRXRHLEtBQUtrekIsY0FDTDBILEVBQVlJLGdCQUFnQmg5QixLQUFLZ0MsS0FBTTAwQixFQUFhVSxPQUFPQyxhQUVqRSxNQUFPam9CLEdBRUwsTUFEQXBOLEtBQUt5ekIsZUFDQ3R3QixNQUFNLDBDQUE0Q2lLLEVBQU1sRyxRQUFVLEtBQzFFLFFBQ0VsSCxLQUFLOEIsUUFBUTVCLE9BQU82QixNQUFNL0QsS0FBS2dDLE1BR25DLE9BQU8sR0FHWCs2QixhQUFjLFNBQVVFLEdBQ3BCLEdBQXdCLElBQXBCQSxFQUFTMzBCLE9BQWMsT0FFM0IsSUFBSTQwQixFQUFXLEVBQ1hKLEVBQVEsR0FDWixJQUFLLElBQUlqOUIsRUFBSSxFQUFHNEosRUFBTXd6QixFQUFTMzBCLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3hDLFNBQVM4RCxLQUFLczVCLEVBQVNwOUIsR0FBR21NLFFBQzFCOHdCLEVBQU1ueUIsS0FBS3N5QixFQUFTcDlCLElBQ3BCcTlCLEdBQVlELEVBQVNwOUIsR0FBRytuQixNQUloQyxNQUFNdVYsRUFBWW43QixLQUFLdUMsUUFBUTY0QixxQkFDL0IsR0FBSUQsRUFBWSxFQUFHLENBQ2YsSUFBSUUsRUFBVyxFQUNmLE1BQU1DLEVBQWF0N0IsS0FBS0ssUUFBUTZpQixNQUFNeVIsVUFDdEMsSUFBSyxJQUFJOTJCLEVBQUksRUFBRzRKLEVBQU02ekIsRUFBV2gxQixPQUFRekksRUFBSTRKLEVBQUs1SixJQUM5Q3c5QixHQUFpQyxFQUFyQkMsRUFBV3o5QixHQUFHK25CLEtBRzlCLEdBQUtzVixFQUFXRyxFQUFZRixFQUFXLENBQ25DbjdCLEtBQUt5ekIsZUFDTCxNQUFNbnNCLEVBQU0saUVBQW9FNnpCLEVBQVUsSUFBUSxLQUlsRyxhQUhpRCxtQkFBdENuN0IsS0FBSzg1QixVQUFVeUIsb0JBQXFDdjdCLEtBQUs4NUIsVUFBVXlCLG1CQUFtQmowQixFQUFLLENBQUUsVUFBYTZ6QixFQUFXLFlBQWVFLEVBQVUsV0FBY0gsR0FBWWw3QixRQUMvS0EsS0FBSzg1QixVQUFVMEIsV0FBV2wwQixLQU10QyxNQUFNb3RCLEVBQWUxMEIsS0FBS0ssUUFBUTZpQixNQUNsQ3dSLEVBQWFHLGtCQUFvQmlHLEVBQU14MEIsT0FFdkMsTUFDTW0xQixFQUFPLENBQ1R6TyxPQUZXaHRCLEtBQUs4QixRQUFRa3JCLE9BQU9tRixhQUFhbjBCLEtBQUtnQyxLQUFNMDBCLEVBQWFsQyxXQUFXLEdBRy9Fa0osV0FBWWhILEVBQWFpQixPQUFPNzJCLE1BQ2hDNjhCLFlBQWFqSCxFQUFha0IsT0FBTzkyQixNQUNqQ3VqQixNQUFPcVMsRUFBYVEsT0FDcEIwRyxTQUFVNTdCLEtBQUtLLFFBQVFILE9BQU9LLFlBQzlCNDRCLElBQUt6RSxFQUFhTyxTQUNsQnp6QixRQUFTa3pCLEVBQWFjLFVBRzFCLEdBQWtELG1CQUF2Q3gxQixLQUFLODVCLFVBQVUrQixvQkFBb0MsQ0FDMUQsTUFBTTkwQixFQUFTL0csS0FBSzg1QixVQUFVK0Isb0JBQW9CZixFQUFPVyxFQUFNejdCLEtBQU0sU0FBVXdnQixHQUN2RUEsR0FBUXhnQixLQUFLb0csR0FBR3dKLE1BQU10QyxRQUFRa1QsRUFBS3paLFFBQ25DL0csS0FBSzhCLFFBQVFvaEIsTUFBTTRZLFNBQVM5OUIsS0FBS2dDLEtBQU15N0IsRUFBTWpiLEdBRTdDeGdCLEtBQUs4QixRQUFRb2hCLE1BQU02WSxPQUFPLzlCLEtBQUtnQyxLQUFNeTdCLEVBQU1qYixJQUVqRG5oQixLQUFLVyxPQUVQLFFBQXNCLElBQVgrRyxFQUF3QixPQUNuQyxJQUFLQSxFQUVELFlBREEvRyxLQUFLeXpCLGVBR0x6ekIsS0FBS29HLEdBQUd3SixNQUFNdEMsUUFBUXZHLElBQVdBLEVBQU9ULE9BQVMsSUFBR3cwQixFQUFRL3pCLEdBR3BFL0csS0FBSzhCLFFBQVFvaEIsTUFBTTZZLE9BQU8vOUIsS0FBS2dDLEtBQU15N0IsRUFBTVgsSUFHL0MxdEIsTUFBTyxTQUFVbEcsRUFBUzgwQixHQUV0QixHQURBaDhCLEtBQUt5ekIsZUFDNEMsbUJBQXRDenpCLEtBQUs4NUIsVUFBVXlCLG9CQUFxQ3Y3QixLQUFLODVCLFVBQVV5QixtQkFBbUJyMEIsRUFBUzgwQixFQUFVaDhCLE1BRWhILE1BREFBLEtBQUs4NUIsVUFBVTBCLFdBQVd0MEIsR0FDcEIvRCxNQUFNLDRDQUE4QytELElBSWxFNjBCLE9BQVEsU0FBVU4sRUFBTVgsR0FDcEIsSUFBS0EsRUFFRCxZQURBOTZCLEtBQUt5ekIsZUFHVCxHQUFxQixpQkFBVnFILEVBRVAsWUFEQTk2QixLQUFLOEIsUUFBUW9oQixNQUFNOVYsTUFBTXBQLEtBQUtnQyxLQUFNODZCLEVBQU8sTUFJL0MsTUFBTW1CLEVBQWlCajhCLEtBQUt1QyxRQUFRMDVCLGVBQzlCQyxFQUFXbDhCLEtBQUtLLFFBQVFILE9BQU9LLFlBQWMsRUFBSXU2QixFQUFNeDBCLE9BRzdELEdBQThCLGlCQUFuQjIxQixHQUErQkEsRUFBZTMxQixPQUFTLEVBQUcsQ0FDakUsTUFBTTYxQixFQUFXLElBQUlDLFNBQ3JCLElBQUssSUFBSXYrQixFQUFJLEVBQUdBLEVBQUlxK0IsRUFBVXIrQixJQUMxQnMrQixFQUFTampCLE9BQU8sUUFBVXJiLEVBQUdpOUIsRUFBTWo5QixJQUV2Q21DLEtBQUs4QixRQUFRMnlCLFlBQVlzSCxPQUFPLzlCLEtBQUtnQyxLQUFNaThCLEVBQWdCajhCLEtBQUt1QyxRQUFRODVCLGtCQUFtQkYsRUFBVW44QixLQUFLOEIsUUFBUW9oQixNQUFNb1osbUJBQW1CajlCLEtBQUtXLEtBQU15N0IsR0FBT3o3QixLQUFLODVCLFVBQVV5Qix5QkFFNUt2N0IsS0FBSzhCLFFBQVFvaEIsTUFBTXFaLGFBQWF2K0IsS0FBS2dDLEtBQU04NkIsRUFBT1csRUFBS3pPLE9BQVF5TyxFQUFLQyxXQUFZRCxFQUFLRSxZQUFhRixFQUFLcFosTUFBT29aLEVBQUt0QyxJQUFLK0MsRUFBVVQsRUFBS0csV0FJL0lVLG1CQUFvQixTQUFVYixFQUFNejFCLEdBQ2hDLEdBQWlELG1CQUF0Q2hHLEtBQUs4NUIsVUFBVTBDLG1CQUN0Qng4QixLQUFLODVCLFVBQVUwQyxtQkFBbUJ4MkIsRUFBU3kxQixFQUFNejdCLFVBQzlDLENBQ0gsTUFBTWc4QixFQUFXcDFCLEtBQUtDLE1BQU1iLEVBQVFjLGNBQ2hDazFCLEVBQVN6MEIsYUFDVHZILEtBQUs4QixRQUFRb2hCLE1BQU05VixNQUFNcFAsS0FBS2dDLEtBQU1nOEIsRUFBU3owQixhQUFjeTBCLEdBRTNEaDhCLEtBQUs4QixRQUFRb2hCLE1BQU00WSxTQUFTOTlCLEtBQUtnQyxLQUFNeTdCLEVBQU1PLEtBS3pERixTQUFVLFNBQVVMLEVBQU1PLEdBQ3RCLE1BQU1mLEVBQVdlLEVBQVNqMUIsT0FFMUIsSUFBSyxJQUFrQ21lLEVBQTlCcm5CLEVBQUksRUFBRzRKLEVBQU13ekIsRUFBUzMwQixPQUFjekksRUFBSTRKLEVBQUs1SixJQUFLLENBRXZELEdBREFxbkIsRUFBTyxDQUFFOW1CLEtBQU02OEIsRUFBU3A5QixHQUFHTyxLQUFNd25CLEtBQU1xVixFQUFTcDlCLEdBQUcrbkIsTUFDL0M2VixFQUFLRyxTQUFVLENBQ2Y1N0IsS0FBSzhCLFFBQVFvaEIsTUFBTXVaLFdBQVd6K0IsS0FBS2dDLEtBQU1pN0IsRUFBU3A5QixHQUFHNkgsSUFBSysxQixFQUFLajZCLFFBQVMwakIsR0FDeEUsTUFFQWxsQixLQUFLOEIsUUFBUW9oQixNQUFNd1osYUFBYTErQixLQUFLZ0MsS0FBTWk3QixFQUFTcDlCLEdBQUc2SCxJQUFLKzFCLEVBQUt6TyxPQUFReU8sRUFBS0MsV0FBWUQsRUFBS0UsWUFBYUYsRUFBS3BaLE1BQU82QyxFQUFNdVcsRUFBS3RDLEtBSTNJbjVCLEtBQUt5ekIsZ0JBR1Q4SSxhQUFjLFNBQVV6QixFQUFPOU4sRUFBUTFRLEVBQU9DLEVBQVE4RixFQUFPOFcsRUFBSytDLEVBQVVOLEdBQ3hFLElBQ0ksR0FBaUIsSUFBYk0sRUFHQSxPQUZBbDhCLEtBQUt5ekIsb0JBQ0xua0IsUUFBUUMsS0FBSyw2REFJakJ2UCxLQUFLSyxRQUFRNmlCLE1BQU1xUyxrQkFBb0IyRyxFQUN2QyxNQUFNUyxFQUFjMzhCLEtBQUtvRyxHQUFHdzJCLFdBQ3RCQyxFQUFhLENBQUNYLEdBQ3BCbDhCLEtBQUtLLFFBQVE2aUIsTUFBTXlTLE9BQU83MkIsTUFBUXdkLEVBQ2xDdGMsS0FBS0ssUUFBUTZpQixNQUFNMFMsT0FBTzkyQixNQUFReWQsRUFFbEMsSUFBSyxJQUFXdWdCLEVBQVE1WCxFQUFmcm5CLEVBQUksRUFBaUJBLEVBQUlxK0IsRUFBVXIrQixJQUN4Q2kvQixFQUFTLElBQUlILEVBQ2J6WCxFQUFPNFYsRUFBTWo5QixHQUViaS9CLEVBQU9DLE9BQVMsU0FBVUQsRUFBUTc2QixFQUFRKzZCLEVBQWU5WCxFQUFNN1QsR0FDM0R3ckIsRUFBV3hyQixHQUFTLENBQUV0SyxPQUFRKzFCLEVBQU8vMUIsT0FBUW1lLEtBQU1BLEdBRUosS0FBekNsbEIsS0FBS0ssUUFBUTZpQixNQUFNcVMsb0JBQ3JCdjFCLEtBQUs4QixRQUFRb2hCLE1BQU0rWixtQkFBbUJqL0IsS0FBS2dDLEtBQU1pQyxFQUFRNDZCLEVBQVlHLEVBQWVoUSxFQUFRMVEsRUFBT0MsRUFBUThGLEVBQU84VyxHQUNsSG41QixLQUFLeXpCLGlCQUVYcDBCLEtBQUtXLEtBQU04OEIsRUFBUWxCLEVBQVU1N0IsS0FBS0ssUUFBUTZpQixNQUFNc1MsU0FBVXRRLEVBQU1ybkIsR0FFbEVpL0IsRUFBT0ksY0FBY2hZLEdBRTNCLE1BQU94akIsR0FFTCxNQURBMUIsS0FBS3l6QixlQUNDdHdCLE1BQU0sZ0RBQWtEekIsRUFBRXdGLFFBQVUsT0FJbEYrMUIsbUJBQW9CLFNBQVVoN0IsRUFBUTQ2QixFQUFZRyxFQUFlaFEsRUFBUTFRLEVBQU9DLEVBQVE4RixFQUFPOFcsR0FDM0YsTUFBTWdFLEVBQWVuOUIsS0FBSzhCLFFBQVFvaEIsTUFBTXVaLFdBQ2xDVyxFQUFlcDlCLEtBQUs4QixRQUFRb2hCLE1BQU13WixhQUV4QyxJQUFLLElBQUk3K0IsRUFBSSxFQUFHNEosRUFBTW8xQixFQUFXdjJCLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzFDb0UsR0FDQWpDLEtBQUtLLFFBQVE2aUIsTUFBTXNTLFNBQVNuZixhQUFhLGlCQUFrQndtQixFQUFXaC9CLEdBQUdxbkIsS0FBSzltQixNQUM5RTRCLEtBQUtLLFFBQVE2aUIsTUFBTXNTLFNBQVNuZixhQUFhLGlCQUFrQndtQixFQUFXaC9CLEdBQUdxbkIsS0FBS1UsTUFDOUV1WCxFQUFhbi9CLEtBQUtnQyxLQUFNNjhCLEVBQVdoL0IsR0FBR2tKLE9BQVFpMkIsRUFBZUgsRUFBV2gvQixHQUFHcW5CLE9BRTNFa1ksRUFBYXAvQixLQUFLZ0MsS0FBTTY4QixFQUFXaC9CLEdBQUdrSixPQUFRaW1CLEVBQVExUSxFQUFPQyxFQUFROEYsRUFBT3dhLEVBQVdoL0IsR0FBR3FuQixLQUFNaVUsSUFLNUc2QixnQkFBaUIsU0FBVXQxQixHQUV2QixHQURLQSxJQUFLQSxFQUFNMUYsS0FBS0ssUUFBUTZpQixNQUFNa1MsT0FBT0MsYUFDckMzdkIsRUFBSyxPQUFPLEVBQ2pCLE1BQU1ndkIsRUFBZTEwQixLQUFLSyxRQUFRNmlCLE1BRWxDLElBQ0ksTUFBTWdDLEVBQU8sQ0FBQzltQixLQUFNc0gsRUFBSTJDLE1BQU0sS0FBS2cxQixNQUFPelgsS0FBTSxHQUM1QzVsQixLQUFLSyxRQUFRSCxPQUFPSyxZQUFhUCxLQUFLOEIsUUFBUW9oQixNQUFNdVosV0FBV3orQixLQUFLZ0MsS0FBTTBGLEVBQUtndkIsRUFBYWMsU0FBVXRRLEdBQ3JHbGxCLEtBQUs4QixRQUFRb2hCLE1BQU13WixhQUFhMStCLEtBQUtnQyxLQUFNMEYsRUFBSzFGLEtBQUs4QixRQUFRa3JCLE9BQU9tRixhQUFhbjBCLEtBQUtnQyxLQUFNMDBCLEVBQWFsQyxXQUFXLEdBQU9rQyxFQUFhaUIsT0FBTzcyQixNQUFPNDFCLEVBQWFrQixPQUFPOTJCLE1BQU80MUIsRUFBYVEsT0FBUWhRLEVBQU13UCxFQUFhTyxVQUNoTyxNQUFPdnpCLEdBQ0wsTUFBTXlCLE1BQU0sZ0RBQWtEekIsRUFBRXdGLFFBQVUsS0FDNUUsUUFDRWxILEtBQUt5ekIsaUJBSWI2SixjQUFlLFNBQVVDLEVBQVF2USxHQUM3QixPQUFJQSxHQUNBQSxFQUFPM1csYUFBYSxrQkFBbUIsU0FDdkNrbkIsRUFBT2xuQixhQUFhLGtCQUFtQjJXLEVBQU96VCxNQUM5Q3lULEVBQU8vckIsWUFBWXM4QixHQUNadlEsR0FHSnVRLEdBUVhwRixhQUFjLFNBQVVxRixFQUFJOTdCLEdBQ3BCQSxHQUFtQixLQUFkQSxFQUFFWSxRQUNQWixFQUFFNEgsaUJBSU50SixLQUFLOEIsUUFBUTB5QixTQUFTaUoscUJBQXFCei9CLEtBQUtnQyxLQUFNQSxLQUFLSyxRQUFRNmlCLE1BQU9zYSxJQU05RXBGLFNBQVUsV0FDTnA0QixLQUFLOEIsUUFBUTB5QixTQUFTa0osaUJBQWlCMS9CLEtBQUtnQyxLQUFNQSxLQUFLSyxRQUFRNmlCLFFBTW5FeWEsY0FBZSxXQUNYLE1BQU0vQyxFQUFjNTZCLEtBQUs4QixRQUFRb2hCLE1BQzNCd1IsRUFBZTEwQixLQUFLSyxRQUFRNmlCLE1BRTVCMGEsRUFBZ0IsU0FBVXgxQixHQUM1Qnd5QixFQUFZdEIsYUFBYXQ3QixLQUFLZ0MsS0FBTW9JLEVBQUssTUFDekN3eUIsRUFBWWlELFdBQVc3L0IsS0FBS2dDLE1BQU0sR0FFbEMwMEIsRUFBYWlCLE9BQU83MkIsTUFBUTQxQixFQUFheUIsVUFDekN6QixFQUFha0IsT0FBTzkyQixNQUFRNDFCLEVBQWEyQixVQUV6QyxNQUFNdmlCLEVBQVM5VCxLQUFLVSxLQUFLbzlCLGlCQUFpQjExQixHQUN0QzBMLElBQVE0Z0IsRUFBYVEsT0FBU3BoQixFQUFPaFQsTUFBTWk5QixXQUFhanFCLEVBQU9oVCxNQUFNazlCLE9BRXJFaCtCLEtBQUtVLEtBQUttSSxTQUFTVCxFQUFJcUIsY0FBZ0JpckIsRUFBYWxDLFVBQVV0RSxZQUFXd0csRUFBYWxDLFVBQVV0RSxVQUFZLEtBRWhIME0sRUFBWUMsYUFBYTc4QixLQUFLZ0MsTUFBTSxHQUFNLEdBQU8sR0FDakQ0NkIsRUFBWS8zQixLQUFLN0UsS0FBS2dDLE9BQ3hCWCxLQUFLVyxNQUVQQSxLQUFLOEIsUUFBUTJ5QixZQUFZd0osVUFBVWpnQyxLQUFLZ0MsS0FBTSxRQUFTLENBQUMsT0FBUUEsS0FBSzg1QixVQUFVUyxjQUFlcUQsR0FBZSxJQU1qSE0sY0FBZSxXQUNYbCtCLEtBQUs4QixRQUFRMnlCLFlBQVkwSixVQUFVbmdDLEtBQUtnQyxLQUFNLFFBQVNBLEtBQUs4NUIsVUFBVVMsZ0JBRzFFbUMsYUFBYyxTQUFVam5CLEVBQUt1WCxFQUFRMVEsRUFBT0MsRUFBUThGLEVBQU82QyxFQUFNaVUsR0FDN0QsTUFBTXlCLEVBQWM1NkIsS0FBSzhCLFFBQVFvaEIsTUFDM0J3UixFQUFlMTBCLEtBQUtLLFFBQVE2aUIsTUFDbENsakIsS0FBS0ssUUFBUW0wQixTQUFTNEosZUFBaUIsUUFFdkMsSUFBSUMsRUFBT3IrQixLQUFLVSxLQUFLQyxjQUFjLE9BQ25DMDlCLEVBQUs1b0IsSUFBTUEsRUFDWDRvQixFQUFLbEYsSUFBTUEsRUFDWGtGLEVBQUtob0IsYUFBYSxjQUFlLEtBQ2pDMlcsRUFBUzROLEVBQVkwQyxjQUFjdC9CLEtBQUtnQyxLQUFNcStCLEVBQU1yUixFQUFVQSxFQUFPc1IsV0FBVSxHQUFTLE1BRXBGNUosRUFBYThCLFdBQ2I2SCxFQUFLaG9CLGFBQWEsa0JBQW1CcWUsRUFBYTZCLG9CQUd0RCxNQUFNZ0ksRUFBUXYrQixLQUFLOEIsUUFBUXl5QixVQUFVaUssVUFBVXhnQyxLQUFLZ0MsS0FBTWd0QixHQUNwRHlSLEVBQVl6K0IsS0FBSzhCLFFBQVF5eUIsVUFBVW1LLGNBQWMxZ0MsS0FBS2dDLEtBQU11K0IsRUFBTyxzQkFHckU3SixFQUFhNEMsa0JBQ2I1QyxFQUFhNkMsU0FBV3YzQixLQUFLOEIsUUFBUXl5QixVQUFVb0ssZUFBZTNnQyxLQUFLZ0MsTUFDbkV1K0IsRUFBTXQ5QixZQUFZeXpCLEVBQWE2QyxXQUduQzdDLEVBQWFjLFNBQVc2SSxFQUN4QjNKLEVBQWFlLE9BQVM4SSxFQUN0QjdKLEVBQWFnQixXQUFhK0ksRUFHMUI3RCxFQUFZZ0UsVUFBVTVnQyxLQUFLZ0MsS0FBTXNjLEVBQU9DLEdBR3hDcWUsRUFBWWlFLFNBQVM3Z0MsS0FBS2dDLEtBQU1xaUIsRUFBT2djLEVBQU1FLEVBQU9FLEdBRXBESixFQUFLdEIsT0FBU25DLEVBQVlrRSxxQkFBcUJ6L0IsS0FBS1csS0FBTXErQixFQUFNM0osRUFBYVksZUFBZ0JtSixHQUN6RnorQixLQUFLKytCLGdCQUFnQk4sR0FBVyxHQUFNLEdBQU0sSUFBT3orQixLQUFLOEIsUUFBUTJ5QixZQUFZdUssUUFBUWhoQyxLQUFLZ0MsS0FBTSxRQUFTcStCLEVBQU1yK0IsS0FBSzg1QixVQUFVUyxjQUFlclYsR0FBTSxHQUN0SmxsQixLQUFLSyxRQUFRbTBCLFNBQVM0SixlQUFpQixJQUczQ1UscUJBQXNCLFNBQVVULEVBQU0vSSxFQUFnQm1KLEdBR2xELEdBRHlCLElBQXJCSixFQUFLbE8sYUFBbUJud0IsS0FBSzhCLFFBQVFvaEIsTUFBTTBiLFVBQVU1Z0MsS0FBS2dDLEtBQU1zMUIsRUFBZ0IsSUFDaEZ0MUIsS0FBS3VDLFFBQVEwOEIsZ0JBQ2JqL0IsS0FBS2svQixnQkFBZ0JiLEVBQU0sYUFDeEIsQ0FDSCxNQUFNYyxFQUFPbi9CLEtBQUtvL0IsZ0JBQWdCWCxFQUFXLE1BQ3pDVSxHQUFNbi9CLEtBQUtvekIsU0FBUytMLEVBQU0sRUFBR0EsRUFBTSxLQUkvQ3RFLGFBQWMsU0FBVWg0QixFQUFNdzhCLEVBQWdCQyxHQUMxQyxNQUFNNUssRUFBZTEwQixLQUFLSyxRQUFRNmlCLE1BQ2xDLElBeUJJcWMsRUF6QkE5RixFQUFVL0UsRUFBYWMsU0FDdkIrSSxFQUFRN0osRUFBYWUsT0FDckJnSixFQUFZL0osRUFBYWdCLFdBQ3pCOEosR0FBaUIsRUFFUCxPQUFWakIsSUFDQWlCLEdBQWlCLEVBQ2pCL0YsRUFBVS9FLEVBQWFjLFNBQVM4SSxXQUFVLEdBQzFDQyxFQUFRditCLEtBQUs4QixRQUFReXlCLFVBQVVpSyxVQUFVeGdDLEtBQUtnQyxLQUFNeTVCLElBR3RDLE9BQWRnRixHQUNBRixFQUFRQSxFQUFNRCxXQUFVLEdBQ3hCN0UsRUFBVThFLEVBQU1qNkIsY0FBYyxPQUM5Qms3QixHQUFpQixFQUNqQmYsRUFBWXorQixLQUFLOEIsUUFBUXl5QixVQUFVbUssY0FBYzFnQyxLQUFLZ0MsS0FBTXUrQixFQUFPLHVCQUM1RGlCLElBQ1BmLEVBQVVyNkIsVUFBWSxHQUN0QnE2QixFQUFVeDlCLFlBQVlzOUIsR0FDdEI3SixFQUFhZSxPQUFTOEksRUFDdEI3SixFQUFhYyxTQUFXaUUsRUFDeEIrRixHQUFpQixHQUtyQixNQUFNdnVCLEVBQUlqUixLQUFLVSxLQUFLKytCLFNBQVMvSyxFQUFhaUIsT0FBTzcyQixPQUFTNDFCLEVBQWFpQixPQUFPNzJCLE1BQVE0MUIsRUFBYUksU0FBV0osRUFBYWlCLE9BQU83MkIsTUFDNUg0Z0MsRUFBSTEvQixLQUFLVSxLQUFLKytCLFNBQVMvSyxFQUFha0IsT0FBTzkyQixPQUFTNDFCLEVBQWFrQixPQUFPOTJCLE1BQVE0MUIsRUFBYUksU0FBV0osRUFBYWtCLE9BQU85MkIsTUFFOUh5Z0MsRUFEQSxLQUFLNTlCLEtBQUs4M0IsRUFBUTM0QixNQUFNd2IsT0FDWHJMLElBQU13dEIsRUFBVTM5QixNQUFNd2IsT0FBU29qQixJQUFNakIsRUFBVTM5QixNQUFNeWIsT0FFckR0TCxJQUFNd29CLEVBQVEzNEIsTUFBTXdiLE9BQVNvakIsSUFBTWpHLEVBQVEzNEIsTUFBTXliLE9BSWxFa2QsRUFBUU4sSUFBTXpFLEVBQWFPLFNBRzNCLElBQUkwSyxHQUFrQixFQUNsQmpMLEVBQWE0QyxnQkFDUjVDLEVBQWE2QyxXQUNkN0MsRUFBYTZDLFNBQVd2M0IsS0FBSzhCLFFBQVF5eUIsVUFBVW9LLGVBQWUzZ0MsS0FBS2dDLE1BQ25FdStCLEVBQU10OUIsWUFBWXl6QixFQUFhNkMsVUFDL0JvSSxHQUFrQixHQUdsQmpMLEVBQWE2QyxXQUNidjNCLEtBQUtVLEtBQUtzcEIsV0FBVzBLLEVBQWE2QyxVQUNsQzdDLEVBQWE2QyxTQUFXLEtBQ3hCb0ksR0FBa0IsR0FLMUIsSUFBSUMsRUFBYyxLQUNsQixNQUFNNVMsRUFBU2h0QixLQUFLOEIsUUFBUWtyQixPQUFPbUYsYUFBYW4wQixLQUFLZ0MsS0FBTTAwQixFQUFhbEMsV0FBVyxHQUNuRixHQUFJeEYsRUFDSTBILEVBQWFNLGVBQWlCaEksR0FBV3dTLElBQW1CZixFQUFVbk8sU0FBU3RELElBQy9FMEgsRUFBYU0sYUFBZWhJLEVBQU9zUixXQUFVLEdBQzdDQyxFQUFNc0IsYUFBYTcvQixLQUFLOEIsUUFBUW9oQixNQUFNb2EsY0FBY3QvQixLQUFLZ0MsS0FBTXk1QixFQUFTL0UsRUFBYU0sY0FBZU4sRUFBYTZDLFVBQ2pIcUksRUFBY2xMLEVBQWFjLFVBRTNCZCxFQUFhTSxhQUFhM2UsYUFBYSxrQkFBbUIsY0FFM0QsR0FBa0MsT0FBOUJxZSxFQUFhTSxhQUF1QixDQUMzQyxNQUFNOEssRUFBZXJHLEVBRXJCLEdBREFxRyxFQUFhenBCLGFBQWEsa0JBQW1CLElBQ3pDa29CLEVBQU1qTyxTQUFTb0UsRUFBYU0sY0FBZSxDQUMzQyxNQUFNK0ssRUFBUUQsRUFBYXhCLFdBQVUsR0FDckNDLEVBQU0xbkIsWUFBWTZkLEVBQWFNLGNBQy9CdUosRUFBTXNCLGFBQWFFLEVBQU9yTCxFQUFhNkMsVUFDdkM3QyxFQUFhYyxTQUFXaUUsRUFBVXNHLEdBSTFDLElBQUlDLEVBQWUsS0FDbkIsR0FBSVIsRUFBZ0IsQ0FLaEIsR0FKQVEsRUFBZ0JoZ0MsS0FBS1UsS0FBS3UvQixxQkFBcUJ2TCxFQUFhYyxTQUFTL3JCLGFBQWV6SixLQUFLVSxLQUFLK29CLGFBQWFpTCxFQUFhYyxTQUFTL3JCLFlBQzdIaXJCLEVBQWFjLFNBQ2J4MUIsS0FBS1UsS0FBS21JLFNBQVM2ckIsRUFBYWMsU0FBUy9yQixZQUFjaXJCLEVBQWFjLFNBQVMvckIsV0FBYXpKLEtBQUtVLEtBQUtvOUIsaUJBQWlCcEosRUFBYWMsV0FBYWQsRUFBYWMsU0FFNUp4MUIsS0FBS1UsS0FBS2k1QixpQkFBaUJqRixFQUFhYyxTQUFVeDFCLEtBQUtVLEtBQUt3L0IsbUJBQzVERixFQUFlSixFQUFjNVMsRUFBUzBILEVBQWFjLFNBQ25Ed0ssRUFBYXYyQixXQUFXMDJCLGFBQWExQixFQUFXdUIsUUFDN0MsR0FBSWhnQyxLQUFLVSxLQUFLMC9CLFdBQVdKLEdBQWUsQ0FDM0MsTUFBTUssRUFBUXJnQyxLQUFLVSxLQUFLaTVCLGlCQUFpQmpGLEVBQWFjLFVBQVUsU0FBVWhGLEdBQVcsT0FBT0EsRUFBUS9tQixhQUFldTJCLEtBQ25IQSxFQUFhSCxhQUFhcEIsRUFBVzRCLEdBQ3JDcmdDLEtBQUtVLEtBQUtzcEIsV0FBVzBLLEVBQWFjLFVBQ2xDeDFCLEtBQUtVLEtBQUs0L0IsZ0JBQWdCRCxFQUFPLE1BQU0sUUFDcEMsR0FBSXJnQyxLQUFLVSxLQUFLNi9CLGdCQUFnQlAsR0FBZSxDQUNoRCxNQUFNSyxFQUFRcmdDLEtBQUtVLEtBQUtpNUIsaUJBQWlCakYsRUFBYWMsVUFBVSxTQUFVaEYsR0FBVyxPQUFPQSxFQUFRL21CLGFBQWV1MkIsS0FDbkhBLEVBQWVoZ0MsS0FBS1UsS0FBSzgvQixhQUFhUixFQUFjSyxHQUNwREwsRUFBYXYyQixXQUFXbzJCLGFBQWFwQixFQUFXdUIsR0FDaERoZ0MsS0FBS1UsS0FBS3NwQixXQUFXMEssRUFBYWMsVUFDbEN4MUIsS0FBS1UsS0FBSzQvQixnQkFBZ0JOLEVBQWMsTUFBTSxHQUNULElBQWpDQSxFQUFhcGdCLFNBQVN0WixTQUFjMDVCLEVBQWE1N0IsVUFBWXBFLEtBQUtVLEtBQUsrL0IscUJBQXFCVCxFQUFhNTdCLGlCQUU3RyxHQUFJcEUsS0FBS1UsS0FBSzYvQixnQkFBZ0JQLEVBQWF2MkIsWUFBYSxDQUNwRCxNQUFNZ1ksRUFBVXVlLEVBQWF2MkIsV0FDN0JnWSxFQUFRaFksV0FBV28yQixhQUFhcEIsRUFBV3VCLEVBQWFVLGdCQUFrQmpmLEVBQVF5WSxtQkFBcUJ6WSxHQUNLLElBQXhHaVQsRUFBYWlNLGFBQWFyNEIsS0FBSSxTQUFVa29CLEdBQVcsT0FBT3dQLEVBQWExUCxTQUFTRSxNQUFhbHFCLFFBQWN0RyxLQUFLVSxLQUFLc3BCLFdBQVdnVyxRQUVwSUEsRUFBZWhnQyxLQUFLVSxLQUFLa2dDLFVBQVVaLEVBQWF2MkIsWUFBY3UyQixFQUFhdjJCLFdBQWF1MkIsRUFDeEZBLEVBQWF2MkIsV0FBVzAyQixhQUFhMUIsRUFBV3VCLEdBSXhEdkcsRUFBVWdGLEVBQVVuNkIsY0FBYyxPQUVsQ293QixFQUFhYyxTQUFXaUUsRUFDeEIvRSxFQUFhZSxPQUFTOEksRUFDdEI3SixFQUFhZ0IsV0FBYStJLEVBRzFCbUIsSUFDS0osR0FHRHgvQixLQUFLVSxLQUFLc3BCLFdBQVc0VixHQUN5RixJQUExRzUvQixLQUFLVSxLQUFLdXdCLGdCQUFnQmpFLEdBQVEsU0FBVXdELEdBQVcsTUFBTyxPQUFPN3VCLEtBQUs2dUIsRUFBUTFuQixZQUFheEMsUUFDL0Z0RyxLQUFLVSxLQUFLc3BCLFdBQVdnRCxJQUp6Qmh0QixLQUFLVSxLQUFLc3BCLFdBQVdnRCxLQVV6QjJTLElBQXFCakwsRUFBYXNDLGlCQUFtQnVJLEtBQ2hEMThCLElBQVMsTUFBTWxCLEtBQUs4M0IsRUFBUTM0QixNQUFNeWIsU0FBWXZjLEtBQUtLLFFBQVFtMEIsU0FBU3FNLGlCQUFtQm5NLEVBQWE0QyxtQkFDakcsS0FBSzMxQixLQUFLK3lCLEVBQWFpQixPQUFPNzJCLFFBQVUsS0FBSzZDLEtBQUsreUIsRUFBYWtCLE9BQU85MkIsT0FDdEVrQixLQUFLOEIsUUFBUTB5QixTQUFTc00sZUFBZTlpQyxLQUFLZ0MsS0FBTXk1QixHQUVoRHo1QixLQUFLOEIsUUFBUTB5QixTQUFTdU0saUJBQWlCL2lDLEtBQUtnQyxLQUFNeTVCLEVBQVN6NUIsS0FBS1UsS0FBS3NnQyxVQUFVdE0sRUFBYWlCLE9BQU83MkIsTUFBTyxHQUFJa0IsS0FBS1UsS0FBS3NnQyxVQUFVdE0sRUFBYWtCLE9BQU85MkIsTUFBTyxLQU1ySzQxQixFQUFhOEIsWUFDYmlELEVBQVFwakIsYUFBYSxrQkFBbUJxZSxFQUFhNkIsb0JBQ2pEZ0osR0FDQXYvQixLQUFLOEIsUUFBUW9oQixNQUFNMGIsVUFBVTVnQyxLQUFLZ0MsT0FLMUNBLEtBQUs4QixRQUFRb2hCLE1BQU0yYixTQUFTN2dDLEtBQUtnQyxLQUFNLEtBQU15NUIsRUFBUyxLQUFNLE1BR3hENTJCLEdBQ0E3QyxLQUFLOEIsUUFBUTJ5QixZQUFZdUssUUFBUWhoQyxLQUFLZ0MsS0FBTSxRQUFTeTVCLEVBQVN6NUIsS0FBSzg1QixVQUFVUyxjQUFlLE1BQU0sR0FHbEc4RSxHQUNBci9CLEtBQUtrL0IsZ0JBQWdCekYsRUFBUyxTQUk3QjZGLEdBQWdCdC9CLEtBQUswekIsUUFBUS9xQixNQUFLLElBRzNDOHpCLFdBQVksU0FBVWhuQixFQUFLalUsRUFBUzBqQixHQUNoQzFqQixFQUFRaVUsSUFBTUEsRUFDZHpWLEtBQUtvRyxHQUFHNjZCLFdBQVdqaEMsS0FBSzhCLFFBQVEyeUIsWUFBWXVLLFFBQVEzL0IsS0FBS1csS0FBTSxRQUFTd0IsRUFBU3hCLEtBQUs4NUIsVUFBVVMsY0FBZXJWLEdBQU0sSUFDckhsbEIsS0FBS2svQixnQkFBZ0IxOUIsRUFBUyxVQU1sQzgzQixhQUFjLFNBQVU5M0IsRUFBU29rQixHQUM3QixJQUFLcGtCLEVBQVMsT0FFZCxNQUFNa3pCLEVBQWUxMEIsS0FBS0ssUUFBUTZpQixNQUNsQ3dSLEVBQWFNLGFBQWVOLEVBQWFsQyxVQUFVdkUsV0FBYWp1QixLQUFLVSxLQUFLbUksU0FBU3JILEVBQVFpSSxZQUFjakksRUFBUWlJLFdBQWEsS0FDOUhpckIsRUFBYWMsU0FBV2gwQixFQUN4Qmt6QixFQUFhZSxPQUFTejFCLEtBQUtVLEtBQUtpNUIsaUJBQWlCbjRCLEVBQVMsVUFDMURrekIsRUFBYWdCLFdBQWExMUIsS0FBS1UsS0FBS2k1QixpQkFBaUJuNEIsRUFBU3hCLEtBQUtVLEtBQUtrNUIsa0JBQ3hFbEYsRUFBYTZDLFNBQVd2M0IsS0FBS1UsS0FBSzJ6QixnQkFBZ0JLLEVBQWFlLE9BQVEsY0FDdkVmLEVBQWFRLE9BQVUxekIsRUFBUUssYUFBYSxlQUFpQkwsRUFBUVYsTUFBTWs5QixPQUFTLE9BQ3BGeDhCLEVBQVFWLE1BQU1rOUIsTUFBUSxHQUN0QmgrQixLQUFLOEIsUUFBUWtyQixPQUFPOEUsT0FBTzRDLEVBQWFNLGFBQWNOLEVBQWFsQyxXQUUvRDVNLElBQ0E4TyxFQUFhbUIsV0FBYWpRLEVBQUsxaUIsRUFDL0J3eEIsRUFBYW9CLFdBQWFsUSxFQUFLeUwsRUFDL0JxRCxFQUFhc0IsV0FBYXBRLEVBQUs3bUIsRUFDL0IyMUIsRUFBYXFCLFdBQWFuUSxFQUFLOW5CLEdBR25DLElBQ0lvRixFQUFHbXVCLEVBREg2UCxFQUFXeE0sRUFBYWMsU0FBUzN6QixhQUFhLGNBQWdCNnlCLEVBQWFjLFNBQVMzekIsYUFBYSxlQUVqR3EvQixHQUNBQSxFQUFXQSxFQUFTNzRCLE1BQU0sS0FDMUJuRixFQUFJZytCLEVBQVMsR0FDYjdQLEVBQUk2UCxFQUFTLElBQ050YixJQUNQMWlCLEVBQUkwaUIsRUFBSzFpQixFQUNUbXVCLEVBQUl6TCxFQUFLeUwsR0FHYnFELEVBQWF5QixVQUFZanpCLEdBQUsxQixFQUFRVixNQUFNd2IsT0FBUzlhLEVBQVE4YSxPQUFTLEdBQ3RFb1ksRUFBYTJCLFVBQVloRixHQUFLN3ZCLEVBQVFWLE1BQU15YixRQUFVL2EsRUFBUSthLFFBQVUsSUFNNUVzaEIsV0FBWSxTQUFVc0QsR0FDbEIsTUFBTXpNLEVBQWUxMEIsS0FBS0ssUUFBUTZpQixNQUM5QndSLEVBQWFpRCxhQUNiakQsRUFBYVUsT0FBT0MsV0FBYVgsRUFBYWtELFdBQVdyeUIsWUFBY212QixFQUFhaUQsV0FBVzc0QixNQUFRNDFCLEVBQWFjLFNBQVMvZixLQUVqSWlmLEVBQWFPLFNBQVdQLEVBQWFyWSxRQUFRdmQsTUFBUTQxQixFQUFhYyxTQUFTMkQsS0FDMUV6RSxFQUFhdHpCLE1BQU1rRCxjQUFjLDhDQUFnRG93QixFQUFhUSxPQUFTLE9BQVNSLEVBQWF0ekIsTUFBTWtELGNBQWMsc0RBQXNEMlksU0FBVSxFQUNsTnlYLEVBQWFRLE9BQVNSLEVBQWF0ekIsTUFBTWtELGNBQWMsK0NBQStDeEYsTUFDdEc0MUIsRUFBYTRDLGdCQUFrQjVDLEVBQWE4QyxlQUFldmEsVUFBWXlYLEVBQWE2QyxTQUVoRjdDLEVBQWE4QixXQUNieDJCLEtBQUs4QixRQUFRMHlCLFNBQVM0TSwyQkFBMkJwakMsS0FBS2dDLEtBQU0wMEIsRUFBYzEwQixLQUFLOEIsUUFBUW9oQixPQUd0RmllLEdBQVNuaEMsS0FBSzhCLFFBQVE1QixPQUFPOEIsS0FBS2hFLEtBQUtnQyxLQUFNLFNBQVMsSUFNL0Q0K0IsVUFBVyxTQUFVMTdCLEVBQUdtdUIsR0FDcEIsTUFBTXFELEVBQWUxMEIsS0FBS0ssUUFBUTZpQixNQUtsQyxPQUhLaGdCLElBQUdBLEVBQUl3eEIsRUFBYWlCLE9BQU83MkIsT0FBU2tCLEtBQUt1QyxRQUFRNnpCLFlBQ2pEL0UsSUFBR0EsRUFBSXFELEVBQWFrQixPQUFPOTJCLE9BQVNrQixLQUFLdUMsUUFBUSt6QixhQUVqRDVCLEVBQWFzQyxpQkFBcUI5ekIsR0FBTSxLQUFLdkIsS0FBS3VCLElBQ25EbEQsS0FBSzhCLFFBQVFvaEIsTUFBTW1lLGVBQWVyakMsS0FBS2dDLEtBQU1rRCxFQUFHbXVCLElBQ3pDLElBQ0VudUIsR0FBVyxTQUFOQSxHQUFtQm11QixHQUFXLFNBQU5BLEVBR3RDcnhCLEtBQUs4QixRQUFRb2hCLE1BQU1vZSxRQUFRdGpDLEtBQUtnQyxLQUFNa0QsRUFBR211QixHQUFHLEdBRjVDcnhCLEtBQUs4QixRQUFRb2hCLE1BQU1xZSxZQUFZdmpDLEtBQUtnQyxPQUtqQyxJQU1YcTRCLFdBQVksV0FDUnI0QixLQUFLOEIsUUFBUTB5QixTQUFTZ04sbUJBQW1CeGpDLEtBQUtnQyxLQUFNQSxLQUFLSyxRQUFRNmlCLFFBTXJFb2UsUUFBUyxTQUFVcCtCLEVBQUdtdUIsRUFBR29RLEVBQW9CQyxHQUN6QyxNQUFNaE4sRUFBZTEwQixLQUFLSyxRQUFRNmlCLE1BQzVCeWUsRUFBUSxZQUFZaGdDLEtBQUsrL0IsSUFBYyxNQUFNLy9CLEtBQUsreUIsRUFBYWMsU0FBUzEwQixNQUFNeWIsUUFDdEUsWUFBWTVhLEtBQUsrL0IsSUFBYyxNQUFNLy9CLEtBQUsreUIsRUFBYWMsU0FBUzEwQixNQUFNd2IsU0FHaEZvWSxFQUFhYyxTQUFTMTBCLE1BQU13YixNQUFRdGMsS0FBS1UsS0FBSysrQixTQUFTdjhCLEdBQUtBLEVBQUl3eEIsRUFBYUksU0FBVzV4QixFQUN4RmxELEtBQUs4QixRQUFRb2hCLE1BQU0wZSxrQkFBa0I1akMsS0FBS2dDLE9BRXpDMmhDLElBQ0RqTixFQUFhYyxTQUFTMTBCLE1BQU15YixPQUFTdmMsS0FBS1UsS0FBSysrQixTQUFTcE8sR0FBS0EsRUFBSXFELEVBQWFJLFNBQVcsS0FBS256QixLQUFLMHZCLEdBQUssR0FBS0EsR0FHckYsV0FBeEJxRCxFQUFhUSxRQUFxQmwxQixLQUFLOEIsUUFBUW9oQixNQUFNMmIsU0FBUzdnQyxLQUFLZ0MsS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUMxRnloQyxHQUFvQi9NLEVBQWFjLFNBQVN0RCxnQkFBZ0IsbUJBRy9EbHlCLEtBQUs4QixRQUFRMHlCLFNBQVNxTix3QkFBd0I3akMsS0FBS2dDLEtBQU0wMEIsSUFNN0Q2TSxZQUFhLFdBQ1QsTUFBTTdNLEVBQWUxMEIsS0FBS0ssUUFBUTZpQixNQUU5QndSLEVBQWE2QyxXQUFVN0MsRUFBYTZDLFNBQVN6MkIsTUFBTWdoQyxVQUFZLElBQ25FOWhDLEtBQUs4QixRQUFRMHlCLFNBQVNzTSxlQUFlOWlDLEtBQUtnQyxLQUFNMDBCLEVBQWFjLFVBQzdEeDFCLEtBQUs4QixRQUFRb2hCLE1BQU0wZSxrQkFBa0I1akMsS0FBS2dDLE1BRTFDMDBCLEVBQWFjLFNBQVMxMEIsTUFBTWloQyxTQUFXLEdBQ3ZDck4sRUFBYWMsU0FBUzEwQixNQUFNd2IsTUFBUSxHQUNwQ29ZLEVBQWFjLFNBQVMxMEIsTUFBTXliLE9BQVMsR0FDbENtWSxFQUFhZSxTQUNaZixFQUFhZSxPQUFPMzBCLE1BQU13YixNQUFRLEdBQ2xDb1ksRUFBYWUsT0FBTzMwQixNQUFNeWIsT0FBUyxJQUd2Q3ZjLEtBQUs4QixRQUFRb2hCLE1BQU0yYixTQUFTN2dDLEtBQUtnQyxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ3pEMDBCLEVBQWFjLFNBQVNuZixhQUFhLGtCQUFtQixhQUd0RHJXLEtBQUs4QixRQUFRMHlCLFNBQVNxTix3QkFBd0I3akMsS0FBS2dDLEtBQU0wMEIsSUFNN0RzTixjQUFlLFdBQ1gsTUFBTXROLEVBQWUxMEIsS0FBS0ssUUFBUTZpQixNQUNsQ3dSLEVBQWFjLFNBQVN0RCxnQkFBZ0IsbUJBRXRDbHlCLEtBQUs4QixRQUFRMHlCLFNBQVNzTSxlQUFlOWlDLEtBQUtnQyxLQUFNMDBCLEVBQWFjLFVBQzdEeDFCLEtBQUs4QixRQUFRb2hCLE1BQU0wZSxrQkFBa0I1akMsS0FBS2dDLE1BRTFDLE1BQU1paUMsR0FBY3ZOLEVBQWFjLFNBQVMzekIsYUFBYSxnQkFBa0IsSUFBSXdHLE1BQU0sS0FDN0VuRixFQUFJKytCLEVBQVcsR0FDZjVRLEVBQUk0USxFQUFXLEdBRWpCQSxJQUNJdk4sRUFBYXNDLGlCQUFvQixLQUFLcjFCLEtBQUt1QixLQUFPLEtBQUt2QixLQUFLMHZCLEtBQU8sS0FBSzF2QixLQUFLMHZCLElBQzdFcnhCLEtBQUs4QixRQUFRb2hCLE1BQU1tZSxlQUFlcmpDLEtBQUtnQyxLQUFNa0QsRUFBR211QixHQUVoRHJ4QixLQUFLOEIsUUFBUW9oQixNQUFNb2UsUUFBUXRqQyxLQUFLZ0MsS0FBTWtELEVBQUdtdUIsR0FJN0NyeEIsS0FBSzhCLFFBQVEweUIsU0FBU3FOLHdCQUF3QjdqQyxLQUFLZ0MsS0FBTTAwQixLQU9qRTJNLGVBQWdCLFNBQVVuK0IsRUFBR211QixHQUN6QixNQUFNcUQsRUFBZTEwQixLQUFLSyxRQUFRNmlCLE1BQ2xDbU8sR0FBTUEsR0FBTSxLQUFLMXZCLEtBQUswdkIsSUFBT3J4QixLQUFLVSxLQUFLc2dDLFVBQVUzUCxFQUFHLEdBQTJDcnhCLEtBQUtVLEtBQUsrK0IsU0FBU3BPLEdBQUtBLEVBQUlxRCxFQUFhSSxTQUFZekQsR0FBSyxHQUFoR3J4QixLQUFLVSxLQUFLKytCLFNBQVNwTyxHQUFLQSxFQUFJLElBQU1BLEVBQzNGLE1BQU02USxFQUFtQixLQUFLdmdDLEtBQUswdkIsR0FFaENxRCxFQUFhZ0IsYUFDWmhCLEVBQWFnQixXQUFXNTBCLE1BQU13YixNQUFRdGMsS0FBS1UsS0FBSysrQixTQUFTdjhCLEdBQUtBLEVBQUksSUFBTUEsRUFDeEV3eEIsRUFBYWdCLFdBQVc1MEIsTUFBTXliLE9BQVMsSUFHeENtWSxFQUFhZSxTQUNaZixFQUFhZSxPQUFPMzBCLE1BQU13YixNQUFRLE9BQ2xDb1ksRUFBYWUsT0FBTzMwQixNQUFNeWIsT0FBVTJsQixFQUF3QjdRLEVBQUwsSUFHM0RxRCxFQUFhYyxTQUFTMTBCLE1BQU13YixNQUFRLE9BQ3BDb1ksRUFBYWMsU0FBUzEwQixNQUFNeWIsT0FBUzJsQixFQUFtQixHQUFLN1EsRUFDN0RxRCxFQUFhYyxTQUFTMTBCLE1BQU1paEMsU0FBVyxHQUVYLFdBQXhCck4sRUFBYVEsUUFBcUJsMUIsS0FBSzhCLFFBQVFvaEIsTUFBTTJiLFNBQVM3Z0MsS0FBS2dDLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFFL0YwMEIsRUFBYWMsU0FBU25mLGFBQWEsa0JBQW1CblQsRUFBSSxJQUFNbXVCLEdBQ2hFcnhCLEtBQUs4QixRQUFRMHlCLFNBQVMyTixtQkFBbUJua0MsS0FBS2dDLEtBQU0wMEIsRUFBYWMsVUFHakV4MUIsS0FBSzhCLFFBQVEweUIsU0FBU3FOLHdCQUF3QjdqQyxLQUFLZ0MsS0FBTTAwQixJQU03RGtOLGtCQUFtQixXQUNmLE1BQU1sTixFQUFlMTBCLEtBQUtLLFFBQVE2aUIsTUFFL0J3UixFQUFhZSxTQUNaZixFQUFhZSxPQUFPMzBCLE1BQU13YixNQUFRLEdBQ2xDb1ksRUFBYWUsT0FBTzMwQixNQUFNeWIsT0FBUyxJQUVwQ21ZLEVBQWFnQixhQUNaaEIsRUFBYWdCLFdBQVc1MEIsTUFBTXdiLE1BQVEsR0FDdENvWSxFQUFhZ0IsV0FBVzUwQixNQUFNeWIsT0FBUyxJQUczQ3ZjLEtBQUtVLEtBQUt3SSxZQUFZd3JCLEVBQWFnQixXQUFZMTFCLEtBQUtLLFFBQVE2aUIsTUFBTWlTLG1CQUNsRW4xQixLQUFLVSxLQUFLeUksU0FBU3VyQixFQUFhZ0IsV0FBWSxlQUFpQmhCLEVBQWFRLFFBRTlDLFdBQXhCUixFQUFhUSxRQUFxQmwxQixLQUFLOEIsUUFBUW9oQixNQUFNMmIsU0FBUzdnQyxLQUFLZ0MsS0FBTSxLQUFNLEtBQU0sS0FBTSxPQU1uRzYrQixTQUFVLFNBQVV4YyxFQUFPN2dCLEVBQVMrOEIsRUFBT0UsR0FDdkMsTUFBTS9KLEVBQWUxMEIsS0FBS0ssUUFBUTZpQixNQUU3QmIsSUFBT0EsRUFBUXFTLEVBQWFRLFFBQzVCMXpCLElBQVNBLEVBQVVrekIsRUFBYWMsVUFDaEMrSSxJQUFPQSxFQUFRN0osRUFBYWUsUUFDNUJnSixJQUFXQSxFQUFZL0osRUFBYWdCLFlBRXJDLEtBQUsvekIsS0FBS0gsRUFBUVYsTUFBTXdiLFFBQW9CLFdBQVYrRixHQUMvQm9jLElBQVdBLEVBQVUzOUIsTUFBTXNoQyxTQUFXLFFBQ3RDN0QsSUFBT0EsRUFBTXo5QixNQUFNd2IsTUFBUW1pQixFQUFVMzlCLE1BQU13YixTQUUzQ21pQixJQUFXQSxFQUFVMzlCLE1BQU1zaEMsU0FBVyxJQUN0QzdELElBQU9BLEVBQU16OUIsTUFBTXdiLE1BQVF0YyxLQUFLSyxRQUFRbTBCLFNBQVNxTSxnQkFBbUJyL0IsRUFBUVYsTUFBTXliLFFBQVUvYSxFQUFRNkYsYUFBbUI3RixFQUFRVixNQUFNd2IsT0FBaUMsU0FBeEI5YSxFQUFRVixNQUFNd2IsTUFBeUI5YSxFQUFRVixNQUFNd2IsT0FBUyxPQUE1QixLQUdsTHRjLEtBQUtVLEtBQUs0RSxTQUFTbTVCLEVBQVcsZUFBaUJwYyxLQUNoRHJpQixLQUFLVSxLQUFLd0ksWUFBWXUxQixFQUFXL0osRUFBYVMsbUJBQzlDbjFCLEtBQUtVLEtBQUt5SSxTQUFTczFCLEVBQVcsZUFBaUJwYyxJQUduRDdnQixFQUFRNlUsYUFBYSxhQUFjZ00sSUFNdkN4ZixLQUFNLFdBQ0YsTUFBTTZ4QixFQUFlMTBCLEtBQUtLLFFBQVE2aUIsTUFDOUJ3UixFQUFhZ0QsZUFBY2hELEVBQWFnRCxhQUFhNTRCLE1BQVEsSUFDN0Q0MUIsRUFBYWlELGFBQVlqRCxFQUFhVSxPQUFPQyxXQUFhWCxFQUFha0QsV0FBV3J5QixZQUFjbXZCLEVBQWFpRCxXQUFXNzRCLE1BQVEsSUFDaEk0MUIsRUFBYWdELGNBQWdCaEQsRUFBYWlELGFBQzFDakQsRUFBYWlELFdBQVd6RixnQkFBZ0IsWUFDeEN3QyxFQUFha0QsV0FBVzkyQixNQUFNazRCLGVBQWlCLElBR25EdEUsRUFBYXJZLFFBQVF2ZCxNQUFRLEdBQzdCNDFCLEVBQWF0ekIsTUFBTWtELGNBQWMscURBQXFEMlksU0FBVSxFQUNoR3lYLEVBQWE4QyxlQUFldmEsU0FBVSxFQUN0Q3lYLEVBQWFjLFNBQVcsS0FDeEJ4MUIsS0FBSzhCLFFBQVFvaEIsTUFBTTJVLFFBQVE3NUIsS0FBS2dDLEtBQU0sUUFFbEMwMEIsRUFBYThCLFlBQ2I5QixFQUFhaUIsT0FBTzcyQixNQUFRa0IsS0FBS3VDLFFBQVE2ekIsYUFBZTFCLEVBQWF1QixjQUFnQixHQUFLajJCLEtBQUt1QyxRQUFRNnpCLFdBQ3ZHMUIsRUFBYWtCLE9BQU85MkIsTUFBUWtCLEtBQUt1QyxRQUFRK3pCLGNBQWdCNUIsRUFBYXdCLGNBQWdCLEdBQUtsMkIsS0FBS3VDLFFBQVErekIsWUFDeEc1QixFQUFhalAsV0FBV3hJLFNBQVUsRUFDbEN5WCxFQUFhd0MsUUFBUyxFQUN0QnhDLEVBQWF5QyxRQUFVLEVBQ3ZCekMsRUFBYTBDLFFBQVUsR0FHM0JwM0IsS0FBSzhCLFFBQVFrckIsT0FBT25xQixLQUFLN0UsS0FBS2dDLEtBQU0wMEIsRUFBYWxDLGFDam1DMUMsR0FDWHAwQixLQUFNLFFBQ04yQyxRQUFTLFNBQ1RaLElBQUssU0FBVUMsR0FDWEEsRUFBSytwQixVQUFVLENBQUNqcUIsSUFBUXEwQixJQUFXQyxJQUFVQyxNQUU3QyxNQUFNbHlCLEVBQVVuQyxFQUFLbUMsUUFDZmxDLEVBQVVELEVBQUtDLFFBQ2ZnaUMsRUFBZWhpQyxFQUFROGlCLE1BQVEsQ0FDakN3UixVQUFXLEdBQ1hDLFdBQVksRUFDWkMsa0JBQW1CLEVBQ25CbnlCLGFBQWMsS0FDZG95QixTQUFVdnlCLEVBQVErL0IsZUFDbEJwTixPQUFRLE9BQ1JDLGtCQUFtQix1QkFDbkJvTixjQUFlaGdDLEVBQVFpZ0MsYUFDdkJDLFlBQW1DLElBQXJCbGdDLEVBQVFtZ0MsV0FBb0IsSUFDMUNDLGNBQXFDLElBQXJCcGdDLEVBQVFtZ0MsV0FBb0IsSUFDNUNyTixXQUFZLEdBRVpHLFNBQVUsS0FDVkMsT0FBUSxLQUNSQyxXQUFZLEtBRVpDLE9BQVEsS0FDUkMsT0FBUSxLQUNSQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLGNBQWUsT0FDZkMsY0FBcUMsSUFBckIzekIsRUFBUW1nQyxXQUFvQixJQUM1Q3ZNLFVBQWtDLFNBQXZCNXpCLEVBQVFxZ0MsV0FBd0IsR0FBS3JnQyxFQUFRcWdDLFdBQ3hEdk0sVUFBbUMsV0FBeEI5ekIsRUFBUXNnQyxZQUEyQixHQUFLdGdDLEVBQVFzZ0MsWUFDM0R0TSxvQkFBb0IsRUFDcEJDLFVBQVdqMEIsRUFBUXVnQyxjQUNuQnBNLGdCQUFpQm4wQixFQUFRd2dDLGdCQUN6Qm5NLFVBQVdyMEIsRUFBUXlnQyxjQUNuQmxNLFlBQWF2MEIsRUFBUTBnQyxlQUNyQmpNLGdCQUFpQnowQixFQUFRMmdDLHdCQUN6QmhNLFFBQVEsRUFDUkMsUUFBUyxFQUNUQyxRQUFTLEVBQ1RDLGNBQWMsR0FJbEIsSUFBSThMLEVBQWVuakMsS0FBSzB5QixVQUFVdHlCLEdBQ2xDaWlDLEVBQWFqaEMsTUFBUStoQyxFQUNyQmQsRUFBYWUsZUFBaUJELEVBQWE3K0IsY0FBYyxtQkFDekQrOUIsRUFBYWdCLGFBQWVGLEVBQWE3K0IsY0FBYyxpQkFDdkQrOUIsRUFBYTMvQixhQUFlMi9CLEVBQWFnQixjQUFnQmhCLEVBQWFlLGVBQ3RFZixFQUFhM2UsUUFBVXlmLEVBQWE3K0IsY0FBYyxvQkFHbEQ2K0IsRUFBYTcrQixjQUFjLFFBQVFqRCxpQkFBaUIsU0FBVXJCLEtBQUt5cUIsT0FBT3ByQixLQUFLZSxJQUMzRWlpQyxFQUFhZSxnQkFBZ0JELEVBQWE3K0IsY0FBYyxnQ0FBZ0NqRCxpQkFBaUIsUUFBU3JCLEtBQUs4M0IscUJBQXFCejRCLEtBQUtnakMsRUFBYWUsZUFBZ0JmLEVBQWFnQixhQUFjaEIsRUFBYTNlLFVBQ3ROMmUsRUFBYWUsZ0JBQWtCZixFQUFhZ0IsY0FBY2hCLEVBQWFlLGVBQWUvaEMsaUJBQWlCLFNBQVVyQixLQUFLZzRCLGlCQUFpQjM0QixLQUFLZ2pDLElBQzVJQSxFQUFhZ0IsY0FBY2hCLEVBQWFnQixhQUFhaGlDLGlCQUFpQixRQUFTckIsS0FBSyszQixlQUFlMTRCLEtBQUtnakMsRUFBYTNlLFFBQVMyZSxFQUFjOS9CLEVBQVFpdkIsZUFFeEo2USxFQUFhNWMsV0FBYSxHQUMxQjRjLEVBQWFpQixpQkFBbUIsR0FDaENqQixFQUFhMU0sT0FBUyxHQUN0QjBNLEVBQWF6TSxPQUFTLEdBQ2xCcnpCLEVBQVF1Z0MsZ0JBQ1JULEVBQWE1YyxXQUFhMGQsRUFBYTcrQixjQUFjLCtCQUNyRCs5QixFQUFhaUIsaUJBQW1CSCxFQUFhNytCLGNBQWMsbUJBQzNEKzlCLEVBQWExTSxPQUFTd04sRUFBYTcrQixjQUFjLHFCQUNqRCs5QixFQUFhek0sT0FBU3VOLEVBQWE3K0IsY0FBYyxxQkFDakQrOUIsRUFBYTFNLE9BQU83MkIsTUFBUXlELEVBQVFxZ0MsV0FDcENQLEVBQWF6TSxPQUFPOTJCLE1BQVF5RCxFQUFRc2dDLFlBRXBDUixFQUFhMU0sT0FBT3QwQixpQkFBaUIsUUFBU3JCLEtBQUttNEIsYUFBYTk0QixLQUFLZSxFQUFNLE1BQzNFaWlDLEVBQWF6TSxPQUFPdjBCLGlCQUFpQixRQUFTckIsS0FBS200QixhQUFhOTRCLEtBQUtlLEVBQU0sTUFFM0VpaUMsRUFBYTFNLE9BQU90MEIsaUJBQWlCLFNBQVVyQixLQUFLbzRCLFNBQVMvNEIsS0FBS2UsSUFDbEVpaUMsRUFBYXpNLE9BQU92MEIsaUJBQWlCLFNBQVVyQixLQUFLbzRCLFNBQVMvNEIsS0FBS2UsSUFDbEVpaUMsRUFBYTVjLFdBQVdwa0IsaUJBQWlCLFNBQVVyQixLQUFLbzRCLFNBQVMvNEIsS0FBS2UsSUFDdEVpaUMsRUFBYWlCLGlCQUFpQmppQyxpQkFBaUIsU0FBVXJCLEtBQUt1akMsY0FBY2xrQyxLQUFLZSxJQUVqRitpQyxFQUFhNytCLGNBQWMseUJBQXlCakQsaUJBQWlCLFFBQVNyQixLQUFLcTRCLFdBQVdoNUIsS0FBS2UsS0FJdkdDLEVBQVFILE9BQU9rQixNQUFNSCxZQUFZa2lDLEdBR2pDQSxFQUFlLE1BSW5CelEsVUFBVyxTQUFVdHlCLEdBQ2pCLE1BQU1zTyxFQUFTdE8sRUFBS21DLFFBQ2RxQyxFQUFPeEUsRUFBS3dFLEtBQ1oxRSxFQUFTRSxFQUFLTSxLQUFLQyxjQUFjLE9BRXZDVCxFQUFPVSxVQUFZLG9CQUNuQlYsRUFBT1ksTUFBTUMsUUFBVSxPQUN2QixJQUFJaWEsRUFBTyxvS0FHdUZwVyxFQUFLQyxVQUFVOUMsTUFBUSxpQkFBbUI2QyxFQUFLQyxVQUFVOUMsTUFBUSxLQUNuSjNCLEVBQUswRSxNQUFNQyxPQUpoQix5Q0FNbUNILEVBQUtDLFVBQVVzZ0IsU0FBUzNmLE1BTjNELDRDQThCUCxHQXBCUWtKLEVBQU84MEIsaUJBQ1B4b0IsR0FBUSxzQ0FFWXBXLEVBQUtDLFVBQVVzZ0IsU0FBU0QsS0FGcEMsNkdBSXlFeFcsRUFBTyswQixZQUFjLEtBQU8vMEIsRUFBT2cxQixrQkFBb0IsdUJBQXlCLElBSnpKLHVIQUsySDkrQixFQUFLa2hCLFdBQVdHLE9BQVMsaUJBQW1CcmhCLEVBQUtraEIsV0FBV0csT0FBUyxLQUFPN2xCLEVBQUswRSxNQUFNQyxPQUxsTix5QkFVUjJKLEVBQU9pMUIsZ0JBQ1Azb0IsR0FBUSxzQ0FFWXBXLEVBQUtDLFVBQVVzZ0IsU0FBU3pmLElBRnBDLDZHQVFaZ0osRUFBT28wQixjQUFlLENBQ3RCLE1BQU1jLEVBQVlsMUIsRUFBT20xQixnQkFBa0IsQ0FBQyxDQUFDemxDLEtBQU0sT0FBUVUsTUFBTyxPQUFTLENBQUNWLEtBQU0sTUFBT1UsTUFBTyxLQUFPLENBQUNWLEtBQU0sT0FBUVUsTUFBTyxRQUN2SCttQixFQUFRblgsRUFBT2cwQixXQUNmOUosRUFBaUJscUIsRUFBT3cwQix3QkFDeEJySyxFQUFxQkQsRUFBaUIscUNBQXVDLEdBQzdFRSxFQUFpQnBxQixFQUFPcTBCLGdCQUF5RCxHQUF2QyxxQ0FDMUNlLEVBQWdCcDFCLEVBQU9xMUIsZUFBd0QsR0FBdkMscUNBQ3hDQyxFQUFvQnBMLEdBQW1CbHFCLEVBQU9xMEIsaUJBQW9CcjBCLEVBQU9xMUIsZUFBd0QsR0FBdkMscUNBQ2hHL29CLEdBQVEsc0ZBRytCcFcsRUFBS0MsVUFBVXlYLE1BSDlDLDhFQUs4QndjLEVBQWdCLElBQU1sMEIsRUFBS0MsVUFBVTBYLE9BTG5FLGdDQU04QnVuQixFQUFlLEtBQU9sL0IsRUFBS0MsVUFBVWdoQixNQU5uRSxzRkFReUUrUyxFQUFpQix5QkFBMkIsZ0JBQWtCQSxFQUFpQixhQUFlLElBUnZLLG9DQVNvQ29MLEVBQW1CLEtBQU9wTCxFQUFpQixJQUFNLEtBVHJGLHlFQVV3RixJQUFwQmxxQixFQUFPZzBCLFdBQW9CLE1BQVE5SixFQUFpQix5QkFBMkIsZ0JBQWtCQSxFQUFpQixhQUFlLElBQU1FLEVBVjNNLDJEQVcyRGwwQixFQUFLQyxVQUFVZ2hCLE1BQVEsaUJBQW1CamhCLEVBQUtDLFVBQVVnaEIsTUFBUSxJQUFNaWUsRUFBZSxJQUN4SWhMLElBQWU5ZCxHQUFRLGlDQUM1QixJQUFLLElBQUluZCxFQUFJLEVBQUc0SixFQUFNbThCLEVBQVV0OUIsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDN0NtZCxHQUFRLGtCQUFvQjRvQixFQUFVL2xDLEdBQUdpQixNQUFRLEtBQU8rbUIsRUFBTWxXLGFBQWVpMEIsRUFBVS9sQyxHQUFHaUIsTUFBTTZRLFdBQWEsWUFBYyxJQUFNLElBQU1pMEIsRUFBVS9sQyxHQUFHTyxLQUFPLFlBRW5LNGMsR0FBUSx5Q0FDMEJwVyxFQUFLQyxVQUFVMmdCLGFBQWUsaUJBQW1CNWdCLEVBQUtDLFVBQVUyZ0IsYUFBZSwrREFBaUVwbEIsRUFBSzBFLE1BQU1pMEIsT0FEckwsbUVBRzBDRixFQUFxQm1MLEVBSC9ELHdHQUlpR3AvQixFQUFLQyxVQUFVNGdCLFdBSmhILGlCQXVCeEIsT0FmSXpLLEdBQVEsNENBR1V0TSxFQUFPdTBCLGVBQWlCLEdBQUssMEJBSHZDLDZHQUlrSHIrQixFQUFLQyxVQUFVNmdCLE1BSmpJLDRHQUswRzlnQixFQUFLQyxVQUFVNkwsS0FMekgsOEdBTTRHOUwsRUFBS0MsVUFBVThnQixPQU4zSCw2R0FPMkcvZ0IsRUFBS0MsVUFBVThMLE1BUDFILHFFQVN5RC9MLEVBQUtDLFVBQVUwZ0IsYUFBZSxpQkFBbUIzZ0IsRUFBS0MsVUFBVTBnQixhQUFlLFdBQWEzZ0IsRUFBS0MsVUFBVTBnQixhQVRwSyxnQ0FhWnJsQixFQUFPa0UsVUFBWTRXLEVBRVo5YSxHQUdYODNCLGlCQUFrQixXQUNUaDRCLEtBQUtvakMsZUFBZXRrQyxPQUlyQmtCLEtBQUtxakMsYUFBYWh0QixhQUFhLFlBQVksR0FDM0NyVyxLQUFLMGpCLFFBQVE1aUIsTUFBTWs0QixlQUFpQixpQkFKcENoNUIsS0FBS3FqQyxhQUFhblIsZ0JBQWdCLFlBQ2xDbHlCLEtBQUswakIsUUFBUTVpQixNQUFNazRCLGVBQWlCLEtBTzVDbEIscUJBQXNCLFNBQVVoSyxFQUFVcEssR0FDdEMxakIsS0FBS2xCLE1BQVEsR0FDVGd2QixJQUNBQSxFQUFTb0UsZ0JBQWdCLFlBQ3pCeE8sRUFBUTVpQixNQUFNazRCLGVBQWlCLEtBSXZDakIsZUFBZ0IsU0FBVTEzQixFQUFTcXRCLEVBQVVoc0IsR0FDekMsTUFBTTVDLEVBQVE0QyxFQUFFRSxPQUFPOUMsTUFBTTBKLE9BQ3pCLHVCQUF1QjdHLEtBQUs3QyxJQUM1QnVCLEVBQVFnMUIsV0FBYXYyQixFQUNyQmtCLEtBQUt1RixZQUFjLCtCQUVuQmxGLEVBQVFnMUIsV0FBYXIxQixLQUFLdUYsWUFBZXpHLEVBQWM0dUIsSUFBc0MsSUFBMUI1dUIsRUFBTTRKLFFBQVEsUUFBd0MsSUFBdkI1SixFQUFNNEosUUFBUSxLQUFjZ2xCLEVBQVc1dUIsR0FBa0MsSUFBMUJBLEVBQU00SixRQUFRLE9BQWdCLElBQU01SixFQUFRQSxFQUE1SSxJQUl6RG1sQyxhQUFjLFNBQVV6aUMsR0FDcEJBLEVBQVE2VSxhQUFhLFlBQVksR0FFakMsTUFBTTZ0QixFQUFRbGtDLEtBQUt1QyxRQUFRNGhDLGNBQzNCLEdBQUtELEVBRUwsSUFBSyxJQUFJOWtDLEtBQU84a0MsRUFDUGxrQyxLQUFLVSxLQUFLMGpDLE9BQU9GLEVBQU85a0MsSUFDN0JvQyxFQUFRNlUsYUFBYWpYLEVBQUs4a0MsRUFBTTlrQyxLQUl4Q2lsQyxlQUFnQixXQUNaLE1BQU1DLEVBQVd0a0MsS0FBS1UsS0FBS0MsY0FBYyxTQUV6QyxPQURBWCxLQUFLOEIsUUFBUXFoQixNQUFNOGdCLGFBQWFqbUMsS0FBS2dDLEtBQU1za0MsR0FDcENBLEdBR1hDLGdCQUFpQixTQUFVL2lDLEdBQ3ZCQSxFQUFRZ2pDLFlBQWMsSUFDdEJoakMsRUFBUWlqQyxpQkFBa0IsRUFFMUIsTUFBTVAsRUFBUWxrQyxLQUFLdUMsUUFBUW1pQyxpQkFDM0IsR0FBS1IsRUFFTCxJQUFLLElBQUk5a0MsS0FBTzhrQyxFQUNQbGtDLEtBQUtVLEtBQUswakMsT0FBT0YsRUFBTzlrQyxJQUM3Qm9DLEVBQVE2VSxhQUFhalgsRUFBSzhrQyxFQUFNOWtDLEtBSXhDdWxDLGdCQUFpQixXQUNiLE1BQU1DLEVBQVk1a0MsS0FBS1UsS0FBS0MsY0FBYyxVQUUxQyxPQURBWCxLQUFLOEIsUUFBUXFoQixNQUFNb2hCLGdCQUFnQnZtQyxLQUFLZ0MsS0FBTTRrQyxHQUN2Q0EsR0FNWHhMLFNBQVUsQ0FBQyxTQUFVLFNBT3JCQyxPQUFRLFNBQVU3M0IsR0FDZHhCLEtBQUs4QixRQUFRcWhCLE1BQU1tVyxhQUFhdDdCLEtBQUtnQyxLQUFNd0IsRUFBU3hCLEtBQUs4QixRQUFRMHlCLFNBQVMrRSx1QkFBdUJ2N0IsS0FBS2dDLEtBQU13QixFQUFTLFdBTXpIZzRCLFFBQVMsU0FBVWg0QixHQUNmLE1BQU1xakMsRUFBUXJqQyxHQUFXeEIsS0FBS0ssUUFBUThpQixNQUFNcVMsU0FDdENpSixFQUFZeitCLEtBQUtLLFFBQVE4aUIsTUFBTXVTLFdBQy9CbUUsRUFBK0MsRUFBbkNnTCxFQUFNaGpDLGFBQWEsY0FFckMsR0FBa0QsbUJBQXZDN0IsS0FBSzg1QixVQUFVZ0wsc0JBQWlILElBQTFFOWtDLEtBQUs4NUIsVUFBVWdMLG9CQUFvQkQsRUFBT3BHLEVBQVc1RSxFQUFXNzVCLE1BQWtCLE9BRW5KLElBQUlnNkIsRUFBV3lFLEVBQVV4RSx3QkFBMEJ3RSxFQUFVdkUsbUJBQzdELE1BQU1DLEVBQVdzRSxFQUFVaDFCLFdBQzNCekosS0FBS1UsS0FBS3NwQixXQUFXeVUsR0FDckJ6K0IsS0FBSzhCLFFBQVFxaEIsTUFBTXRnQixLQUFLN0UsS0FBS2dDLE1BQzdCQSxLQUFLOHpCLGlCQUVEcUcsSUFBYW42QixLQUFLSyxRQUFRbUIsUUFBUTB2QixTQUFTbHhCLEtBQUtVLEtBQUswNUIscUJBQXFCRCxHQUFVLFNBQVUzSixHQUFXLE9BQXFDLElBQTlCQSxFQUFRL1osV0FBV25RLFNBQWlCLE1BR3hKdEcsS0FBS3E2QixVQUFVTCxHQUdmaDZCLEtBQUs4QixRQUFRMnlCLFlBQVk2RixXQUFXdDhCLEtBQUtnQyxLQUFNLFFBQVM2NUIsRUFBVzc1QixLQUFLODVCLFVBQVVpTCxlQUdsRi9rQyxLQUFLMHpCLFFBQVEvcUIsTUFBSyxJQU10QmhHLEdBQUksU0FBVVYsR0FDVixNQUFNb2dDLEVBQWVyaUMsS0FBS0ssUUFBUThpQixNQUU3QmxoQixFQU1Hb2dDLEVBQWFlLGdCQUFrQnBqQyxLQUFLdUMsUUFBUW1oQyxtQkFBbUJyQixFQUFhZSxlQUFlbFIsZ0JBQWdCLGFBTC9HbVEsRUFBYTFNLE9BQU83MkIsTUFBUXVqQyxFQUFhbE0sVUFBWW4yQixLQUFLdUMsUUFBUXFnQyxhQUFlUCxFQUFhcE0sY0FBZ0IsR0FBS2oyQixLQUFLdUMsUUFBUXFnQyxXQUNoSVAsRUFBYXpNLE9BQU85MkIsTUFBUXVqQyxFQUFhaE0sVUFBWXIyQixLQUFLdUMsUUFBUXNnQyxjQUFnQlIsRUFBYW5NLGNBQWdCLEdBQUtsMkIsS0FBS3VDLFFBQVFzZ0MsWUFDaklSLEVBQWE1YyxXQUFXdWYsVUFBVyxFQUMvQjNDLEVBQWFlLGdCQUFrQnBqQyxLQUFLdUMsUUFBUW1oQyxtQkFBbUJyQixFQUFhZSxlQUFlL3NCLGFBQWEsV0FBWSxhQUt4SGdzQixFQUFhN0wsV0FDYngyQixLQUFLOEIsUUFBUXFoQixNQUFNOGhCLG9CQUFvQmpuQyxLQUFLZ0MsS0FBTXFpQyxFQUFhaE0sV0FBYWdNLEVBQWFNLGdCQU9qRzNnQyxLQUFNLFdBQ0ZoQyxLQUFLOEIsUUFBUTVCLE9BQU84QixLQUFLaEUsS0FBS2dDLEtBQU0sUUFBUyxVQUFZQSxLQUFLaXpCLHdCQUdsRXNRLGNBQWUsU0FBVTdoQyxHQUNyQixNQUFNMmdDLEVBQWVyaUMsS0FBS0ssUUFBUThpQixNQUM1QnJrQixFQUFRNEMsRUFBRUUsT0FBT1csUUFBUWIsRUFBRUUsT0FBTzJwQixlQUFlenNCLE1BRXZEdWpDLEVBQWFuTSxjQUFnQm1NLEVBQWFJLFlBQWUzakMsRUFBOEMsSUFBUkEsRUFBZSxJQUE3Q3VqQyxFQUFhbk0sY0FDOUVtTSxFQUFhek0sT0FBT3NQLFlBQWVwbUMsRUFBc0IsSUFBUkEsRUFBZSxJQUFyQixHQUMzQ3VqQyxFQUFhek0sT0FBTzkyQixNQUFRLElBUWhDcTVCLGFBQWMsU0FBVXFGLEVBQUk5N0IsR0FDeEIsR0FBSUEsR0FBbUIsS0FBZEEsRUFBRVksUUFFUCxZQURBWixFQUFFNEgsaUJBSU4sTUFBTSs0QixFQUFlcmlDLEtBQUtLLFFBQVE4aUIsTUFDbENuakIsS0FBSzhCLFFBQVEweUIsU0FBU2lKLHFCQUFxQnovQixLQUFLZ0MsS0FBTXFpQyxFQUFjN0UsR0FFekQsTUFBUEEsR0FDQXg5QixLQUFLOEIsUUFBUXFoQixNQUFNOGhCLG9CQUFvQmpuQyxLQUFLZ0MsS0FBTTBCLEVBQUVFLE9BQU85QyxPQUFTdWpDLEVBQWFNLGdCQU96RnZLLFNBQVUsV0FDTnA0QixLQUFLOEIsUUFBUTB5QixTQUFTa0osaUJBQWlCMS9CLEtBQUtnQyxLQUFNQSxLQUFLSyxRQUFROGlCLFFBR25Fc0gsT0FBUSxTQUFVL29CLEdBQ2QsTUFBTTJnQyxFQUFlcmlDLEtBQUtLLFFBQVE4aUIsTUFDNUJnaUIsRUFBY25sQyxLQUFLOEIsUUFBUXFoQixNQUVqQ3poQixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUZxOUIsRUFBYW5OLE9BQVNtTixFQUFhamhDLE1BQU1rRCxjQUFjLCtDQUErQ3hGLE1BRXRHLElBQ1F1akMsRUFBYWUsZ0JBQWtCZixFQUFhZSxlQUFldEksTUFBTXgwQixPQUFTLEdBQzFFdEcsS0FBS2t6QixjQUNMaVMsRUFBWXBLLGFBQWEvOEIsS0FBS2dDLEtBQU1BLEtBQUtLLFFBQVE4aUIsTUFBTWlnQixlQUFldEksUUFDL0R1SCxFQUFhZ0IsY0FBZ0JoQixFQUFhaE4sV0FBVy91QixPQUFTLElBQ3JFdEcsS0FBS2t6QixjQUNMaVMsRUFBWUMsVUFBVXBuQyxLQUFLZ0MsS0FBTXFpQyxFQUFhaE4sYUFFcEQsTUFBT2pvQixHQUVMLE1BREFwTixLQUFLeXpCLGVBQ0N0d0IsTUFBTSwwQ0FBNENpSyxFQUFNbEcsUUFBVSxLQUMxRSxRQUNFbEgsS0FBSzhCLFFBQVE1QixPQUFPNkIsTUFBTS9ELEtBQUtnQyxNQUduQyxPQUFPLEdBR1grNkIsYUFBYyxTQUFVRSxHQUNwQixHQUF3QixJQUFwQkEsRUFBUzMwQixPQUFjLE9BRTNCLElBQUk0MEIsRUFBVyxFQUNYSixFQUFRLEdBQ1osSUFBSyxJQUFJajlCLEVBQUksRUFBRzRKLEVBQU13ekIsRUFBUzMwQixPQUFRekksRUFBSTRKLEVBQUs1SixJQUN4QyxTQUFTOEQsS0FBS3M1QixFQUFTcDlCLEdBQUdtTSxRQUMxQjh3QixFQUFNbnlCLEtBQUtzeUIsRUFBU3A5QixJQUNwQnE5QixHQUFZRCxFQUFTcDlCLEdBQUcrbkIsTUFJaEMsTUFBTXVWLEVBQVluN0IsS0FBS3VDLFFBQVE4aUMscUJBQy9CLEdBQUlsSyxFQUFZLEVBQUcsQ0FDZixJQUFJRSxFQUFXLEVBQ2YsTUFBTWlLLEVBQWF0bEMsS0FBS0ssUUFBUThpQixNQUFNd1IsVUFDdEMsSUFBSyxJQUFJOTJCLEVBQUksRUFBRzRKLEVBQU02OUIsRUFBV2gvQixPQUFRekksRUFBSTRKLEVBQUs1SixJQUM5Q3c5QixHQUFpQyxFQUFyQmlLLEVBQVd6bkMsR0FBRytuQixLQUc5QixHQUFLc1YsRUFBV0csRUFBWUYsRUFBVyxDQUNuQ243QixLQUFLeXpCLGVBQ0wsTUFBTW5zQixFQUFNLGlFQUFvRTZ6QixFQUFVLElBQVEsS0FJbEcsYUFIaUQsbUJBQXRDbjdCLEtBQUs4NUIsVUFBVXlMLG9CQUFxQ3ZsQyxLQUFLODVCLFVBQVV5TCxtQkFBbUJqK0IsRUFBSyxDQUFFLFVBQWE2ekIsRUFBVyxZQUFlRSxFQUFVLFdBQWNILEdBQVlsN0IsUUFDL0tBLEtBQUs4NUIsVUFBVTBCLFdBQVdsMEIsS0FNdEMsTUFBTSs2QixFQUFlcmlDLEtBQUtLLFFBQVE4aUIsTUFDbENrZixFQUFheE4sa0JBQW9CaUcsRUFBTXgwQixPQUV2QyxNQUFNbTFCLEVBQU8sQ0FDVEMsV0FBWTJHLEVBQWExTSxPQUFPNzJCLE1BQ2hDNjhCLFlBQWEwRyxFQUFhek0sT0FBTzkyQixNQUNqQ3VqQixNQUFPZ2dCLEVBQWFuTixPQUNwQjBHLFNBQVU1N0IsS0FBS0ssUUFBUUgsT0FBT0ssWUFDOUJpQixRQUFTNmdDLEVBQWE3TSxVQUcxQixHQUFrRCxtQkFBdkN4MUIsS0FBSzg1QixVQUFVMEwsb0JBQW9DLENBQzFELE1BQU16K0IsRUFBUy9HLEtBQUs4NUIsVUFBVTBMLG9CQUFvQjFLLEVBQU9XLEVBQU16N0IsS0FBTSxTQUFVd2dCLEdBQ3ZFQSxHQUFReGdCLEtBQUtvRyxHQUFHd0osTUFBTXRDLFFBQVFrVCxFQUFLelosUUFDbkMvRyxLQUFLOEIsUUFBUXFoQixNQUFNMlksU0FBUzk5QixLQUFLZ0MsS0FBTXk3QixFQUFNamIsR0FFN0N4Z0IsS0FBSzhCLFFBQVFxaEIsTUFBTTRZLE9BQU8vOUIsS0FBS2dDLEtBQU15N0IsRUFBTWpiLElBRWpEbmhCLEtBQUtXLE9BRVAsUUFBc0IsSUFBWCtHLEVBQXdCLE9BQ25DLElBQUtBLEVBRUQsWUFEQS9HLEtBQUt5ekIsZUFHYSxpQkFBWDFzQixHQUF1QkEsRUFBT1QsT0FBUyxJQUFHdzBCLEVBQVEvekIsR0FHakUvRyxLQUFLOEIsUUFBUXFoQixNQUFNNFksT0FBTy85QixLQUFLZ0MsS0FBTXk3QixFQUFNWCxJQUcvQzF0QixNQUFPLFNBQVVsRyxFQUFTODBCLEdBRXRCLEdBREFoOEIsS0FBS3l6QixlQUM0QyxtQkFBdEN6ekIsS0FBSzg1QixVQUFVeUwsb0JBQXFDdmxDLEtBQUs4NUIsVUFBVXlMLG1CQUFtQnIrQixFQUFTODBCLEVBQVVoOEIsTUFFaEgsTUFEQUEsS0FBSzg1QixVQUFVMEIsV0FBV3QwQixHQUNwQi9ELE1BQU0sNENBQThDK0QsSUFJbEU2MEIsT0FBUSxTQUFVTixFQUFNWCxHQUNwQixJQUFLQSxFQUVELFlBREE5NkIsS0FBS3l6QixlQUdULEdBQXFCLGlCQUFWcUgsRUFFUCxZQURBOTZCLEtBQUs4QixRQUFRcWhCLE1BQU0vVixNQUFNcFAsS0FBS2dDLEtBQU04NkIsRUFBTyxNQUkvQyxNQUFNMkssRUFBaUJ6bEMsS0FBS3VDLFFBQVFrakMsZUFDOUJ2SixFQUFXbDhCLEtBQUtLLFFBQVFILE9BQU9LLFlBQWMsRUFBSXU2QixFQUFNeDBCLE9BRzdELEtBQThCLGlCQUFuQm0vQixHQUErQkEsRUFBZW4vQixPQUFTLEdBTzlELE1BQU1uRCxNQUFNLDZFQVBxRCxDQUNqRSxNQUFNZzVCLEVBQVcsSUFBSUMsU0FDckIsSUFBSyxJQUFJditCLEVBQUksRUFBR0EsRUFBSXErQixFQUFVcitCLElBQzFCcytCLEVBQVNqakIsT0FBTyxRQUFVcmIsRUFBR2k5QixFQUFNajlCLElBRXZDbUMsS0FBSzhCLFFBQVEyeUIsWUFBWXNILE9BQU8vOUIsS0FBS2dDLEtBQU15bEMsRUFBZ0J6bEMsS0FBS3VDLFFBQVFtakMsa0JBQW1CdkosRUFBVW44QixLQUFLOEIsUUFBUXFoQixNQUFNd2lCLHFCQUFxQnRtQyxLQUFLVyxLQUFNeTdCLEdBQU96N0IsS0FBSzg1QixVQUFVeUwsc0JBTXRMSSxxQkFBc0IsU0FBVWxLLEVBQU16MUIsR0FDbEMsR0FBaUQsbUJBQXRDaEcsS0FBSzg1QixVQUFVOEwsbUJBQ3RCNWxDLEtBQUs4NUIsVUFBVThMLG1CQUFtQjUvQixFQUFTeTFCLEVBQU16N0IsVUFDOUMsQ0FDSCxNQUFNZzhCLEVBQVdwMUIsS0FBS0MsTUFBTWIsRUFBUWMsY0FDaENrMUIsRUFBU3owQixhQUNUdkgsS0FBSzhCLFFBQVFxaEIsTUFBTS9WLE1BQU1wUCxLQUFLZ0MsS0FBTWc4QixFQUFTejBCLGFBQWN5MEIsR0FFM0RoOEIsS0FBSzhCLFFBQVFxaEIsTUFBTTJZLFNBQVM5OUIsS0FBS2dDLEtBQU15N0IsRUFBTU8sS0FLekRGLFNBQVUsU0FBVUwsRUFBTU8sR0FDdEIsTUFBTWYsRUFBV2UsRUFBU2oxQixPQUNwQnU5QixFQUFXdGtDLEtBQUs4QixRQUFRcWhCLE1BQU1raEIsZUFBZXJtQyxLQUFLZ0MsTUFFeEQsSUFBSyxJQUFrQ2tsQixFQUE5QnJuQixFQUFJLEVBQUc0SixFQUFNd3pCLEVBQVMzMEIsT0FBY3pJLEVBQUk0SixFQUFLNUosSUFDbERxbkIsRUFBTyxDQUFFOW1CLEtBQU02OEIsRUFBU3A5QixHQUFHTyxLQUFNd25CLEtBQU1xVixFQUFTcDlCLEdBQUcrbkIsTUFDbkQ1bEIsS0FBSzhCLFFBQVFxaEIsTUFBTTBpQixhQUFhN25DLEtBQUtnQyxLQUFPeTdCLEVBQUtHLFNBQVdILEVBQUtqNkIsUUFBVThpQyxFQUFTaEcsV0FBVSxHQUFTckQsRUFBU3A5QixHQUFHNkgsSUFBSysxQixFQUFLQyxXQUFZRCxFQUFLRSxZQUFhRixFQUFLcFosTUFBTzZDLEVBQU11VyxFQUFLRyxVQUd0TDU3QixLQUFLeXpCLGdCQUdUMlIsVUFBVyxTQUFVMS9CLEdBQ2pCLElBQ0ksTUFBTTI4QixFQUFlcmlDLEtBQUtLLFFBQVE4aUIsTUFFbEMsR0FES3pkLElBQUtBLEVBQU0yOEIsRUFBYWhOLGFBQ3hCM3ZCLEVBQUssT0FBTyxFQUdqQixHQUFJLHVCQUF1Qi9ELEtBQUsrRCxHQUFNLENBR2xDLEdBQW1CLEtBRG5CQSxHQURpQixJQUFJMUYsS0FBS29HLEdBQUcwL0IsV0FBYUMsZ0JBQWdCcmdDLEVBQUssYUFBYXBCLGNBQWMsVUFDNUVtUixLQUNOblAsT0FBYyxPQUFPLEVBSWpDLEdBQUksYUFBYTNFLEtBQUsrRCxJQU9sQixHQU5LLFFBQVEvRCxLQUFLK0QsS0FBTUEsRUFBTSxXQUFhQSxHQUMzQ0EsRUFBTUEsRUFBSXNJLFFBQVEsV0FBWSxJQUN6QixtQkFBbUJyTSxLQUFLK0QsS0FDekJBLEVBQU1BLEVBQUlzSSxRQUFRdEksRUFBSTRMLE1BQU0sWUFBWSxHQUFJLDRCQUE0QnRELFFBQVEsSUFBSyxPQUdyRnEwQixFQUFhRSxjQUFjajhCLE9BQVMsRUFDcEMsR0FBSSxLQUFLM0UsS0FBSytELEdBQU0sQ0FDaEIsTUFBTXNnQyxFQUFXdGdDLEVBQUkyQyxNQUFNLEtBQzNCM0MsRUFBTXNnQyxFQUFTLEdBQUssSUFBTTNELEVBQWFFLGNBQWdCLElBQU15RCxFQUFTLFFBRXRFdGdDLEdBQU8sSUFBTTI4QixFQUFhRSxrQkFHM0IsYUFBYTVnQyxLQUFLK0QsS0FDckJBLEVBQUl1Z0MsU0FBUyxPQUNidmdDLEVBQU1BLEVBQUlnTSxNQUFNLEdBQUksSUFFeEJoTSxFQUFNLGtDQUFvQ0EsRUFBSWdNLE1BQU1oTSxFQUFJNnBCLFlBQVksS0FBTyxJQUcvRXZ2QixLQUFLOEIsUUFBUXFoQixNQUFNMGlCLGFBQWE3bkMsS0FBS2dDLEtBQU1BLEtBQUs4QixRQUFRcWhCLE1BQVEsMENBQTBDeGhCLEtBQUsrRCxJQUFTLGFBQWEvRCxLQUFLK0QsR0FBMEIsa0JBQW5CLGtCQUF1QzFILEtBQUtnQyxNQUFPMEYsRUFBSzI4QixFQUFhMU0sT0FBTzcyQixNQUFPdWpDLEVBQWF6TSxPQUFPOTJCLE1BQU91akMsRUFBYW5OLE9BQVEsS0FBTWwxQixLQUFLSyxRQUFRSCxPQUFPSyxhQUNoVCxNQUFPNk0sR0FDTCxNQUFNakssTUFBTSwwQ0FBNENpSyxFQUFNbEcsUUFBVSxLQUMxRSxRQUNFbEgsS0FBS3l6QixpQkFJYm9TLGFBQWMsU0FBVUssRUFBUXp3QixFQUFLNkcsRUFBT0MsRUFBUThGLEVBQU82QyxFQUFNMFcsR0FDN0Q1N0IsS0FBS0ssUUFBUW0wQixTQUFTNEosZUFBaUIsUUFDdkMsTUFBTWlFLEVBQWVyaUMsS0FBS0ssUUFBUThpQixNQUVsQyxJQUFJb2IsRUFBUSxLQUNSRSxFQUFZLEtBQ1o1N0IsR0FBTyxFQUdYLEdBQUkrNEIsRUFBVSxDQUVWLElBREFzSyxFQUFTN0QsRUFBYTdNLFVBQ1gvZixNQUFRQSxFQUFLLENBQ3BCNVMsR0FBTyxFQUNQLE1BQU1zakMsRUFBWSxhQUFheGtDLEtBQUs4VCxHQUM5QjJ3QixFQUFVLGFBQWF6a0MsS0FBSzhULEdBQ2xDLElBQUswd0IsSUFBYUMsR0FBYSxZQUFZemtDLEtBQUt1a0MsRUFBTy9VLFVBS2hELEdBQUtnVixHQUFjQyxHQUFZLFdBQVd6a0MsS0FBS3VrQyxFQUFPL1UsVUFNekQrVSxFQUFPendCLElBQU1BLE1BTnVELENBQ3BFLE1BQU00d0IsRUFBU3JtQyxLQUFLOEIsUUFBUXFoQixNQUFNa2hCLGVBQWVybUMsS0FBS2dDLE1BQ3REcW1DLEVBQU81d0IsSUFBTUEsRUFDYnl3QixFQUFPejhCLFdBQVcwMkIsYUFBYWtHLEVBQVFILEdBQ3ZDN0QsRUFBYTdNLFNBQVcwUSxFQUFTRyxNQVQ2QixDQUM5RCxNQUFNQSxFQUFTcm1DLEtBQUs4QixRQUFRcWhCLE1BQU13aEIsZ0JBQWdCM21DLEtBQUtnQyxNQUN2RHFtQyxFQUFPNXdCLElBQU1BLEVBQ2J5d0IsRUFBT3o4QixXQUFXMDJCLGFBQWFrRyxFQUFRSCxHQUN2QzdELEVBQWE3TSxTQUFXMFEsRUFBU0csR0FVekM1SCxFQUFZNEQsRUFBYTNNLFdBQ3pCNkksRUFBUXYrQixLQUFLVSxLQUFLaTVCLGlCQUFpQnVNLEVBQVEsZUFJM0NyakMsR0FBTyxFQUNQcWpDLEVBQU96d0IsSUFBTUEsRUFDYjRzQixFQUFhN00sU0FBVzBRLEVBQ3hCM0gsRUFBUXYrQixLQUFLOEIsUUFBUXl5QixVQUFVaUssVUFBVXhnQyxLQUFLZ0MsS0FBTWttQyxHQUNwRHpILEVBQVl6K0IsS0FBSzhCLFFBQVF5eUIsVUFBVW1LLGNBQWMxZ0MsS0FBS2dDLEtBQU11K0IsRUFBTyxzQkFJdkU4RCxFQUFhNU0sT0FBUzhJLEVBQ3RCOEQsRUFBYTNNLFdBQWErSSxFQUUxQixNQUFNNkgsRUFBZXRtQyxLQUFLOEIsUUFBUTB5QixTQUFTK1IsaUJBQWlCdm9DLEtBQUtnQyxLQUFNcWlDLE1BQW1CL2xCLEdBQVMrbEIsRUFBYXBNLGdCQUFvQmoyQixLQUFLOEIsUUFBUTB5QixTQUFTZ1MsaUJBQWlCeG9DLEtBQUtnQyxLQUFNcWlDLE1BQW1COWxCLEdBQVU4bEIsRUFBYUksYUFDMU5sRCxHQUFjM0QsR0FBWTBLLEVBRTVCakUsRUFBYTdMLFlBQ2J4MkIsS0FBS0ssUUFBUThpQixNQUFNb1QsbUJBQXFCOEwsRUFBYTVjLFdBQVd4SSxRQUNoRWlwQixFQUFPN3ZCLGFBQWEsa0JBQW1CZ3NCLEVBQWE5TCxxQkFJeEQsSUFBSWtRLEdBQVksRUFDWmxILElBQ0FrSCxFQUFZem1DLEtBQUs4QixRQUFRcWhCLE1BQU15YixVQUFVNWdDLEtBQUtnQyxPQUk1Q3ltQyxHQUF1QixXQUFWcGtCLEdBQ2ZyaUIsS0FBSzhCLFFBQVFxaEIsTUFBTTBiLFNBQVM3Z0MsS0FBS2dDLEtBQU0sS0FBTWttQyxFQUFRM0gsRUFBT0UsR0FHaEUsSUFBSWlJLEdBQVUsRUFDZCxHQUFLOUssRUFNTXlHLEVBQWE3TCxXQUFheDJCLEtBQUtLLFFBQVFtMEIsU0FBU3FNLGlCQUFtQnRCLEdBQzFFdi9CLEtBQUs4QixRQUFRMHlCLFNBQVN1TSxpQkFBaUIvaUMsS0FBS2dDLEtBQU1rbUMsRUFBUSxLQUFNLFdBTGhFLEdBREFRLEVBQVUxbUMsS0FBSysrQixnQkFBZ0JOLEdBQVcsR0FBTyxHQUFPeitCLEtBQUt1QyxRQUFRMDhCLGtCQUNoRWovQixLQUFLdUMsUUFBUTA4QixnQkFBaUIsQ0FDL0IsTUFBTUUsRUFBT24vQixLQUFLby9CLGdCQUFnQlgsRUFBVyxNQUN6Q1UsR0FBTW4vQixLQUFLb3pCLFNBQVMrTCxFQUFNLEVBQUdBLEVBQU0sR0FNM0N1SCxJQUNJN2pDLEdBQ0E3QyxLQUFLOEIsUUFBUTJ5QixZQUFZdUssUUFBUWhoQyxLQUFLZ0MsS0FBTSxRQUFTa21DLEVBQVFsbUMsS0FBSzg1QixVQUFVaUwsY0FBZTdmLEdBQU0sR0FFakcwVyxJQUNBNTdCLEtBQUtrL0IsZ0JBQWdCZ0gsRUFBUSxTQUU3QmxtQyxLQUFLMHpCLFFBQVEvcUIsTUFBSyxLQUkxQjNJLEtBQUtLLFFBQVFtMEIsU0FBUzRKLGVBQWlCLElBRzNDdUksbUJBQW9CLFNBQVVULEdBQzFCLElBQUtBLEVBQVEsT0FFYixNQUFNN0QsRUFBZXJpQyxLQUFLSyxRQUFROGlCLE1BRTlCLFdBQVd4aEIsS0FBS3VrQyxFQUFPL1UsVUFBV254QixLQUFLOEIsUUFBUXFoQixNQUFNOGdCLGFBQWFqbUMsS0FBS2dDLEtBQU1rbUMsR0FDNUVsbUMsS0FBSzhCLFFBQVFxaEIsTUFBTW9oQixnQkFBZ0J2bUMsS0FBS2dDLEtBQU1rbUMsR0FFbkQsSUFBSWxHLEVBQWdCaGdDLEtBQUtVLEtBQUt1L0IscUJBQXFCaUcsRUFBT3o4QixhQUFlekosS0FBS1UsS0FBSytvQixhQUFheWMsRUFBT3o4QixZQUNuR3k4QixFQUFTbG1DLEtBQUtVLEtBQUtvOUIsaUJBQWlCb0ksSUFBV0EsRUFFbkQsTUFBTVUsRUFBWVYsRUFDbEI3RCxFQUFhN00sU0FBVzBRLEVBQVNBLEVBQU81SCxXQUFVLEdBQ2xELE1BQU1DLEVBQVE4RCxFQUFhNU0sT0FBU3oxQixLQUFLOEIsUUFBUXl5QixVQUFVaUssVUFBVXhnQyxLQUFLZ0MsS0FBTWttQyxHQUMxRXpILEVBQVk0RCxFQUFhM00sV0FBYTExQixLQUFLOEIsUUFBUXl5QixVQUFVbUssY0FBYzFnQyxLQUFLZ0MsS0FBTXUrQixFQUFPLHNCQUVuRyxJQUNJLE1BQU1zSSxFQUFhN0csRUFBYTE3QixjQUFjLGNBQzlDLElBQUlnaEIsRUFBVSxLQUNSdWhCLElBQ0Z2aEIsRUFBVXRsQixLQUFLVSxLQUFLQyxjQUFjLE9BQ2xDMmtCLEVBQVFsaEIsVUFBWXlpQyxFQUFXemlDLFVBQy9CcEUsS0FBS1UsS0FBS3NwQixXQUFXNmMsSUFJekIsTUFBTWpoQixHQUFRc2dCLEVBQU9ya0MsYUFBYSxjQUFnQnFrQyxFQUFPcmtDLGFBQWEsZ0JBQWtCLElBQUl3RyxNQUFNLEtBQ2xHckksS0FBSzhCLFFBQVFxaEIsTUFBTXliLFVBQVU1Z0MsS0FBS2dDLEtBQU80bEIsRUFBSyxJQUFNZ2hCLEVBQVU5bEMsTUFBTXdiLE9BQVNzcUIsRUFBVXRxQixPQUFTLEdBQU1zSixFQUFLLElBQU1naEIsRUFBVTlsQyxNQUFNeWIsUUFBVXFxQixFQUFVcnFCLFFBQVUsSUFHL0osTUFBTXpJLEVBQVM5VCxLQUFLVSxLQUFLbzlCLGlCQUFpQjhJLEdBSTFDLEdBSEk5eUIsSUFBUXV1QixFQUFhbk4sT0FBU3BoQixFQUFPaFQsTUFBTWk5QixXQUFhanFCLEVBQU9oVCxNQUFNazlCLE9BQ3pFaCtCLEtBQUs4QixRQUFRcWhCLE1BQU0wYixTQUFTN2dDLEtBQUtnQyxLQUFNLEtBQU1rbUMsRUFBUTNILEVBQU9FLEdBRXhEeitCLEtBQUtVLEtBQUtpNUIsaUJBQWlCaU4sRUFBVzVtQyxLQUFLVSxLQUFLdy9CLG1CQUNoRDBHLEVBQVVuOUIsV0FBVzAyQixhQUFhMUIsRUFBV21JLFFBQzFDLEdBQUk1bUMsS0FBS1UsS0FBSzAvQixXQUFXSixHQUFlLENBQzNDLE1BQU1LLEVBQVFyZ0MsS0FBS1UsS0FBS2k1QixpQkFBaUJpTixHQUFXLFNBQVVwVyxHQUFXLE9BQU9BLEVBQVEvbUIsYUFBZXUyQixLQUN2R0EsRUFBYUgsYUFBYXBCLEVBQVc0QixHQUNyQ3JnQyxLQUFLVSxLQUFLc3BCLFdBQVc0YyxHQUNyQjVtQyxLQUFLVSxLQUFLNC9CLGdCQUFnQkQsRUFBTyxNQUFNLFFBQ3BDLEdBQUlyZ0MsS0FBS1UsS0FBSzYvQixnQkFBZ0JQLEdBQWUsQ0FDaEQsTUFBTUssRUFBUXJnQyxLQUFLVSxLQUFLaTVCLGlCQUFpQmlOLEdBQVcsU0FBVXBXLEdBQVcsT0FBT0EsRUFBUS9tQixhQUFldTJCLEtBQ3ZHQSxFQUFlaGdDLEtBQUtVLEtBQUs4L0IsYUFBYVIsRUFBY0ssR0FDcERMLEVBQWF2MkIsV0FBV28yQixhQUFhcEIsRUFBV3VCLEdBQ2hEaGdDLEtBQUtVLEtBQUtzcEIsV0FBVzRjLEdBQ3JCNW1DLEtBQUtVLEtBQUs0L0IsZ0JBQWdCTixFQUFjLE1BQU0sR0FDVCxJQUFqQ0EsRUFBYXBnQixTQUFTdFosU0FBYzA1QixFQUFhNTdCLFVBQVlwRSxLQUFLVSxLQUFLKy9CLHFCQUFxQlQsRUFBYTU3QixpQkFFN0c0N0IsRUFBYXYyQixXQUFXMDJCLGFBQWExQixFQUFXdUIsR0FHOUMxYSxHQUFTMGEsRUFBYXYyQixXQUFXbzJCLGFBQWF2YSxFQUFTbVosRUFBVXZFLG9CQUN6RSxNQUFPOXNCLEdBQ0xrQyxRQUFRQyxLQUFLLHlEQUEwRG5DLEdBRzNFcE4sS0FBSzhCLFFBQVEyeUIsWUFBWXVLLFFBQVFoaEMsS0FBS2dDLEtBQU0sUUFBU2ttQyxFQUFRbG1DLEtBQUs4NUIsVUFBVWlMLGNBQWUsTUFBTSxHQUNqRy9rQyxLQUFLOEIsUUFBUXFoQixNQUFNdGdCLEtBQUs3RSxLQUFLZ0MsT0FNakNzNUIsYUFBYyxTQUFVOTNCLEVBQVNva0IsR0FDN0IsTUFBTXljLEVBQWVyaUMsS0FBS0ssUUFBUThpQixNQUNsQ2tmLEVBQWE3TSxTQUFXaDBCLEVBQ3hCNmdDLEVBQWE1TSxPQUFTejFCLEtBQUtVLEtBQUtpNUIsaUJBQWlCbjRCLEVBQVMsVUFDMUQ2Z0MsRUFBYTNNLFdBQWExMUIsS0FBS1UsS0FBS2k1QixpQkFBaUJuNEIsRUFBU3hCLEtBQUtVLEtBQUtrNUIsa0JBQ3hFeUksRUFBYW5OLE9BQVMxekIsRUFBUVYsTUFBTWs5QixPQUFTeDhCLEVBQVFLLGFBQWEsZUFBaUIsT0FDbkZMLEVBQVFWLE1BQU1rOUIsTUFBUSxHQUVsQnBZLElBQ0F5YyxFQUFheE0sV0FBYWpRLEVBQUsxaUIsRUFDL0JtL0IsRUFBYXZNLFdBQWFsUSxFQUFLeUwsRUFDL0JnUixFQUFhck0sV0FBYXBRLEVBQUs3bUIsRUFDL0JzakMsRUFBYXRNLFdBQWFuUSxFQUFLOW5CLEdBR25DLElBQ0lvRixFQUFHbXVCLEVBREhqRSxFQUFTaVYsRUFBYTdNLFNBQVMzekIsYUFBYSxjQUFnQndnQyxFQUFhN00sU0FBUzN6QixhQUFhLGVBRS9GdXJCLEdBQ0FBLEVBQVNBLEVBQU8va0IsTUFBTSxLQUN0Qm5GLEVBQUlrcUIsRUFBTyxHQUNYaUUsRUFBSWpFLEVBQU8sSUFDSnhILElBQ1AxaUIsRUFBSTBpQixFQUFLMWlCLEVBQ1RtdUIsRUFBSXpMLEVBQUt5TCxHQUdiZ1IsRUFBYWxNLFVBQVlqekIsR0FBSzFCLEVBQVFWLE1BQU13YixPQUFTOWEsRUFBUThhLE9BQVMsR0FDdEUrbEIsRUFBYWhNLFVBQVloRixHQUFLN3ZCLEVBQVFWLE1BQU15YixRQUFVL2EsRUFBUSthLFFBQVUsSUFNNUVzaEIsV0FBWSxTQUFVc0QsR0FDbEIsTUFBTWtCLEVBQWVyaUMsS0FBS0ssUUFBUThpQixNQUtsQyxHQUhJa2YsRUFBYWdCLGVBQWNoQixFQUFhaE4sV0FBYWdOLEVBQWEzZSxRQUFRbmUsWUFBYzg4QixFQUFhZ0IsYUFBYXZrQyxNQUFTdWpDLEVBQWE3TSxTQUFTL2YsTUFBUTRzQixFQUFhN00sU0FBU2x4QixjQUFjLFdBQWEsSUFBSW1SLEtBQU8sS0FDeE40c0IsRUFBYWpoQyxNQUFNa0QsY0FBYyw4Q0FBZ0QrOUIsRUFBYW5OLE9BQVMsT0FBU21OLEVBQWFqaEMsTUFBTWtELGNBQWMsc0RBQXNEMlksU0FBVSxFQUU5TW9sQixFQUFhN0wsVUFBVyxDQUN4QngyQixLQUFLOEIsUUFBUTB5QixTQUFTNE0sMkJBQTJCcGpDLEtBQUtnQyxLQUFNcWlDLEVBQWNyaUMsS0FBSzhCLFFBQVFxaEIsT0FFdkYsTUFBTXVjLEVBQUkyQyxFQUFhSSxZQUFjemlDLEtBQUs4QixRQUFRMHlCLFNBQVNnUyxpQkFBaUJ4b0MsS0FBS2dDLEtBQU1xaUMsR0FDakVyaUMsS0FBSzhCLFFBQVFxaEIsTUFBTThoQixvQkFBb0JqbkMsS0FBS2dDLEtBQU0wL0IsS0FDcEQyQyxFQUFhek0sT0FBTzkyQixNQUFRdWpDLEVBQWFyTCxnQkFBa0JoM0IsS0FBS1UsS0FBS3NnQyxVQUFVdEIsRUFBRyxHQUFLQSxHQUcxR3lCLEdBQVNuaEMsS0FBSzhCLFFBQVE1QixPQUFPOEIsS0FBS2hFLEtBQUtnQyxLQUFNLFNBQVMsSUFHL0RpbEMsb0JBQXFCLFNBQVVubUMsR0FDM0IsSUFBSWdvQyxHQUFnQixFQUNwQixNQUFNekUsRUFBZXJpQyxLQUFLSyxRQUFROGlCLE1BQzVCNGpCLEVBQWUxRSxFQUFhaUIsaUJBQWlCL2dDLFFBRS9DLEtBQUtaLEtBQUs3QyxJQUFVdWpDLEVBQWFyTCxnQkFBaUJsNEIsRUFBU2tCLEtBQUtVLEtBQUtzZ0MsVUFBVWxpQyxFQUFPLEdBQUssSUFBTyxLQUM1RmtCLEtBQUtVLEtBQUsrK0IsU0FBUzNnQyxJQUFtQixFQUFSQSxHQUFjLEtBQUdBLEVBQVEsSUFFakV1akMsRUFBYXpNLE9BQU9zUCxZQUFjLEdBQ2xDLElBQUssSUFBSXJuQyxFQUFJLEVBQUc0SixFQUFNcy9CLEVBQWF6Z0MsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDNUNrcEMsRUFBYWxwQyxHQUFHaUIsUUFBVUEsR0FDMUJnb0MsRUFBZ0JDLEVBQWFscEMsR0FBR21wQyxVQUFXLEVBQzNDM0UsRUFBYXpNLE9BQU9zUCxZQUFlcG1DLEVBQXNCLElBQVJBLEVBQWUsSUFBckIsSUFFMUNpb0MsRUFBYWxwQyxHQUFHbXBDLFVBQVcsRUFHcEMsT0FBT0YsR0FNWG5KLGNBQWUsV0FDWDM5QixLQUFLOEIsUUFBUTJ5QixZQUFZd0osVUFBVWpnQyxLQUFLZ0MsS0FBTSxRQUFTLENBQUMsU0FBVSxTQUFVQSxLQUFLODVCLFVBQVVpTCxjQUFlL2tDLEtBQUs4QixRQUFRcWhCLE1BQU13akIsbUJBQW1CdG5DLEtBQUtXLE9BQU8sSUFNaEtrK0IsY0FBZSxXQUNYbCtCLEtBQUs4QixRQUFRMnlCLFlBQVkwSixVQUFVbmdDLEtBQUtnQyxLQUFNLFFBQVNBLEtBQUs4NUIsVUFBVWlMLGdCQU0xRW5HLFVBQVcsU0FBVTE3QixFQUFHbXVCLEdBQ3BCLE1BQU1nUixFQUFlcmlDLEtBQUtLLFFBQVE4aUIsTUFLbEMsT0FIS2pnQixJQUFHQSxFQUFJbS9CLEVBQWExTSxPQUFPNzJCLE9BQVNrQixLQUFLdUMsUUFBUXFnQyxZQUNqRHZSLElBQUdBLEVBQUlnUixFQUFhek0sT0FBTzkyQixPQUFTa0IsS0FBS3VDLFFBQVFzZ0MsYUFFbERSLEVBQWFyTCxpQkFBbUIsS0FBS3IxQixLQUFLdUIsS0FBT0EsR0FDakRsRCxLQUFLOEIsUUFBUXFoQixNQUFNa2UsZUFBZXJqQyxLQUFLZ0MsS0FBT2tELEdBQUssT0FBVW11QixJQUFNLEtBQUsxdkIsS0FBSzBnQyxFQUFhSSxhQUFlSixFQUFhSSxZQUFjSixFQUFhTSxpQkFDMUksSUFDRXovQixHQUFXLFNBQU5BLEdBQW1CbXVCLEdBQVcsU0FBTkEsRUFHdENyeEIsS0FBSzhCLFFBQVFxaEIsTUFBTW1lLFFBQVF0akMsS0FBS2dDLEtBQU1rRCxFQUFJbXVCLEdBQUtnUixFQUFhSSxhQUFlSixFQUFhTSxlQUFnQixHQUZ4RzNpQyxLQUFLOEIsUUFBUXFoQixNQUFNb2UsWUFBWXZqQyxLQUFLZ0MsT0FLakMsSUFNWHE0QixXQUFZLFdBQ1JyNEIsS0FBSzhCLFFBQVEweUIsU0FBU2dOLG1CQUFtQnhqQyxLQUFLZ0MsS0FBTUEsS0FBS0ssUUFBUThpQixRQU1yRW1lLFFBQVMsU0FBVXArQixFQUFHbXVCLEVBQUdvUSxFQUFvQkMsR0FDekMsTUFBTVcsRUFBZXJpQyxLQUFLSyxRQUFROGlCLE1BQzVCd2UsRUFBUSxZQUFZaGdDLEtBQUsrL0IsR0FDekJ1RixFQUFRLFlBQVl0bEMsS0FBSysvQixHQUUxQnVGLElBQU8vakMsRUFBSWxELEtBQUtVLEtBQUtzZ0MsVUFBVTk5QixFQUFHLElBQ2xDeStCLElBQU90USxFQUFJcnhCLEtBQUtVLEtBQUsrK0IsU0FBU3BPLEdBQUtBLEVBQUlnUixFQUFhdk4sU0FBWXpELEdBQUksSUFDekVudUIsRUFBSUEsRUFBSUEsRUFBSW0vQixFQUFhdk4sU0FBVyxHQUUvQm1TLElBQU81RSxFQUFhN00sU0FBUzEwQixNQUFNd2IsTUFBUXBaLElBQzNDeStCLEdBQVNVLEVBQWE1TSxTQUFRNE0sRUFBYTVNLE9BQU8zMEIsTUFBTW9tQyxjQUFnQjdFLEVBQWE1TSxPQUFPMzBCLE1BQU15YixPQUFTOFUsR0FFM0c0VixHQUFVLEtBQUt0bEMsS0FBS3VCLEtBQ2xCbS9CLEVBQWE1TSxTQUFRNE0sRUFBYTVNLE9BQU8zMEIsTUFBTXdiLE1BQVFwWixHQUN2RG0vQixFQUFhM00sYUFBWTJNLEVBQWEzTSxXQUFXNTBCLE1BQU13YixNQUFRLEtBR2pFcWxCLEdBQVUsS0FBS2hnQyxLQUFLMHZCLEdBR3JCZ1IsRUFBYTdNLFNBQVMxMEIsTUFBTXliLE9BQVMsR0FGckM4bEIsRUFBYTdNLFNBQVMxMEIsTUFBTXliLE9BQVM4VSxFQUtwQ29RLEdBQW9CWSxFQUFhN00sU0FBU3RELGdCQUFnQixtQkFHL0RseUIsS0FBSzhCLFFBQVEweUIsU0FBU3FOLHdCQUF3QjdqQyxLQUFLZ0MsS0FBTXFpQyxJQU03RGQsWUFBYSxXQUNUdmhDLEtBQUs4QixRQUFRcWhCLE1BQU1rZSxlQUFlcmpDLEtBQUtnQyxLQUFNLElBQUtBLEtBQUtLLFFBQVE4aUIsTUFBTXdmLGdCQU16RVgsY0FBZSxTQUFVbUYsR0FDckIsTUFBTTlFLEVBQWVyaUMsS0FBS0ssUUFBUThpQixNQUNsQ2tmLEVBQWE3TSxTQUFTdEQsZ0JBQWdCLG1CQUV0Q2x5QixLQUFLOEIsUUFBUTB5QixTQUFTc00sZUFBZTlpQyxLQUFLZ0MsS0FBTXFpQyxFQUFhN00sVUFDN0R4MUIsS0FBSzhCLFFBQVFxaEIsTUFBTXllLGtCQUFrQjVqQyxLQUFLZ0MsTUFFMUMsTUFBTWlpQyxJQUFla0YsRUFBVzlFLEVBQWE3TSxTQUFTM3pCLGFBQWEsYUFBZSxLQUFPd2dDLEVBQWE3TSxTQUFTM3pCLGFBQWEsZ0JBQWtCLElBQUl3RyxNQUFNLEtBRXhKLEdBQUk0NUIsRUFBWSxDQUNaLE1BQU0vK0IsRUFBSSsrQixFQUFXLEdBQ2Y1USxFQUFJNFEsRUFBVyxHQUVqQkksRUFBYXJMLGlCQUFvQixLQUFLcjFCLEtBQUt1QixLQUFPLEtBQUt2QixLQUFLMHZCLEtBQU8sS0FBSzF2QixLQUFLMHZCLElBQzdFcnhCLEtBQUs4QixRQUFRcWhCLE1BQU1rZSxlQUFlcmpDLEtBQUtnQyxLQUFNa0QsRUFBR211QixHQUVoRHJ4QixLQUFLOEIsUUFBUXFoQixNQUFNbWUsUUFBUXRqQyxLQUFLZ0MsS0FBTWtELEVBQUdtdUIsR0FJN0NyeEIsS0FBSzhCLFFBQVEweUIsU0FBU3FOLHdCQUF3QjdqQyxLQUFLZ0MsS0FBTXFpQyxLQU9qRWhCLGVBQWdCLFNBQVVuK0IsRUFBR211QixHQUN6QixNQUFNZ1IsRUFBZXJpQyxLQUFLSyxRQUFROGlCLE1BQ2xDa08sR0FBTUEsR0FBTSxLQUFLMXZCLEtBQUswdkIsSUFBT3J4QixLQUFLVSxLQUFLc2dDLFVBQVUzUCxFQUFHLEdBQTJDcnhCLEtBQUtVLEtBQUsrK0IsU0FBU3BPLEdBQUtBLEVBQUlnUixFQUFhdk4sU0FBWXpELEdBQUtnUixFQUFhTSxjQUE3RzNpQyxLQUFLVSxLQUFLKytCLFNBQVNwTyxHQUFLQSxFQUFJLElBQU1BLEVBRXhGZ1IsRUFBYTNNLGFBQ1oyTSxFQUFhM00sV0FBVzUwQixNQUFNd2IsTUFBUXRjLEtBQUtVLEtBQUsrK0IsU0FBU3Y4QixHQUFLQSxFQUFJLElBQU1BLEVBQ3hFbS9CLEVBQWEzTSxXQUFXNTBCLE1BQU15YixPQUFTLElBRXhDOGxCLEVBQWE1TSxTQUNaNE0sRUFBYTVNLE9BQU8zMEIsTUFBTXdiLE1BQVEsT0FDbEMrbEIsRUFBYTVNLE9BQU8zMEIsTUFBTXliLE9BQVM4VSxFQUNuQ2dSLEVBQWE1TSxPQUFPMzBCLE1BQU1vbUMsY0FBZ0I3VixHQUU5Q2dSLEVBQWE3TSxTQUFTMTBCLE1BQU13YixNQUFRLE9BQ3BDK2xCLEVBQWE3TSxTQUFTMTBCLE1BQU15YixPQUFTLE9BQ3JDOGxCLEVBQWE3TSxTQUFTMTBCLE1BQU1paEMsU0FBVyxHQUVYLFdBQXhCTSxFQUFhbk4sUUFBcUJsMUIsS0FBSzhCLFFBQVFxaEIsTUFBTTBiLFNBQVM3Z0MsS0FBS2dDLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDL0ZxaUMsRUFBYTdNLFNBQVNuZixhQUFhLGtCQUFtQm5ULEVBQUksSUFBTW11QixHQUdoRXJ4QixLQUFLOEIsUUFBUTB5QixTQUFTcU4sd0JBQXdCN2pDLEtBQUtnQyxLQUFNcWlDLElBTTdEVCxrQkFBbUIsV0FDZixNQUFNUyxFQUFlcmlDLEtBQUtLLFFBQVE4aUIsTUFFL0JrZixFQUFhNU0sU0FDWjRNLEVBQWE1TSxPQUFPMzBCLE1BQU13YixNQUFRLEdBQ2xDK2xCLEVBQWE1TSxPQUFPMzBCLE1BQU15YixPQUFTLEdBQ25DOGxCLEVBQWE1TSxPQUFPMzBCLE1BQU1vbUMsY0FBZ0IsSUFFM0M3RSxFQUFhM00sYUFDWjJNLEVBQWEzTSxXQUFXNTBCLE1BQU13YixNQUFRLEdBQ3RDK2xCLEVBQWEzTSxXQUFXNTBCLE1BQU15YixPQUFTLElBRTNDdmMsS0FBS1UsS0FBS3dJLFlBQVltNUIsRUFBYTNNLFdBQVkxMUIsS0FBS0ssUUFBUThpQixNQUFNZ1MsbUJBQ2xFbjFCLEtBQUtVLEtBQUt5SSxTQUFTazVCLEVBQWEzTSxXQUFZLGVBQWlCMk0sRUFBYW5OLFFBRTlDLFdBQXhCbU4sRUFBYW5OLFFBQXFCbDFCLEtBQUs4QixRQUFRcWhCLE1BQU0wYixTQUFTN2dDLEtBQUtnQyxLQUFNLEtBQU0sS0FBTSxLQUFNLE9BTW5HNitCLFNBQVUsU0FBVXhjLEVBQU83Z0IsRUFBUys4QixFQUFPRSxHQUN2QyxNQUFNNEQsRUFBZXJpQyxLQUFLSyxRQUFROGlCLE1BRTdCZCxJQUFPQSxFQUFRZ2dCLEVBQWFuTixRQUM1QjF6QixJQUFTQSxFQUFVNmdDLEVBQWE3TSxVQUNoQytJLElBQU9BLEVBQVE4RCxFQUFhNU0sUUFDNUJnSixJQUFXQSxFQUFZNEQsRUFBYTNNLFlBRXJDLEtBQUsvekIsS0FBS0gsRUFBUVYsTUFBTXdiLFFBQW9CLFdBQVYrRixHQUMvQm9jLElBQVdBLEVBQVUzOUIsTUFBTXNoQyxTQUFXLFFBQ3RDN0QsSUFDQ0EsRUFBTXo5QixNQUFNd2IsTUFBUW1pQixFQUFVMzlCLE1BQU13YixNQUNwQ2lpQixFQUFNejlCLE1BQU15YixPQUFTZ2lCLEVBQU16OUIsTUFBTXliLE9BQ2pDZ2lCLEVBQU16OUIsTUFBTW9tQyxjQUFpQixLQUFLdmxDLEtBQUs0OEIsRUFBTXo5QixNQUFNeWIsUUFBK0J2YyxLQUFLVSxLQUFLc2dDLFVBQVdoaEMsS0FBS1UsS0FBS3NnQyxVQUFVekMsRUFBTXo5QixNQUFNeWIsT0FBUSxHQUFLLElBQU92YyxLQUFLVSxLQUFLc2dDLFVBQVV6QyxFQUFNejlCLE1BQU13YixNQUFPLEdBQUksR0FBSyxJQUE5SWlpQixFQUFNejlCLE1BQU15YixVQUcxRWtpQixJQUFXQSxFQUFVMzlCLE1BQU1zaEMsU0FBVyxJQUN0QzdELElBQ0NBLEVBQU16OUIsTUFBTXdiLE1BQVF0YyxLQUFLSyxRQUFRbTBCLFNBQVNxTSxnQkFBbUJyL0IsRUFBUVYsTUFBTXliLFFBQVUvYSxFQUFRNkYsYUFBaUI3RixFQUFRVixNQUFNd2IsT0FBUyxPQUNySWlpQixFQUFNejlCLE1BQU1vbUMsY0FBZ0IzSSxFQUFNejlCLE1BQU15YixTQUkzQ3ZjLEtBQUtVLEtBQUs0RSxTQUFTbTVCLEVBQVcsZUFBaUJwYyxLQUNoRHJpQixLQUFLVSxLQUFLd0ksWUFBWXUxQixFQUFXNEQsRUFBYWxOLG1CQUM5Q24xQixLQUFLVSxLQUFLeUksU0FBU3MxQixFQUFXLGVBQWlCcGMsSUFHbkQ3Z0IsRUFBUTZVLGFBQWEsYUFBY2dNLElBTXZDeGYsS0FBTSxXQUNGLE1BQU13L0IsRUFBZXJpQyxLQUFLSyxRQUFROGlCLE1BQzlCa2YsRUFBYWUsaUJBQWdCZixFQUFhZSxlQUFldGtDLE1BQVEsSUFDakV1akMsRUFBYWdCLGVBQWNoQixFQUFhaE4sV0FBYWdOLEVBQWEzZSxRQUFRbmUsWUFBYzg4QixFQUFhZ0IsYUFBYXZrQyxNQUFRLElBQzFIdWpDLEVBQWFlLGdCQUFrQmYsRUFBYWdCLGVBQzVDaEIsRUFBYWdCLGFBQWFuUixnQkFBZ0IsWUFDMUNtUSxFQUFhM2UsUUFBUTVpQixNQUFNazRCLGVBQWlCLElBR2hEcUosRUFBYWxNLFVBQVluMkIsS0FBS3VDLFFBQVFxZ0MsV0FDdENQLEVBQWFoTSxVQUFZcjJCLEtBQUt1QyxRQUFRc2dDLFlBQ3RDUixFQUFhamhDLE1BQU1rRCxjQUFjLHFEQUFxRDJZLFNBQVUsRUFFNUZvbEIsRUFBYTdMLFlBQ2I2TCxFQUFhMU0sT0FBTzcyQixNQUFRa0IsS0FBS3VDLFFBQVFxZ0MsYUFBZVAsRUFBYXBNLGNBQWdCLEdBQUtqMkIsS0FBS3VDLFFBQVFxZ0MsV0FDdkdQLEVBQWF6TSxPQUFPOTJCLE1BQVFrQixLQUFLdUMsUUFBUXNnQyxjQUFnQlIsRUFBYW5NLGNBQWdCLEdBQUtsMkIsS0FBS3VDLFFBQVFzZ0MsWUFDeEdSLEVBQWE1YyxXQUFXeEksU0FBVSxFQUNsQ29sQixFQUFhNWMsV0FBV3VmLFVBQVcsRUFDbkNobEMsS0FBSzhCLFFBQVFxaEIsTUFBTThoQixvQkFBb0JqbkMsS0FBS2dDLEtBQU1xaUMsRUFBYU0sa0JDNzhCNUQsR0FDWHZrQyxLQUFNLFFBQ04yQyxRQUFTLFNBQ1RaLElBQUssU0FBVUMsR0FDWEEsRUFBSytwQixVQUFVLENBQUNqcUIsSUFBUXEwQixJQUFXRSxNQUVuQyxNQUFNcDBCLEVBQVVELEVBQUtDLFFBQ2YrbUMsRUFBZS9tQyxFQUFRK2lCLE1BQVEsQ0FDakN1UixVQUFXLEdBQ1hDLFdBQVksRUFDWkMsa0JBQW1CLEVBQ25CbnlCLGFBQWMsS0FDZDJrQyxhQUFjLEtBQ2RsUixVQUFXLzFCLEVBQUttQyxRQUFRK2tDLFdBQ3hCalIsVUFBV2oyQixFQUFLbUMsUUFBUWdsQyxZQUN4QmxTLFdBQVksR0FFWkcsU0FBVSxLQUNWQyxPQUFRLEtBQ1JDLFdBQVksTUFJaEIsSUFBSThSLEVBQWV4bkMsS0FBSzB5QixVQUFVdHlCLEdBQ2xDZ25DLEVBQWFobUMsTUFBUW9tQyxFQUNyQkosRUFBYUssZUFBaUJELEVBQWFsakMsY0FBYyxvQkFDekQ4aUMsRUFBYU0sYUFBZUYsRUFBYWxqQyxjQUFjLGlCQUN2RDhpQyxFQUFhMWtDLGFBQWUwa0MsRUFBYUssZ0JBQWtCTCxFQUFhTSxhQUN4RU4sRUFBYTFqQixRQUFVOGpCLEVBQWFsakMsY0FBYyxvQkFHbEQsSUFBSXFqQyxFQUFtQjNuQyxLQUFLNG5DLGNBQWN4bkMsR0FDMUNnbkMsRUFBYXRoQixXQUFhNmhCLEVBRzFCSCxFQUFhbGpDLGNBQWMsUUFBUWpELGlCQUFpQixTQUFVckIsS0FBS3lxQixPQUFPcHJCLEtBQUtlLElBQzNFZ25DLEVBQWFLLGdCQUFnQkQsRUFBYWxqQyxjQUFjLGdDQUFnQ2pELGlCQUFpQixRQUFTckIsS0FBSzgzQixxQkFBcUJ6NEIsS0FBSytuQyxFQUFhSyxlQUFnQkwsRUFBYU0sYUFBY04sRUFBYTFqQixVQUN0TjBqQixFQUFhSyxnQkFBa0JMLEVBQWFNLGNBQWNOLEVBQWFLLGVBQWVwbUMsaUJBQWlCLFNBQVVyQixLQUFLZzRCLGlCQUFpQjM0QixLQUFLK25DLElBQ2hKTyxFQUFpQnRtQyxpQkFBaUIsUUFBU3JCLEtBQUs2bkMsbUJBQW1CeG9DLEtBQUtlLElBQ3BFZ25DLEVBQWFNLGNBQWNOLEVBQWFNLGFBQWFybUMsaUJBQWlCLFFBQVNyQixLQUFLKzNCLGVBQWUxNEIsS0FBSytuQyxFQUFhMWpCLFFBQVMwakIsRUFBY2huQyxFQUFLbUMsUUFBUWl2QixlQUc3Sm54QixFQUFRSCxPQUFPa0IsTUFBTUgsWUFBWXVtQyxHQUdqQ25uQyxFQUFRbUIsUUFBUUMsU0FBU1IsWUFBWTBtQyxHQUdyQ0gsRUFBZSxLQUFNRyxFQUFtQixNQUk1Q2pWLFVBQVcsU0FBVXR5QixHQUNqQixNQUFNc08sRUFBU3RPLEVBQUttQyxRQUNkcUMsRUFBT3hFLEVBQUt3RSxLQUNaMUUsRUFBU0UsRUFBS00sS0FBS0MsY0FBYyxPQUV2Q1QsRUFBT1UsVUFBWSxvQkFDbkJWLEVBQU9ZLE1BQU1DLFFBQVUsT0FDdkIsSUFBSWlhLEVBQU8sb0tBR3VGcFcsRUFBS0MsVUFBVTlDLE1BQVEsaUJBQW1CNkMsRUFBS0MsVUFBVTlDLE1BQVEsS0FDbkozQixFQUFLMEUsTUFBTUMsT0FKaEIseUNBTW1DSCxFQUFLQyxVQUFVdWdCLFNBQVM1ZixNQU4zRCw0Q0F1Q1gsT0E3QllrSixFQUFPbzVCLGlCQUNQOXNCLEdBQVEsc0NBRVlwVyxFQUFLQyxVQUFVdWdCLFNBQVNGLEtBRnBDLDhHQUkwRXhXLEVBQU9xNUIsWUFBYyxLQUFPcjVCLEVBQU9zNUIsa0JBQW9CLHVCQUF5QixJQUoxSix1SEFLMkhwakMsRUFBS2toQixXQUFXRyxPQUFTLGlCQUFtQnJoQixFQUFLa2hCLFdBQVdHLE9BQVMsS0FBTzdsQixFQUFLMEUsTUFBTUMsT0FMbE4seUJBVVIySixFQUFPdTVCLGdCQUNQanRCLEdBQVEsc0NBRVlwVyxFQUFLQyxVQUFVdWdCLFNBQVMxZixJQUZwQyw2R0FRWnNWLEdBQVEsMkZBR3FEcFcsRUFBS0MsVUFBVTBnQixhQUFlLGlCQUFtQjNnQixFQUFLQyxVQUFVMGdCLGFBQWUsV0FBYTNnQixFQUFLQyxVQUFVMGdCLGFBSGhLLGdDQU9oQnJsQixFQUFPa0UsVUFBWTRXLEVBRVo5YSxHQUlYMG5DLGNBQWUsU0FBVXhuQyxHQUNyQixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUNaRSxFQUFRMUUsRUFBSzBFLE1BQ2JpdUIsRUFBVzN5QixFQUFLTSxLQUFLQyxjQUFjLE9Ba0J6QyxPQWhCQW95QixFQUFTbnlCLFVBQVksbUNBQ3JCbXlCLEVBQVMzdUIsVUFBWSw0S0FLTFUsRUFBTWloQixLQUNOLGdFQUFrRW5oQixFQUFLa2hCLFdBQVdDLEtBTjdFLHVHQVNMamhCLEVBQU1rdUIsT0FDTixnRUFBa0VwdUIsRUFBS2toQixXQUFXRyxPQVY3RSxzQ0FlZDhNLEdBSVhpRixpQkFBa0IsV0FDVGg0QixLQUFLeW5DLGVBQWUzb0MsT0FJckJrQixLQUFLMG5DLGFBQWFyeEIsYUFBYSxZQUFZLEdBQzNDclcsS0FBSzBqQixRQUFRNWlCLE1BQU1rNEIsZUFBaUIsaUJBSnBDaDVCLEtBQUswbkMsYUFBYXhWLGdCQUFnQixZQUNsQ2x5QixLQUFLMGpCLFFBQVE1aUIsTUFBTWs0QixlQUFpQixLQVE1Q2xCLHFCQUFzQixTQUFVaEssRUFBVXBLLEdBQ3RDMWpCLEtBQUtsQixNQUFRLEdBQ1RndkIsSUFDQUEsRUFBU29FLGdCQUFnQixZQUN6QnhPLEVBQVE1aUIsTUFBTWs0QixlQUFpQixLQUt2Q2tQLGdCQUFpQixXQUNiLE1BQU1DLEVBQVNub0MsS0FBS1UsS0FBS0MsY0FBYyxTQUN2Q1gsS0FBSzhCLFFBQVFzaEIsTUFBTTZnQixhQUFham1DLEtBQUtnQyxLQUFNbW9DLEdBRTNDLE1BQU1qbEMsRUFBSWxELEtBQUtLLFFBQVEraUIsTUFBTStTLFVBQ3ZCOUUsRUFBSXJ4QixLQUFLSyxRQUFRK2lCLE1BQU1pVCxVQUk3QixPQUhBOFIsRUFBTzl4QixhQUFhLGNBQWVuVCxFQUFJLElBQU1tdUIsR0FDN0M4VyxFQUFPcm5DLE1BQU1zbkMsU0FBV2xsQyxFQUFLLFNBQVdBLEVBQUksS0FBUSxLQUFPbXVCLEVBQUssVUFBWUEsRUFBSSxJQUFPLElBRWhGOFcsR0FHWGxFLGFBQWMsU0FBVXppQyxHQUNwQkEsRUFBUTZVLGFBQWEsWUFBWSxHQUVqQyxNQUFNNnRCLEVBQVFsa0MsS0FBS3VDLFFBQVE4bEMsY0FDM0IsR0FBS25FLEVBRUwsSUFBSyxJQUFJOWtDLEtBQU84a0MsRUFDUGxrQyxLQUFLVSxLQUFLMGpDLE9BQU9GLEVBQU85a0MsSUFDN0JvQyxFQUFRNlUsYUFBYWpYLEVBQUs4a0MsRUFBTTlrQyxLQUl4QzI0QixlQUFnQixTQUFVMTNCLEVBQVNxdEIsRUFBVWhzQixHQUN6QyxNQUFNNUMsRUFBUTRDLEVBQUVFLE9BQU85QyxNQUFNMEosT0FDN0JuSSxFQUFRZzFCLFdBQWFyMUIsS0FBS3VGLFlBQWV6RyxFQUFjNHVCLElBQXNDLElBQTFCNXVCLEVBQU00SixRQUFRLFFBQXdDLElBQXZCNUosRUFBTTRKLFFBQVEsS0FBY2dsQixFQUFXNXVCLEdBQWtDLElBQTFCQSxFQUFNNEosUUFBUSxPQUFnQixJQUFNNUosRUFBUUEsRUFBNUksSUFNckRzNkIsU0FBVSxDQUFDLFNBT1hDLE9BQVEsU0FBVTczQixHQUNkeEIsS0FBSzhCLFFBQVFzaEIsTUFBTWtXLGFBQWF0N0IsS0FBS2dDLEtBQU13QixJQU0vQ2c0QixRQUFTLFNBQVVoNEIsR0FDZkEsRUFBVUEsR0FBV3hCLEtBQUtLLFFBQVEraUIsTUFBTW9TLFNBQ3hDLE1BQU1pSixFQUFZeitCLEtBQUtVLEtBQUtpNUIsaUJBQWlCbjRCLEVBQVN4QixLQUFLVSxLQUFLNG5DLGNBQWdCOW1DLEVBQzFFcTRCLEVBQWlELEVBQXJDcjRCLEVBQVFLLGFBQWEsY0FFdkMsR0FBa0QsbUJBQXZDN0IsS0FBSzg1QixVQUFVeU8sc0JBQW1ILElBQTVFdm9DLEtBQUs4NUIsVUFBVXlPLG9CQUFvQi9tQyxFQUFTaTlCLEVBQVc1RSxFQUFXNzVCLE1BQWtCLE9BRXJKLE1BQU1nNkIsRUFBV3lFLEVBQVV4RSx3QkFBMEJ3RSxFQUFVdkUsbUJBQ3pEQyxFQUFXc0UsRUFBVWgxQixXQUMzQnpKLEtBQUtVLEtBQUtzcEIsV0FBV3lVLEdBQ3JCeitCLEtBQUs4QixRQUFRc2hCLE1BQU12Z0IsS0FBSzdFLEtBQUtnQyxNQUM3QkEsS0FBSzh6QixpQkFFRHFHLElBQWFuNkIsS0FBS0ssUUFBUW1CLFFBQVEwdkIsU0FBU2x4QixLQUFLVSxLQUFLMDVCLHFCQUFxQkQsR0FBVSxTQUFVM0osR0FBVyxPQUFxQyxJQUE5QkEsRUFBUS9aLFdBQVduUSxTQUFpQixNQUd4SnRHLEtBQUtxNkIsVUFBVUwsR0FHZmg2QixLQUFLOEIsUUFBUTJ5QixZQUFZNkYsV0FBV3Q4QixLQUFLZ0MsS0FBTSxRQUFTNjVCLEVBQVc3NUIsS0FBSzg1QixVQUFVME8sZUFHbEZ4b0MsS0FBSzB6QixRQUFRL3FCLE1BQUssSUFNdEJnMUIsY0FBZSxXQUNYMzlCLEtBQUs4QixRQUFRMnlCLFlBQVl3SixVQUFVamdDLEtBQUtnQyxLQUFNLFFBQVMsQ0FBQyxTQUFVQSxLQUFLODVCLFVBQVUwTyxjQUFleG9DLEtBQUs4QixRQUFRc2hCLE1BQU1xbEIsWUFBWXBwQyxLQUFLVyxPQUFPLElBTS9JaytCLGNBQWUsV0FDWGwrQixLQUFLOEIsUUFBUTJ5QixZQUFZMEosVUFBVW5nQyxLQUFLZ0MsS0FBTSxRQUFTQSxLQUFLODVCLFVBQVUwTyxnQkFNMUU3bEMsR0FBSSxTQUFVVixHQUNWLE1BQU1tbEMsRUFBZXBuQyxLQUFLSyxRQUFRK2lCLE1BRTdCbmhCLEVBR01tbEMsRUFBYTVSLFVBQ3BCeDFCLEtBQUtLLFFBQVFILE9BQU9LLGFBQWMsRUFDbEM2bUMsRUFBYS9SLFdBQWErUixFQUFhMWpCLFFBQVFuZSxZQUFjNmhDLEVBQWFNLGFBQWE1b0MsTUFBUXNvQyxFQUFhNVIsU0FBUy9mLElBQ2pIMnhCLEVBQWFLLGdCQUFrQnpuQyxLQUFLdUMsUUFBUXlsQyxtQkFBbUJaLEVBQWFLLGVBQWV2VixnQkFBZ0IsYUFFM0drVixFQUFhSyxnQkFBa0J6bkMsS0FBS3VDLFFBQVF5bEMsbUJBQW1CWixFQUFhSyxlQUFldlYsZ0JBQWdCLGFBUC9HbHlCLEtBQUs4QixRQUFRc2hCLE1BQU12Z0IsS0FBSzdFLEtBQUtnQyxNQUN6Qm9uQyxFQUFhSyxnQkFBa0J6bkMsS0FBS3VDLFFBQVF5bEMsbUJBQW1CWixFQUFhSyxlQUFlcHhCLGFBQWEsV0FBWSxjQWFoSXJVLEtBQU0sV0FDRmhDLEtBQUs4QixRQUFRNUIsT0FBTzhCLEtBQUtoRSxLQUFLZ0MsS0FBTSxRQUFTLFVBQVlBLEtBQUtpekIsd0JBR2xFeEksT0FBUSxTQUFVL29CLEdBQ2QsTUFBTTBsQyxFQUFlcG5DLEtBQUtLLFFBQVEraUIsTUFFbEMxaEIsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUVGLElBQ1FvaUMsRUFBYUssZ0JBQWtCTCxFQUFhSyxlQUFlM00sTUFBTXgwQixPQUFTLEdBQzFFdEcsS0FBS2t6QixjQUNMbHpCLEtBQUs4QixRQUFRc2hCLE1BQU0yWCxhQUFhLzhCLEtBQUtnQyxLQUFNb25DLEVBQWFLLGVBQWUzTSxRQUNoRXNNLEVBQWFNLGNBQWdCTixFQUFhL1IsV0FBVy91QixPQUFTLElBQ3JFdEcsS0FBS2t6QixjQUNMbHpCLEtBQUs4QixRQUFRc2hCLE1BQU1zbEIsU0FBUzFxQyxLQUFLZ0MsS0FBTW9uQyxFQUFhL1IsYUFFMUQsTUFBT2pvQixHQUVMLE1BREFwTixLQUFLeXpCLGVBQ0N0d0IsTUFBTSwwQ0FBNENpSyxFQUFNbEcsUUFBVSxLQUMxRSxRQUNFbEgsS0FBSzhCLFFBQVE1QixPQUFPNkIsTUFBTS9ELEtBQUtnQyxNQUduQyxPQUFPLEdBR1grNkIsYUFBYyxTQUFVRSxHQUNwQixHQUF3QixJQUFwQkEsRUFBUzMwQixPQUFjLE9BRTNCLElBQUk0MEIsRUFBVyxFQUNYSixFQUFRLEdBQ1osSUFBSyxJQUFJajlCLEVBQUksRUFBRzRKLEVBQU13ekIsRUFBUzMwQixPQUFRekksRUFBSTRKLEVBQUs1SixJQUN4QyxTQUFTOEQsS0FBS3M1QixFQUFTcDlCLEdBQUdtTSxRQUMxQjh3QixFQUFNbnlCLEtBQUtzeUIsRUFBU3A5QixJQUNwQnE5QixHQUFZRCxFQUFTcDlCLEdBQUcrbkIsTUFJaEMsTUFBTXVWLEVBQVluN0IsS0FBS3VDLFFBQVFvbUMscUJBQy9CLEdBQUl4TixFQUFZLEVBQUcsQ0FDZixJQUFJRSxFQUFXLEVBQ2YsTUFBTXVOLEVBQWE1b0MsS0FBS0ssUUFBUStpQixNQUFNdVIsVUFDdEMsSUFBSyxJQUFJOTJCLEVBQUksRUFBRzRKLEVBQU1taEMsRUFBV3RpQyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUM5Q3c5QixHQUFpQyxFQUFyQnVOLEVBQVcvcUMsR0FBRytuQixLQUc5QixHQUFLc1YsRUFBV0csRUFBWUYsRUFBVyxDQUNuQ243QixLQUFLeXpCLGVBQ0wsTUFBTW5zQixFQUFNLGlFQUFvRTZ6QixFQUFVLElBQVEsS0FJbEcsYUFIaUQsbUJBQXRDbjdCLEtBQUs4NUIsVUFBVStPLG9CQUFxQzdvQyxLQUFLODVCLFVBQVUrTyxtQkFBbUJ2aEMsRUFBSyxDQUFFLFVBQWE2ekIsRUFBVyxZQUFlRSxFQUFVLFdBQWNILEdBQVlsN0IsUUFDL0tBLEtBQUs4NUIsVUFBVTBCLFdBQVdsMEIsS0FNdEMsTUFBTTgvQixFQUFlcG5DLEtBQUtLLFFBQVEraUIsTUFDbENna0IsRUFBYXZTLGtCQUFvQmlHLEVBQU14MEIsT0FFdkMsTUFBTW0xQixFQUFPLENBQ1RHLFNBQVU1N0IsS0FBS0ssUUFBUUgsT0FBT0ssWUFDOUJpQixRQUFTNGxDLEVBQWE1UixVQUcxQixHQUFrRCxtQkFBdkN4MUIsS0FBSzg1QixVQUFVZ1Asb0JBQW9DLENBQzFELE1BQU0vaEMsRUFBUy9HLEtBQUs4NUIsVUFBVWdQLG9CQUFvQmhPLEVBQU9XLEVBQU16N0IsS0FBTSxTQUFVd2dCLEdBQ3ZFQSxHQUFReGdCLEtBQUtvRyxHQUFHd0osTUFBTXRDLFFBQVFrVCxFQUFLelosUUFDbkMvRyxLQUFLOEIsUUFBUXNoQixNQUFNMFksU0FBUzk5QixLQUFLZ0MsS0FBTXk3QixFQUFNamIsR0FFN0N4Z0IsS0FBSzhCLFFBQVFzaEIsTUFBTTJZLE9BQU8vOUIsS0FBS2dDLEtBQU15N0IsRUFBTWpiLElBRWpEbmhCLEtBQUtXLE9BRVAsUUFBc0IsSUFBWCtHLEVBQXdCLE9BQ25DLElBQUtBLEVBRUQsWUFEQS9HLEtBQUt5ekIsZUFHYSxpQkFBWDFzQixHQUF1QkEsRUFBT1QsT0FBUyxJQUFHdzBCLEVBQVEvekIsR0FHakUvRyxLQUFLOEIsUUFBUXNoQixNQUFNMlksT0FBTy85QixLQUFLZ0MsS0FBTXk3QixFQUFNWCxJQUcvQzF0QixNQUFPLFNBQVVsRyxFQUFTODBCLEdBRXRCLEdBREFoOEIsS0FBS3l6QixlQUM0QyxtQkFBdEN6ekIsS0FBSzg1QixVQUFVK08sb0JBQXFDN29DLEtBQUs4NUIsVUFBVStPLG1CQUFtQjNoQyxFQUFTODBCLEVBQVVoOEIsTUFFaEgsTUFEQUEsS0FBSzg1QixVQUFVMEIsV0FBV3QwQixHQUNwQi9ELE1BQU0sZ0RBQWtEK0QsSUFJdEU2MEIsT0FBUSxTQUFVTixFQUFNWCxHQUNwQixJQUFLQSxFQUVELFlBREE5NkIsS0FBS3l6QixlQUdULEdBQXFCLGlCQUFWcUgsRUFFUCxZQURBOTZCLEtBQUs4QixRQUFRc2hCLE1BQU1oVyxNQUFNcFAsS0FBS2dDLEtBQU04NkIsRUFBTyxNQUkvQyxNQUFNaU8sRUFBaUIvb0MsS0FBS3VDLFFBQVF3bUMsZUFDOUI3TSxFQUFXbDhCLEtBQUtLLFFBQVFILE9BQU9LLFlBQWMsRUFBSXU2QixFQUFNeDBCLE9BR3ZENjFCLEVBQVcsSUFBSUMsU0FDckIsSUFBSyxJQUFJditCLEVBQUksRUFBR0EsRUFBSXErQixFQUFVcitCLElBQzFCcytCLEVBQVNqakIsT0FBTyxRQUFVcmIsRUFBR2k5QixFQUFNajlCLElBSXZDbUMsS0FBSzhCLFFBQVEyeUIsWUFBWXNILE9BQU8vOUIsS0FBS2dDLEtBQU0rb0MsRUFBZ0Ivb0MsS0FBS3VDLFFBQVF5bUMsa0JBQW1CN00sRUFBVW44QixLQUFLOEIsUUFBUXNoQixNQUFNNmxCLGdCQUFnQjVwQyxLQUFLVyxLQUFNeTdCLEdBQU96N0IsS0FBSzg1QixVQUFVK08scUJBRzdLSSxnQkFBaUIsU0FBVXhOLEVBQU16MUIsR0FDN0IsR0FBaUQsbUJBQXRDaEcsS0FBSzg1QixVQUFVb1AsbUJBQ3RCbHBDLEtBQUs4NUIsVUFBVW9QLG1CQUFtQmxqQyxFQUFTeTFCLEVBQU16N0IsVUFDOUMsQ0FDSCxNQUFNZzhCLEVBQVdwMUIsS0FBS0MsTUFBTWIsRUFBUWMsY0FDaENrMUIsRUFBU3owQixhQUNUdkgsS0FBSzhCLFFBQVFzaEIsTUFBTWhXLE1BQU1wUCxLQUFLZ0MsS0FBTWc4QixFQUFTejBCLGFBQWN5MEIsR0FFM0RoOEIsS0FBSzhCLFFBQVFzaEIsTUFBTTBZLFNBQVM5OUIsS0FBS2dDLEtBQU15N0IsRUFBTU8sS0FLekRGLFNBQVUsU0FBVUwsRUFBTU8sR0FDdEIsTUFBTWYsRUFBV2UsRUFBU2oxQixPQUUxQixJQUFLLElBQWtDbWUsRUFBTWlqQixFQUFwQ3RxQyxFQUFJLEVBQUc0SixFQUFNd3pCLEVBQVMzMEIsT0FBc0J6SSxFQUFJNEosRUFBSzVKLElBQ3ZDc3FDLEVBQWYxTSxFQUFLRyxTQUFtQkgsRUFBS2o2QixRQUNuQnhCLEtBQUs4QixRQUFRc2hCLE1BQU04a0IsZ0JBQWdCbHFDLEtBQUtnQyxNQUV0RGtsQixFQUFPLENBQUU5bUIsS0FBTTY4QixFQUFTcDlCLEdBQUdPLEtBQU13bkIsS0FBTXFWLEVBQVNwOUIsR0FBRytuQixNQUNuRDVsQixLQUFLOEIsUUFBUXNoQixNQUFNK2xCLGFBQWFuckMsS0FBS2dDLEtBQU1tb0MsRUFBUWxOLEVBQVNwOUIsR0FBRzZILElBQUt3ZixFQUFNdVcsRUFBS0csVUFHbkY1N0IsS0FBS3l6QixnQkFHVGlWLFNBQVUsU0FBVWp6QixHQUNoQixJQUNJLEdBQW1CLElBQWZBLEVBQUluUCxPQUFjLE9BQU8sRUFDN0J0RyxLQUFLOEIsUUFBUXNoQixNQUFNK2xCLGFBQWFuckMsS0FBS2dDLEtBQU1BLEtBQUs4QixRQUFRc2hCLE1BQU04a0IsZ0JBQWdCbHFDLEtBQUtnQyxNQUFPeVYsRUFBSyxLQUFNelYsS0FBS0ssUUFBUUgsT0FBT0ssYUFDM0gsTUFBTzZNLEdBQ0wsTUFBTWpLLE1BQU0seUNBQTJDaUssRUFBTWxHLFFBQVUsS0FDekUsUUFDRWxILEtBQUt5ekIsaUJBSWIwVixhQUFjLFNBQVUzbkMsRUFBU2lVLEVBQUt5UCxFQUFNMFcsR0FDeEMsTUFBTXdMLEVBQWVwbkMsS0FBS0ssUUFBUStpQixNQUdsQyxHQUFLd1ksRUFhQSxDQUVELEdBREl3TCxFQUFhNVIsV0FBVWgwQixFQUFVNGxDLEVBQWE1UixXQUM5Q2gwQixHQUFXQSxFQUFRaVUsTUFBUUEsRUFLM0IsWUFEQXpWLEtBQUtrL0IsZ0JBQWdCMTlCLEVBQVMsU0FIOUJBLEVBQVFpVSxJQUFNQSxFQUNkelYsS0FBS2svQixnQkFBZ0IxOUIsRUFBUyxhQWpCdkIsQ0FDWEEsRUFBUWlVLElBQU1BLEVBQ2QsTUFBTThvQixFQUFRditCLEtBQUs4QixRQUFReXlCLFVBQVVpSyxVQUFVeGdDLEtBQUtnQyxLQUFNd0IsR0FDcERpOUIsRUFBWXorQixLQUFLOEIsUUFBUXl5QixVQUFVbUssY0FBYzFnQyxLQUFLZ0MsS0FBTXUrQixFQUFPLElBQ3pFLElBQUt2K0IsS0FBSysrQixnQkFBZ0JOLEdBQVcsR0FBTyxHQUFPeitCLEtBQUt1QyxRQUFRMDhCLGlCQUU1RCxZQURBai9CLEtBQUs0QyxRQUdULElBQUs1QyxLQUFLdUMsUUFBUTA4QixnQkFBaUIsQ0FDL0IsTUFBTUUsRUFBT24vQixLQUFLby9CLGdCQUFnQlgsRUFBVyxNQUN6Q1UsR0FBTW4vQixLQUFLb3pCLFNBQVMrTCxFQUFNLEVBQUdBLEVBQU0sSUFjL0NuL0IsS0FBSzhCLFFBQVEyeUIsWUFBWXVLLFFBQVFoaEMsS0FBS2dDLEtBQU0sUUFBU3dCLEVBQVN4QixLQUFLODVCLFVBQVUwTyxjQUFldGpCLEdBQU0sR0FDOUYwVyxHQUFVNTdCLEtBQUswekIsUUFBUS9xQixNQUFLLElBR3BDOC9CLFlBQWEsU0FBVWpuQyxHQUNuQixNQUFNNGxDLEVBQWVwbkMsS0FBS0ssUUFBUStpQixNQUNsQ3BqQixLQUFLOEIsUUFBUXNoQixNQUFNNmdCLGFBQWFqbUMsS0FBS2dDLEtBQU13QixHQUczQyxJQUFJdytCLEVBQWdCaGdDLEtBQUtVLEtBQUt1L0IscUJBQXFCeitCLEVBQVFpSSxhQUFlekosS0FBS1UsS0FBSytvQixhQUFham9CLEVBQVFpSSxZQUNyR2pJLEVBQVV4QixLQUFLVSxLQUFLbzlCLGlCQUFpQnQ4QixJQUFZQSxFQUdyRCxNQUFNNG5DLEVBQWM1bkMsRUFDcEI0bEMsRUFBYTVSLFNBQVdoMEIsRUFBVUEsRUFBUTg4QixXQUFVLEdBQ3BELE1BQU1DLEVBQVF2K0IsS0FBSzhCLFFBQVF5eUIsVUFBVWlLLFVBQVV4Z0MsS0FBS2dDLEtBQU13QixHQUNwRGk5QixFQUFZeitCLEtBQUs4QixRQUFReXlCLFVBQVVtSyxjQUFjMWdDLEtBQUtnQyxLQUFNdStCLEVBQU8sc0JBRXpFLElBQ0ksR0FBSXYrQixLQUFLVSxLQUFLaTVCLGlCQUFpQnlQLEVBQWFwcEMsS0FBS1UsS0FBS3cvQixtQkFDbERrSixFQUFZMy9CLFdBQVcwMkIsYUFBYTFCLEVBQVcySyxRQUM1QyxHQUFJcHBDLEtBQUtVLEtBQUswL0IsV0FBV0osR0FBZSxDQUMzQyxNQUFNSyxFQUFRcmdDLEtBQUtVLEtBQUtpNUIsaUJBQWlCeVAsR0FBYSxTQUFVNVksR0FBVyxPQUFPQSxFQUFRL21CLGFBQWV1MkIsS0FDekdBLEVBQWFILGFBQWFwQixFQUFXNEIsR0FDckNyZ0MsS0FBS1UsS0FBS3NwQixXQUFXb2YsR0FDckJwcEMsS0FBS1UsS0FBSzQvQixnQkFBZ0JELEVBQU8sTUFBTSxRQUNwQyxHQUFJcmdDLEtBQUtVLEtBQUs2L0IsZ0JBQWdCUCxHQUFlLENBQ2hELE1BQU1LLEVBQVFyZ0MsS0FBS1UsS0FBS2k1QixpQkFBaUJ5UCxHQUFhLFNBQVU1WSxHQUFXLE9BQU9BLEVBQVEvbUIsYUFBZXUyQixLQUN6R0EsRUFBZWhnQyxLQUFLVSxLQUFLOC9CLGFBQWFSLEVBQWNLLEdBQ3BETCxFQUFhdjJCLFdBQVdvMkIsYUFBYXBCLEVBQVd1QixHQUNoRGhnQyxLQUFLVSxLQUFLc3BCLFdBQVdvZixHQUNyQnBwQyxLQUFLVSxLQUFLNC9CLGdCQUFnQk4sRUFBYyxNQUFNLEdBQ1QsSUFBakNBLEVBQWFwZ0IsU0FBU3RaLFNBQWMwNUIsRUFBYTU3QixVQUFZcEUsS0FBS1UsS0FBSysvQixxQkFBcUJULEVBQWE1N0IsaUJBRTdHNDdCLEVBQWF2MkIsV0FBVzAyQixhQUFhMUIsRUFBV3VCLEdBRXRELE1BQU81eUIsR0FDTGtDLFFBQVFDLEtBQUsseURBQTBEbkMsR0FHM0VwTixLQUFLOEIsUUFBUTJ5QixZQUFZdUssUUFBUWhoQyxLQUFLZ0MsS0FBTSxRQUFTd0IsRUFBU3hCLEtBQUs4NUIsVUFBVTBPLGNBQWUsTUFBTSxHQUNsR3hvQyxLQUFLOEIsUUFBUXNoQixNQUFNdmdCLEtBQUs3RSxLQUFLZ0MsT0FNakNzNUIsYUFBYyxTQUFVK1AsR0FDcEIsTUFBTWpDLEVBQWVwbkMsS0FBS0ssUUFBUStpQixNQUVsQ3BqQixLQUFLazBCLHNCQUFzQmtULEVBQWF0aEIsV0FBWXVqQixFQUFjLFNBQVUsQ0FBQzM0QixLQUFNLEVBQUcwZixJQUFLLElBQzNGcHdCLEtBQUttMEIsY0FBY2lULEVBQWF0aEIsV0FBWXVqQixFQUFjcnBDLEtBQUs4QixRQUFRc2hCLE1BQU1rbUIsZ0JBQWdCanFDLEtBQUtXLEtBQU1xcEMsR0FBZSxTQUV2SHJwQyxLQUFLVSxLQUFLeUksU0FBU2tnQyxFQUFjLFVBQ2pDakMsRUFBYTVSLFNBQVc2VCxFQUN4QmpDLEVBQWEzUixPQUFTejFCLEtBQUtVLEtBQUtpNUIsaUJBQWlCMFAsRUFBYyxVQUMvRGpDLEVBQWExUixXQUFhMTFCLEtBQUtVLEtBQUtpNUIsaUJBQWlCMFAsRUFBY3JwQyxLQUFLVSxLQUFLNG5DLGNBTWpGekssV0FBWSxTQUFVc0QsR0FDbEIsR0FBSW5oQyxLQUFLSyxRQUFRK2lCLE1BQU1za0IsYUFBYyxDQUNqQyxNQUFNTixFQUFlcG5DLEtBQUtLLFFBQVEraUIsTUFDbENna0IsRUFBYS9SLFdBQWErUixFQUFhMWpCLFFBQVFuZSxZQUFjNmhDLEVBQWFNLGFBQWE1b0MsTUFBUXNvQyxFQUFhNVIsU0FBUy9mLElBRXBIMHJCLEdBQVNuaEMsS0FBSzhCLFFBQVE1QixPQUFPOEIsS0FBS2hFLEtBQUtnQyxLQUFNLFNBQVMsSUFHL0Q2bkMsbUJBQW9CLFNBQVVubUMsR0FDMUJBLEVBQUVzRCxrQkFFRixNQUFNd0UsRUFBVTlILEVBQUVFLE9BQU9DLGFBQWEsZ0JBQ2pDMkgsSUFFTDlILEVBQUU0SCxpQkFFRSxTQUFTM0gsS0FBSzZILEdBQ2R4SixLQUFLOEIsUUFBUXNoQixNQUFNeWEsV0FBVzcvQixLQUFLZ0MsTUFBTSxHQUd6Q0EsS0FBSzhCLFFBQVFzaEIsTUFBTW9XLFFBQVF4N0IsS0FBS2dDLEtBQU1BLEtBQUtLLFFBQVEraUIsTUFBTW9TLFVBRzdEeDFCLEtBQUs4ekIsbUJBR1R3VixnQkFBaUIsU0FBVUQsR0FDdkJycEMsS0FBS1UsS0FBS3dJLFlBQVltZ0MsRUFBYyxVQUNwQ3JwQyxLQUFLSyxRQUFRK2lCLE1BQU0wQyxXQUFXaGxCLE1BQU1DLFFBQVUsUUFNbEQ4QixLQUFNLFdBQ0YsR0FBSTdDLEtBQUtLLFFBQVFILE9BQU9LLFlBQWEsT0FDckMsTUFBTTZtQyxFQUFlcG5DLEtBQUtLLFFBQVEraUIsTUFFOUJna0IsRUFBYUssaUJBQWdCTCxFQUFhSyxlQUFlM29DLE1BQVEsSUFDakVzb0MsRUFBYU0sZUFBY04sRUFBYS9SLFdBQWErUixFQUFhMWpCLFFBQVFuZSxZQUFjNmhDLEVBQWFNLGFBQWE1b0MsTUFBUSxJQUMxSHNvQyxFQUFhSyxnQkFBa0JMLEVBQWFNLGVBQzVDTixFQUFhTSxhQUFheFYsZ0JBQWdCLFlBQzFDa1YsRUFBYTFqQixRQUFRNWlCLE1BQU1rNEIsZUFBaUIsSUFHaERvTyxFQUFhNVIsU0FBVyxPQ3RpQmpCLE9BQ1hwM0IsS0FBTSxPQUNOMkMsUUFBUyxTQUNUWixJQUFLLFNBQVVDLEdBQ1hBLEVBQUsrcEIsVUFBVSxDQUFDanFCLE1BRWhCLE1BQU1HLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRNGlCLEtBQU8sQ0FDWHZnQixhQUFjLEtBQ2Q2bUMsZUFBZ0IsS0FDaEJDLGdCQUFpQixLQUNqQkMsZ0JBQWlCLEdBQ2pCQyxTQUFVLE1BSWQsSUFBSUMsRUFBYzNwQyxLQUFLMHlCLFVBQVV0eUIsR0FDakNDLEVBQVE0aUIsS0FBSzdoQixNQUFRdW9DLEVBQ3JCdHBDLEVBQVE0aUIsS0FBS3ZnQixhQUFlaW5DLEVBQVlybEMsY0FBYyxnQkFDdERqRSxFQUFRNGlCLEtBQUtzbUIsZUFBaUJJLEVBQVlybEMsY0FBYyxvQkFDeERqRSxFQUFRNGlCLEtBQUt1bUIsZ0JBQWtCRyxFQUFZcmxDLGNBQWMsaUJBQ3pEakUsRUFBUTRpQixLQUFLdmdCLGFBQWFyQixpQkFBaUJqQixFQUFLTSxLQUFLa3BDLEtBQU8sWUFBYyxRQUFTNXBDLEtBQUs2cEMsZUFBZXhxQyxLQUFLZSxFQUFNQyxFQUFRNGlCLE9BQU8sR0FDakk1aUIsRUFBUTRpQixLQUFLdW1CLGdCQUFnQm5vQyxpQkFBaUIsU0FBVSxTQUFVSyxHQUFLMUIsS0FBSzBoQixTQUFXaGdCLEVBQUVFLE9BQU85QyxPQUFTTyxLQUFLZ0IsRUFBUTRpQixLQUFLc21CLGVBQWV6b0MsUUFBUSxHQUdsSixJQUFJZ3BDLEVBQWtCOXBDLEtBQUsrcEMseUJBQXlCM3BDLEdBQ3BEQyxFQUFRNGlCLEtBQUsrbUIsZUFBaUJGLEVBQzlCenBDLEVBQVE0aUIsS0FBS3ltQixTQUFXLEtBR3hCQyxFQUFZcmxDLGNBQWMsUUFBUWpELGlCQUFpQixTQUFVckIsS0FBS3lxQixPQUFPcHJCLEtBQUtlLElBQU8sR0FDckYwcEMsRUFBZ0J6b0MsaUJBQWlCLFFBQVNyQixLQUFLaXFDLHVCQUF1QjVxQyxLQUFLZSxJQUMzRUMsRUFBUTRpQixLQUFLc21CLGVBQWV6b0MsTUFBTTRnQixTQUFXcmhCLEVBQVE0aUIsS0FBS3dtQixnQkFHMURwcEMsRUFBUUgsT0FBT2tCLE1BQU1ILFlBQVkwb0MsR0FDakN0cEMsRUFBUW1CLFFBQVFDLFNBQVNSLFlBQVk2b0MsR0FHckNILEVBQWMsS0FBTUcsRUFBa0IsTUFJMUNwWCxVQUFXLFNBQVV0eUIsR0FDakIsTUFBTXdFLEVBQU94RSxFQUFLd0UsS0FDWjFFLEVBQVNFLEVBQUtNLEtBQUtDLGNBQWMsT0FDakMrZ0IsRUFBV3RoQixFQUFLbUMsUUFBUTJuQyxhQUM5QixJQUFJVCxFQUFrQi9uQixFQUFTLEdBQUc1aUIsTUFFbENvQixFQUFPVSxVQUFZLG9CQUNuQlYsRUFBT1ksTUFBTUMsUUFBVSxPQUN2QixJQUFJaWEsRUFBTyx3SEFHbUZwVyxFQUFLQyxVQUFVOUMsTUFBUSxpQkFBbUI2QyxFQUFLQyxVQUFVOUMsTUFBUSxLQUNuSjNCLEVBQUswRSxNQUFNQyxPQUpaLHlDQU0rQkgsRUFBS0MsVUFBVWdnQixRQUFRcmYsTUFOdEQsK0VBVWFaLEVBQUtDLFVBQVVnZ0IsUUFBUUMsV0FWcEMsbU1BY2FsZ0IsRUFBS0MsVUFBVWdnQixRQUFRRSxjQWRwQyx3REFnQkMsSUFBSyxJQUFrQ2hVLEVBQTlCbFQsRUFBSSxFQUFHNEosRUFBTWlhLEVBQVNwYixPQUFXekksRUFBSTRKLEVBQUs1SixJQUMvQ2tULEVBQUkyUSxFQUFTN2pCLEdBQ1RrVCxFQUFFdVEsVUFBU21vQixFQUFrQjE0QixFQUFFalMsT0FDbkNrYyxHQUFRLGtCQUFvQmpLLEVBQUVqUyxNQUFRLEtBQU9pUyxFQUFFdVEsUUFBVSxZQUFjLElBQU0sSUFBTXZRLEVBQUViLEtBQU8sWUFnQjVHLE9BZFE4SyxHQUFRLHFEQUdRcFcsRUFBS0MsVUFBVWdnQixRQUFRRyxhQUgvQix3SUFRaURwZ0IsRUFBS0MsVUFBVTBnQixhQUFlLGlCQUFtQjNnQixFQUFLQyxVQUFVMGdCLGFBQWUsV0FBYTNnQixFQUFLQyxVQUFVMGdCLGFBUjVKLGdDQVloQm5sQixFQUFLQyxRQUFRNGlCLEtBQUt3bUIsZ0JBQWtCQSxFQUNwQ3ZwQyxFQUFPa0UsVUFBWTRXLEVBQ1o5YSxHQUlYNnBDLHlCQUEwQixTQUFVM3BDLEdBQ2hDLE1BQU13RSxFQUFPeEUsRUFBS3dFLEtBQ1p1bEMsRUFBVy9wQyxFQUFLTSxLQUFLQyxjQUFjLE9BbUJ6QyxPQWpCQXdwQyxFQUFTdnBDLFVBQVksbUNBQ3JCdXBDLEVBQVMvbEMsVUFBWSxtTEFLVGhFLEVBQUswRSxNQUFNaWhCLEtBQ1gsZ0VBQWtFbmhCLEVBQUtraEIsV0FBV0MsS0FOekUsOEdBU1QzbEIsRUFBSzBFLE1BQU1rdUIsT0FDWCxnRUFBa0VwdUIsRUFBS2toQixXQUFXRyxPQVZ6RSxzQ0FnQmRra0IsR0FNWG5vQyxLQUFNLFdBQ0ZoQyxLQUFLOEIsUUFBUTVCLE9BQU84QixLQUFLaEUsS0FBS2dDLEtBQU0sT0FBUSxTQUFXQSxLQUFLaXpCLHdCQU1oRW1YLFlBQWEsV0FDVCxNQUFPLENBQ0h4cEMsVUFBVyxRQUNYeXBDLE9BQVEsU0FBVTdvQyxHQUNkLElBQUtBLEVBQVFLLGFBQWEsY0FBZ0I3QixLQUFLdUMsUUFBUStuQyxNQUFPLE9BQzlELE1BQU1DLEVBQU12cUMsS0FBS29DLEdBQUdvb0MsY0FBY0MseUJBQXlCenFDLEtBQUs4QixRQUFRbWhCLEtBQUt5bkIsVUFBVTFzQyxLQUFLZ0MsS0FBTUEsS0FBS1UsS0FBS2lxQyxZQUFZbnBDLEVBQVFLLGFBQWEsZUFDN0lMLEVBQVE0QyxVQUFZbW1DLEVBQUlqbUMsY0FBYyxVQUFVRixVQUNoRDVDLEVBQVE2VSxhQUFhLG1CQUFtQixNQUtwRHEwQixVQUFXLFNBQVVFLEdBQ2pCLElBQUk3akMsRUFBUyxHQUNiLElBQ0kvRyxLQUFLVSxLQUFLd0ksWUFBWWxKLEtBQUtLLFFBQVE0aUIsS0FBS3ZnQixhQUFjLFlBQ3REcUUsRUFBUy9HLEtBQUt1QyxRQUFRK25DLE1BQU03MEIsSUFBSW8xQixlQUFlRCxFQUFLLENBQUNFLGNBQWMsRUFBTUMsYUFBYSxJQUN4RixNQUFNMzlCLEdBQ0pwTixLQUFLVSxLQUFLeUksU0FBU25KLEtBQUtLLFFBQVE0aUIsS0FBS3ZnQixhQUFjLFlBQ25EcUUsRUFBUyxpSkFDVHVJLFFBQVFDLEtBQUssZ0NBQWlDbkMsR0FFbEQsT0FBT3JHLEdBR1g4aUMsZUFBZ0IsU0FBVW1CLEVBQWF0cEMsR0FDbkNzcEMsRUFBWXpCLGVBQWVubEMsVUFBWXBFLEtBQUs4QixRQUFRbWhCLEtBQUt5bkIsVUFBVTFzQyxLQUFLZ0MsS0FBTTBCLEVBQUVFLE9BQU85QyxRQUczRjJyQixPQUFRLFNBQVUvb0IsR0FDZDFCLEtBQUtrekIsY0FFTHh4QixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUYsTUFBTSsxQixFQUFlLFdBQ2pCLEdBQTJELElBQXZELzZCLEtBQUtLLFFBQVE0aUIsS0FBS3ZnQixhQUFhNUQsTUFBTTBKLE9BQU9sQyxPQUFjLE9BQU8sRUFFckUsTUFBTTBrQyxFQUFjaHJDLEtBQUtLLFFBQVE0aUIsS0FDM0Jnb0IsRUFBVUQsRUFBWXRvQyxhQUFhNUQsTUFDbkNvc0MsRUFBVUYsRUFBWXpCLGVBQWVqbEMsY0FBYyxVQUV6RCxJQUFLNG1DLEVBQVMsT0FBTyxFQU9yQixHQU5BQSxFQUFRdHFDLFVBQVksZUFBaUJzcUMsRUFBUXRxQyxVQUM3Q3NxQyxFQUFRNzBCLGFBQWEsbUJBQW1CLEdBQ3hDNjBCLEVBQVE3MEIsYUFBYSxXQUFZclcsS0FBS1UsS0FBS3lxQyxZQUFZRixJQUN2REMsRUFBUTcwQixhQUFhLGlCQUFrQjIwQixFQUFZeEIsZ0JBQWdCMXFDLE9BQ25Fb3NDLEVBQVFwcUMsTUFBTTRnQixTQUFXc3BCLEVBQVl4QixnQkFBZ0IxcUMsTUFFaERrQixLQUFLSyxRQUFRSCxPQUFPSyxZQWNsQixDQUNILE1BQU02cUMsRUFBY3ByQyxLQUFLVSxLQUFLaTVCLGlCQUFpQnFSLEVBQVl0QixTQUFVLFVBQ3JFMEIsRUFBWTNoQyxXQUFXMDJCLGFBQWErSyxFQUFTRSxHQUM3Q3ByQyxLQUFLb3pCLFNBQVM4WCxFQUFTLEVBQUdBLEVBQVMsT0FqQkQsQ0FDbEMsTUFBTTdYLEVBQWtCcnpCLEtBQUtzekIsc0JBRTdCLEdBQUlELEVBQWdCL3NCLE9BQVMsRUFBRyxDQUM1QixNQUFNaXRCLEVBQVV2ekIsS0FBS1UsS0FBS0MsY0FBYzB5QixFQUFnQixHQUFHbEMsVUFFM0QsR0FEQW9DLEVBQVF0eUIsWUFBWWlxQyxJQUNmbHJDLEtBQUt3ekIsV0FBV0QsRUFBUyxNQUFNLEdBQU8sT0FBTyxPQUVsRCxJQUFLdnpCLEtBQUt3ekIsV0FBVzBYLEVBQVMsTUFBTSxHQUFPLE9BQU8sRUFHdEQsTUFBTUcsRUFBUXJyQyxLQUFLVSxLQUFLNHFDLGVBQWV0ckMsS0FBS1UsS0FBSzZxQyxnQkFDakRMLEVBQVF6aEMsV0FBV28yQixhQUFhd0wsRUFBT0gsRUFBUU0sYUFDL0N4ckMsS0FBS296QixTQUFTOFgsRUFBUyxFQUFHQSxFQUFTLEdBWXZDLE9BTEFGLEVBQVl0b0MsYUFBYTVELE1BQVEsR0FDakNrc0MsRUFBWXhCLGdCQUFnQjFxQyxNQUFRLE1BQ3BDa3NDLEVBQVl6QixlQUFlem9DLE1BQU00Z0IsU0FBVyxNQUM1Q3NwQixFQUFZekIsZUFBZW5sQyxVQUFZLElBRWhDLEdBQ1QvRSxLQUFLVyxNQUVQLElBQ1ErNkIsTUFDQS82QixLQUFLOEIsUUFBUTVCLE9BQU82QixNQUFNL0QsS0FBS2dDLE1BRS9CQSxLQUFLMHpCLFFBQVEvcUIsTUFBSyxJQUV4QixNQUFPakgsR0FDTDFCLEtBQUs4QixRQUFRNUIsT0FBTzZCLE1BQU0vRCxLQUFLZ0MsTUFDakMsUUFDRUEsS0FBS3l6QixlQUdULE9BQU8sR0FHWEUsT0FBUSxTQUFVbnlCLEdBQ2QsR0FBS0EsR0FJRSxHQUFJQSxFQUFRSyxhQUFhLFlBSzVCLE9BSkk3QixLQUFLNHpCLGdCQUFnQmxyQixRQUFRMUksS0FBS0ssUUFBUTRpQixLQUFLK21CLGdCQUFrQixJQUNqRWhxQyxLQUFLb3pCLFNBQVM1eEIsRUFBUyxFQUFHQSxFQUFTLEdBQ25DeEIsS0FBSzhCLFFBQVFtaEIsS0FBSzRRLGdCQUFnQjcxQixLQUFLZ0MsS0FBTXdCLEtBRTFDLE9BUkh4QixLQUFLNHpCLGdCQUFnQmxyQixRQUFRMUksS0FBS0ssUUFBUTRpQixLQUFLK21CLGlCQUFtQixHQUNsRWhxQyxLQUFLOHpCLGlCQVViLE9BQU8sR0FHWG54QixHQUFJLFNBQVVWLEdBQ1YsR0FBS0EsRUFFRSxDQUNILE1BQU0rb0MsRUFBY2hyQyxLQUFLSyxRQUFRNGlCLEtBQ2pDLEdBQUkrbkIsRUFBWXRCLFNBQVUsQ0FDdEIsTUFBTWtCLEVBQU01cUMsS0FBS1UsS0FBS2lxQyxZQUFZSyxFQUFZdEIsU0FBUzduQyxhQUFhLGFBQzlENmYsRUFBV3NwQixFQUFZdEIsU0FBUzduQyxhQUFhLG1CQUFxQixNQUN4RTdCLEtBQUtLLFFBQVFILE9BQU9LLGFBQWMsRUFDbEN5cUMsRUFBWXRvQyxhQUFhNUQsTUFBUThyQyxFQUNqQ0ksRUFBWXhCLGdCQUFnQjFxQyxNQUFRNGlCLEVBQ3BDc3BCLEVBQVl6QixlQUFlbmxDLFVBQVlwRSxLQUFLOEIsUUFBUW1oQixLQUFLeW5CLFVBQVUxc0MsS0FBS2dDLEtBQU00cUMsR0FDOUVJLEVBQVl6QixlQUFlem9DLE1BQU00Z0IsU0FBV0EsUUFWaEQxaEIsS0FBSzhCLFFBQVFtaEIsS0FBS3BnQixLQUFLN0UsS0FBS2dDLE9BZXBDNnpCLGdCQUFpQixTQUFVNFgsR0FDdkJ6ckMsS0FBS0ssUUFBUTRpQixLQUFLeW1CLFNBQVcrQixFQUM3QixNQUFNQyxFQUFVMXJDLEtBQUtLLFFBQVE0aUIsS0FBSyttQixlQUVsQ2hxQyxLQUFLazBCLHNCQUFzQndYLEVBQVNELEVBQVMsU0FBVSxDQUFDLzZCLEtBQU0sRUFBRzBmLElBQUssSUFDdEVwd0IsS0FBS20wQixjQUFjdVgsRUFBU0QsRUFBUyxTQUd6Q3hCLHVCQUF3QixTQUFVdm9DLEdBQzlCQSxFQUFFc0Qsa0JBRUYsTUFBTXdFLEVBQVU5SCxFQUFFRSxPQUFPQyxhQUFhLGlCQUFtQkgsRUFBRUUsT0FBTzZILFdBQVc1SCxhQUFhLGdCQUNyRjJILElBRUw5SCxFQUFFNEgsaUJBRUUsU0FBUzNILEtBQUs2SCxJQUNkeEosS0FBS0ssUUFBUTRpQixLQUFLdmdCLGFBQWE1RCxNQUFRa0IsS0FBS1UsS0FBS2lxQyxZQUFZM3FDLEtBQUtLLFFBQVE0aUIsS0FBS3ltQixTQUFTN25DLGFBQWEsYUFDckc3QixLQUFLOEIsUUFBUTVCLE9BQU84QixLQUFLaEUsS0FBS2dDLEtBQU0sUUFBUSxLQUc1Q0EsS0FBS1UsS0FBS3NwQixXQUFXaHFCLEtBQUtLLFFBQVE0aUIsS0FBS3ltQixVQUN2QzFwQyxLQUFLSyxRQUFRNGlCLEtBQUt5bUIsU0FBVyxLQUM3QjFwQyxLQUFLNEMsUUFHTDVDLEtBQUswekIsUUFBUS9xQixNQUFLLElBR3RCM0ksS0FBSzh6QixtQkFHVGp4QixLQUFNLFdBQ0YsTUFBTW1vQyxFQUFjaHJDLEtBQUtLLFFBQVE0aUIsS0FDakMrbkIsRUFBWWhCLGVBQWVscEMsTUFBTUMsUUFBVSxPQUMzQ2lxQyxFQUFZdEIsU0FBVyxLQUN2QnNCLEVBQVl0b0MsYUFBYTVELE1BQVEsR0FDakNrc0MsRUFBWXpCLGVBQWVubEMsVUFBWSxLLHFCQ3JRaEMsR0FBRXVuQyxXQ3RCRixDQUNYdnRDLEtBQU0sYUFDTjJDLFFBQVMsVUFDVFosSUFBSyxTQUFVQyxFQUFNOHBCLEdBQ0Q5cEIsRUFBS0MsUUFDYnNyQyxXQUFhLENBQ2pCQyxhQUFjMWhCLEVBQ2Q5aEIsSUFBS2hJLEVBQUtNLEtBQUtDLGNBQWMsZ0JBT3JDZ3pCLE9BQVEsU0FBVW55QixHQUNkLEdBQUtBLEdBRUUsR0FBSSxjQUFjRyxLQUFLSCxFQUFRMnZCLFVBRWxDLE9BREFueEIsS0FBS1UsS0FBS3lJLFNBQVNuSixLQUFLSyxRQUFRc3JDLFdBQVdDLGFBQWMsV0FDbEQsT0FIUDVyQyxLQUFLVSxLQUFLd0ksWUFBWWxKLEtBQUtLLFFBQVFzckMsV0FBV0MsYUFBYyxVQU1oRSxPQUFPLEdBTVhDLE9BQVEsV0FDSixNQUFNQyxFQUFvQjlyQyxLQUFLVSxLQUFLaTVCLGlCQUFpQjM1QixLQUFLZ3JCLG1CQUFvQixjQUUxRThnQixFQUNBOXJDLEtBQUsrckMseUJBQXlCRCxFQUFtQixLQUFNLE1BQU0sR0FBTyxHQUVwRTlyQyxLQUFLZ3NDLHdCQUF3QmhzQyxLQUFLSyxRQUFRc3JDLFdBQVd2akMsSUFBSWsyQixXQUFVLE1EWmxEamMsTUV0QmQsQ0FDWGprQixLQUFNLFFBQ04yQyxRQUFTLFVBQ1RaLElBQUssU0FBVUMsRUFBTThwQixHQUNqQixNQUFNcGxCLEVBQVExRSxFQUFLMEUsTUFDYnpFLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRZ2lCLE1BQVEsQ0FDWnVwQixhQUFjMWhCLEVBQ2QraEIsVUFBVyxLQUNYQyxXQUFZLEtBQ1pDLGFBQWMsR0FDZEMsV0FBWWhzQyxFQUFLbUMsUUFBUTB0QixJQUFNLFFBQVUsT0FDekNuckIsTUFBTyxDQUNIdW5DLFFBQVN2bkMsRUFBTXduQyxjQUNmNTdCLEtBQU01TCxFQUFNeW5DLFdBQ1o1N0IsTUFBTzdMLEVBQU0wbkMsWUFDYjdtQixPQUFRN2dCLEVBQU0ybkMsZUFLdEIsSUFBSW5pQixFQUFVdHFCLEtBQUt1cUIsV0FBV25xQixHQUMxQnNzQyxFQUFTcnNDLEVBQVFnaUIsTUFBTTRwQixVQUFZM2hCLEVBQVFobUIsY0FBYyxNQUc3RG9vQyxFQUFPcnJDLGlCQUFpQixRQUFTckIsS0FBSzBxQixPQUFPcnJCLEtBQUtlLElBQ2xEQyxFQUFRZ2lCLE1BQU02cEIsV0FBYVEsRUFBTzlqQyxpQkFBaUIsYUFHbkR4SSxFQUFLdXFCLGVBQWUzcUIsS0FBSzVCLEtBQU04ckIsRUFBZUksR0FHOUNBLEVBQVUsS0FBTW9pQixFQUFTLE1BRzdCbmlCLFdBQVksU0FBVW5xQixHQUNsQixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUNaRSxFQUFRMUUsRUFBSzBFLE1BQ2J3bEIsRUFBVWxxQixFQUFLTSxLQUFLQyxjQUFjLE9BQ2xDZ3NDLEVBQWF2c0MsRUFBS21DLFFBQVFvcUMsV0FFaEMsSUFBSTN4QixFQUFPLEdBQ1gsSUFBSyxJQUFXOVMsRUFBTWdJLEVBQWJyUyxFQUFJLEVBQWVBLEVBQUk4dUMsRUFBV3JtQyxPQUFRekksSUFDL0NxSyxFQUFPeWtDLEVBQVc5dUMsR0FDbEJxUyxFQUFPdEwsRUFBS3ljLFFBQVEsUUFBVW5aLEVBQUswa0MsT0FBTyxHQUFHQyxjQUFnQjNrQyxFQUFLd0osTUFBTSxJQUN4RXNKLEdBQVEsMEVBQ29FOVMsRUFBTyxZQUFjZ0ksRUFBTyxpQkFBbUJBLEVBRG5ILGdDQUVnQ3BMLEVBQU0sU0FBV29ELEdBQVEsVUFBWWdJLEVBRnJFLGlCQWVaLE9BUkFvYSxFQUFRMXBCLFVBQVkseUNBQ3BCMHBCLEVBQVFsbUIsVUFBWSx3REFHUjRXLEVBSFEsY0FPYnNQLEdBTVhxSixPQUFRLFNBQVVueUIsR0FDZCxNQUFNc3JDLEVBQWU5c0MsS0FBS0ssUUFBUWdpQixNQUM1QnVwQixFQUFla0IsRUFBYWxCLGFBQzVCaHFDLEVBQVNncUMsRUFBYW1CLGtCQUU1QixHQUFLdnJDLEdBR0UsR0FBSXhCLEtBQUtVLEtBQUs2L0IsZ0JBQWdCLytCLEdBQVUsQ0FDM0MsTUFBTXU4QixFQUFZdjhCLEVBQVFWLE1BQU1pOUIsVUFDaEMsR0FBSUEsRUFHQSxPQUZBLzlCLEtBQUtVLEtBQUtzc0MsY0FBY3ByQyxFQUFRa3JDLEVBQWFob0MsTUFBTWk1QixJQUFjK08sRUFBYWhvQyxNQUFNZ29DLEVBQWFWLGFBQ2pHUixFQUFhdjFCLGFBQWEsYUFBYzBuQixJQUNqQyxRQVBYLzlCLEtBQUtVLEtBQUtzc0MsY0FBY3ByQyxFQUFRa3JDLEVBQWFob0MsTUFBTWdvQyxFQUFhVixhQUNoRVIsRUFBYTFaLGdCQUFnQixjQVVqQyxPQUFPLEdBTVh2dkIsR0FBSSxXQUNBLE1BQU1tcUMsRUFBZTlzQyxLQUFLSyxRQUFRZ2lCLE1BQzVCNHFCLEVBQVlILEVBQWFaLFdBQ3pCQyxFQUFlVyxFQUFhbEIsYUFBYS9wQyxhQUFhLGVBQWlCaXJDLEVBQWFWLFdBRTFGLEdBQUlELElBQWlCVyxFQUFhWCxhQUFjLENBQzVDLElBQUssSUFBSXR1QyxFQUFJLEVBQUc0SixFQUFNd2xDLEVBQVUzbUMsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDekNzdUMsSUFBaUJjLEVBQVVwdkMsR0FBR2dFLGFBQWEsY0FDM0M3QixLQUFLVSxLQUFLeUksU0FBUzhqQyxFQUFVcHZDLEdBQUksVUFFakNtQyxLQUFLVSxLQUFLd0ksWUFBWStqQyxFQUFVcHZDLEdBQUksVUFJNUNpdkMsRUFBYVgsYUFBZUEsSUFJcENlLFlBQWEsV0FDVCxNQUFNQyxFQUFNbnRDLEtBQUt1QyxRQUFRMHRCLElBQU0sUUFBVSxPQUN6QyxJQUFLandCLEtBQUtLLFFBQVFnaUIsT0FBU3JpQixLQUFLSyxRQUFRZ2lCLE1BQU0rcEIsYUFBZWUsRUFBSyxPQUVsRW50QyxLQUFLSyxRQUFRZ2lCLE1BQU0rcEIsV0FBYWUsRUFDaEMsSUFBSTFsQixFQUFPem5CLEtBQUtLLFFBQVFnaUIsTUFBTTRwQixVQUMxQm1CLEVBQVUzbEIsRUFBS25qQixjQUFjLHVCQUM3QitvQyxFQUFXNWxCLEVBQUtuakIsY0FBYyx3QkFDbEMsR0FBSThvQyxHQUFXQyxFQUFVLENBQ3JCLE1BQU1DLEVBQUtGLEVBQVFHLGNBQ2JDLEVBQUtILEVBQVNFLGNBQ3BCRCxFQUFHcnNDLFlBQVlvc0MsR0FDZkcsRUFBR3ZzQyxZQUFZbXNDLEtBSXZCMWlCLE9BQVEsU0FBVWhwQixHQUNkQSxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUYsSUFBSXBELEVBQVNGLEVBQUVFLE9BQ1g5QyxFQUFRLEtBRVosTUFBUUEsSUFBVSxNQUFNNkMsS0FBS0MsRUFBT2tILFVBQ2hDaEssRUFBUThDLEVBQU9DLGFBQWEsY0FDNUJELEVBQVNBLEVBQU82SCxXQUdwQixJQUFLM0ssRUFBTyxPQUVaLE1BQU1zdEMsRUFBYXBzQyxLQUFLSyxRQUFRZ2lCLE1BQU0rcEIsV0FDaENxQixFQUFrQnp0QyxLQUFLc3pCLHNCQUM3QixJQUFLLElBQUl6MUIsRUFBSSxFQUFHNEosRUFBTWdtQyxFQUFnQm5uQyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUNuRG1DLEtBQUtVLEtBQUtndEMsU0FBU0QsRUFBZ0I1dkMsR0FBSSxZQUFjaUIsSUFBVXN0QyxFQUFhLEdBQUt0dEMsR0FHckZrQixLQUFLMnRDLFdBQWEsS0FDbEIzdEMsS0FBS21yQixhQUNMbnJCLEtBQUs0QyxRQUdMNUMsS0FBSzB6QixRQUFRL3FCLE1BQUssS0Y5SFU2WSxLR3RCckIsQ0FDWHBqQixLQUFNLE9BQ04yQyxRQUFTLFVBQ1RaLElBQUssU0FBVUMsRUFBTThwQixHQUNqQixNQUFNN3BCLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRbWhCLEtBQU8sQ0FDWG9zQixXQUFZMWpCLEVBQWM1bEIsY0FBYyxRQUN4Q3VwQyxjQUFlM2pCLEVBQWN6Z0IsV0FBV25GLGNBQWMsb0JBQ3REd3BDLFVBQVcsS0FDWEMsWUFBYSxJQUlqQixJQUFJempCLEVBQVV0cUIsS0FBS3VxQixXQUFXbnFCLEdBRzlCa3FCLEVBQVFobUIsY0FBYyxrQkFBa0JqRCxpQkFBaUIsUUFBU3JCLEtBQUswcUIsT0FBT3JyQixLQUFLZSxJQUVuRkMsRUFBUW1oQixLQUFLc3NCLFVBQVl4akIsRUFBUTFoQixpQkFBaUIsZ0JBR2xEeEksRUFBS3VxQixlQUFlM3FCLEtBQUs1QixLQUFNOHJCLEVBQWVJLEdBRzlDQSxFQUFVLE1BR2RDLFdBQVksU0FBVW5xQixHQUNsQixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUNaMGxCLEVBQVVscUIsRUFBS00sS0FBS0MsY0FBYyxPQUl4QyxJQUFJNmdCLEVBQU10UixFQUFNclMsRUFBRzRKLEVBRm5CNmlCLEVBQVExcEIsVUFBWSwrQ0FHcEIsSUFBSW90QyxFQUFXNXRDLEVBQUttQyxRQUFRaWYsS0FFeEI3ZCxFQUFPLDJIQUV5RWlCLEVBQUt5YyxRQUFRQyxRQUFVLGlCQUFtQjFjLEVBQUt5YyxRQUFRQyxRQUFVLE1BQVExYyxFQUFLeWMsUUFBUUMsUUFBVSxrQkFDcEwsSUFBS3pqQixFQUFJLEVBQUc0SixFQUFNdW1DLEVBQVMxbkMsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDeEMyakIsRUFBT3dzQixFQUFTbndDLEdBQ2hCcVMsRUFBT3NSLEVBQUtuWixNQUFNLEtBQUssR0FDdkIxRSxHQUFRLDZEQUErRDZkLEVBQU8sZUFBaUJ0UixFQUFPLFlBQWNBLEVBQU8saUJBQW1CQSxFQUFPLHdCQUEwQnNSLEVBQU8sTUFBUXRSLEVBQU8saUJBS3pNLE9BSEF2TSxHQUFRLGNBQ1IybUIsRUFBUWxtQixVQUFZVCxFQUViMm1CLEdBTVhxSixPQUFRLFNBQVVueUIsR0FDZCxNQUFNSSxFQUFTNUIsS0FBS0ssUUFBUW1oQixLQUFLb3NCLFdBQzNCSyxFQUFVanVDLEtBQUtLLFFBQVFtaEIsS0FBS3FzQixjQUVsQyxHQUFLcnNDLEdBSUUsR0FBSUEsRUFBUVYsT0FBU1UsRUFBUVYsTUFBTW90QyxXQUFXNW5DLE9BQVMsRUFBRyxDQUM3RCxNQUFNNm5DLEVBQWEzc0MsRUFBUVYsTUFBTW90QyxXQUFXbGdDLFFBQVEsUUFBUSxJQUc1RCxPQUZBaE8sS0FBS1UsS0FBSzB0QyxVQUFVeHNDLEVBQVF1c0MsR0FDNUJudUMsS0FBS1UsS0FBSzB0QyxVQUFVSCxFQUFTanVDLEtBQUs0RSxLQUFLeWMsUUFBUUcsS0FBTyxLQUFPMnNCLEVBQWEsTUFDbkUsT0FSRyxDQUNWLE1BQU0zc0IsRUFBT3hoQixLQUFLcXVDLFNBQVdydUMsS0FBSytxQixnQkFBZ0JtakIsV0FBYWx1QyxLQUFLNEUsS0FBS3ljLFFBQVFHLEtBQ2pGeGhCLEtBQUtVLEtBQUswdEMsVUFBVXhzQyxFQUFRNGYsR0FDNUJ4aEIsS0FBS1UsS0FBSzB0QyxVQUFVSCxFQUFTanVDLEtBQUtxdUMsU0FBV3J1QyxLQUFLNEUsS0FBS3ljLFFBQVFHLE1BQVFBLEVBQU8sS0FBT0EsRUFBTyxJQUFNLElBQU1BLEdBUTVHLE9BQU8sR0FNWDdlLEdBQUksV0FDQSxNQUFNMnJDLEVBQWN0dUMsS0FBS0ssUUFBUW1oQixLQUMzQndzQixFQUFXTSxFQUFZUixVQUN2QkMsRUFBY08sRUFBWVYsV0FBV3JvQyxZQUUzQyxHQUFJd29DLElBQWdCTyxFQUFZUCxZQUFhLENBQ3pDLElBQUssSUFBSWx3QyxFQUFJLEVBQUc0SixFQUFNdW1DLEVBQVMxbkMsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDeENrd0MsS0FBaUJDLEVBQVNud0MsR0FBR2dFLGFBQWEsZUFBaUIsSUFBSW1NLFFBQVEsT0FBUSxJQUMvRWhPLEtBQUtVLEtBQUt5SSxTQUFTNmtDLEVBQVNud0MsR0FBSSxVQUVoQ21DLEtBQUtVLEtBQUt3SSxZQUFZOGtDLEVBQVNud0MsR0FBSSxVQUkzQ3l3QyxFQUFZUCxZQUFjQSxJQUlsQ3JqQixPQUFRLFNBQVVocEIsR0FDZCxJQUFLLFlBQVlDLEtBQUtELEVBQUVFLE9BQU9rSCxTQUFVLE9BQU8sRUFFaERwSCxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUYsSUFBSWxHLEVBQVE0QyxFQUFFRSxPQUFPQyxhQUFhLGNBRWxDLEdBQUkvQyxFQUFPLENBQ1AsTUFBTXNzQixFQUFVcHJCLEtBQUtVLEtBQUtDLGNBQWMsUUFDcEMsV0FBV2dCLEtBQUs3QyxLQUFXLGVBQWU2QyxLQUFLN0MsS0FDL0NBLEVBQVEsSUFBTUEsRUFBUSxLQUUxQnNzQixFQUFRdHFCLE1BQU1vdEMsV0FBYXB2QyxFQUMzQmtCLEtBQUtrckIsV0FBV0UsRUFBUyxDQUFDLGVBQWdCLEtBQU0sV0FFaERwckIsS0FBS2tyQixXQUFXLEtBQU0sQ0FBQyxlQUFnQixDQUFDLFNBQVMsR0FHckRsckIsS0FBS21yQixlSHpGNkJ6SixTSXRCM0IsQ0FDWHRqQixLQUFNLFdBQ04yQyxRQUFTLFVBQ1RaLElBQUssU0FBVUMsRUFBTThwQixHQUNqQixNQUFNN3BCLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRcWhCLFNBQVcsQ0FDZmtzQixXQUFZMWpCLEVBQWM1bEIsY0FBYyxRQUN4Q2lxQyxVQUFXLEtBQ1hDLFlBQWEsSUFJakIsSUFBSWxrQixFQUFVdHFCLEtBQUt1cUIsV0FBV25xQixHQUMxQnNzQyxFQUFTcGlCLEVBQVFobUIsY0FBYyxNQUduQ29vQyxFQUFPcnJDLGlCQUFpQixRQUFTckIsS0FBSzBxQixPQUFPcnJCLEtBQUtlLElBQ2xEQyxFQUFRcWhCLFNBQVM2c0IsVUFBWTdCLEVBQU85akMsaUJBQWlCLGFBR3JEeEksRUFBS3VxQixlQUFlM3FCLEtBQUs1QixLQUFNOHJCLEVBQWVJLEdBRzlDQSxFQUFVLEtBQU1vaUIsRUFBUyxNQUc3Qm5pQixXQUFZLFNBQVVucUIsR0FDbEIsTUFBTXNPLEVBQVN0TyxFQUFLbUMsUUFDZHFDLEVBQU94RSxFQUFLd0UsS0FDWjBsQixFQUFVbHFCLEVBQUtNLEtBQUtDLGNBQWMsT0FFeEMycEIsRUFBUTFwQixVQUFZLDZDQUVwQixNQUFNNnRDLEVBQVkvL0IsRUFBT2dULFNBQTRFaFQsRUFBT2dULFNBQXhFLENBQUMsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFFL0YsSUFBSS9kLEVBQU8sMkhBRXlFaUIsRUFBS3ljLFFBQVFDLFFBQVUsaUJBQW1CMWMsRUFBS3ljLFFBQVFDLFFBQVUsTUFBUTFjLEVBQUt5YyxRQUFRQyxRQUFVLGtCQUNwTCxJQUFLLElBQThEc0UsRUFBMUQvbkIsRUFBSSxFQUFHNndDLEVBQU9oZ0MsRUFBT2lnQyxhQUFjbG5DLEVBQU1nbkMsRUFBU25vQyxPQUFjekksRUFBSTRKLEVBQUs1SixJQUM5RStuQixFQUFPNm9CLEVBQVM1d0MsR0FDaEI4RixHQUFRLDZEQUErRGlpQixFQUFPOG9CLEVBQU8sWUFBYzlvQixFQUFPOG9CLEVBQU8saUJBQW1COW9CLEVBQU84b0IsRUFBTyxzQkFBd0I5b0IsRUFBTzhvQixFQUFPLE1BQVE5b0IsRUFBTyxpQkFNM00sT0FKQWppQixHQUFRLGNBRVIybUIsRUFBUWxtQixVQUFZVCxFQUViMm1CLEdBTVhxSixPQUFRLFNBQVVueUIsR0FDZCxHQUFLQSxHQUVFLEdBQUlBLEVBQVFWLE9BQVNVLEVBQVFWLE1BQU00Z0IsU0FBU3BiLE9BQVMsRUFFeEQsT0FEQXRHLEtBQUtVLEtBQUswdEMsVUFBVXB1QyxLQUFLSyxRQUFRcWhCLFNBQVNrc0IsV0FBWTV0QyxLQUFLNHVDLGlCQUFpQjV3QyxLQUFLZ0MsS0FBTUEsS0FBS3VDLFFBQVFvc0MsYUFBY250QyxFQUFRVixNQUFNNGdCLFlBQ3pILE9BSFAxaEIsS0FBS1UsS0FBSzB0QyxVQUFVcHVDLEtBQUtLLFFBQVFxaEIsU0FBU2tzQixXQUFZNXRDLEtBQUtxdUMsU0FBV3J1QyxLQUFLNHVDLGlCQUFpQjV3QyxLQUFLZ0MsS0FBTUEsS0FBS3VDLFFBQVFvc0MsYUFBYzN1QyxLQUFLK3FCLGdCQUFnQnJKLFVBQVkxaEIsS0FBSzRFLEtBQUt5YyxRQUFRSyxVQU16TCxPQUFPLEdBTVgvZSxHQUFJLFdBQ0EsTUFBTWtzQyxFQUFrQjd1QyxLQUFLSyxRQUFRcWhCLFNBQy9CK3NCLEVBQVdJLEVBQWdCTixVQUMzQkMsRUFBY0ssRUFBZ0JqQixXQUFXcm9DLFlBRS9DLEdBQUlpcEMsSUFBZ0JLLEVBQWdCTCxZQUFhLENBQzdDLElBQUssSUFBSTN3QyxFQUFJLEVBQUc0SixFQUFNZ25DLEVBQVNub0MsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDeEMyd0MsSUFBZ0JDLEVBQVM1d0MsR0FBR2dFLGFBQWEsY0FDekM3QixLQUFLVSxLQUFLeUksU0FBU3NsQyxFQUFTNXdDLEdBQUksVUFFaENtQyxLQUFLVSxLQUFLd0ksWUFBWXVsQyxFQUFTNXdDLEdBQUksVUFJM0NneEMsRUFBZ0JMLFlBQWNBLElBSXRDOWpCLE9BQVEsU0FBVWhwQixHQUNkLElBQUssWUFBWUMsS0FBS0QsRUFBRUUsT0FBT2tILFNBQVUsT0FBTyxFQUVoRHBILEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFFRixNQUFNbEcsRUFBUTRDLEVBQUVFLE9BQU9DLGFBQWEsY0FFcEMsR0FBSS9DLEVBQU8sQ0FDUCxNQUFNc3NCLEVBQVVwckIsS0FBS1UsS0FBS0MsY0FBYyxRQUN4Q3lxQixFQUFRdHFCLE1BQU00Z0IsU0FBVzVpQixFQUN6QmtCLEtBQUtrckIsV0FBV0UsRUFBUyxDQUFDLGFBQWMsS0FBTSxXQUU5Q3ByQixLQUFLa3JCLFdBQVcsS0FBTSxDQUFDLGFBQWMsQ0FBQyxTQUFTLEdBR25EbHJCLEtBQUttckIsZUo5RXVDbEosWUFBV0MsY0FBYVUsZUt0QjdELENBQ1h4a0IsS0FBTSxpQkFDTjJDLFFBQVMsVUFDVFosSUFBSyxTQUFVQyxFQUFNOHBCLEdBQ2pCOXBCLEVBQUtDLFFBQVF1aUIsZUFBaUIsQ0FDMUJrc0IsVUFBVyxNQUlmLElBQUl4a0IsRUFBVXRxQixLQUFLdXFCLFdBQVducUIsR0FHOUJrcUIsRUFBUWhtQixjQUFjLE1BQU1qRCxpQkFBaUIsUUFBU3JCLEtBQUsrdUMsbUJBQW1CMXZDLEtBQUtlLElBR25GQSxFQUFLdXFCLGVBQWUzcUIsS0FBSzVCLEtBQU04ckIsRUFBZUksR0FHOUNBLEVBQVUsTUFHZEMsV0FBWSxTQUFVbnFCLEdBQ2xCLE1BQU13RSxFQUFPeEUsRUFBS3dFLEtBQ1owbEIsRUFBVWxxQixFQUFLTSxLQUFLQyxjQUFjLE9BQ2xDa0QsRUFBUXpELEVBQUttQyxRQUFReXNDLFNBQVcsQ0FBQyxDQUFDNXdDLEtBQU13RyxFQUFLeWMsUUFBUXdCLFNBQVVvc0IsTUFBTyxlQUFnQixDQUFDN3dDLEtBQU13RyxFQUFLeWMsUUFBUTBCLFVBQVdrc0IsTUFBTyxnQkFBaUIsQ0FBQzd3QyxLQUFNd0csRUFBS3ljLFFBQVF5QixVQUFXbXNCLE1BQU8saUJBRXpMLElBQUl0ckMsRUFBTyxHQUNYLElBQUssSUFBSTlGLEVBQUksRUFBRzRKLEVBQU01RCxFQUFNeUMsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDekM4RixHQUFRLG9HQUM4RkUsRUFBTWhHLEdBQUdveEMsTUFBUSxZQUFjcHJDLEVBQU1oRyxHQUFHTyxLQUFPLGlCQUFtQnlGLEVBQU1oRyxHQUFHTyxLQUR6SyxTQUVTeUYsRUFBTWhHLEdBQUdveEMsTUFBUSxXQUFhcHJDLEVBQU1oRyxHQUFHb3hDLE1BQVEsSUFBTSxLQUFPcHJDLEVBQU1oRyxHQUFHaUQsTUFBUSxXQUFhK0MsRUFBTWhHLEdBQUdpRCxNQUFRLElBQU0sSUFGMUgsbUJBZVosT0FSQXdwQixFQUFRMXBCLFVBQVksd0NBQ3BCMHBCLEVBQVFsbUIsVUFBWSx3REFHUlQsRUFIUSxjQU9iMm1CLEdBR1hxSixPQUFRLFNBQVVueUIsR0FDZCxHQUFLQSxHQUlFLEdBQUksTUFBTUcsS0FBS0gsRUFBUTJ2QixVQU0xQixPQUxBbnhCLEtBQUtLLFFBQVF1aUIsZUFBZWtzQixVQUFZdHRDLEVBQ25DeEIsS0FBS1UsS0FBSzRFLFNBQVM5RCxFQUFTLFFBQzdCeEIsS0FBS1UsS0FBS3lJLFNBQVMzSCxFQUFTLE1BQzVCeEIsS0FBS20wQixjQUFjLEtBQU1uMEIsS0FBS1UsS0FBS3dJLFlBQVk3SixLQUFLVyxLQUFLVSxLQUFNYyxFQUFTLFNBRXJFLE9BVEh4QixLQUFLVSxLQUFLNEUsU0FBU3RGLEtBQUtLLFFBQVF1aUIsZUFBZWtzQixVQUFXLE9BQzFEOXVDLEtBQUs4ekIsaUJBV2IsT0FBTyxHQUdYb2IsU0FBVSxTQUFVQyxHQUVoQixPQURBbnZDLEtBQUs0QyxRQUNFNUMsS0FBSysrQixnQkFBZ0JvUSxFQUFPN1EsV0FBVSxJQUFRLEdBQU8sR0FBTSxJQUd0RXlRLG1CQUFvQixTQUFVcnRDLEdBQzFCQSxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUYsSUFBSXBELEVBQVNGLEVBQUVFLE9BQ1g0SCxFQUFVNUgsRUFBT0MsYUFBYSxnQkFFbEMsTUFBUTJILElBQVksTUFBTTdILEtBQUtDLEVBQU9rSCxVQUNsQ2xILEVBQVNBLEVBQU82SCxXQUNoQkQsRUFBVTVILEVBQU9DLGFBQWEsZ0JBR2xDLElBQUsySCxFQUFTLE9BRWQsTUFBTTRsQyxFQUFRcHZDLEtBQUs4QixRQUFROGdCLGVBQWVzc0IsU0FBU2x4QyxLQUFLZ0MsS0FBTTRCLEVBQU9tckMsbUJBQ2pFcUMsSUFDQXB2QyxLQUFLb3pCLFNBQVNnYyxFQUFPLEVBQUdBLEVBQU8sR0FDL0JwdkMsS0FBS21yQixnQkwvRDJFeG5CLEtNdEI3RSxDQUNYdkYsS0FBTSxPQUNOMkMsUUFBUyxVQUNUWixJQUFLLFNBQVVDLEVBQU04cEIsR0FDakIsTUFBTTdwQixFQUFVRCxFQUFLQyxRQUNyQkEsRUFBUXNELEtBQU8sQ0FDWGlvQyxhQUFjMWhCLEVBQ2RtbEIsTUFBTyxLQUNQQyxZQUFhLEdBQ2J4cUMsTUFBTyxDQUNIeXFDLFFBQVNudkMsRUFBSzBFLE1BQU0wcUMsYUFDcEJDLE9BQVFydkMsRUFBSzBFLE1BQU00cUMsY0FLM0IsSUFBSXBsQixFQUFVdHFCLEtBQUt1cUIsV0FBV25xQixHQUMxQnNzQyxFQUFTcGlCLEVBQVFobUIsY0FBYyxNQUduQ29vQyxFQUFPcnJDLGlCQUFpQixRQUFTckIsS0FBSzBxQixPQUFPcnJCLEtBQUtlLElBQ2xEQyxFQUFRc0QsS0FBSzByQyxNQUFRM0MsRUFBTzlqQyxpQkFBaUIsYUFHN0N4SSxFQUFLdXFCLGVBQWUzcUIsS0FBSzVCLEtBQU04ckIsRUFBZUksR0FHOUNBLEVBQVUsS0FBTW9pQixFQUFTLE1BRzdCbmlCLFdBQVksU0FBVW5xQixHQUNsQixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUNaMGxCLEVBQVVscUIsRUFBS00sS0FBS0MsY0FBYyxPQWV4QyxPQWJBMnBCLEVBQVExcEIsVUFBWSwyQkFDcEIwcEIsRUFBUWxtQixVQUFZLDBJQUcrRVEsRUFBS3ljLFFBQVFxQixVQUFZLGlCQUFtQjlkLEVBQUt5YyxRQUFRcUIsVUFBWSxLQUN4SnRpQixFQUFLMEUsTUFBTTRxQyxZQUpQLG1HQU0rRTlxQyxFQUFLeWMsUUFBUXNCLFlBQWMsaUJBQW1CL2QsRUFBS3ljLFFBQVFzQixZQUFjLEtBQzVKdmlCLEVBQUswRSxNQUFNMHFDLGFBUFAsNEJBWWJsbEIsR0FNWHFKLE9BQVEsU0FBVW55QixHQUNkLE1BQU1tdUMsRUFBUzN2QyxLQUFLSyxRQUFRc0QsS0FBS2lvQyxhQUMzQmdFLEVBQU9ELEVBQU81QyxrQkFDZHJzQyxFQUFPVixLQUFLVSxLQUVsQixHQUFJQSxFQUFLbXZDLE9BQU9ydUMsR0FBVSxDQUN0QixNQUFNMnZCLEVBQVczdkIsRUFBUTJ2QixTQVN6QixPQVJBd2UsRUFBT3Q1QixhQUFhLGFBQWM4YSxHQUNsQ3p3QixFQUFLeUksU0FBU3dtQyxFQUFRLFVBQ2xCLE1BQU1odUMsS0FBS3d2QixHQUNYendCLEVBQUtzc0MsY0FBYzRDLEVBQU01dkMsS0FBS0ssUUFBUXNELEtBQUttQixNQUFNeXFDLFNBRWpEN3VDLEVBQUtzc0MsY0FBYzRDLEVBQU01dkMsS0FBS0ssUUFBUXNELEtBQUttQixNQUFNMnFDLFNBRzlDLEVBT1gsT0FMSUUsRUFBT3pkLGdCQUFnQixjQUN2Qnh4QixFQUFLc3NDLGNBQWM0QyxFQUFNNXZDLEtBQUtLLFFBQVFzRCxLQUFLbUIsTUFBTTJxQyxRQUNqRC91QyxFQUFLd0ksWUFBWXltQyxFQUFRLFdBR3RCLEdBTVhodEMsR0FBSSxXQUNBLE1BQU1zcEIsRUFBY2pzQixLQUFLSyxRQUFRc0QsS0FDM0JBLEVBQU9zb0IsRUFBWW9qQixNQUNuQkMsRUFBY3JqQixFQUFZMmYsYUFBYS9wQyxhQUFhLGVBQWlCLEdBRTNFLEdBQUl5dEMsSUFBZ0JyakIsRUFBWXFqQixZQUFhLENBQ3pDLElBQUssSUFBSXp4QyxFQUFJLEVBQUc0SixFQUFNOUQsRUFBSzJDLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3BDeXhDLElBQWdCM3JDLEVBQUs5RixHQUFHZ0UsYUFBYSxnQkFDckM3QixLQUFLVSxLQUFLeUksU0FBU3hGLEVBQUs5RixHQUFJLFVBRTVCbUMsS0FBS1UsS0FBS3dJLFlBQVl2RixFQUFLOUYsR0FBSSxVQUl2Q291QixFQUFZcWpCLFlBQWNBLElBSWxDUSxTQUFVLFNBQVV0bUMsRUFBU3VtQyxFQUFlQyxHQUN4QyxJQUFJQyxFQUFRandDLEtBQUtrd0MsV0FDYjdjLEVBQW1CMGMsR0FBZ0IvdkMsS0FBS213QyxrQ0FBaUMsR0FFN0UsR0FBK0IsSUFBM0I5YyxFQUFnQi9zQixPQUFjLENBQzlCLEdBQUl5cEMsRUFBZSxPQUduQixHQUZBRSxFQUFRandDLEtBQUtvd0MsaUJBQWlCSCxFQUFPLE1BQ3JDNWMsRUFBa0JyekIsS0FBS213QyxrQ0FBaUMsR0FDekIsSUFBM0I5YyxFQUFnQi9zQixPQUFjLE9BR3RDLE1BQU01RixFQUFPVixLQUFLVSxLQUNsQkEsRUFBSzJ2QyxZQUFZaGQsR0FBaUIsR0FHbEMsSUFBSWlkLEVBQVdqZCxFQUFnQixHQUMzQmtkLEVBQVVsZCxFQUFnQkEsRUFBZ0Ivc0IsT0FBUyxHQUNuRGtxQyxHQUFTOXZDLEVBQUswL0IsV0FBV2tRLEtBQWE1dkMsRUFBSzRuQyxZQUFZZ0ksSUFBZUEsRUFBU3JXLHVCQUFzRXFXLEVBQVNyVyx1QkFBdERxVyxFQUFTN21DLFdBQVd3d0IsdUJBQzVId1csR0FBWS92QyxFQUFLMC9CLFdBQVdtUSxLQUFZN3ZDLEVBQUs0bkMsWUFBWWlJLElBQWNBLEVBQVFyVyxtQkFBNkRxVyxFQUFRclcsbUJBQWhEcVcsRUFBUTltQyxXQUFXeXdCLG1CQUUzSCxNQUFNd1csRUFBY1QsRUFBTVUsVUFDcEJDLEVBQWMsQ0FDaEJ4YyxHQUFJNmIsRUFBTVksZUFDVkMsR0FBS2IsRUFBTVksaUJBQW1CWixFQUFNYyxjQUFnQnJ3QyxFQUFLc3dDLG1CQUFtQmYsRUFBTVksaUJBQXlDLElBQXRCWixFQUFNZ0IsYUFBeUMsSUFBcEJoQixFQUFNaUIsVUFBbUJqQixFQUFNaUIsVUFBWWpCLEVBQU1nQixZQUNqTDNjLEdBQUkyYixFQUFNYyxhQUNWSSxHQUFJbEIsRUFBTWlCLFdBRWQsSUFBSUUsRUFBYSxLQUNiQyxHQUFXLEVBRWYsSUFBSyxJQUFJeHpDLEVBQUksRUFBRzRKLEVBQU00ckIsRUFBZ0Ivc0IsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDbkQsSUFBSzZDLEVBQUttdkMsT0FBT252QyxFQUFLNHdDLHNCQUFzQmplLEVBQWdCeDFCLEdBQUksU0FBVTJ5QixHQUN0RSxPQUFPeHdCLEtBQUtzeEMsc0JBQXNCOWdCLElBQVlBLElBQVk2QyxFQUFnQngxQixJQUM1RXdCLEtBQUtxQixLQUFTLENBQ1oyd0MsR0FBVyxFQUNYLE1BSVIsSUFBSUEsR0FBY2IsR0FBVUYsRUFBU3huQyxVQUFZMG5DLEVBQU0xbkMsU0FBV1UsSUFBWWduQyxFQUFNMW5DLFFBQVErakMsZUFBcUI0RCxHQUFhRixFQUFRem5DLFVBQVkybkMsRUFBUzNuQyxTQUFXVSxJQUFZaW5DLEVBQVMzbkMsUUFBUStqQyxjQXVENUwsQ0FDSCxNQUFNMEUsRUFBY2YsRUFBUUEsRUFBTS9tQyxXQUFhK21DLEVBQ3pDZ0IsRUFBaUJmLEVBQVdBLEVBQVNobkMsV0FBYWduQyxFQUN4REQsRUFBUWUsSUFBZ0I3d0MsRUFBSytvQixhQUFhOG5CLElBQWdCQSxFQUFZcGdCLFdBQWEzbkIsRUFBVStuQyxFQUFjZixFQUMzR0MsRUFBV2UsSUFBbUI5d0MsRUFBSytvQixhQUFhK25CLElBQW1CQSxFQUFlcmdCLFdBQWEzbkIsRUFBVWdvQyxFQUFpQmYsRUFFMUgsTUFBTWdCLEVBQVdqQixHQUFTQSxFQUFNMW5DLFVBQVlVLEVBQ3RDa29DLEVBQWNqQixHQUFZQSxFQUFTM25DLFVBQVlVLEVBRXJELElBQUk3RixFQUFPOHRDLEVBQVdqQixFQUFROXZDLEVBQUtDLGNBQWM2SSxHQUM3Q21vQyxFQUFZLEtBQ1pDLEVBQVcsS0FDWEMsRUFBWSxLQUNaQyxFQUFlLEtBRW5CLE1BQU1DLEVBQWdCLFNBQVV2aEIsR0FDNUIsT0FBUXh3QixLQUFLc29DLFlBQVk5WCxLQUFheHdCLEtBQUs2dkMsT0FBT3JmLElBQ3BEbnhCLEtBQUtxQixHQUVQLElBQUssSUFBeUNzeEMsRUFBU0MsRUFBTUMsRUFBUUMsRUFBTUMsRUFBY0MsRUFBWUMsRUFBV0MsRUFBWUMsRUFBbkgzMEMsRUFBSSxFQUFHNEosRUFBTTRyQixFQUFnQi9zQixPQUFnR3pJLEVBQUk0SixFQUFLNUosSUFFM0ksR0FEQW8wQyxFQUFPNWUsRUFBZ0J4MUIsR0FDUSxJQUEzQm8wQyxFQUFLeDdCLFdBQVduUSxRQUFpQjVGLEVBQUsreEMsb0JBQW9CUixHQUE5RCxDQXNCQSxHQWxCQUUsRUFBTzllLEVBQWdCeDFCLEVBQUksR0FDM0J1MEMsRUFBZUgsRUFBS3hvQyxXQUNwQjRvQyxFQUFhRixFQUFPQSxFQUFLMW9DLFdBQWEsS0FDdEN5b0MsRUFBU3h4QyxFQUFLMC9CLFdBQVc2UixHQUN6Qk8sRUFBVzl4QyxFQUFLdS9CLHFCQUFxQm1TLEdBQWdCQSxFQUFlLEtBQ3BFRSxFQUFZSixJQUFXeHhDLEVBQUsrb0IsYUFBYTJvQixHQUFnQkEsRUFBYTNvQyxXQUFhMm9DLEVBQ25GRyxFQUFhTCxJQUFXeHhDLEVBQUsrb0IsYUFBYTJvQixJQUFrQkQsR0FBUXp4QyxFQUFLMC9CLFdBQVdrUyxHQUFjRixFQUFlQSxFQUFhNUcsWUFBY3lHLEVBQUt6RyxZQUVqSndHLEVBQVV0eEMsRUFBS0MsY0FBYyxNQUM3QkQsRUFBS2d5QyxxQkFBcUJWLEVBQVNDLEdBRXhCLElBQVBwMEMsR0FBWSt5QyxFQUFZeGMsS0FBTzZkLElBQy9CckIsRUFBWXhjLEdBQUs0ZCxHQUVqQm4wQyxJQUFNNEosRUFBTSxHQUFLbXBDLEVBQVl0YyxLQUFPMmQsSUFDcENyQixFQUFZdGMsR0FBSzBkLEdBR2pCdHhDLEVBQUs0bkMsWUFBWTJKLEdBQU8sQ0FDeEIsTUFBTVUsRUFBTyxRQUFRaHhDLEtBQUtzd0MsRUFBSzlnQixVQUMxQndoQixJQUFNWCxFQUFRNXRDLFVBQVksUUFDL0I0dEMsRUFBUTV0QyxXQUFhNnRDLEVBQUs3N0IsVUFDdEJ1OEIsSUFBTVgsRUFBUTV0QyxXQUFhLFlBQzVCLENBQ0gsTUFBTXd1QyxFQUFZWCxFQUFLeDdCLFdBQ3ZCLEtBQU9tOEIsRUFBVSxJQUNiWixFQUFRL3dDLFlBQVkyeEMsRUFBVSxJQUd0Q2p2QyxFQUFLMUMsWUFBWSt3QyxHQUVaRyxJQUFNUCxFQUFXanVDLEdBQ2pCd3VDLEdBQVFHLElBQWNELElBQWMzeEMsRUFBS3UvQixxQkFBcUJzUyxLQUMxRFosSUFBV0EsRUFBWWh1QyxHQUN0Qjh0QyxHQUFhVSxHQUFRRyxJQUFjRCxHQUFpQkYsR0FBUXp4QyxFQUFLbXZDLE9BQU93QyxJQUFlQSxJQUFlRCxHQUNwR3p1QyxFQUFLOEYsYUFBZTZvQyxHQUFXQSxFQUFVelMsYUFBYWw4QixFQUFNNHVDLElBSXhFN3hDLEVBQUtzcEIsV0FBV2lvQixHQUNaUixHQUEwQixPQUFkSSxJQUFvQkEsRUFBWWx1QyxFQUFLaWMsU0FBU3RaLE9BQVMsR0FDbkU2ckMsSUFBU3p4QyxFQUFLNHdDLHNCQUFzQmUsRUFBWU4sS0FBbUJyeEMsRUFBSzR3QyxzQkFBc0JjLEVBQWNMLElBQW1CcnhDLEVBQUttdkMsT0FBT3dDLElBQWUzeEMsRUFBS212QyxPQUFPdUMsSUFBaUIxeEMsRUFBS215QyxnQkFBZ0JSLEtBQWdCM3hDLEVBQUtteUMsZ0JBQWdCVCxNQUNqUHp1QyxFQUFPakQsRUFBS0MsY0FBYzZJLElBRzFCZ3BDLEdBQXlDLElBQTdCQSxFQUFTNXlCLFNBQVN0WixRQUFjNUYsRUFBS3NwQixXQUFXd29CLFFBaEQ1RDl4QyxFQUFLc3BCLFdBQVdpb0IsR0FtRHBCSixJQUNBRixFQUFZQSxFQUFVL3hCLFNBQVNpeUIsSUFHL0JILElBQ0FJLEVBQWVudUMsRUFBS2ljLFNBQVN0WixPQUFTLEVBQ3RDM0MsRUFBS1MsV0FBYXFzQyxFQUFTcnNDLFVBQzNCd3RDLEVBQVdqdUMsRUFBS2ljLFNBQVNreUIsR0FDekJweEMsRUFBS3NwQixXQUFXeW1CLFFBeEk0TCxDQUNoTixHQUFJVCxFQUNBLElBQUssSUFBSW55QyxFQUFJLEVBQUc0SixFQUFNNHJCLEVBQWdCL3NCLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ25ELElBQUssSUFBSWkxQyxFQUFJajFDLEVBQUksRUFBR2kxQyxHQUFLLEVBQUdBLElBQ3hCLEdBQUl6ZixFQUFnQnlmLEdBQUd4aUIsU0FBUytDLEVBQWdCeDFCLElBQUssQ0FDakR3MUIsRUFBZ0JwcUIsT0FBT3BMLEVBQUcsR0FDMUJBLElBQUs0SixJQUNMLE1BTWhCLE1BQU1zckMsRUFBZ0JyeUMsRUFBSzR3QyxzQkFBc0JoQixHQUMzQ3ZyQyxFQUFTZ3VDLEdBQWlCQSxFQUFjanFDLFVBQVlVLEVBQzFELElBQUl3cEMsRUFBVUMsRUFDZCxNQUFNbEIsRUFBZ0IsU0FBVXZoQixHQUM1QixPQUFReHdCLEtBQUtzb0MsWUFBWTlYLElBQzNCbnhCLEtBQUtxQixHQUVGcUUsSUFBUWt1QyxFQUFXdnlDLEVBQUtDLGNBQWM2SSxJQUUzQyxJQUFLLElBQXlDN0ssRUFBR0wsRUFBeENULEVBQUksRUFBRzRKLEVBQU00ckIsRUFBZ0Ivc0IsT0FBY3pJLEVBQUk0SixFQUFLNUosSUFDekRTLEVBQUlvQyxFQUFLNHdDLHNCQUFzQmplLEVBQWdCeDFCLEdBQUlrMEMsR0FDOUN6ekMsR0FBTW9DLEVBQUttdkMsT0FBT3Z4QyxLQUVsQkssRUFJR0EsSUFBTUwsR0FDRjB4QyxHQUFVdHZDLEVBQUswL0IsV0FBVzloQyxFQUFFbUwsWUFDNUJ6SixLQUFLOEIsUUFBUTZCLEtBQUt1dkMsY0FBY2wxQyxLQUFLZ0MsS0FBTWd6QyxFQUFTamlDLEdBRXBEcWdDLEVBQWFweEMsS0FBSytyQyx5QkFBeUJpSCxFQUFTamlDLEVBQUUsR0FBR3RILFdBQVl1cEMsRUFBU2ppQyxFQUFHa2lDLEdBQVUsR0FBTyxHQUd0RzMwQyxFQUFJKzBCLEVBQWdCeDFCLEdBQUc0TCxXQUNsQjFFLElBQVFrdUMsRUFBV3Z5QyxFQUFLQyxjQUFjNkksSUFFM0M3SyxFQUFJTCxFQUNKMDBDLEVBQVcsQ0FBQ3IwQyxFQUFHQSxFQUFHb1MsRUFBRyxDQUFDclEsRUFBS2k1QixpQkFBaUJ0RyxFQUFnQngxQixHQUFJLFNBRWhFbTFDLEVBQVNqaUMsRUFBRXBJLEtBQUtqSSxFQUFLaTVCLGlCQUFpQnRHLEVBQWdCeDFCLEdBQUksUUFoQjlEYyxFQUFJTCxFQUNKMDBDLEVBQVcsQ0FBQ3IwQyxFQUFHQSxFQUFHb1MsRUFBRyxDQUFDclEsRUFBS2k1QixpQkFBaUJ0RyxFQUFnQngxQixHQUFJLFNBbUJoRUEsSUFBTTRKLEVBQU0sSUFDUnVvQyxHQUFVdHZDLEVBQUswL0IsV0FBVzloQyxFQUFFbUwsWUFDNUJ6SixLQUFLOEIsUUFBUTZCLEtBQUt1dkMsY0FBY2wxQyxLQUFLZ0MsS0FBTWd6QyxFQUFTamlDLEdBRXBEcWdDLEVBQWFweEMsS0FBSytyQyx5QkFBeUJpSCxFQUFTamlDLEVBQUUsR0FBR3RILFdBQVl1cEMsRUFBU2ppQyxFQUFHa2lDLEdBQVUsR0FBTyxLQTBGbEgsT0FEQWp6QyxLQUFLMnRDLFdBQWEsS0FDVitDLEVBQTRCVSxFQUFkUixHQUcxQnNDLGNBQWUsU0FBVWgwQixHQUNyQixNQUFNaTBCLEVBQVFqMEIsRUFBTSxHQUNkazBCLEVBQU9sMEIsRUFBTUEsRUFBTTVZLE9BQVMsR0FDNUI2ckMsRUFBT2lCLEVBQUtsWixtQkFDWm1aLEVBQWFGLEVBQU0xcEMsV0FDbkI2cEMsRUFBVUQsRUFBVzVwQyxXQUFXeXdCLG1CQUNoQ3p3QixFQUFhNHBDLEVBQVc1cEMsV0FBV0EsV0FFekMsSUFBSyxJQUFJdkwsRUFBSSxFQUFHcTFDLEVBQU9yMEIsRUFBTTVZLE9BQVFwSSxFQUFJcTFDLEVBQU1yMUMsSUFDM0N1TCxFQUFXbzJCLGFBQWEzZ0IsRUFBTWhoQixHQUFJbzFDLEdBR3RDLEdBQUluQixHQUFRa0IsRUFBV3p6QixTQUFTdFosT0FBUyxFQUFHLENBQ3hDLE1BQU1rdEMsRUFBVUgsRUFBVy9VLFdBQVUsR0FDL0IxZSxFQUFXeXpCLEVBQVc1OEIsV0FDdEJwRixFQUFRclIsS0FBS1UsS0FBSyt5QyxpQkFBaUJ0QixHQUN6QyxLQUFPdnlCLEVBQVN2TyxJQUNabWlDLEVBQVF2eUMsWUFBWTJlLEVBQVN2TyxJQUVqQytoQyxFQUFLbnlDLFlBQVl1eUMsR0FHYyxJQUEvQkgsRUFBV3p6QixTQUFTdFosUUFBY3RHLEtBQUtVLEtBQUtzcEIsV0FBV3FwQixHQUMzRHJ6QyxLQUFLVSxLQUFLZ3pDLGNBQWNqcUMsR0FFeEIsTUFBTWtxQyxFQUFPM3pDLEtBQUtVLEtBQUtrekMsa0JBQWtCVCxFQUFPQyxHQUVoRCxNQUFPLENBQ0hTLEdBQUlWLEVBQU0xcEMsV0FDVjJxQixHQUFJdWYsRUFBS3ZmLEdBQ1RFLEdBQUlxZixFQUFLcmYsS0FJakJ3ZixlQUFnQixTQUFVN3RCLEVBQVE4cEIsR0FFOUIsTUFBTWdFLEdBRE5oRSxFQUFpQkEsR0FBZ0IvdkMsS0FBS3N6QixzQkFBc0JscUIsT0FBTyxTQUFVNHFDLEdBQU0sT0FBT2gwQyxLQUFLb2dDLFdBQVc0VCxJQUFPMzBDLEtBQUtXLEtBQUtVLFFBQzVGNEYsT0FDL0IsR0FBaUIsSUFBYnl0QyxJQUFvQjl0QixJQUFZam1CLEtBQUtVLEtBQUswL0IsV0FBVzJQLEVBQWMsR0FBRzlWLDBCQUE0Qmo2QixLQUFLVSxLQUFLMC9CLFdBQVcyUCxFQUFjZ0UsRUFBVyxHQUFHN1osb0JBQ25KLE1BQU8sQ0FDSDlGLEdBQUkyYixFQUFjLEdBQ2xCZSxHQUFJLEVBQ0p4YyxHQUFJeWIsRUFBY2dFLEVBQVcsR0FDN0I1QyxHQUFJLEdBSVosSUFBSWtDLEVBQWF0RCxFQUFjLEdBQUd0bUMsV0FDOUJ3cUMsRUFBV2xFLEVBQWNnRSxFQUFXLEdBQ3BDOUQsRUFBUSxLQUVaLEdBQUlocUIsRUFBUSxDQUNSLEdBQUlvdEIsSUFBZVksRUFBU3hxQyxZQUFjekosS0FBS1UsS0FBS212QyxPQUFPb0UsRUFBU3hxQyxXQUFXQSxhQUFld3FDLEVBQVMvWixtQkFFbkcsSUFEQStaLEVBQVdBLEVBQVMvWixtQkFDYitaLEdBQ0hsRSxFQUFjcG5DLEtBQUtzckMsR0FDbkJBLEVBQVdBLEVBQVMvWixtQkFHNUIrVixFQUFRandDLEtBQUs4QixRQUFRNkIsS0FBS21zQyxTQUFTOXhDLEtBQUtnQyxLQUFNcXpDLEVBQVdsaUIsU0FBUzBiLGNBQWVrRCxHQUFlLE9BQzdGLENBQ0gsSUFBSW1FLEVBQVlsMEMsS0FBS1UsS0FBS0MsY0FBYzB5QyxFQUFXbGlCLFVBQy9DZ2pCLEVBQU9wRSxFQUFjLEdBQUc5Vix1QkFDeEJrWSxFQUFPOEIsRUFBUy9aLG1CQUNwQixNQUFNa2EsRUFBVyxDQUFFeDBDLEVBQUcsS0FBTThCLEVBQUcsS0FBTTJ5QyxHQUFJaEIsRUFBWVcsR0FBSVgsR0FFekQsSUFBSyxJQUEyQm4xQyxFQUF2QkwsRUFBSSxFQUFHNEosRUFBTXNzQyxFQUFhbDJDLEVBQUk0SixFQUFLNUosSUFDeENLLEVBQUk2eEMsRUFBY2x5QyxHQUNkSyxFQUFFdUwsYUFBZTRwQyxJQUNqQnJ6QyxLQUFLOEIsUUFBUTZCLEtBQUsyd0MsWUFBWXQyQyxLQUFLZ0MsS0FBTXF6QyxFQUFZYSxFQUFXQyxFQUFNaEMsRUFBTWlDLEdBQzVFZixFQUFhbjFDLEVBQUV1TCxXQUNmeXFDLEVBQVlsMEMsS0FBS1UsS0FBS0MsY0FBYzB5QyxFQUFXbGlCLFdBR25EZ2pCLEVBQU9qMkMsRUFBRSs3Qix1QkFDVGtZLEVBQU9qMEMsRUFBRWc4QixtQkFDVGdhLEVBQVVqekMsWUFBWS9DLEdBRzFCOEIsS0FBSzhCLFFBQVE2QixLQUFLMndDLFlBQVl0MkMsS0FBS2dDLEtBQU1xekMsRUFBWWEsRUFBV0MsRUFBTWhDLEVBQU1pQyxHQUU1RSxNQUFNaGdCLEVBQUtwMEIsS0FBS1UsS0FBSzZ6QyxnQkFBZ0JILEVBQVN4MEMsRUFBR3cwQyxFQUFTQyxJQUNwRC9mLEVBQUt0MEIsS0FBS1UsS0FBSzZ6QyxnQkFBZ0JILEVBQVMxeUMsRUFBRzB5QyxFQUFTSixJQUMxRC9ELEVBQVEsQ0FDSjdiLEdBQUlBLEVBQ0owYyxHQUFJLEVBQ0p4YyxHQUFJQSxFQUNKNmMsR0FBSTdjLEVBQUcvdUIsWUFBWWUsUUFJM0IsT0FBTzJwQyxHQUdYcUUsWUFBYSxTQUFVakIsRUFBWWEsRUFBV0MsRUFBTWhDLEVBQU1pQyxHQUN0RCxJQUFJSSxHQUFhLEVBRWpCLEdBQUlMLEdBQVFELEVBQVVwckMsVUFBWXFyQyxFQUFLcnJDLFFBQVMsQ0FDNUMsTUFBTThXLEVBQVdzMEIsRUFBVXQwQixTQUMzQixLQUFPQSxFQUFTLElBQ1p1MEIsRUFBS2x6QyxZQUFZMmUsRUFBUyxJQUc5QnMwQixFQUFZQyxFQUNaSyxHQUFhLEVBR2pCLEdBQUlyQyxHQUFRK0IsRUFBVXByQyxVQUFZcXBDLEVBQUtycEMsUUFBUyxDQUM1QyxNQUFNOFcsRUFBV3V5QixFQUFLdnlCLFNBQ3RCLEtBQU9BLEVBQVMsSUFDWnMwQixFQUFVanpDLFlBQVkyZSxFQUFTLElBR25DLE1BQU1pSyxFQUFPc29CLEVBQUtqWSxtQkFDbEJpWSxFQUFLMW9DLFdBQVdvTixZQUFZczdCLEdBQzVCQSxFQUFPdG9CLEVBR1gsSUFBSzJxQixFQUFZLENBQ1R4MEMsS0FBS1UsS0FBSzAvQixXQUFXK1QsS0FDckJkLEVBQWFjLEVBQ2JoQyxFQUFPLE1BR1hrQixFQUFXeFQsYUFBYXFVLEVBQVcvQixHQUU5QmlDLEVBQVN4MEMsSUFDVncwQyxFQUFTeDBDLEVBQUlJLEtBQUtVLEtBQUsrekMsWUFBWVAsRUFBVW5ILGtCQUFrQi8yQixXQUFZcTlCLEVBQVksTUFDdkZlLEVBQVNDLEdBQUtoQixHQUdsQixNQUFNcUIsRUFBU3JCLEVBQVcvaUIsU0FBUzhqQixFQUFTQyxJQUFNcjBDLEtBQUtVLEtBQUsrekMsWUFBWUwsRUFBU0MsR0FBSWhCLEdBQWMsS0FDbkdlLEVBQVMxeUMsRUFBSTFCLEtBQUtVLEtBQUsrekMsWUFBWVAsRUFBVVMsaUJBQWlCMytCLFdBQVlxOUIsRUFBWSxNQUN0RmUsRUFBU0osR0FBS1gsRUFFZHJ6QyxLQUFLVSxLQUFLZ3pDLGNBQWNMLEVBQVksQ0FBQ2UsRUFBU3gwQyxFQUFHdzBDLEVBQVMxeUMsRUFBR2d6QyxJQUFTLEdBQ3RFMTBDLEtBQUtVLEtBQUtrMEMsZ0JBQWdCdkIsR0FDdEJxQixJQUFRTixFQUFTQyxHQUFLcjBDLEtBQUtVLEtBQUs2ekMsZ0JBQWdCRyxFQUFRckIsSUFHaEUsT0FBT2EsR0FHWHhwQixPQUFRLFNBQVVocEIsR0FDZEEsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUVGLElBQUlwRCxFQUFTRixFQUFFRSxPQUNYNEgsRUFBVSxHQUVkLE1BQVFBLElBQVksUUFBUTdILEtBQUtDLEVBQU9rSCxVQUNwQ1UsRUFBVTVILEVBQU9DLGFBQWEsZ0JBQzlCRCxFQUFTQSxFQUFPNkgsV0FHcEIsSUFBS0QsRUFBUyxPQUVkLE1BQU15bUMsRUFBUWp3QyxLQUFLOEIsUUFBUTZCLEtBQUttc0MsU0FBUzl4QyxLQUFLZ0MsS0FBTXdKLEVBQVMsTUFBTSxHQUMvRHltQyxHQUFPandDLEtBQUtvekIsU0FBUzZjLEVBQU03YixHQUFJNmIsRUFBTWEsR0FBSWIsRUFBTTNiLEdBQUkyYixFQUFNa0IsSUFFN0RueEMsS0FBS21yQixhQUdMbnJCLEtBQUswekIsUUFBUS9xQixNQUFLLEtOdGF3RXFhLE1PdEJuRixDQUNYNWtCLEtBQU0sUUFDTjJDLFFBQVMsVUFDVFosSUFBSyxTQUFVQyxFQUFNOHBCLEdBQ2pCLE1BQU03cEIsRUFBVUQsRUFBS0MsUUFDckIsSUFBSXcwQyxFQUFleDBDLEVBQVEyaUIsTUFBUSxDQUMvQndTLFNBQVUsS0FDVnNmLFdBQVksS0FDWkMsV0FBWSxLQUNaQyxZQUFhLEtBQ2JDLFNBQVUsR0FDVkMsV0FBVyxFQUNYQyxjQUFjLEVBQ2RDLEtBQU1oMUMsRUFBS21DLFFBQVEwdEIsSUFDbkJvbEIsa0JBQWdFLFFBQTdDajFDLEVBQUttQyxRQUFRK3lDLDRCQUNoQ0MsV0FBWSxLQUNaQyxhQUFjLEtBQ2RDLFlBQWEsS0FDYkMsWUFBYSxLQUNiQyxVQUFXLEtBQ1hDLFFBQVN4MUMsRUFBS3dFLEtBQUtraEIsV0FBV29CLFFBQzlCMnVCLFFBQVN6MUMsRUFBS3dFLEtBQUtraEIsV0FBV3FCLFFBQzlCMnVCLGtCQUFtQixFQUNuQkMsaUJBQWtCLEVBQ2xCQyxRQUFTLEVBQ1RDLFVBQVcsRUFDWEMsb0JBQXFCLEVBQ3JCQyxtQkFBb0IsRUFDcEJDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCdnhDLE1BQU8sQ0FDSHd4QyxVQUFXbDJDLEVBQUswRSxNQUFNd3hDLFVBQ3RCQyxVQUFXbjJDLEVBQUswRSxNQUFNeXhDLFlBSzFCanNCLEVBQVV0cUIsS0FBS3VxQixXQUFXbnFCLEdBQzFCbzJDLEVBQWNsc0IsRUFBUWhtQixjQUFjLCtCQUV4Q3V3QyxFQUFhNEIsZUFBaUJuc0IsRUFBUWhtQixjQUFjLDhCQUNwRHV3QyxFQUFhNkIsaUJBQW1CcHNCLEVBQVFobUIsY0FBYyxnQ0FDdER1d0MsRUFBYThCLGFBQWVyc0IsRUFBUWhtQixjQUFjLDBCQUM5Q2xFLEVBQUttQyxRQUFRMHRCLE1BQUs0a0IsRUFBYTRCLGVBQWUzMUMsTUFBTTRQLEtBQVEsU0FHaEUsSUFBSWttQyxFQUFrQjUyQyxLQUFLNjJDLG9CQUFvQnoyQyxHQUMvQ3kwQyxFQUFhK0IsZ0JBQWtCQSxFQUMvQi9CLEVBQWFpQyxhQUFlRixFQUFnQnR5QyxjQUFjLHFCQUMxRHV3QyxFQUFhVSxXQUFhcUIsRUFBZ0J0eUMsY0FBYyxtQ0FDeER1d0MsRUFBYWtDLGtCQUFvQkgsRUFBZ0J0eUMsY0FBYywyQkFDL0R1d0MsRUFBYVcsYUFBZW9CLEVBQWdCdHlDLGNBQWMscUJBRzFELElBQUkweUMsRUFBWWgzQyxLQUFLaTNDLDBCQUEwQjcyQyxFQUFNeTBDLEVBQWFRLG1CQUNsRVIsRUFBYW1DLFVBQVlBLEVBQ3pCbkMsRUFBYWMsVUFBWXFCLEVBQVUxeUMsY0FBYyxxQkFDakR1d0MsRUFBYVksWUFBY3VCLEVBQVUxeUMsY0FBYywyQkFDbkR1d0MsRUFBYWEsWUFBY3NCLEVBQVUxeUMsY0FBYywyQkFDbkR1d0MsRUFBYXFDLHFCQUF1QkYsRUFBVTF5QyxjQUFjLDJCQUM1RHV3QyxFQUFhc0MscUJBQXVCSCxFQUFVMXlDLGNBQWMsMkJBRzVEa3lDLEVBQVluMUMsaUJBQWlCLFlBQWFyQixLQUFLbzNDLHdCQUF3Qi8zQyxLQUFLZSxFQUFNeTBDLElBQ2xGMkIsRUFBWW4xQyxpQkFBaUIsUUFBU3JCLEtBQUtxM0MsWUFBWWg0QyxLQUFLZSxJQUM1RDQyQyxFQUFVMzFDLGlCQUFpQixRQUFTckIsS0FBS3MzQyx3QkFBd0JqNEMsS0FBS2UsSUFDdEV3MkMsRUFBZ0J2MUMsaUJBQWlCLFFBQVNyQixLQUFLczNDLHdCQUF3Qmo0QyxLQUFLZSxJQUc1RUEsRUFBS3VxQixlQUFlM3FCLEtBQUs1QixLQUFNOHJCLEVBQWVJLEdBRzlDanFCLEVBQVFtQixRQUFRQyxTQUFTUixZQUFZKzFDLEdBQ3JDMzJDLEVBQVFtQixRQUFRQyxTQUFTUixZQUFZMjFDLEdBR3JDdHNCLEVBQVUsS0FBTWtzQixFQUFjLEtBQU1RLEVBQVksS0FBTUosRUFBa0IsS0FBTS9CLEVBQWUsTUFHakd0cUIsV0FBWSxTQUFVbnFCLEdBQ2xCLE1BQU1rcUIsRUFBVWxxQixFQUFLTSxLQUFLQyxjQUFjLE9BVXhDLE9BVEEycEIsRUFBUTFwQixVQUFZLCtCQUNwQjBwQixFQUFRbG1CLFVBQVksaVBBUWJrbUIsR0FHWHVzQixvQkFBcUIsU0FBVXoyQyxHQUMzQixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUNaRSxFQUFRMUUsRUFBSzBFLE1BQ2J5eUMsRUFBY24zQyxFQUFLTSxLQUFLQyxjQUFjLE9BeUI1QyxPQXZCQTQyQyxFQUFZMzJDLFVBQVksb0NBQ3hCMjJDLEVBQVluekMsVUFBWSx5SEFJUlUsRUFBTXd4QyxVQUNOLGdFQUFrRTF4QyxFQUFLa2hCLFdBQVdvQixRQUwxRSx1SEFRUnBpQixFQUFNMHlDLG1CQUNOLGdFQUFrRTV5QyxFQUFLa2hCLFdBQVdVLGlCQVQxRSxpSEFZUjFoQixFQUFNMnlDLGFBQ04sZ0VBQWtFN3lDLEVBQUtraEIsV0FBV3NCLFlBYjFFLGdHQWdCUnRpQixFQUFNa3VCLE9BQ04sZ0VBQWtFcHVCLEVBQUtraEIsV0FBV0csT0FqQjFFLHNDQXNCakJzeEIsR0FHWE4sMEJBQTJCLFNBQVU3MkMsRUFBTWkxQyxHQUN2QyxNQUFNendDLEVBQU94RSxFQUFLd0UsS0FDWkUsRUFBUTFFLEVBQUswRSxNQUNieXlDLEVBQWNuM0MsRUFBS00sS0FBS0MsY0FBYyxPQW1ENUMsT0FqREE0MkMsRUFBWTMyQyxVQUFZLHlDQUN4QjIyQyxFQUFZbnpDLFdBQWFpeEMsRUFBb0IsR0FBSyw0Q0FBMUIsNEpBR1p2d0MsRUFBTTR5QyxpQkFDTixnRUFBa0U5eUMsRUFBS2toQixXQUFXSSxlQUp0RSwySkFPWnBoQixFQUFNNnlDLGlCQUNOLGdFQUFrRS95QyxFQUFLa2hCLFdBQVdLLGVBUnRFLGlIQVdacmhCLEVBQU04eUMsV0FDTixnRUFBa0VoekMsRUFBS2toQixXQUFXTSxVQVp0RSwrSEFlWnRoQixFQUFNK3lDLFdBQ04sZ0VBQWtFanpDLEVBQUtraEIsV0FBV3VCLFdBaEJ0RSw2TEFxQlp2aUIsRUFBTWd6QyxtQkFDTixnRUFBa0VsekMsRUFBS2toQixXQUFXTyxtQkF0QnRFLHNJQXlCWnZoQixFQUFNaXpDLG9CQUNOLGdFQUFrRW56QyxFQUFLa2hCLFdBQVdRLGtCQTFCdEUsa0hBNkJaeGhCLEVBQU1rekMsY0FDTixnRUFBa0VwekMsRUFBS2toQixXQUFXUyxhQTlCdEUsd0hBaUNaemhCLEVBQU1tekMsV0FDTixnRUFBa0VyekMsRUFBS2toQixXQUFXd0IsV0FsQ3RFLGdRQXVDcUcxaUIsRUFBS2toQixXQUFXMEIsY0FBZ0IsaUJBQW1CNWlCLEVBQUtraEIsV0FBVzBCLGNBQWdCLEtBQ3hMNWlCLEVBQUtraEIsV0FBVzBCLGNBeENoQiw4R0F5Q3VHNWlCLEVBQUtraEIsV0FBV3lCLGdCQUFrQixpQkFBbUIzaUIsRUFBS2toQixXQUFXeUIsZ0JBQWtCLEtBQzlMM2lCLEVBQUtraEIsV0FBV3lCLGdCQTFDaEIsK0JBZ0RqQmd3QixHQUdYRixZQUFhLFdBQ1QsTUFBTWEsRUFBU2w0QyxLQUFLVSxLQUFLQyxjQUFjLFNBQ2pDdzNDLEVBQWNuNEMsS0FBSzhCLFFBQVFraEIsTUFBTW0xQixZQUVqQ2xuQyxFQUFJalIsS0FBS0ssUUFBUTJpQixNQUFNaXlCLFNBQVMsR0FDdEMsSUFBSXZWLEVBQUkxL0IsS0FBS0ssUUFBUTJpQixNQUFNaXlCLFNBQVMsR0FDaENtRCxFQUFZLFVBQ2hCLEtBQU8xWSxFQUFJLEdBQ1AwWSxHQUFhLE9BQVNELEVBQVluNkMsS0FBS2dDLEtBQU0sS0FBTWlSLEdBQUssVUFDdER5dUIsRUFFTjBZLEdBQWEsV0FDYkYsRUFBTzl6QyxVQUFZZzBDLEVBSW5CLEdBRmdCcDRDLEtBQUsrK0IsZ0JBQWdCbVosR0FBUSxHQUFPLEdBQU0sR0FFN0MsQ0FDVCxNQUFNRyxFQUFVSCxFQUFPNXpDLGNBQWMsVUFDckN0RSxLQUFLb3pCLFNBQVNpbEIsRUFBUyxFQUFHQSxFQUFTLEdBQ25DcjRDLEtBQUs4QixRQUFRa2hCLE1BQU1zMUIsbUJBQW1CdDZDLEtBQUtnQyxRQUluRG00QyxZQUFhLFNBQVVobkIsRUFBVW9uQixFQUFLQyxHQUdsQyxHQUZBcm5CLEVBQVdBLEVBQVN6akIsY0FFZjhxQyxFQU9FLENBQ0gsTUFBTWo2QixFQUFPdmUsS0FBS1UsS0FBS0MsY0FBY3d3QixHQUVyQyxPQURBNVMsRUFBS25hLFVBQVksa0JBQ1ZtYSxFQVZTLENBQ2hCLElBQUlrNkIsRUFBWSxHQUNoQixLQUFPRixFQUFNLEdBQ1RFLEdBQWEsSUFBS3RuQixFQUFXLHFCQUF1QkEsRUFBVyxJQUMvRG9uQixJQUVKLE9BQU9FLElBUWZyQix3QkFBeUIsU0FBVXZDLEVBQWNuekMsR0FDN0NBLEVBQUVzRCxrQkFFRixJQUFJaU0sRUFBSWpSLEtBQUtvRyxHQUFHdUIsS0FBSyt3QyxLQUFLaDNDLEVBQUVpM0MsUUFBVSxJQUNsQ2paLEVBQUkxL0IsS0FBS29HLEdBQUd1QixLQUFLK3dDLEtBQUtoM0MsRUFBRWszQyxRQUFVLElBQ3RDM25DLEVBQUlBLEVBQUksRUFBSSxFQUFJQSxFQUNoQnl1QixFQUFJQSxFQUFJLEVBQUksRUFBSUEsRUFFWm1WLEVBQWFPLE9BQ2JQLEVBQWE0QixlQUFlMzFDLE1BQU00UCxLQUFZLEdBQUpPLEVBQVMsR0FBTSxLQUN6REEsRUFBSSxHQUFLQSxHQUdiNGpDLEVBQWE0QixlQUFlMzFDLE1BQU13YixNQUFRckwsRUFBSSxLQUM5QzRqQyxFQUFhNEIsZUFBZTMxQyxNQUFNeWIsT0FBU21qQixFQUFJLEtBTy9DMS9CLEtBQUtVLEtBQUswdEMsVUFBVXlHLEVBQWE4QixhQUFjMWxDLEVBQUksTUFBUXl1QixHQUMzRG1WLEVBQWFJLFNBQVcsQ0FBQ2hrQyxFQUFHeXVCLElBR2hDNFksbUJBQW9CLFdBQ2hCLElBQUt0NEMsS0FBS0ssUUFBUTJpQixNQUFNeXpCLGVBQWdCLE9BRXhDLE1BQU1vQyxFQUFZNzRDLEtBQUtLLFFBQVEyaUIsTUFBTXl6QixlQUFlMzFDLE1BQzlDZzRDLEVBQWM5NEMsS0FBS0ssUUFBUTJpQixNQUFNMHpCLGlCQUFpQjUxQyxNQUV4RCszQyxFQUFVdjhCLE1BQVEsTUFDbEJ1OEIsRUFBVXQ4QixPQUFTLE1BQ25CdThCLEVBQVl4OEIsTUFBUSxPQUNwQnc4QixFQUFZdjhCLE9BQVMsT0FFckJ2YyxLQUFLVSxLQUFLMHRDLFVBQVVwdUMsS0FBS0ssUUFBUTJpQixNQUFNMnpCLGFBQWMsU0FDckQzMkMsS0FBS21yQixjQUdUdG9CLEtBQU0sV0FDRixNQUFNZ3lDLEVBQWU3MEMsS0FBS0ssUUFBUTJpQixNQUM1QisxQixFQUFjLzRDLEtBQUs4QixRQUFRa2hCLE1BSWpDLEdBRkErMUIsRUFBWUMsY0FBY2g3QyxLQUFLZ0MsTUFFM0IrNEMsRUFBWUUsZUFBZ0IsQ0FDNUIsTUFBTWxKLEVBQWdCZ0osRUFBWUUsZUFBZXJ3QyxpQkFBaUIsMkJBQ2xFLElBQUssSUFBSS9LLEVBQUksRUFBRzRKLEVBQU1zb0MsRUFBY3pwQyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUNqRG1DLEtBQUtVLEtBQUt3SSxZQUFZNm1DLEVBQWNseUMsR0FBSSwwQkFJaERrN0MsRUFBWUcsY0FBY2w3QyxLQUFLZ0MsTUFBTSxHQUVyQzYwQyxFQUFhcmYsU0FBVyxLQUN4QnFmLEVBQWFDLFdBQWEsS0FDMUJELEVBQWFFLFdBQWEsS0FDMUJGLEVBQWFHLFlBQWMsS0FDM0JILEVBQWFJLFNBQVcsR0FDeEJKLEVBQWFLLFdBQVksRUFDekJMLEVBQWFNLGNBQWUsRUFDNUJOLEVBQWFpQixrQkFBb0IsRUFDakNqQixFQUFha0IsaUJBQW1CLEVBQ2hDbEIsRUFBYW1CLFFBQVUsRUFDdkJuQixFQUFhb0IsVUFBWSxFQUN6QnBCLEVBQWFxQixvQkFBc0IsRUFDbkNyQixFQUFhc0IsbUJBQXFCLEVBQ2xDdEIsRUFBYXVCLGlCQUFtQixFQUNoQ3ZCLEVBQWF3QixpQkFBbUIsRUFFaEMwQyxFQUFZSSxRQUFTLEVBQ3JCSixFQUFZSyxlQUFpQixLQUM3QkwsRUFBWUUsZUFBaUIsS0FDN0JGLEVBQVlNLEtBQU8sS0FFbkJOLEVBQVlPLFdBQWEsS0FDekJQLEVBQVlRLGNBQWdCLEtBQzVCUixFQUFZUyxlQUFpQixNQUlqQ0MsMEJBQTJCLFNBQVVDLEdBQ2pDLE1BQU1YLEVBQWMvNEMsS0FBSzhCLFFBQVFraEIsTUFDM0I2eEIsRUFBZTcwQyxLQUFLSyxRQUFRMmlCLE1BRWxDLElBQUtoakIsS0FBS3d2QixlQUFla2hCLGNBQWdCcUksRUFBWVEsY0FHakQsT0FGQXY1QyxLQUFLOHpCLHNCQUNMOXpCLEtBQUtVLEtBQUt3SSxZQUFZd3dDLEVBQVcsMEJBSXJDLE1BQU1DLEVBQWU5RSxFQUFhcmYsVUFBWXgxQixLQUFLOEIsUUFBUWtoQixNQUFNaTJCLGdCQUFrQmo1QyxLQUFLVSxLQUFLaTVCLGlCQUFpQitmLEVBQVcsU0FDekg3RSxFQUFhSyxVQUFZbDFDLEtBQUtVLEtBQUs0RSxTQUFTcTBDLEVBQWMsc0JBQXFELFNBQTdCQSxFQUFhNzRDLE1BQU13YixRQUFzQnE5QixFQUFhNzRDLE1BQU13YixRQUFVdGMsS0FBS1UsS0FBSzRFLFNBQVNxMEMsRUFBYyxzQkFDekw5RSxFQUFhTSxhQUFlbjFDLEtBQUtVLEtBQUs0RSxTQUFTcTBDLEVBQWMsMEJBQStELFVBQW5DQSxFQUFhNzRDLE1BQU04NEMsWUFDNUdiLEVBQVljLGNBQWM3N0MsS0FBS2dDLEtBQU02MEMsRUFBYUssVUFBWSxlQUFpQixTQUUvRTZELEVBQVllLHlCQUF5Qjk3QyxLQUFLZ0MsS0FBTTI1QyxHQUNoRFosRUFBWWdCLHlCQUF5Qi83QyxLQUFLZ0MsS0FBTTA1QyxFQUFXWCxFQUFZSSxRQUVsRUosRUFBWUksUUFBUW41QyxLQUFLbTBCLGNBQWMwZ0IsRUFBYW1DLFVBQVduQyxFQUFhK0IsZ0JBQWlCbUMsRUFBWWwyQyxLQUFLeEQsS0FBS1csTUFBTzA1QyxFQUFXLFVBRzlJSSx5QkFBMEIsU0FBVUgsR0FDaEMzNUMsS0FBS2swQixzQkFBc0JsMEIsS0FBS0ssUUFBUTJpQixNQUFNNHpCLGdCQUFpQitDLEVBQWMsTUFBTyxDQUFDanBDLEtBQU0sRUFBRzBmLElBQUssS0FHdkcycEIseUJBQTBCLFNBQVVMLEVBQVdNLEdBQzNDLE1BQU1uRixFQUFlNzBDLEtBQUtLLFFBQVEyaUIsTUFDNUJnMEIsRUFBWW5DLEVBQWFtQyxVQUUvQmgzQyxLQUFLOEIsUUFBUWtoQixNQUFNaTNCLFlBQVlqOEMsS0FBS2dDLEtBQU0wNUMsRUFBV00sR0FFakRuRixFQUFhUSxrQkFDYnIxQyxLQUFLazBCLHNCQUFzQjhpQixFQUFXbkMsRUFBYXJmLFNBQVUsTUFBTyxDQUFDOWtCLEtBQU1ta0MsRUFBYStCLGdCQUFnQnptQixZQUFhQyxJQUFLLElBRTFIcHdCLEtBQUtrMEIsc0JBQXNCOGlCLEVBQVcwQyxFQUFXLFNBQVUsQ0FBQ2hwQyxLQUFNLEVBQUcwZixJQUFLLEtBSWxGNnBCLFlBQWEsU0FBVVAsRUFBV00sR0FDOUIsTUFBTW5GLEVBQWU3MEMsS0FBS0ssUUFBUTJpQixNQUM1QkEsRUFBUTZ4QixFQUFhcmYsU0FBV3gxQixLQUFLOEIsUUFBUWtoQixNQUFNaTJCLGdCQUFrQmo1QyxLQUFLVSxLQUFLaTVCLGlCQUFpQitmLEVBQVcsU0FRakgsR0FOSSxTQUFTLzNDLEtBQUtxaEIsRUFBTStwQixrQkFBa0I1YixVQUN0Q254QixLQUFLVSxLQUFLeUksU0FBUzByQyxFQUFhVyxhQUFjLFVBRTlDeDFDLEtBQUtVLEtBQUt3SSxZQUFZMnJDLEVBQWFXLGFBQWMsVUFHakR3RSxHQUE0QyxJQUFuQ25GLEVBQWFpQixrQkFBeUIsQ0FDM0NqQixFQUFhQyxhQUFlNEUsSUFDNUI3RSxFQUFhQyxXQUFhNEUsRUFDMUI3RSxFQUFhRSxXQUFhMkUsRUFBVWp3QyxZQUd4QyxNQUFNa1gsRUFBT2swQixFQUFhRyxZQUFjaHlCLEVBQU1yQyxLQUN4Q3U1QixFQUFZUixFQUFVUSxVQUU1QixJQUFJQyxFQUFVLEVBQ2QsSUFBSyxJQUFJdDhDLEVBQUksRUFBR3FoQixFQUFReUIsRUFBSyxHQUFHekIsTUFBT3pYLEVBQU1rWixFQUFLLEdBQUd6QixNQUFNNVksT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDeEVzOEMsR0FBV2o3QixFQUFNcmhCLEdBQUd1OEMsUUFJeEIsTUFBTUMsRUFBV3hGLEVBQWFvQixVQUFZcEIsRUFBYUUsV0FBV3NGLFNBQ2xFeEYsRUFBYW1CLFFBQVVyMUIsRUFBS3JhLE9BRzVCdXVDLEVBQWFpQixrQkFBb0JqQixFQUFhRSxXQUFXNzFCLE1BQU01WSxPQUMvRHV1QyxFQUFha0IsaUJBQW1Cb0UsRUFDaEN0RixFQUFhcUIsb0JBQXNCZ0UsRUFHbkNyRixFQUFhdUIsaUJBQW1CdkIsRUFBYUMsV0FBV3NGLFFBQVUsRUFDbEV2RixFQUFhd0IsaUJBQW1CeEIsRUFBYUUsV0FBVzcxQixNQUFNZzdCLEdBQVdJLFFBR3pFLElBQUlDLEVBQWEsR0FDYkMsRUFBWSxHQUNoQixJQUFLLElBQVd0N0IsRUFBT2s3QixFQUFkdjhDLEVBQUksRUFBbUJBLEdBQUt3OEMsRUFBVXg4QyxJQUFLLENBQ2hEcWhCLEVBQVF5QixFQUFLOWlCLEdBQUdxaEIsTUFDaEJrN0IsRUFBVSxFQUNWLElBQUssSUFBZ0M3N0IsRUFBTWs4QixFQUFJQyxFQUFJQyxFQUExQ3o4QyxFQUFJLEVBQUdxMUMsRUFBT3IwQixFQUFNNVksT0FBbUNwSSxFQUFJcTFDLEVBQU1yMUMsSUFBSyxDQU0zRSxHQUxBcWdCLEVBQU9XLEVBQU1oaEIsR0FDYnU4QyxFQUFLbDhCLEVBQUs2N0IsUUFBVSxFQUNwQk0sRUFBS244QixFQUFLKzdCLFFBQVUsRUFDcEJLLEVBQWN6OEMsRUFBSWs4QyxFQUVkSSxFQUFVbDBDLE9BQVMsRUFDbkIsSUFBSyxJQUFXczBDLEVBQVBqOEMsRUFBSSxFQUFRQSxFQUFJNjdDLEVBQVVsMEMsT0FBUTNILElBQ3ZDaThDLEVBQU1KLEVBQVU3N0MsR0FDWmk4QyxFQUFJdjdCLElBQU14aEIsSUFDVjg4QyxHQUFlQyxFQUFJdnBDLE9BQ25CK29DLEdBQVdRLEVBQUlILEdBQ2ZFLEdBQWVDLEVBQUlILEdBQ25CRyxFQUFJRixJQUFNLEVBQ1ZFLEVBQUl2N0IsSUFBTXhoQixFQUFJLEVBQ1YrOEMsRUFBSUYsR0FBSyxJQUNURixFQUFVdnhDLE9BQU90SyxFQUFHLEdBQ3BCQSxNQUVHVCxJQUFNcTFDLEVBQU8sSUFDcEJxSCxFQUFJRixJQUFNLEVBQ1ZFLEVBQUl2N0IsSUFBTXhoQixFQUFJLEVBQ1YrOEMsRUFBSUYsR0FBSyxJQUNURixFQUFVdnhDLE9BQU90SyxFQUFHLEdBQ3BCQSxPQU9oQixHQUFJZCxJQUFNdzhDLEdBQVluOEMsSUFBTWc4QyxFQUFXLENBQ25DckYsRUFBYXNCLG1CQUFxQndFLEVBQ2xDLE1BR0FELEVBQUssR0FDTEgsRUFBVzV4QyxLQUFLLENBQ1owSSxNQUFPc3BDLEVBQ1BGLEdBQUlBLEVBQUssRUFDVEMsR0FBSUEsRUFDSnI3QixLQUFNLElBSWQrNkIsR0FBV0ssRUFHZkQsRUFBWUEsRUFBVTEvQixPQUFPeS9CLEdBQVlNLE1BQUssU0FBVXJyQyxFQUFHOEosR0FBSSxPQUFPOUosRUFBRTZCLE1BQVFpSSxFQUFFakksU0FDbEZrcEMsRUFBYSxHQUdqQkEsRUFBYSxLQUNiQyxFQUFZLE9BSXBCTSxVQUFXLFNBQVU5d0MsRUFBTTBFLEdBQ3ZCLE1BQU1xcUMsRUFBYy80QyxLQUFLOEIsUUFBUWtoQixNQUMzQjZ4QixFQUFlNzBDLEtBQUtLLFFBQVEyaUIsTUFDNUJBLEVBQVE2eEIsRUFBYXJmLFNBQ3JCdWxCLEVBQWlCLFFBQVQvd0MsRUFFZCxHQUFJK3dDLEVBQU8sQ0FDUCxNQUFNQyxFQUFZbkcsRUFBYUUsV0FBV3RyQyxXQUMxQyxHQUFJLFdBQVc5SCxLQUFLcTVDLEVBQVU3cEIsVUFBVyxDQUNyQyxHQUFlLE9BQVh6aUIsRUFDQSxPQUNHLElBQUtzc0MsRUFBVTlnQixxQkFBdUIsV0FBV3Y0QixLQUFLcTVDLEVBQVU5Z0IsbUJBQW1CL0ksVUFFdEYsWUFEQW5PLEVBQU01ZSxXQUFhLGNBQWdCMjBDLEVBQVlaLFlBQVluNkMsS0FBS2dDLEtBQU0sS0FBTTYwQyxFQUFha0Isa0JBQWtCLEdBQVMsa0JBT2hJLEdBQUlnRCxFQUFZTSxLQUFNLENBQ2xCLE1BQU00QixFQUFlcEcsRUFBYUMsV0FDNUIvRSxFQUFnQmdKLEVBQVlLLGVBRWxDLEdBQUkyQixFQUVBLEdBQUtyc0MsRUFpQkRxcUMsRUFBWWtCLFlBQVlqOEMsS0FBS2dDLEtBQWlCLE9BQVgwTyxFQUFrQnFoQyxFQUFjLEdBQUtBLEVBQWNBLEVBQWN6cEMsT0FBUyxJQUFJLEdBQ2pIeXlDLEVBQVltQyxRQUFRbDlDLEtBQUtnQyxLQUFNME8sRUFBUXVzQyxPQWxCOUIsQ0FDVCxJQUFJNTdCLEVBQU0wd0IsRUFBYyxHQUFHdG1DLFdBQzNCLE1BQU0weEMsRUFBYyxDQUFDcEwsRUFBYyxJQUVuQyxJQUFLLElBQXVDeHhCLEVBQW5DMWdCLEVBQUksRUFBRzRKLEVBQU1zb0MsRUFBY3pwQyxPQUFjekksRUFBSTRKLEVBQUs1SixJQUN2RDBnQixFQUFPd3hCLEVBQWNseUMsR0FDakJ3aEIsSUFBUWQsRUFBSzlVLGFBQ2IweEMsRUFBWXh5QyxLQUFLNFYsR0FDakJjLEVBQU1kLEVBQUs5VSxZQUluQixJQUFLLElBQUk1TCxFQUFJLEVBQUc0SixFQUFNMHpDLEVBQVk3MEMsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDL0NrN0MsRUFBWWtCLFlBQVlqOEMsS0FBS2dDLEtBQU1tN0MsRUFBWXQ5QyxJQUFJLEdBQ25EazdDLEVBQVltQyxRQUFRbDlDLEtBQUtnQyxLQUFNME8sT0FNcEMsQ0FDSCxNQUFNMHNDLEVBQVdyTCxFQUFjLEdBQUd0bUMsV0FFbEMsR0FBS2lGLEVBZ0JFLENBQ0gsSUFBSTJzQyxFQUFZLEtBRWhCLElBQUssSUFBSXg5QyxFQUFJLEVBQUc0SixFQUFNc29DLEVBQWN6cEMsT0FBUyxFQUFHekksRUFBSTRKLEVBQUs1SixJQUNyRCxHQUFJdTlDLElBQWFyTCxFQUFjbHlDLEVBQUksR0FBRzRMLFdBQVksQ0FDOUM0eEMsRUFBWXRMLEVBQWNseUMsR0FDMUIsTUFJUms3QyxFQUFZa0IsWUFBWWo4QyxLQUFLZ0MsS0FBaUIsU0FBWDBPLEVBQW9CcWhDLEVBQWMsR0FBS3NMLEdBQWF0TCxFQUFjLElBQUksR0FDekdnSixFQUFZdUMsU0FBU3Q5QyxLQUFLZ0MsS0FBTTBPLEVBQVF1c0MsT0EzQi9CLENBQ1QsTUFBTUUsRUFBYyxDQUFDcEwsRUFBYyxJQUVuQyxJQUFLLElBQXVDeHhCLEVBQW5DMWdCLEVBQUksRUFBRzRKLEVBQU1zb0MsRUFBY3pwQyxPQUFjekksRUFBSTRKLElBQ2xEOFcsRUFBT3d4QixFQUFjbHlDLEdBQ2pCdTlDLElBQWE3OEIsRUFBSzlVLFlBRmlDNUwsSUFHbkRzOUMsRUFBWXh5QyxLQUFLNFYsR0FNekIsSUFBSyxJQUFJMWdCLEVBQUksRUFBRzRKLEVBQU0wekMsRUFBWTcwQyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUMvQ2s3QyxFQUFZa0IsWUFBWWo4QyxLQUFLZ0MsS0FBTW03QyxFQUFZdDlDLElBQUksR0FDbkRrN0MsRUFBWXVDLFNBQVN0OUMsS0FBS2dDLEtBQU0wTyxJQWlCdkNBLEdBQVFxcUMsRUFBWWwyQyxLQUFLN0UsS0FBS2dDLFdBR25DKzRDLEVBQVlnQyxFQUFRLFVBQVksWUFBWS84QyxLQUFLZ0MsS0FBTTBPLEdBSTNELElBQUtBLEVBQVEsQ0FDVCxNQUFNa1IsRUFBV29ELEVBQU1wRCxTQUN2QixJQUFLLElBQUkvaEIsRUFBSSxFQUFHQSxFQUFJK2hCLEVBQVN0WixPQUFRekksSUFDRyxJQUFoQytoQixFQUFTL2hCLEdBQUcraEIsU0FBU3RaLFNBQ3JCdEcsS0FBS1UsS0FBS3NwQixXQUFXcEssRUFBUy9oQixJQUM5QkEsS0FJc0IsSUFBMUJtbEIsRUFBTXBELFNBQVN0WixRQUFjdEcsS0FBS1UsS0FBS3NwQixXQUFXaEgsS0FJOURrNEIsUUFBUyxTQUFVeHNDLEVBQVE2c0MsR0FDdkIsTUFBTTFHLEVBQWU3MEMsS0FBS0ssUUFBUTJpQixNQUM1QmlELEdBQVV2WCxFQUVWOHNDLEVBQWdCLE9BQVg5c0MsRUFDTCtzQyxFQUFpQjVHLEVBQWFvQixVQUM5Qm9FLEVBQVdwMEIsR0FBVXUxQixFQUFLQyxFQUFpQkEsRUFBaUI1RyxFQUFhd0IsaUJBQW1CLEVBQzVGcUYsRUFBT3oxQixHQUFVLEVBQUksRUFFckJ0RixFQUFPazBCLEVBQWFHLFlBQzFCLElBQUltRixFQUFVdEYsRUFBYWtCLGlCQUUzQixJQUFLLElBQXFEeDNCLEVBQWpEMWdCLEVBQUksRUFBRzRKLEVBQU1nMEMsR0FBa0J4MUIsR0FBVSxFQUFJLEdBQVVwb0IsR0FBSzRKLEVBQUs1SixJQUFLLENBRTNFLEdBREEwZ0IsRUFBT29DLEVBQUs5aUIsR0FBR3FoQixNQUNLLElBQWhCWCxFQUFLalksT0FBYyxPQUV2QixJQUFLLElBQStCbzBDLEVBQUlELEVBQS9CdjhDLEVBQUksRUFBR3ExQyxFQUFPaDFCLEVBQUtqWSxPQUFnQnBJLEVBQUlxMUMsRUFBTXIxQyxJQUNsRHc4QyxFQUFLbjhCLEVBQUtyZ0IsR0FBR284QyxRQUNiRyxFQUFLbDhCLEVBQUtyZ0IsR0FBR2s4QyxRQUNUTSxFQUFLLEdBQUtELEVBQUssR0FFZkMsRUFBSzc4QyxFQUFJdzhDLEdBQVlBLEVBQVd4OEMsSUFDaEMwZ0IsRUFBS3JnQixHQUFHbzhDLFFBQVVJLEVBQUtnQixFQUN2QnZCLEdBQVdNLEdBS3ZCLEdBQUl4MEIsRUFBUSxDQUNSLE1BQU1rc0IsRUFBT3h4QixFQUFLODZCLEVBQWlCLEdBQ25DLEdBQUl0SixFQUFNLENBQ04sTUFBTXdKLEVBQVksR0FDbEIsSUFBSXo4QixFQUFReUIsRUFBSzg2QixHQUFnQnY4QixNQUM3Qms3QixFQUFVLEVBRWQsSUFBSyxJQUErQjc3QixFQUFNbzhCLEVBQWpDOThDLEVBQUksRUFBRzRKLEVBQU15WCxFQUFNNVksT0FBMkJ6SSxFQUFJNEosRUFBSzVKLElBQzVEMGdCLEVBQU9XLEVBQU1yaEIsR0FDYjg4QyxFQUFjOThDLEVBQUl1OEMsRUFDbEJBLEdBQVc3N0IsRUFBSzY3QixRQUFVLEVBRXRCNzdCLEVBQUsrN0IsUUFBVSxJQUNmLzdCLEVBQUsrN0IsU0FBVyxFQUNoQnFCLEVBQVVoekMsS0FBSyxDQUFDNFYsS0FBTUEsRUFBSytmLFdBQVUsR0FBUWp0QixNQUFPc3BDLEtBSTVELEdBQUlnQixFQUFVcjFDLE9BQVMsRUFBRyxDQUN0QixJQUFJczFDLEVBQVdELEVBQVV4OEIsUUFDekJELEVBQVFpekIsRUFBS2p6QixNQUNiazdCLEVBQVUsRUFFVixJQUFLLElBQStCNzdCLEVBQU1vOEIsRUFBakM5OEMsRUFBSSxFQUFHNEosRUFBTXlYLEVBQU01WSxPQUEyQnpJLEVBQUk0SixJQUN2RDhXLEVBQU9XLEVBQU1yaEIsR0FDYjg4QyxFQUFjOThDLEVBQUl1OEMsRUFDbEJBLEdBQVc3N0IsRUFBSzY3QixRQUFVLElBRXRCTyxHQUFlaUIsRUFBU3ZxQyxTQUN4QnhULElBQUt1OEMsSUFDTEEsR0FBV3dCLEVBQVNyOUIsS0FBSzY3QixRQUFVLEVBQ25DakksRUFBS3RTLGFBQWErYixFQUFTcjlCLEtBQU1BLEdBQ2pDcTlCLEVBQVdELEVBQVV4OEIsUUFDaEJ5OEIsSUFWbUQvOUMsS0FjaEUsR0FBSSs5QyxFQUFVLENBQ1Z6SixFQUFLbHhDLFlBQVkyNkMsRUFBU3I5QixNQUMxQixJQUFLLElBQUkxZ0IsRUFBSSxFQUFHNEosRUFBTWswQyxFQUFVcjFDLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzdDczBDLEVBQUtseEMsWUFBWTA2QyxFQUFVOTlDLEdBQUcwZ0IsUUFNOUNzMkIsRUFBYXJmLFNBQVNwUCxVQUFVaTBCLE9BQzdCLENBQ1l4RixFQUFhcmYsU0FBU3FtQixVQUFVeEIsR0FDeENqMkMsVUFBWXBFLEtBQUs4QixRQUFRa2hCLE1BQU1tMUIsWUFBWW42QyxLQUFLZ0MsS0FBTSxLQUFNbTZDLEdBQVMsR0FHM0VsMEIsRUFHRGptQixLQUFLOHpCLGlCQUZMOXpCLEtBQUs4QixRQUFRa2hCLE1BQU0rMkIseUJBQXlCLzdDLEtBQUtnQyxLQUFNdTdDLEdBQXdCMUcsRUFBYUMsWUFBWSxJQU1oSHdHLFNBQVUsU0FBVTVzQyxFQUFRNnNDLEdBQ3hCLE1BQU0xRyxFQUFlNzBDLEtBQUtLLFFBQVEyaUIsTUFDNUJ0aUIsRUFBT1YsS0FBS1UsS0FDWnVsQixHQUFVdlgsRUFFVmdDLEVBQWtCLFNBQVhoQyxFQUNQMHJDLEVBQVV2RixFQUFhdUIsaUJBQ3ZCOEQsRUFBWWowQixHQUFVdlYsRUFBT21rQyxFQUFhc0IsbUJBQXFCdEIsRUFBYXNCLG1CQUFxQmlFLEVBQVUsRUFFM0d6NUIsRUFBT2swQixFQUFhRyxZQUMxQixJQUFJdUYsRUFBYSxHQUNiQyxFQUFZLEdBQ1pzQixFQUFXLEVBQ2YsTUFBTUMsRUFBYSxHQUNiQyxFQUFnQixHQUV0QixJQUFLLElBQXVDMzhCLEVBQUs0OEIsRUFBYS84QixFQUFPOHlCLEVBQVNrSyxFQUFXQyxFQUFoRnQrQyxFQUFJLEVBQUc0SixFQUFNb3RDLEVBQWFtQixRQUFtRW40QyxFQUFJNEosRUFBSzVKLElBQUssQ0FDaEh3aEIsRUFBTXNCLEVBQUs5aUIsR0FDWG8rQyxFQUFjL0IsRUFDZGdDLEdBQVksRUFDWmg5QixFQUFRRyxFQUFJSCxNQUNaaTlCLEVBQWMsRUFFZCxJQUFLLElBQVc1OUIsRUFBMkJtOEIsRUFBSUQsRUFBSTJCLEVBQTFDbCtDLEVBQUksRUFBU3ExQyxFQUFPcjBCLEVBQU01WSxPQUE2QnBJLEVBQUlxMUMsSUFDaEVoMUIsRUFBT1csRUFBTWhoQixHQUNScWdCLEdBRmlFcmdCLElBT3RFLEdBSEF3OEMsRUFBS244QixFQUFLKzdCLFFBQVUsRUFDcEJHLEVBQUtsOEIsRUFBSzY3QixRQUFVLEVBRWZuMEIsRUF5QkUsQ0FHSCxHQUZBbTJCLEVBQWNsK0MsRUFBSWkrQyxFQUVkM0IsRUFBVWwwQyxPQUFTLEVBQUcsQ0FDdEIsTUFBTTJ0QyxHQUFZLzBCLEVBQU1oaEIsRUFBSSxHQUM1QixJQUFLLElBQVcwOEMsRUFBUGo4QyxFQUFJLEVBQVFBLEVBQUk2N0MsRUFBVWwwQyxPQUFRM0gsSUFDdkNpOEMsRUFBTUosRUFBVTc3QyxHQUNaaThDLEVBQUl2N0IsSUFBTXhoQixJQUVWdStDLEdBQWV4QixFQUFJdnBDLE9BQ25COHFDLEdBQWV2QixFQUFJSCxHQUNuQjJCLEVBQWNsK0MsRUFBSWkrQyxFQUNsQnZCLEVBQUlGLElBQU0sRUFDVkUsRUFBSXY3QixJQUFNeGhCLEVBQUksRUFDVis4QyxFQUFJRixHQUFLLElBQ1RGLEVBQVV2eEMsT0FBT3RLLEVBQUcsR0FDcEJBLE1BRUdzMUMsSUFDUDJHLEVBQUlGLElBQU0sRUFDVkUsRUFBSXY3QixJQUFNeGhCLEVBQUksRUFDVis4QyxFQUFJRixHQUFLLElBQ1RGLEVBQVV2eEMsT0FBT3RLLEVBQUcsR0FDcEJBLE9BTVorN0MsRUFBSyxHQUNMSCxFQUFXNXhDLEtBQUssQ0FDWit4QyxHQUFJQSxFQUNKRCxHQUFJQSxFQUFLLEVBQ1RwcEMsTUFBTytxQyxFQUNQLzhCLEtBQU0sSUFJVis4QixHQUFlSCxHQUFlRyxFQUFjM0IsR0FBTXdCLEVBQWM3QixFQUNoRTJCLEVBQVdwekMsS0FBSzRWLEdBQ1Q2OUIsR0FBZUgsRUFBYzdCLEdBQVdnQyxFQUFjM0IsR0FBTXdCLEVBQ25FMTlCLEVBQUs2N0IsU0FBVzE1QyxFQUFLMjdDLHVCQUF1Qm5DLEVBQVdBLEVBQVlFLEVBQVNnQyxFQUFhQSxFQUFjM0IsR0FDaEdDLEVBQUssSUFBTTBCLEVBQWNILEdBQWVHLEVBQWMzQixFQUFLd0IsRUFBYzdCLElBQ2hGNEIsRUFBY3J6QyxLQUFLLENBQ2Y0VixLQUFNQSxFQUNOMWdCLEVBQUdBLEVBQ0g2OEMsR0FBSTc4QyxFQUFJNjhDLElBSWhCeUIsR0FBZTFCLE1BM0VOLENBQ1QsR0FBSXY4QyxHQUFLKzlDLEVBQWEsTUFDdEIsR0FBSXhCLEVBQUssRUFBRyxDQUNSLEdBQUlxQixFQUFXLEdBQUtyQixFQUFLdjhDLEdBQUsrOUMsRUFBYSxDQUN2QzE5QixFQUFLNjdCLFNBQVcsRUFDaEI2QixFQUFjLEtBQ2RILEVBQVdwQixFQUFLLEVBQ2hCLE1BR0p1QixHQUFleEIsRUFHbkIsSUFBS3lCLEVBQVcsQ0FDWixJQUFLLElBQVd0QixFQUFQajhDLEVBQUksRUFBUUEsRUFBSTY3QyxFQUFVbDBDLE9BQVEzSCxJQUN2Q2k4QyxFQUFNSixFQUFVNzdDLEdBQ2hCczlDLEdBQWVyQixFQUFJSCxHQUNuQkcsRUFBSUYsSUFBTSxFQUNORSxFQUFJRixHQUFLLElBQ1RGLEVBQVV2eEMsT0FBT3RLLEVBQUcsR0FDcEJBLEtBR1J1OUMsR0FBWSxHQTJEeEIsR0FIQTFCLEVBQVlBLEVBQVUxL0IsT0FBT3kvQixHQUFZTSxNQUFLLFNBQVVyckMsRUFBRzhKLEdBQUksT0FBTzlKLEVBQUU2QixNQUFRaUksRUFBRWpJLFNBQ2xGa3BDLEVBQWEsSUFFUnQwQixFQUFRLENBQ1QsR0FBSTYxQixFQUFXLEVBQUcsQ0FDZEEsR0FBWSxFQUNaLFNBR2dCLE9BQWhCRyxHQUF3Qi84QixFQUFNNVksT0FBUyxJQUN2QzByQyxFQUFVaHlDLEtBQUs4QixRQUFRa2hCLE1BQU1tMUIsWUFBWW42QyxLQUFLZ0MsS0FBTWtmLEVBQU0sR0FBR2lTLFNBQVUsR0FBRyxHQUMxRTZnQixFQUFVM3lCLEVBQUl3Z0IsYUFBYW1TLEVBQVM5eUIsRUFBTSs4QixNQUt0RCxHQUFJaDJCLEVBQVEsQ0FDUixJQUFJcTJCLEVBQWFDLEVBQ2pCLElBQUssSUFBcUNsOUIsRUFBakMxZ0IsRUFBSSxFQUFHNjlDLEVBQU9ULEVBQVd6MUMsT0FBYTNILEVBQUk2OUMsRUFBTTc5QyxJQUNyRDBnQixFQUFNMDhCLEVBQVdwOUMsR0FBRzhLLFdBQ3BCL0ksRUFBS3NwQixXQUFXK3hCLEVBQVdwOUMsSUFDRixJQUFyQjBnQixFQUFJSCxNQUFNNVksU0FDTGcyQyxJQUFhQSxFQUFjNTdDLEVBQUsrN0MsY0FBYzk3QixFQUFNdEIsSUFDekRrOUIsRUFBWTc3QyxFQUFLKzdDLGNBQWM5N0IsRUFBTXRCLEdBQ3JDM2UsRUFBS3NwQixXQUFXM0ssSUFJeEIsSUFBSyxJQUF3Q3E5QixFQUFwQ3grQyxFQUFJLEVBQUdxMUMsRUFBT3lJLEVBQWMxMUMsT0FBcUJwSSxFQUFJcTFDLEVBQU1yMUMsSUFDaEV3K0MsRUFBY1YsRUFBYzk5QyxHQUM1QncrQyxFQUFZbitCLEtBQUsrN0IsUUFBVTU1QyxFQUFLMjdDLHVCQUF1QkMsRUFBYUMsRUFBV0csRUFBWTcrQyxFQUFHNitDLEVBQVloQyxJQUc5RzE2QyxLQUFLOHpCLHNCQUVMOXpCLEtBQUs4QixRQUFRa2hCLE1BQU0rMkIseUJBQXlCLzdDLEtBQUtnQyxLQUFNdTdDLEdBQXdCMUcsRUFBYUMsWUFBWSxJQUloSDZILGdCQUFpQixLQUNqQkMsY0FBZSxXQUNYNThDLEtBQUtVLEtBQUt5SSxTQUFTbkosS0FBS0ssUUFBUTJpQixNQUFNMHlCLFlBQWEsTUFDbkQxMUMsS0FBS0ssUUFBUTJpQixNQUFNMnlCLFVBQVU3MEMsTUFBTUMsUUFBVSxlQUU3Q2YsS0FBSzhCLFFBQVFraEIsTUFBTTI1QixnQkFBa0IsV0FDakMzOEMsS0FBS1UsS0FBS3dJLFlBQVlsSixLQUFLSyxRQUFRMmlCLE1BQU0weUIsWUFBYSxNQUN0RDExQyxLQUFLSyxRQUFRMmlCLE1BQU0yeUIsVUFBVTcwQyxNQUFNQyxRQUFVLE9BQzdDZixLQUFLNjhDLGVBQWUsUUFBUzc4QyxLQUFLOEIsUUFBUWtoQixNQUFNMjVCLGlCQUNoRDM4QyxLQUFLOEIsUUFBUWtoQixNQUFNMjVCLGdCQUFrQixNQUN2Q3Q5QyxLQUFLVyxNQUVQQSxLQUFLODhDLFlBQVksUUFBUzk4QyxLQUFLOEIsUUFBUWtoQixNQUFNMjVCLGtCQUdqRHIxQixXQUFZLFNBQVVvYSxHQUNsQixNQUFNaGhDLEVBQU9WLEtBQUtVLEtBQ1pxOEMsRUFBeUIsYUFBZHJiLEVBQ1htVCxFQUFlNzBDLEtBQUtLLFFBQVEyaUIsTUFDNUJnNkIsRUFBY25JLEVBQWFDLFdBQzNCbjBCLEVBQU9rMEIsRUFBYUcsWUFDcEJpSSxFQUFhcEksRUFBYUUsV0FDMUIxakMsRUFBUXdqQyxFQUFhc0IsbUJBQ3JCa0UsRUFBV3hGLEVBQWFvQixVQUN4QmpFLEVBQVVoeUMsS0FBSzhCLFFBQVFraEIsTUFBTW0xQixZQUFZbjZDLEtBQUtnQyxLQUFNZzlDLEVBQVk3ckIsU0FBVSxHQUFHLEdBR25GLEdBQUk0ckIsRUFBVSxDQUNWLE1BQU1HLEVBQWlCRixFQUFZNUMsUUFJbkMsR0FIQXBJLEVBQVFzSSxRQUFVMEMsRUFBWTFDLFFBRzFCNEMsRUFBaUIsRUFDakJsTCxFQUFRb0ksUUFBVXA2QyxLQUFLb0csR0FBR3VCLEtBQUtnTCxNQUFNdXFDLEVBQWUsR0FDcERGLEVBQVk1QyxRQUFVOEMsRUFBaUJsTCxFQUFRb0ksUUFDL0M2QyxFQUFXcGQsYUFBYW1TLEVBQVNnTCxFQUFZOWlCLHdCQUMxQyxDQUNILElBQUlxZ0IsRUFBYSxHQUNiQyxFQUFZLEdBRWhCLElBQUssSUFBdUN0N0IsRUFBT2s3QixFQUExQ3Y4QyxFQUFJLEVBQUc0SixFQUFNb3RDLEVBQWFtQixRQUF5Qm40QyxFQUFJNEosRUFBSzVKLElBQUssQ0FDdEVxaEIsRUFBUXlCLEVBQUs5aUIsR0FBR3FoQixNQUNoQms3QixFQUFVLEVBQ1YsSUFBSyxJQUFnQzc3QixFQUFNazhCLEVBQUlDLEVBQUlDLEVBQTFDejhDLEVBQUksRUFBR3ExQyxFQUFPcjBCLEVBQU01WSxPQUFtQ3BJLEVBQUlxMUMsRUFBTXIxQyxJQUFLLENBTTNFLEdBTEFxZ0IsRUFBT1csRUFBTWhoQixHQUNidThDLEVBQUtsOEIsRUFBSzY3QixRQUFVLEVBQ3BCTSxFQUFLbjhCLEVBQUsrN0IsUUFBVSxFQUNwQkssRUFBY3o4QyxFQUFJazhDLEVBRWRJLEVBQVVsMEMsT0FBUyxFQUNuQixJQUFLLElBQVdzMEMsRUFBUGo4QyxFQUFJLEVBQVFBLEVBQUk2N0MsRUFBVWwwQyxPQUFRM0gsSUFDdkNpOEMsRUFBTUosRUFBVTc3QyxHQUNaaThDLEVBQUl2N0IsSUFBTXhoQixJQUNWODhDLEdBQWVDLEVBQUl2cEMsT0FDbkIrb0MsR0FBV1EsRUFBSUgsR0FDZkUsR0FBZUMsRUFBSUgsR0FDbkJHLEVBQUlGLElBQU0sRUFDVkUsRUFBSXY3QixJQUFNeGhCLEVBQUksRUFDVis4QyxFQUFJRixHQUFLLElBQ1RGLEVBQVV2eEMsT0FBT3RLLEVBQUcsR0FDcEJBLE1BRUdULElBQU1xMUMsRUFBTyxJQUNwQnFILEVBQUlGLElBQU0sRUFDVkUsRUFBSXY3QixJQUFNeGhCLEVBQUksRUFDVis4QyxFQUFJRixHQUFLLElBQ1RGLEVBQVV2eEMsT0FBT3RLLEVBQUcsR0FDcEJBLE9BZWhCLEdBVElnOEMsR0FBZXRwQyxHQUFTcXBDLEVBQUssR0FDN0JILEVBQVc1eEMsS0FBSyxDQUNaMEksTUFBT3NwQyxFQUNQRixHQUFJQSxFQUFLLEVBQ1RDLEdBQUlBLEVBQ0pyN0IsS0FBTSxJQUlWZCxJQUFTeStCLEdBQWVyQyxHQUFldHBDLEdBQVNzcEMsRUFBY0YsR0FBTXBwQyxFQUFRNnJDLEVBQWlCLEVBQUcsQ0FDaEczK0IsRUFBSzY3QixTQUFXLEVBQ2hCLE1BR0osR0FBSU8sRUFBY3RwQyxFQUFPLE1BRXpCK29DLEdBQVdLLEVBR2ZELEVBQVlBLEVBQVUxL0IsT0FBT3kvQixHQUFZTSxNQUFLLFNBQVVyckMsRUFBRzhKLEdBQUksT0FBTzlKLEVBQUU2QixNQUFRaUksRUFBRWpJLFNBQ2xGa3BDLEVBQWEsR0FHakIwQyxFQUFXcGQsYUFBYW1TLEVBQVNnTCxFQUFZOWlCLHlCQUU5QyxDQUNILE1BQU1pakIsRUFBaUJILEVBQVkxQyxRQUluQyxHQUhBdEksRUFBUW9JLFFBQVU0QyxFQUFZNUMsUUFHMUIrQyxFQUFpQixFQUFHLENBQ3BCbkwsRUFBUXNJLFFBQVV0NkMsS0FBS29HLEdBQUd1QixLQUFLZ0wsTUFBTXdxQyxFQUFlLEdBQ3BELE1BQU1DLEVBQWFELEVBQWlCbkwsRUFBUXNJLFFBRXRDQyxFQUFhLEdBQ2I4QyxFQUFlMzhDLEVBQUsrN0MsY0FBYzk3QixFQUFNczhCLEdBQWNHLEVBRTVELElBQUssSUFBV2wrQixFQUFPazdCLEVBQWR2OEMsRUFBSSxFQUFtQkEsRUFBSXcvQyxFQUFjeC9DLElBQUssQ0FDbkRxaEIsRUFBUXlCLEVBQUs5aUIsR0FBR3FoQixNQUNoQms3QixFQUFVLEVBQ1YsSUFBSyxJQUFnQzc3QixFQUFNazhCLEVBQUlFLEVBQXRDejhDLEVBQUksRUFBR3ExQyxFQUFPcjBCLEVBQU01WSxPQUErQnBJLEVBQUlxMUMsSUFDNURvSCxFQUFjejhDLEVBQUlrOEMsSUFDZE8sR0FBZXRwQyxJQUYrQ25ULElBSWxFcWdCLEVBQU9XLEVBQU1oaEIsR0FDYnU4QyxFQUFLbDhCLEVBQUsrN0IsUUFBVSxFQUNoQkcsRUFBSyxHQUFLQSxFQUFLNThDLEdBQUt3L0MsR0FBZ0IxQyxFQUFjdHBDLEdBQ2xEa3BDLEVBQVc1eEMsS0FBSyxDQUNaMEksTUFBT3NwQyxFQUNQRixHQUFJbDhCLEVBQUs2N0IsVUFHakJBLEdBQVc3N0IsRUFBSzY3QixRQUFVLEVBSWxDLE1BQU1rRCxFQUFVMzhCLEVBQUswOEIsR0FDZkUsRUFBWUQsRUFBUXArQixNQUMxQixJQUFJdzdCLEVBQUtILEVBQVdwN0IsUUFFcEIsSUFBSyxJQUFpRFosRUFBTWs4QixFQUFJRSxFQUFhc0IsRUFBcEUvOUMsRUFBSSxFQUFHcTFDLEVBQU9nSyxFQUFVajNDLE9BQVE4ekMsRUFBVSxFQUF1Q2w4QyxFQUFJcTFDLEVBQU1yMUMsSUFBSyxDQVlyRyxHQVhBeThDLEVBQWN6OEMsRUFBSWs4QyxFQUNsQjc3QixFQUFPZy9CLEVBQVVyL0MsR0FDakJ1OEMsRUFBS2w4QixFQUFLNjdCLFFBQVUsRUFDcEI2QixFQUFjdEIsRUFBY0YsRUFBSyxFQUU3QkMsR0FBTXVCLEdBQWV2QixFQUFHcnBDLFFBQ3hCK29DLEdBQVdNLEVBQUdELEdBQ2R3QixHQUFldkIsRUFBR0QsR0FDbEJDLEVBQUtILEVBQVdwN0IsU0FHaEI4OEIsR0FBZTVxQyxHQUFTblQsSUFBTXExQyxFQUFPLEVBQUcsQ0FDeEMrSixFQUFRemQsYUFBYW1TLEVBQVN6ekIsRUFBSzJiLG9CQUNuQyxNQUdKa2dCLEdBQVdLLEVBR2Z1QyxFQUFZMUMsUUFBVThDLE1BQ25CLENBQ0hwTCxFQUFRc0ksUUFBVTBDLEVBQVkxQyxRQUM5QixNQUFNa0QsRUFBUzk4QyxFQUFLQyxjQUFjLE1BQ2xDNjhDLEVBQU92OEMsWUFBWSt3QyxHQUVuQixJQUFLLElBQVc5eUIsRUFBUHJoQixFQUFJLEVBQVVBLEVBQUl3OEMsRUFBVXg4QyxJQUFLLENBRXRDLEdBREFxaEIsRUFBUXlCLEVBQUs5aUIsR0FBR3FoQixNQUNLLElBQWpCQSxFQUFNNVksT0FBYyxPQUV4QixJQUFLLElBQUlwSSxFQUFJLEVBQUdxMUMsRUFBT3IwQixFQUFNNVksT0FBUXBJLEVBQUlxMUMsRUFBTXIxQyxJQUN2Q0wsRUFBSXFoQixFQUFNaGhCLEdBQUdvOEMsUUFBVSxHQUFLRCxJQUM1Qm43QixFQUFNaGhCLEdBQUdvOEMsU0FBVyxHQUtoQyxNQUFNbUQsRUFBZ0I1SSxFQUFhcUIsb0JBQzdCaDNCLEVBQVErOUIsRUFBVy85QixNQUV6QixJQUFLLElBQUloaEIsRUFBSSxFQUFHcTFDLEVBQU9yMEIsRUFBTTVZLE9BQVFwSSxFQUFJcTFDLEVBQU1yMUMsSUFDdkNBLElBQU11L0MsSUFDVnYrQixFQUFNaGhCLEdBQUdvOEMsU0FBVyxHQUd4QjJDLEVBQVd4ekMsV0FBV28yQixhQUFhMmQsRUFBUVAsRUFBVy9pQixxQkFJOURsNkIsS0FBS3E2QixVQUFVMmlCLEdBQ2ZoOUMsS0FBSzhCLFFBQVFraEIsTUFBTSsyQix5QkFBeUIvN0MsS0FBS2dDLEtBQU1nOUMsR0FBYSxJQUd4RTMxQixXQUFZLFdBQ1IsTUFBTTB4QixFQUFjLzRDLEtBQUs4QixRQUFRa2hCLE1BQzNCNnhCLEVBQWU3MEMsS0FBS0ssUUFBUTJpQixNQUM1QnRpQixFQUFPVixLQUFLVSxLQUVaZzlDLEVBQU0zRSxFQUFZTSxLQUNsQnRKLEVBQWdCZ0osRUFBWUssZUFDNUJ1RSxFQUFZNU4sRUFBYyxHQUVoQyxJQUFJNk4sRUFBZ0IsS0FDaEJDLEVBQWUsS0FDZnBELEVBQU1pRCxFQUFJSSxHQUFLSixFQUFJakQsR0FBTSxFQUN6QkMsRUFBTWdELEVBQUl2L0IsR0FBS3UvQixFQUFJaEQsR0FBTSxFQUN6QnFELEVBQVksR0FDWjErQixFQUFNLEtBRVYsSUFBSyxJQUF1Q2QsRUFBTTdMLEVBQXpDN1UsRUFBSSxFQUFHNEosRUFBTXNvQyxFQUFjenBDLE9BQWtCekksRUFBSTRKLEVBQUs1SixJQUFLLENBQ2hFMGdCLEVBQU93eEIsRUFBY2x5QyxHQUNqQndoQixJQUFRZCxFQUFLOVUsYUFBWTRWLEVBQU1kLEVBQUs5VSxZQUV4Q2lKLEVBQUs2TCxFQUFLcUIsU0FDVixJQUFLLElBQUkxaEIsRUFBSSxFQUFHcTFDLEVBQU83Z0MsRUFBR3BNLE9BQVFwSSxFQUFJcTFDLEVBQU1yMUMsSUFDcEN3QyxFQUFLNi9CLGdCQUFnQjd0QixFQUFHeFUsS0FBT3dDLEVBQUtzd0MsbUJBQW1CdCtCLEVBQUd4VSxHQUFHcUgsY0FDN0Q3RSxFQUFLc3BCLFdBQVd0WCxFQUFHeFUsSUFJM0I2L0MsR0FBYXgvQixFQUFLbmEsVUFDbEIxRCxFQUFLc3BCLFdBQVd6TCxHQUVTLElBQXJCYyxFQUFJSCxNQUFNNVksU0FDTHMzQyxFQUNBQyxFQUFleCtCLEVBREF1K0IsRUFBZ0J2K0IsRUFFcENxN0IsR0FBTSxHQUlkLEdBQUlrRCxFQUFlLENBQ2YsTUFBTWo5QixFQUFPazBCLEVBQWFHLFlBQ3BCZ0osRUFBZ0J0OUMsRUFBSys3QyxjQUFjOTdCLEVBQU1pOUIsR0FDekNLLEVBQWV2OUMsRUFBSys3QyxjQUFjOTdCLEVBQU1rOUIsR0FBZ0JELEdBQ3hETSxFQUFhLEdBRW5CLElBQUssSUFBV2gvQixFQUFQcmhCLEVBQUksRUFBVUEsR0FBS29nRCxFQUFjcGdELElBRXRDLEdBREFxaEIsRUFBUXlCLEVBQUs5aUIsR0FBR3FoQixNQUNLLElBQWpCQSxFQUFNNVksT0FLVixJQUFLLElBQWdDaVksRUFBTW04QixFQUFsQ3g4QyxFQUFJLEVBQUdxMUMsRUFBT3IwQixFQUFNNVksT0FBa0JwSSxFQUFJcTFDLEVBQU1yMUMsSUFDckRxZ0IsRUFBT1csRUFBTWhoQixHQUNidzhDLEVBQUtuOEIsRUFBSys3QixRQUFVLEVBQ2hCSSxFQUFLLEdBQUs3OEMsRUFBSTY4QyxHQUFNc0QsSUFDcEJ6L0IsRUFBSys3QixTQUFXNTVDLEVBQUsyN0MsdUJBQXVCMkIsRUFBZUMsRUFBY3BnRCxFQUFHQSxFQUFJNjhDLFNBUnBGd0QsRUFBV3YxQyxLQUFLZ1ksRUFBSzlpQixJQWE3QixJQUFLLElBQUlBLEVBQUksRUFBRzRKLEVBQU15MkMsRUFBVzUzQyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUM5QzZDLEVBQUtzcEIsV0FBV2swQixFQUFXcmdELElBSW5DOC9DLEVBQVV2NUMsV0FBYTI1QyxFQUN2QkosRUFBVXZELFFBQVVLLEVBQ3BCa0QsRUFBVXJELFFBQVVJLEVBRXBCMTZDLEtBQUs4ekIsaUJBQ0xpbEIsRUFBWW9GLGdCQUFnQm5nRCxLQUFLZ0MsTUFBTSxHQUFNLEdBQzdDKzRDLEVBQVlVLDBCQUEwQno3QyxLQUFLZ0MsS0FBTTI5QyxHQUVqRGo5QyxFQUFLeUksU0FBU3cwQyxFQUFXLDBCQUN6QjM5QyxLQUFLcTZCLFVBQVVzakIsSUFHbkJTLGFBQWMsV0FDVixNQUFNMTlDLEVBQU9WLEtBQUtVLEtBQ1o4MEMsRUFBZXgxQyxLQUFLSyxRQUFRMmlCLE1BQU13eUIsYUFDbEM3aEIsRUFBU2p6QixFQUFLNEUsU0FBU2t3QyxFQUFjLFVBQ3JDeHlCLEVBQVFoakIsS0FBS0ssUUFBUTJpQixNQUFNd1MsU0FFakMsR0FBSzdCLEVBS0RqekIsRUFBS3NwQixXQUFXaEgsRUFBTTFlLGNBQWMsY0FMM0IsQ0FDVCxNQUFNZCxFQUFTOUMsRUFBS0MsY0FBYyxTQUNsQzZDLEVBQU9ZLFVBQVksT0FBU3BFLEtBQUs4QixRQUFRa2hCLE1BQU1tMUIsWUFBWW42QyxLQUFLZ0MsS0FBTSxLQUFNQSxLQUFLSyxRQUFRMmlCLE1BQU0reUIsa0JBQWtCLEdBQVMsUUFDMUgveUIsRUFBTTZjLGFBQWFyOEIsRUFBUXdmLEVBQU0rcEIsbUJBS3JDcnNDLEVBQUsrdkIsWUFBWStrQixFQUFjLFVBRTNCLE1BQU03ekMsS0FBSzNCLEtBQUtLLFFBQVEyaUIsTUFBTTh4QixXQUFXM2pCLFVBQ3pDbnhCLEtBQUs4ekIsaUJBRUw5ekIsS0FBSzhCLFFBQVFraEIsTUFBTSsyQix5QkFBeUIvN0MsS0FBS2dDLEtBQU1BLEtBQUtLLFFBQVEyaUIsTUFBTTh4QixZQUFZLElBSTlGK0UsY0FBZSxTQUFVNTZCLEdBQ3JCLE1BQU00MUIsRUFBZTcwQyxLQUFLSyxRQUFRMmlCLE1BQzVCMjJCLEVBQWU5RSxFQUFhcmYsU0FDbEMsSUFBSW9hLEVBQU16ekIsRUFBTWtpQyxFQUFVbnVDLEVBRXRCK08sRUFBT3ZXLFFBQVEsVUFBWSxJQUMzQmtuQyxFQUFRaUYsRUFBYWlDLGFBQWEvSixrQkFDbEM1d0IsRUFBTzA0QixFQUFhVSxXQUVmVixFQUFhSyxXQU9kbUosRUFBV3hKLEVBQWEvdkMsTUFBTXl4QyxVQUM5QnJtQyxFQUFPMmtDLEVBQWFnQixRQUNwQmhCLEVBQWFrQyxrQkFBa0JqMkMsTUFBTUMsUUFBVSxRQUMvQ2YsS0FBS1UsS0FBS3dJLFlBQVl5d0MsRUFBYyxzQkFDcEMzNUMsS0FBS1UsS0FBS3lJLFNBQVN3d0MsRUFBYyx1QkFWakMwRSxFQUFXeEosRUFBYS92QyxNQUFNd3hDLFVBQzlCcG1DLEVBQU8ya0MsRUFBYWUsUUFDcEJmLEVBQWFrQyxrQkFBa0JqMkMsTUFBTUMsUUFBVSxPQUMvQ2YsS0FBS1UsS0FBS3dJLFlBQVl5d0MsRUFBYyxxQkFDcEMzNUMsS0FBS1UsS0FBS3lJLFNBQVN3d0MsRUFBYyx1QkFTckMzNUMsS0FBS1UsS0FBS3NzQyxjQUFjNEMsRUFBTXlPLEdBQzlCcitDLEtBQUtVLEtBQUswdEMsVUFBVWp5QixFQUFNak0sSUFHMUIrTyxFQUFPdlcsUUFBUSxXQUFhLElBQ3ZCbXNDLEVBQWFNLGNBS2RuMUMsS0FBS1UsS0FBS3dJLFlBQVl5d0MsRUFBYyx3QkFDcEMzNUMsS0FBS1UsS0FBS3lJLFNBQVN3d0MsRUFBYyx5QkFDakMzNUMsS0FBS1UsS0FBS3lJLFNBQVMwckMsRUFBYWtDLGtCQUFtQixZQU5uRC8yQyxLQUFLVSxLQUFLd0ksWUFBWXl3QyxFQUFjLHlCQUNwQzM1QyxLQUFLVSxLQUFLeUksU0FBU3d3QyxFQUFjLHdCQUNqQzM1QyxLQUFLVSxLQUFLd0ksWUFBWTJyQyxFQUFha0Msa0JBQW1CLGFBVWxFb0gsZ0JBQWlCLFNBQVVHLEVBQVdDLEdBQ2xDLE1BQU0xSixFQUFlNzBDLEtBQUtLLFFBQVEyaUIsTUFFOUIsUUFBUXJoQixLQUFLMjhDLEVBQVVudEIsV0FDdkIwakIsRUFBYXFDLHFCQUFxQjdnQyxhQUFhLFlBQVksR0FDM0R3K0IsRUFBYXNDLHFCQUFxQjlnQyxhQUFhLFlBQVksS0FFM0R3K0IsRUFBYXFDLHFCQUFxQmhsQixnQkFBZ0IsWUFDbEQyaUIsRUFBYXNDLHFCQUFxQmpsQixnQkFBZ0IsYUFHakRxc0IsR0FBZ0JELElBQWNDLEdBSS9CMUosRUFBYWEsWUFBWXIvQixhQUFhLFlBQVksR0FDbER3K0IsRUFBYVksWUFBWXZqQixnQkFBZ0IsY0FKekMyaUIsRUFBYWEsWUFBWXhqQixnQkFBZ0IsWUFDekMyaUIsRUFBYVksWUFBWXAvQixhQUFhLFlBQVksS0FRMURtb0MsY0FBZSxLQUNmQyxlQUFnQixLQUNoQkMsY0FBZSxLQUNmdEYsZUFBZ0IsS0FDaEJELFFBQVEsRUFDUkcsV0FBWSxLQUNaRSxlQUFnQixLQUNoQkQsY0FBZSxLQUNmTixlQUFnQixLQUNoQkksS0FBTSxLQUNOSCxjQUFlLFNBQVV5RixHQUNyQjMrQyxLQUFLSyxRQUFRbUIsUUFBUTB2QixRQUFRN2EsYUFBYSxrQkFBbUJzb0MsR0FDekRBLEVBQVMzK0MsS0FBS1UsS0FBS3dJLFlBQVlsSixLQUFLSyxRQUFRbUIsUUFBUTB2QixRQUFTLGVBQzVEbHhCLEtBQUtVLEtBQUt5SSxTQUFTbkosS0FBS0ssUUFBUW1CLFFBQVEwdkIsUUFBUyxnQkFHMUQwdEIsb0JBQXFCLFNBQVVsOUMsR0FDM0JBLEVBQUVzRCxrQkFDRixNQUFNK3pDLEVBQWMvNEMsS0FBSzhCLFFBQVFraEIsTUFFNUIrMUIsRUFBWUksT0FHTkosRUFBWThGLFlBQ25CNytDLEtBQUs4K0MsSUFBSXo4QyxvQkFBb0IsWUFBYTAyQyxFQUFZOEYsV0FDdEQ5RixFQUFZOEYsVUFBWSxPQUp4QjlGLEVBQVlDLGNBQWNoN0MsS0FBS2dDLE1BQy9CKzRDLEVBQVlHLGNBQWNsN0MsS0FBS2dDLE1BQU0sSUFNcEMrNEMsRUFBWU8sWUFBZVAsRUFBWUUsaUJBRTVDRixFQUFZb0YsZ0JBQWdCbmdELEtBQUtnQyxLQUFNKzRDLEVBQVlPLFdBQVlQLEVBQVlRLGVBQzNFUixFQUFZVSwwQkFBMEJ6N0MsS0FBS2dDLEtBQU0rNEMsRUFBWVEsZUFBaUJSLEVBQVlPLFlBRTFGUCxFQUFZSyxlQUFpQkwsRUFBWUUsZUFBZXJ3QyxpQkFBaUIsMkJBQ3JFbXdDLEVBQVlRLGVBQWlCUixFQUFZTyxZQUFZdDVDLEtBQUtxNkIsVUFBVTBlLEVBQVlRLGVBRS9FUixFQUFZSSxTQUNiSixFQUFZTyxXQUFhLEtBQ3pCUCxFQUFZUSxjQUFnQixLQUM1QlIsRUFBWVMsZUFBaUIsUUFJckN1RixtQkFBb0IsU0FBVXI5QyxHQUMxQjFCLEtBQUtnL0MsV0FBWSxFQUNqQixNQUFNakcsRUFBYy80QyxLQUFLOEIsUUFBUWtoQixNQUMzQnBoQixFQUFTNUIsS0FBS1UsS0FBS2k1QixpQkFBaUJqNEIsRUFBRUUsT0FBUTVCLEtBQUtVLEtBQUt3eEMsUUFFOUQsR0FBSTZHLEVBQVlJLE9BQ1J2M0MsSUFBV20zQyxFQUFZTyxXQUFZUCxFQUFZRyxjQUFjbDdDLEtBQUtnQyxNQUFNLEdBQ3ZFKzRDLEVBQVlHLGNBQWNsN0MsS0FBS2dDLE1BQU0sUUFDdkMsSUFBSys0QyxFQUFZTSxLQUFNLENBQzFCLEdBQUl6M0MsSUFBV20zQyxFQUFZTyxXQUFZLE9BQ2xDUCxFQUFZRyxjQUFjbDdDLEtBQUtnQyxNQUFNLEdBR3pDNEIsR0FBVUEsSUFBV20zQyxFQUFZUSxlQUFpQlIsRUFBWVMsaUJBQW1CNTNDLEVBQU91dkIsVUFDekY0bkIsRUFBWUUsaUJBQW1CajVDLEtBQUtVLEtBQUtpNUIsaUJBQWlCLzNCLEVBQVEsV0FJdEVtM0MsRUFBWVEsY0FBZ0IzM0MsRUFDNUJtM0MsRUFBWWtHLGVBQWVqaEQsS0FBS2dDLEtBQU0rNEMsRUFBWU8sV0FBWTEzQyxLQUdsRXE5QyxlQUFnQixTQUFVQyxFQUFXQyxHQUNqQyxNQUFNcEcsRUFBYy80QyxLQUFLOEIsUUFBUWtoQixNQUMzQnJDLEVBQU9vNEIsRUFBWUUsZUFBZXQ0QixLQUNsQ2pnQixFQUFPVixLQUFLVSxLQUVacXZDLEVBQWdCZ0osRUFBWUUsZUFBZXJ3QyxpQkFBaUIsMkJBQ2xFLElBQUssSUFBSS9LLEVBQUksRUFBRzRKLEVBQU1zb0MsRUFBY3pwQyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUNqRDZDLEVBQUt3SSxZQUFZNm1DLEVBQWNseUMsR0FBSSwwQkFHdkMsR0FBSXFoRCxJQUFjQyxJQUNkeitDLEVBQUt5SSxTQUFTKzFDLEVBQVcsMkJBQ3BCbkcsRUFBWUksUUFBUSxPQUc3QixJQUFJaUcsR0FBbUIsRUFDbkI1RSxFQUFZLEdBQ1pELEVBQWEsR0FDakIsTUFBTW1ELEVBQU0zRSxFQUFZTSxLQUFPLENBQUNnRyxHQUFJLEVBQUc1RSxHQUFJLEtBQU1xRCxHQUFJLEtBQU1wRCxHQUFJLEtBQU12OEIsR0FBSSxNQUV6RSxJQUFLLElBQThCZSxFQUFPazdCLEVBQWpDdjhDLEVBQUksRUFBRzRKLEVBQU1rWixFQUFLcmEsT0FBd0J6SSxFQUFJNEosRUFBSzVKLElBQUssQ0FDN0RxaEIsRUFBUXlCLEVBQUs5aUIsR0FBR3FoQixNQUNoQms3QixFQUFVLEVBRVYsSUFBSyxJQUFnQzc3QixFQUFNbzhCLEVBQWFGLEVBQUlDLEVBQW5EeDhDLEVBQUksRUFBR3ExQyxFQUFPcjBCLEVBQU01WSxPQUFtQ3BJLEVBQUlxMUMsRUFBTXIxQyxJQUFLLENBTTNFLEdBTEFxZ0IsRUFBT1csRUFBTWhoQixHQUNidThDLEVBQUtsOEIsRUFBSzY3QixRQUFVLEVBQ3BCTSxFQUFLbjhCLEVBQUsrN0IsUUFBVSxFQUNwQkssRUFBY3o4QyxFQUFJazhDLEVBRWRJLEVBQVVsMEMsT0FBUyxFQUNuQixJQUFLLElBQVdzMEMsRUFBUGo4QyxFQUFJLEVBQVFBLEVBQUk2N0MsRUFBVWwwQyxPQUFRM0gsSUFDdkNpOEMsRUFBTUosRUFBVTc3QyxHQUNaaThDLEVBQUl2N0IsSUFBTXhoQixJQUNWODhDLEdBQWVDLEVBQUl2cEMsT0FDbkIrb0MsR0FBV1EsRUFBSUgsR0FDZkUsR0FBZUMsRUFBSUgsR0FDbkJHLEVBQUlGLElBQU0sRUFDVkUsRUFBSXY3QixJQUFNeGhCLEVBQUksRUFDVis4QyxFQUFJRixHQUFLLElBQ1RGLEVBQVV2eEMsT0FBT3RLLEVBQUcsR0FDcEJBLE1BRUdULElBQU1xMUMsRUFBTyxJQUNwQnFILEVBQUlGLElBQU0sRUFDVkUsRUFBSXY3QixJQUFNeGhCLEVBQUksRUFDVis4QyxFQUFJRixHQUFLLElBQ1RGLEVBQVV2eEMsT0FBT3RLLEVBQUcsR0FDcEJBLE9BTWhCLEdBQUl5Z0QsR0FTQSxHQVJJN2dDLElBQVMyZ0MsR0FBYTNnQyxJQUFTNGdDLElBQy9CekIsRUFBSWpELEdBQWdCLE9BQVhpRCxFQUFJakQsSUFBZWlELEVBQUlqRCxHQUFLRSxFQUFjK0MsRUFBSWpELEdBQUtFLEVBQzVEK0MsRUFBSUksR0FBZ0IsT0FBWEosRUFBSUksSUFBZUosRUFBSUksR0FBS25ELEVBQWNGLEVBQUtpRCxFQUFJSSxHQUFLbkQsRUFBY0YsRUFDL0VpRCxFQUFJaEQsR0FBZ0IsT0FBWGdELEVBQUloRCxJQUFlZ0QsRUFBSWhELEdBQUs3OEMsRUFBSTYvQyxFQUFJaEQsR0FBSzc4QyxFQUNsRDYvQyxFQUFJdi9CLEdBQWdCLE9BQVh1L0IsRUFBSXYvQixJQUFldS9CLEVBQUl2L0IsR0FBS3RnQixFQUFJNjhDLEVBQUtnRCxFQUFJdi9CLEdBQUt0Z0IsRUFBSTY4QyxFQUMzRGdELEVBQUkyQixJQUFNLEdBR0MsSUFBWDNCLEVBQUkyQixHQUFVLENBQ2RELEdBQW1CLEVBQ25CNUUsRUFBWSxHQUNaRCxFQUFhLEdBQ2IxOEMsR0FBSyxFQUNMLFlBRUQsR0FBSTZDLEVBQUsyN0MsdUJBQXVCcUIsRUFBSWpELEdBQUlpRCxFQUFJSSxHQUFJbkQsRUFBYUEsRUFBY0YsSUFBTy81QyxFQUFLMjdDLHVCQUF1QnFCLEVBQUloRCxHQUFJZ0QsRUFBSXYvQixHQUFJdGdCLEVBQUdBLEVBQUk2OEMsR0FBSyxDQUM3SSxNQUFNNEUsRUFBUTVCLEVBQUlqRCxHQUFLRSxFQUFjK0MsRUFBSWpELEdBQUtFLEVBQ3hDNEUsRUFBUTdCLEVBQUlJLEdBQUtuRCxFQUFjRixFQUFLaUQsRUFBSUksR0FBS25ELEVBQWNGLEVBQzNEK0UsRUFBUTlCLEVBQUloRCxHQUFLNzhDLEVBQUk2L0MsRUFBSWhELEdBQUs3OEMsRUFDOUI0aEQsRUFBUS9CLEVBQUl2L0IsR0FBS3RnQixFQUFJNjhDLEVBQUtnRCxFQUFJdi9CLEdBQUt0Z0IsRUFBSTY4QyxFQUU3QyxHQUFJZ0QsRUFBSWpELEtBQU82RSxHQUFTNUIsRUFBSUksS0FBT3lCLEdBQVM3QixFQUFJaEQsS0FBTzhFLEdBQVM5QixFQUFJdi9CLEtBQU9zaEMsRUFBTyxDQUM5RS9CLEVBQUlqRCxHQUFLNkUsRUFDVDVCLEVBQUlJLEdBQUt5QixFQUNUN0IsRUFBSWhELEdBQUs4RSxFQUNUOUIsRUFBSXYvQixHQUFLc2hDLEVBQ1Q1aEQsR0FBSyxFQUVMMjhDLEVBQVksR0FDWkQsRUFBYSxHQUNiLE1BR0o3NUMsRUFBS3lJLFNBQVNvVixFQUFNLDBCQUdwQm04QixFQUFLLEdBQ0xILEVBQVc1eEMsS0FBSyxDQUNaMEksTUFBT3NwQyxFQUNQRixHQUFJQSxFQUFLLEVBQ1RDLEdBQUlBLEVBQ0pyN0IsS0FBTSxJQUlkKzZCLEdBQVc3N0IsRUFBSzY3QixRQUFVLEVBRzlCSSxFQUFZQSxFQUFVMS9CLE9BQU95L0IsR0FBWU0sTUFBSyxTQUFVcnJDLEVBQUc4SixHQUFJLE9BQU85SixFQUFFNkIsTUFBUWlJLEVBQUVqSSxTQUNsRmtwQyxFQUFhLEtBSXJCdkIsY0FBZSxXQUNYLE1BQU1ELEVBQWMvNEMsS0FBSzhCLFFBQVFraEIsTUFFN0IrMUIsRUFBWThGLFlBQ1o3K0MsS0FBSzgrQyxJQUFJejhDLG9CQUFvQixZQUFhMDJDLEVBQVk4RixXQUN0RDlGLEVBQVk4RixVQUFZLE1BR3hCOUYsRUFBWXlGLGdCQUNaeCtDLEtBQUs4K0MsSUFBSXo4QyxvQkFBb0IsWUFBYTAyQyxFQUFZeUYsZUFDdER4K0MsS0FBSzgrQyxJQUFJejhDLG9CQUFvQixZQUFhMDJDLEVBQVl5RixlQUN0RHpGLEVBQVl5RixjQUFnQixNQUc1QnpGLEVBQVkwRixpQkFDWnorQyxLQUFLOCtDLElBQUl6OEMsb0JBQW9CLFVBQVcwMkMsRUFBWTBGLGdCQUNwRDFGLEVBQVkwRixlQUFpQixNQUc3QjFGLEVBQVkyRixnQkFDWjErQyxLQUFLOCtDLElBQUl6OEMsb0JBQW9CLFFBQVMwMkMsRUFBWTJGLGVBQ2xEM0YsRUFBWTJGLGNBQWdCLE9BSXBDRyxVQUFXLEtBQ1hhLHVCQUF3QixTQUFVaEcsRUFBV3Y2QixHQUN6QyxNQUFNNDVCLEVBQWMvNEMsS0FBSzhCLFFBQVFraEIsTUFFakMrMUIsRUFBWUMsY0FBY2g3QyxLQUFLZ0MsTUFDL0JBLEtBQUs4ekIsaUJBRUxpbEIsRUFBWUksT0FBU2g2QixFQUNyQjQ1QixFQUFZTyxXQUFhSSxFQUN6QlgsRUFBWVMsZUFBaUJFLEVBQVV2b0IsU0FDdkM0bkIsRUFBWUUsZUFBaUJqNUMsS0FBS1UsS0FBS2k1QixpQkFBaUIrZixFQUFXLFNBRW5FLE1BQU0zSixFQUFnQmdKLEVBQVlFLGVBQWVyd0MsaUJBQWlCLDJCQUNsRSxJQUFLLElBQUkvSyxFQUFJLEVBQUc0SixFQUFNc29DLEVBQWN6cEMsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDakRtQyxLQUFLVSxLQUFLd0ksWUFBWTZtQyxFQUFjbHlDLEdBQUksMEJBRzVDbUMsS0FBS1UsS0FBS3lJLFNBQVN1d0MsRUFBVywwQkFFOUJYLEVBQVl5RixjQUFnQnpGLEVBQVlnRyxtQkFBbUIxL0MsS0FBS1csTUFDaEUrNEMsRUFBWTBGLGVBQWlCMUYsRUFBWTZGLG9CQUFvQnYvQyxLQUFLVyxNQUU3RG1mLEdBR0Q0NUIsRUFBWTJGLGNBQWdCLFdBQ3hCMStDLEtBQUttMEIsY0FBY24wQixLQUFLSyxRQUFRMmlCLE1BQU1nMEIsVUFBV2gzQyxLQUFLSyxRQUFRMmlCLE1BQU00ekIsZ0JBQWlCNTJDLEtBQUs4QixRQUFRa2hCLE1BQU1uZ0IsS0FBS3hELEtBQUtXLE1BQU8wNUMsRUFBVyxTQUMvSFgsRUFBWU0sTUFBTXI1QyxLQUFLOHpCLGtCQUM5QnowQixLQUFLVyxNQUVQQSxLQUFLOCtDLElBQUl6OUMsaUJBQWlCLFFBQVMwM0MsRUFBWTJGLGVBQWUsR0FDOUQxK0MsS0FBSzgrQyxJQUFJejlDLGlCQUFpQixZQUFhMDNDLEVBQVl5RixlQUFlLElBUmxFeCtDLEtBQUs4K0MsSUFBSXo5QyxpQkFBaUIsWUFBYTAzQyxFQUFZeUYsZUFBZSxHQVd0RXgrQyxLQUFLOCtDLElBQUl6OUMsaUJBQWlCLFVBQVcwM0MsRUFBWTBGLGdCQUFnQixHQUNqRTFGLEVBQVk4RixVQUFZOUYsRUFBWWwyQyxLQUFLeEQsS0FBS1csTUFDOUNBLEtBQUs4K0MsSUFBSXo5QyxpQkFBaUIsWUFBYTAzQyxFQUFZOEYsV0FBVyxJQUdsRXZILHdCQUF5QixTQUFVNTFDLEdBQy9CQSxFQUFFc0Qsa0JBQ0YsTUFBTXBELEVBQVNGLEVBQUVFLE9BQU9DLGFBQWEsZ0JBQWtCSCxFQUFFRSxPQUFTRixFQUFFRSxPQUFPNkgsV0FFM0UsR0FBSTdILEVBQU9DLGFBQWEsWUFBYSxPQUVyQyxNQUFNMkgsRUFBVTVILEVBQU9DLGFBQWEsZ0JBQzlCL0MsRUFBUThDLEVBQU9DLGFBQWEsY0FDNUI2TSxFQUFTOU0sRUFBT0MsYUFBYSxlQUM3QmszQyxFQUFjLzRDLEtBQUs4QixRQUFRa2hCLE1BRWpDLEdBQTJDLG1CQUFoQysxQixFQUFZNEQsa0JBQ25CNUQsRUFBWTRELGtCQUNJLFlBQVpuekMsR0FBdUIsT0FHL0IsSUFBS0EsRUFBUyxPQUVkOUgsRUFBRTRILGlCQUNGLE1BQU11ckMsRUFBZTcwQyxLQUFLSyxRQUFRMmlCLE1BRWxDLE9BQVF4WixHQUNKLElBQUssU0FDTCxJQUFLLFNBQ0R1dkMsRUFBWStCLFVBQVU5OEMsS0FBS2dDLEtBQU1sQixFQUFPNFAsR0FDeEMsTUFDSixJQUFLLFNBQ0RxcUMsRUFBWXFGLGFBQWFwZ0QsS0FBS2dDLE1BQzlCLE1BQ0osSUFBSyxVQUNEKzRDLEVBQVk2RCxjQUFjNStDLEtBQUtnQyxNQUMvQixNQUNKLElBQUssUUFDRCs0QyxFQUFZenhCLFdBQVd0cEIsS0FBS2dDLEtBQU1sQixHQUNsQyxNQUNKLElBQUssUUFDRGk2QyxFQUFZMXhCLFdBQVdycEIsS0FBS2dDLE1BQzVCLE1BQ0osSUFBSyxTQUNENjBDLEVBQWFLLFdBQWFMLEVBQWFLLFVBQ3ZDNkQsRUFBWWMsY0FBYzc3QyxLQUFLZ0MsS0FBTSxTQUNyQys0QyxFQUFZZSx5QkFBeUI5N0MsS0FBS2dDLEtBQU02MEMsRUFBYXJmLFVBQzdEdWpCLEVBQVlnQix5QkFBeUIvN0MsS0FBS2dDLEtBQU02MEMsRUFBYUMsV0FBWWlFLEVBQVlJLFFBQ3JGLE1BQ0osSUFBSyxTQUNEdEUsRUFBYU0sY0FBZ0JOLEVBQWFNLGFBQzFDNEQsRUFBWWMsY0FBYzc3QyxLQUFLZ0MsS0FBTSxVQUNyQys0QyxFQUFZZSx5QkFBeUI5N0MsS0FBS2dDLEtBQU02MEMsRUFBYXJmLFVBQzdEdWpCLEVBQVlnQix5QkFBeUIvN0MsS0FBS2dDLEtBQU02MEMsRUFBYUMsV0FBWWlFLEVBQVlJLFFBQ3JGLE1BQ0osSUFBSyxTQUNELE1BQU1oZixFQUFXMGEsRUFBYXJmLFNBQVMvckIsV0FDdkN6SixLQUFLVSxLQUFLc3BCLFdBQVc2cUIsRUFBYXJmLFVBQ2xDeDFCLEtBQUs4ekIsaUJBRURxRyxJQUFhbjZCLEtBQUtLLFFBQVFtQixRQUFRMHZCLFNBQVNseEIsS0FBS1UsS0FBSzA1QixxQkFBcUJELEdBQVUsU0FBVTNKLEdBQVcsT0FBcUMsSUFBOUJBLEVBQVEvWixXQUFXblEsU0FBaUIsTUFDeEp0RyxLQUFLNEMsUUFJYjVDLEtBQUswekIsUUFBUS9xQixNQUFLLEtQcjNDK0VnM0MsWVF0QjFGLENBQ1h2aEQsS0FBTSxjQUNOMkMsUUFBUyxVQUNUWixJQUFLLFNBQVVDLEVBQU04cEIsR0FDakIsTUFBTTdwQixFQUFVRCxFQUFLQyxRQUNyQkEsRUFBUXMvQyxZQUFjLENBQ2xCL1IsV0FBWTFqQixFQUFjNWxCLGNBQWMsUUFDeEN1cEMsY0FBZTNqQixFQUFjemdCLFdBQVduRixjQUFjLG9CQUN0RHM3QyxZQUFhLEtBQ2I3TSxjQUFlLElBSW5CLElBQUl6b0IsRUFBVXRxQixLQUFLdXFCLFdBQVducUIsR0FHOUJrcUIsRUFBUWhtQixjQUFjLE1BQU1qRCxpQkFBaUIsUUFBU3JCLEtBQUs2L0MsT0FBT3hnRCxLQUFLZSxJQUN2RUMsRUFBUXMvQyxZQUFZQyxZQUFjdDFCLEVBQVExaEIsaUJBQWlCLGFBRzNEeEksRUFBS3VxQixlQUFlM3FCLEtBQUs1QixLQUFNOHJCLEVBQWVJLEdBRzlDQSxFQUFVLE1BR2RDLFdBQVksU0FBVW5xQixHQUNsQixNQUFNc08sRUFBU3RPLEVBQUttQyxRQUNkdTlDLEVBQWUxL0MsRUFBS3dFLEtBQUt5YyxRQUN6QmlKLEVBQVVscUIsRUFBS00sS0FBS0MsY0FBYyxPQUN4QzJwQixFQUFRMXBCLFVBQVksMENBRXBCLE1BQU1tL0MsRUFBaUIsQ0FBQyxJQUFLLE1BQU8sYUFBYyxNQUFPLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUNqRkMsRUFBY3R4QyxFQUFPK1MsU0FBcUMsSUFBMUIvUyxFQUFPK1MsUUFBUW5iLE9BQWdDb0ksRUFBTytTLFFBQXhCcytCLEVBRXBFLElBQUlwOEMsRUFBTyx3REFDWCxJQUFLLElBQW9DbVEsRUFBUWhMLEVBQVNVLEVBQVNwTCxFQUFNaXpCLEVBQUc2UyxFQUFPdGpDLEVBQTFFL0MsRUFBSSxFQUFHNEosRUFBTXU0QyxFQUFXMTVDLE9BQTZEekksRUFBSTRKLEVBQUs1SixJQUNuR2lXLEVBQVNrc0MsRUFBV25pRCxHQUVFLGlCQUFYaVcsR0FBdUJpc0MsRUFBZXIzQyxRQUFRb0wsSUFBVyxHQUNoRWhMLEVBQVVnTCxFQUFPcEcsY0FDakJsRSxFQUFzQixlQUFaVixFQUEyQixRQUFzQixRQUFaQSxFQUFvQixPQUFTLFVBQzVFdW9CLEVBQUksS0FBSzF2QixLQUFLbUgsR0FBV0EsRUFBUXdJLE1BQU0sT0FBTyxHQUFLLEdBQ25EbFQsRUFBTzBoRCxFQUFhLFFBQVV6dUIsRUFBSSxJQUFNdm9CLElBQVl1b0IsRUFDcER6d0IsRUFBWSxHQUNac2pDLEVBQVEsS0FFUnA3QixFQUFVZ0wsRUFBTzFMLElBQUlzRixjQUNyQmxFLEVBQVVzSyxFQUFPdEssUUFDakJwTCxFQUFPMFYsRUFBTzFWLE1BQVEwSyxFQUN0QmxJLEVBQVlrVCxFQUFPbTdCLE1BQ25CL0ssRUFBUXRqQyxFQUFZLFdBQWFBLEVBQVksSUFBTSxJQUd2RCtDLEdBQVEsK0RBQ3lENkYsRUFBVSxpQkFBbUJWLEVBQVUsaUJBQW1CbEksRUFBWSxZQUFjeEMsRUFBTyxpQkFBbUJBLEVBRHZLLE1BRU0wSyxFQUFVbzdCLEVBQVEsSUFBTTlsQyxFQUFPLEtBQU8wSyxFQUY1QyxrQkFTWixPQUpBbkYsR0FBUSxjQUVSMm1CLEVBQVFsbUIsVUFBWVQsRUFFYjJtQixHQU1YcUosT0FBUSxTQUFVbnlCLEdBQ2QsSUFBSXkrQyxFQUFjamdELEtBQUs0RSxLQUFLeWMsUUFBUUksUUFDcEMsTUFBTTdmLEVBQVM1QixLQUFLSyxRQUFRcy9DLFlBQVkvUixXQUV4QyxHQUFLcHNDLEdBRUUsR0FBSXhCLEtBQUtVLEtBQUs2L0IsZ0JBQWdCLytCLEdBQVUsQ0FDM0MsTUFDTXcrQyxFQURnQmhnRCxLQUFLSyxRQUFRcy9DLFlBQ0ZDLFlBQzNCenVCLEVBQVczdkIsRUFBUTJ2QixTQUFTempCLGNBQzVCOU0sR0FBYVksRUFBUVosVUFBVTBRLE1BQU0sK0JBQWlDLENBQUMsS0FBSyxHQUFHOUksT0FFckYsSUFBSyxJQUFvQ3VJLEVBQWhDbFQsRUFBSSxFQUFHNEosRUFBTXU0QyxFQUFXMTVDLE9BQVd6SSxFQUFJNEosRUFBSzVKLElBRWpELEdBREFrVCxFQUFJaXZDLEVBQVduaUQsR0FDWHN6QixJQUFhcGdCLEVBQUVsUCxhQUFhLGVBQWlCakIsSUFBY21RLEVBQUVsUCxhQUFhLGNBQWUsQ0FDekZvK0MsRUFBY2x2QyxFQUFFdkwsTUFDaEIsTUFRUixPQUpBeEYsS0FBS1UsS0FBSzB0QyxVQUFVeHNDLEVBQVFxK0MsR0FDNUJyK0MsRUFBT3lVLGFBQWEsYUFBYzhhLEdBQ2xDdnZCLEVBQU95VSxhQUFhLGFBQWN6VixJQUUzQixRQW5CUFosS0FBS1UsS0FBSzB0QyxVQUFVeHNDLEVBQVFxK0MsR0FzQmhDLE9BQU8sR0FNWHQ5QyxHQUFJLFdBQ0EsTUFBTXU5QyxFQUFnQmxnRCxLQUFLSyxRQUFRcy9DLFlBQzdCSyxFQUFhRSxFQUFjTixZQUMzQmgrQyxFQUFTcytDLEVBQWN0UyxXQUN2Qm1GLEdBQWlCbnhDLEVBQU9DLGFBQWEsZUFBaUIsS0FBT0QsRUFBT0MsYUFBYSxlQUFpQixJQUV4RyxHQUFJa3hDLElBQWtCbU4sRUFBY25OLGNBQWUsQ0FDL0MsSUFBSyxJQUFvQ2hpQyxFQUFoQ2xULEVBQUksRUFBRzRKLEVBQU11NEMsRUFBVzE1QyxPQUFXekksRUFBSTRKLEVBQUs1SixJQUNqRGtULEVBQUlpdkMsRUFBV25pRCxHQUNYazFDLElBQWtCaGlDLEVBQUVsUCxhQUFhLGNBQWdCa1AsRUFBRWxQLGFBQWEsY0FDaEU3QixLQUFLVSxLQUFLeUksU0FBUzRILEVBQUcsVUFFdEIvUSxLQUFLVSxLQUFLd0ksWUFBWTZILEVBQUcsVUFJakNtdkMsRUFBY25OLGNBQWdCQSxJQUl0QzhNLE9BQVEsU0FBVW4rQyxHQUNkQSxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUYsSUFBSXBELEVBQVNGLEVBQUVFLE9BQ1g0SCxFQUFVLEtBQU0xSyxFQUFRLEtBQU1zSixFQUFNLEtBQU14SCxFQUFZLEdBRTFELE1BQVE0SSxJQUFZLE1BQU03SCxLQUFLQyxFQUFPa0gsVUFBVSxDQUk1QyxHQUhBVSxFQUFVNUgsRUFBT0MsYUFBYSxnQkFDOUIvQyxFQUFROEMsRUFBT0MsYUFBYSxjQUM1QmpCLEVBQVlnQixFQUFPQyxhQUFhLGNBQzVCMkgsRUFBUyxDQUNUcEIsRUFBTXhHLEVBQU9vVSxXQUNiLE1BRUpwVSxFQUFTQSxFQUFPNkgsV0FHcEIsR0FBS0QsRUFBTCxDQUdBLEdBQWdCLFVBQVpBLEVBQXFCLENBQ3JCLE1BQU0yMkMsRUFBZS8zQyxFQUFJazJCLFdBQVUsR0FDbkN0K0IsS0FBS2dzQyx3QkFBd0JtVSxPQUc1QixDQUNELElBQUlsUSxFQUFRandDLEtBQUtrd0MsV0FDYnpDLEVBQWtCenRDLEtBQUttd0Msa0NBQWlDLEdBRTVELEdBQStCLElBQTNCMUMsRUFBZ0JubkMsU0FDaEIycEMsRUFBUWp3QyxLQUFLb3dDLGlCQUFpQkgsRUFBTyxNQUNyQ3hDLEVBQWtCenRDLEtBQUttd0Msa0NBQWlDLEdBQ3pCLElBQTNCMUMsRUFBZ0JubkMsUUFBYyxPQUd0QyxNQUFNMnFDLEVBQWNoQixFQUFNZ0IsWUFDcEJDLEVBQVlqQixFQUFNaUIsVUFFbEJ4d0MsRUFBT1YsS0FBS1UsS0FDbEIsSUFBSXl5QyxFQUFRMUYsRUFBZ0IsR0FDeEIyRixFQUFPM0YsRUFBZ0JBLEVBQWdCbm5DLE9BQVMsR0FDcEQsTUFBTTg1QyxFQUFZMS9DLEVBQUsrekMsWUFBWXhFLEVBQU1ZLGVBQWdCc0MsRUFBTyxLQUFNLE1BQ2hFa04sRUFBVzMvQyxFQUFLK3pDLFlBQVl4RSxFQUFNYyxhQUFjcUMsRUFBTSxLQUFNLE1BRzVEa04sRUFBUXRnRCxLQUFLdWdELFdBQVc5UyxHQUFpQixHQUMzQzZTLEVBQU1sc0IsS0FBSStlLEVBQVFtTixFQUFNbHNCLElBQ3hCa3NCLEVBQU1oc0IsS0FBSThlLEVBQU9rTixFQUFNaHNCLElBRzNCdDBCLEtBQUtvekIsU0FBUzF5QixFQUFLNnpDLGdCQUFnQjZMLEVBQVdqTixHQUFRbEMsRUFBYXZ3QyxFQUFLNnpDLGdCQUFnQjhMLEVBQVVqTixHQUFPbEMsR0FDekcsTUFBTXNQLEVBQWtCeGdELEtBQUttd0Msa0NBQWlDLEdBRzlELEdBQWdCLFNBQVozbUMsRUFBb0IsQ0FDcEIsTUFBTS9CLEVBQU0rNEMsRUFBZ0JsNkMsT0FBUyxFQUNyQyxJQUFJbUQsRUFBYSsyQyxFQUFnQi80QyxHQUFLZ0MsV0FDbENnM0MsRUFBY3I0QyxFQUFJazJCLFdBQVUsR0FDaEMsTUFBTTU3QixFQUFlKzlDLEVBRXJCLElBQUssSUFBYTF2QyxFQUFHaUssRUFBTTBsQyxFQUFRdk8sRUFBTXdPLEVBQU9DLEVBQXZDL2lELEVBQUk0SixFQUEyQzByQyxHQUFRLEVBQU10MUMsR0FBSyxFQUFHQSxJQUUxRSxHQURBa1QsRUFBSXl2QyxFQUFnQjNpRCxHQUNoQmtULEtBQVF5dkMsRUFBZ0IzaUQsRUFBSSxHQUFZMmlELEVBQWdCM2lELEVBQUksR0FBRzRMLFdBQTlCLE1BQXJDLENBOEJBLEdBNUJBbTNDLEVBQVNsZ0QsRUFBSzRuQyxZQUFZdjNCLEdBQzFCaUssRUFBTzRsQyxFQUFTLEdBQUs3dkMsRUFBRTNNLFVBQVU0SixRQUFRLG9CQUFxQixLQUM5RDB5QyxFQUFTaGdELEVBQUtpNUIsaUJBQWlCNW9CLEdBQUcsU0FBVXlmLEdBQ3hDLE9BQU9BLEVBQVEvbUIsYUFBZUEsTUFHOUJBLElBQWVzSCxFQUFFdEgsWUFBY20zQyxLQUMzQmxnRCxFQUFLNi9CLGdCQUFnQjkyQixJQUNyQkEsRUFBV0EsV0FBV28yQixhQUFhNGdCLEVBQWFoM0MsRUFBVytoQyxhQUMzRC9oQyxFQUFhQSxFQUFXQSxhQUV4QkEsRUFBV28yQixhQUFhNGdCLEVBQWFDLEVBQVNBLEVBQU9sVixZQUFjLE1BQ25FL2hDLEVBQWFzSCxFQUFFdEgsWUFHbkIwb0MsRUFBT3NPLEVBQVlqVixZQUNmMkcsR0FBUXNPLEVBQVl0dkIsV0FBYWdoQixFQUFLaGhCLFVBQVl6d0IsRUFBS21nRCxpQkFBaUJKLEVBQWF0TyxLQUNyRnNPLEVBQVlyOEMsV0FBYSxPQUFTK3RDLEVBQUsvdEMsVUFDdkMxRCxFQUFLc3BCLFdBQVdtb0IsSUFHcEJzTyxFQUFjcjRDLEVBQUlrMkIsV0FBVSxHQUM1QjZVLEdBQVEsR0FHWndOLEVBQVFGLEVBQVlyOEMsVUFDcEJxOEMsRUFBWXI4QyxXQUFjK3VDLElBQVVuNEIsSUFBUzJsQyxHQUFTLFNBQVNoL0MsS0FBS3FaLEdBQVNBLEVBQU9BLEVBQU8sUUFBVTJsQyxFQUUzRixJQUFOOWlELEVBQVMsQ0FDVDRMLEVBQVdvMkIsYUFBYTRnQixFQUFhMXZDLEdBQ3JDb2hDLEVBQU9waEMsRUFBRXk2QixZQUNMMkcsR0FBUXNPLEVBQVl0dkIsV0FBYWdoQixFQUFLaGhCLFVBQVl6d0IsRUFBS21nRCxpQkFBaUJKLEVBQWF0TyxLQUNyRnNPLEVBQVlyOEMsV0FBYSxPQUFTK3RDLEVBQUsvdEMsVUFDdkMxRCxFQUFLc3BCLFdBQVdtb0IsSUFHcEIsTUFBTWdDLEVBQU9zTSxFQUFZL2YsZ0JBQ3JCeVQsR0FBUXNNLEVBQVl0dkIsV0FBYWdqQixFQUFLaGpCLFVBQVl6d0IsRUFBS21nRCxpQkFBaUJKLEVBQWF0TSxLQUNyRkEsRUFBSy92QyxXQUFhLE9BQVNxOEMsRUFBWXI4QyxVQUN2QzFELEVBQUtzcEIsV0FBV3kyQixJQUluQkcsR0FBUWxnRCxFQUFLc3BCLFdBQVdqWixHQUN2QmlLLElBQU1tNEIsR0FBUSxHQUd4Qm56QyxLQUFLb3pCLFNBQVMxd0IsRUFBYyxFQUFHQSxFQUFjLE9BRzVDLENBQ0QsSUFBSyxJQUF5QzhULEVBQU1zcUMsRUFBM0NqakQsRUFBSSxFQUFHNEosRUFBTSs0QyxFQUFnQmw2QyxPQUF5QnpJLEVBQUk0SixFQUFLNUosSUFDcEUyWSxFQUFPZ3FDLEVBQWdCM2lELEdBRWxCMlksRUFBSzJhLFNBQVN6akIsZ0JBQWtCNU8sRUFBTTRPLGdCQUFrQjhJLEVBQUs1VixVQUFVMFEsTUFBTSwrQkFBaUMsQ0FBQyxLQUFLLEdBQUc5SSxTQUFXNUgsR0FBZUYsRUFBSzRuQyxZQUFZOXhCLEtBQ25Lc3FDLEVBQVkxNEMsRUFBSWsyQixXQUFVLEdBQzFCNTlCLEVBQUtneUMscUJBQXFCb08sRUFBV3RxQyxHQUNyQ3NxQyxFQUFVMThDLFVBQVlvUyxFQUFLcFMsVUFFM0JvUyxFQUFLL00sV0FBVzAyQixhQUFhMmdCLEVBQVd0cUMsSUFHbEMsSUFBTjNZLElBQVNzMUMsRUFBUTJOLEdBQWF0cUMsR0FDOUIzWSxJQUFNNEosRUFBTSxJQUFHMnJDLEVBQU8wTixHQUFhdHFDLEdBQ3ZDc3FDLEVBQVksS0FHaEI5Z0QsS0FBS296QixTQUFTMXlCLEVBQUs2ekMsZ0JBQWdCNkwsRUFBV2pOLEdBQVFsQyxFQUFhdndDLEVBQUs2ekMsZ0JBQWdCOEwsRUFBVWpOLEdBQU9sQyxHQUk3R2x4QyxLQUFLMHpCLFFBQVEvcUIsTUFBSyxHQUd0QjNJLEtBQUttckIsZ0JSL095R2pILFdTdEJ2RyxDQUNYOWxCLEtBQU0sYUFDTjJDLFFBQVMsVUFDVFosSUFBSyxTQUFVQyxFQUFNOHBCLEdBQ2pCLE1BQU03cEIsRUFBVUQsRUFBS0MsUUFDckJBLEVBQVE2akIsV0FBYSxDQUNqQnFxQixVQUFXLEtBQ1hDLGFBQWMsR0FJbEIsSUFBSWxrQixFQUFVdHFCLEtBQUt1cUIsV0FBV25xQixHQUMxQnNzQyxFQUFTcGlCLEVBQVFobUIsY0FBYyxNQUduQ29vQyxFQUFPcnJDLGlCQUFpQixRQUFTckIsS0FBSzBxQixPQUFPcnJCLEtBQUtlLElBRWxEQyxFQUFRNmpCLFdBQVdxcUIsVUFBWTdCLEVBQU85akMsaUJBQWlCLGFBR3ZEeEksRUFBS3VxQixlQUFlM3FCLEtBQUs1QixLQUFNOHJCLEVBQWVJLEdBRzlDQSxFQUFVLEtBQU1vaUIsRUFBUyxNQUc3Qm5pQixXQUFZLFNBQVVucUIsR0FDbEIsTUFBTXNPLEVBQVN0TyxFQUFLbUMsUUFDZHFDLEVBQU94RSxFQUFLd0UsS0FDWjBsQixFQUFVbHFCLEVBQUtNLEtBQUtDLGNBQWMsT0FFeEMycEIsRUFBUTFwQixVQUFZLDJCQUVwQixNQUFNNnRDLEVBQVkvL0IsRUFBT3F5QyxZQUtyQnJ5QyxFQUFPcXlDLFlBTDRCLENBQ25DLENBQUM3d0MsS0FBTSxJQUFLcFIsTUFBTyxHQUNuQixDQUFDb1IsS0FBTSxPQUFRcFIsTUFBTyxNQUN0QixDQUFDb1IsS0FBTSxNQUFPcFIsTUFBTyxLQUNyQixDQUFDb1IsS0FBTSxJQUFLcFIsTUFBTyxJQUd2QixJQUFJNkUsRUFBTywySEFFeUVpQixFQUFLeWMsUUFBUUMsUUFBVSxpQkFBbUIxYyxFQUFLeWMsUUFBUUMsUUFBVSxNQUFRMWMsRUFBS3ljLFFBQVFDLFFBQVUsa0JBQ3BMLElBQUssSUFBa0NzRSxFQUE5Qi9uQixFQUFJLEVBQUc0SixFQUFNZ25DLEVBQVNub0MsT0FBY3pJLEVBQUk0SixFQUFLNUosSUFDbEQrbkIsRUFBTzZvQixFQUFTNXdDLEdBQ2hCOEYsR0FBUSw2REFBK0RpaUIsRUFBSzltQixNQUFRLFlBQWM4bUIsRUFBSzFWLEtBQU8saUJBQW1CMFYsRUFBSzFWLEtBQU8sS0FBTzBWLEVBQUsxVixLQUFPLGlCQU1wSyxPQUpBdk0sR0FBUSxjQUVSMm1CLEVBQVFsbUIsVUFBWVQsRUFFYjJtQixHQU1YM25CLEdBQUksV0FDQSxNQUFNcStDLEVBQW9CaGhELEtBQUtLLFFBQVE2akIsV0FDakN1cUIsRUFBV3VTLEVBQWtCelMsVUFDN0J6NkIsRUFBUzlULEtBQUtVLEtBQUtvOUIsaUJBQWlCOTlCLEtBQUtnckIsb0JBQ3pDd2pCLEVBQWUxNkIsRUFBY0EsRUFBT2hULE1BQU1vakIsV0FBYSxHQUEvQixHQUU5QixHQUFJc3FCLElBQWdCd1MsRUFBa0J4UyxZQUFhLENBQy9DLElBQUssSUFBSTN3QyxFQUFJLEVBQUc0SixFQUFNZ25DLEVBQVNub0MsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDeEMyd0MsSUFBZ0JDLEVBQVM1d0MsR0FBR2dFLGFBQWEsY0FDekM3QixLQUFLVSxLQUFLeUksU0FBU3NsQyxFQUFTNXdDLEdBQUksVUFFaENtQyxLQUFLVSxLQUFLd0ksWUFBWXVsQyxFQUFTNXdDLEdBQUksVUFJM0NtakQsRUFBa0J4UyxZQUFjQSxJQUl4QzlqQixPQUFRLFNBQVVocEIsR0FDZCxJQUFLLFlBQVlDLEtBQUtELEVBQUVFLE9BQU9rSCxTQUFVLE9BQU8sRUFFaERwSCxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUYsTUFBTWxHLEVBQVE0QyxFQUFFRSxPQUFPQyxhQUFhLGVBQWlCLEdBQy9DNGYsRUFBVXpoQixLQUFLc3pCLHNCQUVyQixJQUFLLElBQUl6MUIsRUFBSSxFQUFHNEosRUFBTWdhLEVBQVFuYixPQUFRekksRUFBSTRKLEVBQUs1SixJQUMzQzRqQixFQUFRNWpCLEdBQUdpRCxNQUFNb2pCLFdBQWFwbEIsRUFHbENrQixLQUFLbXJCLGFBR0xuckIsS0FBSzB6QixRQUFRL3FCLE1BQUssS1R0RXdHc2IsV0FBVUUsZVV0QjdILENBQ1gvbEIsS0FBTSxpQkFDTjJDLFFBQVMsVUFDVFosSUFBSyxTQUFVQyxFQUFNOHBCLEdBQ2pCLE1BQU03cEIsRUFBVUQsRUFBS0MsUUFDckJBLEVBQVE4akIsZUFBaUIsQ0FDckI4OEIsV0FBWSxNQUloQixJQUFJMzJCLEVBQVV0cUIsS0FBS3VxQixXQUFXbnFCLEdBRzlCa3FCLEVBQVFobUIsY0FBYyxNQUFNakQsaUJBQWlCLFFBQVNyQixLQUFLNi9DLE9BQU94Z0QsS0FBS2UsSUFFdkVDLEVBQVE4akIsZUFBZTg4QixXQUFhMzJCLEVBQVExaEIsaUJBQWlCLGFBRzdEeEksRUFBS3VxQixlQUFlM3FCLEtBQUs1QixLQUFNOHJCLEVBQWVJLEdBRzlDQSxFQUFVLE1BR2RDLFdBQVksU0FBVW5xQixHQUNsQixNQUFNc08sRUFBU3RPLEVBQUttQyxRQUNkK25CLEVBQVVscUIsRUFBS00sS0FBS0MsY0FBYyxPQUN4QzJwQixFQUFRMXBCLFVBQVksMENBRXBCLE1BQU1zZ0QsRUFBVzlnRCxFQUFLd0UsS0FBSzZpQixLQUNyQjA1QixFQUFjLENBQ2hCejVCLE9BQVEsQ0FDSnRwQixLQUFNOGlELEVBQVN4NUIsT0FDZnVuQixNQUFPLGlCQUNQbVMsT0FBUSxJQUVaejVCLFNBQVUsQ0FDTnZwQixLQUFNOGlELEVBQVN2NUIsU0FDZnNuQixNQUFPLG1CQUNQbVMsT0FBUSxJQUVaeDVCLEtBQU0sQ0FDRnhwQixLQUFNOGlELEVBQVN0NUIsS0FDZnFuQixNQUFPLGVBQ1BtUyxPQUFRLEtBR1ZDLEVBQW1CM3lDLEVBQU8yeUMsaUJBQXFELElBQWxDM3lDLEVBQU8yeUMsZ0JBQWdCLzZDLE9BQWdEb0ksRUFBTzJ5QyxnQkFBeEMsQ0FBQyxTQUFVLFdBQVksUUFFaEgsSUFBSTE5QyxFQUFPLHdEQUNYLElBQUssSUFBeUNoRSxFQUFHdkIsRUFBTThsQyxFQUFPa2QsRUFBckR2akQsRUFBSSxFQUFHNEosRUFBTTQ1QyxFQUFnQi82QyxPQUFnQ3pJLEVBQUk0SixFQUFLNUosSUFBSyxDQUdoRixHQUZBOEIsRUFBSTBoRCxFQUFnQnhqRCxHQUVILGlCQUFOOEIsRUFBZ0IsQ0FDdkIsTUFBTTJoRCxFQUFlSCxFQUFZeGhELEVBQUUrTixlQUNuQyxJQUFLNHpDLEVBQWMsU0FDbkIzaEQsRUFBSTJoRCxFQUdSbGpELEVBQU91QixFQUFFdkIsS0FDVDhsQyxFQUFRdmtDLEVBQUVzdkMsTUFBUSxXQUFhdHZDLEVBQUVzdkMsTUFBUSxJQUFNLEdBQy9DbVMsRUFBU3poRCxFQUFFeWhELE9BRVh6OUMsR0FBUSxnREFDMEN5OUMsRUFBUyxJQUFNQSxFQUFRLElBQU0saUJBQW1CemhELEVBQUVzdkMsTUFBUSxZQUFjN3dDLEVBQU8saUJBQW1CQSxFQUQ1SSxTQUVTOGxDLEVBQVEsSUFBTTlsQyxFQUZ2Qix1QkFTWixPQUpBdUYsR0FBUSxjQUVSMm1CLEVBQVFsbUIsVUFBWVQsRUFFYjJtQixHQU1YM25CLEdBQUksV0FDQSxNQUNNNCtDLEVBRG1CdmhELEtBQUtLLFFBQVE4akIsZUFDQzg4QixXQUNqQ2xPLEVBQWdCL3lDLEtBQUtVLEtBQUtvOUIsaUJBQWlCOTlCLEtBQUtnckIsb0JBRXRELElBQUssSUFBSW50QixFQUFJLEVBQUc0SixFQUFNODVDLEVBQWNqN0MsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDN0NtQyxLQUFLVSxLQUFLNEUsU0FBU3l0QyxFQUFld08sRUFBYzFqRCxHQUFHZ0UsYUFBYSxlQUNoRTdCLEtBQUtVLEtBQUt5SSxTQUFTbzRDLEVBQWMxakQsR0FBSSxVQUVyQ21DLEtBQUtVLEtBQUt3SSxZQUFZcTRDLEVBQWMxakQsR0FBSSxXQUtwRGdpRCxPQUFRLFNBQVVuK0MsR0FDZEEsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUVGLElBQUlwRCxFQUFTRixFQUFFRSxPQUNYOUMsRUFBUSxLQUVaLE1BQVEsUUFBUTZDLEtBQUtDLEVBQU9rSCxXQUN4QmhLLEVBQVE4QyxFQUFPQyxhQUFhLGVBQ3hCL0MsSUFDSjhDLEVBQVNBLEVBQU82SCxXQUdwQixJQUFLM0ssRUFBTyxPQUVaLElBQUkydUMsRUFBa0J6dEMsS0FBS3N6QixzQkFDM0IsR0FBK0IsSUFBM0JtYSxFQUFnQm5uQyxTQUNoQnRHLEtBQUtvd0MsaUJBQWlCcHdDLEtBQUtrd0MsV0FBWSxNQUN2Q3pDLEVBQWtCenRDLEtBQUtzekIsc0JBQ1EsSUFBM0JtYSxFQUFnQm5uQyxRQUFjLE9BSXRDLE1BQU1tcUIsRUFBY3p3QixLQUFLVSxLQUFLNEUsU0FBUzFELEVBQVEsVUFBWTVCLEtBQUtVLEtBQUt3SSxZQUFZN0osS0FBS1csS0FBS1UsTUFBUVYsS0FBS1UsS0FBS3lJLFNBQVM5SixLQUFLVyxLQUFLVSxNQUNoSSxJQUFLLElBQUk3QyxFQUFJLEVBQUc0SixFQUFNZ21DLEVBQWdCbm5DLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ25ENHlCLEVBQVlnZCxFQUFnQjV2QyxHQUFJaUIsR0FHcENrQixLQUFLbXJCLGFBR0xuckIsS0FBSzB6QixRQUFRL3FCLE1BQUssS1ZyR2tJeWIsVVd0QjdJLENBQ1hobUIsS0FBTSxZQUNOMkMsUUFBUyxVQUNUWixJQUFLLFNBQVVDLEVBQU04cEIsR0FDakIsTUFBTTdwQixFQUFVRCxFQUFLQyxRQUNyQkEsRUFBUStqQixVQUFZLENBQ2hCbzlCLFdBQVksTUFJaEIsSUFBSWwzQixFQUFVdHFCLEtBQUt1cUIsV0FBV25xQixHQUMxQnNzQyxFQUFTcGlCLEVBQVFobUIsY0FBYyxNQUduQ29vQyxFQUFPcnJDLGlCQUFpQixRQUFTckIsS0FBSzBxQixPQUFPcnJCLEtBQUtlLElBRWxEQyxFQUFRK2pCLFVBQVVvOUIsV0FBYWwzQixFQUFRMWhCLGlCQUFpQixhQUd4RHhJLEVBQUt1cUIsZUFBZTNxQixLQUFLNUIsS0FBTThyQixFQUFlSSxHQUc5Q0EsRUFBVSxLQUFNb2lCLEVBQVMsTUFHN0JuaUIsV0FBWSxTQUFVbnFCLEdBQ2xCLE1BQU1zTyxFQUFTdE8sRUFBS21DLFFBQ2QrbkIsRUFBVWxxQixFQUFLTSxLQUFLQyxjQUFjLE9BQ3hDMnBCLEVBQVExcEIsVUFBWSwwQ0FFcEIsTUFBTXVnRCxFQUFjLENBQ2hCLy9CLEtBQU0sQ0FDRmhqQixLQUFNZ0MsRUFBS3dFLEtBQUs2aUIsS0FBS3JHLEtBQ3JCNnRCLE1BQU8sZUFDUDdtQyxJQUFLLFFBRVR5ZixZQUFhLENBQ1R6cEIsS0FBTWdDLEVBQUt3RSxLQUFLNmlCLEtBQUtJLFlBQ3JCL21CLE1BQU8sZ0JBQ1BzSCxJQUFLLFFBRVQwZixPQUFRLENBQ0oxcEIsS0FBTWdDLEVBQUt3RSxLQUFLNmlCLEtBQUtLLE9BQ3JCbW5CLE1BQU8saUJBQ1A3bUMsSUFBSyxTQUdQcTVDLEVBQWEveUMsRUFBT2d6QyxXQUFnRGh6QyxFQUFPZ3pDLFdBQTFDdGhELEVBQUtnRyxHQUFHN0gsT0FBTzhILEtBQUs4NkMsR0FFM0QsSUFBSXg5QyxFQUFPLHdEQUNYLElBQUssSUFBbUM1RSxFQUFHcUosRUFBS2hLLEVBQU04bEMsRUFBTzE2QixFQUFTMUssRUFBT3NpRCxFQUFwRXZqRCxFQUFJLEVBQUc0SixFQUFNZzZDLEVBQVVuN0MsT0FBcUR6SSxFQUFJNEosRUFBSzVKLElBQUssQ0FJL0YsR0FIQWtCLEVBQUkwaUQsRUFBVTVqRCxHQUNkcW1DLEVBQVEsR0FBSXBsQyxFQUFRLEdBQUkwSyxFQUFVLEdBRWpCLGlCQUFOekssRUFBZ0IsQ0FDdkIsTUFBTXVpRCxFQUFlSCxFQUFZcGlELEVBQUUyTyxlQUNuQyxJQUFLNHpDLEVBQWMsU0FDbkJ2aUQsRUFBSXVpRCxFQUdSbGpELEVBQU9XLEVBQUVYLEtBQ1RnSyxFQUFNckosRUFBRXFKLEtBQU8sT0FDZmc1QyxFQUFTcmlELEVBQUVxaUQsT0FFUHJpRCxFQUFFK0IsUUFDRm9qQyxHQUFTLFdBQWFubEMsRUFBRStCLE1BQVEsSUFDaENoQyxHQUFTQyxFQUFFK0IsTUFBTWtOLFFBQVEsa0JBQW1CLEtBQzVDeEUsRUFBUWIsS0FBSyxVQUViNUosRUFBRWt3QyxRQUNGL0ssR0FBUyxXQUFhbmxDLEVBQUVrd0MsTUFBUSxJQUNoQ253QyxHQUFTLElBQU1DLEVBQUVrd0MsTUFBTXptQyxPQUFPd0YsUUFBUSxPQUFRLE1BQzlDeEUsRUFBUWIsS0FBSyxVQUdqQjdKLEVBQVFBLEVBQU1rUCxRQUFRLEtBQU0sSUFFNUJySyxHQUFRLGdEQUMwQ3k5QyxFQUFTLElBQU1BLEVBQVEsSUFBTSxtQkFBcUJoNUMsRUFBTSxpQkFBbUJ0SixFQUFRLFlBQWNWLEVBQU8saUJBQW1CQSxFQURySyxNQUVNZ0ssRUFBTTg3QixFQUFRLElBQU05bEMsRUFBUSxLQUFPZ0ssRUFGekMsa0JBU1osT0FKQXpFLEdBQVEsY0FFUjJtQixFQUFRbG1CLFVBQVlULEVBRWIybUIsR0FNWDNuQixHQUFJLFdBQ0EsTUFBTWpDLEVBQU9WLEtBQUtVLEtBRVppaEQsRUFEbUIzaEQsS0FBS0ssUUFBUStqQixVQUNHbzlCLFdBQ25DSSxFQUFnQjVoRCxLQUFLZ3JCLG1CQUUzQixJQUFLLElBQXlDNjJCLEVBQUtyaEMsRUFBTW1ULEVBQWhEOTFCLEVBQUksRUFBRzRKLEVBQU1rNkMsRUFBZ0JyN0MsT0FBMkJ6SSxFQUFJNEosRUFBSzVKLElBQUssQ0FDM0Vna0QsRUFBTUYsRUFBZ0I5akQsR0FDdEIyaUIsRUFBT3FoQyxFQUFJaGdELGFBQWEsY0FBY3dHLE1BQU0sS0FFNUMsSUFBSyxJQUFXbU8sRUFBTTFYLEVBQWJ5SixFQUFJLEVBQWdCQSxFQUFJaVksRUFBS2xhLE9BQVFpQyxJQUFLLENBSS9DLElBSEFpTyxFQUFPb3JDLEVBQ1BqdUIsR0FBUyxFQUVGbmQsSUFBUzlWLEVBQUs2L0IsZ0JBQWdCL3BCLEtBQVU5VixFQUFLNG5DLFlBQVk5eEIsSUFBTyxDQUNuRSxHQUFJQSxFQUFLMmEsU0FBU3pqQixnQkFBa0JtMEMsRUFBSWhnRCxhQUFhLGdCQUFnQjZMLGdCQUNqRTVPLEVBQVEwaEIsRUFBS2pZLEdBQ1QsTUFBTTVHLEtBQUs3QyxHQUFTNEIsRUFBSzRFLFNBQVNrUixFQUFNMVgsRUFBTWtQLFFBQVEsTUFBTyxLQUFTd0ksRUFBSzFWLE1BQU1oQyxJQUFRLENBQ3pGNjBCLEdBQVMsRUFDVCxNQUdSbmQsRUFBT0EsRUFBSy9NLFdBR2hCLElBQUtrcUIsRUFBUSxNQUdqQkEsRUFBU2p6QixFQUFLeUksU0FBUzA0QyxFQUFLLFVBQVluaEQsRUFBS3dJLFlBQVkyNEMsRUFBSyxZQUt0RW4zQixPQUFRLFNBQVVocEIsR0FDZEEsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUVGLElBQUlwRCxFQUFTRixFQUFFRSxPQUNYNEgsRUFBVSxLQUFNcEIsRUFBTSxLQUUxQixNQUFRb0IsSUFBWSxNQUFNN0gsS0FBS0MsRUFBT2tILFVBQVUsQ0FFNUMsR0FEQVUsRUFBVTVILEVBQU9DLGFBQWEsZ0JBQzFCMkgsRUFBUyxDQUNUcEIsRUFBTXhHLEVBQU9vVSxXQUNiLE1BRUpwVSxFQUFTQSxFQUFPNkgsV0FHcEIsSUFBS0QsRUFBUyxPQUVkLE1BQU1zNEMsRUFBYzE1QyxFQUFJdEgsTUFBTXNuQyxRQUFRcDZCLFFBQVEsWUFBYSxLQUFLM0YsTUFBTSxLQUN0RXk1QyxFQUFZemtCLE1BRVosTUFBTW5uQixFQUFVOU4sRUFBSTI1QyxVQUNwQixJQUFLLElBQUlsa0QsRUFBSSxFQUFHNEosRUFBTXlPLEVBQVE1UCxPQUFRekksRUFBSTRKLEVBQUs1SixJQUMzQ2lrRCxFQUFZbjVDLEtBQUssSUFBTXVOLEVBQVFyWSxJQUduQyxNQUFNdXRCLEVBQVVwckIsS0FBS1UsS0FBSzRFLFNBQVMxRCxFQUFRLFVBQVksS0FBT3dHLEVBQUlrMkIsV0FBVSxHQUN0RTBqQixFQUFjNTJCLEVBQVUsS0FBTyxDQUFDaGpCLEVBQUkrb0IsVUFDMUNueEIsS0FBS2tyQixXQUFXRSxFQUFTMDJCLEVBQWFFLEdBQWEsR0FFbkRoaUQsS0FBS21yQixlWHJJMEp2UyxPQUFNc0ssUUFBT0MsUUFBT0MsUUFBT0gsT0FBTW9CLGFZcEJ6TCxDQUNYam1CLEtBQU0sZUFLTitCLElBQUssU0FBVUMsR0FDWEEsRUFBSytwQixVQUFVLENBQUMvbUIsTUFFQWhELEVBQUtDLFFBQ2Jna0IsYUFBZSxDQUNuQjdlLE1BQU9wRixFQUFLd0UsS0FBS3ljLFFBQVFnRCxhQUN6QjNlLElBQUt0RixFQUFLbUMsUUFBUW0yQixnQkFDbEJsMUIsT0FBUXBELEVBQUttQyxRQUFRMC9DLG1CQUNyQjU4QyxVQUFXLGdCQUNYeUMsb0JBQXFCOUgsS0FBS2tpRCxVQUMxQm4rQyxnQkFBaUIvRCxLQUFLbWlELFNBQVM5aUQsS0FBS2UsR0FDcEM2RCxXQUFZLElBU3BCakMsS0FBTSxTQUFVK0IsR0FDWi9ELEtBQUs4QixRQUFRc0IsWUFBWXBCLEtBQUtoRSxLQUFLZ0MsS0FBTSxlQUFnQitELElBVzdEbStDLFVBQVcsU0FBVWg2QyxHQUNqQixNQUFNazZDLEVBQVVsNkMsRUFBS3VOLElBQUlwTixNQUFNLEtBQUtnMUIsTUFDcEMsTUFBUSw0Q0FBOENuMUIsRUFBS202QyxXQUFhbjZDLEVBQUt1TixLQUFPLFdBQWF2TixFQUFLaXhCLEtBQU9pcEIsR0FBVyxzQ0FBd0NsNkMsRUFBS3VOLEtBQU92TixFQUFLbTZDLFdBQXpLLHlHQUV1RG42QyxFQUFLOUosTUFBUWdrRCxHQUZwRSxnQkFNWkQsU0FBVSxTQUFVdmdELEVBQVEwZ0QsR0FDeEJ0aUQsS0FBS2k1QixXQUFXLFFBQVMsV0FDckIsTUFBTS9ULEVBQU8sQ0FBQzltQixLQUFNa2tELEVBQVUxOEIsS0FBTSxHQUNwQzVsQixLQUFLOEIsUUFBUW9oQixNQUFNd1osYUFBYTErQixLQUFLZ0MsS0FBTTRCLEVBQU9DLGFBQWEsY0FBZSxLQUFNN0IsS0FBS0ssUUFBUTZpQixNQUFNaVQsVUFBV24yQixLQUFLSyxRQUFRNmlCLE1BQU1tVCxVQUFXLE9BQVFuUixFQUFNdGpCLEVBQU91M0IsTUFDdks5NUIsS0FBS1csTUFBTyxTQ3BEUCxHQUVaaXdCLElBQUssQ0FDRnJPLE9BQVEsbXRCQUNSTyxPQUFRLGlsQ0FDUkMsUUFBUyxrbENBQ1RvdEIsYUFBYyx5cUNBQ2RFLFlBQWEsK2tEQUNiOTJCLEtBQU0saWpEQUNOb04sT0FBUSwwaEJBR1h2QyxLQUFNLGttQkFDTkQsS0FBTSxvbkJBQ043QixLQUFNLGl0QkFDTi9WLFVBQVcsc1pBQ1hnVyxPQUFRLHd1QkFDUkMsT0FBUSxrMkJBQ1JDLFVBQVcsMHZCQUNYQyxZQUFhLHd4QkFDYjhHLE1BQU8sOFJBQ1AxRyxPQUFRLHMrQkFDUkMsUUFBUyxvOUJBQ1RrMEIsVUFBVywyUUFDWEMsVUFBVywwUEFDWGdNLFVBQVcsc3dCQUNYNytCLFFBQVMsMjRCQUNUQyxNQUFPLHU1QkFDUE0sU0FBVSxrZ0NBQ1Z1K0IsWUFBYSxnMENBQ2JDLGdCQUFpQiw0TUFDakJDLFdBQVksMHRCQUNabmhDLEtBQU0sbXBCQUNOb3FCLFdBQVkscW1EQUNaZ1gsV0FBWSx1VkFDWnJXLGNBQWUsa09BQ2ZDLFdBQVkseU9BQ1pDLFlBQWEsME9BQ2JDLGFBQWMsbU9BQ2RtVyxXQUFZLHdSQUNaQyxnQkFBZ0IsZ1RBQ2hCclQsYUFBYyxpaUNBQ2RFLFlBQWEscTdDQUNiMXNCLE1BQU8sc1lBQ1A4L0IsZ0JBQWlCLG9LQUNqQkMsWUFBYSxtaURBQ2JoK0MsT0FBUSxvbEJBQ1JtZSxNQUFPLGlzQkFDUEMsTUFBTyw0cUJBQ1B2SyxLQUFNLHU3Q0FDTnFLLEtBQU0scWFBQ04rQyxPQUFRLHdnQkFDUnl4QixhQUFjLCsrQkFDZEksV0FBWSw4cEJBQ1pJLFdBQVksMnRCQUNaM3lCLFFBQVMsMmVBQ1RTLEtBQU0sMG9CQUNOaU4sT0FBUSx5ckJBQ1Jnd0IsT0FBUSw2MURBQ1JqcUIsT0FBUSx5VUFDUmtxQixVQUFXLHVjQUNYdEwsaUJBQWtCLHc5QkFDbEJELGlCQUFrQixtOUJBQ2xCSSxtQkFBb0IsdzhCQUNwQkMsb0JBQXFCLHU5QkFDckJILFdBQVksdXhCQUNaSSxjQUFlLGs3QkFDZlIsbUJBQW9CLGlOQUNwQjBMLFlBQWEsNnNHQUNiQyxhQUFjLHU3R0FDZEMsa0JBQW1CLDZMQUNuQkMsZ0JBQWlCLCtMQUNqQnBtQyxRQUFTLHVXQUNUcW1DLFdBQVksOFJBQ1psZ0MsTUFBTyx5U0FDUHVWLGNBQWUsa2lDQUNmL1QsU0FBVSwwR0FDVitJLFNBQVUsaU1BQ1ZySixRQUFTLHVPQUNUQyxRQUFTLDZPQUVUZy9CLGNBQWUscVFBRWZDLFVBQVcsOHZEQUNYQyxlQUFnQixteUNBQ2hCQyxVQUFXLG01Q0FDWEMsZ0JBQWlCLG9uQkFDakJDLGNBQWUsMm9CQUVmQyxXQUFZLDJmQUNadjdDLElBQUssaXZCQUNMdzdDLFlBQWEsc3FCQUNiQyxXQUFZLHVoQixxQkN6RmYsTUFBTXJqRCxFQUFPLENBQ1QwQixHQUFJLEtBQ0pnRSxHQUFJLEtBQ0p3akMsS0FBTSxLQUNOb2EsVUFBVyxLQUNYQyxVQUFXLEtBQ1hDLFdBQVksS0FDWkMsU0FBVSxLQUNWQywwQkFBMkIsS0FDM0JDLGdCQUFpQixXQUNUcmtELEtBQUtvQyxLQUNUcEMsS0FBS29DLEdBQU1hLFNBQ1hqRCxLQUFLb0csR0FBS3JHLE9BQ1ZDLEtBQUs0cEMsS0FBTzBhLFVBQVVDLFVBQVU3N0MsUUFBUSxZQUFjLEVBQ3REMUksS0FBS2drRCxVQUFhTSxVQUFVQyxVQUFVNzdDLFFBQVEsWUFBYyxHQUFPNDdDLFVBQVVFLFdBQVc5N0MsUUFBUSxTQUFXLEVBQzNHMUksS0FBS2lrRCxVQUFZLHlCQUF5QnRpRCxLQUFLMmlELFVBQVVHLFVBQ3pEemtELEtBQUtra0QsYUFBZW5rRCxPQUFPMmtELE9BQzNCMWtELEtBQUtva0QsMEJBQXVELG1CQUFuQk8sZUFDekMza0QsS0FBS21rRCxTQUFXLGlFQUFpRXhpRCxLQUFLMmlELFVBQVVDLFlBQWMsaUJBQWtCeGtELFFBQVV1a0QsVUFBVU0sZUFBaUIsR0FBS04sVUFBVU8saUJBQW1CLElBRzNNQyxzQkFBdUIsbUZBUXZCQyxlQUFnQixTQUFVQyxHQUN0QixNQUFNMXdCLEVBQUssQ0FBQyxJQUFLLFFBQVMsSUFBVSxTQUFVMndCLElBQU0sU0FBVSxJQUFLLFNBQVUsSUFBSyxPQUFRLElBQUssUUFDL0YsT0FBT0QsRUFBU2gzQyxRQUFRLHFCQUFxQixTQUFVL1AsR0FDbkQsTUFBeUIsaUJBQVZxMkIsRUFBR3IyQixHQUFtQnEyQixFQUFHcjJCLEdBQUtBLE1BT3JEc3RDLGVBQWdCOTdCLE9BQU9pUSxhQUFhLE1BS3BDd2xDLGdCQUFpQixJQUFJbjNDLE9BQU8wQixPQUFPaVEsYUFBYSxNQUFPLEtBS3ZEeWxDLG9CQUFxQixJQUFJcDNDLE9BQU8sSUFBTTBCLE9BQU9pUSxhQUFhLE1BQVEsTUFFbEUwbEMsYUFBYyxDQUNWLFdBQVksRUFDWixVQUFXLEVBQ1gsTUFBUyxFQUNULE9BQVUsRUFDVixNQUFTLEVBQ1QsVUFBVyxFQUNYLFdBQVksR0FRaEJwVSxtQkFBb0IsU0FBVTlnQyxHQUMxQixPQUFJQSxVQUNnQixpQkFBVEEsSUFBbUJBLEVBQU9BLEVBQUszSyxhQUMxQixLQUFUMkssR0FBZWxRLEtBQUttbEQsb0JBQW9CeGpELEtBQUt1TyxLQU94RGpLLGtCQUFtQixXQUVmLElBQUlqRyxLQUFLb0csR0FBR2kvQyxjQVlQLE9BQUlybEQsS0FBS29HLEdBQUdrL0MsZUFDTixJQUFJQSxlQUlKLEtBaEJQLElBQ0ksT0FBTyxJQUFJRCxjQUFjLGtCQUMzQixNQUFPM2pELEdBQ0wsSUFDSSxPQUFPLElBQUkyakQsY0FBYyxxQkFDM0IsTUFBT0UsR0FDTCxPQUFPLFFBbUJ2QkMsVUFBVyxTQUFVMTFDLEdBQ2pCLE9BQVFBLEVBQVc5UCxLQUFLb0csR0FBRzdILE9BQU84SCxLQUFLeUosR0FBS3hILEtBQUksU0FBVXpLLEdBQ3RELE9BQU9pUyxFQUFJalMsTUFERCxJQVVsQjRuRCxpQkFBa0IsU0FBVUMsR0FDeEIsTUFBcUIsaUJBQVZBLEVBQ0FBLEVBQU0xM0MsUUFBUSxVQUFVLFNBQVUyM0MsR0FBVSxNQUFPLElBQU1BLEVBQU9qNEMsaUJBRWhFZzRDLEVBQU1wOUMsS0FBSSxTQUFTbUksR0FBTyxPQUFPL1AsRUFBSytrRCxpQkFBaUJoMUMsT0FTdEVtMUMsaUJBQWtCLFNBQVVGLEdBQ3hCLE1BQXFCLGlCQUFWQSxFQUNBQSxFQUFNMTNDLFFBQVEsY0FBYyxTQUFVMjNDLEdBQVUsT0FBT0EsRUFBTzMzQyxRQUFRLElBQUssSUFBSTYrQixpQkFFL0U2WSxFQUFNcDlDLEtBQUksU0FBU21JLEdBQU8sT0FBTy9QLEVBQUsra0QsaUJBQWlCaDFDLE9BU3RFOVAsY0FBZSxTQUFVa2xELEdBQ3JCLE9BQU83bEQsS0FBS29DLEdBQUd6QixjQUFja2xELElBUWpDdmEsZUFBZ0IsU0FBVXA3QixHQUN0QixPQUFPbFEsS0FBS29DLEdBQUdrcEMsZUFBZXA3QixHQUFRLEtBVTFDaTdCLFlBQWEsU0FBVTZaLEdBQ25CLE1BQU0xd0IsRUFBSyxDQUFDLElBQUssT0FBUSxJQUFLLFFBQzlCLE9BQU8wd0IsRUFBU2gzQyxRQUFRLFFBQVEsU0FBVS9QLEdBQ3RDLE1BQXlCLGlCQUFWcTJCLEVBQUdyMkIsR0FBbUJxMkIsRUFBR3IyQixHQUFLQSxNQVdyRDBzQyxZQUFhLFNBQVVxYSxHQUNuQixNQUFNMXdCLEVBQUssQ0FBQyxPQUFRLElBQUssT0FBUSxLQUNqQyxPQUFPMHdCLEVBQVNoM0MsUUFBUSxnQkFBZ0IsU0FBVS9QLEdBQzlDLE1BQXlCLGlCQUFWcTJCLEVBQUdyMkIsR0FBbUJxMkIsRUFBR3IyQixHQUFLQSxNQVVyRG1tQyxPQUFRLFNBQVV0MEIsRUFBSzFRLEdBQ25CLE9BQU9ZLEtBQUs4bEQsUUFBUTluRCxLQUFLOFIsRUFBSzFRLElBRWxDMG1ELFFBQVN2bkQsT0FBT2tCLFVBQVVDLGVBVTFCcW1ELGVBQWdCLFNBQVVDLEVBQVcvNEMsR0FDakMsSUFBSTRpQixFQUFPLEdBQ1gsTUFBTW8yQixFQUFXLEdBQ1huOUMsRUFBd0IsT0FBZG1FLEVBQXFCLFNBQVcsT0FDMUN3SSxFQUFvQixPQUFkeEksRUFBcUIsTUFBUSxPQUV6QyxJQUFJcTFDLEVBQVcsTUFDZixJQUFLLElBQUl6a0QsRUFBSSxFQUFHNEosRUFBTXUrQyxFQUFVMS9DLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzdDeWtELEdBQVkwRCxFQUFVbm9ELElBQU1BLEVBQUk0SixFQUFNLEVBQUksSUFBTSxLQUdwRCxNQUFNeStDLEVBQVMsSUFBSWxtRCxLQUFLb0csR0FBRzJILE9BQU8sY0FBZ0J1MEMsRUFBVyxpQkFBb0JyMUMsRUFBWSxrQkFBbUIsS0FDMUdrNUMsRUFBWSxJQUFJbm1ELEtBQUtvRyxHQUFHMkgsT0FBTyxRQUFVZCxFQUFZLGtCQUFtQixLQUU5RSxJQUFLLElBQUkvTyxFQUFJOEIsS0FBS29DLEdBQUcyZSxxQkFBcUJqWSxHQUFVakwsRUFBSSxFQUFHQSxFQUFJSyxFQUFFb0ksT0FBUXpJLElBQ2pFc29ELEVBQVV4a0QsS0FBS3pELEVBQUVMLEdBQUc0WCxLQUNwQnd3QyxFQUFTdDlDLEtBQUt6SyxFQUFFTCxJQUl4QixJQUFLLElBQUlBLEVBQUksRUFBR0EsRUFBSW9vRCxFQUFTMy9DLE9BQVF6SSxJQUFLLENBQ3RDLElBQUl1b0QsRUFBWUgsRUFBU3BvRCxHQUFHNFgsR0FBS25FLE1BQU00MEMsR0FDdkMsR0FBSUUsRUFBVyxDQUNYdjJCLEVBQU91MkIsRUFBVSxHQUNqQixPQVFSLEdBSmEsS0FBVHYyQixJQUFhQSxFQUFPbzJCLEVBQVMzL0MsT0FBUyxFQUFJMi9DLEVBQVMsR0FBR3h3QyxHQUFPLEtBRWhFLElBQU1vYSxFQUFLbm5CLFFBQVEsT0FBUyxPQUFTbW5CLEVBQUtuZSxNQUFNLEVBQUcsS0FBT21lLEVBQU8sSUFBTUEsRUFBS25uQixRQUFRLEtBQU95a0IsU0FBUzVULEtBQUtqSSxNQUFNLG1CQUFtQixHQUFLdWUsRUFBTzFDLFNBQVM1VCxLQUFLakksTUFBTSxpQkFBaUIsR0FBS3VlLElBRXBMQSxFQUFNLEtBQU0scUhBQXVIenhCLEtBQU8sZ0JBQWtCNk8sRUFBWSxJQUU3SyxPQUFPNGlCLEdBU1h3MkIsYUFBYyxTQUFVMXdDLEdBQ3BCLElBQUl5eUIsRUFBVSxHQUNkLE1BQU1rZSxHQUFVM3dDLEdBQU8zVixLQUFLb0MsSUFBSW1rRCxZQUVoQyxJQUFLLElBQWdDQyxFQUE1QjNvRCxFQUFJLEVBQUc0SixFQUFNNitDLEVBQU9oZ0QsT0FBZXpJLEVBQUk0SixFQUFLNUosSUFBSyxDQUN0RCxJQUNJMm9ELEVBQVFGLEVBQU96b0QsR0FBRzRvRCxTQUNwQixNQUFPL2tELEdBQ0wsU0FHSixHQUFJOGtELEVBQ0EsSUFBSyxJQUFJdG9ELEVBQUksRUFBR3ExQyxFQUFPaVQsRUFBTWxnRCxPQUFRcEksRUFBSXExQyxFQUFNcjFDLElBQzNDa3FDLEdBQVdvZSxFQUFNdG9ELEdBQUdrcUMsUUFLaEMsT0FBT0EsR0FRWHNlLGtCQUFtQixTQUFVQyxHQUN6QixJQUFJQyxFQUFZRCxFQUFPRSxlQUFpQkYsRUFBT0csZ0JBRS9DLE9BRElGLEVBQVUzakQsV0FBVTJqRCxFQUFZQSxFQUFVM2pELFVBQ3ZDMmpELEdBU1hHLHNCQUF1QixTQUFVdmxELEVBQVN3bEQsR0FDdEMsSUFBS3hsRCxFQUFReWxELFdBQVksTUFBTyxHQUVoQyxNQUFNL2lCLEVBQVExaUMsRUFBUXlsRCxXQUN0QixJQUFJQyxFQUFhLEdBRWpCLElBQUssSUFBSXJwRCxFQUFJLEVBQUc0SixFQUFNeThCLEVBQU01OUIsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDckNtcEQsR0FBZUEsRUFBWXQrQyxRQUFRdzdCLEVBQU1ybUMsR0FBR08sT0FBUyxJQUN6RDhvRCxHQUFjaGpCLEVBQU1ybUMsR0FBR08sS0FBTyxLQUFPOGxDLEVBQU1ybUMsR0FBR2lCLE1BQVEsTUFHMUQsT0FBT29vRCxHQVNYQyxjQUFlLFNBQVNqM0MsR0FDcEIsSUFBS0EsSUFBU0EsRUFBS1AsU0FBVSxPQUFPLEVBQ3BDTyxFQUFPQSxFQUFLUCxXQUVaLE1BQU15M0MsRUFBVXBuRCxLQUFLb0csR0FBR2loRCxtQkFDeEIsSUFBSUMsRUFBSUMsRUFDUixPQUFJdm5ELEtBQUtna0QsV0FDTHVELEVBQUt2bkQsS0FBS29HLEdBQUdvaEQsU0FBU0osRUFBUWwzQyxJQUFPNUosT0FDckNnaEQsRUFBSyxFQUVzQyxPQUF2Q0YsRUFBUWwzQyxHQUFNb0IsTUFBTSxpQkFDcEJnMkMsRUFBS0YsRUFBUWwzQyxHQUFNb0IsTUFBTSxlQUFlaEwsUUFHckNpaEQsRUFBS0QsSUFFWkMsRUFBTSxJQUFJdm5ELEtBQUtvRyxHQUFHcWhELFlBQVksU0FBU2gxQyxPQUFPdkMsR0FBTzVKLE9BQ3JEZ2hELEVBQUssRUFFc0MsT0FBdkNGLEVBQVFsM0MsR0FBTW9CLE1BQU0saUJBQ3BCZzJDLEVBQUtGLEVBQVFsM0MsR0FBTW9CLE1BQU0sZUFBZWhMLFFBR3JDaWhELEVBQUtELElBU3BCNzlCLGFBQWMsU0FBVWpvQixHQUNwQixPQUFPQSxHQUFnQyxJQUFyQkEsRUFBUW1WLFdBQW1CM1csS0FBS3NGLFNBQVM5RCxFQUFTLHVCQUF5QixVQUFVRyxLQUFLSCxFQUFRMnZCLFlBUXhIdTJCLGNBQWUsU0FBVWxtRCxHQUNyQixPQUFPQSxHQUFnQyxJQUFyQkEsRUFBUW1WLFVBQThELFVBQTVDblYsRUFBUUssYUFBYSxvQkFTckU4bEQsbUJBQW9CLFNBQVVubUQsR0FDMUIsT0FBT0EsR0FBZ0MsSUFBckJBLEVBQVFtVixVQUFrQix3RkFBd0ZoVixLQUFLSCxFQUFRMnZCLFdBUXJKeTJCLGVBQWdCLFNBQVVwbUQsR0FDdEIsT0FBT0EsR0FBZ0MsSUFBckJBLEVBQVFtVixVQUFrQixzQkFBc0JoVixLQUFLSCxFQUFRMnZCLFdBU25Gb1AsZ0JBQWlCLFNBQVUvK0IsR0FDdkIsT0FBT0EsR0FBZ0MsSUFBckJBLEVBQVFtVixXQUFtQix5Q0FBeUNoVixLQUFLSCxFQUFRMnZCLFdBQWFueEIsS0FBS3NGLFNBQVM5RCxFQUFTLGlGQUFtRnhCLEtBQUtzb0MsWUFBWTltQyxLQUFheEIsS0FBS3lwQixhQUFham9CLElBUzlReStCLHFCQUFzQixTQUFVeitCLEdBQzVCLE9BQU9BLEdBQWdDLElBQXJCQSxFQUFRbVYsV0FBbUIsc0VBQXNFaFYsS0FBS0gsRUFBUTJ2QixXQUFhbnhCLEtBQUtzRixTQUFTOUQsRUFBUywwQ0FZeEtxbUQsNEJBQTZCLFNBQVVybUQsR0FDbkMsT0FBT0EsR0FBZ0MsSUFBckJBLEVBQVFtVixXQUFtQixhQUFhaFYsS0FBS0gsRUFBUTJ2QixXQUFhbnhCLEtBQUtzRixTQUFTOUQsRUFBUyxtREFXL0dzbUQsb0JBQXFCLFNBQVV0bUQsR0FDM0IsT0FBT0EsR0FBZ0MsSUFBckJBLEVBQVFtVixXQUFtQixTQUFTaFYsS0FBS0gsRUFBUTJ2QixXQUFhbnhCLEtBQUtzRixTQUFTOUQsRUFBUywwQ0FBNEN4QixLQUFLc29DLFlBQVk5bUMsS0FBYXhCLEtBQUt5cEIsYUFBYWpvQixJQVl2TXVtRCwyQkFBNEIsU0FBVXZtRCxHQUNsQyxPQUFPQSxHQUFnQyxJQUFyQkEsRUFBUW1WLFVBQWtCM1csS0FBS3NGLFNBQVM5RCxFQUFTLGlEQVF2RThtQyxZQUFhLFNBQVU5bUMsR0FDbkIsT0FBT0EsSUFBWSxlQUFlRyxLQUFLSCxFQUFRWixZQUFjLGVBQWVlLEtBQUtILEVBQVEydkIsWUFTN0Y2MkIsc0JBQXVCLFNBQVV4bUQsR0FDN0IsT0FBT0EsR0FBV3hCLEtBQUtzRixTQUFTOUQsRUFBUyxxQkFRN0NvNEIsaUJBQWtCLFNBQVVwNEIsR0FDeEIsT0FBT0EsR0FBVyxlQUFlRyxLQUFLSCxFQUFRWixZQVFsRHMvQixrQkFBbUIsU0FBVTErQixHQUN6QixPQUFPQSxHQUFXLGtCQUFrQkcsS0FBS0gsRUFBUVosWUFTckRrOUIsaUJBQWtCLFNBQVV0OEIsRUFBU3ltRCxHQUNqQyxJQUFLem1ELEVBQVMsT0FBTyxLQUtyQixJQUpLeW1ELElBQ0RBLEVBQWEsV0FBYyxPQUFPLElBRy9Cem1ELEdBQVMsQ0FDWixHQUFJeEIsS0FBS3lwQixhQUFham9CLEdBQVUsT0FBTyxLQUV2QyxHQURJeEIsS0FBS2lnQyxxQkFBcUJ6K0IsSUFBVUEsRUFBUXVyQyxrQkFDNUMvc0MsS0FBS3VnQyxnQkFBZ0IvK0IsSUFBWXltRCxFQUFXem1ELEdBQVUsT0FBT0EsRUFFakVBLEVBQVVBLEVBQVFpSSxXQUd0QixPQUFPLE1BU1g2bkMsc0JBQXVCLFNBQVU5dkMsRUFBU3ltRCxHQUN0QyxJQUFLem1ELEVBQVMsT0FBTyxLQUtyQixJQUpLeW1ELElBQ0RBLEVBQWEsV0FBYyxPQUFPLElBRy9Cem1ELEdBQVMsQ0FDWixHQUFJeEIsS0FBS3lwQixhQUFham9CLEdBQVUsT0FBTyxLQUN2QyxHQUFJeEIsS0FBS2lnQyxxQkFBcUJ6K0IsS0FBYSxzQkFBc0JHLEtBQUtILEVBQVEydkIsV0FBYTgyQixFQUFXem1ELEdBQVUsT0FBT0EsRUFDdkhBLEVBQVVBLEVBQVFpSSxXQUd0QixPQUFPLE1BU1h5K0MscUJBQXNCLFNBQVUxbUQsRUFBU3ltRCxHQUNyQyxJQUFLem1ELEVBQVMsT0FBTyxLQUtyQixJQUpLeW1ELElBQ0RBLEVBQWEsV0FBYyxPQUFPLElBRy9Cem1ELEdBQVMsQ0FDWixHQUFJeEIsS0FBS3lwQixhQUFham9CLEdBQVUsT0FBTyxLQUN2QyxHQUFJeEIsS0FBSzhuRCxvQkFBb0J0bUQsSUFBWXltRCxFQUFXem1ELEdBQVUsT0FBT0EsRUFFckVBLEVBQVVBLEVBQVFpSSxXQUd0QixPQUFPLE1BU1gwK0MsNEJBQTZCLFNBQVUzbUQsRUFBU3ltRCxHQUM1QyxJQUFLem1ELEVBQVMsT0FBTyxLQUtyQixJQUpLeW1ELElBQ0RBLEVBQWEsV0FBYyxPQUFPLElBRy9Cem1ELEdBQVMsQ0FDWixHQUFJeEIsS0FBS3lwQixhQUFham9CLEdBQVUsT0FBTyxLQUN2QyxHQUFJeEIsS0FBSytuRCwyQkFBMkJ2bUQsSUFBWXltRCxFQUFXem1ELEdBQVUsT0FBT0EsRUFFNUVBLEVBQVVBLEVBQVFpSSxXQUd0QixPQUFPLE1BU1gyK0Msa0JBQW1CLFNBQVVDLEVBQVVDLEVBQVFDLEdBQzNDLEdBQUlELEVBQU94bkQsTUFBTXNuQyxRQUFTLENBQ3RCLE1BQU1vZ0IsRUFBYUYsRUFBT3huRCxNQUMxQixJQUFLLElBQUlqRCxFQUFJLEVBQUc0SixFQUFNK2dELEVBQVdsaUQsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDOUN3cUQsRUFBU3ZuRCxNQUFNMG5ELEVBQVczcUQsSUFBTTJxRCxFQUFXQSxFQUFXM3FELElBSTlELE1BQU1xbUMsRUFBUW9rQixFQUFPckIsV0FDckIsSUFBSyxJQUErQjdvRCxFQUEzQlAsRUFBSSxFQUFHNEosRUFBTXk4QixFQUFNNTlCLE9BQWN6SSxFQUFJNEosRUFBSzVKLElBQy9DTyxFQUFPOGxDLEVBQU1ybUMsR0FBR08sS0FBS3NQLGNBQ2hCNjZDLEdBQWFBLEVBQVU3L0MsUUFBUXRLLElBQVMsSUFBTzhsQyxFQUFNcm1DLEdBQUdpQixNQUFPdXBELEVBQVNuMkIsZ0JBQWdCOXpCLEdBQzNFLFVBQVRBLEdBQWtCaXFELEVBQVNoeUMsYUFBYTZ0QixFQUFNcm1DLEdBQUdPLEtBQU04bEMsRUFBTXJtQyxHQUFHaUIsUUFTakY0ekMscUJBQXNCLFNBQVUyVixFQUFVQyxJQUN0Q0EsRUFBU0EsRUFBT2hxQixXQUFVLElBQ25CMTlCLFVBQVkwbkQsRUFBTzFuRCxVQUFVb04sUUFBUSw4QkFBK0IsSUFDM0VoTyxLQUFLb29ELGtCQUFrQkMsRUFBVUMsSUFXckNHLGFBQWMsU0FBVUMsRUFBT1QsRUFBWVUsR0FDdkMsSUFBS0QsR0FBMEIsSUFBakJBLEVBQU1waUQsT0FBYyxPQUFPLEtBRXpDMmhELEVBQWFBLEdBQWMsV0FBYyxPQUFPLEdBQ2hELE1BQU1yTixFQUFNLEdBRVosSUFBSyxJQUErQnByQyxFQUEzQjNSLEVBQUksRUFBRzRKLEVBQU1paEQsRUFBTXBpRCxPQUFXekksRUFBSTRKLEVBQUs1SixJQUU1QyxHQURBMlIsRUFBSWs1QyxFQUFNN3FELEdBQ05vcUQsRUFBV3o0QyxHQUFJLENBQ2YsSUFBS201QyxFQUFPLE9BQU9uNUMsRUFDZG9yQyxFQUFJanlDLEtBQUs2RyxHQUl0QixPQUFRbTVDLEVBQWUvTixFQUFQLE1BU3BCZ08sY0FBZSxTQUFTRixFQUFPbG5ELEdBQzNCLElBQUssSUFBSTNELEVBQUksRUFBR0EsRUFBSTZxRCxFQUFNcGlELE9BQVF6SSxJQUM5QixHQUFJNnFELEVBQU03cUQsS0FBTzJELEVBQ2IsT0FBTyxFQUdmLE9BQU8sR0FTWGk3QyxjQUFlLFNBQVVpTSxFQUFPbG5ELEdBQzVCLElBQUlxbkQsR0FBTyxFQUNYLElBQUssSUFBSWhyRCxFQUFJLEVBQUc0SixFQUFNaWhELEVBQU1waUQsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDekMsR0FBSTZxRCxFQUFNN3FELEtBQU8yRCxFQUFTLENBQ3RCcW5ELEVBQU1ockQsRUFDTixNQUlSLE9BQU9nckQsR0FTWEMsUUFBUyxTQUFVSixFQUFPeGdELEdBQ3RCLElBQUkyZ0QsRUFBTTdvRCxLQUFLeThDLGNBQWNpTSxFQUFPeGdELEdBQ3BDLE9BQWEsSUFBVDJnRCxHQUFvQixFQUNqQkEsRUFBTSxHQVNqQkUsUUFBUyxTQUFVTCxFQUFPeGdELEdBQ3RCLElBQUkyZ0QsRUFBTTdvRCxLQUFLeThDLGNBQWNpTSxFQUFPeGdELEdBQ3BDLE9BQWEsSUFBVDJnRCxHQUFvQixFQUNqQkEsRUFBTSxHQVFqQnBWLGlCQUFrQixTQUFVajlCLEdBQ3hCLElBQUlxeUMsRUFBTSxFQUNWLEtBQVFyeUMsRUFBT0EsRUFBS2txQixpQkFDaEJtb0IsR0FBTyxFQUVYLE9BQU9BLEdBYVhwVSxZQUFhLFNBQVVqK0IsRUFBTS9NLEVBQVl1L0MsR0FDckMsTUFBTW41QixFQUFPLEdBQ2IsSUFBSW81QixHQUFRLEVBcUNaLE9BbkNBanBELEtBQUsyNUIsaUJBQWlCbmpCLEVBQU0sU0FBVXc5QixHQUVsQyxHQURJQSxJQUFPdnFDLElBQVl3L0MsR0FBUSxHQUMzQkEsSUFBVWpwRCxLQUFLeXBCLGFBQWF1cUIsR0FBSyxDQUVqQyxHQUFJZ1YsR0FBK0IsSUFBaEJoVixFQUFHcjlCLFNBQWdCLENBQ2xDLElBQUlrVCxFQUFPLEtBQU1xL0IsRUFBVyxLQUM1QkYsRUFBWXBwRCxFQUFJb3BELEVBQVl0bkQsRUFBSSxFQUVoQyxJQUFJeW5ELEVBQVduVixFQUFHdFQsZ0JBQ2xCLEtBQU95b0IsR0FBa0MsSUFBdEJBLEVBQVN4eUMsVUFDeEJ1eUMsRUFBV0MsRUFBUzVqRCxZQUFZeUksUUFBUWhPLEtBQUtrbEQsZ0JBQWlCLElBQzlEOEQsRUFBWXBwRCxHQUFLc3BELEVBQVM1aUQsT0FDMUIwdEMsRUFBR3p1QyxZQUFjMmpELEVBQVdsVixFQUFHenVDLFlBQy9Cc2tCLEVBQU9zL0IsRUFDUEEsRUFBV0EsRUFBU3pvQixnQkFDcEIxZ0MsS0FBS2dxQixXQUFXSCxHQUdwQixJQUFJc29CLEVBQU82QixFQUFHeEksWUFDZCxLQUFPMkcsR0FBMEIsSUFBbEJBLEVBQUt4N0IsVUFDaEJ1eUMsRUFBVy9XLEVBQUs1c0MsWUFBWXlJLFFBQVFoTyxLQUFLa2xELGdCQUFpQixJQUMxRDhELEVBQVl0bkQsR0FBS3duRCxFQUFTNWlELE9BQzFCMHRDLEVBQUd6dUMsYUFBZTJqRCxFQUNsQnIvQixFQUFPc29CLEVBQ1BBLEVBQU9BLEVBQUszRyxZQUNaeHJDLEtBQUtncUIsV0FBV0gsR0FLeEJnRyxFQUFLbG5CLEtBQUtxckMsR0FFZCxPQUFPLEdBQ1QzMEMsS0FBS1csT0FFQTZ2QixFQUFLdm5CLElBQUl0SSxLQUFLeXpDLGtCQUFrQjJWLFdBUzNDN1UsZ0JBQWlCLFNBQVU4VSxFQUFTNS9DLEdBQ2hDLElBQ0lxTixFQURBMFosRUFBVS9tQixFQUdkLElBQUssSUFBSTVMLEVBQUksRUFBRzRKLEVBQU00aEQsRUFBUS9pRCxPQUFRekksRUFBSTRKLElBQ3RDcVAsRUFBUTBaLEVBQVEvWixXQUNLLElBQWpCSyxFQUFNeFEsUUFGaUN6SSxJQUl2QzJ5QixFQURBMVosRUFBTXhRLFFBQVUraUQsRUFBUXhyRCxHQUNkaVosRUFBTUEsRUFBTXhRLE9BQVMsR0FFckJ3USxFQUFNdXlDLEVBQVF4ckQsSUFJaEMsT0FBTzJ5QixHQVVYcXdCLGlCQUFrQixTQUFVcnhDLEVBQUc4SixHQUMzQixHQUFtQixJQUFmOUosRUFBRW1ILFVBQWlDLElBQWYyQyxFQUFFM0MsU0FBZ0IsT0FBTyxFQUNqRCxHQUFtQixJQUFmbkgsRUFBRW1ILFVBQWlDLElBQWYyQyxFQUFFM0MsU0FBZ0IsT0FBTyxFQUVqRCxNQUFNMnlDLEVBQVU5NUMsRUFBRTFPLE1BQ1p5b0QsRUFBVWp3QyxFQUFFeFksTUFDbEIsSUFBSTBvRCxFQUFZLEVBRWhCLElBQUssSUFBSTNyRCxFQUFJLEVBQUc0SixFQUFNNmhELEVBQVFoakQsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDdkN5ckQsRUFBUUEsRUFBUXpyRCxNQUFRMHJELEVBQVFELEVBQVF6ckQsS0FBSzJyRCxJQUdyRCxNQUFNQyxFQUFVajZDLEVBQUV1eUMsVUFDWjJILEVBQVVwd0MsRUFBRXlvQyxVQUNaNEgsRUFBTTNwRCxLQUFLb0csR0FBRzJILE9BQ3BCLElBQUk2N0MsRUFBWSxFQUVoQixJQUFLLElBQUkvckQsRUFBSSxFQUFHNEosRUFBTWdpRCxFQUFRbmpELE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3ZDOHJELEVBQUksUUFBV0YsRUFBUTVyRCxHQUFLLFNBQVU4RCxLQUFLK25ELEVBQVE1cUQsUUFBUThxRCxJQUduRSxPQUFRSixJQUFjRCxFQUFRampELFFBQVVrakQsSUFBY0YsRUFBUWhqRCxRQUFZc2pELElBQWNGLEVBQVFwakQsUUFBVXNqRCxJQUFjSCxFQUFRbmpELFFBUXBJdWpELFlBQWEsU0FBVXJvRCxHQUNuQixPQUFRQSxJQUFZQSxFQUFRaUksYUFBZ0JqSSxFQUFROEMsY0FBYyw2Q0FBMkUsSUFBNUI5QyxFQUFRb2UsU0FBU3RaLFFBQWdCdEcsS0FBS2d4QyxtQkFBbUJ4dkMsRUFBUStELGNBUXRMdWtELGtCQUFtQixTQUFVdG9ELEdBQ3pCLFFBQVNBLEdBQWdDLElBQXJCQSxFQUFRbVYsVUFBa0IsVUFBVWhWLEtBQUtILEVBQVEydkIsWUFBYzN2QixFQUFRWixZQUFjWSxFQUFRVixNQUFNc25DLFNBUTNIeUgsT0FBUSxTQUFVcjVCLEdBQ2QsT0FBT0EsR0FBUSxhQUFhN1UsS0FBcUIsaUJBQVQ2VSxFQUFvQkEsRUFBT0EsRUFBSzJhLFdBUTVFaVAsV0FBWSxTQUFVNXBCLEdBQ2xCLE9BQU9BLEdBQVEsUUFBUTdVLEtBQXFCLGlCQUFUNlUsRUFBb0JBLEVBQU9BLEVBQUsyYSxXQVF2RTQ0QixRQUFTLFNBQVV2ekMsR0FDZixPQUFPQSxHQUFRLGtDQUFrQzdVLEtBQXFCLGlCQUFUNlUsRUFBb0JBLEVBQU9BLEVBQUsyYSxXQVFqRytnQixPQUFRLFNBQVUxN0IsR0FDZCxPQUFPQSxHQUFRLGFBQWE3VSxLQUFxQixpQkFBVDZVLEVBQW9CQSxFQUFPQSxFQUFLMmEsV0FRNUU2NEIsUUFBUyxTQUFVeHpDLEdBQ2YsT0FBT0EsR0FBUSxRQUFRN1UsS0FBcUIsaUJBQVQ2VSxFQUFvQkEsRUFBT0EsRUFBSzJhLFdBU3ZFdG9CLFNBQVUsU0FBVTJOLEdBQ2hCLE9BQU9BLEdBQVEsT0FBTzdVLEtBQXFCLGlCQUFUNlUsRUFBb0JBLEVBQU9BLEVBQUsyYSxXQVF0RTg0QixRQUFTLFNBQVV6ekMsR0FDZixPQUFPQSxHQUFRLHFDQUFxQzdVLEtBQXFCLGlCQUFUNlUsRUFBb0JBLEVBQU9BLEVBQUsyYSxXQVFwR3lQLFVBQVcsU0FBVXBxQixHQUNqQixPQUFPQSxJQUFTeFcsS0FBS2lxRCxRQUFRenpDLElBQVMsY0FBYzdVLEtBQXFCLGlCQUFUNlUsRUFBb0JBLEVBQU9BLEVBQUsyYSxZQVFwR3NPLFNBQVUsU0FBVXZ2QixHQUNoQixRQUFTQSxHQUFRLGtCQUFrQnZPLEtBQUt1TyxFQUFPLEtBU25EOHdCLFVBQVcsU0FBVTl3QixFQUFNZzZDLEdBQ3ZCLElBQUtoNkMsRUFBTSxPQUFPLEVBRWxCLElBQUl1L0IsR0FBVXYvQixFQUFPLElBQUlvQixNQUFNLGlCQUMvQixPQUFLbStCLEdBQVdBLEVBQU8sSUFFdkJBLEVBQVNBLEVBQU8sR0FDVHlhLEVBQVMsRUFBYSxFQUFUemEsRUFBd0IsSUFBWHlhLEVBQWVscUQsS0FBS29HLEdBQUd1QixLQUFLQyxNQUFlLEVBQVQ2bkMsR0FBNkMsR0FBckIsRUFBVEEsR0FBWTBhLFFBQVFELElBSHBFLEdBWXRDajVCLGdCQUFpQixTQUFVenZCLEVBQVN5bUQsR0FDaEMsTUFBTXJvQyxFQUFXLEdBQ2pCLE9BQUtwZSxHQUFZQSxFQUFRb2UsVUFBd0MsSUFBNUJwZSxFQUFRb2UsU0FBU3RaLFFBRXREMmhELEVBQWFBLEdBQWMsV0FBYyxPQUFPLEdBRWhELFNBQVVtQyxFQUFjNTVCLEdBS3BCLEdBSklodkIsSUFBWWd2QixHQUFXeTNCLEVBQVd6M0IsSUFDbEM1USxFQUFTalgsS0FBSzZuQixHQUdaQSxFQUFRNVEsU0FDVixJQUFLLElBQUkvaEIsRUFBSSxFQUFHNEosRUFBTStvQixFQUFRNVEsU0FBU3RaLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3BEdXNELEVBQWM1NUIsRUFBUTVRLFNBQVMvaEIsSUFQM0MsQ0FVRzJELEdBRUlvZSxHQWhCb0VBLEdBeUIvRXlxQyxrQkFBbUIsU0FBVTdvRCxFQUFTeW1ELEdBQ2xDLE1BQU1yb0MsRUFBVyxHQUNqQixPQUFLcGUsR0FBeUMsSUFBOUJBLEVBQVFpVixXQUFXblEsUUFFbkMyaEQsRUFBYUEsR0FBYyxXQUFjLE9BQU8sR0FFaEQsU0FBVW1DLEVBQWM1NUIsR0FDaEJodkIsSUFBWWd2QixHQUFXeTNCLEVBQVd6M0IsSUFDbEM1USxFQUFTalgsS0FBSzZuQixHQUdsQixJQUFLLElBQUkzeUIsRUFBSSxFQUFHNEosRUFBTStvQixFQUFRL1osV0FBV25RLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3REdXNELEVBQWM1NUIsRUFBUS9aLFdBQVc1WSxJQU56QyxDQVFHMkQsR0FFSW9lLEdBZGlEQSxHQXdCNURpekIsZ0JBQWlCLFNBQVVyeEMsR0FDdkIsSUFBS0EsR0FBV3hCLEtBQUt5cEIsYUFBYWpvQixHQUFVLE9BQVEsRUFFcEQsSUFBSThvRCxFQUFRLEVBR1osSUFGQTlvRCxFQUFVQSxFQUFRaUksV0FFWGpJLElBQVl4QixLQUFLeXBCLGFBQWFqb0IsSUFDakM4b0QsR0FBUyxFQUNUOW9ELEVBQVVBLEVBQVFpSSxXQUd0QixPQUFPNmdELEdBU1hDLGdCQUFpQixTQUFVLzZDLEVBQUc4SixHQUMxQixJQUFJa3hDLEVBQVFoN0MsRUFBR2k3QyxFQUFRbnhDLEVBQ3ZCLEtBQU9reEMsR0FBU0MsR0FBU0QsRUFBTS9nRCxhQUFlZ2hELEVBQU1oaEQsWUFDaEQrZ0QsRUFBUUEsRUFBTS9nRCxXQUNkZ2hELEVBQVFBLEVBQU1oaEQsV0FHbEIsSUFBSytnRCxJQUFVQyxFQUFPLE1BQU8sQ0FBRUMsU0FBVSxLQUFNbDdDLEVBQUdBLEVBQUc4SixFQUFHQSxFQUFHdlMsT0FBUSxHQUVuRSxNQUFNNlksRUFBVzRxQyxFQUFNL2dELFdBQVdnTixXQUM1QmswQyxFQUFTM3FELEtBQUt5OEMsY0FBYzc4QixFQUFVNHFDLEdBQ3RDSSxFQUFTNXFELEtBQUt5OEMsY0FBYzc4QixFQUFVNnFDLEdBRTVDLE1BQU8sQ0FDSEMsU0FBVUYsRUFBTS9nRCxXQUNoQitGLEVBQUdnN0MsRUFDSGx4QyxFQUFHbXhDLEVBQ0gxakQsT0FBUTRqRCxFQUFTQyxFQUFTLEVBQUlELEVBQVNDLEdBQVUsRUFBSSxJQWM3RGp4QixpQkFBa0IsU0FBVW40QixFQUFTcXBELEdBQ2pDLElBQUlDLEVBRUosR0FBcUIsbUJBQVZELEVBQ1BDLEVBQVFELE1BQ0wsQ0FDSCxJQUFJRSxFQUNBLE1BQU1wcEQsS0FBS2twRCxJQUNYRSxFQUFPLFlBQ1BGLEVBQVFBLEVBQU14aUQsTUFBTSxLQUFLLElBQ2xCLEtBQUsxRyxLQUFLa3BELElBQ2pCRSxFQUFPLEtBQ1BGLEVBQVEsSUFBTUEsRUFBTXhpRCxNQUFNLEtBQUssR0FBSyxLQUM3QixLQUFLMUcsS0FBS2twRCxJQUNqQkUsRUFBTyxPQUNQRixFQUFRLElBQU1BLEVBQU14aUQsTUFBTSxLQUFLLEdBQUssTUFFcEMwaUQsRUFBTyxXQUNQRixFQUFRLElBQU1BLEVBQVEsS0FHMUIsTUFBTTNFLEVBQVMsSUFBSWxtRCxLQUFLb0csR0FBRzJILE9BQU84OEMsRUFBTyxLQUN6Q0MsRUFBUSxTQUFVOVcsR0FDZCxPQUFPa1MsRUFBT3ZrRCxLQUFLcXlDLEVBQUcrVyxLQUk5QixLQUFPdnBELElBQVlzcEQsRUFBTXRwRCxJQUFVLENBQy9CLEdBQUl4QixLQUFLeXBCLGFBQWFqb0IsR0FDbEIsT0FBTyxLQUVYQSxFQUFVQSxFQUFRaUksV0FHdEIsT0FBT2pJLEdBVVh3cEQsdUJBQXdCLFNBQVV4MEMsRUFBTXkwQyxHQUNwQyxJQUFJQyxFQUFlMTBDLEVBQUtrcUIsZ0JBQ3hCLElBQUt3cUIsRUFBYyxDQUNmLElBQUssSUFBSXpoRCxFQUFhK00sRUFBSy9NLFdBQVlBLEVBQVlBLEVBQWFBLEVBQVdBLFdBQVksQ0FDbkYsR0FBSUEsSUFBZXdoRCxFQUFTLE9BQU8sS0FDbkMsR0FBSXhoRCxFQUFXaTNCLGdCQUFpQixDQUM1QndxQixFQUFlemhELEVBQVdpM0IsZ0JBQzFCLE9BR1IsSUFBS3dxQixFQUFjLE9BQU8sS0FFOUIsS0FBT0EsRUFBYUMsV0FBV0QsRUFBZUEsRUFBYUMsVUFFM0QsT0FBT0QsR0FVWEUsbUJBQW9CLFNBQVU1MEMsRUFBTXkwQyxHQUNoQyxJQUFJSSxFQUFXNzBDLEVBQUtnMUIsWUFDcEIsSUFBSzZmLEVBQVUsQ0FDWCxJQUFLLElBQUk1aEQsRUFBYStNLEVBQUsvTSxXQUFZQSxFQUFZQSxFQUFhQSxFQUFXQSxXQUFZLENBQ25GLEdBQUlBLElBQWV3aEQsRUFBUyxPQUFPLEtBQ25DLEdBQUl4aEQsRUFBVytoQyxZQUFhLENBQ3hCNmYsRUFBVzVoRCxFQUFXK2hDLFlBQ3RCLE9BR1IsSUFBSzZmLEVBQVUsT0FBTyxLQUUxQixLQUFPQSxFQUFTcjFDLFlBQVlxMUMsRUFBV0EsRUFBU3IxQyxXQUVoRCxPQUFPcTFDLEdBY1hoM0IsZ0JBQWlCLFNBQVU3eUIsRUFBU3FwRCxFQUFPelgsR0FDdkMsSUFBSTBYLEVBRUosR0FBcUIsbUJBQVZELEVBQ1BDLEVBQVFELE1BQ0wsQ0FDSCxJQUFJRSxFQUNBLE1BQU1wcEQsS0FBS2twRCxJQUNYRSxFQUFPLFlBQ1BGLEVBQVFBLEVBQU14aUQsTUFBTSxLQUFLLElBQ2xCLEtBQUsxRyxLQUFLa3BELElBQ2pCRSxFQUFPLEtBQ1BGLEVBQVEsSUFBTUEsRUFBTXhpRCxNQUFNLEtBQUssR0FBSyxLQUM3QixLQUFLMUcsS0FBS2twRCxJQUNqQkUsRUFBTyxPQUNQRixFQUFRLElBQU1BLEVBQU14aUQsTUFBTSxLQUFLLEdBQUssTUFFcEMwaUQsRUFBTyxXQUNQRixFQUFRLEtBQWlCLFNBQVZBLEVBQW1CLElBQU1BLEVBQVFBLEdBQVMsS0FHN0QsTUFBTTNFLEVBQVMsSUFBSWxtRCxLQUFLb0csR0FBRzJILE9BQU84OEMsRUFBTyxLQUN6Q0MsRUFBUSxTQUFVOVcsR0FDZCxPQUFPa1MsRUFBT3ZrRCxLQUFLcXlDLEVBQUcrVyxLQUk5QixNQUFNTyxFQUFZdHJELEtBQUtxcUQsa0JBQWtCN29ELEdBQVMsU0FBVWd2QixHQUN4RCxPQUFPczZCLEVBQU10NkIsTUFHakIsT0FBTzg2QixFQUFVbFksRUFBT2tZLEVBQVVobEQsT0FBUyxFQUFJLElBWW5Ec3RDLGtCQUFtQixTQUFVVCxFQUFPQyxHQUNoQyxHQUFLRCxFQUFMLENBR0EsSUFGS0MsSUFBTUEsRUFBT0QsR0FFWEEsR0FBNEIsSUFBbkJBLEVBQU14OEIsVUFBa0J3OEIsRUFBTTE4QixXQUFXblEsT0FBUyxJQUFNdEcsS0FBS2dxRCxRQUFRN1csSUFBUUEsRUFBUUEsRUFBTW45QixXQUMzRyxLQUFPbzlCLEdBQTBCLElBQWxCQSxFQUFLejhCLFVBQWtCeThCLEVBQUszOEIsV0FBV25RLE9BQVMsSUFBT3RHLEtBQUtncUQsUUFBUTVXLElBQU9BLEVBQU9BLEVBQUsrWCxVQUV0RyxNQUFPLENBQ0gvMkIsR0FBSStlLEVBQ0o3ZSxHQUFJOGUsR0FBUUQsS0FVcEJvWSxVQUFXLFNBQVUvcEQsRUFBU2dxRCxHQUMxQixJQUFJdDdCLEVBQWEsRUFDYkcsRUFBWSxFQUNabzdCLEVBQXFDLElBQXJCanFELEVBQVFtVixTQUFpQm5WLEVBQVErckMsY0FBZ0IvckMsRUFDckUsTUFBTTB2QixFQUFVbHhCLEtBQUsyNUIsaUJBQWlCbjRCLEVBQVN4QixLQUFLeXBCLGFBQWFwcUIsS0FBS1csT0FFdEUsS0FBT3lyRCxJQUFrQnpyRCxLQUFLc0YsU0FBU21tRCxFQUFlLGlCQUFtQkEsSUFBa0J2NkIsR0FDdkZoQixHQUFjdTdCLEVBQWN2N0IsV0FDNUJHLEdBQWFvN0IsRUFBY3A3QixVQUMzQm83QixFQUFnQkEsRUFBY0MsYUFHbEMsTUFBTS9FLEVBQVM2RSxHQUFnQixVQUFVN3BELEtBQUs2cEQsRUFBYXI2QixVQUUzRCxNQUFPLENBQ0h6Z0IsS0FBTXdmLEdBQWN5MkIsRUFBUzZFLEVBQWFqZSxjQUFjcmQsV0FBYSxHQUNyRUUsSUFBTUMsR0FBYWEsRUFBVUEsRUFBUXk2QixVQUFZLElBQU9oRixFQUFTNkUsRUFBYWplLGNBQWNsZCxVQUFZLEtBYWhIZ3NCLHVCQUF3QixTQUFVdVAsRUFBUUMsRUFBTUMsRUFBUUMsR0FDcEQsR0FBSUgsR0FBVUcsRUFBT0YsRUFBT0MsRUFBU0QsRUFBT0MsRUFBUSxPQUFPLEVBRTNELE1BQU1FLEdBQVdKLEVBQVNFLEVBQVNGLEVBQVNFLElBQVdELEVBQU9FLEVBQU9GLEVBQU9FLEdBQzVFLE9BQVFDLEVBQVUsR0FBZSxFQUFYQSxFQUFlQSxHQUFXLEdBUXBENWQsVUFBVyxTQUFVNXNDLEVBQVMrTyxHQUNyQi9PLEdBQVkrTyxJQUNqQi9PLEVBQVErRCxZQUFjZ0wsSUFRMUJ5OEIsY0FBZSxTQUFVeHJDLEVBQVN5cUQsR0FDOUIsR0FBMEIsaUJBQWZBLEVBQ1AsR0FBSXpxRCxFQUFRNFUsVUFDUjVVLEVBQVE0VSxVQUFZNjFDLE1BQ2pCLENBQ0gsTUFBTXQyQyxFQUFNM1YsS0FBS1csY0FBYyxPQUMvQmdWLEVBQUl2UixVQUFZNm5ELEVBQ2hCQSxFQUFhdDJDLEVBQUlLLFdBQ2pCeFUsRUFBUWlJLFdBQVcwMkIsYUFBYThyQixFQUFZenFELFFBRWpCLElBQXhCeXFELEVBQVd0MUMsVUFDbEJuVixFQUFRaUksV0FBVzAyQixhQUFhOHJCLEVBQVl6cUQsSUFVcERrc0MsU0FBVSxTQUFVbHNDLEVBQVMwcUQsRUFBV3B0RCxHQUNwQzBDLEVBQVFWLE1BQU1vckQsR0FBYXB0RCxFQUV0QkEsR0FBVTBDLEVBQVFWLE1BQU1zbkMsU0FDekI1bUMsRUFBUTB3QixnQkFBZ0IsVUFVaEM1c0IsU0FBVSxTQUFVOUQsRUFBU1osR0FDekIsR0FBS1ksRUFFTCxPQUFRLElBQUl4QixLQUFLb0csR0FBRzJILE9BQU9uTixHQUFZZSxLQUFLSCxFQUFRWixZQVF4RHVJLFNBQVUsU0FBVTNILEVBQVNaLEdBQ3pCLElBQUtZLEVBQVMsT0FFQSxJQUFJeEIsS0FBS29HLEdBQUcySCxPQUFPLFVBQVluTixFQUFZLFdBQy9DZSxLQUFLSCxFQUFRWixhQUV2QlksRUFBUVosWUFBY1ksRUFBUVosVUFBVTBGLE9BQVMsRUFBSSxJQUFNLElBQU0xRixJQVFyRXNJLFlBQWEsU0FBVTFILEVBQVNaLEdBQzVCLElBQUtZLEVBQVMsT0FFZCxNQUFNc3BELEVBQVEsSUFBSTlxRCxLQUFLb0csR0FBRzJILE9BQU8sVUFBWW5OLEVBQVksV0FDekRZLEVBQVFaLFVBQVlZLEVBQVFaLFVBQVVvTixRQUFRODhDLEVBQU8sS0FBS3RpRCxPQUVyRGhILEVBQVFaLFVBQVU0SCxRQUFRaEgsRUFBUTB3QixnQkFBZ0IsVUFTM0R6QixZQUFhLFNBQVVqdkIsRUFBU1osR0FDNUIsSUFBS1ksRUFBUyxPQUNkLElBQUl1RixHQUFTLEVBRWIsTUFBTStqRCxFQUFRLElBQUk5cUQsS0FBS29HLEdBQUcySCxPQUFPLFVBQVluTixFQUFZLFdBVXpELE9BVElrcUQsRUFBTW5wRCxLQUFLSCxFQUFRWixXQUNuQlksRUFBUVosVUFBWVksRUFBUVosVUFBVW9OLFFBQVE4OEMsRUFBTyxLQUFLdGlELFFBRTFEaEgsRUFBUVosV0FBYSxJQUFNQSxFQUMzQm1HLEdBQVMsR0FHUnZGLEVBQVFaLFVBQVU0SCxRQUFRaEgsRUFBUTB3QixnQkFBZ0IsU0FFaERuckIsR0FPWG9sRCxvQkFBcUIsU0FBVTNxRCxHQUMzQixPQUFPQSxFQUFReWUsYUFBYSw0QkFXaENtc0MsbUJBQW9CLFNBQVVwbkIsRUFBVXFuQixFQUFZQyxHQUNoRCxJQUFLLElBQUl6dUQsRUFBSSxFQUFHNEosRUFBTTRrRCxFQUFXL2xELE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQUssQ0FDbkQsSUFBSTh4QyxFQUFTMGMsRUFBV3h1RCxJQUNwQnl1RCxHQUFjdHNELEtBQUttc0Qsb0JBQW9CeGMsS0FBU0EsRUFBTzNLLFNBQVdBLEdBQ2xFc25CLElBQ0l0bkIsRUFDQTJLLEVBQU90NUIsYUFBYSwwQkFBMkIsSUFFL0NzNUIsRUFBT3pkLGdCQUFnQiw4QkFVdkNsSSxXQUFZLFNBQVU5aEIsR0FDYkEsSUFFcUIsbUJBQWhCQSxFQUFLK2QsT0FBdUIvZCxFQUFLK2QsU0FDbEMvZCxFQUFLdUIsWUFBWXZCLEVBQUt1QixXQUFXb04sWUFBWTNPLEtBVzFEa3lCLHFCQUFzQixTQUFVbHlCLEVBQU0rL0MsRUFBWXNFLEdBQzlDLElBQUtya0QsRUFBTSxPQUFPLEtBQ2xCLElBQUkyckMsRUFBSyxLQXVCVCxPQXRCS29VLElBQ0RBLEVBQWEsU0FBVXozQixHQUNuQixHQUFJQSxJQUFZKzdCLEdBQWN2c0QsS0FBS3NvQyxZQUFZOVgsR0FBVSxPQUFPLEVBQ2hFLE1BQU10Z0IsRUFBT3NnQixFQUFRanJCLFlBQVlpRCxPQUNqQyxPQUF1QixJQUFoQjBILEVBQUs1SixRQUFnQixpQkFBaUIzRSxLQUFLdU8sSUFDcEQ3USxLQUFLVyxPQUdWLFNBQVNvcUQsRUFBZTVvRCxHQUNyQixJQUFLZCxFQUFLK29CLGFBQWFqb0IsR0FBVSxDQUM3QixNQUFNZ3JELEVBQVNockQsRUFBUWlJLFdBQ25CK2lELEdBQVV2RSxFQUFXem1ELEtBQ3JCcXlDLEVBQUssQ0FDRHpmLEdBQUk1eUIsRUFBUXk0Qix1QkFDWjNGLEdBQUk5eUIsRUFBUTA0QixvQkFFaEJ4NUIsRUFBS3NwQixXQUFXeG9CLEdBQ2hCNG9ELEVBQWNvQyxLQVR6QixDQVlDdGtELEdBRUsyckMsR0FVWDRZLGlCQUFrQixTQUFVQyxFQUFVQyxHQUNsQyxNQUFNQyxFQUFRNXNELEtBQUs2c0Qsa0JBQWtCSCxHQUNyQyxJQUFJdk0sRUFBYzJNLEVBYWRDLEVBWEosR0FBSUgsRUFBTyxDQUNQek0sRUFBZXlNLEVBQU10dUIsV0FBVSxHQUMvQnd1QixFQUFTRixFQUFNbjJDLFdBQ2YsTUFBTXBGLEVBQVFyUixLQUFLeXpDLGlCQUFpQmlaLEdBQ3BDLEtBQU9JLEVBQU96N0MsSUFDVjh1QyxFQUFhbC9DLFlBQVk2ckQsRUFBT3o3QyxTQUdwQzh1QyxFQUFldU0sRUFJbkIsR0FBS0MsRUFJREksRUFBWS9zRCxLQUFLaXhCLGdCQUFnQmt2QixFQUFjLFNBQVUzdkIsR0FBVyxPQUFPeHdCLEtBQUtvZ0MsV0FBVzVQLEtBQWFBLEVBQVF5Six3QkFBMEI1NkIsS0FBS1csV0FKekksQ0FDTixNQUFNc3FELEVBQVF0cUQsS0FBSzZ5QyxnQkFBZ0I2WixHQUFZLEVBQy9DSyxFQUFZL3NELEtBQUtpeEIsZ0JBQWdCeTdCLEVBQVUsU0FBVWw4QixHQUFXLE9BQU94d0IsS0FBS29nQyxXQUFXNVAsS0FBYUEsRUFBUXlKLHdCQUEwQmo2QixLQUFLNnlDLGdCQUFnQnJpQixLQUFhODVCLEdBQVNqckQsS0FBS1csT0FLMUwsSUFBSyxJQUFJbkMsRUFBSSxFQUFHNEosRUFBTXNsRCxFQUFVem1ELE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzdDbUMsS0FBSzZzRCxrQkFBa0JFLEVBQVVsdkQsSUFRckMsT0FMSSt1RCxJQUNBQSxFQUFNbmpELFdBQVdvMkIsYUFBYXNnQixFQUFjeU0sRUFBTXBoQixhQUM5Q3NoQixHQUE0QixJQUFsQkEsRUFBT3htRCxRQUFjdEcsS0FBS2dxQixXQUFXNGlDLElBR2hEek0sSUFBaUJ1TSxFQUFXdk0sRUFBYTEyQyxXQUFhMDJDLEdBT2pFME0sa0JBQW1CLFNBQVVILEdBQ3pCLE1BQU1NLEVBQWFOLEVBQVNqakQsV0FDNUIsSUFFSXdqRCxFQUFXQyxFQUFVeDJDLEVBQU9yRixFQUFPblQsRUFGbkNvMUMsRUFBVTBaLEVBQ1ZSLEVBQVNsWixFQUFRN3BDLFdBR3JCLEtBQU96SixLQUFLb2dDLFdBQVdvc0IsSUFBUyxDQUs1QixJQUpBbjdDLEVBQVFyUixLQUFLeXpDLGlCQUFpQmlaLEdBQzlCTyxFQUFZVCxFQUFPdHlCLG1CQUNuQmd6QixFQUFXVixFQUFPL2lELFdBQ2xCaU4sRUFBUTQ4QixFQUNGNThCLEdBQU8sQ0FFVCxHQURBNDhCLEVBQVVBLEVBQVE5SCxZQUNkeHJDLEtBQUs2dkMsT0FBT241QixHQUFRLENBRXBCLElBREF4WSxFQUFJd1ksRUFBTUQsV0FDSHZZLEVBQUVtVCxJQUNMNjdDLEVBQVNydEIsYUFBYTNoQyxFQUFFbVQsR0FBUTQ3QyxHQUVuQixJQUFiL3VELEVBQUVvSSxRQUFjdEcsS0FBS2dxQixXQUFXdFQsUUFFcEN3MkMsRUFBU2pzRCxZQUFZeVYsR0FFekJBLEVBQVE0OEIsRUFFWkEsRUFBVTRaLEVBQ1ZWLEVBQVNVLEVBQVN6akQsV0FLdEIsT0FGbUMsSUFBL0J1akQsRUFBV3B0QyxTQUFTdFosUUFBY3RHLEtBQUtncUIsV0FBV2dqQyxHQUUvQ0UsR0FXWDFzQixhQUFjLFNBQVVrc0IsRUFBVVMsRUFBUTdDLEdBQ3RDLEdBQUl0cUQsS0FBS3lwQixhQUFhaWpDLEdBQVcsT0FBT0EsRUFFeEMsR0FBSVMsSUFBV250RCxLQUFLeS9CLFNBQVMwdEIsR0FBUyxDQUNsQyxNQUFNdnRDLEVBQVk4c0MsRUFBU2oyQyxXQUMzQixJQUFJcEYsRUFBUXJSLEtBQUt5ekMsaUJBQWlCMFosR0FDbEMsTUFBTWhaLEVBQU91WSxFQUFTcHVCLFdBQVUsR0FDMUI2VCxFQUFPdWEsRUFBU3B1QixXQUFVLEdBQ2hDLElBQUssSUFBSXpnQyxFQUFJLEVBQUc0SixFQUFNbVksRUFBU3RaLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQUssQ0FDakQsR0FBSUEsRUFBSXdULEVBQU84aUMsRUFBS2x6QyxZQUFZMmUsRUFBUy9oQixRQUNwQyxNQUFJQSxFQUFJd1QsR0FDUixTQURlOGdDLEVBQUtseEMsWUFBWTJlLEVBQVMvaEIsSUFFOUNBLElBQ0E0SixJQUNBNEosSUFNSixPQUhJOGlDLEVBQUsxOUIsV0FBV25RLE9BQVMsR0FBR29tRCxFQUFTampELFdBQVdvMkIsYUFBYXNVLEVBQU11WSxHQUNuRXZhLEVBQUsxN0IsV0FBV25RLE9BQVMsR0FBR29tRCxFQUFTampELFdBQVdvMkIsYUFBYXNTLEVBQU11YSxFQUFTeHlCLG9CQUV6RXd5QixFQUdYLE1BQU1VLEVBQUtWLEVBQVNqakQsV0FDcEIsSUFHSXMyQixFQUFPbmdCLEVBQVVpSyxFQUhqQnhZLEVBQVEsRUFDUmc4QyxFQUFjLEVBQ2RsYixHQUFPLEVBSVgsS0FGS21ZLEdBQVNBLEVBQVEsS0FBR0EsRUFBUSxHQUVQLElBQXRCb0MsRUFBUy8xQyxVQUVULEdBREF0RixFQUFRclIsS0FBS3l6QyxpQkFBaUJpWixHQUMxQlMsR0FBVSxHQUFLVCxFQUFTcG1ELFNBQVc2bUQsRUFBUSxDQUMzQ1QsRUFBU1ksVUFBVUgsR0FDbkIsTUFBTUksRUFBUXZ0RCxLQUFLdTBDLGdCQUFnQixDQUFDbGpDLEVBQVEsR0FBSSs3QyxHQUM1Q3B0RCxLQUFLZ3hDLG1CQUFtQnVjLEtBQVFBLEVBQU0vc0MsS0FBT3hnQixLQUFLdXJDLHNCQUV2RCxHQUEwQixJQUF0Qm1oQixFQUFTLzFDLFNBQWdCLENBQ2hDLEdBQWUsSUFBWHcyQyxFQUFjLENBQ2QsS0FBT1QsRUFBUzEyQyxZQUNaMDJDLEVBQVdBLEVBQVMxMkMsV0FFeEIsR0FBMEIsSUFBdEIwMkMsRUFBUy8xQyxTQUFnQixDQUN6QixNQUFNNDJDLEVBQVF2dEQsS0FBS3NyQyxlQUFldHJDLEtBQUt1ckMsZ0JBQ3ZDbWhCLEVBQVNqakQsV0FBV28yQixhQUFhMHRCLEVBQU9iLEdBQ3hDQSxFQUFXYSxHQUdkYixFQUFTaHNCLGdCQUdWZ3NCLEVBQVdBLEVBQVNoc0IsZ0JBRmhCMWdDLEtBQUs2eUMsZ0JBQWdCNlosS0FBY3BDLElBQU9uWSxHQUFPLEdBTW5DLElBQXRCdWEsRUFBUy8xQyxXQUFnQjAyQyxFQUFjLEdBQzNDLElBQUlHLEVBQVVkLEVBQ2QsS0FBTzFzRCxLQUFLNnlDLGdCQUFnQjJhLEdBQVdsRCxHQWtCbkMsSUFqQkFqNUMsRUFBUXJSLEtBQUt5ekMsaUJBQWlCK1osR0FBV0gsRUFDekNHLEVBQVVBLEVBQVEvakQsV0FFbEJvZ0IsRUFBT2tXLEVBQ1BBLEVBQVF5dEIsRUFBUWx2QixXQUFVLEdBQzFCMWUsRUFBVzR0QyxFQUFRLzJDLFdBRWZvVCxJQUNJN3BCLEtBQUtvZ0MsV0FBV0wsSUFBVS8vQixLQUFLNnZDLE9BQU9obUIsSUFBU0EsRUFBS2tqQixtQkFDcERoTixFQUFNMzdCLFVBQVl5bEIsRUFBS2tqQixrQkFBa0Izb0MsVUFDekMxRCxFQUFLc3BCLFdBQVdILEVBQUtrakIsbUJBQ2pCbGpCLEVBQUtqSyxTQUFTdFosT0FBUyxHQUFHeTVCLEVBQU05K0IsWUFBWTRvQixJQUVoRGtXLEVBQU05K0IsWUFBWTRvQixJQUluQmpLLEVBQVN2TyxJQUNaMHVCLEVBQU05K0IsWUFBWTJlLEVBQVN2TyxJQUkvQm04QyxFQUFRLzJDLFdBQVduUSxRQUFVLEtBQU9rbkQsRUFBUXgzQyxZQUF3RCxJQUExQ3czQyxFQUFReDNDLFdBQVd6USxZQUFZZSxVQUFla25ELEVBQVFwcEQsVUFBWSxRQUVoSSxNQUFNcXBELEVBQVdELEVBQVEvakQsV0FFekIsT0FESTBvQyxJQUFNcWIsRUFBVUEsRUFBUWhpQixhQUN2QnpMLEdBRUwvL0IsS0FBSzB6QyxjQUFjM1QsRUFBTyxNQUFNLEdBQ2hDLy9CLEtBQUs0MEMsZ0JBQWdCN1UsRUFBTyxTQUFVdlAsR0FBVyxPQUFPeHdCLEtBQUs2dkMsT0FBT3JmLElBQVlueEIsS0FBS1csT0FFakYrL0IsRUFBTXRwQixXQUFXblEsT0FBUyxFQUFHbW5ELEVBQVM1dEIsYUFBYUUsRUFBT3l0QixHQUN6RHp0QixFQUFReXRCLEVBRVR4dEQsS0FBS29nQyxXQUFXTCxJQUFVQSxFQUFNbmdCLFVBQVk1ZixLQUFLNnZDLE9BQU85UCxFQUFNbmdCLFNBQVMsS0FDdkVtZ0IsRUFBTUYsYUFBYTcvQixLQUFLVyxjQUFjLE1BQU9vL0IsRUFBTW5nQixTQUFTLElBR25DLElBQXpCd3RDLEVBQUczMkMsV0FBV25RLFFBQWN0RyxLQUFLZ3FCLFdBQVdvakMsR0FFekNydEIsR0FkWXl0QixHQTBCdkI5WixjQUFlLFNBQVVseUMsRUFBU2tzRCxFQUFlQyxHQUM3QyxNQUFNQyxFQUFPNXRELEtBQ1A2dEQsRUFBY0gsRUFBZ0JBLEVBQWNwbkQsT0FBUyxFQUMzRCxJQUFJK2lELEVBQVUsS0E4SGQsT0E1SEl3RSxJQUNBeEUsRUFBVXJwRCxLQUFLb0csR0FBR3dKLE1BQU1rK0MsTUFBTSxLQUFNLElBQUk5dEQsS0FBS29HLEdBQUd3SixNQUFNaStDLElBQWN2bEQsSUFBSXRJLEtBQUtvRyxHQUFHMm5ELE9BQU90dUQsVUFBVXV1RCxRQUFTLElBRzlHLFNBQVU1RCxFQUFjNTVCLEVBQVM4NUIsRUFBTzJELEdBQ3BDLE1BQU1ydUMsRUFBVzRRLEVBQVEvWixXQUV6QixJQUFLLElBQWtDQyxFQUFPeTdCLEVBQXJDdDBDLEVBQUksRUFBRzRKLEVBQU1tWSxFQUFTdFosT0FBcUJ6SSxFQUFJNEosSUFDcERpUCxFQUFRa0osRUFBUy9oQixHQUNqQnMwQyxFQUFPdnlCLEVBQVMvaEIsRUFBSSxHQUNmNlksR0FIb0Q3WSxJQUl6RCxHQUFJOHZELEdBQVlDLEVBQUtuYixvQkFBb0IvN0IsS0FBYWkzQyxJQUFhQyxFQUFLN0QsUUFBUXJ6QyxJQUFVazNDLEVBQUt4dEIsV0FBVzFwQixJQUFXazNDLEVBQUtydEIsZ0JBQWdCN3BCLEtBQVdrM0MsRUFBSzlGLG9CQUFvQnB4QyxLQUN0S2szQyxFQUFLN0QsUUFBUXJ6QyxJQUFVazNDLEVBQUt4dEIsV0FBVzFwQixLQUN2QzB6QyxFQUFjMXpDLEVBQU80ekMsRUFBUSxFQUFHenNELE9BRnhDLENBTUEsR0FBWSxJQUFSNEosR0FBYStvQixFQUFRVyxXQUFhemEsRUFBTXlhLFVBQVlYLEVBQVEvbUIsV0FBWSxDQUV4RSxHQUFJb2tELEVBQWEsQ0FDYixJQUFJaCtCLEVBQU0zeEIsRUFBR3lCLEVBQUd1dUQsRUFBUUMsRUFDeEIsSUFBSyxJQUFJN3VELEVBQUksRUFBR0EsRUFBSXV1RCxFQUFhdnVELElBRTdCLEdBREF1d0IsRUFBTzY5QixFQUFjcHVELEdBQ2pCdXdCLEdBQVFBLEVBQUt5NkIsS0FBV3pzRCxFQUFHLENBRTNCLElBREFLLEVBQUl3WSxFQUFPL1csRUFBSTZ3QixFQUFTMDlCLEVBQVM1RCxFQUFPNkQsR0FBYyxFQUMvQ0QsR0FBVSxHQUFHLENBQ2hCLEdBQUlOLEVBQUtuUixjQUFjOThDLEVBQUU4VyxXQUFZdlksS0FBTzJ4QixFQUFLcStCLEdBQVMsQ0FDdERDLEdBQWMsRUFDZCxNQUVKandELEVBQUl3WSxFQUFNak4sV0FDVjlKLEVBQUl6QixFQUFFdUwsV0FDTnlrRCxJQUVBQyxJQUNBdCtCLEVBQUs1bUIsT0FBT3FoRCxFQUFPLEdBQ25CejZCLEVBQUt5NkIsR0FBU3pzRCxJQU85Qit2RCxFQUFLeEYsa0JBQWtCMXhDLEVBQU84WixHQUM5QkEsRUFBUS9tQixXQUFXbzJCLGFBQWFucEIsRUFBTzhaLEdBQ3ZDbzlCLEVBQUs1akMsV0FBV3dHLEdBRXBCLElBQUsyaEIsRUFBTSxDQUNnQixJQUFuQno3QixFQUFNQyxVQUFnQnl6QyxFQUFjMXpDLEVBQU80ekMsRUFBUSxFQUFHenNELEdBQzFELE1BR0osR0FBSTZZLEVBQU15YSxXQUFhZ2hCLEVBQUtoaEIsVUFBWXk4QixFQUFLL00saUJBQWlCbnFDLEVBQU95N0IsSUFBU3o3QixFQUFNNkMsT0FBUzQ0QixFQUFLNTRCLEtBQU0sQ0FDcEcsTUFBTTYwQyxFQUFTMTNDLEVBQU1ELFdBQ3JCLElBQUk0M0MsRUFBYyxFQUNsQixJQUFLLElBQUkvdUQsRUFBSSxFQUFHZ3ZELEVBQU9GLEVBQU85bkQsT0FBUWhILEVBQUlndkQsRUFBTWh2RCxJQUN4Qzh1RCxFQUFPOXVELEdBQUdpRyxZQUFZZSxPQUFTLEdBQUcrbkQsSUFHMUMsTUFBTXZ3RCxFQUFJNFksRUFBTXkwQyxVQUNWeHNELEVBQUl3ekMsRUFBS244QixXQUNmLElBQUl1NEMsRUFBWSxFQUNoQixHQUFJendELEdBQUthLEVBQUcsQ0FDUixNQUFNNnZELEVBQTRCLElBQWYxd0QsRUFBRTZZLFVBQWlDLElBQWZoWSxFQUFFZ1ksU0FDekM0M0MsRUFBWXp3RCxFQUFFeUgsWUFBWWUsT0FDMUIsSUFBSW1vRCxFQUFRM3dELEVBQUU0aUMsZ0JBQ2QsS0FBTSt0QixHQUE0QixJQUFuQkEsRUFBTTkzQyxVQUNqQjQzQyxHQUFhRSxFQUFNbHBELFlBQVllLE9BQy9CbW9ELEVBQVFBLEVBQU0vdEIsZ0JBS2xCLEdBRkkydEIsRUFBYyxHQUFvQixJQUFmdndELEVBQUU2WSxVQUFpQyxJQUFmaFksRUFBRWdZLFdBQW1CN1ksRUFBRXlILFlBQVllLE9BQVMsR0FBSzNILEVBQUU0RyxZQUFZZSxPQUFTLElBQUkrbkQsSUFFbkhSLEVBQWEsQ0FDYixJQUFJaCtCLEVBQU8sS0FDWCxJQUFLLElBQUl2d0IsRUFBSSxFQUFHQSxFQUFJdXVELEVBQWF2dUQsSUFFN0IsR0FEQXV3QixFQUFPNjlCLEVBQWNwdUQsR0FDakJ1d0IsR0FBUUEsRUFBS3k2QixHQUFTenNELEVBQUcsQ0FDekIsR0FBSXlzRCxFQUFRLEdBQUt6NkIsRUFBS3k2QixFQUFRLEtBQU8yRCxFQUFZLFNBRWpEcCtCLEVBQUt5NkIsSUFBVSxFQUNYejZCLEVBQUt5NkIsRUFBUSxJQUFNLEdBQUt6NkIsRUFBS3k2QixLQUFXenNELElBQ3hDZ3lCLEVBQUt5NkIsRUFBUSxJQUFNK0QsRUFDZkcsR0FDSTF3RCxHQUFvQixJQUFmQSxFQUFFNlksVUFBa0JoWSxHQUFvQixJQUFmQSxFQUFFZ1ksV0FDaEMweUMsRUFBUS9wRCxJQUFNaXZELE1BUzFDLEdBQXVCLElBQW5CNzNDLEVBQU1DLFVBR04sR0FGQTQzQyxFQUFZNzNDLEVBQU1uUixZQUFZZSxPQUM5Qm9RLEVBQU1uUixhQUFlNHNDLEVBQUs1c0MsWUFDdEJzb0QsRUFBYSxDQUNiLElBQUloK0IsRUFBTyxLQUNYLElBQUssSUFBSXZ3QixFQUFJLEVBQUdBLEVBQUl1dUQsRUFBYXZ1RCxJQUU3QixHQURBdXdCLEVBQU82OUIsRUFBY3B1RCxHQUNqQnV3QixHQUFRQSxFQUFLeTZCLEdBQVN6c0QsRUFBRyxDQUN6QixHQUFJeXNELEVBQVEsR0FBS3o2QixFQUFLeTZCLEVBQVEsS0FBTzJELEVBQVksU0FFakRwK0IsRUFBS3k2QixJQUFVLEVBQ1h6NkIsRUFBS3k2QixFQUFRLElBQU0sR0FBS3o2QixFQUFLeTZCLEtBQVd6c0QsSUFDeENneUIsRUFBS3k2QixFQUFRLElBQU0rRCxFQUNuQmhGLEVBQVEvcEQsSUFBTWl2RCxVQU05QjczQyxFQUFNdFMsV0FBYSt0QyxFQUFLL3RDLFVBRzVCd3BELEVBQUs1akMsV0FBV21vQixHQUNoQnQwQyxTQUMwQixJQUFuQjZZLEVBQU1DLFVBQ2J5ekMsRUFBYzF6QyxFQUFPNHpDLEVBQVEsRUFBR3pzRCxJQW5INUMsQ0FzSEcyRCxFQUFTLEVBQUcsR0FFUjZuRCxHQVFYelUsZ0JBQWlCLFNBQVVwekMsRUFBU3ltRCxHQUNOLGlCQUFmQSxFQUNQQSxFQUFhLFNBQVV6M0IsR0FBVyxPQUFPeHdCLEtBQUsyQixLQUFLNnVCLEVBQVExbkIsVUFBWXpKLEtBQUssSUFBSVcsS0FBS29HLEdBQUcySCxPQUFPLE1BQVFrNkMsR0FBMEIsTUFBUSxLQUFNLE1BQ2xILG1CQUFmQSxJQUNkQSxFQUFhLFdBQWMsT0FBTyxJQUd0QyxTQUFVbUMsRUFBYzU1QixHQUNwQixJQUFJNVEsRUFBVzRRLEVBQVE1USxTQUN2QixHQUF3QixJQUFwQkEsRUFBU3RaLFFBQWdCc1osRUFBUyxHQUFHdVIsV0FBYVgsRUFBUVcsVUFBWTgyQixFQUFXejNCLEdBQVUsQ0FDM0YsTUFBTTNHLEVBQU9qSyxFQUFTLEdBRXRCLElBREFBLEVBQVdpSyxFQUFLakssU0FDVEEsRUFBUyxJQUNaNFEsRUFBUXZ2QixZQUFZMmUsRUFBUyxJQUVqQzRRLEVBQVEzWixZQUFZZ1QsR0FHeEIsSUFBSyxJQUFJaHNCLEVBQUksRUFBRzRKLEVBQU0rb0IsRUFBUTVRLFNBQVN0WixPQUFRekksRUFBSTRKLEVBQUs1SixJQUNwRHVzRCxFQUFjNTVCLEVBQVE1USxTQUFTL2hCLElBWnZDLENBY0cyRCxJQVNQOCtCLGdCQUFpQixTQUFVOStCLEVBQVNrdEQsRUFBZUMsR0FDL0MsTUFBTWYsRUFBTzV0RCxLQUVUMHVELElBQ0FBLEVBQWdCZCxFQUFLajBCLGlCQUFpQiswQixHQUFlLFNBQVVsK0IsR0FDM0QsT0FBT2h2QixJQUFZZ3ZCLEVBQVErYyxrQkFJbkMsU0FBVTZjLEVBQWM1NUIsR0FDcEIsR0FBSW85QixFQUFLZ0IsYUFBYXArQixJQUFZQSxJQUFZaytCLEdBQWlCZCxFQUFLbEcsY0FBY2wzQixHQUFVLE9BQU8sRUFDbkcsR0FBSUEsSUFBWWh2QixJQUFXb3NELEVBQUs1YyxtQkFBbUJ4Z0IsRUFBUWpyQixjQUFrQmlyQixFQUFReGEsWUFBZTQzQyxFQUFLNUQsUUFBUXg1QixFQUFReGEsYUFBaUJ3YSxFQUFRbHNCLGNBQWNzcEQsRUFBSzlJLHVCQUs5SixDQUNILE1BQU1sbEMsRUFBVzRRLEVBQVE1USxTQUN6QixJQUFLLElBQUkvaEIsRUFBSSxFQUFHNEosRUFBTW1ZLEVBQVN0WixPQUFRM0gsRUFBSSxFQUFHZCxFQUFJNEosRUFBSzVKLElBQzlDK2hCLEVBQVMvaEIsRUFBSWMsS0FBTWl2RCxFQUFLdGxCLFlBQVkxb0IsRUFBUy9oQixFQUFJYyxNQUN0REEsR0FBS3lyRCxFQUFjeHFDLEVBQVMvaEIsRUFBSWMsVUFScEMsR0FBSTZ4QixFQUFRL21CLFdBRVIsT0FEQSttQixFQUFRL21CLFdBQVdvTixZQUFZMlosSUFDdkIsRUFVaEIsT0FBTyxFQWZYLENBZ0JHaHZCLEdBRStCLElBQTlCQSxFQUFRaVYsV0FBV25RLFNBQ2Zxb0QsRUFDQTN1RCxLQUFLZ3FCLFdBQVd4b0IsR0FFaEJBLEVBQVE0QyxVQUFZLFNBVWhDcThCLHFCQUFzQixTQUFVemxCLEdBQzVCLE9BQUtBLEVBQ0VBLEVBQUt4UyxPQUFPd0YsUUFBUSw4R0FBOEcsU0FBVS9QLEdBQUssT0FBT0EsRUFBRStQLFFBQVEsTUFBTyxJQUFJQSxRQUFRLE1BQU8sUUFEakwsSUFTdEI2Z0QsYUFBYyxTQUFVN3pDLEdBQ3BCLE9BQU9BLEVBQUtoTixRQUFRLE1BQU8sSUFBSUEsUUFBUSxpQkFBa0IsU0FRN0RxaUMsWUFBYSxTQUFVcVksRUFBT29HLEdBQzFCLE1BQU0vdkQsRUFBSyt2RCxFQUFXLEdBQUosRUFDWi85QyxHQUFTLEVBQUxoUyxFQUVWMnBELEVBQU03TixLQUFLLFNBQVVyckMsRUFBRzhKLEdBQ3BCLE9BQUt0WixLQUFLb2dDLFdBQVc1d0IsSUFBT3hQLEtBQUtvZ0MsV0FBVzltQixJQUM1QzlKLEVBQUl4UCxLQUFLNnlDLGdCQUFnQnJqQyxLQUN6QjhKLEVBQUl0WixLQUFLNnlDLGdCQUFnQnY1QixJQUNWdmEsRUFBSXlRLEVBQUk4SixFQUFJdkksRUFBSSxFQUh3QixHQUl6RDFSLEtBQUtXLFFBUVg2eEIsbUJBQW9CLFNBQVVrOUIsR0FDMUIsR0FBc0IsaUJBQVhBLEVBQ1AsTUFBTSxJQUFJQyxVQUFVLHFCQUt4QixPQUFPRCxFQUNGL2dELFFBQVEsc0JBQXVCLFFBQy9CQSxRQUFRLEtBQU0sVUFHdkJpaEQsMkJBQTRCLFNBQVV6dEQsR0FDbEMsT0FBUSxjQUFjRyxLQUFLSCxFQUFRMnZCLFlBQWNueEIsS0FBS3NvQyxZQUFZOW1DLElBQVksVUFBVUcsS0FBS0gsRUFBUTJ2QixZQVN6R3NoQixvQkFBcUIsU0FBVWp4QyxHQUMzQixPQUFPQSxHQUFnQyxJQUFyQkEsRUFBUW1WLFdBQW1CM1csS0FBSzBuRCxjQUFjbG1ELEtBQWF4QixLQUFLMm5ELG1CQUFtQm5tRCxLQVN6RzB0RCxrQkFBbUIsU0FBVTF0RCxHQUN6QixPQUFPQSxHQUFnQyxJQUFyQkEsRUFBUW1WLFVBQWtCLDRCQUE0QmhWLEtBQXdCLGlCQUFaSCxFQUF1QkEsRUFBVUEsRUFBUTJ2QixXQVNqSWcrQixZQUFhLFNBQVUzdEQsR0FDbkIsT0FBT0EsR0FBZ0MsSUFBckJBLEVBQVFtVixVQUFrQjNXLEtBQUsybkQsbUJBQW1Cbm1ELE1BQWNBLEVBQVFWLE1BQU00Z0IsVUFTcEdrdEMsYUFBYyxTQUFVcHRELEdBQ3BCLE9BQU9BLEdBQWdDLElBQXJCQSxFQUFRbVYsV0FBbUIzVyxLQUFLc29DLFlBQVk5bUMsSUFBWSxxREFBcURHLEtBQXdCLGlCQUFaSCxFQUF1QkEsRUFBVUEsRUFBUTJ2QixZQVV4TGkrQixnQkFBaUIsU0FBVTV0RCxHQUN2QixNQUFPLDZDQUE2Q0csS0FBS0gsRUFBUTJ2QixXQVNyRWsrQixvQkFBcUIsU0FBVTFyRCxHQUMzQixPQUFPLElBQUlvSyxPQUFPLGtCQUFvQnBLLEdBQVEsSUFBSXFLLFFBQVEsTUFBTyxXQUFhLGFBQWMsT0FTaEdzaEQsb0JBQXFCLFNBQVUzckQsR0FDM0IsT0FBTyxJQUFJb0ssT0FBTyxrQkFBb0JwSyxHQUFRLEtBQUtxSyxRQUFRLE1BQU8sV0FBYSxhQUFjLE9BV2pHdWhELHdCQUF5QixTQUFVQyxFQUFrQkMsRUFBMEJDLEVBQTBCQyxHQUtyRyxNQUFNQyxFQUFhLEdBQUlDLEVBQVksR0FBSUMsRUFBWSxHQUFJQyxFQUFxQixHQUd0RUMsRUFBWWh3RCxLQUFLcXFELGtCQUFrQm1GLEVBQWtCLFNBQVVoL0IsR0FDakUsR0FBeUIsSUFBckJBLEVBQVE3WixTQUVSLE9BREkzVyxLQUFLNnZDLE9BQU9yZixFQUFRK2MsZ0JBQWdCcWlCLEVBQVdqbkQsS0FBSzZuQixJQUNqRCxFQUlYLEdBQUlrL0IsRUFBeUIvdEQsS0FBSzZ1QixFQUFRVyxZQUFlcytCLEVBQXlCOXRELEtBQUs2dUIsRUFBUVcsV0FBMkMsSUFBOUJYLEVBQVEvWixXQUFXblEsUUFBZ0J0RyxLQUFLa2dDLGtCQUFrQjFQLEdBRWxLLE9BREFvL0IsRUFBV2puRCxLQUFLNm5CLElBQ1QsRUFJWCxNQUFNeS9CLEdBQVNqd0QsS0FBSzI1QixpQkFBaUJuSixFQUFTeHdCLEtBQUtrZ0MsbUJBQ25ELElBQU1sZ0MsS0FBSytwRCxRQUFRdjVCLEtBQWF4d0IsS0FBS29nQyxXQUFXNVAsS0FBYXh3QixLQUFLNkksU0FBUzJuQixLQUFjeHdCLEtBQUt1Z0MsZ0JBQWdCL1AsSUFBWXh3QixLQUFLaWdDLHFCQUFxQnpQLElBQVl4d0IsS0FBSzJuRCxtQkFBbUJuM0IsS0FBMkMsSUFBOUJBLEVBQVEvWixXQUFXblEsUUFBZ0IycEQsRUFFcE8sT0FEQUosRUFBVWxuRCxLQUFLNm5CLElBQ1IsRUFJWCxHQUFJeHdCLEtBQUs2dkMsT0FBT3JmLEVBQVEvbUIsY0FBZ0J6SixLQUFLNnZDLE9BQU9yZixLQUFheHdCLEtBQUtvZ0MsV0FBVzVQLEdBRTdFLE9BREFzL0IsRUFBVW5uRCxLQUFLNm5CLElBQ1IsRUFJWCxHQUFJeHdCLEtBQUtreUMsT0FBTzFoQixHQUFVLENBQ3RCLE1BQU0wL0IsRUFBTTEvQixFQUFRdWMsa0JBQ3BCLElBQUsvc0MsS0FBS3VnQyxnQkFBZ0IydkIsS0FBU2x3RCxLQUFLaWdDLHFCQUFxQml3QixLQUFTbHdELEtBQUtzb0MsWUFBWTRuQixHQUVuRixPQURBSCxFQUFtQnBuRCxLQUFLNm5CLElBQ2pCLEVBS2YsR0FBSXkvQixHQUFTei9CLEVBQVE1dkIsVUFBVyxDQUM1QixNQUFNQSxFQUFZLElBQUlaLEtBQUtvRyxHQUFHd0osTUFBTTRnQixFQUFRdXhCLFdBQVd6NUMsSUFBSXFuRCxHQUFpQjE5QyxLQUFLLEtBQUt6SixPQUNsRjVILEVBQVc0dkIsRUFBUTV2QixVQUFZQSxFQUM5QjR2QixFQUFRMEIsZ0JBQWdCLFNBT2pDLE9BSmUxQixFQUFRL21CLGFBQWUrbEQsR0FBb0JTLElBQ3BEandELEtBQUtvZ0MsV0FBVzVQLEtBQWF4d0IsS0FBSzZ2QyxPQUFPcmYsRUFBUS9tQixjQUM3Q3pKLEtBQUt1Z0MsZ0JBQWdCL1AsSUFBWXh3QixLQUFLc29DLFlBQVk5WCxNQUFjeHdCLEtBQUtpZ0MscUJBQXFCelAsRUFBUS9tQixjQUFnQnpKLEtBQUsyNUIsaUJBQWlCbkosRUFBU3h3QixLQUFLc29DLGVBR2xLanBDLEtBQUtXLE9BRVAsSUFBSyxJQUFJbkMsRUFBSSxFQUFHNEosRUFBTW1vRCxFQUFXdHBELE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzlDbUMsS0FBS2dxQixXQUFXNGxDLEVBQVcveEQsSUFHL0IsTUFBTXN5RCxFQUFZLEdBQ2xCLElBQUssSUFBbUNweEQsRUFBR1ksRUFBbEM5QixFQUFJLEVBQUc0SixFQUFNdW9ELEVBQVUxcEQsT0FBY3pJLEVBQUk0SixFQUFLNUosSUFHbkQsR0FGQWtCLEVBQUlpeEQsRUFBVW55RCxHQUNkOEIsRUFBSVosRUFBRTBLLFdBQ0Q5SixHQUFNQSxFQUFFOEosV0FFYixHQUFJekosS0FBSzI1QixpQkFBaUI1NkIsRUFBR2lCLEtBQUtvZ0MsWUFBYSxDQUMzQyxNQUFNZ3dCLEVBQWVyeEQsRUFBRTBYLFdBQ3ZCLElBQUssSUFBSXE4QixFQUFJc2QsRUFBYTlwRCxPQUFTLEVBQUdtQixHQUFPLEVBQUdxckMsSUFDNUNuekMsRUFBRWtnQyxhQUFhOWdDLEVBQUdxeEQsRUFBYXRkLElBRW5DcWQsRUFBVXhuRCxLQUFLNUosUUFFZlksRUFBRThKLFdBQVdvMkIsYUFBYTlnQyxFQUFHWSxHQUM3Qnd3RCxFQUFVeG5ELEtBQUtoSixHQUl2QixJQUFLLElBQW1DWixFQUEvQmxCLEVBQUksRUFBRzRKLEVBQU0wb0QsRUFBVTdwRCxPQUFXekksRUFBSTRKLEVBQUs1SixJQUNoRGtCLEVBQUlveEQsRUFBVXR5RCxHQUNWbUMsS0FBS2d4QyxtQkFBbUJqeUMsRUFBRXdHLFlBQVlpRCxTQUN0Q3hJLEtBQUtncUIsV0FBV2pyQixHQUl4QixJQUFLLElBQUlsQixFQUFJLEVBQUc0SixFQUFNb29ELEVBQVV2cEQsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDN0NtQyxLQUFLZ3FCLFdBQVc2bEMsRUFBVWh5RCxJQUc5QixJQUFLLElBQW1Da0IsRUFBR3N4RCxFQUFJendDLEVBQVVqZ0IsRUFBaEQ5QixFQUFJLEVBQUc0SixFQUFNcW9ELEVBQVV4cEQsT0FBNEJ6SSxFQUFJNEosRUFBSzVKLElBR2pFLEdBRkFrQixFQUFJK3dELEVBQVVqeUQsR0FDZDhCLEVBQUlaLEVBQUUwSyxXQUNEOUosRUFJTCxHQUZBMHdELEVBQUtyd0QsS0FBS1csY0FBYyxNQUVwQlgsS0FBS3VnQyxnQkFBZ0J4aEMsR0FBSSxDQUV6QixJQURBNmdCLEVBQVc3Z0IsRUFBRTBYLFdBQ05tSixFQUFTLElBQ1p5d0MsRUFBR3B2RCxZQUFZMmUsRUFBUyxJQUU1QmpnQixFQUFFa2dDLGFBQWF3d0IsRUFBSXR4RCxHQUNuQmlCLEtBQUtncUIsV0FBV2pyQixRQUVoQkEsRUFBSUEsRUFBRXlzQyxZQUNONmtCLEVBQUdwdkQsWUFBWTZ1RCxFQUFVanlELElBQ3pCOEIsRUFBRWtnQyxhQUFhd3dCLEVBQUl0eEQsR0FJM0IsSUFBSyxJQUE0Q0EsRUFBR2dTLEVBQTNDbFQsRUFBSSxFQUFHNEosRUFBTXNvRCxFQUFtQnpwRCxPQUFjekksRUFBSTRKLEVBQUs1SixJQUM1RGtCLEVBQUlneEQsRUFBbUJseUQsR0FDdkJrVCxFQUFJL1EsS0FBS1csY0FBYyxPQUN2Qm9RLEVBQUUzTSxVQUE2QyxJQUFoQ3JGLEVBQUV3RyxZQUFZaUQsT0FBT2xDLFFBQXNDLElBQXRCdkgsRUFBRTZnQixTQUFTdFosT0FBZ0IsT0FBU3ZILEVBQUVxRixVQUMxRnJGLEVBQUVxRixVQUFZMk0sRUFBRXFGLFdBSXhCazZDLHVCQUF3QixTQUFVL3RELEVBQVMrK0MsR0FDdkMsSUFBSWlQLEVBQWMsR0FDZGh1RCxFQUFRZ2EsU0FBUWcwQyxHQUFlLFVBQVlodUQsRUFBUWdhLE9BQVMsS0FDNURoYSxFQUFRaXVELFlBQVdELEdBQWUsY0FBZ0JodUQsRUFBUWl1RCxVQUFZLEtBQ3RFanVELEVBQVE0RSxZQUFXb3BELEdBQWUsY0FBZ0JodUQsRUFBUTRFLFVBQVksS0FDdEU1RSxFQUFRRSxXQUFVOHRELEdBQWUsWUFBY2h1RCxFQUFRRSxTQUFXLEtBQ2xFRixFQUFRK1osUUFBT2kwQyxHQUFlLFNBQVdodUQsRUFBUStaLE1BQVEsS0FDekQvWixFQUFRNi9CLFdBQVVtdUIsR0FBZSxhQUFlaHVELEVBQVE2L0IsU0FBVyxLQUNuRTcvQixFQUFRdy9CLFdBQVV3dUIsR0FBZSxhQUFlaHVELEVBQVF3L0IsU0FBVyxLQUV2RSxJQUFJM1IsRUFBTSxHQUFJeVUsRUFBUSxHQUFJNHJCLEVBQVMsR0FFbkMsTUFBTUMsR0FETnBQLEVBQWVpUCxFQUFjalAsR0FDQ2o1QyxNQUFNLEtBQ3BDLElBQUssSUFBa0N6SSxFQUE5Qi9CLEVBQUksRUFBRzRKLEVBQU1pcEQsRUFBU3BxRCxPQUFXekksRUFBSTRKLEVBQUs1SixJQUMvQytCLEVBQUk4d0QsRUFBUzd5RCxHQUFHMkssT0FDWDVJLElBQ0QseUJBQXlCK0IsS0FBSy9CLElBQU0sMEJBQTBCK0IsS0FBSy9CLEdBQ25Fd3dCLEdBQU94d0IsRUFBSSxJQUdYLDBCQUEwQitCLEtBQUsvQixJQUMzQixVQUFVK0IsS0FBSy9CLElBQWlDLFNBQTNCQSxFQUFFeUksTUFBTSxLQUFLLEdBQUdHLFNBQ3JDakcsRUFBUWdhLE9BQVMsUUFFckJzb0IsR0FBU2psQyxFQUFJLEtBR2pCNndELEdBQVU3d0QsRUFBSSxLQUdsQixNQUFPLENBQ0h3d0IsSUFBS0EsRUFDTHlVLE1BQU9BLEVBQ1A0ckIsT0FBUUEsSUFJaEJFLG1CQUFvQixTQUFVOXJCLEVBQU90aUMsR0FDakNzaUMsRUFBTXh1QixhQUFhLFlBQWEsUUFDaEN3dUIsRUFBTWlpQixnQkFBZ0I4SixLQUFLeHNELFVBQVksZ0hBR25DcEUsS0FBSzZ3RCxrQkFBa0J0dUQsR0FDM0JzaUMsRUFBTWlpQixnQkFBZ0JwakQsS0FBSzlDLFVBQVkyQixFQUFRdXVELGVBQy9DanNCLEVBQU1paUIsZ0JBQWdCcGpELEtBQUsyUyxhQUFhLG1CQUFtQixHQUMzRHd1QixFQUFNaWlCLGdCQUFnQnBqRCxLQUFLMlMsYUFBYSxjQUFlLFFBRzNEdzZDLGtCQUFtQixTQUFVdHVELEdBQ3pCLE1BQU13dUQsRUFBWXh1RCxFQUFReXVELGtCQUNwQkMsRUFBVWp4RCxLQUFLb0csR0FBRzJILE9BQ3hCLElBQUltakQsRUFBWSxHQUVoQixJQUFLLElBQW1DcmhDLEVBQS9COWUsRUFBSSxFQUFHdEosRUFBTXNwRCxFQUFVenFELE9BQWN5SyxFQUFJdEosRUFBS3NKLElBQUssQ0FHeEQsR0FGQThlLEVBQU8sR0FFSCxvQ0FBb0NsdUIsS0FBS292RCxFQUFVaGdELElBQ25EOGUsRUFBS2xuQixLQUFLb29ELEVBQVVoZ0QsUUFDakIsQ0FDSCxNQUFNb2dELEVBQWMsSUFBSUYsRUFBUSxjQUFnQkYsRUFBVWhnRCxHQUFLLGdDQUFpQyxLQUNoRyxJQUFLLElBQXNFcWdELEVBQWxFbHpELEVBQUkrRSxTQUFTOGQscUJBQXFCLFFBQVNsakIsRUFBSSxFQUFHNEosRUFBTXZKLEVBQUVvSSxPQUFrQnpJLEVBQUk0SixFQUFLNUosSUFDMUZ1ekQsRUFBV2x6RCxFQUFFTCxHQUFHMGIsS0FBS2pJLE1BQU02L0MsR0FDdkJDLEdBQVV2aEMsRUFBS2xuQixLQUFLeW9ELEVBQVMsSUFJekMsSUFBS3ZoQyxHQUF3QixJQUFoQkEsRUFBS3ZwQixPQUFjLEtBQU0sME1BRXRDLElBQUssSUFBSXpJLEVBQUksRUFBRzRKLEVBQU1vb0IsRUFBS3ZwQixPQUFRekksRUFBSTRKLEVBQUs1SixJQUN4Q3F6RCxHQUFhLGVBQWlCcmhDLEVBQUtoeUIsR0FBSyxzQkFJaEQsT0FBT3F6RCxHQUFnQyxTQUFuQjN1RCxFQUFRZ2EsT0FBb0IsNkZBQStGLE1BSXhJN2IsUUNya0VBLEdBT1htQyxLQUFNLFNBQVVyQixFQUFTZSxHQUNFLGlCQUFaQSxJQUFzQkEsRUFBVSxJQUUzQyxNQUFNb1QsRUFBTTFTLFNBR1pqRCxLQUFLcXhELGFBQWE3dkQsRUFBU2UsR0FHM0IsTUFBTSt1RCxFQUFVMzdDLEVBQUloVixjQUFjLE9BQ2xDMndELEVBQVExd0QsVUFBWSxjQUFnQjJCLEVBQVEwdEIsSUFBTSxVQUFZLElBQzFEenVCLEVBQVFvZCxLQUFJMHlDLEVBQVExeUMsR0FBSyxhQUFlcGQsRUFBUW9kLElBR3BELE1BQU1uZCxFQUFXa1UsRUFBSWhWLGNBQWMsT0FDbkNjLEVBQVNiLFVBQVksZUFHckIsTUFBTTJ3RCxFQUFXdnhELEtBQUt3eEQsZUFBZTc3QyxFQUFLcFQsRUFBUThwRCxXQUFZOXBELEVBQVFULFFBQVNTLEdBQ3pFa3ZELEVBQWdCRixFQUFTL3ZELFFBQVE4OEIsV0FBVSxHQUNqRG16QixFQUFjN3dELFdBQWEscUJBQzNCMndELEVBQVMvdkQsUUFBUVYsTUFBTWlzQixXQUFhLFNBQ2hDd2tDLEVBQVNHLGtCQUFrQnp1QyxNQUFNampCLEtBQUsyeEQsZ0JBQWdCcHZELEVBQVErbkMsT0FDbEUsTUFBTXNuQixFQUFRajhDLEVBQUloVixjQUFjLE9BQ2hDaXhELEVBQU1oeEQsVUFBWSxXQUdsQixNQUFNaXhELEVBQWVsOEMsRUFBSWhWLGNBQWMsT0FDdkNreEQsRUFBYWp4RCxVQUFZLDBCQUd6QixNQUFNa3hELEVBQWFuOEMsRUFBSWhWLGNBQWMsT0FDckNteEQsRUFBV2x4RCxVQUFZLGFBR3ZCLE1BQU1teEQsRUFBZS94RCxLQUFLZ3lELGNBQWN6dkQsRUFBUyt1RCxFQUFTQyxFQUFTL3ZELFFBQVNvd0QsR0FFdEVLLEVBQVlGLEVBQWFFLFVBQ3pCQyxFQUFjSCxFQUFhdkcsYUFDM0IyRyxFQUFtQkosRUFBYTdzQixZQUN0QyxJQUFJa3RCLEVBQVdMLEVBQWF4dUMsU0FHNUIsTUFBTTh1QyxFQUFlSixFQUFVSyxZQUN6QkMsRUFBYU4sRUFBVU0sV0FDdkJDLEVBQWVQLEVBQVVRLFlBQ3pCQyxFQUFlVCxFQUFVVSxZQUd6QkMsRUFBY2o5QyxFQUFJaFYsY0FBYyxPQUN0Q2l5RCxFQUFZaHlELFVBQVksbUNBQ3hCZ3lELEVBQVl4dUQsVUFBWSx3Q0FHeEIsTUFBTXl1RCxFQUFlbDlDLEVBQUloVixjQUFjLE9BQ3ZDa3lELEVBQWFqeUQsVUFBWSxrQkFDekJpeUQsRUFBYXp1RCxVQUFZLDBCQUE0QjdCLEVBQVF1QyxNQUFNdytDLFdBQWEsWUFDaEYsTUFBTXdQLEVBQWlCbjlDLEVBQUloVixjQUFjLE9BQ3pDbXlELEVBQWVseUQsV0FBYSw0QkFDNUIsTUFBTW15RCxFQUFpQkQsRUFBZXgwQixXQUFVLEdBQ2hEdzBCLEVBQWUxdUQsVUFBWTJ1RCxFQUFlM3VELFVBQVk3QixFQUFRdUMsTUFBTXcrQyxXQUdwRSxNQUFNMFAsRUFBY3I5QyxFQUFJaFYsY0FBYyxPQUN0Q3F5RCxFQUFZcHlELFVBQVksbUJBR3hCLE1BQU1xeUQsRUFBWXQ5QyxFQUFJaFYsY0FBYyxTQUNwQ3N5RCxFQUFVQyxVQUFZLEVBQ3RCRCxFQUFVbnlELE1BQU1zbkMsUUFBVSw4S0FHMUIsTUFBTStxQixFQUFtQjV3RCxFQUFRNHdELGlCQUM3QkEsSUFDQUEsRUFBaUJseUQsWUFBWXN3RCxFQUFTL3ZELFNBQ3RDMnhELEVBQWlCbHlELFlBQVl3d0QsSUFJakMsTUFBTTJCLEVBQXVCN3dELEVBQVE2d0QscUJBdUJyQyxPQXRCSWYsR0FBZ0JlLEdBQXNCQSxFQUFxQm55RCxZQUFZb3hELEdBRzNFUCxFQUFXN3dELFlBQVlteEQsR0FDbkJELEdBQWtCTCxFQUFXN3dELFlBQVlreEQsR0FDeENnQixJQUNEMXhELEVBQVNSLFlBQVlzd0QsRUFBUy92RCxTQUM5QkMsRUFBU1IsWUFBWXd3RCxJQUV6Qmh3RCxFQUFTUixZQUFZNHdELEdBQ3JCcHdELEVBQVNSLFlBQVk2d0QsR0FDckJyd0QsRUFBU1IsWUFBWSt4RCxHQUNyQnZ4RCxFQUFTUixZQUFZMnhELEdBQ3JCbnhELEVBQVNSLFlBQVk0eEQsR0FDckJweEQsRUFBU1IsWUFBWTZ4RCxHQUNyQnJ4RCxFQUFTUixZQUFZOHhELEdBQ3JCdHhELEVBQVNSLFlBQVlneUQsR0FDakJaLElBQWlCZSxHQUFzQjN4RCxFQUFTUixZQUFZb3hELEdBQ2hFZixFQUFRcndELFlBQVlRLEdBRXBCMndELEVBQVdweUQsS0FBS3F6RCxpQkFBaUI5d0QsRUFBUzZ2RCxHQUVuQyxDQUNIa0IsWUFBYSxDQUNUQyxLQUFNakMsRUFDTmtDLFVBQVcveEQsRUFDWGd5RCxTQUFVbEMsRUFBUy92RCxRQUNuQmt5RCxlQUFnQmpDLEVBQ2hCa0MsVUFBV3BDLEVBQVNvQyxVQUNwQkMsWUFBYTlCLEVBQ2IrQixhQUFjM0IsRUFDZDRCLFVBQVcxQixFQUNYMkIsYUFBYzVCLEVBQ2Q2QixhQUFjM0IsRUFDZDRCLFlBQWExQixFQUNiMkIsYUFBYzFCLEVBQ2QyQixhQUFjekIsRUFDZHB2RCxTQUFVc3ZELEVBQ1Z3QixhQUFjdkIsRUFDZHdCLGVBQWdCdkIsRUFDaEJ3QixlQUFnQnZCLEVBQ2hCd0IsWUFBYXZCLEVBQ2J3QixhQUFjM0MsRUFDZDRDLE9BQVE3QyxFQUNSOEMsV0FBWXpCLEdBRWhCMXdELFFBQVNBLEVBQ1RULFFBQVN5dkQsRUFBU3p2RCxRQUNsQjR2RCxrQkFBbUJILEVBQVNHLGtCQUM1QmlELG1CQUFvQnBELEVBQVNxRCxvQkFVckN2QixpQkFBa0IsU0FBVTl3RCxFQUFTNnZELEdBQ2pDLEdBQUk3dkQsRUFBUXN5RCxXQUFZLENBQ3BCLE1BQU1DLEVBQVksQ0FBQyxDQUNmOTFELEtBQU0sWUFDTisxRCxVQUFVLEVBQ1ZDLGFBQWEsRUFDYkMsY0FBYyxHQUNkMXlELEVBQVFzeUQsV0FBV3R5RCxTQUFXLElBQUsyeUQsUUFBTyxTQUFVcnlELEVBQU02TCxHQUMxRCxJQUFLLElBQUl0UCxLQUFPc1AsRUFDUmhPLEVBQUswakMsT0FBTzExQixFQUFRdFAsS0FBTXlELEVBQUt6RCxHQUFPc1AsRUFBT3RQLElBRXJELE9BQU95RCxJQUNSLElBRW9CLFNBQW5CTixFQUFRZ2EsU0FDUnU0QyxFQUFVSyxlQUFpQkMsSUFDM0JOLEVBQVV2NEMsT0FBUyxRQUd2QixNQUFNODRDLEVBQUs5eUQsRUFBUXN5RCxXQUFXcC9DLElBQUk2L0MsYUFBYWxELEVBQVUwQyxHQUN6RE8sRUFBR3QwRCxRQUFRdzBELFFBQVF6MEQsTUFBTXNuQyxRQUFVZ3FCLEVBQVN0eEQsTUFBTXNuQyxRQUVsRDdsQyxFQUFRaXpELGlCQUFtQkgsR0FDM0JqRCxFQUFXaUQsRUFBR3QwRCxRQUFRdzBELFNBQ2IzMEQsV0FBYSwwQkFHMUIsT0FBT3d4RCxHQVFYVCxnQkFBaUIsU0FBVXJuQixHQUN2QixJQUFLQSxFQUFPLE1BQU1ubkMsTUFBTSxtR0FFeEIsTUFBTXN5RCxFQUFlLENBQUMsQ0FDbEIzcUIsY0FBYyxHQUNkUixFQUFNL25DLFNBQVcsSUFBSzJ5RCxRQUFPLFNBQVVyeUQsRUFBTTZMLEdBQzdDLElBQUssSUFBSXRQLEtBQU9zUCxFQUNSaE8sRUFBSzBqQyxPQUFPMTFCLEVBQVF0UCxLQUFNeUQsRUFBS3pELEdBQU9zUCxFQUFPdFAsSUFFckQsT0FBT3lELElBQ1IsSUFFSHluQyxFQUFNL25DLFFBQVVrekQsR0FXcEJDLFlBQWEsU0FBVUMsRUFBY3QxRCxFQUFTdTFELEdBQzFDNTFELEtBQUtxeEQsYUFBYWh4RCxFQUFRbUIsUUFBUXEwRCxjQUFlRixHQUVqRCxNQUFNM2hCLEVBQUszekMsRUFBUW1CLFFBQ2JDLEVBQVd1eUMsRUFBR3Z5QyxTQUNkcTBELEVBQWE5aEIsRUFBRzhoQixXQUNoQkMsRUFBd0JKLEVBQWF4QyxrQkFBb0J3QyxFQUFheEMsbUJBQXFCeUMsRUFBY3pDLGlCQUN6RzZDLEVBQWVMLEVBQWEvd0QsT0FBU2d4RCxFQUFjaHhELE1BQVErd0QsRUFBYXRKLGFBQWV1SixFQUFjdkosWUFBY3NKLEVBQWEzMkQsT0FBUzQyRCxFQUFjNTJELE1BQVErMkQsRUFFL0p4RSxFQUFXdnhELEtBQUt3eEQsZUFBZXZ1RCxTQUFXK3lELEVBQWVMLEVBQWF0SixXQUFhdUosRUFBY3ZKLFdBQWFzSixFQUFhN3pELFFBQVM2ekQsR0FDdElwRSxFQUFTRyxrQkFBa0J6dUMsTUFBTWpqQixLQUFLMnhELGdCQUFnQmdFLEVBQWFyckIsT0FDdkUsTUFBTXNuQixFQUFRM3VELFNBQVN0QyxjQUFjLE9BQ3JDaXhELEVBQU1oeEQsVUFBWSxXQUVkbzFELElBQ0F6RSxFQUFTL3ZELFFBQVFWLE1BQU1pc0IsV0FBYSxTQUVoQ2dwQyxHQUNBSixFQUFheEMsaUJBQWlCbHlELFlBQVlzd0QsRUFBUy92RCxTQUNuRHd5QyxFQUFHM3lCLFFBQVFrc0IsY0FBYzEyQixZQUFZbTlCLEVBQUczeUIsVUFFeEMyeUIsRUFBRzN5QixRQUFRa3NCLGNBQWNwTixhQUFhb3hCLEVBQVMvdkQsUUFBU3d5QyxFQUFHM3lCLFNBRy9EMnlCLEVBQUczeUIsUUFBVWt3QyxFQUFTL3ZELFFBQ3RCd3lDLEVBQUcyZixVQUFZcEMsRUFBU29DLFVBQ3hCM2YsRUFBR3lnQixPQUFTN0MsR0FHaEIsTUFBTUcsRUFBZS94RCxLQUFLZ3lELGNBQWMyRCxFQUFjM2hCLEVBQUdpaUIsUUFBVUQsRUFBZXpFLEVBQVMvdkQsUUFBVXd5QyxFQUFHM3lCLFFBQVV1d0MsR0FFNUdLLEVBQVlGLEVBQWFFLFVBQ3pCekcsRUFBZXVHLEVBQWF2RyxhQUM1QjJHLEVBQW1CSixFQUFhN3NCLFlBQ3RDLElBQUk5akIsRUFBTzJ3QyxFQUFheHVDLFNBNEJ4QixPQTFCSXl3QixFQUFHc2UsYUFBYTV4RCxFQUFLc3BCLFdBQVdncUIsRUFBR3NlLGFBQ25DTCxFQUFVSyxjQUNOcUQsRUFBYXZDLHNCQUF3QnVDLEVBQWF2Qyx1QkFBeUJ3QyxFQUFjeEMscUJBQ3pGdUMsRUFBYXZDLHFCQUFxQm55RCxZQUFZZ3hELEVBQVVLLGFBRXhEN3dELEVBQVNSLFlBQVlneEQsRUFBVUssY0FJdkN3RCxFQUFXMXhELFVBQVksR0FDdkIweEQsRUFBVzcwRCxZQUFZbWdCLEdBQ25CK3dDLEdBQWtCMkQsRUFBVzcwRCxZQUFZa3hELEdBRTdDL3dDLEVBQU9waEIsS0FBS3F6RCxpQkFBaUJzQyxFQUFjdjBDLEdBRTNDNHlCLEVBQUdzZSxZQUFjTCxFQUFVSyxZQUMzQnRlLEVBQUd1ZSxXQUFhTixFQUFVTSxXQUMxQnZlLEVBQUd5ZSxZQUFjUixFQUFVUSxZQUMzQnplLEVBQUcyZSxZQUFjVixFQUFVVSxZQUMzQjNlLEVBQUd3WCxhQUFlQSxFQUNsQnhYLEVBQUc1eUIsS0FBT0EsRUFDVjR5QixFQUFHOU8sWUFBY2l0QixFQUVid0QsRUFBYTFsQyxJQUFLdnZCLEVBQUt5SSxTQUFTNnFDLEVBQUdpaUIsUUFBUyxVQUMzQ3YxRCxFQUFLd0ksWUFBWThxQyxFQUFHaWlCLFFBQVMsVUFFM0IsQ0FDSEMsWUFBYTNFLEVBQVNHLGtCQUN0QjV2RCxRQUFTeXZELEVBQVN6dkQsUUFDbEJ1ZixRQUFTa3dDLElBYWpCUyxjQUFlLFNBQVV6dkQsRUFBUzR6RCxFQUFRQyxFQUFTQyxHQUUvQ0YsRUFBT3IxRCxNQUFNc25DLFFBQVU3bEMsRUFBUSt6RCxjQUFjbG1DLElBR3pDLFVBQVV6dUIsS0FBS1ksRUFBUXZELE9BQ3ZCbzNELEVBQVF4MUQsV0FBYSxxQkFDckJ3MUQsRUFBUXQxRCxNQUFNd2IsTUFBUS9aLEVBQVFnMEQsY0FDdkIsV0FBVzUwRCxLQUFLWSxFQUFRdkQsUUFDL0JvM0QsRUFBUXgxRCxXQUFhLHNCQUNyQncxRCxFQUFRdDFELE1BQU13YixNQUFRL1osRUFBUWcwRCxhQUM5QkgsRUFBUW4xRCxZQUFZbzFELElBS3hCLE1BQU1HLEVBQWF2ekQsU0FBU3RDLGNBQWU0QixFQUFRb2tELE9BQWlCLFNBQVIsT0FHNUQsR0FGQTZQLEVBQVc1MUQsVUFBWSxzQ0FFbEIyQixFQUFRb2tELE9BV1Q2UCxFQUFXL3hCLGlCQUFrQixFQUM3Qit4QixFQUFXaHlCLFlBQWMsRUFDekJneUIsRUFBVzExRCxNQUFNc25DLFFBQVU3bEMsRUFBUSt6RCxjQUFjenhCLE1BQ2pEMnhCLEVBQVc1MUQsV0FBYTJCLEVBQVEzQixjQWRmLENBQ2pCNDFELEVBQVduZ0QsYUFBYSxtQkFBbUIsR0FDM0NtZ0QsRUFBV25nRCxhQUFhLGNBQWUsT0FDdkNtZ0QsRUFBV25nRCxhQUFhLFlBQWEsUUFDckMsSUFBSyxJQUFJalgsS0FBT21ELEVBQVFrMEQsaUJBQ3BCRCxFQUFXbmdELGFBQWFqWCxFQUFLbUQsRUFBUWswRCxpQkFBaUJyM0QsSUFFMURvM0QsRUFBVzUxRCxXQUFhLElBQU0yQixFQUFRdXVELGVBQ3RDMEYsRUFBVzExRCxNQUFNc25DLFFBQVU3bEMsRUFBUSt6RCxjQUFjenhCLE1BQVF0aUMsRUFBUSt6RCxjQUFjN0YsT0FDL0UrRixFQUFXNTFELFdBQWEyQixFQUFRM0IsVUFTcEMsTUFBTXd4RCxFQUFXbnZELFNBQVN0QyxjQUFjLFlBQ3hDeXhELEVBQVN4eEQsVUFBWSxtQ0FBcUMyQixFQUFRM0IsVUFDbEV3eEQsRUFBU3R4RCxNQUFNc25DLFFBQVU3bEMsRUFBUSt6RCxjQUFjenhCLE1BQy9DdXRCLEVBQVN0eEQsTUFBTUMsUUFBVSxPQUNGLFNBQW5Cd0IsRUFBUWdhLFNBQW1CNjFDLEVBQVN0eEQsTUFBTTQxRCxTQUFXLFVBR3pELElBQUlwRSxFQUFjLEtBQ2RDLEVBQWEsS0FDYkUsRUFBYyxLQUNkRSxFQUFjLEtBQ2xCLEdBQUlwd0QsRUFBUSt2RCxjQUNSQSxFQUFjcnZELFNBQVN0QyxjQUFjLE9BQ3JDMnhELEVBQVkxeEQsVUFBWSxvQ0FHeEIyeEQsRUFBYXR2RCxTQUFTdEMsY0FBYyxPQUNwQzR4RCxFQUFXM3hELFVBQVksa0NBQ3ZCMHhELEVBQVlyeEQsWUFBWXN4RCxHQUdwQmh3RCxFQUFRb3dELGFBQWEsQ0FJckIsR0FIQUYsRUFBY3h2RCxTQUFTdEMsY0FBYyxPQUNyQzh4RCxFQUFZN3hELFVBQVksMEJBRXBCMkIsRUFBUW8wRCxpQkFBa0IsQ0FDMUIsTUFBTUMsRUFBWTN6RCxTQUFTdEMsY0FBYyxRQUN6Q2kyRCxFQUFVaDJELFVBQVksZ0JBQ3RCZzJELEVBQVVyeEQsWUFBY2hELEVBQVFvMEQsaUJBQ2hDbEUsRUFBWXh4RCxZQUFZMjFELEdBUTVCLEdBTEFqRSxFQUFjMXZELFNBQVN0QyxjQUFjLFFBQ3JDZ3lELEVBQVkveEQsVUFBWSxrQkFDeEIreEQsRUFBWXB0RCxZQUFjLElBQzFCa3RELEVBQVl4eEQsWUFBWTB4RCxHQUVwQnB3RCxFQUFRczBELGFBQWUsRUFBRyxDQUMxQixNQUFNQyxFQUFXN3pELFNBQVN0QyxjQUFjLFFBQ3hDbTJELEVBQVN2eEQsWUFBYyxNQUFRaEQsRUFBUXMwRCxhQUN2Q3BFLEVBQVl4eEQsWUFBWTYxRCxHQUc1QnhFLEVBQVlyeEQsWUFBWXd4RCxHQUloQyxJQUFJdnRCLEVBQWMsS0FPbEIsT0FOSTNpQyxFQUFRMmlDLGNBQ1JBLEVBQWNqaUMsU0FBU3RDLGNBQWMsUUFDckN1a0MsRUFBWXRrQyxVQUFZLGlCQUN4QnNrQyxFQUFZNnhCLFVBQVl4MEQsRUFBUTJpQyxhQUc3QixDQUNIK3NCLFVBQVcsQ0FDUEssWUFBYUEsRUFDYkMsV0FBWUEsRUFDWkUsWUFBYUEsRUFDYkUsWUFBYUEsR0FFakJuSCxhQUFjZ0wsRUFDZGp6QyxTQUFVNnVDLEVBQ1ZsdEIsWUFBYUEsSUFVckJtc0IsYUFBYyxTQUFVN3ZELEVBQVNlLEdBQzdCLE1BQU1ULEVBQVUsR0FDaEIsR0FBSVMsRUFBUVQsUUFBUyxDQUNqQixNQUFNazFELEVBQVd6MEQsRUFBUVQsUUFDbkJtMUQsRUFBZ0JELEVBQVMxd0QsT0FBUzB3RCxFQUFXejRELE9BQU84SCxLQUFLMndELEdBQVUxdUQsS0FBSSxTQUFTbEssR0FBUSxPQUFPNDRELEVBQVM1NEQsTUFDOUcsSUFBSyxJQUF1Q3VCLEVBQW5DOUIsRUFBSSxFQUFHNEosRUFBTXd2RCxFQUFjM3dELE9BQVd6SSxFQUFJNEosRUFBSzVKLElBQ3BEOEIsRUFBSXMzRCxFQUFjcDVELEdBQUd5akIsU0FBVzIxQyxFQUFjcDVELEdBQzlDaUUsRUFBUW5DLEVBQUV2QixNQUFRdUIsRUFHMUI0QyxFQUFRVCxRQUFVQSxFQUVsQlMsRUFBUTIwRCxZQUFvQyxJQUF2QjMwRCxFQUFRMjBELFdBQzdCMzBELEVBQVFxQyxLQUFPckMsRUFBUXFDLE1BQVF1eUQsSUFDL0I1MEQsRUFBUXpELE1BQWlDLGlCQUFsQnlELEVBQVF6RCxNQUFxQnlELEVBQVF6RCxNQUFRLEtBQ3BFeUQsRUFBUTYwRCxrQkFBb0IsSUFBSTEyRCxFQUFLMEYsR0FBRzJILFFBQVF4TCxFQUFRNjBELG1CQUEwRCxpQkFBOUI3MEQsRUFBUTYwRCxrQkFBaUM3MEQsRUFBUTYwRCxrQkFBb0IsSUFBTSxJQUFNLHFCQUNySzcwRCxFQUFRODBELHNCQUFpRSxpQkFBbEM5MEQsRUFBUTgwRCxzQkFBcUM5MEQsRUFBUTgwRCxzQkFBd0IsSUFDcEg5MEQsRUFBUSswRCxlQUFpQi8wRCxFQUFRKzBELGdCQUFrQixHQUVuRC8wRCxFQUFRZzFELFdBQTJDLGlCQUF2QmgxRCxFQUFRZzFELFlBQTJCaDFELEVBQVFnMUQsV0FBV2p4RCxPQUFTLEVBQUkvRCxFQUFRZzFELFdBQWEsSUFDcEgsTUFBTUMsRUFBV2oxRCxFQUFRaTFELFNBQVcsQ0FBQyxDQUFDNzFDLEtBQU0sU0FBVS9WLFVBQVcsSUFBS2dXLE9BQVEsS0FBTUMsT0FBUSxNQUFPNDFDLElBQUssTUFBT0MsSUFBSyxPQUFTbjFELEVBQVFpMUQsVUFBWSxJQUFLdEMsUUFBTyxTQUFVeUMsRUFBVUMsR0FDN0ssSUFBSyxJQUFJeDRELEtBQU93NEQsRUFDWkQsRUFBU3Y0RCxHQUFPdzRELEVBQUt4NEQsR0FFekIsT0FBT3U0RCxJQUNSLElBQ0hwMUQsRUFBUXMxRCxhQUFlLENBQ25CLE9BQVVMLEVBQVM3MUMsS0FBS2pVLGNBQ3hCLEVBQUs4cEQsRUFBUzcxQyxLQUFLalUsY0FDbkIsRUFBSzhwRCxFQUFTNXJELFVBQVU4QixjQUN4QixJQUFPOHBELEVBQVM1ckQsVUFBVThCLGNBQzFCLEdBQU04cEQsRUFBUzUxQyxPQUFPbFUsY0FDdEIsRUFBSzhwRCxFQUFTNTFDLE9BQU9sVSxjQUNyQixJQUFPOHBELEVBQVMzMUMsT0FBT25VLGNBQ3ZCLE9BQVU4cEQsRUFBUzMxQyxPQUFPblUsY0FDMUIsRUFBSzhwRCxFQUFTMzFDLE9BQU9uVSxjQUNyQixJQUFPOHBELEVBQVNDLElBQUkvcEQsY0FDcEIsSUFBTzhwRCxFQUFTRSxJQUFJaHFELGVBRXhCbkwsRUFBUXUxRCxnQkFBa0IsQ0FDdEJuMkMsS0FBTXBmLEVBQVFpMUQsU0FBUzcxQyxLQUN2Qi9WLFVBQVdySixFQUFRaTFELFNBQVM1ckQsVUFDNUJnVyxPQUFRcmYsRUFBUWkxRCxTQUFTNTFDLE9BQ3pCQyxPQUFRdGYsRUFBUWkxRCxTQUFTMzFDLE9BQ3pCQyxVQUFXdmYsRUFBUWkxRCxTQUFTQyxJQUM1QjExQyxZQUFheGYsRUFBUWkxRCxTQUFTRSxLQUdsQ24xRCxFQUFRdzFELG9CQUFvRCxJQUEvQngxRCxFQUFRdzFELG1CQUdyQ3gxRCxFQUFReTFELGNBQWdCejFELEVBQVF5MUQsZUFBaUIsR0FDakR6MUQsRUFBUTAxRCx1QkFBa0UsaUJBQWxDMTFELEVBQVEwMUQsc0JBQXFDMTFELEVBQVEwMUQsc0JBSDNFLHVOQUdpSDExRCxFQUFRdzFELG1CQUFxQixVQUFZLElBQzVLeDFELEVBQVEyMUQscUJBQW9ELE1BQTdCMzFELEVBQVE0MUQsaUJBQTJCLElBQU1uNEQsS0FBS280RCxjQUFjNzFELEVBQVEwMUQsdUJBQTZELGlCQUE3QjExRCxFQUFRNDFELGtCQUFpQzUxRCxFQUFRNDFELGlCQUFpQjd4RCxPQUFTLEVBQUksSUFBTS9ELEVBQVE0MUQsaUJBQW1CLElBQUs1MUQsRUFBUXkxRCxlQUVoUXoxRCxFQUFRODFELG1CQUFxQjkxRCxFQUFReTFELGVBQWlCejFELEVBQVF5MUQsZUFBaUJ6MUQsRUFBUTgxRCxtQkFBc0IsSUFBTTkxRCxFQUFRODFELG1CQUF1QjkxRCxFQUFRODFELG9CQUFzQixJQUNoTDkxRCxFQUFRKzFELG1CQUFvRCxNQUEvQi8xRCxFQUFRKzFELG1CQUE2QixJQUFNdDRELEtBQUtvNEQsY0FBb0QsaUJBQS9CNzFELEVBQVErMUQsbUJBQWtDLzFELEVBQVErMUQsbUJBQXFCLzFELEVBQVEyMUQscUJBQXNCMzFELEVBQVE4MUQsb0JBRS9NOTFELEVBQVFnMkQsb0JBQXdCaDJELEVBQVFnMkQscUJBQThELGlCQUFoQ2gyRCxFQUFRZzJELG9CQUEyQ2gyRCxFQUFRZzJELG9CQUFmLEtBQ2xIaDJELEVBQVFpMkQsb0JBQXdCajJELEVBQVFpMkQscUJBQThELGlCQUFoQ2oyRCxFQUFRaTJELG9CQUEyQ2oyRCxFQUFRaTJELG9CQUFmLEtBRWxIajJELEVBQVF2RCxLQUFPdUQsRUFBUXZELE1BQVEsVUFDL0J1RCxFQUFRMHRCLE1BQVExdEIsRUFBUTB0QixJQUN4QjF0QixFQUFRazJELGNBQWdCLENBQUMsTUFBTTM5QyxPQUFRdlksRUFBUWsyRCxlQUFrRCxpQkFBMUJsMkQsRUFBUWsyRCxjQUE2QmwyRCxFQUFRazJELGNBQWMvcUQsY0FBY3JGLE1BQU0sS0FBTyxJQUM3SjlGLEVBQVF1dUQsZUFBaUIsdUJBQXlCdnVELEVBQVEwdEIsSUFBTSxVQUFZLElBQzVFMXRCLEVBQVFtMkQsWUFBNkMsaUJBQXhCbjJELEVBQVFtMkQsWUFBMkJuMkQsRUFBUW0yRCxZQUFjLEtBQ3RGbjJELEVBQVFnMEQsYUFBZWgwRCxFQUFRZzBELGFBQWdCNzFELEVBQUsrK0IsU0FBU2w5QixFQUFRZzBELGNBQWdCaDBELEVBQVFnMEQsYUFBZSxLQUFPaDBELEVBQVFnMEQsYUFBZ0IsT0FDM0loMEQsRUFBUTR3RCxpQkFBdUQsaUJBQTdCNXdELEVBQVE0d0QsaUJBQWdDbHdELFNBQVNxQixjQUFjL0IsRUFBUTR3RCxrQkFBb0I1d0QsRUFBUTR3RCxpQkFDckk1d0QsRUFBUW8yRCxjQUFpQixXQUFXaDNELEtBQUtZLEVBQVF2RCxPQUFXdUQsRUFBUTR3RCxrQkFBcUIsT0FBOEJ5RixJQUExQnIyRCxFQUFRbzJELGNBQThCLEVBQUssT0FBT2gzRCxLQUFLWSxFQUFRbzJELGVBQWlCajRELEVBQUtzZ0MsVUFBVXorQixFQUFRbzJELGNBQWUsSUFBTSxFQUN6TnAyRCxFQUFRczJELGNBQWdCdDJELEVBQVFzMkQsWUFDaEN0MkQsRUFBUXUyRCxzQkFBZ0RGLElBQTdCcjJELEVBQVF1MkQsaUJBQWlDLEVBQUssT0FBT24zRCxLQUFLWSxFQUFRdTJELGtCQUFvQnA0RCxFQUFLc2dDLFVBQVV6K0IsRUFBUXUyRCxpQkFBa0IsR0FBSyxFQUMvSnYyRCxFQUFRdzJELFdBQWF4MkQsRUFBUXcyRCxTQUM3QngyRCxFQUFRb2tELE9BQVNwa0QsRUFBUXcyRCxZQUFjeDJELEVBQVFva0QsT0FDL0Nwa0QsRUFBUWswRCxpQkFBbUJsMEQsRUFBUWswRCxrQkFBb0IsR0FDdkRsMEQsRUFBUXl1RCxrQkFBb0J6dUQsRUFBUW9rRCxPQUE4QyxpQkFBOUJwa0QsRUFBUXl1RCxrQkFBaUMsQ0FBQ3p1RCxFQUFReXVELG1CQUFzQnp1RCxFQUFReXVELG1CQUFxQixDQUFDLGFBQWdCLEtBQzFLenVELEVBQVF5MkQsZ0JBQXFELGlCQUE1QnoyRCxFQUFReTJELGdCQUErQnoyRCxFQUFReTJELGdCQUFrQixLQUNsR3oyRCxFQUFRMDJELGNBQWlELGlCQUExQjEyRCxFQUFRMDJELGNBQTZCMTJELEVBQVEwMkQsY0FBZ0IsS0FFNUYxMkQsRUFBUXN5RCxXQUFhdHlELEVBQVFzeUQsV0FBYXR5RCxFQUFRc3lELFdBQVdwL0MsSUFBTWxULEVBQVFzeUQsV0FBYSxDQUFDcC9DLElBQUtsVCxFQUFRc3lELFlBQWMsS0FFcEh0eUQsRUFBUStuQyxNQUFRL25DLEVBQVErbkMsTUFBUS9uQyxFQUFRK25DLE1BQU03MEIsSUFBTWxULEVBQVErbkMsTUFBUSxDQUFDNzBCLElBQUtsVCxFQUFRK25DLE9BQVMsS0FDM0YvbkMsRUFBUTJuQyxhQUFpQjNuQyxFQUFRMm5DLGFBQWUzbkMsRUFBUTJuQyxhQUFlLENBQ25FLENBQUNoNkIsS0FBTSxJQUFLcFIsTUFBTyxPQUNuQixDQUFDb1IsS0FBTSxNQUFPcFIsTUFBTyxTQUNyQixDQUFDb1IsS0FBTSxJQUFLcFIsTUFBTyxPQUNuQixDQUFDb1IsS0FBTSxNQUFPcFIsTUFBTyxVQUd6QnlELEVBQVFFLFNBQXVDLGlCQUFyQkYsRUFBUUUsU0FBd0JGLEVBQVFFLFNBQVcsS0FDN0VGLEVBQVF4QixRQUFVd0IsRUFBUXhCLFVBQXNDLFNBQTFCUyxFQUFRVixNQUFNQyxTQUF1QlMsRUFBUVYsTUFBTUMsUUFBb0JTLEVBQVFWLE1BQU1DLFFBQXhCLFNBQ25Hd0IsRUFBUUMsYUFBZUQsRUFBUUMsY0FBZ0IsT0FFL0NELEVBQVErdkQsaUJBQXNDc0csSUFBeEJyMkQsRUFBUSt2RCxhQUE2QixrQkFBa0Izd0QsS0FBS1ksRUFBUXZELE1BQXdCdUQsRUFBUSt2RCxZQUMxSC92RCxFQUFRMjJELGdCQUFpQjMyRCxFQUFRK3ZELGNBQXVELGtCQUExQi92RCxFQUFRMjJELGVBQThCMzJELEVBQVEyMkQsZUFDNUczMkQsRUFBUTQyRCxrQkFBd0NQLElBQXpCcjJELEVBQVE0MkQsZ0JBQXNDNTJELEVBQVE0MkQsYUFDN0U1MkQsRUFBUTZ3RCxxQkFBK0QsaUJBQWpDN3dELEVBQVE2d0QscUJBQW9DbndELFNBQVNxQixjQUFjL0IsRUFBUTZ3RCxzQkFBd0I3d0QsRUFBUTZ3RCxxQkFFako3d0QsRUFBUW93RCxZQUFjcHdELEVBQVFzMEQsYUFBZSxHQUEwQyxrQkFBeEJ0MEQsRUFBUW93RCxhQUE0QnB3RCxFQUFRb3dELFlBQzNHcHdELEVBQVE2MkQsZ0JBQXFELGlCQUE1QjcyRCxFQUFRNjJELGdCQUErQjcyRCxFQUFRNjJELGdCQUFrQixPQUNsRzcyRCxFQUFRbzBELGlCQUF1RCxpQkFBN0JwMEQsRUFBUW8wRCxpQkFBZ0NwMEQsRUFBUW8wRCxpQkFBaUJudUQsT0FBUyxLQUM1R2pHLEVBQVFzMEQsYUFBZW4yRCxFQUFLKytCLFNBQVNsOUIsRUFBUXMwRCxlQUFpQnQwRCxFQUFRczBELGNBQWdCLEVBQTJCLEVBQXZCdDBELEVBQVFzMEQsYUFBbUIsS0FFckh0MEQsRUFBUStaLE1BQVEvWixFQUFRK1osTUFBUzViLEVBQUsrK0IsU0FBU2w5QixFQUFRK1osT0FBUy9aLEVBQVErWixNQUFRLEtBQU8vWixFQUFRK1osTUFBVTlhLEVBQVE2M0QsWUFBYzczRCxFQUFRNjNELFlBQWMsS0FBTyxPQUM1SjkyRCxFQUFRNi9CLFVBQVkxaEMsRUFBSysrQixTQUFTbDlCLEVBQVE2L0IsVUFBWTcvQixFQUFRNi9CLFNBQVcsS0FBTzcvQixFQUFRNi9CLFdBQWEsR0FDckc3L0IsRUFBUXcvQixVQUFZcmhDLEVBQUsrK0IsU0FBU2w5QixFQUFRdy9CLFVBQVl4L0IsRUFBUXcvQixTQUFXLEtBQU94L0IsRUFBUXcvQixXQUFhLEdBRXJHeC9CLEVBQVFnYSxPQUFTaGEsRUFBUWdhLE9BQVU3YixFQUFLKytCLFNBQVNsOUIsRUFBUWdhLFFBQVVoYSxFQUFRZ2EsT0FBUyxLQUFPaGEsRUFBUWdhLE9BQVcvYSxFQUFRODNELGFBQWU5M0QsRUFBUTgzRCxhQUFlLEtBQU8sT0FDbksvMkQsRUFBUWl1RCxXQUFhOXZELEVBQUsrK0IsU0FBU2w5QixFQUFRaXVELFdBQWFqdUQsRUFBUWl1RCxVQUFZLEtBQU9qdUQsRUFBUWl1RCxZQUFjLEdBQ3pHanVELEVBQVE0RSxXQUFhekcsRUFBSysrQixTQUFTbDlCLEVBQVE0RSxXQUFhNUUsRUFBUTRFLFVBQVksS0FBTzVFLEVBQVE0RSxZQUFjLEdBRXpHNUUsRUFBUTNCLFVBQTBDLGlCQUF0QjJCLEVBQVEzQixXQUEwQjJCLEVBQVEzQixVQUFVMEYsT0FBUyxFQUFLLElBQU0vRCxFQUFRM0IsVUFBWSxHQUN4SDJCLEVBQVErK0MsYUFBK0MsaUJBQXpCLytDLEVBQVErK0MsYUFBNEIvK0MsRUFBUSsrQyxhQUFlLEdBRXpGLytDLEVBQVFpZixLQUFRamYsRUFBUWlmLEtBQTZHamYsRUFBUWlmLEtBQTlHLENBQUMsUUFBUyxnQkFBaUIsY0FBZSxTQUFVLFVBQVcsU0FBVSxlQUFnQixXQUN4SGpmLEVBQVFtZixTQUFZbmYsRUFBUW1mLFNBQWtCbmYsRUFBUW1mLFNBQWYsS0FDdkNuZixFQUFRa2YsUUFBV2xmLEVBQVFrZixRQUFpQmxmLEVBQVFrZixRQUFmLEtBQ3JDbGYsRUFBUW1tQixVQUFhbm1CLEVBQVFtbUIsVUFBbUJubUIsRUFBUW1tQixVQUFmLEtBQ3pDbm1CLEVBQVF3K0MsWUFBZXgrQyxFQUFRdytDLFlBQXFCeCtDLEVBQVF3K0MsWUFBZixLQUM3Q3grQyxFQUFROCtDLGdCQUFtQjkrQyxFQUFROCtDLGdCQUF5QjkrQyxFQUFROCtDLGdCQUFmLEtBQ3JEOStDLEVBQVFtL0MsV0FBY24vQyxFQUFRbS9DLFdBQW9Cbi9DLEVBQVFtL0MsV0FBZixLQUMzQ24vQyxFQUFRb3NDLGFBQStDLGlCQUF6QnBzQyxFQUFRb3NDLGNBQTZCcHNDLEVBQVFvc0MsYUFBYW5tQyxPQUFPa0YsZUFBeUIsS0FDeEhuTCxFQUFRb3FDLFdBQTJDLGlCQUF2QnBxQyxFQUFRb3FDLFdBQTBCcHFDLEVBQVFvcUMsV0FBY3BxQyxFQUFRMHRCLElBQU0sQ0FBQyxRQUFTLFNBQVUsT0FBUSxXQUFhLENBQUMsT0FBUSxTQUFVLFFBQVMsV0FFdksxdEIsRUFBUWswQixtQkFBMENtaUMsSUFBMUJyMkQsRUFBUWswQixlQUFxQ2wwQixFQUFRazBCLGNBQzdFbDBCLEVBQVFvMEIscUJBQThDaWlDLElBQTVCcjJELEVBQVFvMEIsbUJBQXlDcDBCLEVBQVFvMEIsZ0JBQ25GcDBCLEVBQVF3MEIsb0JBQTRDNmhDLElBQTNCcjJELEVBQVF3MEIsa0JBQXdDeDBCLEVBQVF3MEIsZUFDakZ4MEIsRUFBUTZ6QixXQUFjN3pCLEVBQVE2ekIsV0FBc0IxMUIsRUFBSysrQixTQUFTbDlCLEVBQVE2ekIsWUFBYzd6QixFQUFRNnpCLFdBQWEsS0FBTzd6QixFQUFRNnpCLFdBQWpGLE9BQzNDN3pCLEVBQVErekIsWUFBZS96QixFQUFRK3pCLFlBQXVCNTFCLEVBQUsrK0IsU0FBU2w5QixFQUFRK3pCLGFBQWUvekIsRUFBUSt6QixZQUFjLEtBQU8vekIsRUFBUSt6QixZQUFuRixPQUM3Qy96QixFQUFRMDBCLDBCQUE0QjEwQixFQUFRMDBCLHdCQUM1QzEwQixFQUFRd3lCLGVBQWlCeHlCLEVBQVEwMEIsd0JBQTBCLElBQU0sS0FDakUxMEIsRUFBUXMwQixtQkFBMEMraEMsSUFBMUJyMkQsRUFBUXMwQixjQUE4QnQwQixFQUFRczBCLGdCQUFrQnQwQixFQUFRMDBCLDBCQUE0QjEwQixFQUFRbzBCLGlCQUNwSXAwQixFQUFRKzFCLG9CQUE0Q3NnQyxJQUEzQnIyRCxFQUFRKzFCLGdCQUFzQy8xQixFQUFRKzFCLGVBQy9FLzFCLEVBQVFrMkIsbUJBQTJDbWdDLElBQTFCcjJELEVBQVFrMkIsZ0JBQWdDbDJCLEVBQVErMUIsZ0JBQXlCLzFCLEVBQVFrMkIsY0FDMUdsMkIsRUFBUTg1QixrQkFBb0I5NUIsRUFBUTg1QixtQkFBcUIsS0FDekQ5NUIsRUFBUTA1QixlQUFtRCxpQkFBM0IxNUIsRUFBUTA1QixlQUE4QjE1QixFQUFRMDVCLGVBQWlCLEtBQy9GMTVCLEVBQVE2NEIscUJBQXVCLE1BQU16NUIsS0FBS1ksRUFBUTY0QixzQkFBd0IxNkIsRUFBS3NnQyxVQUFVeitCLEVBQVE2NEIscUJBQXNCLEdBQUssS0FDNUg3NEIsRUFBUWkyQixvQkFBc0JqMkIsRUFBUWkyQixrQkFDdENqMkIsRUFBUWcyQixZQUE4QyxpQkFBeEJoMkIsRUFBUWcyQixhQUEyRCxNQUEvQmgyQixFQUFRZzJCLFlBQVkvdkIsT0FBa0IsVUFBWWpHLEVBQVFnMkIsWUFBWS92QixRQUFVLFVBRWxKakcsRUFBUW0yQixnQkFBcUQsaUJBQTVCbjJCLEVBQVFtMkIsZ0JBQStCbjJCLEVBQVFtMkIsZ0JBQWtCLEtBQ2xHbjJCLEVBQVEwL0MsbUJBQXFCMS9DLEVBQVEwL0Msb0JBQXNCLEtBRTNEMS9DLEVBQVF1Z0MsbUJBQTBDODFCLElBQTFCcjJELEVBQVF1Z0MsZUFBcUN2Z0MsRUFBUXVnQyxjQUM3RXZnQyxFQUFRd2dDLHFCQUE4QzYxQixJQUE1QnIyRCxFQUFRd2dDLG1CQUF5Q3hnQyxFQUFRd2dDLGdCQUNuRnhnQyxFQUFRMGdDLG9CQUE0QzIxQixJQUEzQnIyRCxFQUFRMGdDLGtCQUF3QzFnQyxFQUFRMGdDLGVBQ2pGMWdDLEVBQVF3aEMsb0JBQTRDNjBCLElBQTNCcjJELEVBQVF3aEMsa0JBQXdDeGhDLEVBQVF3aEMsZUFDakZ4aEMsRUFBUXFnQyxXQUFjcmdDLEVBQVFxZ0MsWUFBZWxpQyxFQUFLc2dDLFVBQVV6K0IsRUFBUXFnQyxXQUFZLEdBQVVsaUMsRUFBSysrQixTQUFTbDlCLEVBQVFxZ0MsWUFBY3JnQyxFQUFRcWdDLFdBQWEsS0FBT3JnQyxFQUFRcWdDLFdBQTdFLEdBQ3JGcmdDLEVBQVFzZ0MsWUFBZXRnQyxFQUFRc2dDLGFBQWdCbmlDLEVBQUtzZ0MsVUFBVXorQixFQUFRc2dDLFlBQWEsR0FBVW5pQyxFQUFLKytCLFNBQVNsOUIsRUFBUXNnQyxhQUFldGdDLEVBQVFzZ0MsWUFBYyxLQUFPdGdDLEVBQVFzZ0MsWUFBL0UsR0FDeEZ0Z0MsRUFBUTJnQywwQkFBNEIzZ0MsRUFBUTJnQyx3QkFDNUMzZ0MsRUFBUSsvQixlQUFpQi8vQixFQUFRMmdDLHdCQUEwQixJQUFNLEtBQ2pFM2dDLEVBQVF5Z0MsbUJBQTBDNDFCLElBQTFCcjJELEVBQVF5Z0MsY0FBOEJ6Z0MsRUFBUXlnQyxnQkFBa0J6Z0MsRUFBUTJnQywwQkFBNEIzZ0MsRUFBUXdnQyxpQkFDcEl4Z0MsRUFBUW1nQyxXQUFjaGlDLEVBQUtzZ0MsVUFBVXorQixFQUFRbWdDLFdBQVksSUFBTSxNQUMvRG5nQyxFQUFRc2hDLGVBQWtCdGhDLEVBQVFzaEMsZUFBd0J0aEMsRUFBUXNoQyxlQUFmLEtBQ25EdGhDLEVBQVFpZ0MsY0FBZ0JqZ0MsRUFBUWlnQyxjQUFnQixJQUFJeDBCLFFBQVEsSUFBSyxJQUNqRXpMLEVBQVFpaEMsaUJBQW1CamhDLEVBQVFpaEMsZUFDbkNqaEMsRUFBUW9oQyxtQkFBMkNpMUIsSUFBMUJyMkQsRUFBUW9oQyxnQkFBZ0NwaEMsRUFBUWloQyxnQkFBeUJqaEMsRUFBUW9oQyxjQUMxR3BoQyxFQUFRbWpDLGtCQUFvQm5qQyxFQUFRbWpDLG1CQUFxQixLQUN6RG5qQyxFQUFRa2pDLGVBQW1ELGlCQUEzQmxqQyxFQUFRa2pDLGVBQThCbGpDLEVBQVFrakMsZUFBaUIsS0FDL0ZsakMsRUFBUThpQyxxQkFBdUIsTUFBTTFqQyxLQUFLWSxFQUFROGlDLHNCQUF3QjNrQyxFQUFLc2dDLFVBQVV6K0IsRUFBUThpQyxxQkFBc0IsR0FBSyxLQUM1SDlpQyxFQUFRbWhDLG9CQUFzQm5oQyxFQUFRbWhDLGtCQUN0Q25oQyxFQUFRNGhDLGNBQWdCNWhDLEVBQVE0aEMsZUFBaUIsS0FDakQ1aEMsRUFBUW1pQyxpQkFBbUJuaUMsRUFBUW1pQyxrQkFBb0IsS0FDdkRuaUMsRUFBUWtoQyxZQUE4QyxpQkFBeEJsaEMsRUFBUWtoQyxhQUEyRCxNQUEvQmxoQyxFQUFRa2hDLFlBQVlqN0IsT0FBa0IsVUFBWWpHLEVBQVFraEMsWUFBWWo3QixRQUFVLFVBRWxKakcsRUFBUStrQyxXQUFjL2tDLEVBQVEra0MsV0FBa0I1bUMsRUFBSysrQixTQUFTbDlCLEVBQVEra0MsWUFBYy9rQyxFQUFRK2tDLFdBQWEsS0FBTy9rQyxFQUFRK2tDLFdBQTdFLEdBQzNDL2tDLEVBQVFnbEMsWUFBZWhsQyxFQUFRZ2xDLFlBQW1CN21DLEVBQUsrK0IsU0FBU2w5QixFQUFRZ2xDLGFBQWVobEMsRUFBUWdsQyxZQUFjLEtBQU9obEMsRUFBUWdsQyxZQUEvRSxHQUM3Q2hsQyxFQUFRdWxDLGlCQUFtQnZsQyxFQUFRdWxDLGVBQ25DdmxDLEVBQVEwbEMsbUJBQTJDMndCLElBQTFCcjJELEVBQVEwbEMsZ0JBQWdDMWxDLEVBQVF1bEMsZ0JBQXlCdmxDLEVBQVEwbEMsY0FDMUcxbEMsRUFBUXltQyxrQkFBb0J6bUMsRUFBUXltQyxtQkFBcUIsS0FDekR6bUMsRUFBUXdtQyxlQUFtRCxpQkFBM0J4bUMsRUFBUXdtQyxlQUE4QnhtQyxFQUFRd21DLGVBQWlCLEtBQy9GeG1DLEVBQVFvbUMscUJBQXVCLE1BQU1obkMsS0FBS1ksRUFBUW9tQyxzQkFBd0Jqb0MsRUFBS3NnQyxVQUFVeitCLEVBQVFvbUMscUJBQXNCLEdBQUssS0FDNUhwbUMsRUFBUXlsQyxvQkFBc0J6bEMsRUFBUXlsQyxrQkFDdEN6bEMsRUFBUThsQyxjQUFnQjlsQyxFQUFROGxDLGVBQWlCLEtBQ2pEOWxDLEVBQVF3bEMsWUFBOEMsaUJBQXhCeGxDLEVBQVF3bEMsYUFBMkQsTUFBL0J4bEMsRUFBUXdsQyxZQUFZdi9CLE9BQWtCLFVBQVlqRyxFQUFRd2xDLFlBQVl2L0IsUUFBVSxVQUVsSmpHLEVBQVEreUMsNEJBQTZFLGlCQUF4Qy95QyxFQUFRK3lDLDRCQUEyQy95QyxFQUFRK3lDLDRCQUE0QjVuQyxjQUFnQixPQUVwSm5MLEVBQVFrdEIsc0JBQXdCbHRCLEVBQVFrdEIsb0JBQ3hDbHRCLEVBQVFpdkIsYUFBK0MsaUJBQXpCanZCLEVBQVFpdkIsYUFBNEJqdkIsRUFBUWl2QixhQUFlLEtBQ3pGanZCLEVBQVFnckIsUUFBVTNkLE1BQU10QyxRQUFRL0ssRUFBUWdyQixTQUFXaHJCLEVBQVFnckIsUUFBVSxHQUNyRWhyQixFQUFRa3JCLGVBQWlCbHJCLEVBQVFrckIsZ0JBQWtCLEdBSW5EbHJCLEVBQVFnM0QsYUFBZWgzRCxFQUFRZzNELFdBQy9CaDNELEVBQVFpM0QsaUJBQW1CNXBELE1BQU10QyxRQUFRL0ssRUFBUWkzRCxrQkFBb0JqM0QsRUFBUWkzRCxpQkFBbUIsR0FDaEdqM0QsRUFBUWszRCxtQkFBMENiLElBQTFCcjJELEVBQVFrM0QsaUJBQXVDbDNELEVBQVFrM0QsY0FFL0VsM0QsRUFBUW0zRCxhQUFnQm4zRCxFQUFRbTNELGFBQXNCbjNELEVBQVFtM0QsYUFBZixLQUUvQ24zRCxFQUFRbXBCLFVBQWFucEIsRUFBUW1wQixVQUFtQm5wQixFQUFRbXBCLFVBQWYsS0FFekNucEIsRUFBUTJpQyxZQUE2QyxpQkFBeEIzaUMsRUFBUTJpQyxZQUEyQjNpQyxFQUFRMmlDLFlBQWMsS0FDdEYzaUMsRUFBUTA4QixxQkFBOEMyNUIsSUFBNUJyMkQsRUFBUTA4QixtQkFBeUMxOEIsRUFBUTA4QixnQkFFbkYxOEIsRUFBUThwRCxXQUFlOXBELEVBQVE4cEQsV0FBYTlwRCxFQUFROHBELFdBQWEsQ0FDN0QsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxPQUFRLFlBQWEsU0FBVSxTQUFVLFlBQWEsZUFDdkQsQ0FBQyxnQkFDRCxDQUFDLFVBQVcsVUFDWixDQUFDLGFBQWMsYUFBYyxZQUM3QixDQUFDLFVBQVcsVUFJWjlwRCxFQUFRMHRCLE1BQ1IxdEIsRUFBUThwRCxXQUFhOXBELEVBQVE4cEQsV0FBV2pELFdBSzVDN21ELEVBQVF1QyxNQUFVdkMsRUFBUXVDLE9BQWtDLGlCQUFsQnZDLEVBQVF1QyxNQUErQixDQUFDNjBELEVBQVFwM0QsRUFBUXVDLE9BQU9vd0QsUUFBTyxTQUFVeUMsRUFBVUMsR0FDaEksSUFBSyxJQUFJeDRELEtBQU93NEQsRUFDUmwzRCxFQUFLMGpDLE9BQU93ekIsRUFBTXg0RCxLQUFNdTRELEVBQVN2NEQsR0FBT3c0RCxFQUFLeDRELElBRXJELE9BQU91NEQsSUFDUixJQUxxRWdDLEVBT3hFcDNELEVBQVF1QyxNQUFTdkMsRUFBUTB0QixJQUFzQixDQUFDMXRCLEVBQVF1QyxNQUFPdkMsRUFBUXVDLE1BQU1tckIsS0FBS2lsQyxRQUFPLFNBQVV5QyxFQUFVQyxHQUN6RyxJQUFLLElBQUl4NEQsS0FBT3c0RCxFQUNSbDNELEVBQUswakMsT0FBT3d6QixFQUFNeDRELEtBQU11NEQsRUFBU3Y0RCxHQUFPdzRELEVBQUt4NEQsSUFFckQsT0FBT3U0RCxJQUNSLElBTDRCcDFELEVBQVF1QyxNQVF2Q3ZDLEVBQVFxM0Qsa0JBQW9CcjNELEVBQVFxM0QsbUJBQXFCLENBQUMsV0FBWSxRQUFTLGFBQWMsYUFBYyxhQUczR3IzRCxFQUFRK3pELGNBQWdCNTFELEVBQUs0dkQsdUJBQXVCL3RELEVBQVNBLEVBQVErK0MsZUFHekU4VyxjQUFlLFNBQVV5QixFQUFXdFIsR0FDaEMsR0FBeUIsaUJBQWRBLEVBQXdCLE9BQU9zUixFQUMxQ3RSLEVBQVlBLEVBQVVsZ0QsTUFBTSxLQUM1Qnd4RCxFQUFZQSxFQUFVeHhELE1BQU0sS0FDNUIsSUFBSyxJQUFtQ2dKLEVBQS9CeFQsRUFBSSxFQUFHNEosRUFBTThnRCxFQUFVamlELE9BQWV6SSxFQUFJNEosRUFBSzVKLElBQ3BEd1QsRUFBUXdvRCxFQUFVbnhELFFBQVE2L0MsRUFBVTFxRCxJQUNoQ3dULEdBQVMsR0FBR3dvRCxFQUFVNXdELE9BQU9vSSxFQUFPLEdBRTVDLE9BQU93b0QsRUFBVTVuRCxLQUFLLE1BUTFCNm5ELGdCQUFpQixTQUFVdjNELEdBQ3ZCLE1BQU11QyxFQUFRdkMsRUFBUXVDLE1BQ2hCRixFQUFPckMsRUFBUXFDLEtBQ2YyckIsRUFBTTd2QixFQUFLdWpELFVBQVksSUFBTSxPQUM3QjhWLEVBQVdyNUQsRUFBS3VqRCxVQUFZLElBQU0sU0FDbEN1VixFQUFvQmozRCxFQUFRazNELGNBQXNGbDNELEVBQVFpM0QsaUJBQTlFLENBQUMsT0FBUSxTQUFVLFlBQWEsU0FBVSxPQUFRLFNBQVUsUUFDeEdRLEVBQVl6M0QsRUFBUTB0QixJQUFNLENBQUMsSUFBSSxLQUFPLENBQUMsSUFBSSxLQUMzQ2dxQyxFQUFhMTNELEVBQVEwdEIsSUFBTSxDQUFDbnJCLEVBQU1zZCxRQUFTdGQsRUFBTXFkLFFBQVUsQ0FBQ3JkLEVBQU1xZCxPQUFRcmQsRUFBTXNkLFNBRXRGLE1BQU8sQ0FFSFQsS0FBTSxDQUFDLEdBQUkvYyxFQUFLeWMsUUFBUU0sS0FBTyw4QkFBZ0M2M0MsRUFBaUI5d0QsUUFBUSxTQUFXLEVBQUksR0FBSzZuQixFQUFNLDJDQUE2QyxVQUFXLE9BQVEsR0FBSXpyQixFQUFNNmMsTUFDNUwvVixVQUFXLENBQUMsR0FBSWhILEVBQUt5YyxRQUFRelYsVUFBWSw4QkFBZ0M0dEQsRUFBaUI5d0QsUUFBUSxjQUFnQixFQUFJLEdBQUs2bkIsRUFBTSwyQ0FBNkMsVUFBVyxZQUFhLEdBQUl6ckIsRUFBTThHLFdBQ2hOZ1csT0FBUSxDQUFDLEdBQUloZCxFQUFLeWMsUUFBUU8sT0FBUyw4QkFBZ0M0M0MsRUFBaUI5d0QsUUFBUSxXQUFhLEVBQUksR0FBSzZuQixFQUFNLDJDQUE2QyxVQUFXLFNBQVUsR0FBSXpyQixFQUFNOGMsUUFDcE1DLE9BQVEsQ0FBQyxHQUFJamQsRUFBS3ljLFFBQVFRLE9BQVMsOEJBQWdDMjNDLEVBQWlCOXdELFFBQVEsV0FBYSxFQUFJLEdBQUs2bkIsRUFBTXdwQyxFQUFXLDJDQUE2QyxVQUFXLFNBQVUsR0FBSWoxRCxFQUFNK2MsUUFDL01DLFVBQVcsQ0FBQyxHQUFJbGQsRUFBS3ljLFFBQVFTLFVBQVcsTUFBTyxHQUFJaGQsRUFBTWdkLFdBQ3pEQyxZQUFhLENBQUMsR0FBSW5kLEVBQUt5YyxRQUFRVSxZQUFhLE1BQU8sR0FBSWpkLEVBQU1pZCxhQUM3REMsYUFBYyxDQUFDLEdBQUlwZCxFQUFLeWMsUUFBUVcsYUFBYyxlQUFnQixHQUFJbGQsRUFBTStqQixPQUN4RTFHLE9BQVEsQ0FBQyxHQUFJdmQsRUFBS3ljLFFBQVFjLE9BQVMsOEJBQWdDcTNDLEVBQWlCOXdELFFBQVEsV0FBYSxFQUFJLEdBQUs2bkIsRUFBTSxrQ0FBb0N5cEMsRUFBVSxHQUFLLFdBQWEsVUFBVyxTQUFVLEdBQUlDLEVBQVcsSUFDNU43M0MsUUFBUyxDQUFDLEdBQUl4ZCxFQUFLeWMsUUFBUWUsUUFBVSw4QkFBZ0NvM0MsRUFBaUI5d0QsUUFBUSxXQUFhLEVBQUksR0FBSzZuQixFQUFNLGtDQUFvQ3lwQyxFQUFVLEdBQUssV0FBYSxVQUFXLFVBQVcsR0FBSUMsRUFBVyxJQUMvTjUyQyxXQUFZLENBQUMsMkNBQTRDemUsRUFBS3ljLFFBQVFnQyxXQUFZLGFBQWMsR0FBSXZlLEVBQU13eEMsV0FDMUdoekIsV0FBWSxDQUFDLEdBQUkxZSxFQUFLeWMsUUFBUWlDLFdBQVksYUFBYyxHQUFJeGUsRUFBTWkrQyxhQUNsRXgvQixTQUFVLENBQUMsMkNBQTRDM2UsRUFBS3ljLFFBQVFrQyxTQUFVLFdBQVksR0FBSXplLEVBQU15OUMsV0FDcEcvK0IsS0FBTSxDQUFDLEdBQUk1ZSxFQUFLeWMsUUFBUW1DLEtBQU8sOEJBQWdDZzJDLEVBQWlCOXdELFFBQVEsU0FBVyxFQUFJLEdBQUs2bkIsRUFBTSwyQ0FBNkMsVUFBVyxPQUFRLEdBQUl6ckIsRUFBTTBlLE1BQzVMQyxLQUFNLENBQUMsR0FBSTdlLEVBQUt5YyxRQUFRb0MsS0FBTyw4QkFBZ0MrMUMsRUFBaUI5d0QsUUFBUSxTQUFXLEVBQUksR0FBSzZuQixFQUFNLDZDQUErQ0EsRUFBTXdwQyxFQUFXLDJDQUE2QyxVQUFXLE9BQVEsR0FBSWoxRCxFQUFNMmUsTUFDNVBDLFFBQVMsQ0FBQyxzQkFBdUI5ZSxFQUFLeWMsUUFBUXFDLFFBQVMsVUFBVyxHQUFJNWUsRUFBTTRlLFNBQzVFQyxNQUFPLENBQUMsc0JBQXVCL2UsRUFBS3ljLFFBQVFzQyxNQUFPLFFBQVMsR0FBSTdlLEVBQU02ZSxPQUN0RXdwQixJQUFLLENBQUMsR0FBSXZvQyxFQUFLeWMsUUFBUTllLEVBQVEwdEIsSUFBTSxVQUFZLFdBQVksTUFBTyxHQUFLbnJCLEVBQU12QyxFQUFRMHRCLElBQU0sVUFBWSxZQUN6RzNMLFFBQVMsQ0FBQyxHQUFJMWYsRUFBS3ljLFFBQVFpRCxRQUFTLFVBQVcsR0FBS3hmLEVBQU13ZixTQUMxREMsUUFBUyxDQUFDLEdBQUkzZixFQUFLeWMsUUFBUWtELFFBQVMsVUFBVyxHQUFLemYsRUFBTXlmLFNBQzFEaEQsS0FBTSxDQUFDLHNCQUF1QjNjLEVBQUt5YyxRQUFRRSxLQUFPLDhCQUFnQ2k0QyxFQUFpQjl3RCxRQUFRLFNBQVcsRUFBSSxHQUFLNm5CLEVBQU0sMkNBQTZDLFVBQVcsT0FBUSxHQUFJenJCLEVBQU15YyxNQUUvTW9xQixXQUFZLENBQUMsR0FBSS9tQyxFQUFLeWMsUUFBUTBDLGVBQWdCLGFBQWMsVUFBV2pmLEVBQU02bUMsWUFFN0VucUIsS0FBTSxDQUFDLGlDQUFrQzVjLEVBQUt5YyxRQUFRRyxLQUFNLE9BQVEsVUFBVyxxQkFBdUI1YyxFQUFLeWMsUUFBUUcsS0FBTyxVQUFZMWMsRUFBTTY5QyxZQUM1SWhELFlBQWEsQ0FBQyxtQ0FBb0MvNkMsRUFBS3ljLFFBQVFJLFFBQVMsY0FBZSxVQUFXLHFCQUF1QjdjLEVBQUt5YyxRQUFRSSxRQUFVLFVBQVkzYyxFQUFNNjlDLFlBQ2xLamhDLFNBQVUsQ0FBQyxpQ0FBa0M5YyxFQUFLeWMsUUFBUUssU0FBVSxXQUFZLFVBQVcscUJBQXVCOWMsRUFBS3ljLFFBQVFLLFNBQVcsVUFBWTVjLEVBQU02OUMsWUFDNUoxZ0MsVUFBVyxDQUFDLEdBQUlyZCxFQUFLeWMsUUFBUVksVUFBVyxZQUFhLFVBQVduZCxFQUFNODlDLFlBQ3RFMWdDLFlBQWEsQ0FBQyxHQUFJdGQsRUFBS3ljLFFBQVFhLFlBQWEsY0FBZSxVQUFXcGQsRUFBTSs5QyxpQkFDNUV4Z0MsTUFBTyxDQUFDLGVBQWdCemQsRUFBS3ljLFFBQVFnQixNQUFPLFFBQVMsVUFBWTlmLEVBQVEwdEIsSUFBTW5yQixFQUFNMG5DLFlBQWMxbkMsRUFBTXluQyxZQUN6RzVvQyxLQUFNLENBQUMsR0FBSWlCLEVBQUt5YyxRQUFRMWQsS0FBTSxPQUFRLFVBQVdtQixFQUFNNHFDLGFBQ3ZEOXNCLGVBQWdCLENBQUMsV0FBWWhlLEVBQUt5YyxRQUFRdUIsZUFBZ0IsaUJBQWtCLFVBQVc5ZCxFQUFNZytDLGlCQUM3RjkvQixNQUFPLENBQUMsR0FBSXBlLEVBQUt5YyxRQUFRMkIsTUFBTyxRQUFTLFVBQVdsZSxFQUFNa2UsT0FDMURrQixXQUFZLENBQUMsR0FBSXRmLEVBQUt5YyxRQUFRNkMsV0FBWSxhQUFjLFVBQVdwZixFQUFNMDlDLGFBQ3pFditCLFNBQVUsQ0FBQyxHQUFJcmYsRUFBS3ljLFFBQVE0QyxTQUFVLFdBQVksVUFBV25mLEVBQU1tZixVQUNuRUUsZUFBZ0IsQ0FBQyxHQUFJdmYsRUFBS3ljLFFBQVE4QyxlQUFnQixpQkFBa0IsVUFBV3JmLEVBQU0yOUMsaUJBQ3JGcitCLFVBQVcsQ0FBQyxHQUFJeGYsRUFBS3ljLFFBQVErQyxVQUFXLFlBQWEsVUFBV3RmLEVBQU00OUMsWUFFdEU5cEMsS0FBTSxDQUFDLEdBQUloVSxFQUFLeWMsUUFBUXpJLEtBQU0sT0FBUSxTQUFVOVQsRUFBTThULE1BQ3REc0ssTUFBTyxDQUFDLEdBQUl0ZSxFQUFLeWMsUUFBUTZCLE1BQU8sUUFBUyxTQUFVcGUsRUFBTW9lLE9BQ3pEQyxNQUFPLENBQUMsR0FBSXZlLEVBQUt5YyxRQUFROEIsTUFBTyxRQUFTLFNBQVVyZSxFQUFNcWUsT0FDekRDLE1BQU8sQ0FBQyxHQUFJeGUsRUFBS3ljLFFBQVErQixNQUFPLFFBQVMsU0FBVXRlLEVBQU1zZSxPQUN6REgsS0FBTSxDQUFDLEdBQUlyZSxFQUFLeWMsUUFBUTRCLEtBQU0sT0FBUSxTQUFVbmUsRUFBTW1lLE1BRXREb0IsYUFBYyxDQUFDLEdBQUl6ZixFQUFLeWMsUUFBUWdELGFBQWMsZUFBZ0IsY0FBZXZmLEVBQU02ekIsaUJBUzNGdWhDLG1CQUFvQixXQUNoQixNQUFNQyxFQUFPejVELEVBQUtDLGNBQWMsT0FDaEN3NUQsRUFBS3Y1RCxVQUFZLHFDQUVqQixNQUFNdzVELEVBQU0xNUQsRUFBS0MsY0FBYyxNQUkvQixPQUhBeTVELEVBQUl4NUQsVUFBWSxlQUNoQnU1RCxFQUFLbDVELFlBQVltNUQsR0FFVixDQUNILElBQU9ELEVBQ1AsR0FBTUMsSUFnQmRDLGNBQWUsU0FBVUMsRUFBYTkwRCxFQUFPKzBELEVBQWFDLEVBQWFwMkQsRUFBV3EyRCxFQUFXZCxHQUN6RixNQUFNZSxFQUFNaDZELEVBQUtDLGNBQWMsTUFDekJnNkQsRUFBVWo2RCxFQUFLQyxjQUFjLFVBQzdCaTZELEVBQVNwMUQsR0FBUyswRCxFQXlCeEIsT0F2QkFJLEVBQVF0a0QsYUFBYSxPQUFRLFVBQzdCc2tELEVBQVF0a0QsYUFBYSxRQUFTLFVBQVlpa0QsRUFBYyxJQUFNQSxFQUFjLElBQU0sZUFDbEZLLEVBQVF0a0QsYUFBYSxlQUFnQmtrRCxHQUNyQ0ksRUFBUXRrRCxhQUFhLGVBQWdCbWtELEdBQ3JDRyxFQUFRdGtELGFBQWEsYUFBY3VrRCxFQUFNNXNELFFBQVEsbUJBQW9CLEtBQ3JFMnNELEVBQVF0a0QsYUFBYSxXQUFZLE1BRTVCalMsSUFBV0EsRUFBWSx1Q0FDeEIsY0FBY3pDLEtBQUt5QyxLQUNuQkEsRUFBWXUxRCxFQUFPdjFELEVBQVU0SixRQUFRLGNBQWUsTUFFcEQsV0FBV3JNLEtBQUt5QyxLQUNoQkEsRUFBWUEsRUFBVTRKLFFBQVEsV0FBWSxJQUMxQzJzRCxFQUFRLzVELFdBQWEscUJBR3pCd0QsR0FBYSxnRUFBa0V3MkQsRUFBUSxpQkFFbkZILEdBQVdFLEVBQVF0a0QsYUFBYSxZQUFZLEdBRWhEc2tELEVBQVF2MkQsVUFBWUEsRUFDcEJzMkQsRUFBSXo1RCxZQUFZMDVELEdBRVQsQ0FDSCxHQUFNRCxFQUNOLE9BQVVDLElBYWxCbkosZUFBZ0IsU0FBVTc3QyxFQUFLMDJDLEVBQVl2cUQsRUFBU1MsR0FDaEQsTUFBTXM0RCxFQUFxQmxsRCxFQUFJaFYsY0FBYyxPQUM3Q2s2RCxFQUFtQmo2RCxVQUFZLGdDQUUvQixNQUFNMndELEVBQVc1N0MsRUFBSWhWLGNBQWMsT0FDbkM0d0QsRUFBUzN3RCxVQUFZLCtCQUVyQixNQUFNazZELEVBQWNubEQsRUFBSWhWLGNBQWMsT0FDdENtNkQsRUFBWWw2RCxVQUFZLGNBQ3hCMndELEVBQVN0d0QsWUFBWTY1RCxHQUdyQnpPLEVBQWF6bEQsS0FBS0MsTUFBTUQsS0FBS3FGLFVBQVVvZ0QsSUFDdkMsTUFBTXZuRCxFQUFRdkMsRUFBUXVDLE1BQ2hCaTJELEVBQW9CLzZELEtBQUs4NUQsZ0JBQWdCdjNELEdBQ3pDbXZELEVBQW9CLEdBQ3BCa0QsRUFBb0IsR0FFMUIsSUFBSWgzRCxFQUFTLEtBQ1QreEMsRUFBUyxLQUNUcXJCLEVBQWdCLEtBQ2hCQyxFQUFnQixLQUNoQmgyRCxFQUFhLEdBQ2I4M0MsR0FBVyxFQUNmLE1BQU1tZSxFQUFZeDZELEVBQUtDLGNBQWMsT0FDckN1NkQsRUFBVXQ2RCxVQUFZLHdCQUV0QnU2RCxFQUNBLElBQUssSUFBV0MsRUFBTUMsRUFBZUMsRUFBYUMsRUFBYWw1QyxFQUF0RHhrQixFQUFJLEVBQXlEQSxFQUFJd3VELEVBQVcvbEQsT0FBUXpJLElBT3pGLEdBTkF1OUQsR0FBTyxFQUNQLzRDLEVBQVEsR0FDUms1QyxFQUFjbFAsRUFBV3h1RCxHQUN6Qm05RCxFQUFnQmg3RCxLQUFLazZELHFCQUdNLGlCQUFoQnFCLEVBQTBCLENBRWpDLElBQUssSUFBV0MsRUFBUDFvQixFQUFJLEVBQWVBLEVBQUl5b0IsRUFBWWoxRCxPQUFRd3NDLElBQUssQ0FJckQsR0FIQW5ELEVBQVM0ckIsRUFBWXpvQixHQUNyQjBvQixHQUFhLEVBRVQsU0FBUzc1RCxLQUFLZ3VDLElBQWlCLElBQU5tRCxFQUFTLENBQ2xDeW9CLEVBQVksR0FBSzVyQixFQUFPM2hDLFFBQVEsU0FBVSxJQUMxQzRtRCxFQUFrQmpzRCxLQUFLNHlELEdBQ3ZCbFAsRUFBV3BqRCxPQUFPcEwsSUFBSyxHQUN2QixTQUFTczlELEVBR2IsR0FBc0IsaUJBQVh4ckIsRUFDbUIsbUJBQWZBLEVBQU94dkMsS0FDZDhFLEVBQWEwcUMsRUFBT3Z4QyxLQUNwQlIsRUFBU205RCxFQUFrQjkxRCxHQUMzQm5ELEVBQVFtRCxHQUFjMHFDLElBRXRCMXFDLEVBQWEwcUMsRUFBT3Z4QyxLQUNwQlIsRUFBUyxDQUFDK3hDLEVBQU8ycUIsWUFBYTNxQixFQUFPbnFDLE1BQU9tcUMsRUFBT3Z4QyxLQUFNdXhDLEVBQU82cUIsWUFBYTdxQixFQUFPdnJDLFVBQVd1ckMsRUFBTzhxQixnQkFFdkcsQ0FFSCxHQUFJLE1BQU05NEQsS0FBS2d1QyxHQUFTLENBQ3BCdHRCLEVBQVFzdEIsRUFBTzFsQixPQUFPLEdBQ3RCK3dDLEVBQWNTLElBQUk3NkQsV0FBYSxpQkFBbUJ5aEIsRUFDbEQsU0FJSixHQUFJLE1BQU0xZ0IsS0FBS2d1QyxHQUFTLENBRUwsUUFEQUEsRUFBTzFsQixPQUFPLEtBQ1Ard0MsRUFBY1UsR0FBRzk2RCxXQUFhLG9CQUNwRCxTQUlKLEdBQUksTUFBTWUsS0FBS2d1QyxHQUFTLENBQ3BCNnJCLEdBQWEsRUFDYixNQUFNRyxFQUFVaHNCLEVBQU9yK0IsTUFBTSxtQ0FDN0JncUQsRUFBYyxTQUFXSyxFQUFRLEdBQUduekQsT0FHcEM1SyxFQUFTLENBQUMsY0FGSSs5RCxFQUFRLEdBQUduekQsT0FFTzh5RCxFQUFhLE9BRDNCSyxFQUFRLEdBQUduekQsYUFLN0I1SyxFQUFTbTlELEVBQWtCcHJCLEdBSS9CLEdBREExcUMsRUFBYTBxQyxHQUNSL3hDLEVBQVEsQ0FDVCxNQUFNZytELEVBQVM5NUQsRUFBUW1ELEdBQ3ZCLElBQUsyMkQsRUFBUSxNQUFNejRELE1BQU0scUZBQXVGOEIsRUFBYSxLQUM3SHJILEVBQVMsQ0FBQ2crRCxFQUFPdEIsWUFBYXNCLEVBQU9wMkQsTUFBT28yRCxFQUFPeDlELEtBQU13OUQsRUFBTzc2RCxRQUFTNjZELEVBQU94M0QsVUFBV3czRCxFQUFPbkIsWUFJMUdRLEVBQWdCajdELEtBQUtxNkQsY0FBY3o4RCxFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxHQUFJQSxFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxHQUFJa0gsSUFDcEdzMkQsRUFBT0MsRUFBZ0JMLEVBQWNVLElBQUl6NkQsWUFBWWc2RCxFQUFjWSxJQUVoRS81RCxFQUFRbUQsS0FDUnlzRCxFQUFrQnpzRCxHQUFjZzJELEVBQWN0ckIsUUFJOUM2ckIsSUFDQUosR0FBTyxFQUNQQyxFQUFnQjM2RCxFQUFLQyxjQUFjLE9BQ25DMDZELEVBQWN6NkQsVUFBWSxpQkFBbUIwNkQsRUFDN0NELEVBQWNqM0QsVUFBWSxzREFBd0RpZSxFQUFRLGtCQUFvQkEsRUFBUSxLQUFPLElBQU0sZUFDbkk2NEMsRUFBVWo2RCxZQUFZbzZELEdBQ3RCQSxFQUFnQkEsRUFBY3R1QixrQkFBa0JBLG1CQUl4RCxHQUFJZ1EsRUFBVSxDQUNWLE1BQU0rZSxFQUFNakIsRUFBbUJ2OEIsV0FBVSxHQUN6Q3c4QixFQUFZNzVELFlBQVk2NkQsR0FHNUJoQixFQUFZNzVELFlBQVkrNUQsRUFBY1MsS0FDdEMxZSxHQUFXLE9BR1YsR0FBSSxPQUFPcDdDLEtBQUs0NUQsR0FBYyxDQUMvQixNQUFNUSxFQUFXcG1ELEVBQUloVixjQUFjLE9BQ25DbzdELEVBQVNuN0QsVUFBWSxzQkFDckJrNkQsRUFBWTc1RCxZQUFZODZELEdBQ3hCaGYsR0FBVyxFQUluQixPQUFRK2QsRUFBWWw3QyxTQUFTdFosUUFDekIsS0FBSyxFQUNEdzBELEVBQVloNkQsTUFBTUMsUUFBVSxPQUM1QixNQUNKLEtBQUssRUFDREwsRUFBS3dJLFlBQVk0eEQsRUFBWS90QixrQkFBbUIsd0JBQ2hELE1BQ0osUUFDSSxHQUFJeHFDLEVBQVEwdEIsSUFBSyxDQUNiLE1BQU02ckMsRUFBTWpCLEVBQW1CdjhCLFdBQVUsR0FDekN3OUIsRUFBR2g3RCxNQUFNazlCLE1BQVE4OEIsRUFBWW5tQixpQkFBaUI3ekMsTUFBTWs5QixNQUNwRDg4QixFQUFZNzVELFlBQVk2NkQsSUFJaENsSCxFQUFrQnR1RCxPQUFTLEdBQUdzdUQsRUFBa0JvSCxRQUFRM1AsR0FDeEQ2TyxFQUFVdDdDLFNBQVN0WixPQUFTLEdBQUd3MEQsRUFBWTc1RCxZQUFZaTZELEdBRzNELE1BQU12SCxFQUFZaCtDLEVBQUloVixjQUFjLE9BQ3BDZ3pELEVBQVUveUQsVUFBWSxlQUN0QjJ3RCxFQUFTdHdELFlBQVkweUQsR0FHckIsTUFBTXNJLEVBQWF0bUQsRUFBSWhWLGNBQWMsT0FNckMsT0FMQXM3RCxFQUFXcjdELFVBQVksbUJBQ3ZCMndELEVBQVN0d0QsWUFBWWc3RCxHQUVqQjE1RCxFQUFRczJELGNBQWF0SCxFQUFTendELE1BQU1DLFFBQVUsUUFFM0MsQ0FDSCxRQUFXd3dELEVBQ1gsUUFBV3p2RCxFQUNYLGtCQUFxQjR2RCxFQUNyQixrQkFBcUJrRCxFQUNyQixVQUFhakIsRUFDYixZQUFlbUgsS0NoM0Jab0IsTUFyREUsU0FBVTE2RCxFQUFTMjZELEVBQU01NUQsR0FDdEMsTUFBTyxDQUNIZixRQUFTLENBQ0xxMEQsY0FBZXIwRCxFQUNmeTBELFFBQVNrRyxFQUFLNUksS0FDZDl4RCxTQUFVMDZELEVBQUszSSxVQUNmbnlDLFFBQVM4NkMsRUFBSzFJLFNBQ2RDLGVBQWdCeUksRUFBS3pJLGVBQ3JCb0gsWUFBYXFCLEVBQUsxSSxTQUFTbnZELGNBQWMsZ0JBQ3pDcXZELFVBQVd3SSxFQUFLeEksVUFDaEJyQixZQUFhNkosRUFBS25JLGFBQ2xCekIsV0FBWTRKLEVBQUtsSSxZQUNqQnhCLFlBQWEwSixFQUFLakksYUFDbEJ2QixZQUFhd0osRUFBS2hJLGFBQ2xCMkIsV0FBWXFHLEVBQUt2SSxZQUNqQnBJLGFBQWMyUSxFQUFLdEksYUFDbkIzaUMsUUFBU2lyQyxFQUFLdEksYUFDZHp5QyxLQUFNKzZDLEVBQUtySSxVQUNYNXVCLFlBQWFpM0IsRUFBS3BJLGFBQ2xCcUksUUFBU0QsRUFBSzc0RCxTQUNkKzRELFlBQWFGLEVBQUsvSCxhQUNsQmtJLGNBQWVILEVBQUs5SCxlQUNwQmtJLGNBQWVKLEVBQUs3SCxlQUNwQmtJLGlCQUFrQkwsRUFBSzVILFlBQ3ZCQyxhQUFjMkgsRUFBSzNILGFBQ25CQyxPQUFRMEgsRUFBSzFILE9BQ2JDLFdBQVl5SCxFQUFLekgsWUFFckIrSCxLQUFNLENBQ0ZsK0IsTUFBTzQ5QixFQUFLMUksU0FBU252RCxjQUFjLHFCQUNuQ3FkLEtBQU13NkMsRUFBSzFJLFNBQVNudkQsY0FBYyx5QkFDbENzSCxVQUFXdXdELEVBQUsxSSxTQUFTbnZELGNBQWMsOEJBQ3ZDc2QsT0FBUXU2QyxFQUFLMUksU0FBU252RCxjQUFjLDJCQUNwQ3VkLE9BQVFzNkMsRUFBSzFJLFNBQVNudkQsY0FBYywyQkFDcENtekQsSUFBSzBFLEVBQUsxSSxTQUFTbnZELGNBQWMsd0JBQ2pDb3pELElBQUt5RSxFQUFLMUksU0FBU252RCxjQUFjLHdCQUNqQ2tmLEtBQU0yNEMsRUFBSzFJLFNBQVNudkQsY0FBYyx5QkFDbENtZixLQUFNMDRDLEVBQUsxSSxTQUFTbnZELGNBQWMseUJBQ2xDaWQsS0FBTTQ2QyxFQUFLMUksU0FBU252RCxjQUFjLHlCQUNsQzhkLFFBQVMrNUMsRUFBSzFJLFNBQVNudkQsY0FBYyw0QkFDckM2ZCxPQUFRZzZDLEVBQUsxSSxTQUFTbnZELGNBQWMsMkJBQ3BDK2UsV0FBWTg0QyxFQUFLMUksU0FBU252RCxjQUFjLCtCQUN4Q2dmLFdBQVk2NEMsRUFBSzFJLFNBQVNudkQsY0FBYywrQkFDeENpZixTQUFVNDRDLEVBQUsxSSxTQUFTbnZELGNBQWMsNkJBQ3RDNm9DLElBQUtndkIsRUFBSzFJLFNBQVNudkQsY0FBYyx3QkFDakNnZ0IsUUFBUzYzQyxFQUFLMUksU0FBU252RCxjQUFjLDRCQUNyQ2lnQixRQUFTNDNDLEVBQUsxSSxTQUFTbnZELGNBQWMsNkJBRXpDL0IsUUFBU0EsRUFDVG1NLE9BQVFuTSxJQ3pERCxHQUNYbkUsS0FBTSxTQUtOK0IsSUFBSyxTQUFVQyxHQUNYLE1BQU1DLEVBQVVELEVBQUtDLFFBQ3JCQSxFQUFRcThELE9BQVMsR0FHakIsSUFBSUMsRUFBYXY4RCxFQUFLTSxLQUFLQyxjQUFjLE9BQ3JDaThELEVBQWN4OEQsRUFBS00sS0FBS0MsY0FBYyxRQUN0Q2s4RCxFQUFnQno4RCxFQUFLTSxLQUFLQyxjQUFjLFVBRTVDZzhELEVBQVcvN0QsVUFBWSxZQUN2Qmk4RCxFQUFjajhELFVBQVksUUFDMUJpOEQsRUFBY3htRCxhQUFhLGFBQWMsU0FDekN3bUQsRUFBY3htRCxhQUFhLFFBQVNqVyxFQUFLd0UsS0FBS0MsVUFBVTlDLE9BQ3hEODZELEVBQWN6NEQsVUFBWWhFLEVBQUswRSxNQUFNQyxPQUVyQzQzRCxFQUFXMTdELFlBQVkyN0QsR0FDdkJELEVBQVcxN0QsWUFBWTQ3RCxHQUV2Qng4RCxFQUFRcThELE9BQU90N0QsTUFBUXU3RCxFQUN2QnQ4RCxFQUFRcThELE9BQU94MUQsUUFBVTAxRCxFQUd6QkMsRUFBY3g3RCxpQkFBaUIsUUFBU3JCLEtBQUs4OEQsZUFBZXo5RCxLQUFLZSxJQUdqRUMsRUFBUW1CLFFBQVFzMEQsV0FBVzcwRCxZQUFZMDdELEdBR3ZDQSxFQUFhLE1BT2pCRyxlQUFnQixTQUFVcDdELEdBQ3RCQSxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBQ0ZoRixLQUFLOEIsUUFBUTQ2RCxPQUFPMzZELE1BQU0vRCxLQUFLZ0MsT0FPbkNnQyxLQUFNLFNBQVVrTyxHQUNabFEsS0FBS0ssUUFBUXE4RCxPQUFPeDFELFFBQVEzQixZQUFjMkssRUFDMUNsUSxLQUFLSyxRQUFRcThELE9BQU90N0QsTUFBTU4sTUFBTUMsUUFBVSxTQU05Q2dCLE1BQU8sV0FDSC9CLEtBQUtLLFFBQVFxOEQsT0FBT3Q3RCxNQUFNTixNQUFNQyxRQUFVLFMsMENDdkRuQyxHQU9YOEIsS0FBTSxTQUFVazZELEdBQ1osTUFBTyxDQUNINTlELE9BQVEsU0FBVTY5RCxFQUFhejZELEdBQzNCLE9BQU92QyxLQUFLYixPQUFPNjlELEVBQWF6NkQsRUFBU3c2RCxJQUMzQzE5RCxLQUFLVyxRQVVmYixPQUFRLFNBQVU2OUQsRUFBYXo2RCxFQUFTMDZELEdBQ3BDdjhELEVBQUsyakQsa0JBRWtCLGlCQUFaOWhELElBQXNCQSxFQUFVLElBQ3ZDMDZELElBQ0ExNkQsRUFBVyxDQUFDMDZELEVBQWUxNkQsR0FBUzJ5RCxRQUFPLFNBQVVyeUQsRUFBTTZMLEdBQzNDLElBQUssSUFBSXRQLEtBQU9zUCxFQUNaLEdBQUtoTyxFQUFLMGpDLE9BQU8xMUIsRUFBUXRQLEdBQ3pCLEdBQVksWUFBUkEsR0FBcUJzUCxFQUFPdFAsSUFBUXlELEVBQUt6RCxHQUFNLENBQy9DLElBQUl2QixFQUFJZ0YsRUFBS3pELEdBQU1kLEVBQUlvUSxFQUFPdFAsR0FDOUJ2QixFQUFJQSxFQUFFeUksT0FBU3pJLEVBQUlVLE9BQU84SCxLQUFLeEksR0FBR3lLLEtBQUksU0FBU2xLLEdBQVEsT0FBT1AsRUFBRU8sTUFDaEVFLEVBQUlBLEVBQUVnSSxPQUFTaEksRUFBSUMsT0FBTzhILEtBQUsvSCxHQUFHZ0ssS0FBSSxTQUFTbEssR0FBUSxPQUFPRSxFQUFFRixNQUNoRXlFLEVBQUt6RCxHQUFRZCxFQUFFOEssUUFBTyxTQUFTOHpELEdBQU8sT0FBMkIsSUFBcEJyL0QsRUFBRTZLLFFBQVF3MEQsTUFBaUJwaUQsT0FBT2pkLFFBRS9FZ0YsRUFBS3pELEdBQU9zUCxFQUFPdFAsR0FHM0IsT0FBT3lELElBQ1IsS0FHbkIsTUFBTXJCLEVBQWlDLGlCQUFoQnc3RCxFQUEyQi81RCxTQUFTazZELGVBQWVILEdBQWVBLEVBRXpGLElBQUt4N0QsRUFBUyxDQUNWLEdBQTJCLGlCQUFoQnc3RCxFQUNQLE1BQU03NUQsTUFBTSxzRUFBd0U2NUQsRUFBYyxNQUd0RyxNQUFNNzVELE1BQU0sNkVBR2hCLE1BQU1nNUQsRUFBT2lCLEVBQWF2NkQsS0FBS3JCLEVBQVNlLEdBRXhDLEdBQUk0NUQsRUFBSzdJLFlBQVlDLEtBQUszMEMsSUFBTTNiLFNBQVNrNkQsZUFBZWhCLEVBQUs3SSxZQUFZQyxLQUFLMzBDLElBQzFFLE1BQU16YixNQUFNLGdHQUFrR2c1RCxFQUFLN0ksWUFBWUMsS0FBSzMwQyxHQUFLLE1BRzdJLE9DM0NPLFNBQVV2ZSxFQUFTcXhELEVBQW1CNXZELEVBQVM4QyxFQUFNckMsRUFBU295RCxHQUN6RSxNQUFNdnlELEVBQUsvQixFQUFRbUIsUUFBUXEwRCxjQUFjd0gsZUFBaUJwNkQsU0FDcERtRCxFQUFLaEUsRUFBR2s3RCxhQUFldjlELE9BQ3ZCVyxFQUFPNjhELEVBQ1B6NEQsRUFBUXZDLEVBQVF1QyxNQUNoQjA0RCxFQUFjLElBQUlweEQsSUFBU21ILFVBQVUsQ0FBQzVILE9BQU0sRUFBTUgsY0FBYSxFQUFNM0IseUJBQXdCLEVBQy9GNEIsc0JBQXFCLEVBQU1qQixvQkFBbUIsRUFBTXdCLDBCQUF5QixFQUFNbkIsUUFBTyxJQUU5RjJ5RCxFQUFZaHhELFVBQVUsVUFLdEIsTUFBTXBNLEVBQU8sQ0FDVGdDLEdBQUlBLEVBQ0pnRSxHQUFJQSxFQUNKcTNELFFBQVMsSUFBSXIzRCxFQUFHMC9CLFVBQ2hCNDNCLFNBQVVuN0QsRUFBUTB0QixJQUNsQjB0QyxjQUFlLEVBQ2ZDLHFCQUFzQixFQUN0QkMsV0FBWXQ3RCxFQUFRcTNELGtCQUNwQmtFLFdBQVlwOUQsRUFBSytrRCxpQkFBaUJsakQsRUFBUXEzRCxtQkFDMUNtRSxZQUFhMTlELEVBQVFtQixRQUFRa3pELFdBTTdCNVYsSUFBSyxLQU1Ma2YsSUFBSyxLQU1MQyxZQUFhLEtBTWJDLGlDQUFrQyxLQUtsQ3g5RCxLQUFNQSxFQUtObzVCLFVBQVcsS0FLWHYzQixRQUFTLEtBS1R3b0IsZ0JBQWlCLEtBS2pCMnhDLE9BQVF5QixFQUtScjVELE1BQU9BLEVBS1A0dUIsUUFBUyxLQUtUcnpCLFFBQVNBLEVBS1RxeEQsa0JBQW1CQSxFQUtuQjV2RCxRQUFTQSxHQUFXLEdBS3BCczhELFlBQWEsR0FNYkMsZUFBZ0IsR0FNaEIxSyxVQUFXLEdBS1gvdUQsS0FBTUEsRUFLTitvQyxXQUFZLEtBS1oyd0IsUUFBUyxLQUtUNy9CLFVBQVcsS0FNWDgvQixhQUFjLEdBTWRDLGtCQUFtQixLQU1uQkMsb0JBQXFCLEtBS3JCQyxvQkFBcUIsS0FLckJDLHNCQUF1QixLQUt2Qi9xQyxnQkFBaUIsR0FLakJYLHNCQUF1QixHQUt2QjJyQyx3QkFBeUIsS0FLekJDLHlCQUEwQixLQUsxQkMsd0JBQXlCLEdBS3pCQyx3QkFBeUIsR0FNekJDLHVCQUF3QixLQU94QkMsMEJBQTJCLEtBTTNCQywwQkFBMkIsS0FNM0JDLDBCQUEyQixLQU0zQkMsMEJBQTJCLEtBTTNCQywwQkFBMkIsS0FNM0JDLHlCQUEwQixLQU0xQkMseUJBQTBCLEtBSzFCbHhCLFVBQVUsRUFLVm14QixZQUFZLEVBS1pDLFlBQVksRUFNWkMsMkJBQTRCLEtBQzVCQyxvQ0FBcUMsS0FNckNDLDJCQUE0QixLQU01QkMseUJBQTBCLEtBTTFCQyx5QkFBMEIsS0FNMUJDLG9CQUFxQixLQU1yQkMsVUFBVyxLQU1YQyxXQUFZLEtBTVpDLGlCQUFrQixLQU1sQkMsbUJBQW9CLENBQUMvdkMsSUFBSyxHQUFJOVQsTUFBTyxHQUFJOGpELFFBQVEsR0FNakRDLGlCQUFpQixFQU1qQkMsU0FBUyxFQU1UdGhCLFdBQVcsRUFNWG9WLGFBQWMsS0FDZG1NLG1CQUFvQixLQU1wQkMscUJBQXFCLEVBQ3JCQyxzQkFBc0IsRUFNdEJDLGNBQWUsS0E4QmZDLGdCQUFpQixLQU1qQkMsZUFBZSxFQVNmQyxzQkFBdUIsS0FRdkJDLHNCQUF1QixLQU12QkMsYUFBYyxDQUNWNTRELEtBQU0sS0FDTis5QyxPQUFRLEtBQ1I4YSxZQUFhLEtBQ2JDLGFBQWMsS0FDZEMsVUFBVyxNQWVmQyxXQUFZLEdBTVpDLGtCQUFtQixDQUNmQyxPQUFRLENBQUMsZUFDVEMsRUFBRyxDQUFDLG1CQUNKQyxHQUFJLENBQUMsY0FDTEMsSUFBSyxDQUFDLG9CQVVWQyxpQkFBa0IsS0FLbEJDLGtCQUFtQixDQUNmakcsSUFBSyxJQUFJcjFELEVBQUcySCxPQUFPLHFDQUFzQyxNQUN6RG9PLEtBQU0sSUFBSS9WLEVBQUcySCxPQUFPLCtFQUFnRixNQUNwRytGLE9BQVEsSUFBSTFOLEVBQUcySCxPQUFPLCtGQUFnRyxNQUN0SDRnQyxhQUFjLElBQUl2b0MsRUFBRzJILE9BQU8sT0FBU3hMLEVBQVFvc0MsYUFBZSxJQUFLLE1BZXJFZ3pCLFVBQVcsQ0FDUEMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsdUJBQXdCLEVBQ3hCQyxjQUFlLEVBQ2ZDLFFBQVMsRUFDVEMsV0FBWSxFQUNaQyxnQkFBaUJ6aEUsRUFBS3NnQyxVQUFXM2dDLEVBQVFtQixRQUFRZ3FELGFBQWExcUQsTUFBTTB2RCxXQUFhLEtBQU8sR0FDeEY0UixhQUFjLEdBQ2RDLGdCQUFpQixHQUNqQkMsT0FBUSxLQUNSQyxlQUFnQixLQUNoQkMsZUFBZ0JuaUUsRUFBUW1CLFFBQVF5MEQsUUFBUW4xRCxNQUFNc25DLFFBQzlDcTZCLGNBQWUsR0FDZkMseUJBQTBCLEdBQzFCQyxzQkFBdUIsR0FDdkJDLG1CQUFvQixHQUNwQkMsaUJBQWtCLENBQUNDLFFBQVEsRUFBT0MsU0FBUyxFQUFPQyxRQUFRLEdBQzFEQyxlQUFnQixLQUNoQkMsY0FBZSxJQU9uQkMsaUJBQWtCLEtBTWxCQyxrQkFBbUIsV0FDVnBqRSxLQUFLcWpFLG9CQUFtQnJqRSxLQUFLcWpFLGtCQUFvQixJQUV0RCxNQUFNQyxFQUFpQnRqRSxLQUFLSyxRQUFRbUIsUUFBUXM1RCxZQUFZbHlELGlCQUFpQixzQ0FDekUsSUFBSyxJQUFXcEgsRUFBU2dJLEVBQWhCM0wsRUFBSSxFQUFxQkEsRUFBSXlsRSxFQUFlaDlELE9BQVF6SSxJQUN6RDJELEVBQVU4aEUsRUFBZXpsRSxHQUN6QjJMLEVBQVVoSSxFQUFRSyxhQUFhLGdCQUUvQjdCLEtBQUtxakUsa0JBQWtCNzVELEdBQVdoSSxHQVExQytoRSxxQkFBc0IsV0FDbEIsR0FBSXZqRSxLQUFLcWpFLGtCQUFtQixDQUN4QixNQUFNQyxFQUFpQnRqRSxLQUFLSyxRQUFRbUIsUUFBUXM1RCxZQUFZbHlELGlCQUFpQixzQ0FDekUsSUFBSyxJQUFXK21DLEVBQVFubUMsRUFBU2c2RCxFQUF4QjNsRSxFQUFJLEVBQStCQSxFQUFJeWxFLEVBQWVoOUQsT0FBUXpJLElBQ25FOHhDLEVBQVMyekIsRUFBZXpsRSxHQUN4QjJMLEVBQVVtbUMsRUFBTzl0QyxhQUFhLGdCQUU5QjJoRSxFQUFZeGpFLEtBQUtxakUsa0JBQWtCNzVELEdBQy9CZzZELElBQ0E3ekIsRUFBT3BDLGNBQWNwTixhQUFhcWpDLEVBQVc3ekIsR0FDekMzdkMsS0FBS0ssUUFBUW84RCxLQUFLanpELEtBQVV4SixLQUFLSyxRQUFRbzhELEtBQUtqekQsR0FBV2c2RCxNQWE3RXZxQyxXQUFZLFNBQVVoMEIsRUFBWXcrRCxFQUFrQkMsR0FHaEQsR0FGQUEsRUFBVUEsR0FBV2hTLEVBQWtCenNELElBRWxDakYsS0FBSzhCLFFBQVFtRCxHQUNkLE1BQU05QixNQUFNLDhHQUFnSDhCLEVBQWEsTUFDaklqRixLQUFLbytELFlBQVluNUQsR0FHeUIsaUJBQXBDakYsS0FBS3ErRCxlQUFlcDVELElBQThCeStELEdBQ2hFMWpFLEtBQUsycUIsZUFBZTFsQixFQUFZeStELEVBQVMxakUsS0FBS3ErRCxlQUFlcDVELEtBSDdEakYsS0FBSzhCLFFBQVFtRCxHQUFZOUUsSUFBSUgsS0FBTTBqRSxHQUNuQzFqRSxLQUFLbytELFlBQVluNUQsSUFBYyxHQUsvQmpGLEtBQUs4QixRQUFRbUQsR0FBWTB1QixTQUFXM3pCLEtBQUttaEUsV0FBV2w4RCxJQUFpQnkrRCxJQUNyRTFqRSxLQUFLbWhFLFdBQVdsOEQsR0FBY3krRCxFQUM5QjFqRSxLQUFLMGdFLGNBQWMvM0QsS0FBSzFELElBR0ksbUJBQXJCdytELEdBQWlDQSxLQU9oRHQ1QyxVQUFXLFNBQVV3NUMsR0FDakIsSUFBSyxJQUFxQ0MsRUFBakMvbEUsRUFBSSxFQUFHNEosRUFBTWs4RCxFQUFZcjlELE9BQW9CekksRUFBSTRKLEVBQUs1SixJQUMzRCtsRSxFQUFhRCxFQUFZOWxFLEdBQUdPLEtBQ3ZCNEIsS0FBSzhCLFFBQVE4aEUsS0FDZDVqRSxLQUFLOEIsUUFBUThoRSxHQUFjRCxFQUFZOWxFLElBRXRDbUMsS0FBS28rRCxZQUFZd0YsS0FDbEI1akUsS0FBS28rRCxZQUFZd0YsSUFBYyxFQUNhLG1CQUFqQzVqRSxLQUFLOEIsUUFBUThoRSxHQUFZempFLEtBQW9CSCxLQUFLOEIsUUFBUThoRSxHQUFZempFLElBQUlILFFBU2pHNmpFLHNCQUF1QixXQUNuQixJQUFJOWtFLEVBQUksRUFBR2pCLEVBQUksRUFDWGsyQyxFQUFLM3pDLEVBQVFtQixRQUFReTBELFFBQ3pCLEtBQU9qaUIsR0FDSGoxQyxHQUFLaTFDLEVBQUcyWCxVQUNSN3RELEdBQUtrMkMsRUFBRzh2QixXQUNSOXZCLEVBQUtBLEVBQUd6RyxjQUlaLElBREF5RyxFQUFLaDBDLEtBQUtpK0QsWUFBY2orRCxLQUFLaStELFlBQVkvd0MsS0FBTyxLQUN6QzhtQixHQUNIajFDLEdBQUtpMUMsRUFBRzJYLFVBQ1I3dEQsR0FBS2syQyxFQUFHOHZCLFdBQ1I5dkIsRUFBS0EsRUFBR3pHLGNBR1osTUFBTyxDQUNIbmQsSUFBS3J4QixFQUNMMlIsS0FBTTVTLElBV2Q2c0IsZUFBZ0IsU0FBVTFsQixFQUFZckQsRUFBUTZsQixHQUNyQzdsQixHQUdEdkIsRUFBUW1CLFFBQVFteUQsVUFBVTF5RCxZQUFZd21CLEdBQ3RDem5CLEtBQUtxK0QsZUFBZXA1RCxJQUFjLEVBQ2xDakYsS0FBSzJ6RCxVQUFVL3hELEVBQU9DLGFBQWEsaUJBQW1CNGxCLEdBSnREem5CLEtBQUtxK0QsZUFBZXA1RCxHQUFjd2lCLEdBWTFDczhDLFVBQVcsU0FBVXZpRSxHQUNieEIsS0FBS3crRCxtQkFBbUJ4K0QsS0FBS3crRCxvQkFDN0J4K0QsS0FBSysvRCxxQkFBcUIvL0QsS0FBSzh6QixpQkFFbkMsTUFBTWt3QyxFQUFjaGtFLEtBQUt1K0QsYUFBZS84RCxFQUFRSyxhQUFhLGdCQUN2RDRsQixFQUFPem5CLEtBQUtzK0QsUUFBVXQrRCxLQUFLMnpELFVBQVVxUSxHQUMzQ2hrRSxLQUFLMCtELG9CQUFzQmw5RCxFQUMzQnhCLEtBQUtpa0UsaUJBQWlCemlFLEVBQVNpbUIsR0FFL0J6bkIsS0FBS3crRCxrQkFBb0J4K0QsS0FBS21yQixXQUFXOXJCLEtBQUtXLE1BQzlDQSxLQUFLODhDLFlBQVksWUFBYTk4QyxLQUFLdytELG1CQUFtQixHQUVsRHgrRCxLQUFLOEIsUUFBUWtpRSxHQUFhcmhFLElBQUkzQyxLQUFLOEIsUUFBUWtpRSxHQUFhcmhFLEdBQUczRSxLQUFLZ0MsTUFDcEVBLEtBQUtnL0MsV0FBWSxHQU1yQjd6QixXQUFZLFdBQ1JuckIsS0FBSzY4QyxlQUFlLFlBQWE3OEMsS0FBS3crRCxtQkFDdEN4K0QsS0FBS3crRCxrQkFBb0IsS0FFckJ4K0QsS0FBS3MrRCxVQUNMdCtELEtBQUt1K0QsYUFBZSxHQUNwQnYrRCxLQUFLcytELFFBQVF4OUQsTUFBTUMsUUFBVSxPQUM3QmYsS0FBS3MrRCxRQUFVLEtBQ2Y1OUQsRUFBS3dJLFlBQVlsSixLQUFLMCtELG9CQUFxQixNQUMzQzErRCxLQUFLMCtELG9CQUFzQixLQUMzQjErRCxLQUFLcWdFLGlCQUFrQixHQUczQnJnRSxLQUFLZy9DLFdBQVksR0FNckJrbEIsYUFBYyxXQUNWLEdBQUlsa0UsS0FBS2cvRCx1QkFBd0IsQ0FDZjMrRCxFQUFRbUIsUUFBUTZmLFFBQVEvYyxjQUFjLElBQU10RSxLQUFLZy9ELHVCQUF1Qm45RCxhQUFhLGlCQUM3RmYsTUFBTUMsUUFBVSxPQUN0QkwsRUFBS3dJLFlBQVlsSixLQUFLZy9ELHVCQUF3QixNQUM5Q2gvRCxLQUFLZy9ELHVCQUF5QixPQVF0Q21GLFlBQWEsU0FBVTNpRSxHQUNmeEIsS0FBS3krRCxxQkFBcUJ6K0QsS0FBS3krRCxzQkFFbkMsTUFBTTJGLEVBQWdCcGtFLEtBQUtxa0UsZUFBaUI3aUUsRUFBUUssYUFBYSxnQkFDM0Q0bEIsRUFBT3puQixLQUFLeStCLFVBQVl6K0IsS0FBSzJ6RCxVQUFVeVEsR0FDN0Nwa0UsS0FBSzIrRCxzQkFBd0JuOUQsRUFDN0J4QixLQUFLaWtFLGlCQUFpQnppRSxFQUFTaW1CLEdBRS9Cem5CLEtBQUt5K0Qsb0JBQXNCeitELEtBQUtza0UsYUFBYWpsRSxLQUFLVyxNQUNsREEsS0FBSzg4QyxZQUFZLFlBQWE5OEMsS0FBS3krRCxxQkFBcUIsR0FFcER6K0QsS0FBSzhCLFFBQVFzaUUsR0FBZXpoRSxJQUFJM0MsS0FBSzhCLFFBQVFzaUUsR0FBZXpoRSxHQUFHM0UsS0FBS2dDLE1BQ3hFQSxLQUFLZy9DLFdBQVksR0FNckJzbEIsYUFBYyxXQUNWdGtFLEtBQUs2OEMsZUFBZSxZQUFhNzhDLEtBQUt5K0QscUJBQ3RDeitELEtBQUt5K0Qsb0JBQXNCLEtBRXZCeitELEtBQUt5K0IsWUFDTHorQixLQUFLcWtFLGVBQWlCLEdBQ3RCcmtFLEtBQUt5K0IsVUFBVTM5QixNQUFNQyxRQUFVLE9BQy9CZixLQUFLeStCLFVBQVksS0FDakIvOUIsRUFBS3dJLFlBQVlsSixLQUFLMitELHNCQUF1QixNQUM3QzMrRCxLQUFLMitELHNCQUF3QixLQUM3QjMrRCxLQUFLcWdFLGlCQUFrQixHQUczQnJnRSxLQUFLZy9DLFdBQVksR0FTckJpbEIsaUJBQWtCLFNBQVV6aUUsRUFBU2ltQixHQUNqQ0EsRUFBSzNtQixNQUFNaXNCLFdBQWEsU0FDeEJ0RixFQUFLM21CLE1BQU1DLFFBQVUsUUFDckIwbUIsRUFBSzNtQixNQUFNeWIsT0FBUyxHQUNwQjdiLEVBQUt5SSxTQUFTM0gsRUFBUyxNQUV2QixNQUFNNmYsRUFBVXJoQixLQUFLSyxRQUFRbUIsUUFBUTZmLFFBQy9Ca2pELEVBQVdsakQsRUFBUThPLFlBQ25CcTBDLEVBQWdCQyxFQUFNQyxrQkFBa0Jya0UsRUFBUW1CLFFBQVE2ZixTQUN4RHNqRCxFQUFRbDlDLEVBQUswSSxZQUNicnlCLEVBQUkwRCxFQUFRK3JDLGNBQWNyZCxXQUFhLEVBRzdDLEdBQUkzdEIsRUFBUTB0QixJQUFLLENBQ2IsTUFBTTIwQyxFQUFXcGpFLEVBQVEydUIsWUFDbkIwMEMsRUFBT0YsRUFBUUMsRUFBV0QsRUFBUUMsRUFBVyxFQUM3Q0UsRUFBT0QsRUFBTyxFQUFJLEVBQUlELEVBQVdELEVBQ3ZDbDlDLEVBQUszbUIsTUFBTTRQLEtBQVE1UyxFQUFJK21FLEVBQU9DLEVBQVEsS0FDbENOLEVBQWM5ekQsS0FBTyt6RCxFQUFNQyxrQkFBa0JqOUMsR0FBTS9XLE9BQ25EK1csRUFBSzNtQixNQUFNNFAsS0FBTyxXQUVuQixDQUNILE1BQU1xMEQsRUFBV1IsR0FBWUksRUFBUSxFQUFJSixHQUFZem1FLEVBQUk2bUUsR0FDdkNsOUMsRUFBSzNtQixNQUFNNFAsS0FBekJxMEQsRUFBVyxFQUFzQmpuRSxFQUFJaW5FLEVBQVksS0FDOUJqbkUsRUFBSSxLQUkvQixJQUFJaUIsRUFBSSxFQUNKaW1FLEVBQVd4akUsRUFDZixLQUFPd2pFLEdBQVlBLElBQWEzakQsR0FDNUJ0aUIsR0FBS2ltRSxFQUFTMzBDLFVBQ2QyMEMsRUFBV0EsRUFBU3RaLGFBR3hCLE1BQU11WixFQUFLbG1FLEVBQ1BpQixLQUFLaWdFLFdBQ0xsaEUsR0FBS3NpQixFQUFRZ1AsVUFBWTd1QixFQUFRNkYsYUFFakN0SSxHQUFLeUMsRUFBUTZGLGFBSWpCLE1BQU02OUQsRUFBYVYsRUFBY3AwQyxJQUMzQiswQyxFQUFhMTlDLEVBQUtwZ0IsYUFDbEJza0QsRUFBWTNyRCxLQUFLNmpFLHdCQUF3Qnp6QyxJQUV6Q2cxQyxFQUFvQmgvRCxFQUFHZ0IsYUFBZTg5RCxFQUFhdlosRUFBWXNaLEVBQUt6akUsRUFBUStyQyxjQUFjbG1DLGNBQ2hHLEdBQUkrOUQsRUFBb0JELEVBQVksQ0FDaEMsSUFBSUUsR0FBVyxHQUFLRixFQUFhRixFQUFLLEdBQ3RDLE1BQU1LLEVBQVNKLEVBQWF2WixFQUFZMFosRUFDbENFLEVBQWlCSixHQUFjRyxFQUFTLEVBQUlBLEVBQVMsR0FFdkRDLEVBQWlCSCxHQUNqQjM5QyxFQUFLM21CLE1BQU15YixPQUFTZ3BELEVBQWlCLEtBQ3JDRixHQUFXLEdBQUtFLEVBQWlCTixFQUFLLEtBRXRDeDlDLEVBQUszbUIsTUFBTXliLE9BQVM2b0QsRUFBb0IsS0FDeENDLEVBQVVKLEVBQUt6akUsRUFBUStyQyxjQUFjbG1DLGNBR3pDb2dCLEVBQUszbUIsTUFBTXN2QixJQUFNaTFDLEVBQVUsVUFFM0I1OUMsRUFBSzNtQixNQUFNc3ZCLElBQU82MEMsRUFBS3pqRSxFQUFRK3JDLGNBQWNsbUMsYUFBZ0IsS0FHakVvZ0IsRUFBSzNtQixNQUFNaXNCLFdBQWEsSUFPNUJvSCxjQUFlLFdBQ1BuMEIsS0FBSysvRCxxQkFBcUIvL0QsS0FBSysvRCxzQkFDbkMvL0QsS0FBSzR6QixnQkFBa0IsR0FFdkIsSUFBSyxJQUFXNHhDLEVBQVAzbkUsRUFBSSxFQUFRQSxFQUFJNG5FLFVBQVVuL0QsT0FBUXpJLElBQ3ZDMm5FLEVBQU1DLFVBQVU1bkUsR0FDWDJuRSxJQUVjLGlCQUFSQSxFQUlRLG1CQUFSQSxFQUlOOWtFLEVBQUs0RSxTQUFTa2dFLEVBQUssa0JBS3BCQSxFQUFJMWtFLFFBQ0owa0UsRUFBSTFrRSxNQUFNQyxRQUFVLFFBQ2hCZixLQUFLaStELGNBQXVFLElBQXhEaitELEtBQUtrK0QsaUNBQWlDeDFELFFBQVE4OEQsS0FDbEVBLEVBQUlua0UsaUJBQWlCLGFBQWEsU0FBVUssR0FBS0EsRUFBRTRILGlCQUFrQjVILEVBQUVzRCxxQkFDdkVoRixLQUFLaytELGlDQUFpQ3YxRCxLQUFLNjhELEtBR25EeGxFLEtBQUs0ekIsZ0JBQWdCanJCLEtBQUs2OEQsS0FYdEJ4bEUsS0FBSzQrRCx3QkFBMEI0RyxFQUMvQnhsRSxLQUFLNitELHlCQUEyQjcrRCxLQUFLMGxFLGlCQUFpQkYsSUFMdER4bEUsS0FBSzR6QixnQkFBZ0JqckIsS0FBSzY4RCxHQUoxQnhsRSxLQUFLaXpCLHNCQUF3QnV5QyxHQXNCckN4bEUsS0FBSysvRCxvQkFBc0IvL0QsS0FBSzh6QixlQUFlejBCLEtBQUtXLE1BQ3BEQSxLQUFLODhDLFlBQVksWUFBYTk4QyxLQUFLKy9ELHFCQUFxQixHQUN4RC8vRCxLQUFLODhDLFlBQVksVUFBVzk4QyxLQUFLKy9ELHFCQUFxQixHQUN0RC8vRCxLQUFLZy9DLFdBQVksRUFFdUIsbUJBQTdCbGxCLEVBQVU2ckMsZ0JBQStCN3JDLEVBQVU2ckMsZUFBZTNsRSxLQUFLaXpCLHNCQUF1Qmp6QixLQUFLNHpCLGdCQUFpQjV6QixPQU9uSTh6QixlQUFnQixTQUFVcHlCLEdBQ3RCMUIsS0FBS28wRCxhQUFhdHpELE1BQU1DLFFBQVUsT0FDbEMsTUFBTTBHLEVBQU16SCxLQUFLNHpCLGdCQUFnQnR0QixPQUVqQyxHQUFJNUUsR0FBS0EsRUFBRUUsUUFBVTZGLEVBQU0sRUFDdkIsSUFBSyxJQUFJNUosRUFBSSxFQUFHQSxFQUFJNEosRUFBSzVKLElBQ3JCLEdBQWdELG1CQUFyQ21DLEtBQUs0ekIsZ0JBQWdCLzFCLEdBQUd5eUIsVUFBMkJ0d0IsS0FBSzR6QixnQkFBZ0IvMUIsR0FBR3l5QixTQUFTNXVCLEVBQUVFLFFBQVMsT0FJbEgsS0FBSTVCLEtBQUsrZ0UsYUFBYUUsYUFBYXQvRCxLQUFLM0IsS0FBS2l6Qix5QkFBMEJ2eEIsR0FBZ0IsWUFBWEEsRUFBRXNJLE1BQW9DLEtBQWR0SSxFQUFFWSxXQUN0R2pDLEVBQVFtQixRQUFRODZELGNBQWN4N0QsTUFBTUMsUUFBVVYsRUFBUW1CLFFBQVErNkQsY0FBY3o3RCxNQUFNQyxRQUFVLE9BQzVGZixLQUFLMmhFLFVBQVVzQixlQUFpQixLQUVoQ2pqRSxLQUFLaXpCLHNCQUF3QixHQUM3Qmp6QixLQUFLNCtELHdCQUEwQixLQUMvQjUrRCxLQUFLNitELHlCQUEyQixLQUNoQzcrRCxLQUFLMnRDLFdBQWEsS0FDYjN0QyxLQUFLKy9ELHFCQUFWLENBTUEsR0FKQS8vRCxLQUFLNjhDLGVBQWUsWUFBYTc4QyxLQUFLKy9ELHFCQUN0Qy8vRCxLQUFLNjhDLGVBQWUsVUFBVzc4QyxLQUFLKy9ELHFCQUNwQy8vRCxLQUFLKy9ELG9CQUFzQixLQUV2QnQ0RCxFQUFNLEVBQUcsQ0FDVCxJQUFLLElBQUk1SixFQUFJLEVBQUdBLEVBQUk0SixFQUFLNUosSUFDa0IsbUJBQTVCbUMsS0FBSzR6QixnQkFBZ0IvMUIsR0FBbUJtQyxLQUFLNHpCLGdCQUFnQi8xQixLQUNuRW1DLEtBQUs0ekIsZ0JBQWdCLzFCLEdBQUdpRCxNQUFNQyxRQUFVLE9BR2pEZixLQUFLNHpCLGdCQUFrQixHQUczQjV6QixLQUFLZy9DLFdBQVksSUFlckI5cUIsc0JBQXVCLFNBQVVwTyxFQUFZOC9DLEVBQVNuakUsRUFBVThyRCxHQUN4RGhzRCxFQUFRMHRCLE1BQUtzK0IsRUFBVTc5QyxPQUFTLEdBRXBDLE1BQU15OEMsRUFBU3pzRCxFQUFLNnFELFVBQVVxYSxFQUFTdmxFLEVBQVFtQixRQUFRZ3FELGNBQ3ZEMWxDLEVBQVdobEIsTUFBTWlzQixXQUFhLFNBQzlCakgsRUFBV2hsQixNQUFNQyxRQUFVLFFBRzNCLE1BQU04a0UsRUFBeUIsUUFBYnBqRSxJQUF1QnFqQixFQUFXemUsYUFBZSxHQUFNdStELEVBQVF2K0QsYUFBZSxHQUNoR3llLEVBQVdobEIsTUFBTXN2QixJQUFPKzhCLEVBQU8vOEIsSUFBTXkxQyxFQUFZdFgsRUFBVW4rQixJQUFPLEtBRWxFLE1BQU10eUIsRUFBSXF2RCxFQUFPejhDLEtBQU9yUSxFQUFRbUIsUUFBUWdxRCxhQUFhc1ksV0FBYXZWLEVBQVU3OUMsS0FDdEVvMUQsRUFBY2hnRCxFQUFXcUssWUFDekI0MUMsRUFBV0gsRUFBUXoxQyxZQUVuQjYxQyxFQUFRdGxFLEVBQUs0RSxTQUFTd2dCLEVBQVdpbkIsa0JBQW1CLFlBQWNqbkIsRUFBV2luQixrQkFBb0IsS0FHdkcsR0FBSXhxQyxFQUFRMHRCLElBQUssQ0FDYixNQUFNNDBDLEVBQVFpQixFQUFjQyxFQUFZRCxFQUFjQyxFQUFXLEVBQzNEakIsRUFBT0QsRUFBTyxFQUFJLEVBQUlrQixFQUFXRCxFQUN2Q2hnRCxFQUFXaGxCLE1BQU00UCxLQUFRNVMsRUFBSSttRSxFQUFPQyxFQUFRLEtBRXhDRCxFQUFPLEdBQ0htQixJQUFPQSxFQUFNbGxFLE1BQU00UCxNQUFTbzFELEVBQWMsR0FBSyxHQUFLakIsRUFBU2lCLEVBQWMsR0FBTyxHQUFLakIsR0FBUyxNQUd4RyxNQUFNb0IsRUFBVzVsRSxFQUFRbUIsUUFBUWdxRCxhQUFhdDdCLFdBQWFwSyxFQUFXb0ssV0FDbEUrMUMsRUFBVyxJQUNYbmdELEVBQVdobEIsTUFBTTRQLEtBQU8sTUFDcEJzMUQsSUFBT0EsRUFBTWxsRSxNQUFNNFAsS0FBT3UxRCxFQUFXLFdBRTFDLENBQ0huZ0QsRUFBV2hsQixNQUFNNFAsS0FBTzVTLEVBQUksS0FFNUIsTUFBTW1vRSxFQUFXNWxFLEVBQVFtQixRQUFRZ3FELGFBQWFyN0IsYUFBZXJLLEVBQVdvSyxXQUFhNDFDLEdBQ2pGRyxFQUFXLEdBQ1huZ0QsRUFBV2hsQixNQUFNNFAsS0FBUW9WLEVBQVdvSyxXQUFhKzFDLEVBQVksS0FDekRELElBQU9BLEVBQU1sbEUsTUFBTTRQLEtBQVEsR0FBS3UxRCxFQUFZLE9BRTVDRCxJQUFPQSxFQUFNbGxFLE1BQU00UCxLQUFPLFFBSXRDb1YsRUFBV2hsQixNQUFNaXNCLFdBQWEsSUFTbENtNUMsWUFBYSxTQUFVMThELEVBQVMyOEQsRUFBZXJuRSxHQUMzQ2tCLEtBQUs4K0MsSUFBSW9uQixZQUFZMThELEVBQVMyOEQsRUFBNEIsZ0JBQVozOEQsRUFBNEIsSUFBTTFLLEVBQVEsSUFBTUEsR0FFOUZrQixLQUFLMHpCLFFBQVEvcUIsTUFBSyxJQU10Qnk5RCxZQUFhLFdBQ1RwbUUsS0FBS3FtRSxVQUNMcm1FLEtBQUtzbUUsZ0JBT1RELFFBQVMsV0FDTCxNQUFNL2dELEVBQVU1a0IsRUFBS2k1QixpQkFBaUIzNUIsS0FBS2dyQixtQkFBb0IsY0FDM0QxRixFQUNBQSxFQUFRMWlCLFFBRVJ2QyxFQUFRbUIsUUFBUTB2QixRQUFRdHVCLFNBT2hDQSxNQUFPLFdBQ0gsR0FBbUQsU0FBL0N2QyxFQUFRbUIsUUFBUWdxRCxhQUFhMXFELE1BQU1DLFFBQXZDLENBRUEsR0FBSXdCLEVBQVFva0QsT0FDUjNtRCxLQUFLb21FLG1CQUVMLElBQ0ksTUFBTW4yQixFQUFRandDLEtBQUtrd0MsV0FDbkIsR0FBSUQsRUFBTVksaUJBQW1CWixFQUFNYyxjQUFnQnJ3QyxFQUFLK29CLGFBQWF3bUIsRUFBTVksZ0JBQWlCLENBQ3hGLE1BQU0wMUIsRUFBY3QyQixFQUFNdTJCLHdCQUF3QjVtRCxTQUFTcXdCLEVBQU1nQixhQUNqRSxJQUFLdndDLEVBQUs2L0IsZ0JBQWdCZ21DLEtBQWlCN2xFLEVBQUs0bkMsWUFBWWkrQixHQUFjLENBQ3RFLE1BQU16eUQsRUFBU3BULEVBQUtDLGNBQWM0QixFQUFRZzFELFlBQ3BDa1AsRUFBSy9sRSxFQUFLQyxjQUFjLE1BSTlCLE9BSEFtVCxFQUFPN1MsWUFBWXdsRSxHQUNuQnBtRSxFQUFRbUIsUUFBUTB2QixRQUFRMk8sYUFBYS9yQixFQUFReXlELFFBQzdDdm1FLEtBQUtvekIsU0FBU3F6QyxFQUFJLEVBQUdBLEVBQUksSUFJakN6bUUsS0FBS296QixTQUFTNmMsRUFBTVksZUFBZ0JaLEVBQU1nQixZQUFhaEIsRUFBTWMsYUFBY2QsRUFBTWlCLFdBQ25GLE1BQU94dkMsR0FDTDFCLEtBQUtvbUUsY0FJYjNCLEVBQU1pQyxtQkFDRjFtRSxLQUFLaWdFLFlBQVl3RSxFQUFNa0MsMEJBUS9CdHNDLFVBQVcsU0FBVUwsR0FDWkEsSUFBU0EsRUFBVTM1QixFQUFRbUIsUUFBUTB2QixRQUFReWpCLGtCQUVoRCxNQUFNaXlCLEVBQW9CNW1FLEtBQUswbEUsaUJBQWlCMXJDLEdBQzVDNHNDLEVBQ0E1bUUsS0FBS2svQixnQkFBZ0IwbkMsRUFBa0JobEUsT0FBUWdsRSxFQUFrQjNoRSxZQUMxRCswQixHQUNQQSxFQUFVdDVCLEVBQUsyekIsZ0JBQWdCMkYsR0FBUyxTQUFVeEosR0FBVyxPQUFxQyxJQUE5QkEsRUFBUS9aLFdBQVduUSxRQUFxQyxJQUFyQmtxQixFQUFRN1osWUFBbUIsSUFFN0gzVyxLQUFLb3pCLFNBQVM0RyxFQUFTQSxFQUFRejBCLFlBQVllLE9BQVEwekIsRUFBU0EsRUFBUXowQixZQUFZZSxRQUR2RXRHLEtBQUtvbUUsY0FHbkJwbUUsS0FBSzRDLFNBT2Jpa0UsS0FBTSxXQUNFdGtFLEVBQVFva0QsT0FDUnRtRCxFQUFRbUIsUUFBUWdxRCxhQUFhcWIsT0FFN0J4bUUsRUFBUW1CLFFBQVEwdkIsUUFBUTIxQyxRQVloQ3p6QyxTQUFVLFNBQVUwekMsRUFBVUMsRUFBVUMsRUFBUUMsR0FDNUMsSUFBS0gsSUFBYUUsRUFBUSxPQUN0QkQsRUFBV0QsRUFBU3ZoRSxZQUFZZSxTQUFReWdFLEVBQVdELEVBQVN2aEUsWUFBWWUsUUFDeEUyZ0UsRUFBU0QsRUFBT3poRSxZQUFZZSxTQUFRMmdFLEVBQVNELEVBQU96aEUsWUFBWWUsUUFDaEU1RixFQUFLNi9CLGdCQUFnQnVtQyxLQUNyQkEsRUFBV0EsRUFBU3J3RCxXQUFXc3dELElBQWFELEVBQVNyd0QsV0FBV3N3RCxFQUFXLElBQU1ELEVBQ2pGQyxFQUFXQSxFQUFXLEVBQTBCLElBQXRCRCxFQUFTbndELFNBQWlCLEVBQUltd0QsRUFBU3ZoRSxZQUFjdWhFLEVBQVN2aEUsWUFBWWUsT0FBUyxFQUFJLEdBRWpINUYsRUFBSzYvQixnQkFBZ0J5bUMsS0FDckJBLEVBQVNBLEVBQU92d0QsV0FBV3d3RCxJQUFXRCxFQUFPdndELFdBQVd3d0QsRUFBUyxJQUFNRCxFQUN2RUMsRUFBU0EsRUFBUyxFQUF3QixJQUFwQkQsRUFBT3J3RCxTQUFpQixFQUFJcXdELEVBQU96aEUsWUFBY3loRSxFQUFPemhFLFlBQVllLE9BQVMsRUFBSSxHQUczRyxNQUFNMnBDLEVBQVFqd0MsS0FBSzgrQyxJQUFJdFUsY0FFdkIsSUFDSXlGLEVBQU1pM0IsU0FBU0osRUFBVUMsR0FDekI5MkIsRUFBTWszQixPQUFPSCxFQUFRQyxHQUN2QixNQUFPNzVELEdBR0wsT0FGQWtDLFFBQVFDLEtBQUssZ0NBQWtDbkMsUUFDL0NwTixLQUFLb21FLGNBSVQsTUFBTWdCLEVBQVlwbkUsS0FBS3d2QixlQVV2QixPQVJJNDNDLEVBQVVDLGlCQUNWRCxFQUFVQyxrQkFHZEQsRUFBVUUsU0FBU3IzQixHQUNuQmp3QyxLQUFLdW5FLFdBQVd0M0IsRUFBT2p3QyxLQUFLd3ZCLGdCQUN4Qmp0QixFQUFRb2tELFFBQVEzbUQsS0FBS3FtRSxVQUVsQnAyQixHQU1YdTNCLFlBQWEsV0FDVHhuRSxLQUFLMmhFLFVBQVVXLE9BQVMsS0FDeEJ0aUUsS0FBSzJoRSxVQUFVWSxlQUFpQixLQUM1QnZpRSxLQUFLcXVDLFVBQVVydUMsS0FBS3d2QixlQUFlNjNDLGtCQUN2Q3JuRSxLQUFLeW5FLGNBQWMsS0FPdkJ2M0IsU0FBVSxXQUNOLE1BQU1ELEVBQVFqd0MsS0FBSzJoRSxVQUFVVyxRQUFVdGlFLEtBQUswbkUsc0JBQ3RDTixFQUFZcG5FLEtBQUt3dkIsZUFDdkIsR0FBSXlnQixFQUFNVSxZQUFjeTJCLEVBQVUxMkIsY0FBZ0Jyd0MsRUFBUW1CLFFBQVEwdkIsUUFBUVosU0FBUzgyQyxFQUFVTyxXQUFZLE9BQU8xM0IsRUFFaEgsR0FBSW0zQixFQUFVUSxXQUFhLEVBRXZCLE9BREE1bkUsS0FBSzJoRSxVQUFVVyxPQUFTOEUsRUFBVVMsV0FBVyxHQUN0QzduRSxLQUFLMmhFLFVBQVVXLE9BQ25CLENBQ0gsTUFBTWx1QyxFQUFLZ3pDLEVBQVVVLFdBQVl4ekMsRUFBSzh5QyxFQUFVTyxVQUFXNzJCLEVBQUtzMkIsRUFBVVcsYUFBYzUyQixFQUFLaTJCLEVBQVVZLFlBQ2pHQyxFQUFldm5FLEVBQUs2cEQsZ0JBQWdCbjJCLEVBQUlFLEdBQ3hDNHpDLEVBQVdELEVBQWF2ZCxXQUFxQyxJQUF4QnVkLEVBQWFsaEUsT0FBZStwQyxHQUFNSyxFQUFLODJCLEVBQWFsaEUsT0FBUyxHQUN4RyxPQUFPL0csS0FBS296QixTQUNSODBDLEVBQVc5ekMsRUFBS0UsRUFDaEI0ekMsRUFBV3AzQixFQUFLSyxFQUNoQisyQixFQUFXNXpDLEVBQUtGLEVBQ2hCOHpDLEVBQVcvMkIsRUFBS0wsS0FZNUJWLGlCQUFrQixTQUFVSCxFQUFPeFIsR0FDL0IsR0FBSXorQixLQUFLbW9FLGVBQWVsNEIsR0FBUSxDQUM1QixNQUFNL2UsRUFBVTd3QixFQUFRbUIsUUFBUTB2QixRQUMxQmszQyxFQUFLMW5FLEVBQUtDLGNBQWM0QixFQUFRZzFELFlBQ3RDNlEsRUFBR2hrRSxVQUFZLE9BQ2Y4c0IsRUFBUTJPLGFBQWF1b0MsRUFBSTNwQyxHQUFhQSxJQUFjdk4sRUFBVXVOLEVBQVV2RSxtQkFBcUJoSixFQUFRNmIsbUJBQ3JHL3NDLEtBQUtvekIsU0FBU2cxQyxFQUFHcjdCLGtCQUFtQixFQUFHcTdCLEVBQUdyN0Isa0JBQW1CLEdBQzdEa0QsRUFBUWp3QyxLQUFLMmhFLFVBQVVXLE9BRTNCLE9BQU9yeUIsR0FPWHpnQixhQUFjLFdBQ1YsTUFBTTQzQyxFQUFZcG5FLEtBQUtpK0QsYUFBZWorRCxLQUFLaStELFlBQVl6dUMsYUFBZXh2QixLQUFLaStELFlBQVl6dUMsZUFBaUJ4dkIsS0FBS2crRCxJQUFJeHVDLGVBS2pILE9BSkt4dkIsS0FBSzJoRSxVQUFVVyxRQUFXamlFLEVBQVFtQixRQUFRMHZCLFFBQVFaLFNBQVM4MkMsRUFBVU8sYUFDdEVQLEVBQVVDLGtCQUNWRCxFQUFVRSxTQUFTdG5FLEtBQUswbkUsd0JBRXJCTixHQU9YcDhDLGlCQUFrQixXQUVkLEdBREszcUIsRUFBUW1CLFFBQVEwdkIsUUFBUVosU0FBU3R3QixLQUFLMmhFLFVBQVVZLGlCQUFpQnZpRSxLQUFLc21FLGdCQUN0RXRtRSxLQUFLMmhFLFVBQVVZLGVBQWdCLENBQ2hDLE1BQU0zZ0IsRUFBZ0JsaEQsRUFBSzJ6QixnQkFBZ0JoMEIsRUFBUW1CLFFBQVEwdkIsUUFBUWxiLFlBQVksU0FBVXdhLEdBQVcsT0FBcUMsSUFBOUJBLEVBQVEvWixXQUFXblEsUUFBcUMsSUFBckJrcUIsRUFBUTdaLFlBQW1CLEdBQ3pLLEdBQUtpckMsRUFJRCxPQURBNWhELEtBQUsyaEUsVUFBVVksZUFBaUIzZ0IsRUFDekJBLEVBSFA1aEQsS0FBS3NtRSxlQU1iLE9BQU90bUUsS0FBSzJoRSxVQUFVWSxnQkFPMUIrRCxhQUFjLFdBQ1YsTUFBTStCLEVBQVdyb0UsS0FBSzgrQyxJQUFJd3BCLGNBQzFCLEdBQUk1bkUsRUFBS2tuRCxlQUFleWdCLEdBRXBCLE9BREFyb0UsS0FBSzJoRSxVQUFVWSxlQUFpQjhGLEVBQ3pCQSxFQUdYLE1BQU1qQixFQUFZcG5FLEtBQUt3dkIsZUFDdkIsSUFBSzQzQyxFQUFXLE9BQU8sS0FDdkIsSUFBSW4zQixFQUFRLEtBR1JBLEVBREFtM0IsRUFBVVEsV0FBYSxFQUNmUixFQUFVUyxXQUFXLEdBRXJCN25FLEtBQUswbkUsc0JBR2pCMW5FLEtBQUt1bkUsV0FBV3QzQixFQUFPbTNCLElBUTNCRyxXQUFZLFNBQVV0M0IsRUFBT20zQixHQUN6QixJQUFJeGxCLEVBQWdCLEtBQ3BCNWhELEtBQUsyaEUsVUFBVVcsT0FBU3J5QixFQUdrQzJSLEVBRHREM1IsRUFBTVUsVUFDRmp3QyxFQUFLK29CLGFBQWF3bUIsRUFBTXUyQiwwQkFBMEN2MkIsRUFBTXUyQix3QkFBd0I1bUQsU0FBU3F3QixFQUFNZ0IsY0FDOUZoQixFQUFNdTJCLHdCQUVYWSxFQUFVbUIsWUFBY25CLEVBQVVVLFdBR3REOW5FLEtBQUsyaEUsVUFBVVksZUFBaUIzZ0IsR0FRcEM4bEIsb0JBQXFCLFdBQ2pCLE1BQU14MkMsRUFBVTd3QixFQUFRbUIsUUFBUTB2QixRQUMxQitlLEVBQVFqd0MsS0FBSzgrQyxJQUFJdFUsY0FFdkIsSUFBSWcrQixFQUFjdDNDLEVBQVE2YixrQkFDdEIvUyxFQUFVLEtBaUJkLE9BaEJLd3VDLEdBTUR4dUMsRUFBVXd1QyxFQUFZeHlELFdBQ2pCZ2tCLElBQ0RBLEVBQVV0NUIsRUFBS0MsY0FBYyxNQUM3QjZuRSxFQUFZdm5FLFlBQVkrNEIsTUFSNUJ3dUMsRUFBYzluRSxFQUFLQyxjQUFjNEIsRUFBUWcxRCxZQUN6Q3Y5QixFQUFVdDVCLEVBQUtDLGNBQWMsTUFDN0I2bkUsRUFBWXZuRSxZQUFZKzRCLEdBQ3hCOUksRUFBUWp3QixZQUFZdW5FLElBU3hCdjRCLEVBQU1pM0IsU0FBU2x0QyxFQUFTLEdBQ3hCaVcsRUFBTWszQixPQUFPbnRDLEVBQVMsR0FFZmlXLEdBU1hrNEIsZUFBZ0IsU0FBVWw0QixHQUN0QixNQUFNdzRCLEVBQU94NEIsRUFBTXUyQix3QkFDbkIsT0FBUTlsRSxFQUFLK29CLGFBQWF3bUIsRUFBTVksaUJBQW1CbndDLEVBQUsrb0IsYUFBYXdtQixFQUFNYyxlQUFrQixVQUFVcHZDLEtBQUs4bUUsRUFBS3QzQyxXQUFhbnhCLEtBQUsrZ0UsYUFBYTdhLE9BQU92a0QsS0FBSzhtRSxFQUFLdDNDLFdBQWF6d0IsRUFBS2s1QixpQkFBaUI2dUMsSUFReE1DLHNCQUF1QixXQUNuQixNQUFNejRCLEVBQVFqd0MsS0FBS2t3QyxXQUNuQixHQUFJbHdDLEtBQUttb0UsZUFBZWw0QixHQUFRLE9BQU8sRUFFdkMsSUFJSTA0QixFQUFTQyxFQUFZQyxFQUpyQi9CLEVBQVc3MkIsRUFBTVksZUFDakJrMkIsRUFBVzkyQixFQUFNZ0IsWUFDakIrMUIsRUFBUy8yQixFQUFNYyxhQUNmazJCLEVBQVNoM0IsRUFBTWlCLFVBR25CLEdBQUl4d0MsRUFBSzYvQixnQkFBZ0J1bUMsR0FRckIsSUFQS0EsRUFBU3J3RCxXQUFXc3dELElBSXJCRCxFQUFXQSxFQUFTcndELFdBQVdzd0QsSUFBYUQsRUFDNUNDLEVBQVcsSUFKWEQsRUFBV0EsRUFBUzNiLFdBQWEyYixFQUNqQ0MsRUFBV0QsRUFBU3ZoRSxZQUFZZSxRQUs3QndnRSxHQUFrQyxJQUF0QkEsRUFBU253RCxVQUFrQm13RCxFQUFTOXdELFlBQ25EOHdELEVBQVdBLEVBQVM5d0QsWUFBYzh3RCxFQUNsQ0MsRUFBVyxFQUduQixHQUFJcm1FLEVBQUs2L0IsZ0JBQWdCeW1DLEdBQVMsQ0FFOUIsSUFEQUEsRUFBU0EsRUFBT3Z3RCxXQUFXd3dELElBQVdELEVBQU83YixXQUFhNmIsRUFDbkRBLEdBQThCLElBQXBCQSxFQUFPcndELFVBQWtCcXdELEVBQU83YixXQUM3QzZiLEVBQVNBLEVBQU83YixVQUVwQjhiLEVBQVNELEVBQU96aEUsWUFBWWUsT0FPaEMsR0FIQXFpRSxFQUFVam9FLEVBQUsrb0IsYUFBYXE5QyxHQUFZem1FLEVBQVFtQixRQUFRMHZCLFFBQVFsYixXQUFhOHdELEVBQzdFOEIsRUFBYTdCLEVBRVRybUUsRUFBS3NwRCxRQUFRMmUsSUFBa0MsSUFBckJBLEVBQVFoeUQsVUFBa0JneUQsRUFBUWx5RCxXQUFXblEsT0FBUyxFQUFJLENBQ3BGLE1BQU13aUUsRUFBWXBvRSxFQUFLc3BELFFBQVEyZSxHQUMvQixJQUFLRyxFQUFXLENBQ1osS0FBT0gsSUFBWWpvRSxFQUFLc3BELFFBQVEyZSxJQUFpQyxJQUFyQkEsRUFBUWh5RCxVQUNoRGd5RCxFQUFVQSxFQUFRbHlELFdBQVdteUQsSUFBZUQsRUFBUXp1QyxvQkFBc0J5dUMsRUFBUW45QixZQUNsRm85QixFQUFhLEVBR2pCLElBQUk5MEQsRUFBU3BULEVBQUtvOUIsaUJBQWlCNnFDLEVBQVMsTUFDeEM3MEQsSUFBV3BULEVBQUs0d0Msc0JBQXNCeDlCLEVBQVEsUUFDOUNBLEVBQVNwVCxFQUFLQyxjQUFjRCxFQUFLaTVCLGlCQUFpQmd2QyxFQUFTam9FLEVBQUt3eEMsUUFBVSxNQUFRM3ZDLEVBQVFnMUQsWUFDMUZvUixFQUFRbC9ELFdBQVdvMkIsYUFBYS9yQixFQUFRNjBELEdBQ3hDNzBELEVBQU83UyxZQUFZMG5FLElBSTNCLEdBQUlqb0UsRUFBS3NwRCxRQUFRMmUsR0FBVSxDQUN2QixNQUFNSSxFQUFZcm9FLEVBQUs0cUMsZUFBZTVxQyxFQUFLNnFDLGdCQUMzQ285QixFQUFRbC9ELFdBQVdvMkIsYUFBYWtwQyxFQUFXSixHQUMzQ0EsRUFBVUksRUFDTkQsR0FDSWhDLElBQWFFLElBQ2JBLEVBQVMyQixFQUNUMUIsRUFBUyxJQWN6QixHQVBBSCxFQUFXNkIsRUFDWDVCLEVBQVc2QixFQUdYRCxFQUFVam9FLEVBQUsrb0IsYUFBYXU5QyxHQUFVM21FLEVBQVFtQixRQUFRMHZCLFFBQVFpNkIsVUFBWTZiLEVBQzFFNEIsRUFBYTNCLEVBRVR2bUUsRUFBS3NwRCxRQUFRMmUsSUFBa0MsSUFBckJBLEVBQVFoeUQsVUFBa0JneUQsRUFBUWx5RCxXQUFXblEsT0FBUyxFQUFJLENBQ3BGLE1BQU13aUUsRUFBWXBvRSxFQUFLc3BELFFBQVEyZSxHQUMvQixJQUFLRyxFQUFXLENBQ1osS0FBT0gsSUFBWWpvRSxFQUFLc3BELFFBQVEyZSxJQUFpQyxJQUFyQkEsRUFBUWh5RCxXQUNoRGt5RCxFQUFZRixFQUFRbHlELFdBQ0ssSUFBckJveUQsRUFBVXZpRSxTQUNkcWlFLEVBQVVFLEVBQVVELEVBQWEsRUFBSUEsRUFBYSxFQUFJQSxLQUFnQixVQUFVam5FLEtBQUtrbkUsRUFBVSxHQUFHMTNDLFVBQVkwM0MsRUFBVSxHQUFNRixFQUFRMXVDLHdCQUEwQjB1QyxFQUFRam9DLGlCQUFtQm9tQyxFQUMzTDhCLEVBQWFBLEVBQWEsRUFBSUQsRUFBUXBqRSxZQUFZZSxPQUFTc2lFLEVBRy9ELElBQUk5MEQsRUFBU3BULEVBQUtvOUIsaUJBQWlCNnFDLEVBQVMsTUFDeEM3MEQsSUFBV3BULEVBQUs0d0Msc0JBQXNCeDlCLEVBQVEsUUFDOUNBLEVBQVNwVCxFQUFLQyxjQUFjRCxFQUFLd3hDLE9BQU9wK0IsR0FBVSxNQUFRdlIsRUFBUWcxRCxZQUNsRW9SLEVBQVFsL0QsV0FBV28yQixhQUFhL3JCLEVBQVE2MEQsR0FDeEM3MEQsRUFBTzdTLFlBQVkwbkUsSUFJM0IsR0FBSWpvRSxFQUFLc3BELFFBQVEyZSxHQUFVLENBQ3ZCLE1BQU1JLEVBQVlyb0UsRUFBSzRxQyxlQUFlNXFDLEVBQUs2cUMsZ0JBQzNDbzlCLEVBQVFsL0QsV0FBV28yQixhQUFha3BDLEVBQVdKLEdBQzNDQSxFQUFVSSxFQUNWSCxFQUFhLEVBQ1RFLElBQWNILEVBQVFqb0MsaUJBQ3RCaGdDLEVBQUtzcEIsV0FBV2c5QyxJQVc1QixPQUxBQSxFQUFTMkIsRUFDVDFCLEVBQVMyQixFQUdUNW9FLEtBQUtvekIsU0FBUzB6QyxFQUFVQyxFQUFVQyxFQUFRQyxJQUNuQyxHQVFYM3pDLG9CQUFxQixTQUFVMjBCLEdBQzNCLElBQUtqb0QsS0FBSzBvRSx3QkFBeUIsTUFBTyxHQUMxQyxJQUFJejRCLEVBQVFqd0MsS0FBS2t3QyxXQUVqQixHQUFJeHZDLEVBQUsrb0IsYUFBYXdtQixFQUFNWSxnQkFBaUIsQ0FDekMsTUFBTWp4QixFQUFXdmYsRUFBUW1CLFFBQVEwdkIsUUFBUXRSLFNBQ3pDLEdBQXdCLElBQXBCQSxFQUFTdFosT0FBYyxNQUFPLEdBQ2xDdEcsS0FBS296QixTQUFTeFQsRUFBUyxHQUFJLEVBQUdBLEVBQVNBLEVBQVN0WixPQUFTLEdBQUlzWixFQUFTQSxFQUFTdFosT0FBUyxHQUFHZixZQUFZaUQsT0FBT2xDLFFBQzlHMnBDLEVBQVFqd0MsS0FBS2t3QyxXQUdqQixNQUFNNDJCLEVBQVc3MkIsRUFBTVksZUFDakJtMkIsRUFBUy8yQixFQUFNYyxhQUNmaTRCLEVBQVkvNEIsRUFBTXUyQix3QkFHbEJ5QyxFQUFZdm9FLEVBQUt1d0IsZ0JBQWdCKzNDLEdBQVcsU0FBVXg0QyxHQUN4RCxPQUFPeTNCLEVBQWFBLEVBQVd6M0IsR0FBVzl2QixFQUFLNi9CLGdCQUFnQi9QLE1BSW5FLEdBREs5dkIsRUFBSytvQixhQUFhdS9DLElBQWV0b0UsRUFBS3UvQixxQkFBcUIrb0MsSUFBWUMsRUFBVWpOLFFBQVF0N0QsRUFBS285QixpQkFBaUJrckMsRUFBVyxPQUMzSGxDLElBQWFFLEdBQStCLElBQXJCaUMsRUFBVTNpRSxPQUFjLE9BQU8yaUUsRUFFMUQsSUFBSUMsRUFBWXhvRSxFQUFLbzlCLGlCQUFpQmdwQyxFQUFVLE1BQzVDcUMsRUFBVXpvRSxFQUFLbzlCLGlCQUFpQmtwQyxFQUFRLE1BQ3hDb0MsRUFBVyxLQUNYQyxFQUFTLEtBRWIsTUFBTUMsRUFBWSxTQUFVOTRDLEdBQ3hCLE9BQU85dkIsRUFBS3FwRCxRQUFRdjVCLElBQVcsV0FBVzd1QixLQUFLNnVCLEVBQVFXLFdBRzNELElBQUlvNEMsRUFBZTdvRSxFQUFLNHdDLHNCQUFzQjQzQixFQUFXSSxHQUNyREUsRUFBYTlvRSxFQUFLNHdDLHNCQUFzQjYzQixFQUFTRyxHQUNqRDVvRSxFQUFLcXBELFFBQVF3ZixJQUFpQjdvRSxFQUFLMC9CLFdBQVdtcEMsRUFBYTkvRCxjQUFhOC9ELEVBQWVBLEVBQWE5L0QsWUFDcEcvSSxFQUFLcXBELFFBQVF5ZixJQUFlOW9FLEVBQUswL0IsV0FBV29wQyxFQUFXLy9ELGNBQWErL0QsRUFBYUEsRUFBVy8vRCxZQUVoRyxNQUFNZ2dFLEVBQVlGLElBQWlCQyxFQUNuQyxJQUFLLElBQW1DcnFDLEVBQS9CdGhDLEVBQUksRUFBRzRKLEVBQU13aEUsRUFBVTNpRSxPQUFjekksRUFBSTRKLEVBQUs1SixJQUduRCxHQUZBc2hDLEVBQU84cEMsRUFBVXByRSxHQUVicXJFLElBQWMvcEMsSUFBVXNxQyxHQUFhdHFDLElBQVNvcUMsRUFDOUNILEVBQVd2ckUsT0FJZixHQUFJc3JFLElBQVlocUMsSUFBVXNxQyxHQUFhdHFDLElBQVNxcUMsRUFBYSxDQUN6REgsRUFBU3hyRSxFQUNULE1BT1IsT0FIaUIsT0FBYnVyRSxJQUFtQkEsRUFBVyxHQUNuQixPQUFYQyxJQUFpQkEsRUFBU0osRUFBVTNpRSxPQUFTLEdBRTFDMmlFLEVBQVV2M0QsTUFBTTAzRCxFQUFVQyxFQUFTLElBUzlDbDVCLGlDQUFrQyxTQUFVdTVCLEdBQ3hDLE1BQU1WLEVBQVlocEUsS0FBS2t3QyxXQUFXczJCLHdCQUM1Qm1ELEVBQWNqcEUsRUFBS2k1QixpQkFBaUJxdkMsRUFBV3RvRSxFQUFLNG5DLGFBQ3BEc2hDLEVBQWdCbHBFLEVBQUtxcEQsUUFBUWlmLEdBQy9CaHBFLEtBQUtzekIsb0JBQW9CLE1BQ3pCdHpCLEtBQUtzekIsb0JBQW9CLFNBQVU5QyxHQUMvQixNQUFNK0QsRUFBWXYwQixLQUFLMjVCLGlCQUFpQm5KLEVBQVN4d0IsS0FBS3NvQyxhQUN0RCxPQUFRdG9DLEtBQUt1Z0MsZ0JBQWdCL1AsTUFBYytELEdBQWFBLElBQWNvMUMsSUFBa0IzcEUsS0FBS3NvQyxZQUFZOVgsS0FBYXh3QixLQUFLODlCLGlCQUFpQnROLElBQzlJbnhCLEtBQUtxQixJQUVYLEdBQUlncEUsRUFDQSxJQUFLLElBQUk3ckUsRUFBSSxFQUFHNEosRUFBTW1pRSxFQUFjdGpFLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ2pELElBQUssSUFBSWkxQyxFQUFJajFDLEVBQUksRUFBR2kxQyxHQUFLLEVBQUdBLElBQ3hCLEdBQUk4MkIsRUFBYzkyQixHQUFHeGlCLFNBQVNzNUMsRUFBYy9yRSxJQUFLLENBQzdDK3JFLEVBQWMzZ0UsT0FBT3BMLEVBQUcsR0FDeEJBLElBQUs0SixJQUNMLE1BTWhCLE9BQU9taUUsR0FVWEMsWUFBYSxTQUFVcHJDLEVBQVcwdUIsRUFBUWhnQixHQUN0QyxNQUFnQixRQUFSQSxHQUE0QixJQUFYZ2dCLEtBQW9CaGdCLEdBQWUsVUFBUkEsS0FBcUIxTyxFQUFVN25CLFdBQXdCLElBQVh1MkMsS0FBb0JoZ0IsR0FBZSxRQUFSQSxNQUFvQjFPLEVBQVU3bkIsV0FBYXUyQyxJQUFXMXVCLEVBQVU3bkIsVUFBVXRRLFFBV3pNd2pFLGNBQWUsU0FBVXR6RCxFQUFNMjJDLEVBQVFoZ0IsR0FDbkMsSUFBS250QyxLQUFLNnBFLFlBQVlyekQsRUFBTTIyQyxFQUFRaGdCLEdBQU0sT0FBTyxFQUVqRCxNQUFNcG1DLEVBQVMsR0FFZixJQURBb21DLEVBQWMsVUFBUkEsRUFBa0Isa0JBQW9CLGNBQ3JDMzJCLElBQVM5VixFQUFLNi9CLGdCQUFnQi9wQixLQUFVOVYsRUFBSytvQixhQUFhalQsSUFBTyxDQUNwRSxHQUFLQSxFQUFLMjJCLE1BQVN6c0MsRUFBS3NwRCxRQUFReHpDLEVBQUsyMkIsS0FBVTMyQixFQUFLMjJCLEdBQUtBLElBSXJELE9BQU8sS0FIZSxJQUFsQjMyQixFQUFLRyxVQUFnQjVQLEVBQU80QixLQUFLNk4sRUFBSzhuQixXQUFVLElBQ3BEOW5CLEVBQU9BLEVBQUsvTSxXQU1wQixPQUFPMUMsR0FNWG1zQixZQUFhLFdBQ1Q3eUIsRUFBUW1CLFFBQVE0NkQsUUFBUXQ3RCxNQUFNQyxRQUFVLFNBTTVDMHlCLGFBQWMsV0FDVnB6QixFQUFRbUIsUUFBUTQ2RCxRQUFRdDdELE1BQU1DLFFBQVUsUUFXNUNxK0IsZ0JBQWlCLFNBQVU1OUIsRUFBU3VvRSxHQUNoQyxJQUFLdm9FLElBQVlBLEVBQVFpSSxXQUFZLE9BQU8sS0FFNUMsTUFBTXVnRSxFQUFrQnRwRSxFQUFLbzlCLGlCQUFpQjk5QixLQUFLZ3JCLG1CQUFvQixNQUN2RSxJQUFJdUksRUFBVSxLQUNkLElBQUs3eUIsRUFBSzYvQixnQkFBZ0IvK0IsSUFBWWQsRUFBS29uRCxvQkFBb0JraUIsR0FBbUJ4b0UsRUFBUWlJLFlBQ3RGOHBCLEVBQVU3eUIsRUFBS0MsY0FBYyxVQUMxQixDQUNILE1BQU1zcEUsRUFBY0YsRUFBb0MsaUJBQWZBLEVBQTBCQSxFQUFhQSxFQUFXNTRDLFVBQWF6d0IsRUFBSzYvQixnQkFBZ0J5cEMsSUFBcUJ0cEUsRUFBS3UvQixxQkFBcUIrcEMsSUFBcUJ0cEUsRUFBS29uRCxvQkFBb0JraUIsR0FBK0N6bkUsRUFBUWcxRCxXQUFuQ3lTLEVBQWdCNzRDLFNBQzlQb0MsRUFBVTd5QixFQUFLQyxjQUFjc3BFLEdBQzdCMTJDLEVBQVFudkIsVUFBWSxRQUNmMmxFLEdBQW9DLGlCQUFmQSxJQUE4QkEsR0FBY3JwRSxFQUFLNi9CLGdCQUFnQnlwQyxLQUN2RnRwRSxFQUFLMG5ELGtCQUFrQjcwQixFQUFTdzJDLEdBQWNDLEVBQWlCLENBQUMsT0FPeEUsT0FISXRwRSxFQUFLd3hDLE9BQU8xd0MsR0FBVUEsRUFBUXErQixhQUFhdE0sRUFBUy94QixFQUFRMDRCLG9CQUMzRDE0QixFQUFRaUksV0FBV28yQixhQUFhdE0sRUFBUy94QixFQUFRMDRCLG9CQUUvQzNHLEdBWVh3TCxnQkFBaUIsU0FBVXY5QixFQUFTODlCLEVBQWdCNHFDLEVBQWdCQyxHQUNoRSxHQUFJbnFFLEtBQUt5L0QsWUFBZXlLLElBQW1CbHFFLEtBQUtrcUUsZUFBZTFvRSxFQUFTLE1BQ3BFLE9BQU8sS0FHWCxNQUFNN0MsRUFBSXFCLEtBQUtvcUUsYUFDZnBxRSxLQUFLb3dDLGlCQUFpQnB3QyxLQUFLa3dDLFdBQVl2eEMsRUFBRTgvQixXQUN6QyxJQUFJMlEsRUFBUSxLQUNSd1MsRUFBZ0I1aEQsS0FBS2dyQixtQkFDckJxL0MsRUFBVzNwRSxFQUFLbzlCLGlCQUFpQjhqQixFQUFlLE1BRXBELEdBQUlsaEQsRUFBSzAvQixXQUFXaXFDLEdBQ2hCcnFFLEtBQUt3ekIsV0FBV2h5QixFQUFTb2dELElBQWtCeW9CLEVBQVcsS0FBTzFyRSxFQUFFOC9CLFVBQVUrTSxhQUFhLEdBQ2pGaHFDLEVBQVFncUMsYUFBYWhxQyxFQUFRaUksV0FBV3hJLFlBQVlQLEVBQUtDLGNBQWMsV0FDekUsQ0FDSCxHQUFJWCxLQUFLa3dDLFdBQVdTLFlBQXVDLElBQXpCaHlDLEVBQUU4L0IsVUFBVTluQixVQUFrQmpXLEVBQUtzcEQsUUFBUXJyRCxFQUFFOC9CLFlBQWEsQ0FDeEYsTUFBTTZyQyxFQUFjNXBFLEVBQUtpNUIsaUJBQWlCaDdCLEVBQUU4L0IsVUFBVyxTQUFVak8sR0FBVyxPQUFPeHdCLEtBQUtpZ0MscUJBQXFCelAsSUFBWW54QixLQUFLcUIsSUFDOUgwdUMsRUFBUTF1QyxFQUFLOC9CLGFBQWE3aEMsRUFBRTgvQixVQUFXOS9CLEVBQUV3dUQsT0FBU21kLEVBQWtCNXBFLEVBQUtteUMsZ0JBQWdCeTNCLEdBQWUsRUFBeEMsR0FDNURsN0IsSUFBT2k3QixFQUFXajdCLEVBQU0xTyxpQkFFaEMxZ0MsS0FBS3d6QixXQUFXaHlCLEVBQVNkLEVBQUt1L0IscUJBQXFCb3FDLEdBQVksS0FBT0EsR0FBVSxHQUM1RUEsR0FBWTNwRSxFQUFLc3dDLG1CQUFtQnE1QixJQUFXM3BFLEVBQUtzcEIsV0FBV3FnRCxHQUd2RSxJQUFLRixFQUFXLENBQ1pucUUsS0FBS296QixTQUFTNXhCLEVBQVMsRUFBR0EsRUFBUyxHQUVuQyxNQUFNb2xFLEVBQW9CNW1FLEtBQUswbEUsaUJBQWlCbGtFLEdBQzVDb2xFLEVBQ0E1bUUsS0FBS2svQixnQkFBZ0IwbkMsRUFBa0JobEUsT0FBUWdsRSxFQUFrQjNoRSxZQUMxRG1xQyxJQUNQQSxFQUFRMXVDLEVBQUtrekMsa0JBQWtCeEUsRUFBTyxNQUFNaGIsSUFBTWdiLEVBQ2xEcHZDLEtBQUtvekIsU0FBU2djLEVBQU8sRUFBR0EsRUFBTyxJQU92QyxPQUZLOVAsR0FBZ0J0L0IsS0FBSzB6QixRQUFRL3FCLEtBQUssR0FFaEN5bUMsR0FBUzV0QyxHQVNwQmtrRSxpQkFBa0IsU0FBVWxrRSxHQUN4QixJQUFLeEIsS0FBSytnRSxhQUFhQyxjQUFnQngvRCxFQUFTLE9BQU8sS0FFdkQsSUFBSUksRUFBUXFELEVBUVosT0FQSSxZQUFZdEQsS0FBS0gsRUFBUTJ2QixXQUFhLGVBQWV4dkIsS0FBS0gsRUFBUVosY0FDbEVnQixFQUFTSixFQUFROEMsY0FBY3RFLEtBQUsrZ0UsYUFBYUMsZUFFaERwL0QsR0FBVUosRUFBUTJ2QixVQUFZbnhCLEtBQUsrZ0UsYUFBYTdhLE9BQU92a0QsS0FBS0gsRUFBUTJ2QixZQUNyRXZ2QixFQUFTSixHQUdUSSxJQUNBcUQsRUFBYWpGLEtBQUsrZ0UsYUFBYUcsVUFBVXQvRCxFQUFPdXZCLFNBQVN6akIsZUFDckR6SSxHQUNPLENBQ0hyRCxPQUFRQSxFQUNSMnlCLFVBQVc3ekIsRUFBS2k1QixpQkFBaUIvM0IsRUFBUWxCLEVBQUs0bkMsYUFDOUNyakMsV0FBWUEsR0FLakIsTUFRWGk2QixnQkFBaUIsU0FBVTE5QixFQUFTeUQsR0FDaEMsR0FBSXZFLEVBQUtzbkQsc0JBQXNCdG5ELEVBQUtpNUIsaUJBQWlCbjRCLEVBQVNkLEVBQUs0bkMsZUFBaUI1bkMsRUFBS3NuRCxzQkFBc0J4bUQsR0FBVSxPQUFPLEVBQzNIeEIsS0FBS3F1QyxVQUFVcnVDLEtBQUs0QyxRQUN6QixNQUFNMm5FLEVBQVN2cUUsS0FBSzhCLFFBQVFtRCxHQUN2QnNsRSxHQUNMbmtFLEVBQUc2NkIsV0FBVyxXQUNtQixtQkFBbEJzcEMsRUFBT2x4QyxRQUF1QnI1QixLQUFLaTVCLFdBQVdoMEIsRUFBWXNsRSxFQUFPbHhDLE9BQU9oNkIsS0FBS1csS0FBTXdCLEdBQVUsTUFDeEd4QixLQUFLd3FFLHlCQUF5QmhwRSxJQUNoQ25DLEtBQUtXLFFBUVh3cUUseUJBQTBCLFNBQVVocEUsR0FFaEN4QixLQUFLbzBELGFBQWF0ekQsTUFBTUMsUUFBVSxPQUNsQyxNQUFNMDlCLEVBQVkvOUIsRUFBS2k1QixpQkFBaUJuNEIsRUFBU2QsRUFBSzRuQyxhQUNoRG1pQyxFQUFVcHFFLEVBQVFtQixRQUFRODZELGNBQWN4N0QsTUFDeEM0cEUsRUFBVXJxRSxFQUFRbUIsUUFBUSs2RCxjQUFjejdELE1BQ3hDYyxFQUFpRSxVQUF4RDVCLEtBQUtLLFFBQVFtMEIsU0FBU20yQyxnQkFBZ0I3cEUsTUFBTUMsUUFBc0JmLEtBQUtLLFFBQVFtMEIsU0FBU20yQyxnQkFBa0JucEUsRUFFbkhxdUMsRUFBU252QyxFQUFLMC9CLFdBQVczQixFQUFVaDFCLFlBQ3pDLElBQUltaEUsRUFBY0MsRUFBUzNuRSxHQUV2QjJzQyxFQUFVcFIsRUFBVWlDLGdCQUFtQmhnQyxFQUFLNi9CLGdCQUFnQjlCLEVBQVV4RSx5QkFVdEV3d0MsRUFBUTFwRSxRQUFVLFFBVGxCZixLQUFLMmhFLFVBQVVzQixlQUFpQnhrQyxFQUNoQ29zQyxFQUFVeHFFLEVBQVFtQixRQUFRMHZCLFFBQVF5NkIsVUFDbENpZixFQUFlbHFFLEVBQUs2cUQsVUFBVS9wRCxFQUFTbkIsRUFBUW1CLFFBQVFncUQsY0FBY3A3QixJQUFNeTZDLEVBQzNFM25FLEVBQUt0QixFQUFPdXVCLFlBQWMsRUFBSyxFQUUvQnM2QyxFQUFRcjZDLElBQU93NkMsRUFBZUMsRUFBVSxHQUFNLEtBQzlDSixFQUFRLzVELEtBQVFoUSxFQUFLNnFELFVBQVUzcEQsR0FBUThPLEtBQU94TixFQUFLLEtBQ25EdW5FLEVBQVExcEUsUUFBVSxVQUtsQjh1QyxFQUFVcFIsRUFBVStNLFlBQWU5cUMsRUFBSzYvQixnQkFBZ0I5QixFQUFVdkUscUJBWWxFd3dDLEVBQVEzcEUsUUFBVSxRQVhiNnBFLElBQ0Q1cUUsS0FBSzJoRSxVQUFVc0IsZUFBaUJ4a0MsRUFDaENvc0MsRUFBVXhxRSxFQUFRbUIsUUFBUTB2QixRQUFReTZCLFVBQ2xDaWYsRUFBZWxxRSxFQUFLNnFELFVBQVUvcEQsRUFBU25CLEVBQVFtQixRQUFRZ3FELGNBQWNwN0IsSUFBTXk2QyxFQUMzRTNuRSxFQUFLdEIsRUFBT3V1QixZQUFjLEVBQUssR0FHbkN1NkMsRUFBUXQ2QyxJQUFPdzZDLEVBQWVocEUsRUFBT3lGLGFBQWV3akUsRUFBVSxHQUFNLEtBQ3BFSCxFQUFRaDZELEtBQVFoUSxFQUFLNnFELFVBQVUzcEQsR0FBUThPLEtBQU85TyxFQUFPdXVCLFlBQWNqdEIsRUFBSSxHQUFNLEtBQzdFd25FLEVBQVEzcEUsUUFBVSxVQU0xQitwRSxvQkFBcUIsU0FBVTE3QixFQUFPM2xDLElBQ2xDLFNBQVUyZ0QsRUFBYzU1QixHQUNwQnB3QixFQUFLMnFFLFlBQVl2NkMsRUFBUy9tQixHQUMxQixNQUFNZ04sRUFBYStaLEVBQVEvWixXQUMzQixJQUFLLElBQUk1WSxFQUFJLEVBQUc0SixFQUFNZ1AsRUFBV25RLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzlDdXNELEVBQWMzekMsRUFBVzVZLElBSmpDLENBTUd1eEMsSUFHUDI3QixZQUFhLFNBQVUzN0IsRUFBTzNsQyxHQUMxQixJQUFLL0ksRUFBS2luRCxtQkFBbUJ2WSxHQUFRLE9BRXJDLE1BQU00N0IsR0FBVzU3QixFQUFNdHVDLE1BQU1zbkMsUUFBUTkyQixNQUFNLFlBQWMsSUFBSWhKLEtBQUksU0FBU0MsR0FBSSxPQUFPQSxFQUFFQyxVQUNqRjJvQixFQUFXaWUsRUFBTWplLFNBQ3ZCLEdBQUksVUFBVXh2QixLQUFLd3ZCLElBQWdDLElBQW5CNjVDLEVBQVExa0UsT0FBYyxPQUFPOG9DLEVBRTdELElBQUk2N0IsR0FBUSxFQTZCWixPQTVCQSxTQUFVN2dCLEVBQWNNLEdBQ3BCLElBQUlocUQsRUFBSytvQixhQUFhaWhDLElBQWNocUQsRUFBS2luRCxtQkFBbUIrQyxHQUE1RCxDQUNBLEdBQUlBLEVBQVN2NUIsV0FBYUEsRUFBVSxDQUNoQzg1QyxHQUFRLEVBQ1IsTUFBTWhzRCxFQUFTeXJDLEVBQVM1cEQsTUFBTXNuQyxRQUFROTJCLE1BQU0sWUFBYyxHQUMxRCxJQUFLLElBQWdDd2hDLEVBQTVCajFDLEVBQUksRUFBRzRKLEVBQU13WCxFQUFPM1ksT0FBV3pJLEVBQUk0SixFQUFLNUosS0FDeENpMUMsRUFBSWs0QixFQUFRdGlFLFFBQVF1VyxFQUFPcGhCLEdBQUcySyxVQUFZLEdBQzNDd2lFLEVBQVEvaEUsT0FBTzZwQyxFQUFHLEdBRzFCLElBQUssSUFBSWoxQyxFQUFJLEVBQUc0SixFQUFNaWpELEVBQVMzSSxVQUFVejdDLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3REdXhDLEVBQU0yUyxVQUFVOTdCLE9BQU95a0MsRUFBUzNJLFVBQVVsa0QsSUFJbER1c0QsRUFBY00sRUFBU25kLGdCQWYzQixDQWdCRzlqQyxHQUVDd2hFLEtBQ003N0IsRUFBTXR1QyxNQUFNc25DLFFBQVU0aUMsRUFBUS80RCxLQUFLLFFBQ3JDbTlCLEVBQU0vNEIsYUFBYSxRQUFTLElBQzVCKzRCLEVBQU1sZCxnQkFBZ0IsVUFFckJrZCxFQUFNNlgsV0FBVzNnRCxRQUNsQjhvQyxFQUFNLzRCLGFBQWEsZ0JBQWlCLFNBSXJDKzRCLEdBWVg1YixXQUFZLFNBQVU0YixFQUFPODdCLEVBQVdoQixHQUNwQyxHQUFJbHFFLEtBQUt5L0QsWUFBZXlLLElBQW1CbHFFLEtBQUtrcUUsZUFBZTk2QixFQUFPLE1BQ2xFLE9BQU8sS0FHWCxJQUlJM2xDLEVBQVkwaEUsRUFBYUMsRUFKekJuN0IsRUFBUWp3QyxLQUFLa3dDLFdBQ2IvUSxFQUFPeitCLEVBQUswL0IsV0FBVzZQLEVBQU11MkIseUJBQTJCdjJCLEVBQU11MkIsd0JBQTBCOWxFLEVBQUtvOUIsaUJBQWlCOTlCLEtBQUtnckIsbUJBQW9CLE1BQ3ZJcWdELEVBQWlCM3FFLEVBQUswL0IsV0FBV2pCLEtBQVV6K0IsRUFBSzAvQixXQUFXZ1AsSUFBVTF1QyxFQUFLbXZDLE9BQU9ULElBRXpDazhCLEVBQWlCLEtBQzdELE1BQU1DLEVBQWE3cUUsRUFBS29uRCxvQkFBb0Izb0IsR0FDdENxc0MsR0FBY0QsSUFBZTdxRSxFQUFLNi9CLGdCQUFnQjZPLElBQVUxdUMsRUFBS3UvQixxQkFBcUJtUCxLQUFZMXVDLEVBQUs0bkMsWUFBWThHLEdBT3pILEdBTElpOEIsSUFDQUQsRUFBZ0JGLEdBQWF4cUUsRUFBS212QyxPQUFPVCxHQUFTalEsRUFBS2dzQixVQUFZaHNCLEVBQUtqRixtQkFDeEVveEMsRUFBaUI1cUUsRUFBS212QyxPQUFPVCxHQUFTalEsR0FBUWlzQyxHQUFpQmpzQyxHQUFNMTFCLGFBR3BFeWhFLElBQWNNLEdBQWE5cUUsRUFBSzRuQyxZQUFZOEcsSUFBVTF1QyxFQUFLdXBELFFBQVE3YSxJQUFTLENBQzdFLE1BQU1xOEIsRUFBU3pyRSxLQUFLNnBFLFlBQVk1NUIsRUFBTWMsYUFBY2QsRUFBTWlCLFVBQVcsT0FDL0R2eUMsRUFBSXFCLEtBQUtvcUUsYUFDVDNyQyxFQUFZOS9CLEVBQUU4L0IsVUFDZGl0QyxFQUFpQmp0QyxJQUFjOS9CLEVBQUUrc0UsZUFBaUJ6N0IsRUFBTVUsVUFBYSxLQUFPaHlDLEVBQUUrc0UsY0FFcEYsR0FBSUwsR0FBa0JLLEVBRWxCLEdBREFKLEVBQTRDLElBQTNCSSxFQUFjLzBELFNBQWlCKzBELEVBQWNqaUUsV0FBYWlpRSxFQUN2RUosRUFBZWg3QyxTQUFTbU8sR0FBWSxDQUNwQyxJQUFJa3RDLEdBQWEsRUFFakIsSUFEQVAsRUFBZ0Izc0MsRUFDVDJzQyxFQUFjM2hFLFlBQWMyaEUsRUFBYzNoRSxhQUFlNmhFLEdBQzVERixFQUFnQkEsRUFBYzNoRSxXQUM5QmtpRSxHQUFhLEVBRWJBLEdBQWNsdEMsSUFBY2l0QyxJQUFlTixFQUFnQkEsRUFBYzUvQixrQkFFN0U0L0IsRUFBZ0IsVUFFakIsR0FBSUMsR0FBa0IzcUUsRUFBSzAvQixXQUFXM0IsS0FBZVUsRUFBS29PLGNBQzdEcE8sRUFBT3orQixFQUFLQyxjQUFjLE1BQzFCMnFFLEVBQWVycUUsWUFBWWsrQixHQUMzQlYsRUFBVXg5QixZQUFZcXFFLEdBQ3RCRixFQUFnQixVQUNiLEdBQTJCLElBQXZCM3NDLEVBQVU5bkIsVUFBa0JqVyxFQUFLc3BELFFBQVF2ckIsSUFBYzRzQyxFQUFnQixDQUM5RSxNQUFNZixFQUFjNXBFLEVBQUtpNUIsaUJBQWlCOEUsRUFBVyxTQUFVak8sR0FBVyxPQUFPeHdCLEtBQUtpZ0MscUJBQXFCelAsSUFBWXh3QixLQUFLb2dDLFdBQVc1UCxJQUFZbnhCLEtBQUtxQixJQUV4SixHQURBd3FFLEVBQVl4cUUsRUFBSzgvQixhQUFhL0IsRUFBVzkvQixFQUFFd3VELE9BQVNtZCxFQUFrQjVwRSxFQUFLbXlDLGdCQUFnQnkzQixHQUFlLEVBQXhDLEdBRzNELEdBQUllLEdBQ1AsR0FBSWxzQyxFQUFLN08sU0FBU21PLEdBQVksQ0FDMUIsTUFBTW10QyxFQUFVbHJFLEVBQUttdkMsT0FBTzFRLEVBQUt3VixrQkFDakMsSUFBSTNDLEVBQVUsS0FDVHk1QixJQUNEejVCLEVBQVU3UyxFQUFLYixXQUFVLEdBQ3pCMFQsRUFBUS93QyxZQUFZaXFFLEVBQVUzbEUsWUFBWWlELE9BQVMwaUUsRUFBWXhxRSxFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxrQkFFeEZxZ0MsSUFDSzU1QixJQUNEQSxFQUFVN1MsRUFBS2IsV0FBVSxHQUN6QjBULEVBQVEvd0MsWUFBWVAsRUFBSzRxQyxlQUFlNXFDLEVBQUs2cUMsa0JBRWpEeUcsRUFBUS93QyxZQUFZaytCLEVBQUt3VixtQkFFekIzQyxJQUNBN1MsRUFBSzExQixXQUFXbzJCLGFBQWFtUyxFQUFTN1MsRUFBS2pGLG9CQUMzQ2t4QyxFQUFnQkYsRUFBWWw1QixTQUlwQ2s1QixFQUFZQSxFQUFVeHFDLHFCQXRCdEIwcUMsRUFBZ0JGLEVBQVkvckMsR0EyQnhDOFEsRUFBVWk3QixHQUFjTSxFQUE0RHhyRSxLQUFLa3dDLFdBQXBEbHdDLEtBQUtvd0MsaUJBQWlCcHdDLEtBQUtrd0MsV0FBWSxNQUM1RSxNQUFNODRCLEVBQVkvNEIsRUFBTXUyQix3QkFDbEJPLEVBQVc5MkIsRUFBTWdCLFlBQ2pCZzJCLEVBQVNoM0IsRUFBTWlCLFVBQ2YyNkIsRUFBYzU3QixFQUFNWSxpQkFBbUJtNEIsR0FBYXRvRSxFQUFLNi9CLGdCQUFnQnlvQyxHQUN6RWxDLEVBQVcrRSxJQUFlN0MsRUFBVXZ5RCxXQUFXc3dELElBQWFpQyxFQUFVdnlELFdBQVcsS0FBOEJ3NUIsRUFBTVksZUFDckhtMkIsRUFBUzZFLElBQWU3QyxFQUFVdnlELFdBQVd3d0QsSUFBVytCLEVBQVV2eUQsV0FBV3V5RCxFQUFVdnlELFdBQVduUSxPQUFTLEtBQTRCMnBDLEVBQU1jLGFBRW5KLElBQUtzNkIsRUFDRCxHQUFLSCxFQXVGRHpoRSxFQUFheWhFLEVBQVV6aEUsV0FDdkJ5aEUsRUFBWUEsRUFBVTEvQixZQUN0QjIvQixHQUFjLE9BbEZkLEdBTkExaEUsRUFBYXE5RCxFQUNhLElBQXRCQSxFQUFTbndELFdBQ1RsTixFQUFhcTlELEVBQVNyOUQsWUFJdEJ3bUMsRUFBTVUsVUFDTixHQUEyQixJQUF2QnE0QixFQUFVcnlELFNBQ2lDdTBELEVBQXZDbEMsRUFBVXpqRSxZQUFZZSxPQUFTMmdFLEVBQW9CK0IsRUFBVTFiLFVBQVUyWixHQUMxRCtCLEVBQVV4OUIsaUJBRTNCLEdBQUs5cUMsRUFBS3NwRCxRQUFRdmdELEdBY2R5aEUsRUFBWXpoRSxFQUNaQSxFQUFhQSxFQUFXQSxlQWZHLENBQzNCLElBQUl2TCxFQUFJdUwsRUFBV2dOLFdBQVdzd0QsR0FDOUIsTUFBTVksRUFBYXpwRSxHQUFvQixJQUFmQSxFQUFFeVksVUFBa0JqVyxFQUFLc3dDLG1CQUFtQjl5QyxJQUFNd0MsRUFBS3NwRCxRQUFROXJELEVBQUVzdEMsYUFBZ0J0dEMsRUFBRXN0QyxZQUFjdHRDLEVBQ3JIeXBFLEdBQ0tBLEVBQVVuOEIsYUFBZTlxQyxFQUFLc3BELFFBQVEyZCxJQUN2Q2wrRCxFQUFXb04sWUFBWTh3RCxHQUN2QnVELEVBQVksTUFFWkEsRUFBYXhxRSxFQUFLc3BELFFBQVEyZCxLQUFlam5FLEVBQUtzcEQsUUFBUTVhLEdBQVV1NEIsRUFBWUEsRUFBVW44QixZQUcxRjAvQixFQUFZLFNBT3JCLENBRUgsR0FEd0JwRSxJQUFhRSxFQUNoQixDQUNxQmtFLEVBQWxDbHJFLEtBQUs2cEUsWUFBWTdDLEVBQVFDLEdBQXFCRCxFQUFPeDdCLFlBQ3hDdzdCLEVBQU8xWixVQUFVMlosR0FFbEMsSUFBSW1ELEVBQWF0RCxFQUNaOW1FLEtBQUs2cEUsWUFBWS9DLEVBQVVDLEtBQVdxRCxFQUFhdEQsRUFBU3haLFVBQVV5WixJQUUzRXQ5RCxFQUFXb04sWUFBWXV6RCxHQUNjLElBQWpDM2dFLEVBQVdnTixXQUFXblEsUUFBZ0JrbEUsSUFDdEMvaEUsRUFBV3JGLFVBQVksWUFHMUIsQ0FDRCxNQUFNMG5FLEVBQWE5ckUsS0FBS29xRSxhQUNsQjNyQyxFQUFZcXRDLEVBQVdydEMsVUFDdkJpdEMsRUFBZ0JJLEVBQVdKLGNBVWpDLEdBUklqdEMsR0FBNkMsSUFBaENBLEVBQVVob0IsV0FBV25RLFFBQWdCa2xFLElBQzlDOXFFLEVBQUs2L0IsZ0JBQWdCOUIsR0FDckJBLEVBQVVyNkIsVUFBWSxPQUNmMUQsRUFBS3UvQixxQkFBcUJ4QixLQUNqQ0EsRUFBVXI2QixVQUFZLElBQU03QixFQUFRZzFELFdBQWEsVUFBWWgxRCxFQUFRZzFELFdBQWEsTUFJdEY3MkQsRUFBSzAvQixXQUFXM0IsSUFBaUMsSUFBbkIyUSxFQUFNejRCLFNBQ3BDbE4sRUFBYWcxQixFQUNieXNDLEVBQVksVUFDVCxJQUFLTSxHQUFhRSxFQUVyQixHQURBamlFLEVBQXdDLElBQTNCaWlFLEVBQWMvMEQsU0FBaUIrMEQsRUFBY2ppRSxXQUFhaWlFLEVBQ25FamlFLEVBQVc2bUIsU0FBU21PLEdBQVksQ0FDaEMsSUFBSWt0QyxHQUFhLEVBRWpCLElBREFULEVBQVl6c0MsRUFDTHlzQyxFQUFVemhFLFlBQWN5aEUsRUFBVXpoRSxhQUFlQSxHQUNwRHloRSxFQUFZQSxFQUFVemhFLFdBQ3RCa2lFLEdBQWEsRUFFYkEsR0FBY2x0QyxJQUFjaXRDLElBQWVSLEVBQVlBLEVBQVUxL0Isa0JBRXJFMC9CLEVBQVksVUFFVHhxRSxFQUFLK29CLGFBQWFnVixLQUFlLzlCLEVBQUs2L0IsZ0JBQWdCNk8sSUFDN0QzbEMsRUFBYWcxQixFQUFVeDlCLFlBQVlQLEVBQUtDLGNBQWM0QixFQUFRZzFELGFBQzlEMlQsRUFBWSxNQUdaemhFLEdBREF5aEUsRUFBWU0sRUFBWXhFLEVBQVN2b0MsSUFBY2l0QyxFQUFnQmp0QyxFQUFVK00sWUFBYy9NLElBQzFEeXNDLEVBQVV6aEUsV0FBMEJ5aEUsRUFBVXpoRSxXQUF0QnUvRCxFQUd6RCxLQUFPa0MsSUFBY3hxRSxFQUFLNi9CLGdCQUFnQjJxQyxJQUFjQSxFQUFVemhFLGFBQWV1L0QsR0FDN0VrQyxFQUFZQSxFQUFVemhFLFlBVzFDLElBRUksSUFBSzRoRSxFQUFnQixDQU1qQixJQUxJM3FFLEVBQUsrb0IsYUFBYXloRCxJQUFjemhFLElBQWVwSixFQUFRbUIsUUFBUTB2QixRQUFRem5CLGNBQ3ZFQSxFQUFhcEosRUFBUW1CLFFBQVEwdkIsUUFDN0JnNkMsRUFBWSxNQUdaeHFFLEVBQUs2L0IsZ0JBQWdCNk8sSUFBVTF1QyxFQUFLdS9CLHFCQUFxQm1QLEtBQVkxdUMsRUFBSzAvQixXQUFXMzJCLElBQWUvSSxFQUFLNG5DLFlBQVk4RyxHQUFTLENBQzlILE1BQU0yOEIsRUFBWXRpRSxFQUNsQixHQUFJL0ksRUFBS212QyxPQUFPcTdCLEdBQ1p6aEUsRUFBYXloRSxFQUNiQSxFQUFZLFVBQ1QsR0FBSXhxRSxFQUFLMC9CLFdBQVc4cUMsR0FDdkJ6aEUsRUFBYXloRSxFQUFVanhDLHdCQUEwQml4QyxPQUM5QyxJQUFLQyxJQUFnQkQsRUFBVyxDQUNuQyxNQUFNdnNFLEVBQUlxQixLQUFLb3FFLGFBQ1QzckMsRUFBcUMsSUFBekI5L0IsRUFBRTgvQixVQUFVOW5CLFNBQWtCalcsRUFBSzAvQixXQUFXMS9CLEVBQUtvOUIsaUJBQWlCbi9CLEVBQUU4L0IsVUFBVyxPQUFTOS9CLEVBQUU4L0IsVUFBYS85QixFQUFLbzlCLGlCQUFpQm4vQixFQUFFOC9CLFVBQVcsT0FBUzkvQixFQUFFOC9CLFVBQVVoMUIsV0FBZTlLLEVBQUU4L0IsVUFDOUx1dEMsRUFBV3RyRSxFQUFLK29CLGFBQWFnVixJQUFjLzlCLEVBQUt1L0IscUJBQXFCeEIsR0FDM0VoMUIsRUFBYXVpRSxFQUFXdnRDLEVBQVlBLEVBQVVoMUIsV0FDOUN5aEUsRUFBWWMsRUFBVyxLQUFPdnRDLEVBQVUrTSxZQUdSLElBQWhDdWdDLEVBQVV0MUQsV0FBV25RLFFBQWdCbUQsSUFBZXNpRSxHQUFXcnJFLEVBQUtzcEIsV0FBVytoRCxHQVF2RixJQUxJUCxHQUFjRCxHQUFlN3FFLEVBQUt1L0IscUJBQXFCeDJCLElBQWdCL0ksRUFBSzAvQixXQUFXMzJCLElBQWdCL0ksRUFBSytvQixhQUFhaGdCLEtBQ3pIeWhFLEVBQVl6aEUsRUFBV3l3QixtQkFDdkJ6d0IsRUFBYUEsRUFBV0EsWUFHeEIvSSxFQUFLK29CLGFBQWFoZ0IsS0FBbUMsSUFBbkIybEMsRUFBTXo0QixVQUFrQmpXLEVBQUtzcEQsUUFBUTVhLElBQVMsQ0FDaEYsTUFBTTY4QixFQUFRdnJFLEVBQUtDLGNBQWM0QixFQUFRZzFELFlBQ3pDMFUsRUFBTWhyRSxZQUFZbXVDLEdBQ2xCQSxFQUFRNjhCLEdBaUJoQixHQVpJWixFQUNLQyxFQUFlN2hFLFlBSWhCQSxFQUFhNmhFLEVBQ2JKLEVBQVlFLElBSlozaEUsRUFBYXBKLEVBQVFtQixRQUFRMHZCLFFBQzdCZzZDLEVBQVksTUFNaEJBLEVBQVl6aEUsSUFBZXloRSxFQUFZemhFLEVBQVcwaEQsVUFBWStmLEVBRzlEeHFFLEVBQUswL0IsV0FBV2dQLEtBQVcxdUMsRUFBS212QyxPQUFPcG1DLEdBQWEsQ0FDcEQsR0FBSS9JLEVBQUswL0IsV0FBVzMyQixHQUNoQnloRSxFQUFZemhFLEVBQVd5d0IsbUJBQ3ZCendCLEVBQWFBLEVBQVdBLGVBQ3JCLENBQ0gsTUFBTWl5RCxFQUFLaDdELEVBQUtDLGNBQWMsTUFDOUI4SSxFQUFXbzJCLGFBQWE2N0IsRUFBSXdQLEdBQzVCemhFLEVBQWFpeUQsRUFDYndQLEVBQVksS0FFaEJHLEdBQWlCLEVBTXJCLEdBSEFyckUsS0FBSzhxRSxvQkFBb0IxN0IsRUFBTzNsQyxHQUNoQ0EsRUFBV28yQixhQUFhdVAsRUFBTzg3QixHQUUzQkcsRUFDQSxHQUFJM3FFLEVBQUtzd0MsbUJBQW1CN1IsRUFBSzU1QixZQUFZaUQsUUFDekM5SCxFQUFLc3BCLFdBQVdtVixHQUNoQmlRLEVBQVFBLEVBQU0rYixjQUNYLENBQ0gsTUFBTStnQixFQUFTeHJFLEVBQUsrbkQsYUFBYXRwQixFQUFLdmYsU0FBVWxmLEVBQUttdkMsUUFDakRxOEIsSUFDSTk4QixJQUFVODhCLEdBQ1Y5OEIsRUFBTW51QyxZQUFZaXJFLEdBQ2xCOThCLEVBQVE4OEIsRUFBT3hyQyxrQkFFZmozQixFQUFXeEksWUFBWW11QyxHQUN2QkEsRUFBUTNsQyxHQUdSL0ksRUFBS3N3QyxtQkFBbUI3UixFQUFLNTVCLFlBQVlpRCxTQUN6QzlILEVBQUtzcEIsV0FBV21WLEtBS2xDLE1BQU8veEIsR0FDTDNELEVBQVd4SSxZQUFZbXVDLEdBQ3ZCOS9CLFFBQVFDLEtBQUssK0JBQWlDbkMsR0FDaEQsUUFDRSxNQUFNKytELEVBQWExaUUsRUFBV2IsaUJBQWlCLG1CQUMvQyxHQUFJdWpFLEVBQVc3bEUsT0FBUyxFQUNwQixJQUFLLElBQW9DbkksRUFBR0QsRUFBR3dVLEVBQUk4NUMsRUFBMUMzdUQsRUFBSSxFQUFHNEosRUFBTTBrRSxFQUFXN2xFLE9BQTBCekksRUFBSTRKLEVBQUs1SixJQUFLLENBS3JFLElBSkFNLEVBQUlndUUsRUFBV3R1RSxHQUNmNlUsRUFBS3ZVLEVBQUVzWSxXQUNQKzFDLEVBQVNydUQsRUFBRXNMLFdBRUppSixFQUFHLElBQ054VSxFQUFJd1UsRUFBRyxHQUNQODVDLEVBQU8zc0IsYUFBYTNoQyxFQUFHQyxHQUd2QkEsSUFBTWl4QyxJQUFPQSxFQUFRbHhDLEdBQ3pCd0MsRUFBS3NwQixXQUFXN3JCLEdBSXhCLElBQUt1QyxFQUFLNi9CLGdCQUFnQjZPLElBQVUxdUMsRUFBSzRuQyxZQUFZOEcsS0FBVzAzQixJQUFhRSxFQUFRLENBQ2pGLE1BQU1vRixFQUFRMXJFLEVBQUtvOUIsaUJBQWlCa3JDLEVBQVcsTUFDM0NvRCxHQUE0QixJQUFuQkEsRUFBTXoxRCxVQUFrQmpXLEVBQUttcEQsWUFBWXVpQixJQUNsRDFyRSxFQUFLc3BCLFdBQVdvaUQsR0FReEIsR0FKSWIsSUFBZTdxRSxFQUFLNi9CLGdCQUFnQjZPLElBQVUxdUMsRUFBS3UvQixxQkFBcUJtUCxNQUN4RUEsRUFBUXB2QyxLQUFLcXNFLG1CQUFtQmo5QixLQUcvQjF1QyxFQUFLNG5DLFlBQVk4RyxHQUFRLENBQzFCLElBQUkrZCxFQUFTLEVBQ2IsR0FBdUIsSUFBbkIvZCxFQUFNejRCLFNBQWdCLENBQ3RCLE1BQU13eUMsRUFBVy9aLEVBQU0xTyxnQkFDakJ5UixFQUFPL0MsRUFBTTVELFlBQ2I4Z0MsR0FBaUJuakIsR0FBbUMsSUFBdEJBLEVBQVN4eUMsVUFBa0JqVyxFQUFLc3dDLG1CQUFtQm1ZLEdBQWEsR0FBS0EsRUFBUzVqRCxZQUM1R2duRSxHQUFhcDZCLEdBQTBCLElBQWxCQSxFQUFLeDdCLFVBQWtCalcsRUFBS3N3QyxtQkFBbUJtQixHQUFTLEdBQUtBLEVBQUs1c0MsWUFFekY0akQsR0FBWW1qQixFQUFhaG1FLE9BQVMsSUFDbEM4b0MsRUFBTTdwQyxZQUFjK21FLEVBQWVsOUIsRUFBTTdwQyxZQUN6QzdFLEVBQUtzcEIsV0FBV20vQixJQUdoQmhYLEdBQVFBLEVBQUs3ckMsT0FBUyxJQUN0QjhvQyxFQUFNN3BDLGFBQWVnbkUsRUFDckI3ckUsRUFBS3NwQixXQUFXbW9CLElBR3BCLE1BQU1xNkIsRUFBVyxDQUNiL3RDLFVBQVcyUSxFQUNYNkIsWUFBYXE3QixFQUFhaG1FLE9BQzFCNHFDLFVBQVc5QixFQUFNN3BDLFlBQVllLE9BQVNpbUUsRUFBU2ptRSxRQUtuRCxPQUZBdEcsS0FBS296QixTQUFTZ2MsRUFBT285QixFQUFTdjdCLFlBQWE3QixFQUFPbzlCLEVBQVN0N0IsV0FFcERzN0IsRUFDSixJQUFLOXJFLEVBQUtzcEQsUUFBUTVhLEtBQVcxdUMsRUFBSzAvQixXQUFXZ1AsSUFBVTF1QyxFQUFLNi9CLGdCQUFnQjkyQixHQUFhLENBQzVGLElBQUlnakUsRUFBWSxLQUNYcjlCLEVBQU0xTyxrQkFBbUJoZ0MsRUFBS3NwRCxRQUFRNWEsRUFBTTFPLG1CQUM3QytyQyxFQUFZL3JFLEVBQUs0cUMsZUFBZTVxQyxFQUFLNnFDLGdCQUNyQzZELEVBQU0zbEMsV0FBV28yQixhQUFhNHNDLEVBQVdyOUIsSUFHeENBLEVBQU01RCxjQUFlOXFDLEVBQUtzcEQsUUFBUTVhLEVBQU01RCxlQUN6Q2loQyxFQUFZL3JFLEVBQUs0cUMsZUFBZTVxQyxFQUFLNnFDLGdCQUNyQzZELEVBQU0zbEMsV0FBV28yQixhQUFhNHNDLEVBQVdyOUIsRUFBTTVELGNBRy9DOXFDLEVBQUsreEMsb0JBQW9CckQsS0FDekJBLEVBQVFBLEVBQU01RCxZQUNkMmhCLEVBQVMsR0FJakJudEQsS0FBS296QixTQUFTZ2MsRUFBTytkLEVBQVEvZCxFQUFPK2QsR0FNeEMsT0FGQW50RCxLQUFLMHpCLFFBQVEvcUIsTUFBSyxHQUVYeW1DLElBSWZpOUIsbUJBQW9CLFNBQVVqOUIsR0FDMUIsTUFBTTNsQyxFQUFhMmxDLEVBQU0zbEMsV0FDekIsSUFBSWlqRSxFQUFlQyxFQUVuQixLQUFPanNFLEVBQUs2L0IsZ0JBQWdCNk8sSUFBVTF1QyxFQUFLdS9CLHFCQUFxQm1QLElBQVEsQ0FJcEUsSUFIQXM5QixFQUFnQnQ5QixFQUFNMzRCLFdBQ3RCazJELEVBQVksS0FFTEQsRUFBYyxJQUVqQixHQURBQyxFQUFZRCxFQUFjLEdBQ3RCaHNFLEVBQUs2L0IsZ0JBQWdCb3NDLElBQWNqc0UsRUFBS3UvQixxQkFBcUIwc0MsR0FBakUsQ0FFSSxHQURBM3NFLEtBQUtxc0UsbUJBQW1CTSxJQUNuQnY5QixFQUFNM2xDLFdBQVksTUFDdkJpakUsRUFBZ0J0OUIsRUFBTTM0QixnQkFJMUJoTixFQUFXbzJCLGFBQWE4c0MsRUFBV3Y5QixHQUdQLElBQTVCQSxFQUFNMzRCLFdBQVduUSxRQUFjNUYsRUFBS3NwQixXQUFXb2xCLEdBQ25EQSxFQUFRMXVDLEVBQUtDLGNBQWMsTUFDM0I4SSxFQUFXbzJCLGFBQWF1UCxFQUFPdTlCLEVBQVVuaEMsYUFHN0MsT0FBTzRELEdBUVhnN0IsV0FBWSxXQUNScHFFLEtBQUswb0Usd0JBRUwsTUFBTXo0QixFQUFRandDLEtBQUtrd0MsV0FFbkIsR0FBSUQsRUFBTVksaUJBQW1CWixFQUFNYyxhQUFjLENBQzdDLE1BQU02N0IsRUFBZ0Jsc0UsRUFBS2k1QixpQkFBaUJzVyxFQUFNWSxlQUFnQm53QyxFQUFLazVCLGtCQUN2RSxHQUFJZ3pDLEVBQWUsQ0FDZixNQUFNbkcsRUFBSy9sRSxFQUFLQyxjQUFjLE1BQ3hCbVQsRUFBU3BULEVBQUtDLGNBQWM0QixFQUFRZzFELFlBUTFDLE9BUEF6akQsRUFBTzdTLFlBQVl3bEUsR0FFbkIvbEUsRUFBS3NzQyxjQUFjNC9CLEVBQWU5NEQsR0FFbEMxVCxFQUFLZ3pCLFNBQVN0ZixFQUFRLEVBQUdBLEVBQVEsR0FDakM5VCxLQUFLMHpCLFFBQVEvcUIsTUFBSyxHQUVYLENBQ0g4MUIsVUFBVzNxQixFQUNYcTVDLE9BQVEsRUFDUnVlLGNBQWUsT0FLM0IsTUFBTW1CLEVBQW9DLElBQXRCNThCLEVBQU1nQixZQUNwQjY3QixFQUFZMXNFLEVBQUt5cEUsWUFBWTU1QixFQUFNYyxhQUFjZCxFQUFNaUIsVUFBVyxPQUN4RSxJQUFJdzZCLEVBQWdCLEtBQ2hCcUIsRUFBYyxLQUNkQyxFQUFZLEtBQ1pILElBQ0FFLEVBQWNyc0UsRUFBS285QixpQkFBaUJtUyxFQUFNWSxnQkFDdENrOEIsSUFDQXJCLEVBQWdCcUIsRUFBWTl5Qyx1QkFDNUI4eUMsRUFBY3JCLElBR2xCb0IsSUFDQUUsRUFBWXRzRSxFQUFLbzlCLGlCQUFpQm1TLEVBQU1jLGNBQ3hDaThCLEVBQVlBLEVBQVlBLEVBQVU5eUMsbUJBQXFCOHlDLEdBRzNELElBQUl2dUMsRUFBVzB1QixFQUFTLEVBQ3BCMlosRUFBVzcyQixFQUFNWSxlQUNqQm0yQixFQUFTLzJCLEVBQU1jLGFBQ2ZnMkIsRUFBVzkyQixFQUFNZ0IsWUFDakJnMkIsRUFBU2gzQixFQUFNaUIsVUFDbkIsTUFBTTgzQixFQUF3RCxJQUEzQy80QixFQUFNdTJCLHdCQUF3Qjd2RCxVQUFrQnM1QixFQUFNdTJCLHdCQUF3Qi84RCxhQUFlcTlELEVBQVNyOUQsV0FBY3E5RCxFQUFTcjlELFdBQWF3bUMsRUFBTXUyQix3QkFPbkssR0FOSXdDLElBQWNsQyxHQUFZa0MsSUFBY2hDLElBQ3hDRixFQUFXa0MsRUFBVXBwRCxTQUFTbW5ELEdBQzlCQyxFQUFTZ0MsRUFBVXBwRCxTQUFTcW5ELEdBQzVCRixFQUFXRSxFQUFTLElBR25CSCxJQUFhRSxFQUFRLE1BQVEsQ0FDOUJ2b0MsVUFBV3VxQyxFQUNYN2IsT0FBUSxHQUdaLEdBQUkyWixJQUFhRSxHQUFVLzJCLEVBQU1VLFdBQ3pCbTJCLEVBQVN2aEUsYUFBZTdFLEVBQUtzd0MsbUJBQW1CODFCLEVBQVN2aEUsWUFBWTBrQixPQUFPODhDLElBQzVFLE1BQU8sQ0FDSHRvQyxVQUFXcW9DLEVBQ1gzWixPQUFRNFosRUFDUjJFLGNBQWU1RSxHQUFZQSxFQUFTcjlELFdBQWFxOUQsRUFBVyxNQUt4RSxJQUFJbUcsRUFBYSxLQUNiL0IsRUFBWSxLQUVoQixNQUFNejBELEVBQWEvVixFQUFLMnBELGtCQUFrQjJlLEVBQVcsTUFDckQsSUFBSWtFLEVBQWF4c0UsRUFBSys3QyxjQUFjaG1DLEVBQVlxd0QsR0FDNUNxRyxFQUFXenNFLEVBQUsrN0MsY0FBY2htQyxFQUFZdXdELEdBRTlDLEdBQUl2d0QsRUFBV25RLE9BQVMsR0FBSzRtRSxHQUFjLEdBQUtDLEdBQVksRUFBRyxDQUMzRCxJQUFLLElBQUl0dkUsRUFBSXF2RSxFQUFhLEVBQUdFLEVBQVl0RyxFQUFVanBFLEdBQUssRUFBR0EsSUFDbkQ0WSxFQUFXNVksS0FBT3V2RSxFQUFVM2pFLFlBQWNnTixFQUFXNVksR0FBR21ZLGFBQWVvM0QsR0FBMEIsSUFBYnJHLElBQ3BGbUcsRUFBYXJ2RSxFQUNidXZFLEVBQVlBLEVBQVUzakUsWUFJOUIsSUFBSyxJQUFJNUwsRUFBSXN2RSxFQUFXLEVBQUdFLEVBQVVyRyxFQUFRbnBFLEVBQUlxdkUsRUFBWXJ2RSxJQUNyRDRZLEVBQVc1WSxLQUFPd3ZFLEVBQVE1akUsWUFBeUMsSUFBM0JnTixFQUFXNVksR0FBRzhZLFdBQ3RERixFQUFXeE4sT0FBT3BMLEVBQUcsR0FDckJ3dkUsRUFBVUEsRUFBUTVqRSxhQUNoQjBqRSxPQUdQLENBQ0gsR0FBMEIsSUFBdEIxMkQsRUFBV25RLE9BQWMsQ0FDekIsR0FBSTVGLEVBQUs2L0IsZ0JBQWdCeW9DLElBQWN0b0UsRUFBS3UvQixxQkFBcUIrb0MsSUFBY3RvRSxFQUFLK29CLGFBQWF1L0MsSUFBY3RvRSxFQUFLc3BELFFBQVFnZixJQUFjdG9FLEVBQUt1cEQsUUFBUStlLEdBQ25KLE1BQU8sQ0FDSHZxQyxVQUFXdXFDLEVBQ1g3YixPQUFRLEdBRVQsR0FBMkIsSUFBdkI2YixFQUFVcnlELFNBQ2pCLE1BQU8sQ0FDSDhuQixVQUFXdXFDLEVBQ1g3YixPQUFROFosR0FHaEJ4d0QsRUFBVzlOLEtBQUtxZ0UsR0FDaEJsQyxFQUFXRSxFQUFTZ0MsT0FHcEIsR0FEQWxDLEVBQVdFLEVBQVN2d0QsRUFBVyxHQUMzQi9WLEVBQUtzcEQsUUFBUThjLElBQWFwbUUsRUFBS3N3QyxtQkFBbUI4MUIsR0FDbEQsTUFBTyxDQUNIcm9DLFVBQVcvOUIsRUFBS3VwRCxRQUFRK2UsR0FBYUEsRUFBWWxDLEVBQ2pEM1osT0FBUSxHQUtwQitmLEVBQWFDLEVBQVcsRUFHNUIsSUFBSyxJQUFJdHZFLEVBQUlxdkUsRUFBWXJ2RSxHQUFLc3ZFLEVBQVV0dkUsSUFBSyxDQUN6QyxNQUFNcUssRUFBT3VPLEVBQVc1WSxHQUV4QixHQUFvQixJQUFoQnFLLEVBQUs1QixRQUFtQyxJQUFsQjRCLEVBQUt5TyxlQUFnQ2lpRCxJQUFkMXdELEVBQUtzWSxLQUNsRHhnQixLQUFLc3RFLG9CQUFvQnBsRSxRQUk3QixHQUFJQSxJQUFTNCtELEVBdUJiLEdBQUk1K0QsSUFBUzgrRCxFQWlCYmhuRSxLQUFLc3RFLG9CQUFvQnBsRSxPQWpCekIsQ0FDSSxHQUF3QixJQUFwQjgrRCxFQUFPcndELFNBQWdCLENBQ3ZCLEdBQUlqVyxFQUFLNG5DLFlBQVkwK0IsR0FBUyxTQUN6QmtFLEVBQVl4cUUsRUFBSzRxQyxlQUFlMDdCLEVBQU96aEUsa0JBRTVDMmxFLEVBQVl4cUUsRUFBSzRxQyxlQUFlMDdCLEVBQU91RyxjQUFjdEcsRUFBU0QsRUFBTzFnRSxPQUFTMmdFLElBRzlFaUUsRUFBVTVrRSxPQUFTLEVBQ25CMGdFLEVBQU94bUQsS0FBTzBxRCxFQUFVMXFELEtBRXhCeGdCLEtBQUtzdEUsb0JBQW9CdEcsT0FsQ2pDLENBQ0ksR0FBMEIsSUFBdEJGLEVBQVNud0QsU0FBZ0IsQ0FDekIsR0FBSWpXLEVBQUs0bkMsWUFBWXcrQixHQUFXLFNBQzNCbUcsRUFBYXZzRSxFQUFLNHFDLGVBQWV3N0IsRUFBU3ZoRSxrQkFFM0MyQyxJQUFTOCtELEdBQ1RpRyxFQUFhdnNFLEVBQUs0cUMsZUFBZXc3QixFQUFTeUcsY0FBYyxFQUFHeEcsR0FBWUMsRUFBT3VHLGNBQWN0RyxFQUFTRCxFQUFPMWdFLE9BQVMyZ0UsSUFDckg5WixFQUFTNFosR0FFVGtHLEVBQWF2c0UsRUFBSzRxQyxlQUFldzdCLEVBQVN5RyxjQUFjLEVBQUd4RyxJQVVuRSxHQU5Ja0csRUFBVzNtRSxPQUFTLEVBQ3BCd2dFLEVBQVN0bUQsS0FBT3lzRCxFQUFXenNELEtBRTNCeGdCLEtBQUtzdEUsb0JBQW9CeEcsR0FHekI1K0QsSUFBUzgrRCxFQUFRLE9Bd0I3QixNQUFNd0csRUFBUTlzRSxFQUFLaTVCLGlCQUFpQnF0QyxFQUFRLE1BQ3RDeUcsRUFBVS9zRSxFQUFLaTVCLGlCQUFpQm10QyxFQUFVLE1BU2hELEdBUkkwRyxHQUFTQyxHQUFXQSxFQUFRbjlDLFNBQVNrOUMsSUFDckMvdUMsRUFBWSt1QyxFQUFNOXNDLGdCQUNsQnlzQixFQUFTMXVCLEVBQVVsNUIsWUFBWWUsU0FFL0JtNEIsRUFBWXVvQyxHQUFVQSxFQUFPdjlELFdBQWF1OUQsRUFBU0YsR0FBWUEsRUFBU3I5RCxXQUFhcTlELEVBQVk3MkIsRUFBTWMsY0FBZ0JkLEVBQU1ZLGVBQzdIc2MsRUFBVzBmLEdBQWdCQyxFQUFzQkEsRUFBWXJ1QyxFQUFVbDVCLFlBQVllLE9BQVMsRUFBcEQ2bUQsSUFHdkN6c0QsRUFBSytvQixhQUFhZ1YsSUFBOEMsSUFBaENBLEVBQVVob0IsV0FBV25RLE9BQWMsQ0FDcEUsTUFBTW9uRSxFQUFLaHRFLEVBQUswNUIscUJBQXFCcUUsRUFBVyxLQUFNLE1BQ2xEaXZDLElBQUlqdkMsRUFBWWl2QyxFQUFHdDVDLElBQU1zNUMsRUFBR3A1QyxJQUFNajBCLEVBQVFtQixRQUFRMHZCLFNBa0IxRCxPQWZLeHdCLEVBQUtvOUIsaUJBQWlCVyxJQUFnQnFvQyxHQUFZQSxFQUFTcjlELGFBQ3hEdWpFLEdBQ0F2dUMsRUFBWXV1QyxFQUNaN2YsRUFBUyxHQUNGNGYsSUFDUHR1QyxFQUFZc3VDLEVBQ1o1ZixFQUFTLElBS2pCbnRELEtBQUtvekIsU0FBU3FMLEVBQVcwdUIsRUFBUTF1QixFQUFXMHVCLEdBRTVDbnRELEtBQUswekIsUUFBUS9xQixNQUFLLEdBRVgsQ0FDSDgxQixVQUFXQSxFQUNYMHVCLE9BQVFBLEVBQ1J1ZSxjQUFlQSxJQUl2QjRCLG9CQUFxQixTQUFVcGxFLEdBQzNCLE1BQU00TCxFQUFTcFQsRUFBS285QixpQkFBaUI1MUIsRUFBTSxNQUMzQ3hILEVBQUtzcEIsV0FBVzloQixHQUVaeEgsRUFBSzAvQixXQUFXdHNCLEtBRXBCcFQsRUFBSzA1QixxQkFBcUJ0bUIsRUFBUSxLQUFNLE1BRXBDQSxHQUFVcFQsRUFBS212QyxPQUFPLzdCLEVBQU9rQyxhQUM3QmxDLEVBQU8rckIsYUFBYW4vQixFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxnQkFBaUJ6M0IsRUFBT2tDLGNBUTdFZzJCLHdCQUF5QixTQUFVbVUsR0FDL0JuZ0QsS0FBS293QyxpQkFBaUJwd0MsS0FBS2t3QyxXQUFZLE1BQ3ZDLE1BQU15OUIsRUFBYTN0RSxLQUFLbXdDLGtDQUFpQyxHQUN6RCxJQUFLdzlCLEdBQW9DLElBQXRCQSxFQUFXcm5FLE9BQWMsT0FFNUNzbkUsRUFDQSxJQUFLLElBQW9DenVDLEVBQU0wdUMsRUFBUUMsRUFBS0MsRUFBS2g5RCxFQUFHalQsRUFBM0RELEVBQUksRUFBRzRKLEVBQU1rbUUsRUFBV3JuRSxPQUFzQ3pJLEVBQUk0SixFQUFLNUosSUFFNUUsR0FEQXNoQyxFQUFPd3VDLEVBQVc5dkUsR0FDYjZDLEVBQUswL0IsV0FBV2pCLEdBR3JCLEdBREEwdUMsRUFBUzF1QyxFQUFLd1YsaUJBQ1ZrNUIsR0FBVW50RSxFQUFLMC9CLFdBQVdqQixFQUFLakYscUJBQXVCeXpDLEVBQVdqbEUsUUFBUXkyQixFQUFLakYscUJBQXVCLElBQ3JHNnpDLEVBQU1GLEVBQU9sNUIsaUJBQ1RnNUIsRUFBV2psRSxRQUFRcWxFLElBQVEsR0FGbkMsQ0FHUSxJQUFJcHFFLEVBQU8sS0FDWCxLQUFRQSxFQUFPb3FFLEVBQUlwNUIsa0JBQ2YsR0FBSWowQyxFQUFLbXZDLE9BQU9sc0MsR0FBTyxDQUNuQixLQUFJZ3FFLEVBQVdqbEUsUUFBUS9FLEVBQUtneEMsbUJBQXFCLEdBRzdDLFNBQVNpNUIsRUFGVEcsRUFBTXBxRSxFQUFLZ3hDLGlCQU92Qm01QixFQUFNRCxFQUFPOWdDLGtCQUNiaDhCLEVBQUk0OEQsRUFBV2psRSxRQUFRb2xFLEdBQ3ZCaHdFLEVBQUk2dkUsRUFBV2psRSxRQUFRcWxFLEdBQ3ZCSixFQUFXMWtFLE9BQU84SCxFQUFJalQsRUFBSWlULEVBQUssR0FDL0J0SixFQUFNa21FLEVBQVdybkUsWUFNN0IsSUFDSTBuRSxFQUFVQyxFQUFXeGdCLEVBRHJCcmEsRUFBUXU2QixFQUFXQSxFQUFXcm5FLE9BQVMsR0FJdkMwbkUsRUFEQXR0RSxFQUFLdS9CLHFCQUFxQm1ULElBQVMxeUMsRUFBSzYvQixnQkFBZ0I2UyxHQUM3Q0EsRUFFQTF5QyxFQUFLNHdDLHNCQUFzQjhCLEVBQU0sT0FBUzF5QyxFQUFLbzlCLGlCQUFpQnNWLEVBQU0sTUFHakYxeUMsRUFBS3d4QyxPQUFPODdCLElBQ1pDLEVBQVksS0FDWnhnQixFQUFXdWdCLElBRVhDLEVBQVlELEVBQVN4aUMsWUFDckJpaUIsRUFBV3VnQixFQUFTdmtFLFlBR3hCLElBQUl5a0UsRUFBY3h0RSxFQUFLbXlDLGdCQUFnQm03QixHQUNuQ0csRUFBYSxLQUNqQixNQUFNQyxFQUFVLEdBQ1ZDLEVBQWMsU0FBVTdoQixFQUFRcC9CLEVBQVFzekIsR0FDMUMsSUFBSTdNLEVBQUssS0FDVCxHQUFJMlksSUFBV3AvQixJQUFXMXNCLEVBQUtxcEQsUUFBUTM4QixHQUFTLENBQzVDLEdBQUlBLEdBQVUxc0IsRUFBS215QyxnQkFBZ0IyWixLQUFZOXJELEVBQUtteUMsZ0JBQWdCemxCLEdBQVMsT0FBT3N6QixFQUNwRjdNLEVBQUtuekMsRUFBSzA1QixxQkFBcUJoTixFQUFRLEtBQU1vL0IsR0FHakQsT0FBTzNZLEVBQUtBLEVBQUd2ZixHQUFLb3NCLEdBR3hCLElBQUssSUFBb0N2aEIsRUFBTWlULEVBQWNrWSxFQUFPNUosRUFBUTR0QixFQUFVQyxFQUFVVixFQUF2Rmh3RSxFQUFJLEVBQUc0SixFQUFNa21FLEVBQVdybkUsT0FBdUV6SSxFQUFJNEosRUFBSzVKLElBRzdHLEdBRkFzaEMsRUFBT3d1QyxFQUFXOXZFLEdBQ2xCdTBDLEVBQWVqVCxFQUFLMTFCLFdBQ2Yyb0MsSUFBZ0IrTixFQUFhN3ZCLFNBQVM4aEIsR0FJM0MsR0FGQWtZLEVBQVE1cEQsRUFBS215QyxnQkFBZ0IxVCxHQUV6QnorQixFQUFLbXZDLE9BQU91QyxJQWNaLEdBYm1CLE9BQWYrN0IsSUFDSUksR0FDQUosRUFBYUksRUFDYlYsR0FBUyxFQUNUVSxFQUFXLE1BRVhKLEVBQWEvN0IsRUFBYTlULFdBQVUsSUFJNUM4dkMsRUFBUXpsRSxLQUFLdzJCLEdBQ2JtdkMsRUFBV1gsRUFBVzl2RSxFQUFJLEdBRXRCQSxJQUFNNEosRUFBTSxHQUFNNm1FLEdBQVlBLEVBQVM3a0UsYUFBZTJvQyxFQUFlLENBRWpFazhCLEdBQVludkMsRUFBSzdPLFNBQVNnK0MsRUFBUzdrRSxjQUNuQzhrRSxFQUFXRCxFQUFTN2tFLFdBQVc2MEIsV0FBVSxJQUc3QyxJQUFvQzMrQixFQUFoQ2dFLEVBQU95dUMsRUFBYTNvQyxXQUN4QixLQUFPL0ksRUFBS212QyxPQUFPbHNDLElBQ2ZoRSxFQUFJZSxFQUFLQyxjQUFjZ0QsRUFBS3d0QixVQUM1Qnh4QixFQUFFc0IsWUFBWWt0RSxHQUNkQSxFQUFheHVFLEVBQ2JnRSxFQUFPQSxFQUFLOEYsV0FHaEIsTUFBTWtxQyxFQUFPM3pDLEtBQUsrckMseUJBQXlCcUcsRUFBY2c4QixFQUFTLE1BQU0sR0FBTSxHQUUxRUYsR0FBZTVqQixHQUNmNGpCLEVBQWM1akIsRUFDZG1ELEVBQVc5WixFQUFLRSxHQUNoQm82QixFQUFZSSxFQUFZNWdCLEVBQVVyYixFQUFjdUIsRUFBS3JmLElBQ2pEMjVDLElBQVd4Z0IsRUFBV3dnQixFQUFVeGtFLGFBQzdCZ2tELElBQWE5WixFQUFLRSxLQUN6Qm82QixFQUFZdDZCLEVBQUtyZixJQUdqQm01QixJQUFhOVosRUFBS0UsS0FDbEI2TSxFQUFTMnRCLEVBQVk1Z0IsRUFBVTlaLEVBQUtFLEdBQUk2TSxHQUNkdXRCLE9BQVhyVixJQUFYbFksRUFBa0NBLEVBQ3JCL00sRUFBS0UsSUFHMUIsSUFBSyxJQUFJMzFDLEVBQUksRUFBR3ExQyxFQUFPSSxFQUFLNjZCLFlBQVlsb0UsT0FBUXBJLEVBQUlxMUMsRUFBTXIxQyxJQUN0RGl3RSxFQUFXbHRFLFlBQVkweUMsRUFBSzY2QixZQUFZdHdFLElBR3ZDMnZFLEdBQVExdEIsRUFBYWwvQyxZQUFZa3RFLEdBQ2xDSSxHQUFVNTZCLEVBQUs2NkIsWUFBWTc2QixFQUFLNjZCLFlBQVlsb0UsT0FBUyxHQUFHckYsWUFBWXN0RSxHQUN4RUosRUFBYSxLQUNiTixHQUFTLFFBR1RLLEdBQWU1akIsSUFDZjRqQixFQUFjNWpCLEVBQ2RtRCxFQUFXcmIsRUFDWDY3QixFQUFZOXVDLEVBQUtxTSxhQUdyQjJVLEVBQWFsL0MsWUFBWWsrQixHQUVyQnN1QixJQUFhcmIsSUFDYnNPLEVBQVMydEIsRUFBWTVnQixFQUFVcmIsUUFDaEJ3bUIsSUFBWGxZLElBQXNCdXRCLEVBQVl2dEIsSUFVbEQsR0FMQTFnRCxLQUFLMnRDLFdBQWEsS0FDbEJqdEMsRUFBS2d6QyxjQUFjeU0sRUFBYyxNQUFNLEdBQ3ZDei9DLEVBQUtrMEMsZ0JBQWdCdUwsRUFBYyxTQUFVM3ZCLEdBQVcsT0FBT3h3QixLQUFLNnZDLE9BQU9yZixJQUFZbnhCLEtBQUtxQixJQUd4RnV0RSxHQUFhdnRFLEVBQUtteUMsZ0JBQWdCbzdCLEdBQWEsSUFBTXZ0RSxFQUFLbXZDLE9BQU9vK0IsRUFBVXhrRSxhQUFlL0ksRUFBS212QyxPQUFPbytCLEVBQVV4a0UsV0FBV0EsYUFBYyxDQUN6SSxNQUFNNmdFLEVBQWM1cEUsRUFBS2k1QixpQkFBaUJzMEMsRUFBVyxTQUFVejlDLEdBQVcsT0FBT3h3QixLQUFLaWdDLHFCQUFxQnpQLEtBQWF4d0IsS0FBSzZ2QyxPQUFPcmYsSUFBWW54QixLQUFLcUIsSUFDL0krdEUsRUFBYS90RSxFQUFLOC9CLGFBQWF5dEMsRUFBVyxLQUFPM0QsRUFBa0I1cEUsRUFBS215QyxnQkFBZ0J5M0IsR0FBZSxFQUF4QyxHQUNyRW1FLEVBQVdobEUsV0FBV28yQixhQUFhc2dCLEVBQWNzdUIsUUFFakRoaEIsRUFBUzV0QixhQUFhc2dCLEVBQWM4dEIsR0FDcENJLEVBQVlsdUIsRUFBYzh0QixHQUc5QixNQUFNdDZCLEVBQU9qekMsRUFBS2t6QyxrQkFBa0J1TSxFQUFhcFQsa0JBQW1Cb1QsRUFBYXhMLGtCQUM3RWc1QixFQUFXcm5FLE9BQVMsRUFDcEJ0RyxLQUFLb3pCLFNBQVN1Z0IsRUFBS3ZmLEdBQUksRUFBR3VmLEVBQUtyZixHQUFJcWYsRUFBS3JmLEdBQUcvdUIsWUFBWWUsUUFFdkR0RyxLQUFLb3pCLFNBQVN1Z0IsRUFBS3JmLEdBQUlxZixFQUFLcmYsR0FBRy91QixZQUFZZSxPQUFRcXRDLEVBQUtyZixHQUFJcWYsRUFBS3JmLEdBQUcvdUIsWUFBWWUsUUFJcEZ0RyxLQUFLMHpCLFFBQVEvcUIsTUFBSyxJQWN0Qm9qQyx5QkFBMEIsU0FBVW9VLEVBQWM5c0IsRUFBaUJxN0MsRUFBaUJ6b0QsRUFBUXFaLEdBQ3hGLE1BQU0yUSxFQUFRandDLEtBQUtrd0MsV0FDbkIsSUFBSVksRUFBS2IsRUFBTWdCLFlBQ1hFLEVBQUtsQixFQUFNaUIsVUFFWHR4QixFQUFXbGYsRUFBSzJwRCxrQkFBa0JsSyxHQUFjLFNBQVUzdkIsR0FBVyxPQUFPQSxFQUFRL21CLGFBQWUwMkMsS0FDbkdxTSxFQUFTck0sRUFBYTEyQyxXQUN0QmtsRSxFQUFZLEtBQ1pDLEVBQVcsS0FDWEMsRUFBVTF1QixFQUFhN2hCLFdBQVUsR0FFckMsTUFBTWt3QyxFQUFjLEdBQ2RoN0IsRUFBVTl5QyxFQUFLbXZDLE9BQU82K0IsR0FDNUIsSUFBSUksR0FBYyxFQUNkOTBCLEdBQVEsRUFDUiswQixHQUFlLEVBRW5CLFNBQVNDLEVBQVl4aUIsRUFBUXlpQixFQUFTMzdCLEVBQVM0N0IsR0FNM0MsR0FMSXh1RSxFQUFLc3dDLG1CQUFtQmkrQixLQUN4QkEsRUFBUTdxRSxVQUFZMUQsRUFBSzZxQyxlQUN6QnVGLEVBQUtLLEVBQUssR0FHVyxJQUFyQjg5QixFQUFRdDRELFNBRVIsT0FEQTYxQyxFQUFPM3NCLGFBQWFvdkMsRUFBUzM3QixHQUN0QjI3QixFQUdYLE1BQU1FLEdBQWVKLEVBQWVFLEVBQVVDLEdBQVl6NEQsV0FDMUQsSUFBSTNDLEVBQVNtN0QsRUFBUTN3QyxXQUFVLEdBQzNCNlUsRUFBUSxLQUNSajFDLEVBQUksS0FFUixLQUFPaXhFLEVBQVksSUFDZmp4RSxFQUFJaXhFLEVBQVksSUFDWnp1RSxFQUFLa3VELGFBQWExd0QsSUFBT3dDLEVBQUtzcEQsUUFBUTlyRCxJQUFPd0MsRUFBSzAvQixXQUFXdHNCLEdBUzdEQSxFQUFPN1MsWUFBWS9DLElBUmY0VixFQUFPMkMsV0FBV25RLE9BQVMsSUFDdEI2c0MsSUFBT0EsRUFBUXIvQixHQUNwQjA0QyxFQUFPM3NCLGFBQWEvckIsRUFBUXcvQixHQUM1QngvQixFQUFTbTdELEVBQVEzd0MsV0FBVSxJQUUvQmt1QixFQUFPM3NCLGFBQWEzaEMsRUFBR28xQyxHQUNsQkgsSUFBT0EsRUFBUWoxQyxJQU01QixHQUFJNFYsRUFBTzJDLFdBQVduUSxPQUFTLEVBQUcsQ0FDOUIsR0FBSTVGLEVBQUswL0IsV0FBV29zQixJQUFXOXJELEVBQUswL0IsV0FBV3RzQixJQUFXcFQsRUFBS212QyxPQUFPeUQsR0FDbEUsR0FBSUUsRUFBUyxDQUVULElBREFMLEVBQVFHLEVBQ0ZBLEdBQ0Z4L0IsRUFBTzdTLFlBQVlxeUMsR0FDbkJBLEVBQVVBLEVBQVE5SCxZQUV0QmdoQixFQUFPL2lELFdBQVdvMkIsYUFBYS9yQixFQUFRMDRDLEVBQU90eUIsd0JBQzNDLENBQ0gsTUFBTWsxQyxFQUFhRixFQUFXaDFDLG1CQUN4Qm0xQyxFQUFjM3VFLEVBQUsrckQsaUJBQWlCeWlCLEdBQVksR0FDdEQsR0FBSy91QixJQUFpQmt2QixHQUFpQkQsSUFBZUYsRUFBV2gxQyxtQkFBcUIsQ0FDbEYsTUFBTTBZLEVBQVk5K0IsRUFBTzJDLFdBQ3pCLEtBQU9tOEIsRUFBVSxJQUNiczhCLEVBQVdqdUUsWUFBWTJ4QyxFQUFVLElBR3JDdU4sRUFBZWt2QixFQUNmcjFCLEdBQVEsUUFJaEJ3UyxFQUFPM3NCLGFBQWEvckIsRUFBUXcvQixHQUczQkgsSUFBT0EsRUFBUXIvQixHQUd4QixPQUFPcS9CLEVBSVgsSUFBSyxJQUFrQzg3QixFQUFTSyxFQUFXbjlCLEVBQWxEdDBDLEVBQUksRUFBRzRKLEVBQU1tWSxFQUFTdFosT0FBa0N6SSxFQUFJNEosRUFBSzVKLElBRXRFLEdBREFveEUsRUFBVXJ2RCxFQUFTL2hCLEdBQ00sSUFBckJveEUsRUFBUXQ0RCxXQUFrQmpXLEVBQUttdkMsT0FBT2cvQixHQVkxQyxHQVZBRSxHQUFlLEVBQ1g5b0QsR0FBZ0IsSUFBTnBvQixJQUlOOHdFLEVBSEN0N0MsR0FBbUJBLEVBQWdCL3NCLFNBQVdtQixHQUFPNHJCLEVBQWdCLEtBQU80N0MsRUFHakVKLEVBRkExdUIsRUFBYXpmLGlCQU03QnJOLElBQWlCaThDLEVBQVlqOEMsRUFBZ0IzcUIsUUFBUXVtRSxJQUNyRDU3QyxJQUFrQyxJQUFmaThDLEVBQ2RULElBQVNBLEVBQVUxdUIsRUFBYTdoQixXQUFVLElBQy9DdXdDLEVBQVE1dEUsWUFBWWd1RSxPQUNqQixDQU9ILEdBTkk1N0MsSUFBaUI4ZSxFQUFPOWUsRUFBZ0JpOEMsRUFBWSxJQUNwRFQsR0FBV0EsRUFBUWp2RCxTQUFTdFosT0FBUyxJQUNyQ2ttRCxFQUFPM3NCLGFBQWFndkMsRUFBUzF1QixHQUM3QjB1QixFQUFVLE9BR1RyN0IsR0FBVzl5QyxFQUFLMC9CLFdBQVc2dUMsR0FDNUIsR0FBSTk4QixHQUFRenhDLEVBQUtteUMsZ0JBQWdCbzhCLEtBQWF2dUUsRUFBS215QyxnQkFBZ0JWLEtBQVV6eEMsRUFBSzAvQixXQUFXb3NCLElBQVc5ckQsRUFBSytuRCxhQUFhd21CLEVBQVFydkQsU0FBVWxmLEVBQUttdkMsUUFBUSxJQUFTLENBQzlKLE1BQU0wL0IsRUFBVU4sRUFBUS8wQyxtQkFDbEJtMUMsRUFBYzN1RSxFQUFLK3JELGlCQUFpQndpQixHQUFTLEdBQzlDOXVCLElBQWlCa3ZCLEdBQWdCRSxJQUFZTixFQUFRLzBDLHFCQUN0RGltQixFQUFla3ZCLEVBQ2ZyMUIsR0FBUSxPQUVULENBQ0gsTUFBTTJHLEVBQVFzdUIsRUFDZEEsRUFBVXZ1RSxFQUFLQyxjQUFjc2xCLEVBQVMwNkIsRUFBTXh2QixTQUFZendCLEVBQUttdkMsT0FBT3NRLEVBQWExMkMsYUFBZS9JLEVBQUswL0IsV0FBVytmLEVBQWExMkMsWUFBZSxLQUFPL0ksRUFBS3d4QyxPQUFPaU8sRUFBYTEyQyxZQUFjLE1BQVFsSCxFQUFRZzFELFlBQzFNLE1BQU1ybEIsRUFBU3h4QyxFQUFLMC9CLFdBQVc2dUMsR0FDekJPLEVBQWdCN3VCLEVBQU1scUMsV0FDNUIsS0FBTys0RCxFQUFjLE1BQ2I5dUUsRUFBS212QyxPQUFPMi9CLEVBQWMsS0FBUXQ5QixJQUN0Qys4QixFQUFRaHVFLFlBQVl1dUUsRUFBYyxJQUV0Qzl1RSxFQUFLZ3lDLHFCQUFxQnU4QixFQUFTdHVCLEdBQ25Db3VCLEdBQWUsT0FHbkJFLEVBQVVBLEVBQVEzd0MsV0FBVSxHQUdoQyxJQUFLMGIsSUFDSS96QixHQXNCRHVvRCxFQUFZN2xFLEtBQUtzbUUsR0FDakJ2dUUsRUFBS3NwQixXQUFXcEssRUFBUy9oQixNQXRCckI2d0UsR0FDS0ksSUFDRHRpQixFQUFPM3NCLGFBQWE2dUMsRUFBaUJ2dUIsR0FDckMydUIsR0FBYyxHQUVsQkcsRUFBVUQsRUFBV04sRUFBaUJPLEVBQVMsS0FBTXJ2RCxFQUFTL2hCLEtBRTlEb3hFLEVBQVVELEVBQVd4aUIsRUFBUXlpQixFQUFTOXVCLEVBQWN2Z0MsRUFBUy9oQixJQUc1RG04QyxJQUNHM21CLEdBQ0F1N0MsRUFBV0ssRUFDTk4sSUFDREEsRUFBWU0sSUFFUk4sSUFDUkEsRUFBWUMsRUFBV0ssS0FRL0JqMUIsR0FBTyxDQUNQQSxFQUFRKzBCLEdBQWUsRUFDdkJudkQsRUFBV2xmLEVBQUsycEQsa0JBQWtCbEssR0FBYyxTQUFVM3ZCLEdBQVcsT0FBT0EsRUFBUS9tQixhQUFlMDJDLEtBQ25HMHVCLEVBQVUxdUIsRUFBYTdoQixXQUFVLEdBQ2pDa3VCLEVBQVNyTSxFQUFhMTJDLFdBQ3RCNUwsR0FBSyxFQUNMNEosRUFBTW1ZLEVBQVN0WixPQUNmLFVBTWhCLE1BQU1tcEUsRUFBY3R2QixFQUFhMTJDLFdBQ2pDLElBQUlpbUUsRUFBYXZ2QixFQUFhM1UsWUFDMUJxakMsR0FBV0EsRUFBUWp2RCxTQUFTdFosT0FBUyxHQUNyQ21wRSxFQUFZNXZDLGFBQWFndkMsRUFBU2EsR0FHbENoQixFQUFpQkMsRUFBWUQsRUFBZ0JodUMsZ0JBQ3ZDaXVDLElBQVdBLEVBQVl4dUIsRUFBYXpmLGlCQUM5Q2d2QyxFQUFhdnZCLEVBQWEzVSxjQUFnQnFqQyxFQUFVMXVCLEVBQWEzVSxZQUFjcWpDLEVBQVVBLEVBQVFyakMsWUFBYyxLQUUxRSxJQUFqQzJVLEVBQWF2Z0MsU0FBU3RaLFFBQW9ELElBQXBDNjVDLEVBQWE1NkMsWUFBWWUsT0FDL0Q1RixFQUFLc3BCLFdBQVdtMkIsR0FFaEJ6L0MsRUFBSzQvQixnQkFBZ0I2ZixFQUFjLE1BQU0sR0FHN0MsSUFBSXhNLEVBQU8sS0FDWCxHQUFJMXRCLEVBQ0EwdEIsRUFBTyxDQUNIRSxHQUFJNDdCLEVBQ0pyN0MsR0FBSXU2QyxFQUNKNzlCLEdBQUlBLEVBQ0p4YyxHQUFJbzdDLEVBQ0p2K0IsR0FBSUEsRUFDSnE5QixZQUFhQSxPQUVkLENBQ0VHLElBQVdBLEVBQVlDLEdBQ3ZCQSxJQUFVQSxFQUFXRCxHQUMxQixNQUFNZ0IsRUFBWWp2RSxFQUFLa3pDLGtCQUFrQis2QixFQUFZQyxFQUFTbmxFLFdBQWFrbEUsRUFBWUMsR0FDdkZqN0IsRUFBTyxDQUNIRSxJQUFLODdCLEVBQVV2N0MsSUFBTXU3QyxFQUFVcjdDLElBQUk3cUIsV0FDbkMycUIsR0FBSXU3QyxFQUFVdjdDLEdBQ2QwYyxHQUFJQSxFQUNKeGMsR0FBSXE3QyxFQUFVcjdDLEdBQ2Q2YyxHQUFJQSxFQUNKcTlCLFlBQWEsTUFLckIsR0FEQXh1RSxLQUFLMnRDLFdBQWEsS0FDZHJPLEVBQWdCLE9BQU9xVSxHQUV0QjF0QixHQUFVMHRCLElBQ050Z0IsRUFHRHJ6QixLQUFLb3pCLFNBQVN1Z0IsRUFBS3ZmLEdBQUkwYyxFQUFJNkMsRUFBS3JmLEdBQUk2YyxHQUZwQ254QyxLQUFLb3pCLFNBQVN1Z0IsRUFBS3ZmLEdBQUksRUFBR3VmLEVBQUt2ZixHQUFJLElBTzNDcDBCLEtBQUswekIsUUFBUS9xQixNQUFLLElBVXRCNDNDLFdBQVksU0FBVWx0QixFQUFpQnBOLEdBQ25DLElBQUkrc0IsRUFBVyxHQUNYNDhCLEdBQVksRUFDWkMsR0FBVyxFQUNYMThCLEVBQVEsS0FDUkMsRUFBTyxLQUNYLE1BQU1yQixFQUFnQixTQUFVdmhCLEdBQVcsT0FBUXh3QixLQUFLc29DLFlBQVk5WCxJQUFZbnhCLEtBQUtxQixHQUVyRixJQUFLLElBQXlDL0IsRUFBR0wsRUFBRzhTLEVBQVd5K0IsRUFBdERoeUMsRUFBSSxFQUFHNEosRUFBTTRyQixFQUFnQi9zQixPQUFpQ3pJLEVBQUk0SixFQUFLNUosSUFBSyxDQUlqRixHQUhBdVQsRUFBWXZULElBQU00SixFQUFNLEVBQ3hCbkosRUFBSW9DLEVBQUs0d0Msc0JBQXNCamUsRUFBZ0J4MUIsR0FBSWswQyxHQUNuRGxDLEVBQVNudkMsRUFBS212QyxPQUFPdnhDLElBQ2hCSyxHQUFLa3hDLEVBQ05seEMsRUFBSUwsRUFDSjAwQyxFQUFXLENBQUNyMEMsRUFBR0EsRUFBR29TLEVBQUcsQ0FBQ3JRLEVBQUtpNUIsaUJBQWlCdEcsRUFBZ0J4MUIsR0FBSSxRQUN0RCxJQUFOQSxJQUFTK3hFLEdBQVksUUFDdEIsR0FBSWp4RSxHQUFLa3hDLEVBQ1osR0FBSWx4QyxJQUFNTCxFQUFHLENBQ1QsTUFBTXExQyxFQUFPM3pDLEtBQUsrckMseUJBQXlCaUgsRUFBU2ppQyxFQUFFLEdBQUd0SCxXQUFZdXBDLEVBQVNqaUMsRUFBRyxLQUFNa1YsR0FBUSxHQUMvRjNuQixFQUFJKzBCLEVBQWdCeDFCLEdBQUc0TCxXQUNuQm1tRSxJQUNBejhCLEVBQVFRLEVBQUt2ZixHQUNidzdDLEdBQVksR0FFWngrRCxJQUFXZ2lDLEVBQU9PLEVBQUtyZixJQUV2QnViLEdBQ0FseEMsRUFBSUwsRUFDSjAwQyxFQUFXLENBQUNyMEMsRUFBR0EsRUFBR29TLEVBQUcsQ0FBQ3JRLEVBQUtpNUIsaUJBQWlCdEcsRUFBZ0J4MUIsR0FBSSxRQUM1RHVULElBQVd5K0QsR0FBVyxJQUUxQmx4RSxFQUFJLFVBR1JxMEMsRUFBU2ppQyxFQUFFcEksS0FBS2pJLEVBQUtpNUIsaUJBQWlCdEcsRUFBZ0J4MUIsR0FBSSxPQUN0RHVULElBQVd5K0QsR0FBVyxHQUlsQyxHQUFJeitELEdBQWExUSxFQUFLbXZDLE9BQU9seEMsR0FBSSxDQUM3QixNQUFNZzFDLEVBQU8zekMsS0FBSytyQyx5QkFBeUJpSCxFQUFTamlDLEVBQUUsR0FBR3RILFdBQVl1cEMsRUFBU2ppQyxFQUFHLEtBQU1rVixHQUFRLElBQzNGNHBELEdBQW9CLElBQVJwb0UsS0FBVzJyQyxFQUFPTyxFQUFLcmYsSUFDbkNzN0MsSUFBV3o4QixFQUFRUSxFQUFLdmYsSUFBTWdmLElBSTFDLE1BQU8sQ0FDSGhmLEdBQUkrZSxFQUNKN2UsR0FBSThlLElBd0JabG9CLFdBQVksU0FBVThqRCxFQUFZYyxFQUFZQyxFQUFpQkMsR0FDM0Rod0UsS0FBSzBvRSx3QkFDTCxJQUFJejRCLEVBQVFqd0MsS0FBS293QyxpQkFBaUJwd0MsS0FBS2t3QyxXQUFZLE1BQ25ENC9CLEtBQWFBLEdBQWNBLEVBQVd4cEUsT0FBUyxJQUFJd3BFLEVBQ25EQyxLQUFrQkEsR0FBbUJBLEVBQWdCenBFLE9BQVMsSUFBSXlwRSxFQUVsRSxNQUFNRSxHQUFnQmpCLEVBQ2hCa0IsRUFBaUJELElBQWlCRixJQUFvQkQsRUFDNUQsSUFBSWhKLEVBQVc3MkIsRUFBTVksZUFDakJrMkIsRUFBVzkyQixFQUFNZ0IsWUFDakIrMUIsRUFBUy8yQixFQUFNYyxhQUNmazJCLEVBQVNoM0IsRUFBTWlCLFVBRW5CLEdBQUtnL0IsR0FBa0JqZ0MsRUFBTVUsV0FBYWp3QyxFQUFLNi9CLGdCQUFnQnVtQyxFQUFTcjlELGFBQWlCcTlELElBQWFFLEdBQWdDLElBQXRCRixFQUFTbndELFVBQWtCalcsRUFBS2duRCxjQUFjb2YsR0FBWSxDQUN0SyxNQUFNaHpELEVBQVNnekQsRUFBU3I5RCxXQUN4QixJQUFLL0ksRUFBSzAvQixXQUFXdHNCLEtBQVlwVCxFQUFLOGtELFVBQVUxeEMsRUFBT2hULE9BQU91SSxLQUFLLFNBQVM4bUUsR0FBSyxPQUFPbndFLEtBQUs4OUQsV0FBV3AxRCxRQUFReW5FLElBQU0sR0FBSzl3RSxLQUFLVyxPQUFRLE9BRzVJLEdBQUlpd0MsRUFBTVUsWUFBY3UvQixHQUNNLElBQXRCcEosRUFBU253RCxXQUFtQmpXLEVBQUtzcEQsUUFBUThjLEtBQWNwbUUsRUFBSzRuQyxZQUFZdytCLEdBQVcsQ0FDbkYsSUFBSW9FLEVBQVksS0FDaEIsTUFBTXZELEVBQVliLEVBQVNyd0QsV0FBV3N3RCxHQUVsQ1ksSUFJSXVELEVBSEN2RCxFQUFVbjhCLFlBR0M5cUMsRUFBS3NwRCxRQUFRMmQsR0FBYUEsRUFBWUEsRUFBVW44QixZQUZoRCxNQU1wQixNQUFNaWhDLEVBQVkvckUsRUFBSzRxQyxlQUFlNXFDLEVBQUs2cUMsZ0JBQzNDdTdCLEVBQVNqbkMsYUFBYTRzQyxFQUFXdkIsR0FDakNsckUsS0FBS296QixTQUFTcTVDLEVBQVcsRUFBR0EsRUFBVyxHQUV2Q3g4QixFQUFRandDLEtBQUtrd0MsV0FDYjQyQixFQUFXNzJCLEVBQU1ZLGVBQ2pCazJCLEVBQVc5MkIsRUFBTWdCLFlBQ2pCKzFCLEVBQVMvMkIsRUFBTWMsYUFDZmsyQixFQUFTaDNCLEVBQU1pQixVQUluQnh3QyxFQUFLNi9CLGdCQUFnQnVtQyxLQUNyQkEsRUFBV0EsRUFBU3J3RCxXQUFXc3dELElBQWFELEVBQVM5d0QsV0FDckQrd0QsRUFBVyxHQUVYcm1FLEVBQUs2L0IsZ0JBQWdCeW1DLEtBQ3JCQSxFQUFTQSxFQUFPdndELFdBQVd3d0QsSUFBV0QsRUFBTzdiLFVBQzdDOGIsRUFBU0QsRUFBT3poRSxZQUFZZSxRQUc1QjJwRSxJQUNBakIsRUFBYXR1RSxFQUFLQyxjQUFjLFFBR3BDLE1BQU1zd0QsRUFBVTdxRCxFQUFHMkgsT0FDYnFpRSxFQUFjcEIsRUFBVzc5QyxTQUcvQixJQUFLKytDLEdBQWtCcEosSUFBYUUsSUFBVytJLEdBQW1CZixFQUFZLENBQzFFLElBQUlxQixFQUFRdkosRUFDUndKLEVBQVcsRUFDZixNQUFNQyxFQUFhLEdBRWJ6dUIsRUFBY2t0QixFQUFXbHVFLE1BQy9CLElBQUssSUFBSWpELEVBQUksRUFBRzRKLEVBQU1xNkMsRUFBWXg3QyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUMvQzB5RSxFQUFXNW5FLEtBQUttNUMsRUFBWWprRCxJQUdoQyxNQUFNMnlFLEVBQWV4QixFQUFXanRCLFVBQ2hDLElBQUssSUFBSWxrRCxFQUFJLEVBQUc0SixFQUFNK29FLEVBQWFscUUsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDaEQweUUsRUFBVzVuRSxLQUFLLElBQU02bkUsRUFBYTN5RSxJQUd2QyxHQUFJMHlFLEVBQVdqcUUsT0FBUyxFQUFHLENBQ3ZCLE1BQU81RixFQUFLNi9CLGdCQUFnQjh2QyxLQUFXM3ZFLEVBQUsrb0IsYUFBYTRtRCxJQUFRLENBQzdELElBQUssSUFBSXh5RSxFQUFJLEVBQUdBLEVBQUkweUUsRUFBV2pxRSxPQUFRekksSUFDbkMsR0FBdUIsSUFBbkJ3eUUsRUFBTTE1RCxTQUFnQixDQUN0QixNQUFNL1csRUFBSTJ3RSxFQUFXMXlFLEdBQ2Y0eUUsSUFBVyxNQUFNOXVFLEtBQUsvQixJQUFLLElBQUlxeEQsRUFBUSxPQUFTcnhELEVBQUVvTyxRQUFRLE1BQU8sSUFBTSxXQUFZLE1BRW5GMGlFLEVBQWFULElBQWlCSSxFQUFNdnZFLE1BQU1sQixLQUFReXdFLEVBQU12dkUsTUFBTWxCLE1BQVFvdkUsRUFBV2x1RSxNQUFNbEIsSUFBTXl3RSxFQUFNdnZFLE1BQU1sQixLQUFPb3ZFLEVBQVdsdUUsTUFBTWxCLEdBQ2pJK3dFLEdBQTBCLElBQWJGLElBQTZCUixJQUFpQkksRUFBTXp2RSxVQUFVMFEsTUFBTW0vRCxLQUFjSixFQUFNenZFLFVBQVUwUSxNQUFNbS9ELE1BQWV6QixFQUFXcHVFLFVBQVUwUSxNQUFNbS9ELEtBQ2pLQyxHQUFjQyxJQUNkTCxJQUlaRCxFQUFRQSxFQUFNNW1FLFdBR2xCLEdBQUk2bUUsR0FBWUMsRUFBV2pxRSxPQUFRLFFBSTNDLElBQ0k4a0IsRUFEQXZhLEVBQVEsR0FBSUMsRUFBTSxHQUNUOC9ELEVBQWMsR0FBSUMsRUFBYyxHQUFJQyxFQUFtQixHQUVwRSxHQUFJaEIsRUFBWSxDQUNaLElBQUssSUFBb0Nsd0UsRUFBaEMvQixFQUFJLEVBQUc0SixFQUFNcW9FLEVBQVd4cEUsT0FBV3pJLEVBQUk0SixFQUFLNUosSUFDakQrQixFQUFJa3dFLEVBQVdqeUUsR0FDWCxNQUFNOEQsS0FBSy9CLEdBQ1hpeEUsSUFBZ0JBLEVBQWMsSUFBTSxXQUFhanhFLEVBQUVvTyxRQUFRLE1BQU8sSUFFbEU0aUUsSUFBZ0JBLEVBQWMsSUFBTSxrQkFBb0JoeEUsRUFJNURneEUsSUFDQUEsR0FBZSx5QkFDZkEsRUFBYyxJQUFJM2YsRUFBUTJmLEVBQWEsT0FHdkNDLElBQ0FBLEdBQWUsY0FDZkEsRUFBYyxJQUFJNWYsRUFBUTRmLEVBQWEsT0FJL0MsR0FBSWQsRUFBaUIsQ0FDakJlLEVBQW1CLE9BQVNmLEVBQWdCLEdBQzVDLElBQUssSUFBSWx5RSxFQUFJLEVBQUdBLEVBQUlreUUsRUFBZ0J6cEUsT0FBUXpJLElBQ3hDaXpFLEdBQW9CLElBQU1mLEVBQWdCbHlFLEdBRTlDaXpFLEdBQW9CLEtBQ3BCQSxFQUFtQixJQUFJN2YsRUFBUTZmLEVBQWtCLEtBSXJELE1BQU1DLEVBQVczcUUsRUFBRzRxRSxRQUNkQyxFQUFlLENBQUMxb0UsR0FBRyxHQUNuQjAvQyxFQUFhLFNBQVVpcEIsR0FDekIsTUFBTUMsRUFBUUQsRUFBVTV5QyxXQUFVLEdBR2xDLEdBQXVCLElBQW5CNnlDLEVBQU14NkQsVUFBa0JqVyxFQUFLc3BELFFBQVFtbkIsR0FBUSxPQUFPQSxFQUV4RCxHQUFJakIsRUFBZ0IsT0FBTyxLQUczQixNQUFNa0IsR0FBY04sR0FBb0JiLEdBQWtCYSxHQUFvQkEsRUFBaUJudkUsS0FBS3d2RSxFQUFNaGdELFVBRzFHLEdBQUlpZ0QsSUFBY3BCLEVBRWQsT0FEQWlCLEVBQWExb0UsR0FBSSxFQUNWLEtBSVgsTUFBTThvRSxFQUFjRixFQUFNcndFLE1BQU1zbkMsUUFDaEMsSUFBSXRuQyxFQUFRLEdBQ1I4dkUsR0FBZVMsRUFBWS9xRSxPQUFTLElBQ3BDeEYsRUFBUXV3RSxFQUFZcmpFLFFBQVE0aUUsRUFBYSxJQUFJcG9FLE9BQ3pDMUgsSUFBVXV3RSxJQUFhSixFQUFhMW9FLEdBQUksSUFJaEQsTUFBTStvRSxFQUFnQkgsRUFBTXZ3RSxVQUM1QixJQUFJc1YsRUFBVSxHQU9kLE9BTkkyNkQsR0FBZVMsRUFBY2hyRSxPQUFTLElBQ3RDNFAsRUFBVW83RCxFQUFjdGpFLFFBQVE2aUUsRUFBYSxJQUFJcm9FLE9BQzdDME4sSUFBWW83RCxJQUFlTCxFQUFhMW9FLEdBQUksTUFJaEQwbkUsSUFDS1ksR0FBZ0JTLElBQW1CVixHQUFnQlMsR0FBaUJ2d0UsR0FBVW9WLElBQVdrN0QsS0FPOUZ0d0UsR0FBU29WLEdBQVdpN0QsRUFBTWhnRCxXQUFhaS9DLEdBQWdCVyxFQUFTSCxLQUFpQkcsRUFBU00sSUFBa0JOLEVBQVNGLEtBQWlCRSxFQUFTTyxLQUMzSVYsR0FBZVMsRUFBWS9xRSxPQUFTLElBQUc2cUUsRUFBTXJ3RSxNQUFNc25DLFFBQVV0bkMsR0FDNURxd0UsRUFBTXJ3RSxNQUFNc25DLFNBQ2Irb0MsRUFBTWovQyxnQkFBZ0IsU0FHdEIyK0MsR0FBZVMsRUFBY2hyRSxPQUFTLElBQUc2cUUsRUFBTXZ3RSxVQUFZc1YsRUFBUTFOLFFBQ2xFMm9FLEVBQU12d0UsVUFBVTRILFFBQ2pCMm9FLEVBQU1qL0MsZ0JBQWdCLFNBR3JCaS9DLEVBQU1yd0UsTUFBTXNuQyxTQUFZK29DLEVBQU12d0UsV0FBY3V3RSxFQUFNaGdELFdBQWFpL0MsSUFBZWdCLEVBSzVFRCxHQUpIRixFQUFhMW9FLEdBQUksRUFDVixRQW5CUDBvRSxFQUFhMW9FLEdBQUksRUFDVixPQTZCYjBnRSxFQUFZanBFLEtBQUtzekIsb0JBQW9CLE1BQzNDMmMsRUFBUWp3QyxLQUFLa3dDLFdBQ2I0MkIsRUFBVzcyQixFQUFNWSxlQUNqQmsyQixFQUFXOTJCLEVBQU1nQixZQUNqQisxQixFQUFTLzJCLEVBQU1jLGFBQ2ZrMkIsRUFBU2gzQixFQUFNaUIsVUFFVnh3QyxFQUFLbzlCLGlCQUFpQmdwQyxFQUFVLFFBQ2pDQSxFQUFXcG1FLEVBQUsyekIsZ0JBQWdCNDBDLEVBQVUsSUFBSSxTQUFVejRDLEdBQVcsT0FBNEIsSUFBckJBLEVBQVE3WixZQUFtQixHQUNyR293RCxFQUFXLEdBR1ZybUUsRUFBS285QixpQkFBaUJrcEMsRUFBUSxRQUMvQkEsRUFBU3RtRSxFQUFLMnpCLGdCQUFnQjQwQyxFQUFVQSxFQUFVM2lFLE9BQVMsSUFBSSxTQUFVa3FCLEdBQVcsT0FBNEIsSUFBckJBLEVBQVE3WixZQUFtQixHQUN0SHN3RCxFQUFTRCxFQUFPemhFLFlBQVllLFFBSWhDLE1BQU1pckUsRUFBVTd3RSxFQUFLbzlCLGlCQUFpQmdwQyxFQUFVLFFBQVVwbUUsRUFBS285QixpQkFBaUJrcEMsRUFBUSxNQUNsRndLLEVBQVl2SSxFQUFVM2lFLFFBQVVpckUsRUFBVSxFQUFJLEdBR3BEbm1ELEVBQVU0akQsRUFBVzF3QyxXQUFVLEdBRS9CLE1BQU1tekMsRUFBaUJ2QixHQUFtQkQsR0FBaUIsU0FBVXIxQixHQUNqRSxJQUFLLElBQUl0N0MsRUFBSSxFQUFHbUksRUFBTW16QyxFQUFJdDBDLE9BQVFoSCxFQUFJbUksRUFBS25JLElBQ3ZDLEdBQUlvQixFQUFLd3VELGtCQUFrQnRVLEVBQUl0N0MsS0FBT29CLEVBQUt5dUQsWUFBWXZVLEVBQUl0N0MsSUFBSyxPQUFPLEVBRTNFLE9BQU8sRUFKZ0QsQ0FLeER5d0UsR0FFRzJCLEVBQWF6QixHQUFnQnZ2RSxFQUFLeXVELFlBQVkvakMsR0FDOUN1bUQsRUFBcUIzeEUsS0FBSzR4RSx3QkFBd0J2eUUsS0FBS3FCLEVBQU0rd0UsRUFBZ0JDLEdBQzdFeGlCLEVBQW9CbHZELEtBQUs2eEUsdUJBQXVCeHlFLEtBQUtxQixFQUFNK3dFLEVBQWdCQyxHQUdqRixHQUFJSCxFQUFTLENBQ0x2eEUsS0FBSzh4RSxxQkFBcUI3SSxFQUFVLEdBQUk2RyxLQUFhNy9CLEVBQVFqd0MsS0FBS296QixTQUFTMHpDLEVBQVVDLEVBQVVDLEVBQVFDLElBRTNHLE1BQU11RixFQUFXeHNFLEtBQUsreEUsb0JBQW9COUksRUFBVSxHQUFJNzlDLEVBQVM2OEIsRUFBWTZlLEVBQVVDLEVBQVVDLEVBQVFDLEVBQVFpSixFQUFnQkQsRUFBY2hnQyxFQUFNVSxVQUFXc2dDLEVBQWNVLEVBQW9CemlCLEdBQ2xNcitDLEVBQU00dEIsVUFBWSt0QyxFQUFTMzdCLGVBQzNCaGdDLEVBQU1zOEMsT0FBU3FmLEVBQVN2N0IsWUFDeEJuZ0MsRUFBSTJ0QixVQUFZK3RDLEVBQVN6N0IsYUFDekJqZ0MsRUFBSXE4QyxPQUFTcWYsRUFBU3Q3QixVQUVsQnJnQyxFQUFNNHRCLFlBQWMzdEIsRUFBSTJ0QixXQUFhLzlCLEVBQUtzd0MsbUJBQW1CbmdDLEVBQU00dEIsYUFDbkU1dEIsRUFBTXM4QyxPQUFTcjhDLEVBQUlxOEMsT0FBUyxHQUVoQ250RCxLQUFLZ3lFLG9CQUFvQnhGLEVBQVM5aEIsU0FBVSxVQUN6QyxDQUNILElBQUl1bkIsR0FBb0IsRUFDcEJULEVBQVksR0FBS3h4RSxLQUFLOHhFLHFCQUFxQjdJLEVBQVV1SSxHQUFZMUIsS0FBYW1DLEdBQW9CLEdBQ2xHanlFLEtBQUs4eEUscUJBQXFCN0ksRUFBVSxHQUFJNkcsS0FBYW1DLEdBQW9CLEdBQ3pFQSxHQUFtQmp5RSxLQUFLb3pCLFNBQVMwekMsRUFBVUMsRUFBVUMsRUFBUUMsR0FHN0R1SyxFQUFZLElBQ1pwbUQsRUFBVTRqRCxFQUFXMXdDLFdBQVUsR0FDL0J4dEIsRUFBTTlRLEtBQUtreUUsb0JBQW9CakosRUFBVXVJLEdBQVlwbUQsRUFBUzY4QixFQUFZK2UsRUFBUUMsRUFBUWlKLEVBQWdCRCxFQUFjZ0IsRUFBY1UsRUFBb0J6aUIsSUFJOUosSUFBSyxJQUF1QnNkLEVBQW5CM3VFLEVBQUkyekUsRUFBWSxFQUFhM3pFLEVBQUksRUFBR0EsSUFDekNtQyxLQUFLOHhFLHFCQUFxQjdJLEVBQVVwckUsR0FBSWl5RSxHQUN4QzFrRCxFQUFVNGpELEVBQVcxd0MsV0FBVSxHQUMvQmt1QyxFQUFXeHNFLEtBQUtteUUsdUJBQXVCbEosRUFBVXByRSxHQUFJdXRCLEVBQVM2OEIsRUFBWWlvQixFQUFnQkQsRUFBY2dCLEVBQWNuZ0UsRUFBSTJ0QixXQUN0SCt0QyxFQUFTejdCLGNBQWdCeTdCLEVBQVM5aEIsU0FBU3A2QixTQUFTazhDLEVBQVN6N0IsZ0JBQzdEamdDLEVBQUk0NUMsU0FBVyxLQUNmNTVDLEVBQUkydEIsVUFBWSt0QyxFQUFTejdCLGNBRTdCL3dDLEtBQUtneUUsb0JBQW9CeEYsRUFBUzloQixTQUFVLE1BSWhEdC9CLEVBQVU0akQsRUFBVzF3QyxXQUFVLEdBQy9CenRCLEVBQVE3USxLQUFLb3lFLHNCQUFzQm5KLEVBQVUsR0FBSTc5QyxFQUFTNjhCLEVBQVk2ZSxFQUFVQyxFQUFVbUosRUFBZ0JELEVBQWNnQixFQUFjVSxFQUFvQnppQixFQUFtQnArQyxFQUFJMnRCLFdBRTdLNXRCLEVBQU1rZ0MsZUFDTmpnQyxFQUFJNDVDLFNBQVcsS0FDZjU1QyxFQUFJMnRCLFVBQVk1dEIsRUFBTWtnQyxjQUd0QnlnQyxHQUFhLEVBQ2IxZ0UsRUFBTUQsRUFDRUMsRUFBSTJ0QixZQUNaM3RCLEVBQUk0NUMsU0FBVyxLQUNmNTVDLEVBQUkydEIsVUFBWTV0QixFQUFNNHRCLFVBQ3RCM3RCLEVBQUlxOEMsT0FBU3Q4QyxFQUFNNHRCLFVBQVVsNUIsWUFBWWUsUUFHN0N0RyxLQUFLZ3lFLG9CQUFvQm5oRSxFQUFNNjVDLFNBQVUsTUFDekMxcUQsS0FBS2d5RSxvQkFBb0JsaEUsRUFBSTQ1QyxVQUFZaHFELEVBQUtvOUIsaUJBQWlCaHRCLEVBQUkydEIsV0FBWSxNQUluRnorQixLQUFLOHpCLGlCQUNMOXpCLEtBQUtvekIsU0FBU3ZpQixFQUFNNHRCLFVBQVc1dEIsRUFBTXM4QyxPQUFRcjhDLEVBQUkydEIsVUFBVzN0QixFQUFJcThDLFFBR2hFbnRELEtBQUswekIsUUFBUS9xQixNQUFLLElBU3RCbXBFLHFCQUFzQixTQUFVOTlCLEVBQUk4N0IsR0FDaEMsSUFBS3B2RSxFQUFLMC9CLFdBQVc0VCxHQUFLLE9BQ3JCODdCLElBQVlBLEVBQWE5dkUsS0FBSzg5RCxZQUVuQyxNQUFNbCtDLEVBQVdsZixFQUFLK25ELGFBQWN6VSxFQUFJdjlCLFlBQVksU0FBVStaLEdBQVcsT0FBUTl2QixFQUFLc3BELFFBQVF4NUIsTUFBYSxHQUNyRzZoRCxFQUFXcitCLEVBQUdsekMsTUFFZHd6QixFQUFLLEdBQUlnK0MsRUFBSyxHQUFJQyxFQUFTN3hFLEVBQUs4a0QsVUFBVTZzQixHQUNoRCxJQUFLLElBQUl4MEUsRUFBSSxFQUFHNEosRUFBTXpILEtBQUs4OUQsV0FBV3gzRCxPQUFRekksRUFBSTRKLEVBQUs1SixJQUMvQzAwRSxFQUFPN3BFLFFBQVExSSxLQUFLODlELFdBQVdqZ0UsS0FBTyxHQUFLaXlFLEVBQVdwbkUsUUFBUTFJLEtBQUs4OUQsV0FBV2pnRSxLQUFPLElBQ3JGeTJCLEVBQUczckIsS0FBSzNJLEtBQUs2OUQsV0FBV2hnRSxJQUN4QnkwRSxFQUFHM3BFLEtBQUszSSxLQUFLODlELFdBQVdqZ0UsS0FJaEMsSUFBS3kyQixFQUFHaHVCLE9BQVEsT0FHaEIsTUFBTSs1QixFQUFRMy9CLEVBQUtDLGNBQWMsUUFDakMsSUFBSyxJQUFJOUMsRUFBSSxFQUFHNEosRUFBTTZzQixFQUFHaHVCLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3RDd2lDLEVBQU12L0IsTUFBTXd6QixFQUFHejJCLElBQU13MEUsRUFBU0MsRUFBR3owRSxJQUNqQ3cwRSxFQUFTRyxlQUFlRixFQUFHejBFLElBRy9CLElBQUk0MEUsRUFBTXB5QyxFQUFNL0IsV0FBVSxHQUN0QjMvQixFQUFJLEtBQU0rekUsR0FBWSxFQUMxQixJQUFLLElBQWtDeDBFLEVBQUcwQixFQUFqQy9CLEVBQUksRUFBRzRKLEVBQU1tWSxFQUFTdFosT0FBY3pJLEVBQUk0SixFQUFLNUosSUFDbERLLEVBQUkwaEIsRUFBUy9oQixHQUNUMEUsRUFBUXMxRCxhQUFhMzVELEVBQUVpekIsU0FBU3pqQixpQkFFcEM5TixFQUFJYyxFQUFLOGtELFVBQVV0bkQsRUFBRTRDLE9BQ0osSUFBYmxCLEVBQUUwRyxRQUFpQmd1QixFQUFHanJCLE1BQUssU0FBVThtRSxHQUFJLE9BQXlCLElBQWxCdndFLEVBQUU4SSxRQUFReW5FLE9BQWdCdndFLEVBQUV5SixNQUFLLFNBQVM4bUUsR0FBSTc3QyxFQUFHNXJCLFFBQVF5bkUsT0FDekd4eEUsRUFBSVQsRUFBRXN0QyxZQUNOaW5DLEVBQUl4eEUsWUFBWS9DLElBQ1R1MEUsRUFBSWg4RCxXQUFXblEsT0FBUyxJQUMvQjB0QyxFQUFHblUsYUFBYTR5QyxFQUFLOXpFLEdBQ3JCOHpFLEVBQU1weUMsRUFBTS9CLFdBQVUsR0FDdEIzL0IsRUFBSSxLQUNKK3pFLEdBQVksSUFZcEIsT0FSSUQsRUFBSWg4RCxXQUFXblEsT0FBUyxJQUN4QjB0QyxFQUFHblUsYUFBYTR5QyxFQUFLOXpFLEdBQ3JCK3pFLEdBQVksR0FFWEwsRUFBUy9yRSxRQUNWMHRDLEVBQUc5aEIsZ0JBQWdCLFNBR2hCd2dELEdBU1hWLG9CQUFxQixTQUFVaCtCLEVBQUl0OUIsR0FDL0IsSUFBS2hXLEVBQUswL0IsV0FBVzRULEdBQUssT0FFMUIsTUFBTXAwQixFQUFXbGYsRUFBSytuRCxjQUFjL3hDLEdBQVNzOUIsR0FBSXY5QixZQUFZLFNBQVUrWixHQUFXLE9BQVE5dkIsRUFBS3NwRCxRQUFReDVCLE1BQWEsR0FHcEgsS0FGQTlaLEVBQVFrSixFQUFTLEtBRUhBLEVBQVN0WixPQUFTLEdBQXdCLElBQW5Cb1EsRUFBTUMsU0FBZ0IsT0FHM0QsTUFBTWc4RCxFQUFhajhELEVBQU01VixNQUNuQjh4RSxFQUFVNStCLEVBQUdsekMsTUFDYnF3QixFQUFXemEsRUFBTXlhLFNBQVN6akIsY0FDaEMsSUFBSWdsRSxHQUFZLEVBR1pud0UsRUFBUXMxRCxhQUFhMW1DLEtBQWM1dUIsRUFBUXUxRCxnQkFBZ0JuMkMsS0FBS2pVLGdCQUFla2xFLEVBQVFDLFdBQWEsUUFDcEd0d0UsRUFBUXMxRCxhQUFhMW1DLEtBQWM1dUIsRUFBUXUxRCxnQkFBZ0JsMkMsT0FBT2xVLGdCQUFla2xFLEVBQVFFLFVBQVksVUFHekcsTUFBTUMsRUFBUXJ5RSxFQUFLOGtELFVBQVVtdEIsR0FDN0IsR0FBSUksRUFBTXpzRSxPQUFTLEVBQ2YsSUFBSyxJQUFJekksRUFBSSxFQUFHNEosRUFBTXpILEtBQUs2OUQsV0FBV3YzRCxPQUFRekksRUFBSTRKLEVBQUs1SixJQUMvQ2sxRSxFQUFNcnFFLFFBQVExSSxLQUFLODlELFdBQVdqZ0UsS0FBTyxJQUNyQyswRSxFQUFRNXlFLEtBQUs2OUQsV0FBV2hnRSxJQUFNODBFLEVBQVczeUUsS0FBSzY5RCxXQUFXaGdFLElBQ3pEODBFLEVBQVdILGVBQWV4eUUsS0FBSzg5RCxXQUFXamdFLElBQzFDNjBFLEdBQVksR0FNeEIsR0FEQTF5RSxLQUFLZ3lFLG9CQUFvQmgrQixFQUFJdDlCLEdBQ3hCZzhELElBR0FDLEVBQVdyc0UsT0FBUSxDQUNwQixNQUFNb00sRUFBS2dFLEVBQU1ELFdBQ1g5VyxFQUFJK1csRUFBTWpOLFdBQ1ZuSyxFQUFJb1gsRUFBTTgwQixZQUNoQixLQUFPOTRCLEVBQUdwTSxPQUFTLEdBQ2YzRyxFQUFFa2dDLGFBQWFudEIsRUFBRyxHQUFJcFQsR0FFMUJvQixFQUFLc3BCLFdBQVd0VCxLQVN4QnM4RCxpQkFBa0IsU0FBVTVJLEdBQ3hCLE1BQU01b0UsRUFBVTRvRSxFQUFXM2dFLFdBQzNCLElBQUsyZ0UsR0FBc0MsSUFBeEJBLEVBQVd6ekQsV0FBbUJuVixFQUFTLE9BRTFELE1BQU1vZSxFQUFXd3FELEVBQVczekQsV0FDNUIsS0FBT21KLEVBQVMsSUFDWnBlLEVBQVFxK0IsYUFBYWpnQixFQUFTLEdBQUl3cUQsR0FHdEM1b0UsRUFBUXFWLFlBQVl1ekQsSUFTeEJ3SCx3QkFBeUIsU0FBVXFCLEVBQVc5akIsRUFBYTN0RCxHQUN2RCxPQUFLQSxHQUFXeXhFLEVBQWtCLEtBQzNCanpFLEtBQUsyNUIsaUJBQWlCbjRCLEVBQVN4QixLQUFLa3ZELGtCQUFrQjd2RCxLQUFLVyxTQUFZbXZELEVBQTRFLEtBQTlEbnZELEtBQUsyNUIsaUJBQWlCbjRCLEVBQVN4QixLQUFLbXZELFlBQVk5dkQsS0FBS1csU0FTcko2eEUsdUJBQXdCLFNBQVVvQixFQUFXOWpCLEVBQWEzdEQsR0FDdEQsSUFBS0EsR0FBV3l4RSxHQUFrQyxJQUFyQnp4RSxFQUFRbVYsU0FBZ0IsT0FBTyxFQUM1RCxNQUFNcVcsRUFBU2h0QixLQUFLa3ZELGtCQUFrQjF0RCxHQUN0QyxPQUFPeEIsS0FBSzI1QixpQkFBaUJuNEIsRUFBU3hCLEtBQUtrdkQsa0JBQWtCN3ZELEtBQUtXLE9BQVNndEIsRUFBVUEsSUFBWW1pQyxHQUFjbnZELEtBQUttdkQsWUFBWTN0RCxJQWtCcEl1d0Usb0JBQXFCLFNBQVV2d0UsRUFBUzB4RSxFQUFjanJCLEVBQVk2ZSxFQUFVQyxFQUFVQyxFQUFRQyxFQUFRaUosRUFBZ0JELEVBQWN0L0IsRUFBV3NnQyxFQUFjVSxFQUFvQnppQixHQUU3SyxJQUFJaWtCLEVBQVlyTSxFQUFTcjlELFdBQ3pCLE9BQVEwcEUsRUFBVTNuQyxhQUFnQjJuQyxFQUFVenlDLGlCQUFvQmhnQyxFQUFLNi9CLGdCQUFnQjR5QyxFQUFVMXBFLGFBQWdCL0ksRUFBSytvQixhQUFhMHBELEVBQVUxcEUsY0FDbkkwcEUsRUFBVWhpRCxXQUFhK2hELEVBQWEvaEQsVUFDeENnaUQsRUFBWUEsRUFBVTFwRSxXQUcxQixJQUFLd21FLEdBQWdCa0QsSUFBY25NLEVBQU92OUQsWUFBYzBwRSxFQUFVaGlELFdBQWEraEQsRUFBYS9oRCxVQUNwRnp3QixFQUFLc3dDLG1CQUFtQjgxQixFQUFTdmhFLFlBQVltTSxNQUFNLEVBQUdxMUQsS0FBY3JtRSxFQUFLc3dDLG1CQUFtQmcyQixFQUFPemhFLFlBQVltTSxNQUFNdTFELElBQVUsQ0FDL0gsTUFBTXJuRCxFQUFXdXpELEVBQVUxOEQsV0FDM0IsSUFBSTI4RCxHQUFVLEVBRWQsSUFBSyxJQUFrQ2wxRSxFQUFHMEIsRUFBRzhCLEVBQUcyeEUsRUFBdkN4MUUsRUFBSSxFQUFHNEosRUFBTW1ZLEVBQVN0WixPQUFvQnpJLEVBQUk0SixFQUFLNUosSUFHeEQsR0FGQUssRUFBSTBoQixFQUFTL2hCLEdBQ2J3MUUsR0FBSzN5RSxFQUFLc3dDLG1CQUFtQjl5QyxHQUN6QkEsSUFBTTRvRSxFQUlWLEdBQUk1b0UsSUFBTThvRSxHQUlWLElBQU1wbkUsR0FBS3l6RSxHQUFPenpFLEdBQUs4QixHQUFLMnhFLEVBQUksQ0FDNUJELEdBQVUsRUFDVixZQUxBMXhFLEdBQUksT0FKSjlCLEdBQUksRUFhWixHQUFJd3pFLEVBR0EsT0FGQTF5RSxFQUFLMG5ELGtCQUFrQitxQixFQUFXRCxHQUUzQixDQUNIeG9CLFNBQVVscEQsRUFDVnF2QyxlQUFnQmkyQixFQUNoQjcxQixZQUFhODFCLEVBQ2JoMkIsYUFBY2kyQixFQUNkOTFCLFVBQVcrMUIsR0FPM0JnSyxFQUFhMW9FLEdBQUksRUFDakIsTUFBTXlyQyxFQUFLeHlDLEVBQ0w4eEUsRUFBYSxDQUFDSixHQUNkSyxFQUFRL3hFLEVBQVE4OEIsV0FBVSxHQUMxQmsxQyxFQUFhMU0sSUFBYUUsRUFDaEMsSUFNSXlNLEVBQVVyb0QsRUFBUzRqRCxFQUFZNW1DLEVBQVMwL0IsRUFOeENqM0IsRUFBaUJpMkIsRUFDakI3MUIsRUFBYzgxQixFQUNkaDJCLEVBQWVpMkIsRUFDZjkxQixFQUFZKzFCLEVBQ1p5TSxHQUFZLEVBQ1pDLEdBQVUsRUFHZCxNQUFNMWlCLEVBQVU3cUQsRUFBRzJILE9BQ25CLFNBQVM2bEUsRUFBVXpDLEdBQ2YsTUFBTWpyQixFQUFTLElBQUkrSyxFQUFRLGlCQUFtQjdvQixFQUFVLDZCQUE4QixNQUN0RixJQUFJdG5DLEVBQVEsR0FNWixPQUpJb2xELEdBQVVpckIsRUFBTXJ3RSxNQUFNc25DLFFBQVE5aEMsT0FBUyxJQUN2Q3hGLEVBQVFvbEQsRUFBT3ZrRCxLQUFLd3ZFLEVBQU1yd0UsTUFBTXNuQyxXQUc1QnRuQyxFQTZRWixHQTFRQSxTQUFVc3BELEVBQWM1NUIsRUFBU2s2QixHQUM3QixNQUFNajBDLEVBQWErWixFQUFRL1osV0FFM0IsSUFBSyxJQUFvQzA2RCxFQUFoQ3R6RSxFQUFJLEVBQUc0SixFQUFNZ1AsRUFBV25RLE9BQWV6SSxFQUFJNEosRUFBSzVKLElBQUssQ0FDMUQsSUFBSTZZLEVBQVFELEVBQVc1WSxHQUN2QixJQUFLNlksRUFBTyxTQUNaLElBQ0k0bkIsRUFEQXUxQyxFQUFZbnBCLEVBSWhCLElBQUtncEIsR0FBYWg5RCxJQUFVbTZCLEVBQWdCLENBQ3hDLElBQUkxUixFQUFPbzBDLEVBQ1h6TCxFQUFhNkosRUFBbUJqN0QsR0FDaEMsTUFBTW85RCxFQUFXcHpFLEVBQUs0cUMsZUFBMkMsSUFBNUJ1RixFQUFlbDZCLFNBQWlCLEdBQUtrNkIsRUFBZTA4QixjQUFjLEVBQUd0OEIsSUFDcEc5ZCxFQUFXenlCLEVBQUs0cUMsZUFBMkMsSUFBNUJ1RixFQUFlbDZCLFNBQWlCLEdBQUtrNkIsRUFBZTA4QixjQUFjdDhCLEVBQ25HdWlDLEdBQ0t0aUMsR0FBYUQsRUFBY0MsRUFBWUQsRUFDeENKLEVBQWVyd0IsS0FBS2xhLE9BQVMycUMsSUFHckMsR0FBSTYyQixFQUFZLENBQ1osTUFBTXQ0RCxFQUFJbWlFLEVBQW1Cam5CLEdBQzdCLEdBQUlsN0MsR0FBS0EsRUFBRS9GLGFBQWUwMUIsRUFBTSxDQUM1QixJQUFJbGhDLEVBQUl1UixFQUNKN1AsRUFBSSxLQUNSLEtBQU8xQixFQUFFd0wsYUFBZTAxQixHQUFNLENBRTFCLElBREF1ckIsRUFBVy9xRCxFQUFJMUIsRUFBRXdMLFdBQVc2MEIsV0FBVSxHQUNoQ3JnQyxFQUFFd1ksV0FBVyxJQUNmOVcsRUFBRXNCLFlBQVloRCxFQUFFd1ksV0FBVyxJQUUvQnhZLEVBQUVnRCxZQUFZdEIsR0FDZDFCLEVBQUlBLEVBQUV3TCxXQUVWeEwsRUFBRXdMLFdBQVd4SSxZQUFZdU8sR0FFN0JzNEQsRUFBYUEsRUFBV3hwQyxXQUFVLEdBR2pDNTlCLEVBQUtzd0MsbUJBQW1COGlDLElBQ3pCcHBCLEVBQVN6cEQsWUFBWTZ5RSxHQUd6QixNQUFNQyxFQUFpQnBDLEVBQW1Cam5CLEdBTzFDLElBTk1xcEIsSUFBZ0JqTSxFQUFhaU0sR0FDL0JqTSxJQUFZM29DLEVBQU8yb0MsR0FFdkIxOEMsRUFBVTFVLEVBQ1YrOEQsRUFBVyxHQUNYcnJDLEVBQVUsR0FDSGhkLElBQVkrVCxHQUFRL1QsSUFBWTRvQixHQUFrQixPQUFaNW9CLEdBQ3pDK2xELEVBQVFqaUIsRUFBa0I5akMsR0FBVyxLQUFPNjhCLEVBQVc3OEIsR0FDbkQrbEQsR0FBOEIsSUFBckIvbEQsRUFBUXpVLFVBQWtCaTlELEVBQVN4b0QsS0FDNUNxb0QsRUFBUzlxRSxLQUFLd29FLEdBQ2Qvb0MsR0FBV2hkLEVBQVF0cUIsTUFBTXNuQyxRQUFRbmUsT0FBTyxFQUFHbUIsRUFBUXRxQixNQUFNc25DLFFBQVExL0IsUUFBUSxNQUFRLEtBRXJGMGlCLEVBQVVBLEVBQVEzaEIsV0FHdEIsTUFBTXVxRSxFQUFZUCxFQUFTcDJDLE9BQVNsSyxFQUVwQyxJQURBNjdDLEVBQWE1akQsRUFBVTRvRCxFQUNoQlAsRUFBU250RSxPQUFTLEdBQ3JCOGtCLEVBQVVxb0QsRUFBU3AyQyxNQUNuQjJ4QyxFQUFXL3RFLFlBQVltcUIsR0FDdkI0akQsRUFBYTVqRCxFQWlCakIsR0FkQThuRCxFQUFhanlFLFlBQVkreUUsR0FDekI3MEMsRUFBS2wrQixZQUFZaXlFLEdBRWJwTCxJQUFlNkosRUFBbUI1Z0MsS0FDbENtaUMsRUFBZUEsRUFBYTUwQyxXQUFVLEdBQ3RDaTFDLEVBQU10eUUsWUFBWWl5RSxHQUNsQkksRUFBVzNxRSxLQUFLdXFFLElBR3BCcmlDLEVBQWlCMWQsRUFDakI4ZCxFQUFjLEVBQ2R5aUMsR0FBWSxFQUVSdG9ELElBQVkrSCxHQUFVL0gsRUFBUW5xQixZQUFZNHZDLElBQ3pDMmlDLEVBQVksU0FJckIsR0FBS0csR0FBV2o5RCxJQUFVcTZCLEVBQTFCLENBMkZBLEdBQUkyaUMsRUFBVyxDQUNYLEdBQXVCLElBQW5CaDlELEVBQU1DLFdBQW1CalcsRUFBS3NwRCxRQUFRdHpDLEdBQVEsQ0FDMUNoVyxFQUFLK3hDLG9CQUFvQi83QixJQUN6QjY4RCxFQUFNdHlFLFlBQVl5VixFQUFNNG5CLFdBQVUsSUFDN0JxUyxJQUNEdWlDLEVBQWVBLEVBQWE1MEMsV0FBVSxHQUN0Q2kxQyxFQUFNdHlFLFlBQVlpeUUsR0FDbEJJLEVBQVczcUUsS0FBS3VxRSxLQUdwQjlvQixFQUFjMXpDLEVBQU9BLEdBRXpCLFNBR0owVSxFQUFVMVUsRUFDVis4RCxFQUFXLEdBQ1hyckMsRUFBVSxHQUNWLE1BQU02ckMsRUFBVSxHQUNoQixLQUE4QixPQUF2QjdvRCxFQUFRM2hCLFlBQXVCMmhCLElBQVk0b0IsR0FBTTVvQixJQUFZOG5ELEdBQ2hFL0IsRUFBUXdDLEVBQVV2b0QsRUFBUWtULFdBQVUsR0FBUzJwQixFQUFXNzhCLEdBQy9CLElBQXJCQSxFQUFRelUsV0FBbUJqVyxFQUFLc3BELFFBQVF0ekMsSUFBVXk2RCxHQUFTeUMsRUFBU3hvRCxLQUNoRThqQyxFQUFrQjlqQyxHQUNiMDhDLEdBQVltTSxFQUFRdHJFLEtBQUt3b0UsR0FFOUJzQyxFQUFTOXFFLEtBQUt3b0UsR0FFbEIvb0MsR0FBV2hkLEVBQVF0cUIsTUFBTXNuQyxRQUFRbmUsT0FBTyxFQUFHbUIsRUFBUXRxQixNQUFNc25DLFFBQVExL0IsUUFBUSxNQUFRLEtBRXJGMGlCLEVBQVVBLEVBQVEzaEIsV0FFdEJncUUsRUFBV0EsRUFBUzM0RCxPQUFPbTVELEdBRTNCLE1BQU1ELEVBQVlQLEVBQVNwMkMsT0FBUzNtQixFQUVwQyxJQURBczRELEVBQWE1akQsRUFBVTRvRCxFQUNoQlAsRUFBU250RSxPQUFTLEdBQ3JCOGtCLEVBQVVxb0QsRUFBU3AyQyxNQUNuQjJ4QyxFQUFXL3RFLFlBQVltcUIsR0FDdkI0akQsRUFBYTVqRCxFQVNqQixJQU5JOGpDLEVBQWtCZ2tCLEVBQWF6cEUsYUFBZ0J5bEQsRUFBa0I4a0IsSUFBZXR6RSxFQUFLc3dDLG1CQUFtQmtpQyxLQUN4R0EsRUFBZUEsRUFBYTUwQyxXQUFVLEdBQ3RDaTFDLEVBQU10eUUsWUFBWWl5RSxHQUNsQkksRUFBVzNxRSxLQUFLdXFFLElBR2ZTLEdBQVk3TCxJQUFjNVksRUFBa0I4a0IsR0FXdENBLElBQWN0OUQsRUFFaEJnMEMsRUFEQWlwQixFQUNXSixFQURTTCxFQUVsQlMsR0FDUEosRUFBTXR5RSxZQUFZK3lFLEdBQ2xCdHBCLEVBQVd0L0IsSUFFWDhuRCxFQUFhanlFLFlBQVkreUUsR0FDekJ0cEIsRUFBV3QvQixPQW5COEMsQ0FDekQ4bkQsRUFBZUEsRUFBYTUwQyxXQUFVLEdBQ3RDLE1BQU00MUMsRUFBWUYsRUFBVXY5RCxXQUM1QixJQUFLLElBQUlqSCxFQUFJLEVBQUcya0UsRUFBT0QsRUFBVTV0RSxPQUFRa0osRUFBSTJrRSxFQUFNM2tFLElBQy9DMGpFLEVBQWFqeUUsWUFBWWl6RSxFQUFVMWtFLElBRXZDd2tFLEVBQVUveUUsWUFBWWl5RSxHQUN0QkssRUFBTXR5RSxZQUFZK3lFLEdBQ2xCVixFQUFXM3FFLEtBQUt1cUUsR0FDc0J4b0IsRUFBbEN3b0IsRUFBYXR6RCxTQUFTdFosT0FBUyxFQUFjOGtCLEVBQ2pDOG5ELEVBWXBCLEdBQUlwTCxHQUFpQyxJQUFuQnB4RCxFQUFNQyxTQUNwQixHQUFJZzdELEVBQW1CajdELEdBQVEsQ0FDM0IsTUFBTTA5RCxFQUFxQjF6RSxFQUFLaTVCLGlCQUFpQit3QixFQUFVLFNBQVVsNkIsR0FBVSxPQUFPeHdCLEtBQUtrdkQsa0JBQWtCMStCLEVBQVEvbUIsYUFBZSttQixFQUFRL21CLGFBQWU4cEUsR0FBUWwwRSxLQUFLcUIsSUFDeEtvbkUsRUFBVzdtRSxZQUFZbXpFLEdBQ3ZCbEIsRUFBZWtCLEVBQW1COTFDLFdBQVUsR0FDNUNnMUMsRUFBVzNxRSxLQUFLdXFFLEdBQ2hCSyxFQUFNdHlFLFlBQVlpeUUsUUFFbEJwTCxFQUFhLEtBS3pCeHBDLEVBQVk1bkIsRUFBTTRuQixXQUFVLEdBQzVCb3NCLEVBQVN6cEQsWUFBWXE5QixHQUNFLElBQW5CNW5CLEVBQU1DLFVBQW1CalcsRUFBS3NwRCxRQUFRdHpDLEtBQVFtOUQsRUFBWXYxQyxHQUU5RDhyQixFQUFjMXpDLEVBQU9tOUQsT0FqTHJCLENBQ0kvTCxFQUFhNkosRUFBbUJqN0QsR0FDaEMsTUFBTXcwRCxFQUFZeHFFLEVBQUs0cUMsZUFBeUMsSUFBMUJ5RixFQUFhcDZCLFNBQWlCLEdBQUtvNkIsRUFBYXc4QixjQUFjcjhCLEVBQVlILEVBQWF6cUMsT0FBUzRxQyxJQUNoSS9kLEVBQVd6eUIsRUFBSzRxQyxlQUFla29DLEdBQXdDLElBQTFCemlDLEVBQWFwNkIsU0FBaUIsR0FBS282QixFQUFhdzhCLGNBQWMsRUFBR3I4QixJQVVwSCxHQVJJNDJCLEVBQ0FBLEVBQWFBLEVBQVd4cEMsV0FBVSxHQUMzQjR3QixFQUFrQmdrQixFQUFhenBFLGNBQWdCcStELElBQ3REb0wsRUFBZUEsRUFBYTUwQyxXQUFVLEdBQ3RDaTFDLEVBQU10eUUsWUFBWWl5RSxHQUNsQkksRUFBVzNxRSxLQUFLdXFFLEtBR2Z4eUUsRUFBS3N3QyxtQkFBbUJrNkIsR0FBWSxDQUNyQzkvQyxFQUFVMVUsRUFDVjB4QixFQUFVLEdBQ1ZxckMsRUFBVyxHQUNYLE1BQU1RLEVBQVUsR0FDaEIsS0FBTzdvRCxJQUFZbW9ELEdBQVNub0QsSUFBWTRvQixHQUFrQixPQUFaNW9CLEdBQ2pCLElBQXJCQSxFQUFRelUsVUFBa0JpOUQsRUFBU3hvRCxLQUMvQjhqQyxFQUFrQjlqQyxHQUFVNm9ELEVBQVF0ckUsS0FBS3lpQixFQUFRa1QsV0FBVSxJQUMxRG0xQyxFQUFTOXFFLEtBQUt5aUIsRUFBUWtULFdBQVUsSUFDckM4SixHQUFXaGQsRUFBUXRxQixNQUFNc25DLFFBQVFuZSxPQUFPLEVBQUdtQixFQUFRdHFCLE1BQU1zbkMsUUFBUTEvQixRQUFRLE1BQVEsS0FFckYwaUIsRUFBVUEsRUFBUTNoQixXQUt0QixJQUhBZ3FFLEVBQVdBLEVBQVMzNEQsT0FBT201RCxHQUUzQjMxQyxFQUFZMHdDLEVBQWE1akQsRUFBVXFvRCxFQUFTcDJDLE9BQVM2dEMsRUFDOUN1SSxFQUFTbnRFLE9BQVMsR0FDckI4a0IsRUFBVXFvRCxFQUFTcDJDLE1BQ25CMnhDLEVBQVcvdEUsWUFBWW1xQixHQUN2QjRqRCxFQUFhNWpELEVBR2pCbW9ELEVBQU10eUUsWUFBWXE5QixHQUNsQmxULEVBQVE3bEIsWUFBYzJsRSxFQUFVMXFELEtBR3BDLEdBQUlzbkQsR0FBY3hwQyxFQUFXLENBQ3pCLE1BQU0rMUMsRUFBa0IxQyxFQUFtQnJ6QyxHQUN2QysxQyxJQUNBdk0sRUFBYXVNLEdBT3JCLElBSEFqcEQsRUFBVTFVLEVBQ1YrOEQsRUFBVyxHQUNYcnJDLEVBQVUsR0FDSGhkLElBQVltb0QsR0FBU25vRCxJQUFZNG9CLEdBQWtCLE9BQVo1b0IsR0FDMUMrbEQsRUFBUWppQixFQUFrQjlqQyxHQUFXLEtBQU82OEIsRUFBVzc4QixHQUNuRCtsRCxHQUE4QixJQUFyQi9sRCxFQUFRelUsVUFBa0JpOUQsRUFBU3hvRCxLQUM1Q3FvRCxFQUFTOXFFLEtBQUt3b0UsR0FDZC9vQyxHQUFXaGQsRUFBUXRxQixNQUFNc25DLFFBQVFuZSxPQUFPLEVBQUdtQixFQUFRdHFCLE1BQU1zbkMsUUFBUTEvQixRQUFRLE1BQVEsS0FFckYwaUIsRUFBVUEsRUFBUTNoQixXQUd0QixNQUFNdXFFLEVBQVlQLEVBQVNwMkMsT0FBU2xLLEVBRXBDLElBREE2N0MsRUFBYTVqRCxFQUFVNG9ELEVBQ2hCUCxFQUFTbnRFLE9BQVMsR0FDckI4a0IsRUFBVXFvRCxFQUFTcDJDLE1BQ25CMnhDLEVBQVcvdEUsWUFBWW1xQixHQUN2QjRqRCxFQUFhNWpELEVBR2IwOEMsSUFDQW9MLEVBQWVBLEVBQWE1MEMsV0FBVSxJQUN6QnI5QixZQUFZK3lFLEdBQ3pCbE0sRUFBV2pvQyxhQUFhcXpDLEVBQWNwTCxFQUFXOXhELFlBQ2pEdTlELEVBQU10eUUsWUFBWTZtRSxHQUNsQndMLEVBQVczcUUsS0FBS3VxRSxHQUNoQnBMLEVBQWEsTUFFYm9MLEVBQWFqeUUsWUFBWSt5RSxHQUc3QmpqQyxFQUFlNWQsRUFDZitkLEVBQVkvZCxFQUFTM1MsS0FBS2xhLE9BQzFCcXRFLEdBQVUsR0FFTHpELEdBQWtCdi9CLElBQ25CdWlDLEVBQWUvL0MsRUFDZkEsRUFBUzV0QixZQUFjN0UsRUFBSzZxQyxnQkFHNUJuZ0IsSUFBWStILEdBQVUvSCxFQUFRbnFCLFlBQVk4dkMsS0ExSzFELENBdVFHdnZDLEVBQVMreEUsR0FHUnRELElBQWlCQyxJQUFtQmUsRUFBYTFvRSxFQUNqRCxNQUFPLENBQ0htaUQsU0FBVWxwRCxFQUNWcXZDLGVBQWdCaTJCLEVBQ2hCNzFCLFlBQWE4MUIsRUFDYmgyQixhQUFjaTJCLEVBQ2Q5MUIsVUFBVysxQixHQU1uQixHQUZBaUosRUFBaUJBLEdBQWtCRCxFQUcvQixJQUFLLElBQUlweUUsRUFBSSxFQUFHQSxFQUFJeTFFLEVBQVdodEUsT0FBUXpJLElBQUssQ0FDeEMsSUFDSXMxQixFQUFVbWhELEVBQVlDLEVBRHRCbkssRUFBYWtKLEVBQVd6MUUsR0FHNUIsR0FBSTh5QyxFQUNBeGQsRUFBV3p5QixFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxnQkFDcENnb0MsRUFBTXB6QyxhQUFhaE4sRUFBVWkzQyxPQUMxQixDQUNILE1BQU1yZCxFQUFZcWQsRUFBVzN6RCxXQUU3QixJQURBNjlELEVBQWF2bkIsRUFBVSxHQUNoQkEsRUFBVSxJQUNid25CLEVBQWF4bkIsRUFBVSxHQUN2QndtQixFQUFNMXpDLGFBQWEwMEMsRUFBWW5LLEdBRW5DMXBFLEVBQUtzcEIsV0FBV29nRCxHQUdWLElBQU52c0UsSUFDSTh5QyxFQUNBRSxFQUFpQkUsRUFBZTVkLEdBRWhDMGQsRUFBaUJ5akMsRUFDakJ2akMsRUFBZXdqQyxRQUl4QixDQUNILEdBQUl0RSxFQUNBLElBQUssSUFBSXB5RSxFQUFJLEVBQUdBLEVBQUl5MUUsRUFBV2h0RSxPQUFRekksSUFDbkNtQyxLQUFLZ3pFLGlCQUFpQk0sRUFBV3oxRSxJQUlyQzh5QyxJQUNBRSxFQUFpQkUsRUFBZW1pQyxHQUl4Q3h5RSxFQUFLNC9CLGdCQUFnQml6QyxFQUFPTCxHQUFjLEdBRXRDdmlDLElBQ0FNLEVBQWNKLEVBQWV0ckMsWUFBWWUsT0FDekM0cUMsRUFBWUgsRUFBYXhyQyxZQUFZZSxRQUl6QyxNQUFNa3VFLEVBQWN0RSxHQUFzRCxJQUFwQ24vQixFQUFheHJDLFlBQVllLE9BRTFENUYsRUFBS3NwRCxRQUFRalosSUFBcUQsSUFBcENBLEVBQWF4ckMsWUFBWWUsU0FDeEQ1RixFQUFLc3BCLFdBQVcrbUIsR0FDaEJBLEVBQWVGLEdBRW5CSyxFQUFZc2pDLEVBQWN6akMsRUFBYXhyQyxZQUFZZSxPQUFTNHFDLEVBRzVELE1BQU11akMsRUFBaUIsQ0FBQzcwRSxFQUFHLEVBQUc4QixFQUFHLEdBQzNCZ3pFLEVBQVloMEUsRUFBSyt6QyxZQUFZNUQsRUFBZ0IwaUMsRUFBT2tCLEdBRXBERSxHQUFlNWpDLEVBQWF0bkMsV0FDOUJrckUsSUFBYTVqQyxFQUFlRixHQUNoQyxNQUFNK2pDLEVBQWUsQ0FBQ2gxRSxFQUFHLEVBQUc4QixFQUFHLEdBQ3pCbXpFLEVBQVVuMEUsRUFBSyt6QyxZQUFZMUQsRUFBZXdpQyxFQUFTb0IsR0FBZ0JILEVBQThCLEtBQWZJLEdBRXhGM2pDLEdBQWV3akMsRUFBZTcwRSxFQUM5QnN4QyxFQUFhUCxFQUFZTSxFQUFjMGpDLEVBQWM5akMsRUFBZXRyQyxZQUFZZSxPQUFTa3VFLEVBQWN0akMsRUFBWXVqQyxFQUFlNzBFLEVBQUlzeEMsRUFBWTBqQyxFQUFhaDFFLEVBRy9KLE1BQU1rMUUsRUFBYXAwRSxFQUFLZ3pDLGNBQWM2L0IsRUFBTyxDQUFDbUIsRUFBV0csSUFBVSxHQU9uRSxPQUxBcnpFLEVBQVFpSSxXQUFXMDJCLGFBQWFvekMsRUFBTy94RSxHQUV2Q3F2QyxFQUFpQm53QyxFQUFLNnpDLGdCQUFnQm1nQyxFQUFXbkIsR0FDakR4aUMsRUFBZXJ3QyxFQUFLNnpDLGdCQUFnQnNnQyxFQUFTdEIsR0FFdEMsQ0FDSDdvQixTQUFVNm9CLEVBQ1YxaUMsZUFBZ0JBLEVBQ2hCSSxZQUFhQSxFQUFjNmpDLEVBQVcsR0FDdEMvakMsYUFBY0EsRUFDZEcsVUFBV0EsRUFBWTRqQyxFQUFXLEtBaUIxQzFDLHNCQUF1QixTQUFVNXdFLEVBQVMweEUsRUFBY2pyQixFQUFZNmUsRUFBVUMsRUFBVW1KLEVBQWdCRCxFQUFjZ0IsRUFBY1UsRUFBb0J6aUIsRUFBbUI2bEIsR0FFdkssSUFBSTVCLEVBQVlyTSxFQUFTcjlELFdBQ3pCLE9BQVEwcEUsRUFBVTNuQyxhQUFnQjJuQyxFQUFVenlDLGlCQUFvQmhnQyxFQUFLNi9CLGdCQUFnQjR5QyxFQUFVMXBFLGFBQWdCL0ksRUFBSytvQixhQUFhMHBELEVBQVUxcEUsY0FDbkkwcEUsRUFBVWhpRCxXQUFhK2hELEVBQWEvaEQsVUFDeENnaUQsRUFBWUEsRUFBVTFwRSxXQUcxQixJQUFLd21FLEdBQWdCa0QsRUFBVWhpRCxXQUFhK2hELEVBQWEvaEQsV0FBYXp3QixFQUFLNi9CLGdCQUFnQjR5QyxLQUFlQSxFQUFVM25DLGFBQWU5cUMsRUFBS3N3QyxtQkFBbUI4MUIsRUFBU3ZoRSxZQUFZbU0sTUFBTSxFQUFHcTFELElBQVksQ0FDak0sSUFBSXFNLEdBQVUsRUFDVnh6RSxFQUFJa25FLEVBQVNwbUMsZ0JBQ2pCLEtBQU85Z0MsR0FBRyxDQUNOLElBQUtjLEVBQUtzd0MsbUJBQW1CcHhDLEdBQUksQ0FDN0J3ekUsR0FBVSxFQUNWLE1BRUp4ekUsRUFBSUEsRUFBRThnQyxnQkFHVixHQUFJMHlDLEVBR0EsT0FGQTF5RSxFQUFLMG5ELGtCQUFrQitxQixFQUFXRCxHQUUzQixDQUNIeG9CLFNBQVVscEQsRUFDVmk5QixVQUFXcW9DLEVBQ1gzWixPQUFRNFosR0FNcEJrSyxFQUFhMW9FLEdBQUksRUFDakIsTUFBTXlyQyxFQUFLeHlDLEVBQ0w4eEUsRUFBYSxDQUFDSixHQUNkSyxFQUFRL3hFLEVBQVE4OEIsV0FBVSxHQUVoQyxJQUdJbTFDLEVBQVVyb0QsRUFBUzRqRCxFQUFZbEgsRUFIL0JycEMsRUFBWXFvQyxFQUNaM1osRUFBUzRaLEVBQ1RpTyxHQUFXLEVBNEtmLEdBektBLFNBQVU1cUIsRUFBYzU1QixFQUFTazZCLEdBQzdCLE1BQU1qMEMsRUFBYStaLEVBQVEvWixXQUUzQixJQUFLLElBQW9DMDZELEVBQU84RCxFQUF2Q3AzRSxFQUFJLEVBQUc0SixFQUFNZ1AsRUFBV25RLE9BQTJCekksRUFBSTRKLEVBQUs1SixJQUFLLENBQ3RFLE1BQU02WSxFQUFRRCxFQUFXNVksR0FDekIsSUFBSzZZLEVBQU8sU0FDWixJQUFJbTlELEVBQVlucEIsRUFFaEIsR0FBSXNxQixJQUFhdDBFLEVBQUtzcEQsUUFBUXR6QyxHQUFRLENBQ2xDLEdBQXVCLElBQW5CQSxFQUFNQyxTQUFnQixDQUN0QixHQUFJalcsRUFBSyt4QyxvQkFBb0IvN0IsSUFRekIsR0FQQXc4RCxFQUFlQSxFQUFhNTBDLFdBQVUsR0FDdEMyMkMsRUFBYXYrRCxFQUFNNG5CLFdBQVUsR0FDN0JpMUMsRUFBTXR5RSxZQUFZZzBFLEdBQ2xCMUIsRUFBTXR5RSxZQUFZaXlFLEdBQ2xCSSxFQUFXM3FFLEtBQUt1cUUsR0FHWjZCLEdBQWlCcitELEVBQU00WixTQUFTeWtELEdBQWdCLENBQ2hELE1BQU1GLEVBQVVuMEUsRUFBSyt6QyxZQUFZc2dDLEVBQWVyK0QsR0FDaERxK0QsRUFBZ0JyMEUsRUFBSzZ6QyxnQkFBZ0JzZ0MsRUFBU0ksU0FHbEQ3cUIsRUFBYzF6QyxFQUFPQSxHQUV6QixTQUdKMFUsRUFBVTFVLEVBQ1YrOEQsRUFBVyxHQUNYLE1BQU1RLEVBQVUsR0FDaEIsS0FBOEIsT0FBdkI3b0QsRUFBUTNoQixZQUF1QjJoQixJQUFZNG9CLEdBQU01b0IsSUFBWThuRCxHQUNoRS9CLEVBQVFscEIsRUFBVzc4QixHQUNNLElBQXJCQSxFQUFRelUsVUFBa0J3NkQsSUFDdEJqaUIsRUFBa0I5akMsR0FDYjA4QyxHQUFZbU0sRUFBUXRyRSxLQUFLd29FLEdBRTlCc0MsRUFBUzlxRSxLQUFLd29FLElBR3RCL2xELEVBQVVBLEVBQVEzaEIsV0FFdEJncUUsRUFBV0EsRUFBUzM0RCxPQUFPbTVELEdBRTNCLE1BQU1pQixFQUFZekIsRUFBU250RSxPQUFTLEVBQzlCMHRFLEVBQVlQLEVBQVNwMkMsT0FBUzNtQixFQUVwQyxJQURBczRELEVBQWE1akQsRUFBVTRvRCxFQUNoQlAsRUFBU250RSxPQUFTLEdBQ3JCOGtCLEVBQVVxb0QsRUFBU3AyQyxNQUNuQjJ4QyxFQUFXL3RFLFlBQVltcUIsR0FDdkI0akQsRUFBYTVqRCxFQVNqQixHQU5JOGpDLEVBQWtCZ2tCLEVBQWF6cEUsY0FBZ0J5bEQsRUFBa0I4a0IsS0FDakVkLEVBQWVBLEVBQWE1MEMsV0FBVSxHQUN0Q2kxQyxFQUFNdHlFLFlBQVlpeUUsR0FDbEJJLEVBQVczcUUsS0FBS3VxRSxLQUdmcEwsR0FBYzVZLEVBQWtCOGtCLEdBQVksQ0FDN0NkLEVBQWVBLEVBQWE1MEMsV0FBVSxHQUN0QyxNQUFNNDFDLEVBQVlGLEVBQVV2OUQsV0FDNUIsSUFBSyxJQUFJakgsRUFBSSxFQUFHMmtFLEVBQU9ELEVBQVU1dEUsT0FBUWtKLEVBQUkya0UsRUFBTTNrRSxJQUMvQzBqRSxFQUFhanlFLFlBQVlpekUsRUFBVTFrRSxJQUV2Q3drRSxFQUFVL3lFLFlBQVlpeUUsR0FDdEJLLEVBQU10eUUsWUFBWSt5RSxHQUNsQnRwQixFQUFZd0UsRUFBa0I5akMsR0FBcUI4bkQsRUFBVjluRCxFQUN6Q2tvRCxFQUFXM3FFLEtBQUt1cUUsUUFDVGdDLEdBQ1BoQyxFQUFhanlFLFlBQVkreUUsR0FDekJ0cEIsRUFBV3QvQixHQUVYcy9CLEVBQVd3b0IsRUFHZixHQUFJcEwsR0FBaUMsSUFBbkJweEQsRUFBTUMsU0FDcEIsR0FBSWc3RCxFQUFtQmo3RCxHQUFRLENBQzNCLE1BQU0wOUQsRUFBcUIxekUsRUFBS2k1QixpQkFBaUIrd0IsRUFBVSxTQUFVbDZCLEdBQVUsT0FBT3h3QixLQUFLa3ZELGtCQUFrQjErQixFQUFRL21CLGFBQWUrbUIsRUFBUS9tQixhQUFlOHBFLEdBQVFsMEUsS0FBS3FCLElBQ3hLb25FLEVBQVc3bUUsWUFBWW16RSxHQUN2QmxCLEVBQWVrQixFQUFtQjkxQyxXQUFVLEdBQzVDZzFDLEVBQVczcUUsS0FBS3VxRSxHQUNoQkssRUFBTXR5RSxZQUFZaXlFLFFBRWxCcEwsRUFBYSxLQU16QixHQUFLa04sR0FBWXQrRCxJQUFVK25CLEVBb0UzQjB5QyxFQUFTNkQsRUFBb0Mvc0IsRUFBV3Z4QyxHQUFwQ0EsRUFBTTRuQixXQUFVLEdBQ2hDNnlDLElBQ0F6bUIsRUFBU3pwRCxZQUFZa3dFLEdBQ0UsSUFBbkJ6NkQsRUFBTUMsVUFBbUJqVyxFQUFLc3BELFFBQVF0ekMsS0FBUW05RCxFQUFZMUMsSUFHbEUvbUIsRUFBYzF6QyxFQUFPbTlELE9BMUVyQixDQUNJLElBQUkxMEMsRUFBT28wQyxFQUNYekwsRUFBYTZKLEVBQW1CajdELEdBQ2hDLE1BQU1vOUQsRUFBV3B6RSxFQUFLNHFDLGVBQXNDLElBQXZCN00sRUFBVTluQixTQUFpQixHQUFLOG5CLEVBQVU4dUMsY0FBYyxFQUFHcGdCLElBQzFGaDZCLEVBQVd6eUIsRUFBSzRxQyxlQUFzQyxJQUF2QjdNLEVBQVU5bkIsU0FBaUIsR0FBSzhuQixFQUFVOHVDLGNBQWNwZ0IsRUFBUzF1QixFQUFVbjRCLE9BQVM2bUQsSUFFekgsR0FBSTJhLEVBQVksQ0FDWixNQUFNdDRELEVBQUltaUUsRUFBbUJqbkIsR0FDN0IsR0FBSWw3QyxHQUFLQSxFQUFFL0YsYUFBZTAxQixFQUFNLENBQzVCLElBQUlsaEMsRUFBSXVSLEVBQ0o3UCxFQUFJLEtBQ1IsS0FBTzFCLEVBQUV3TCxhQUFlMDFCLEdBQU0sQ0FFMUIsSUFEQXVyQixFQUFXL3FELEVBQUkxQixFQUFFd0wsV0FBVzYwQixXQUFVLEdBQ2hDcmdDLEVBQUV3WSxXQUFXLElBQ2Y5VyxFQUFFc0IsWUFBWWhELEVBQUV3WSxXQUFXLElBRS9CeFksRUFBRWdELFlBQVl0QixHQUNkMUIsRUFBSUEsRUFBRXdMLFdBRVZ4TCxFQUFFd0wsV0FBV3hJLFlBQVl1TyxHQUU3QnM0RCxFQUFhQSxFQUFXeHBDLFdBQVUsR0FHakM1OUIsRUFBS3N3QyxtQkFBbUI4aUMsSUFDekJwcEIsRUFBU3pwRCxZQUFZNnlFLEdBR3pCLE1BQU1DLEVBQWlCcEMsRUFBbUJqbkIsR0FNMUMsSUFMTXFwQixJQUFnQmpNLEVBQWFpTSxHQUMvQmpNLElBQVkzb0MsRUFBTzJvQyxHQUV2QjE4QyxFQUFVcy9CLEVBQ1Yrb0IsRUFBVyxHQUNKcm9ELElBQVkrVCxHQUFvQixPQUFaL1QsR0FDdkIrbEQsRUFBUWxwQixFQUFXNzhCLEdBQ00sSUFBckJBLEVBQVF6VSxVQUFrQnc2RCxHQUMxQnNDLEVBQVM5cUUsS0FBS3dvRSxHQUVsQi9sRCxFQUFVQSxFQUFRM2hCLFdBR3RCLE1BQU11cUUsRUFBWVAsRUFBU3AyQyxPQUFTcXRCLEVBRXBDLElBREFza0IsRUFBYTVqRCxFQUFVNG9ELEVBQ2hCUCxFQUFTbnRFLE9BQVMsR0FDckI4a0IsRUFBVXFvRCxFQUFTcDJDLE1BQ25CMnhDLEVBQVcvdEUsWUFBWW1xQixHQUN2QjRqRCxFQUFhNWpELEVBR2I0b0QsSUFBY3RwQixHQUNkd29CLEVBQWFqeUUsWUFBWSt5RSxHQUN6QnRwQixFQUFXdC9CLEdBRVhzL0IsRUFBV3dvQixFQUdYeHlFLEVBQUtzcEQsUUFBUXR6QyxJQUFRdzhELEVBQWFqeUUsWUFBWXlWLEVBQU00bkIsV0FBVSxJQUNsRWEsRUFBS2wrQixZQUFZaXlFLEdBRWpCejBDLEVBQVl0TCxFQUNaZzZCLEVBQVMsRUFDVDZuQixHQUFXLEVBRVh0cUIsRUFBU3pwRCxZQUFZdzlCLEtBMUpqQyxDQXNLR2o5QixFQUFTK3hFLEdBR1J0RCxJQUFpQkMsSUFBbUJlLEVBQWExb0UsRUFDakQsTUFBTyxDQUNIbWlELFNBQVVscEQsRUFDVmk5QixVQUFXcW9DLEVBQ1gzWixPQUFRNFosRUFDUmgyQixhQUFjZ2tDLEdBTXRCLEdBRkE3RSxFQUFpQkEsR0FBa0JELEVBRy9CLElBQUssSUFBSXB5RSxFQUFJLEVBQUdBLEVBQUl5MUUsRUFBV2h0RSxPQUFRekksSUFBSyxDQUN4QyxJQUFJdXNFLEVBQWFrSixFQUFXejFFLEdBRTVCLE1BQU1rdkQsRUFBWXFkLEVBQVczekQsV0FDdkIwYyxFQUFXNDVCLEVBQVUsR0FDM0IsS0FBT0EsRUFBVSxJQUNid21CLEVBQU0xekMsYUFBYWt0QixFQUFVLEdBQUlxZCxHQUVyQzFwRSxFQUFLc3BCLFdBQVdvZ0QsR0FFTixJQUFOdnNFLElBQVM0Z0MsRUFBWXRMLFFBRTFCLEdBQUk4OEMsRUFBYyxDQUNyQmlELEVBQWVBLEVBQWFsOUQsV0FDNUIsSUFBSyxJQUFJblksRUFBSSxFQUFHQSxFQUFJeTFFLEVBQVdodEUsT0FBUXpJLElBQ25DbUMsS0FBS2d6RSxpQkFBaUJNLEVBQVd6MUUsSUFJekMsR0FBS3F5RSxHQUE4QyxJQUE1QnFELEVBQU05OEQsV0FBV25RLE9BT2pDLENBQ0g1RixFQUFLNC9CLGdCQUFnQml6QyxFQUFPTCxHQUFjLEdBRXRDeHlFLEVBQUtzd0MsbUJBQW1CdWlDLEVBQU1odUUsZUFDOUJrNUIsRUFBWTgwQyxFQUFNdjlELFdBQ2xCbTNDLEVBQVMsR0FJYixNQUFNOUQsRUFBVSxDQUFDenBELEVBQUcsRUFBRzhCLEVBQUcsR0FDcEJtdUIsRUFBT252QixFQUFLK3pDLFlBQVloVyxFQUFXODBDLEVBQU9scUIsR0FDaEQ4RCxHQUFVOUQsRUFBUXpwRCxFQUdsQixNQUFNazFFLEVBQWFwMEUsRUFBS2d6QyxjQUFjNi9CLEVBQU8sQ0FBQzFqRCxJQUFPLEdBRXJEcnVCLEVBQVFpSSxXQUFXMDJCLGFBQWFvekMsRUFBTy94RSxHQUV2Q2k5QixFQUFZLzlCLEVBQUs2ekMsZ0JBQWdCMWtCLEVBQU0wakQsR0FDdkNwbUIsR0FBVTJuQixFQUFXLFFBekJqQnR6RSxFQUFRaVYsV0FDUmdvQixFQUFZajlCLEVBQVFpVixXQUFXLElBRS9CZ29CLEVBQVkvOUIsRUFBSzRxQyxlQUFlNXFDLEVBQUs2cUMsZ0JBQ3JDL3BDLEVBQVFQLFlBQVl3OUIsSUF3QjVCLE1BQU8sQ0FDSGlzQixTQUFVNm9CLEVBQ1Y5MEMsVUFBV0EsRUFDWDB1QixPQUFRQSxFQUNScGMsYUFBY2drQyxJQWV0QjVDLHVCQUF3QixTQUFVM3dFLEVBQVMweEUsRUFBY2pyQixFQUFZaW9CLEVBQWdCRCxFQUFjZ0IsRUFBYzhELEdBRTdHLElBQUs5RSxFQUFjLENBRWYsSUFBSTRFLEVBQVUsS0FDVkUsR0FBaUJ2ekUsRUFBUTh1QixTQUFTeWtELEtBQWdCRixFQUFVbjBFLEVBQUsrekMsWUFBWXNnQyxFQUFldnpFLElBRWhHLE1BQU0yekUsRUFBVzN6RSxFQUFRODhCLFdBQVUsR0FDN0I4eEMsRUFBYzhDLEVBQWEvaEQsU0FDM0Jpa0QsRUFBYWxDLEVBQWFweUUsTUFBTXNuQyxRQUNoQ2l0QyxFQUFXbkMsRUFBYXR5RSxVQUU5QixJQUVTOFYsRUFGTGtKLEVBQVd1MUQsRUFBUzErRCxXQUNwQjVZLEVBQUksRUFBRzRKLEVBQU1tWSxFQUFTdFosT0FDMUIsS0FBZ0J6SSxFQUFJNEosSUFDaEJpUCxFQUFRa0osRUFBUy9oQixHQUNNLElBQW5CNlksRUFBTUMsVUFGVzlZLElBQUssQ0FHMUIsR0FBSTZZLEVBQU15YSxXQUFhaS9DLEVBR2hCLEtBQUsxdkUsRUFBS3NwRCxRQUFRdHpDLElBQVVoVyxFQUFLK3hDLG9CQUFvQi83QixHQUN4RCxTQUNHLEdBQVksSUFBUmpQLEVBQVcsQ0FDbEJtWSxFQUFXbEosRUFBTUQsV0FDakJoUCxFQUFNbVksRUFBU3RaLE9BQ2Z6SSxHQUFLLEVBQ0wsU0FFQSxNQVZBNlksRUFBTTVWLE1BQU1zbkMsU0FBV2d0QyxFQUN2QjEwRSxFQUFLeUksU0FBU3VOLEVBQU8yK0QsR0FhN0IsR0FBSTV0RSxFQUFNLEdBQUs1SixJQUFNNEosRUFFakIsT0FEQWpHLEVBQVE0QyxVQUFZK3dFLEVBQVMvd0UsVUFDdEIsQ0FDSHNtRCxTQUFVbHBELEVBQ1Z1dkMsYUFBYzhqQyxFQUFVbjBFLEVBQUs2ekMsZ0JBQWdCc2dDLEVBQVNyekUsR0FBVyxNQU03RXl2RSxFQUFhMW9FLEdBQUksRUFDakIsTUFBTWdyRSxFQUFRL3hFLEVBQVE4OEIsV0FBVSxHQUMxQmcxQyxFQUFhLENBQUNKLEdBQ3BCLElBQUlvQyxHQUFhLEVBMkNqQixHQXpDQSxTQUFVbHJCLEVBQWM1NUIsRUFBU2s2QixHQUM3QixNQUFNajBDLEVBQWErWixFQUFRL1osV0FFM0IsSUFBSyxJQUFvQzA2RCxFQUFPOEQsRUFBdkNwM0UsRUFBSSxFQUFHNEosRUFBTWdQLEVBQVduUSxPQUEyQnpJLEVBQUk0SixFQUFLNUosSUFBSyxDQUN0RSxJQUFJNlksRUFBUUQsRUFBVzVZLEdBQ3ZCLElBQUs2WSxFQUFPLFNBQ1osSUFBSW05RCxFQUFZbnBCLEVBRWhCLEdBQUtocUQsRUFBS3NwRCxRQUFRdHpDLEtBQVVoVyxFQUFLK3hDLG9CQUFvQi83QixHQW9CakR5NkQsRUFBUWxwQixFQUFXdnhDLEdBQ2Z5NkQsSUFDQW1FLEdBQWEsRUFDYjVxQixFQUFTenBELFlBQVlrd0UsR0FDRSxJQUFuQno2RCxFQUFNQyxXQUFnQms5RCxFQUFZMUMsSUFJekN6d0UsRUFBS3NwRCxRQUFRdHpDLElBQVEwekMsRUFBYzF6QyxFQUFPbTlELFFBZjNDLEdBWklYLEVBQWF6OEQsV0FBV25RLE9BQVMsSUFDakNpdEUsRUFBTXR5RSxZQUFZaXlFLEdBQ2xCQSxFQUFlQSxFQUFhNTBDLFdBQVUsSUFHMUMyMkMsRUFBYXYrRCxFQUFNNG5CLFdBQVUsR0FDN0JpMUMsRUFBTXR5RSxZQUFZZzBFLEdBQ2xCMUIsRUFBTXR5RSxZQUFZaXlFLEdBQ2xCSSxFQUFXM3FFLEtBQUt1cUUsR0FDaEJ4b0IsRUFBV3dvQixFQUdQNkIsR0FBaUJyK0QsRUFBTTRaLFNBQVN5a0QsR0FBZ0IsQ0FDaEQsTUFBTUYsRUFBVW4wRSxFQUFLK3pDLFlBQVlzZ0MsRUFBZXIrRCxHQUNoRHErRCxFQUFnQnIwRSxFQUFLNnpDLGdCQUFnQnNnQyxFQUFTSSxLQXZCOUQsQ0FzQ0d6ekUsRUFBUzB4RSxHQUdSb0MsR0FBZXJGLElBQWlCQyxJQUFtQmUsRUFBYTFvRSxFQUFJLE1BQU8sQ0FBRW1pRCxTQUFVbHBELEVBQVN1dkMsYUFBY2drQyxHQUlsSCxHQUZBeEIsRUFBTXR5RSxZQUFZaXlFLEdBRWRoRCxHQUFrQkQsRUFDbEIsSUFBSyxJQUFJcHlFLEVBQUksRUFBR0EsRUFBSXkxRSxFQUFXaHRFLE9BQVF6SSxJQUFLLENBQ3hDLElBQUl1c0UsRUFBYWtKLEVBQVd6MUUsR0FFNUIsTUFBTWt2RCxFQUFZcWQsRUFBVzN6RCxXQUM3QixLQUFPczJDLEVBQVUsSUFDYndtQixFQUFNMXpDLGFBQWFrdEIsRUFBVSxHQUFJcWQsR0FFckMxcEUsRUFBS3NwQixXQUFXb2dELFFBRWpCLEdBQUk2RixFQUFjLENBQ3JCaUQsRUFBZUEsRUFBYWw5RCxXQUM1QixJQUFLLElBQUluWSxFQUFJLEVBQUdBLEVBQUl5MUUsRUFBV2h0RSxPQUFRekksSUFDbkNtQyxLQUFLZ3pFLGlCQUFpQk0sRUFBV3oxRSxJQVN6QyxPQUxBNkMsRUFBSzQvQixnQkFBZ0JpekMsRUFBT0wsR0FBYyxHQUMxQ3h5RSxFQUFLZ3pDLGNBQWM2L0IsRUFBTyxNQUFNLEdBR2hDL3hFLEVBQVFpSSxXQUFXMDJCLGFBQWFvekMsRUFBTy94RSxHQUNoQyxDQUFFa3BELFNBQVU2b0IsRUFBT3hpQyxhQUFjZ2tDLElBZTVDN0Msb0JBQXFCLFNBQVUxd0UsRUFBUzB4RSxFQUFjanJCLEVBQVkrZSxFQUFRQyxFQUFRaUosRUFBZ0JELEVBQWNnQixFQUFjVSxFQUFvQnppQixHQUU5SSxJQUFJaWtCLEVBQVluTSxFQUFPdjlELFdBQ3ZCLE9BQVEwcEUsRUFBVTNuQyxhQUFnQjJuQyxFQUFVenlDLGlCQUFvQmhnQyxFQUFLNi9CLGdCQUFnQjR5QyxFQUFVMXBFLGFBQWdCL0ksRUFBSytvQixhQUFhMHBELEVBQVUxcEUsY0FDbkkwcEUsRUFBVWhpRCxXQUFhK2hELEVBQWEvaEQsVUFDeENnaUQsRUFBWUEsRUFBVTFwRSxXQUcxQixJQUFLd21FLEdBQWdCa0QsRUFBVWhpRCxXQUFhK2hELEVBQWEvaEQsV0FBYXp3QixFQUFLNi9CLGdCQUFnQjR5QyxLQUFlQSxFQUFVenlDLGlCQUFtQmhnQyxFQUFLc3dDLG1CQUFtQmcyQixFQUFPemhFLFlBQVltTSxNQUFNdTFELElBQVUsQ0FDOUwsSUFBSW1NLEdBQVUsRUFDVjF4RSxFQUFJc2xFLEVBQU94N0IsWUFDZixLQUFPOXBDLEdBQUcsQ0FDTixJQUFLaEIsRUFBS3N3QyxtQkFBbUJ0dkMsR0FBSSxDQUM3QjB4RSxHQUFVLEVBQ1YsTUFFSjF4RSxFQUFJQSxFQUFFOHBDLFlBR1YsR0FBSTRuQyxFQUdBLE9BRkExeUUsRUFBSzBuRCxrQkFBa0IrcUIsRUFBV0QsR0FFM0IsQ0FDSHhvQixTQUFVbHBELEVBQ1ZpOUIsVUFBV3VvQyxFQUNYN1osT0FBUThaLEdBTXBCZ0ssRUFBYTFvRSxHQUFJLEVBQ2pCLE1BQU15ckMsRUFBS3h5QyxFQUNMOHhFLEVBQWEsQ0FBQ0osR0FDZEssRUFBUS94RSxFQUFRODhCLFdBQVUsR0FFaEMsSUFHSW0xQyxFQUFVcm9ELEVBQVM0akQsRUFBWWxILEVBSC9CcnBDLEVBQVl1b0MsRUFDWjdaLEVBQVM4WixFQUNUK04sR0FBVyxFQThLZixHQTNLQSxTQUFVNXFCLEVBQWM1NUIsRUFBU2s2QixHQUM3QixNQUFNajBDLEVBQWErWixFQUFRL1osV0FFM0IsSUFBSyxJQUErQjA2RCxFQUEzQnR6RSxFQUFJNFksRUFBV25RLE9BQVMsRUFBVSxHQUFLekksRUFBR0EsSUFBSyxDQUNwRCxNQUFNNlksRUFBUUQsRUFBVzVZLEdBQ3pCLElBQUs2WSxFQUFPLFNBQ1osSUFBSW05RCxFQUFZbnBCLEVBRWhCLEdBQUlzcUIsSUFBYXQwRSxFQUFLc3BELFFBQVF0ekMsR0FBUSxDQUNsQyxHQUF1QixJQUFuQkEsRUFBTUMsU0FBZ0IsQ0FDdEIsR0FBSWpXLEVBQUsreEMsb0JBQW9CLzdCLEdBQVEsQ0FDakN3OEQsRUFBZUEsRUFBYTUwQyxXQUFVLEdBQ3RDLE1BQU0yMkMsRUFBYXYrRCxFQUFNNG5CLFdBQVUsR0FDbkNpMUMsRUFBTTF6QyxhQUFhbzFDLEVBQVl2cUIsR0FDL0I2b0IsRUFBTTF6QyxhQUFhcXpDLEVBQWMrQixHQUNqQzNCLEVBQVczcUUsS0FBS3VxRSxRQUVoQjlvQixFQUFjMXpDLEVBQU9BLEdBRXpCLFNBR0owVSxFQUFVMVUsRUFDVis4RCxFQUFXLEdBQ1gsTUFBTVEsRUFBVSxHQUNoQixLQUE4QixPQUF2QjdvRCxFQUFRM2hCLFlBQXVCMmhCLElBQVk0b0IsR0FBTTVvQixJQUFZOG5ELEdBQ2hFL0IsRUFBUWxwQixFQUFXNzhCLEdBQ2YrbEQsR0FBOEIsSUFBckIvbEQsRUFBUXpVLFdBQ2J1NEMsRUFBa0I5akMsR0FDYjA4QyxHQUFZbU0sRUFBUXRyRSxLQUFLd29FLEdBRTlCc0MsRUFBUzlxRSxLQUFLd29FLElBR3RCL2xELEVBQVVBLEVBQVEzaEIsV0FFdEJncUUsRUFBV0EsRUFBUzM0RCxPQUFPbTVELEdBRTNCLE1BQU1pQixFQUFZekIsRUFBU250RSxPQUFTLEVBQzlCMHRFLEVBQVlQLEVBQVNwMkMsT0FBUzNtQixFQUVwQyxJQURBczRELEVBQWE1akQsRUFBVTRvRCxFQUNoQlAsRUFBU250RSxPQUFTLEdBQ3JCOGtCLEVBQVVxb0QsRUFBU3AyQyxNQUNuQjJ4QyxFQUFXL3RFLFlBQVltcUIsR0FDdkI0akQsRUFBYTVqRCxFQVNqQixHQU5JOGpDLEVBQWtCZ2tCLEVBQWF6cEUsY0FBZ0J5bEQsRUFBa0I4a0IsS0FDakVkLEVBQWVBLEVBQWE1MEMsV0FBVSxHQUN0Q2kxQyxFQUFNMXpDLGFBQWFxekMsRUFBY0ssRUFBTXY5RCxZQUN2Q3M5RCxFQUFXM3FFLEtBQUt1cUUsS0FHZnBMLEdBQWM1WSxFQUFrQjhrQixHQUFZLENBQzdDZCxFQUFlQSxFQUFhNTBDLFdBQVUsR0FDdEMsTUFBTTQxQyxFQUFZRixFQUFVdjlELFdBQzVCLElBQUssSUFBSWpILEVBQUksRUFBRzJrRSxFQUFPRCxFQUFVNXRFLE9BQVFrSixFQUFJMmtFLEVBQU0za0UsSUFDL0MwakUsRUFBYWp5RSxZQUFZaXpFLEVBQVUxa0UsSUFFdkN3a0UsRUFBVS95RSxZQUFZaXlFLEdBQ3RCSyxFQUFNMXpDLGFBQWFtMEMsRUFBV1QsRUFBTXY5RCxZQUNwQ3M5RCxFQUFXM3FFLEtBQUt1cUUsR0FDc0J4b0IsRUFBbEN3b0IsRUFBYXR6RCxTQUFTdFosT0FBUyxFQUFjOGtCLEVBQ2pDOG5ELE9BQ1RnQyxHQUNQaEMsRUFBYXJ6QyxhQUFhbTBDLEVBQVdkLEVBQWFsOUQsWUFDbEQwMEMsRUFBV3QvQixHQUVYcy9CLEVBQVd3b0IsRUFHZixHQUFJcEwsR0FBaUMsSUFBbkJweEQsRUFBTUMsU0FDcEIsR0FBSWc3RCxFQUFtQmo3RCxHQUFRLENBQzNCLE1BQU0wOUQsRUFBcUIxekUsRUFBS2k1QixpQkFBaUIrd0IsRUFBVSxTQUFVbDZCLEdBQVUsT0FBT3h3QixLQUFLa3ZELGtCQUFrQjErQixFQUFRL21CLGFBQWUrbUIsRUFBUS9tQixhQUFlOHBFLEdBQVFsMEUsS0FBS3FCLElBQ3hLb25FLEVBQVc3bUUsWUFBWW16RSxHQUN2QmxCLEVBQWVrQixFQUFtQjkxQyxXQUFVLEdBQzVDZzFDLEVBQVczcUUsS0FBS3VxRSxHQUNoQkssRUFBTTF6QyxhQUFhcXpDLEVBQWNLLEVBQU12OUQsaUJBRXZDOHhELEVBQWEsS0FNekIsR0FBS2tOLEdBQVl0K0QsSUFBVStuQixFQTJFM0IweUMsRUFBUzZELEVBQW9DL3NCLEVBQVd2eEMsR0FBcENBLEVBQU00bkIsV0FBVSxHQUNoQzZ5QyxJQUNBem1CLEVBQVM3cUIsYUFBYXN4QyxFQUFPem1CLEVBQVMxMEMsWUFDZixJQUFuQlUsRUFBTUMsVUFBbUJqVyxFQUFLc3BELFFBQVF0ekMsS0FBUW05RCxFQUFZMUMsSUFHbEUvbUIsRUFBYzF6QyxFQUFPbTlELE9BakZyQixDQUNJL0wsRUFBYTZKLEVBQW1CajdELEdBQ2hDLE1BQU13MEQsRUFBWXhxRSxFQUFLNHFDLGVBQXNDLElBQXZCN00sRUFBVTluQixTQUFpQixHQUFLOG5CLEVBQVU4dUMsY0FBY3BnQixFQUFTMXVCLEVBQVVuNEIsT0FBUzZtRCxJQUNwSGg2QixFQUFXenlCLEVBQUs0cUMsZUFBc0MsSUFBdkI3TSxFQUFVOW5CLFNBQWlCLEdBQUs4bkIsRUFBVTh1QyxjQUFjLEVBQUdwZ0IsSUFFaEcsR0FBSTJhLEVBQVksQ0FDWkEsRUFBYUEsRUFBV3hwQyxXQUFVLEdBQ2xDLE1BQU05dUIsRUFBSW1pRSxFQUFtQmpuQixHQUM3QixHQUFJbDdDLEdBQUtBLEVBQUUvRixhQUFlOHBFLEVBQU8sQ0FDN0IsSUFBSXQxRSxFQUFJdVIsRUFDSjdQLEVBQUksS0FDUixLQUFPMUIsRUFBRXdMLGFBQWU4cEUsR0FBTyxDQUUzQixJQURBN29CLEVBQVcvcUQsRUFBSTFCLEVBQUV3TCxXQUFXNjBCLFdBQVUsR0FDaENyZ0MsRUFBRXdZLFdBQVcsSUFDZjlXLEVBQUVzQixZQUFZaEQsRUFBRXdZLFdBQVcsSUFFL0J4WSxFQUFFZ0QsWUFBWXRCLEdBQ2QxQixFQUFJQSxFQUFFd0wsV0FFVnhMLEVBQUV3TCxXQUFXbzJCLGFBQWFyd0IsRUFBR3ZSLEVBQUV3TCxXQUFXdU0sWUFFOUM4eEQsRUFBYUEsRUFBV3hwQyxXQUFVLFFBQzNCNHdCLEVBQWtCZ2tCLEVBQWF6cEUsY0FBZ0JxK0QsSUFDdERvTCxFQUFlQSxFQUFhNTBDLFdBQVUsR0FDdENpMUMsRUFBTXR5RSxZQUFZaXlFLEdBQ2xCSSxFQUFXM3FFLEtBQUt1cUUsSUFTcEIsSUFOS3h5RSxFQUFLc3dDLG1CQUFtQms2QixJQUN6QnhnQixFQUFTN3FCLGFBQWFxckMsRUFBV3hnQixFQUFTMTBDLFlBRzlDb1YsRUFBVXMvQixFQUNWK29CLEVBQVcsR0FDSnJvRCxJQUFZbW9ELEdBQXFCLE9BQVpub0QsR0FDeEIrbEQsRUFBUWppQixFQUFrQjlqQyxHQUFXLEtBQU82OEIsRUFBVzc4QixHQUNuRCtsRCxHQUE4QixJQUFyQi9sRCxFQUFRelUsVUFDakI4OEQsRUFBUzlxRSxLQUFLd29FLEdBRWxCL2xELEVBQVVBLEVBQVEzaEIsV0FHdEIsTUFBTXVxRSxFQUFZUCxFQUFTcDJDLE9BQVNxdEIsRUFFcEMsSUFEQXNrQixFQUFhNWpELEVBQVU0b0QsRUFDaEJQLEVBQVNudEUsT0FBUyxHQUNyQjhrQixFQUFVcW9ELEVBQVNwMkMsTUFDbkIyeEMsRUFBVy90RSxZQUFZbXFCLEdBQ3ZCNGpELEVBQWE1akQsRUFHYjRvRCxJQUFjdHBCLEdBQ2R3b0IsRUFBYXJ6QyxhQUFhbTBDLEVBQVdkLEVBQWFsOUQsWUFDbEQwMEMsRUFBV3QvQixHQUVYcy9CLEVBQVd3b0IsRUFHWHh5RSxFQUFLc3BELFFBQVF0ekMsSUFBUXc4RCxFQUFhanlFLFlBQVl5VixFQUFNNG5CLFdBQVUsSUFFOUR3cEMsR0FDQUEsRUFBV2pvQyxhQUFhcXpDLEVBQWNwTCxFQUFXOXhELFlBQ2pEdTlELEVBQU0xekMsYUFBYWlvQyxFQUFZeUwsRUFBTXY5RCxZQUNyQzh4RCxFQUFhLE1BRWJ5TCxFQUFNMXpDLGFBQWFxekMsRUFBY0ssRUFBTXY5RCxZQUczQ3lvQixFQUFZdEwsRUFDWmc2QixFQUFTaDZCLEVBQVMzUyxLQUFLbGEsT0FDdkIwdUUsR0FBVyxFQUVYdHFCLEVBQVM3cUIsYUFBYXBCLEVBQVdpc0IsRUFBUzEwQyxjQTVKdEQsQ0F3S0d4VSxFQUFTK3hFLEdBR1J0RCxJQUFpQkMsSUFBbUJlLEVBQWExb0UsRUFDakQsTUFBTyxDQUNIbWlELFNBQVVscEQsRUFDVmk5QixVQUFXdW9DLEVBQ1g3WixPQUFROFosR0FNaEIsR0FGQWlKLEVBQWlCQSxHQUFrQkQsRUFHL0IsSUFBSyxJQUFJcHlFLEVBQUksRUFBR0EsRUFBSXkxRSxFQUFXaHRFLE9BQVF6SSxJQUFLLENBQ3hDLElBQUl1c0UsRUFBYWtKLEVBQVd6MUUsR0FFNUIsTUFBTWt2RCxFQUFZcWQsRUFBVzN6RCxXQUM3QixJQUFJMGMsRUFBVyxLQUNmLEtBQU80NUIsRUFBVSxJQUNiNTVCLEVBQVc0NUIsRUFBVSxHQUNyQndtQixFQUFNMXpDLGFBQWExTSxFQUFVaTNDLEdBRWpDMXBFLEVBQUtzcEIsV0FBV29nRCxHQUVadnNFLElBQU15MUUsRUFBV2h0RSxPQUFTLElBQzFCbTRCLEVBQVl0TCxFQUNaZzZCLEVBQVNoNkIsRUFBUzV0QixZQUFZZSxhQUduQyxHQUFJMnBFLEVBQWMsQ0FDckJpRCxFQUFlQSxFQUFhbDlELFdBQzVCLElBQUssSUFBSW5ZLEVBQUksRUFBR0EsRUFBSXkxRSxFQUFXaHRFLE9BQVF6SSxJQUNuQ21DLEtBQUtnekUsaUJBQWlCTSxFQUFXejFFLElBSXpDLEdBQUtxeUUsR0FBOEMsSUFBNUJxRCxFQUFNOThELFdBQVduUSxPQU9qQyxDQUNILElBQUsycEUsR0FBb0QsSUFBcENpRCxFQUFhM3RFLFlBQVllLE9BRTFDLE9BREE1RixFQUFLNC9CLGdCQUFnQml6QyxFQUFPLE1BQU0sR0FDM0IsQ0FDSDdvQixTQUFVLEtBQ1Zqc0IsVUFBVyxLQUNYMHVCLE9BQVEsR0FJaEJ6c0QsRUFBSzQvQixnQkFBZ0JpekMsRUFBT0wsR0FBYyxHQUV0Q3h5RSxFQUFLc3dDLG1CQUFtQnVpQyxFQUFNaHVFLGNBQzlCazVCLEVBQVk4MEMsRUFBTXY5RCxXQUNsQm0zQyxFQUFTMXVCLEVBQVVsNUIsWUFBWWUsUUFDeEI1RixFQUFLc3dDLG1CQUFtQnZTLEtBQy9CQSxFQUFZeTBDLEVBQ1ovbEIsRUFBUyxHQUliLE1BQU05RCxFQUFVLENBQUN6cEQsRUFBRyxFQUFHOEIsRUFBRyxHQUNwQm11QixFQUFPbnZCLEVBQUsrekMsWUFBWWhXLEVBQVc4MEMsRUFBT2xxQixHQUNoRDhELEdBQVU5RCxFQUFRenBELEVBR2xCLE1BQU1rMUUsRUFBYXAwRSxFQUFLZ3pDLGNBQWM2L0IsRUFBTyxDQUFDMWpELElBQU8sR0FFckRydUIsRUFBUWlJLFdBQVcwMkIsYUFBYW96QyxFQUFPL3hFLEdBRXZDaTlCLEVBQVkvOUIsRUFBSzZ6QyxnQkFBZ0Ixa0IsRUFBTTBqRCxHQUN2Q3BtQixHQUFVMm5CLEVBQVcsUUFyQ2pCdHpFLEVBQVFpVixXQUNSZ29CLEVBQVlqOUIsRUFBUWlWLFdBQVcsSUFFL0Jnb0IsRUFBWS85QixFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxnQkFDckMvcEMsRUFBUVAsWUFBWXc5QixJQW9DNUIsTUFBTyxDQUNIaXNCLFNBQVU2b0IsRUFDVjkwQyxVQUFXQSxFQUNYMHVCLE9BQStCLElBQXZCMXVCLEVBQVU5bkIsVUFBNkIsSUFBWHcyQyxFQUFlMXVCLEVBQVVob0IsV0FBV25RLE9BQVM2bUQsSUFVekZvb0IsV0FBWSxTQUFVL3JFLEVBQVN6SSxFQUFTYSxHQUVwQyxHQUFJYixFQUFTLENBQ1QsR0FBSSxRQUFRWSxLQUFLWixHQUFVLENBQ3ZCLEdBQUlhLElBQVc1QixLQUFLZy9ELHVCQUF3QixDQUN4QyxNQUFNd1csRUFBUW4xRSxFQUFRbUIsUUFBUTZmLFFBQVEvYyxjQUFjLElBQU1rRixHQUN0RGdzRSxJQUNJeDFFLEtBQUtnL0Qsd0JBQXdCaC9ELEtBQUtra0UsZUFFdENsa0UsS0FBS2cvRCx1QkFBeUJwOUQsRUFDOUI0ekUsRUFBTTEwRSxNQUFNQyxRQUFVLFFBRXRCMGpFLEVBQU1nUixzQkFDTmhSLEVBQU1pUixzQkFFVmgxRSxFQUFLeUksU0FBU3ZILEVBQVEsVUFDbkIsQ0FDV3ZCLEVBQVFtQixRQUFRNmYsUUFBUS9jLGNBQWMsSUFBTXRFLEtBQUtnL0QsdUJBQXVCbjlELGFBQWEsbUJBRS9GN0IsS0FBS2trRSxlQUVMTyxFQUFNZ1Isc0JBQ05oUixFQUFNaVIsc0JBR2QsT0FHSixHQUFJLFlBQVkvekUsS0FBS1osS0FBeUMsT0FBNUJmLEtBQUsyekQsVUFBVW5xRCxJQUFxQjVILElBQVc1QixLQUFLMitELHVCQUVsRixZQURBMytELEtBQUtpNUIsV0FBV3p2QixFQUFTeEosS0FBS21rRSxZQUFZOWtFLEtBQUtXLEtBQU00QixHQUFTQSxHQUlsRSxHQUFJNUIsS0FBS3kvRCxZQUFjLytELEVBQUtrb0QsY0FBYzVvRCxLQUFLKytELHdCQUF5Qm45RCxHQUFTLE9BQ2pGLEdBQUksVUFBVUQsS0FBS1osS0FBeUMsT0FBNUJmLEtBQUsyekQsVUFBVW5xRCxJQUFxQjVILElBQVc1QixLQUFLMCtELHFCQUVoRixZQURBMStELEtBQUtpNUIsV0FBV3p2QixFQUFTeEosS0FBSytqRSxVQUFVMWtFLEtBQUtXLEtBQU00QixHQUFTQSxHQUV6RCxHQUFJLFNBQVNELEtBQUtaLEdBRXJCLFlBREFmLEtBQUtpNUIsV0FBV3p2QixFQUFTeEosS0FBSzhCLFFBQVEwSCxHQUFTeEgsS0FBSzNDLEtBQUtXLE1BQU80QixHQUV6RCxVQUFVRCxLQUFLWixHQUN0QmYsS0FBS2k1QixXQUFXenZCLEVBQVN4SixLQUFLOEIsUUFBUTBILEdBQVNxaUMsT0FBT3hzQyxLQUFLVyxNQUFPNEIsR0FDM0QsY0FBY0QsS0FBS1osSUFDMUJmLEtBQUtpNUIsV0FBV3p2QixFQUFTeEosS0FBSzhCLFFBQVEwSCxHQUFTeEgsS0FBSzNDLEtBQUtXLEtBQU0sTUFBTzRCLFFBR3JFNEgsR0FDTHhKLEtBQUsyMUUsZUFBZS96RSxFQUFRNEgsR0FHNUIsVUFBVTdILEtBQUtaLEdBQ2ZmLEtBQUttckIsYUFDRyxVQUFVeHBCLEtBQUtaLEtBQ3ZCZixLQUFLbXJCLGFBQ0xuckIsS0FBS3NrRSxpQkFVYnFSLGVBQWdCLFNBQVUvekUsRUFBUTRILEdBQzlCLElBQUlwSixFQUFLcS9ELFlBQWUsa0VBQWtFOTlELEtBQUs2SCxHQUMvRixPQUFRQSxHQUNKLElBQUssT0FDTCxJQUFLLE1BQ0R4SixLQUFLa21FLFlBQVkxOEQsR0FDakIsTUFDSixJQUFLLFFBQ0QsTUFDSixJQUFLLFlBQ0R4SixLQUFLc2tFLGVBQ0wsTUFBTXB6QyxFQUFVN3dCLEVBQVFtQixRQUFRMHZCLFFBQ2hDLElBQUlpaUIsRUFBUXp5QyxFQUFLMnpCLGdCQUFnQm5ELEVBQVFsYixZQUFZLFNBQVV3YSxHQUFXLE9BQXFDLElBQTlCQSxFQUFRL1osV0FBV25RLFFBQXFDLElBQXJCa3FCLEVBQVE3WixZQUFtQixJQUFVdWEsRUFBUWxiLFdBQzdKbzlCLEVBQU8xeUMsRUFBSzJ6QixnQkFBZ0JuRCxFQUFRaTZCLFdBQVcsU0FBVTM2QixHQUFXLE9BQXFDLElBQTlCQSxFQUFRL1osV0FBV25RLFFBQXFDLElBQXJCa3FCLEVBQVE3WixZQUFtQixJQUFTdWEsRUFBUWk2QixVQUM5SixJQUFLaFksSUFBVUMsRUFBTSxPQUNyQixHQUFJMXlDLEVBQUt1cEQsUUFBUTlXLEdBQVEsQ0FDckIsTUFBTTFYLEVBQU96N0IsS0FBSzBsRSxpQkFBaUJ2eUIsR0FDN0JzekIsRUFBSy9sRSxFQUFLQyxjQUFjLE1BQ3hCbVQsRUFBU3BULEVBQUtDLGNBQWM0QixFQUFRZzFELFlBQzFDempELEVBQU83UyxZQUFZd2xFLEdBQ25CdHpCLEVBQVExWCxFQUFPQSxFQUFLbEgsVUFBWTRlLEVBQ2hDQSxFQUFNMXBDLFdBQVdvMkIsYUFBYS9yQixFQUFRcS9CLEdBQ3RDQSxFQUFRc3pCLEVBRVosR0FBSS9sRSxFQUFLdXBELFFBQVE3VyxHQUFPLENBQ3BCLE1BQU1xekIsRUFBSy9sRSxFQUFLQyxjQUFjLE1BQ3hCbVQsRUFBU3BULEVBQUtDLGNBQWM0QixFQUFRZzFELFlBQzFDempELEVBQU83UyxZQUFZd2xFLEdBQ25CdjFDLEVBQVFqd0IsWUFBWTZTLEdBQ3BCcy9CLEVBQU9xekIsRUFFWGhDLEVBQU1nUixvQkFBb0J6MUUsS0FBS296QixTQUFTK2YsRUFBTyxFQUFHQyxFQUFNQSxFQUFLN3RDLFlBQVllLFNBQ3pFLE1BQ0osSUFBSyxXQUNEdEcsS0FBSzQxRSxpQkFDTCxNQUNKLElBQUssYUFDRDUxRSxLQUFLNjFFLGlCQUFpQmowRSxHQUN0QixNQUNKLElBQUssU0FDTCxJQUFLLFVBQ0Q1QixLQUFLbWlCLE9BQU8zWSxHQUNaLE1BQ0osSUFBSyxPQUNEeEosS0FBSzB6QixRQUFRbFEsT0FDYixNQUNKLElBQUssT0FDRHhqQixLQUFLMHpCLFFBQVFqUSxPQUNiLE1BQ0osSUFBSyxlQUNEempCLEtBQUtnaUIsZUFDTGhpQixLQUFLNEMsUUFDTCxNQUNKLElBQUssUUFDRDVDLEtBQUsyakIsUUFDTCxNQUNKLElBQUssVUFDRDNqQixLQUFLMGpCLFVBQ0wsTUFDSixJQUFLLGFBQ0QxakIsS0FBSzgxRSxzQkFDTCxNQUNKLElBQUssTUFDRDkxRSxLQUFLKzFFLE9BQU94ekUsRUFBUTB0QixJQUFNLE1BQVEsT0FDbEMsTUFDSixJQUFLLFVBQ0Rqd0IsS0FBSysxRSxPQUFPLE9BQ1osTUFDSixJQUFLLFVBQ0QvMUUsS0FBSysxRSxPQUFPLE9BQ1osTUFDSixJQUFLLE9BQ0QsR0FBb0MsbUJBQXpCeHpFLEVBQVFtM0QsYUFDZm4zRCxFQUFRbTNELGFBQWExNUQsS0FBS2cyRSxhQUFZLEdBQVFoMkUsS0FBSzJoRSxVQUFVQyxlQUMxRCxLQUFJNWhFLEtBQUsyaEUsVUFBVUMsV0FBdUMsbUJBQW5COW5DLEVBQVV2WSxLQUdwRCxNQUFNcGUsTUFBTSx5SEFGWjIyQixFQUFVdlksT0FLZHZoQixLQUFLMmhFLFVBQVVDLFdBQVksRUFDdkJ2aEUsRUFBUW84RCxLQUFLbDdDLE1BQU1saEIsRUFBUW84RCxLQUFLbDdDLEtBQUtsTCxhQUFhLFlBQVksR0FDbEUsTUFDSixRQUNJN00sRUFBVWpILEVBQVF1MUQsZ0JBQWdCdHVELEVBQVFrRSxnQkFBa0JsRSxFQUN2RHhKLEtBQUttaEUsV0FBVzMzRCxLQUFVeEosS0FBS21oRSxXQUFXMzNELEdBQVc1SCxHQUUxRCxNQUFNcTBFLEVBQVdqMkUsS0FBSzJoRSxVQUFVVSxnQkFDMUI5eEMsRUFBTTBsRCxFQUFTdnRFLFFBQVFjLElBQVksRUFBSSxLQUFPOUksRUFBS0MsY0FBYzZJLEdBQ3ZFLElBQUk0Z0UsRUFBYTVnRSxFQUViLFNBQVM3SCxLQUFLNkgsSUFBWXlzRSxFQUFTdnRFLFFBQVEsUUFBVSxFQUNyRDBoRSxFQUFhLE1BQ04sU0FBU3pvRSxLQUFLNkgsSUFBWXlzRSxFQUFTdnRFLFFBQVEsUUFBVSxJQUM1RDBoRSxFQUFhLE9BR2pCcHFFLEtBQUtrckIsV0FBV3FGLEVBQUt2d0IsS0FBS29oRSxrQkFBa0I1M0QsSUFBWSxLQUFNLENBQUM0Z0UsSUFBYSxHQUM1RXBxRSxLQUFLNEMsVUFPakJvZixhQUFjLFdBQ1ZoaUIsS0FBS2tyQixXQUFXLEtBQU0sS0FBTSxLQUFNLE9BUXRDL0ksT0FBUSxTQUFVM1ksR0FDZCxNQUFNeW1DLEVBQVFqd0MsS0FBS2t3QyxXQUNieTlCLEVBQWEzdEUsS0FBS3N6QixvQkFBb0IsTUFDdENwVSxFQUFRLEdBQ1JDLEVBQVEsV0FBYTNWLEVBQ3JCMHNFLEVBQVkzekUsRUFBUTB0QixJQUFNLGNBQWdCLGFBQ2hELElBQUltRSxFQUFLNmIsRUFBTVksZUFDWHZjLEVBQUsyYixFQUFNYyxhQUNYRCxFQUFLYixFQUFNZ0IsWUFDWEUsRUFBS2xCLEVBQU1pQixVQUVmLElBQUssSUFBb0NuZ0MsRUFBR29sRSxFQUFuQ3Q0RSxFQUFJLEVBQUc0SixFQUFNa21FLEVBQVdybkUsT0FBbUJ6SSxFQUFJNEosRUFBSzVKLElBQ3pEa1QsRUFBSTQ4RCxFQUFXOXZFLEdBQ1Y2QyxFQUFLMC9CLFdBQVdydkIsSUFBTy9RLEtBQUs4QixRQUFRNkIsTUFTakN3YixHQUFTcE8sRUFBRWtwQix5QkFDWC9hLEVBQU12VyxLQUFLb0ksSUFUZm9sRSxFQUFTLE1BQU14MEUsS0FBS29QLEVBQUVqUSxNQUFNbzFFLElBQWN4MUUsRUFBS3NnQyxVQUFVandCLEVBQUVqUSxNQUFNbzFFLEdBQVksR0FBSyxFQUM5RS8yRCxFQUNBZzNELEdBQVUsR0FFVkEsR0FBVSxHQUVkejFFLEVBQUtndEMsU0FBUzM4QixFQUFHbWxFLEVBQVlDLEdBQVUsRUFBSSxHQUFLQSxFQUFTLE9BUzdEajNELEVBQU01WSxPQUFTLEdBQ2Z0RyxLQUFLOEIsUUFBUTZCLEtBQUttd0MsZUFBZTkxQyxLQUFLZ0MsS0FBTW1mLEVBQU9ELEdBR3ZEbGYsS0FBSzJ0QyxXQUFhLEtBQ2xCM3RDLEtBQUtvekIsU0FBU2dCLEVBQUkwYyxFQUFJeGMsRUFBSTZjLEdBRzFCbnhDLEtBQUswekIsUUFBUS9xQixNQUFLLElBTXRCbXRFLG9CQUFxQixXQUNqQixNQUFNNWtELEVBQVU3d0IsRUFBUW1CLFFBQVEwdkIsUUFDaEN4d0IsRUFBSyt2QixZQUFZUyxFQUFTLGlCQUN0Qnh3QixFQUFLNEUsU0FBUzRyQixFQUFTLGlCQUN2Qnh3QixFQUFLeUksU0FBU25KLEtBQUt5aEUsaUJBQWlCbitDLFdBQVksVUFFaEQ1aUIsRUFBS3dJLFlBQVlsSixLQUFLeWhFLGlCQUFpQm4rQyxXQUFZLFVBRXZEdGpCLEtBQUtvMkUseUJBTVRSLGVBQWdCLFdBQ1osTUFBTS9ULEVBQWE3aEUsS0FBSzJoRSxVQUFVRSxXQUNsQzdoRSxLQUFLOHpCLGlCQUNMcHpCLEVBQUswckQsb0JBQW9CeVYsRUFBWTdoRSxLQUFLOCtELHlCQUV0QytDLEdBQ0tuaEUsRUFBS2duRCxjQUFjcm5ELEVBQVFtQixRQUFRZ3FELGVBQWV4ckQsS0FBS3EyRSx1QkFDNURoMkUsRUFBUW1CLFFBQVFncUQsYUFBYUcsVUFBWSxFQUN6Q3RyRCxFQUFRbUIsUUFBUTRmLEtBQUt0Z0IsTUFBTUMsUUFBVSxPQUNyQ1YsRUFBUW1CLFFBQVFncUQsYUFBYTFxRCxNQUFNQyxRQUFVLFFBRTdDZixLQUFLMmhFLFVBQVVpQixtQkFBcUI1aUUsS0FBSzJoRSxVQUFVaUIsbUJBQW1CNTBELFFBQVEsMENBQTJDLGlCQUN6SGhPLEtBQUsyaEUsVUFBVWdCLHNCQUF3QjNpRSxLQUFLMmhFLFVBQVVnQixzQkFBc0IzMEQsUUFBUSwwQ0FBMkMsa0JBRXhHLFNBQW5CekwsRUFBUWdhLFFBQXNCaGEsRUFBUWl6RCxtQkFBa0JuMUQsRUFBUW1CLFFBQVE0ZixLQUFLdGdCLE1BQU15YixPQUFTLE9BRWhHdmMsS0FBSzJoRSxVQUFVRSxZQUFhLEVBRXZCN2hFLEtBQUsyaEUsVUFBVUcsZUFDaEI5aEUsS0FBS3FnRSxpQkFBa0IsRUFDbkIsMEJBQTBCMStELEtBQUtZLEVBQVF2RCxRQUN2Q3FCLEVBQVFtQixRQUFRaXpELE9BQU8zekQsTUFBTUMsUUFBVSxHQUN2Q2YsS0FBS2dnRSxXQUFZLEVBQ2pCaGdFLEtBQUtpZ0UsWUFBYSxFQUNsQndFLEVBQU02UixpQkFJZHQyRSxLQUFLb21FLGNBQ0wxbEUsRUFBS3dJLFlBQVlsSixLQUFLeWhFLGlCQUFpQmwrQyxTQUFVLFVBRzVDN2lCLEVBQUtnbkQsY0FBY3JuRCxFQUFRbUIsUUFBUWdxRCxnQkFDcEN4ckQsS0FBSzB6QixRQUFRL3FCLE1BQUssR0FDbEIzSSxLQUFLMHpCLFFBQVE2aUQseUJBR2pCdjJFLEtBQUt3MkUsMkJBQ0x4MkUsS0FBSzJoRSxVQUFVaUIsbUJBQXFCNWlFLEtBQUsyaEUsVUFBVWlCLG1CQUFtQjUwRCxRQUFRLDBDQUEyQyxrQkFDekhoTyxLQUFLMmhFLFVBQVVnQixzQkFBd0IzaUUsS0FBSzJoRSxVQUFVZ0Isc0JBQXNCMzBELFFBQVEsMENBQTJDLGlCQUUzSGhPLEtBQUsyaEUsVUFBVUcsYUFBY3poRSxFQUFRbUIsUUFBUTRmLEtBQUt0Z0IsTUFBTXliLE9BQVMsT0FDekMsU0FBbkJoYSxFQUFRZ2EsUUFBc0JoYSxFQUFRaXpELG1CQUFrQm4xRCxFQUFRbUIsUUFBUTRmLEtBQUt0Z0IsTUFBTXliLE9BQVNsYyxFQUFRbUIsUUFBUTRmLEtBQUtxMUQsYUFBZSxFQUFLcDJFLEVBQVFtQixRQUFRNGYsS0FBS3ExRCxhQUFlLEtBQVEsUUFFdExsMEUsRUFBUWl6RCxrQkFBa0JqekQsRUFBUWl6RCxpQkFBaUJraEIsVUFFdkQxMkUsS0FBSzJoRSxVQUFVRSxZQUFhLEVBRXZCN2hFLEtBQUsyaEUsVUFBVUcsZUFDaEI5aEUsS0FBS3FnRSxpQkFBa0IsRUFDbkJyZ0UsS0FBS2lnRSxhQUNMNS9ELEVBQVFtQixRQUFRaXpELE9BQU8zekQsTUFBTUMsUUFBVSxPQUN2Q1YsRUFBUW1CLFFBQVE2ZixRQUFRdmdCLE1BQU00UCxLQUFPLEdBQ3JDMVEsS0FBS2dnRSxXQUFZLEVBQ2pCaGdFLEtBQUtpZ0UsWUFBYSxFQUNsQndFLEVBQU1pUix1QkFJZDExRSxLQUFLMmhFLFVBQVVXLE9BQVMsS0FDeEJqaUUsRUFBUW1CLFFBQVE0ZixLQUFLeGUsUUFDckJsQyxFQUFLeUksU0FBU25KLEtBQUt5aEUsaUJBQWlCbCtDLFNBQVUsV0FHbER2akIsS0FBSzIyRSxvQkFDRDMyRSxLQUFLeS9ELFlBQVkvK0QsRUFBSzByRCxvQkFBbUIsRUFBTXBzRCxLQUFLKytELHlCQUdoQixtQkFBN0JqbEMsRUFBVTg3QyxnQkFBK0I5N0MsRUFBVTg3QyxlQUFlNTFFLEtBQUsyaEUsVUFBVUUsV0FBWTdoRSxPQU81R3EyRSxxQkFBc0IsV0FDbEIsTUFBTU8sRUFBWTUyRSxLQUFLNjJFLGVBRXZCLEdBQUl0MEUsRUFBUXcyRCxTQUFVLENBQ2xCLE1BQU0rZCxFQUFnQjkyRSxLQUFLeTlELFFBQVExM0IsZ0JBQWdCNndDLEVBQVcsYUFFOUQsSUFBSzUyRSxLQUFLdUMsUUFBUXcxRCxtQkFBb0IsQ0FDbEMsTUFBTWdmLEVBQWVELEVBQWNsbUIsS0FBS2h4QyxTQUN4QyxJQUFLLElBQUkvaEIsRUFBSSxFQUFHNEosRUFBTXN2RSxFQUFhendFLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzVDLFlBQVk4RCxLQUFLbzFFLEVBQWFsNUUsR0FBR2lMLFdBQ2pDZ3VFLEVBQWNsbUIsS0FBSy81QyxZQUFZa2dFLEVBQWFsNUUsSUFDNUNBLElBQUs0SixLQUtqQixJQUFJdVgsRUFBVTgzRCxFQUFjbG1CLEtBQUt4c0QsVUFDNUIweUUsRUFBY2xtQixLQUFLdHNELGNBQWMsNEJBQXNELFNBQXhCdEUsS0FBS3VDLFFBQVFnYSxRQUFzQnU2RCxFQUFjbG1CLEtBQUt0c0QsY0FBYyxZQUNwSTBhLEdBQVd0ZSxFQUFLbXdELGtCQUFrQjd3RCxLQUFLdUMsVUFHM0N2QyxLQUFLOCtDLElBQUk4UixLQUFLeHNELFVBQVk0YSxFQUMxQmhmLEtBQUs4K0MsSUFBSXA3QyxLQUFLVSxVQUFZcEUsS0FBS2czRSx5QkFBeUJGLEVBQWNwekUsS0FBS1UsV0FFM0UsTUFBTTgvQixFQUFRNHlDLEVBQWNwekUsS0FBS3VqRCxXQUNqQyxJQUFLLElBQUlwcEQsRUFBSSxFQUFHNEosRUFBTXk4QixFQUFNNTlCLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ25CLG9CQUFsQnFtQyxFQUFNcm1DLEdBQUdPLE1BQ2I0QixLQUFLOCtDLElBQUlwN0MsS0FBSzJTLGFBQWE2dEIsRUFBTXJtQyxHQUFHTyxLQUFNOGxDLEVBQU1ybUMsR0FBR2lCLE9BRXZELElBQUs0QixFQUFLNEUsU0FBU3RGLEtBQUs4K0MsSUFBSXA3QyxLQUFNLHVCQUF3QixDQUN0RCxNQUFNdXpFLEVBQWtCMTBFLEVBQVF1dUQsZUFBZXpvRCxNQUFNLEtBQ3JELElBQUssSUFBSXhLLEVBQUksRUFBR0EsRUFBSW81RSxFQUFnQjN3RSxPQUFRekksSUFDeEM2QyxFQUFLeUksU0FBU25KLEtBQUs4K0MsSUFBSXA3QyxLQUFNbkIsRUFBUXV1RCxlQUFlanpELFVBSTVEd0MsRUFBUW1CLFFBQVEwdkIsUUFBUTlzQixVQUFZd3lFLEVBQVV0d0UsT0FBUyxFQUFJdEcsS0FBS2czRSx5QkFBeUJKLEdBQWEsSUFBTXIwRSxFQUFRZzFELFdBQWEsVUFBWWgxRCxFQUFRZzFELFdBQWEsS0FRMUtpZix5QkFBMEIsV0FDdEIsTUFBTVUsRUFBZWwzRSxLQUFLbTNFLHVCQUF1QjkyRSxFQUFRbUIsUUFBUTB2QixTQUFTLEdBQzFFLElBQUlrbUQsRUFBWSxHQUVoQixHQUFJNzBFLEVBQVF3MkQsU0FBVSxDQUNsQixNQUFNNzBCLEVBQVF4akMsRUFBS3FtRCxzQkFBc0IvbUQsS0FBSzgrQyxJQUFJcDdDLEtBQU0sTUFDeEQwekUsRUFBWSw0QkFBOEJwM0UsS0FBSzgrQyxJQUFJOFIsS0FBS3g2QyxVQUFVcEksUUFBUSxXQUFZLE9BQVMsU0FBV2syQixFQUFRLE1BQVFnekMsRUFBZSx3QkFFeklFLEVBQVlGLEVBR2hCNzJFLEVBQVFtQixRQUFRNGYsS0FBS3RnQixNQUFNQyxRQUFVLFFBQ3JDVixFQUFRbUIsUUFBUWdxRCxhQUFhMXFELE1BQU1DLFFBQVUsT0FFN0NmLEtBQUtxM0UsYUFBYUQsSUFPdEJ2QixpQkFBa0IsU0FBVXIwRSxHQUN4QixNQUFNeTBELEVBQVU1MUQsRUFBUW1CLFFBQVF5MEQsUUFDMUI1MEMsRUFBVWhoQixFQUFRbUIsUUFBUTZmLFFBQzFCeTBDLEVBQWF6MUQsRUFBUW1CLFFBQVFzMEQsV0FDN0J0SyxFQUFlbnJELEVBQVFtQixRQUFRZ3FELGFBQy9CcHFDLEVBQU8vZ0IsRUFBUW1CLFFBQVE0ZixLQUN2QmsyRCxFQUFPdDNFLEtBQUsyaEUsVUFDbEIzaEUsS0FBSzh6QixpQkFFTCxNQUFNeWpELEVBQThDLFNBQTFCbDJELEVBQVF2Z0IsTUFBTUMsU0FBdUJmLEtBQUtnZ0UsWUFBY2hnRSxLQUFLbWdFLG1CQUFtQkMsT0FFckdrWCxFQUFLeFYsY0FzRE53VixFQUFLeFYsY0FBZSxFQUVwQnRXLEVBQWExcUQsTUFBTXNuQyxRQUFVa3ZDLEVBQUszVSxzQkFDbEN2aEQsRUFBS3RnQixNQUFNc25DLFFBQVVrdkMsRUFBSzFVLG1CQUMxQnZoRCxFQUFRdmdCLE1BQU1zbkMsUUFBVSxHQUN4QjB0QixFQUFXaDFELE1BQU1zbkMsUUFBVWt2QyxFQUFLNVUseUJBQ2hDek0sRUFBUW4xRCxNQUFNc25DLFFBQVVrdkMsRUFBSzlVLGVBQzdCcGdFLEVBQUdzQixLQUFLNUMsTUFBTTQxRCxTQUFXNGdCLEVBQUs3VSxjQUVQLFNBQW5CbGdFLEVBQVFnYSxRQUFzQmhhLEVBQVFpekQsa0JBQWtCaVAsRUFBTStTLHNCQUU1RGoxRSxFQUFRNHdELGtCQUFrQjV3RCxFQUFRNHdELGlCQUFpQmx5RCxZQUFZb2dCLEdBRWpFOWUsRUFBUW8yRCxlQUFpQixHQUN6Qmo0RCxFQUFLd0ksWUFBWW1ZLEVBQVMscUJBRzFCaTJELEVBQUt6VSxpQkFBaUJDLFNBQVd2Z0UsRUFBUTR3RCxtQkFDekNta0IsRUFBS3pVLGlCQUFpQkMsUUFBUyxFQUMvQnppRSxFQUFRbUIsUUFBUWd6RCxhQUFhMXpELE1BQU1DLFFBQVUsUUFDN0NMLEVBQUt5SSxTQUFTa1ksRUFBUyxzQkFHM0JyaEIsS0FBS2dnRSxVQUFZc1gsRUFBS3pVLGlCQUFpQkcsT0FDdkNoakUsS0FBS2lnRSxXQUFhcVgsRUFBS3pVLGlCQUFpQkUsUUFDcEMvaUUsS0FBS2dnRSxXQUFXeUUsRUFBTWlSLHFCQUNwQm56RSxFQUFRNHdELGtCQUFrQnp5RCxFQUFLd0ksWUFBWW1ZLEVBQVMsc0JBRTFEb2pELEVBQU1nVCxrQkFDRmoyRSxHQUFTZCxFQUFLc3NDLGNBQWN4ckMsRUFBUXVyQyxrQkFBbUJqb0MsRUFBTXd4QyxXQUVqRWoyQyxFQUFRbUIsUUFBUXkwRCxRQUFRbjFELE1BQU1naEMsVUFBWSxHQUMxQ3BoQyxFQUFLd0ksWUFBWWxKLEtBQUt5aEUsaUJBQWlCcCtDLFdBQVksWUFyRm5EaTBELEVBQUt4VixjQUFlLEVBRXBCd1YsRUFBS3pVLGlCQUFpQkcsT0FBU2hqRSxLQUFLZ2dFLFVBQ3BDc1gsRUFBS3pVLGlCQUFpQkUsUUFBVS9pRSxLQUFLaWdFLFlBRWpDamdFLEtBQUtnZ0UsV0FBYWhnRSxLQUFLaWdFLGNBQ3ZCamdFLEtBQUtnZ0UsV0FBWSxFQUNqQmhnRSxLQUFLaWdFLFlBQWEsR0FHaEIxOUQsRUFBUTR3RCxrQkFBa0I5eUQsRUFBUW1CLFFBQVFDLFNBQVNvK0IsYUFBYXhlLEVBQVN5MEMsR0FFL0VHLEVBQVFuMUQsTUFBTTJCLFNBQVcsUUFDekJ3ekQsRUFBUW4xRCxNQUFNc3ZCLElBQU0sSUFDcEI2bEMsRUFBUW4xRCxNQUFNNFAsS0FBTyxJQUNyQnVsRCxFQUFRbjFELE1BQU13YixNQUFRLE9BQ3RCMjVDLEVBQVFuMUQsTUFBTWloQyxTQUFXLE9BQ3pCazBCLEVBQVFuMUQsTUFBTXliLE9BQVMsT0FDdkIwNUMsRUFBUW4xRCxNQUFNNDJFLE9BQVMsYUFFdUMsS0FBMURyM0UsRUFBUW1CLFFBQVFnekQsYUFBYTF6RCxNQUFNQyxVQUNuQ3UyRSxFQUFLelUsaUJBQWlCQyxRQUFTLEVBQy9CemlFLEVBQVFtQixRQUFRZ3pELGFBQWExekQsTUFBTUMsUUFBVSxPQUM3Q0wsRUFBS3dJLFlBQVltWSxFQUFTLHNCQUc5QmkyRCxFQUFLN1UsY0FBZ0JyZ0UsRUFBR3NCLEtBQUs1QyxNQUFNNDFELFNBQ25DdDBELEVBQUdzQixLQUFLNUMsTUFBTTQxRCxTQUFXLFNBRXpCNGdCLEVBQUs1VSx5QkFBMkI1TSxFQUFXaDFELE1BQU1zbkMsUUFDakRrdkMsRUFBSzNVLHNCQUF3Qm5YLEVBQWExcUQsTUFBTXNuQyxRQUNoRGt2QyxFQUFLMVUsbUJBQXFCeGhELEVBQUt0Z0IsTUFBTXNuQyxRQUVyQzB0QixFQUFXaDFELE1BQU1zbkMsUUFBVS9tQixFQUFRdmdCLE1BQU1zbkMsUUFBVSxHQUNuRG9qQixFQUFhMXFELE1BQU1zbkMsU0FBV29qQixFQUFhMXFELE1BQU1zbkMsUUFBUTkyQixNQUFNLHNDQUF3QyxDQUFDLEtBQUssR0FBSy9PLEVBQVErekQsY0FBYzdGLE9BQ3hJcnZDLEVBQUt0Z0IsTUFBTXNuQyxTQUFXaG5CLEVBQUt0Z0IsTUFBTXNuQyxRQUFROTJCLE1BQU0sc0NBQXdDLENBQUMsS0FBSyxHQUM3RitQLEVBQVF2Z0IsTUFBTXdiLE1BQVFrdkMsRUFBYTFxRCxNQUFNeWIsT0FBUzZFLEVBQUt0Z0IsTUFBTXliLE9BQVMsT0FDdEU4RSxFQUFRdmdCLE1BQU0yQixTQUFXLFdBQ3pCNGUsRUFBUXZnQixNQUFNQyxRQUFVLFFBRXhCdTJFLEVBQUt2Vix1QkFBMEIzN0QsRUFBR2dCLFlBQWNpYSxFQUFRaGEsYUFDeER5dUQsRUFBV2gxRCxNQUFNeWIsT0FBVSs2RCxFQUFLdlYsdUJBQXlCeC9ELEVBQVF1MkQsaUJBQW9CLEtBRWpGdDNELEdBQVNkLEVBQUtzc0MsY0FBY3hyQyxFQUFRdXJDLGtCQUFtQmpvQyxFQUFNeXhDLFdBRTdEaDBDLEVBQVFva0QsUUFBNkIsU0FBbkJwa0QsRUFBUWdhLFNBQzFCdTVDLEVBQVdoMUQsTUFBTTQxRCxTQUFXLE9BQzVCMTJELEtBQUsyM0UscUJBR1R0M0UsRUFBUW1CLFFBQVF5MEQsUUFBUW4xRCxNQUFNZ2hDLFVBQVl2L0IsRUFBUXUyRCxpQkFBbUIsS0FDckVwNEQsRUFBS3lJLFNBQVNuSixLQUFLeWhFLGlCQUFpQnArQyxXQUFZLFdBcUNoRGswRCxHQUFrQno5QyxFQUFVelksUUFBUXUyRCxPQUdFLG1CQUEvQjk5QyxFQUFVKzdDLGtCQUFpQy83QyxFQUFVKzdDLGlCQUFpQjcxRSxLQUFLMmhFLFVBQVVHLGFBQWM5aEUsT0FNbEgyakIsTUFBTyxXQUNILE1BQU1nakMsRUFBU2ptRCxFQUFLQyxjQUFjLFVBQ2xDZ21ELEVBQU83bEQsTUFBTUMsUUFBVSxPQUN2QnFCLEVBQUdzQixLQUFLekMsWUFBWTBsRCxHQUVwQixNQUFNa3hCLEVBQWV0MUUsRUFBUTAyRCxjQUFnQjEyRCxFQUFRMDJELGNBQWNqckQsUUFBUSwwQkFBMkJoTyxLQUFLZzJFLGFBQVksSUFBU2gyRSxLQUFLZzJFLGFBQVksR0FDM0k4QixFQUFnQnAzRSxFQUFLZ21ELGtCQUFrQkMsR0FDdkNveEIsRUFBTy8zRSxLQUFLOCtDLElBRWxCLEdBQUl2OEMsRUFBUW9rRCxPQUFRLENBQ2hCLE1BQU1xeEIsRUFBZ0MsT0FBeEJ6MUUsRUFBUW0yRCxZQUF1QixVQUFZbjJELEVBQVFtMkQsWUFBYyxJQUFNbjJELEVBQVF3MkQsU0FBV3I0RCxFQUFLcW1ELHNCQUFzQmd4QixFQUFLcjBFLEtBQU0sQ0FBQyxvQkFBc0IsVUFBWW5CLEVBQVF1dUQsZUFBaUIsSUFFMU1nbkIsRUFBY0csTUFBTSw4QkFHaEJGLEVBQUtubkIsS0FBS3hzRCxVQUhNLGdCQUtMNHpFLEVBQVEsSUFBTUgsRUFMVCxzQkFRakIsQ0FDSCxNQUFNSyxFQUFROTFFLEVBQUd3dUQsS0FBSzd2QyxxQkFBcUIsUUFDckM5QixFQUFTN2MsRUFBR3d1RCxLQUFLN3ZDLHFCQUFxQixTQUM1QyxJQUFJbzNELEVBQVcsR0FDZixJQUFLLElBQUl0NkUsRUFBSSxFQUFHNEosRUFBTXl3RSxFQUFNNXhFLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3pDczZFLEdBQVlELEVBQU1yNkUsR0FBR3VZLFVBRXpCLElBQUssSUFBSXZZLEVBQUksRUFBRzRKLEVBQU13WCxFQUFPM1ksT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDMUNzNkUsR0FBWWw1RCxFQUFPcGhCLEdBQUd1WSxVQUcxQjBoRSxFQUFjRyxNQUFNLDhCQUdoQkUsRUFIZ0Isd0JBSzJCLE9BQXhCNTFFLEVBQVFtMkQsWUFBdUJuMkQsRUFBUW0yRCxZQUFjbjJELEVBQVF1dUQsZ0JBQWtCLEtBQU8rbUIsRUFMekYsa0JBVXhCNzNFLEtBQUtrekIsY0FDTDlzQixFQUFHNjZCLFlBQVcsV0FDVixJQUdJLEdBRkEwbEIsRUFBTy9qRCxRQUVIbEMsRUFBS3NqRCxXQUFhdGpELEVBQUt3akQsWUFBZ0I5aEQsRUFBR2cyRSxjQUFrQmh5RSxFQUFHaXlFLFdBQy9ELElBQ0kxeEIsRUFBT0UsY0FBYzVqRCxTQUFTaWpFLFlBQVksU0FBUyxFQUFPLE1BQzVELE1BQU94a0UsR0FDTGlsRCxFQUFPRSxjQUFjbGpDLGFBSXpCZ2pDLEVBQU9FLGNBQWNsakMsUUFFM0IsTUFBT3ZXLEdBQ0wsTUFBTWpLLE1BQU0sc0NBQXdDaUssR0FDdEQsUUFDRWhOLEVBQUtxekIsZUFDTC95QixFQUFLc3BCLFdBQVcyOEIsTUFFckIsTUFNUGpqQyxRQUFTLFdBQ0x0akIsRUFBSytxQixhQUNML3FCLEVBQUtra0UsZUFDTGxrRSxFQUFLMHpCLGlCQUVMLE1BQU0rakQsRUFBZXQxRSxFQUFReTJELGdCQUFrQnoyRCxFQUFReTJELGdCQUFnQmhyRCxRQUFRLDBCQUEyQmhPLEtBQUtnMkUsYUFBWSxJQUFTaDJFLEtBQUtnMkUsYUFBWSxHQUMvSXNDLEVBQWVseUUsRUFBR3BFLEtBQUssR0FBSSxVQUNqQ3MyRSxFQUFhQyxTQUFXLFlBQ3hCLE1BQU1SLEVBQU8vM0UsS0FBSzgrQyxJQUVsQixHQUFJdjhDLEVBQVFva0QsT0FBUSxDQUNoQixNQUFNcXhCLEVBQWdDLE9BQXhCejFFLEVBQVFtMkQsWUFBdUIsVUFBWW4yRCxFQUFRbTJELFlBQWMsSUFBTW4yRCxFQUFRdzJELFNBQVdyNEQsRUFBS3FtRCxzQkFBc0JneEIsRUFBS3IwRSxLQUFNLENBQUMsb0JBQXNCLFVBQVluQixFQUFRdXVELGVBQWlCLElBRTFNd25CLEVBQWFyMUUsU0FBU2cxRSxNQUFNLDhCQUd4QkYsRUFBS25uQixLQUFLeHNELFVBSGMsOElBTWI0ekUsRUFBUSxJQUFNSCxFQU5ELHNCQVN6QixDQUNILE1BQU1LLEVBQVE5MUUsRUFBR3d1RCxLQUFLN3ZDLHFCQUFxQixRQUNyQzlCLEVBQVM3YyxFQUFHd3VELEtBQUs3dkMscUJBQXFCLFNBQzVDLElBQUlvM0QsRUFBVyxHQUNmLElBQUssSUFBSXQ2RSxFQUFJLEVBQUc0SixFQUFNeXdFLEVBQU01eEUsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDekNzNkUsR0FBWUQsRUFBTXI2RSxHQUFHdVksVUFFekIsSUFBSyxJQUFJdlksRUFBSSxFQUFHNEosRUFBTXdYLEVBQU8zWSxPQUFRekksRUFBSTRKLEVBQUs1SixJQUMxQ3M2RSxHQUFZbDVELEVBQU9waEIsR0FBR3VZLFVBRzFCa2lFLEVBQWFyMUUsU0FBU2cxRSxNQUFNLGtKQUtacnpFLEVBQUt5YyxRQUFRcUMsUUFBVSxXQUNuQ3kwRCxFQU53Qix3QkFRbUIsT0FBeEI1MUUsRUFBUW0yRCxZQUF1Qm4yRCxFQUFRbTJELFlBQWNuMkQsRUFBUXV1RCxnQkFBa0IsMkZBQTZGK21CLEVBUnZLLG9CQWtCcEM5QixPQUFRLFNBQVU1b0MsR0FDZCxNQUFNbGQsRUFBYyxRQUFSa2QsRUFDTnFyQyxFQUFZeDRFLEtBQUswOUQsV0FBYXp0QyxFQUNwQ2p3QixLQUFLMDlELFNBQVduN0QsRUFBUTB0QixJQUFNQSxFQUUxQnVvRCxJQUVJeDRFLEtBQUs4QixRQUFRdWdCLE9BQ2JyaUIsS0FBSzhCLFFBQVF1Z0IsTUFBTTZxQixZQUFZbHZDLEtBQUtnQyxNQUdwQ0ssRUFBUW84RCxLQUFLdDZDLFFBQVF6aEIsRUFBS3NzQyxjQUFjM3NDLEVBQVFvOEQsS0FBS3Q2QyxPQUFPNHFCLGtCQUFtQmpvQyxFQUFNcWQsUUFDckY5aEIsRUFBUW84RCxLQUFLcjZDLFNBQVMxaEIsRUFBS3NzQyxjQUFjM3NDLEVBQVFvOEQsS0FBS3I2QyxRQUFRMnFCLGtCQUFtQmpvQyxFQUFNc2QsVUFHL0YsTUFBTTR4QixFQUFLM3pDLEVBQVFtQixRQUNmeXVCLEdBQ0F2dkIsRUFBS3lJLFNBQVM2cUMsRUFBR2lpQixRQUFTLFVBQzFCdjFELEVBQUt5SSxTQUFTNnFDLEVBQUd3WCxhQUFjLFlBRS9COXFELEVBQUt3SSxZQUFZOHFDLEVBQUdpaUIsUUFBUyxVQUM3QnYxRCxFQUFLd0ksWUFBWThxQyxFQUFHd1gsYUFBYyxXQUd0QyxNQUFNeWQsRUFBWXZvRSxFQUFLdXdCLGdCQUFnQitpQixFQUFHOWlCLFNBQVMsU0FBVVYsR0FDekQsT0FBTzl2QixFQUFLNi9CLGdCQUFnQi9QLEtBQWFBLEVBQVExdkIsTUFBTTIzRSxhQUFlam9ELEVBQVExdkIsTUFBTTQzRSxZQUFjbG9ELEVBQVExdkIsTUFBTWk5QixjQUdwSCxJQUFLLElBQW1DeitCLEVBQUd4QixFQUFHYSxFQUFyQ2QsRUFBSSxFQUFHNEosRUFBTXdoRSxFQUFVM2lFLE9BQWlCekksRUFBSTRKLEVBQUs1SixJQUN0RHlCLEVBQUkycEUsRUFBVXByRSxHQUVkYyxFQUFJVyxFQUFFd0IsTUFBTTIzRSxZQUNaMzZFLEVBQUl3QixFQUFFd0IsTUFBTTQzRSxZQUNSLzVFLEdBQUtiLEtBQ0x3QixFQUFFd0IsTUFBTTIzRSxZQUFjMzZFLEVBQ3RCd0IsRUFBRXdCLE1BQU00M0UsV0FBYS81RSxHQUd6QkEsRUFBSVcsRUFBRXdCLE1BQU1pOUIsVUFDRixTQUFOcC9CLEVBQWNXLEVBQUV3QixNQUFNaTlCLFVBQVksUUFDdkIsVUFBTnAvQixJQUFlVyxFQUFFd0IsTUFBTWk5QixVQUFZLFFBR2hELE1BQU0wK0IsRUFBT3A4RCxFQUFRbzhELEtBQ2pCQSxFQUFLdHZCLE1BQ0x6c0MsRUFBSzB0QyxVQUFVcXVCLEVBQUt0dkIsSUFBSTdvQyxjQUFjLG9CQUFxQk0sRUFBS3ljLFFBQVE5ZSxFQUFRMHRCLElBQU0sVUFBWSxZQUNsR3Z2QixFQUFLc3NDLGNBQWN5dkIsRUFBS3R2QixJQUFJSixrQkFBbUJqb0MsRUFBTXZDLEVBQVEwdEIsSUFBTSxVQUFZLGFBRy9Fd3NDLEVBQUtuNEMsVUFDRDJMLEVBQUt2dkIsRUFBS3dJLFlBQVl1ekQsRUFBS240QyxRQUFTLFVBQ25DNWpCLEVBQUt5SSxTQUFTc3pELEVBQUtuNEMsUUFBUyxXQUdqQ200QyxFQUFLbDRDLFVBQ0QwTCxFQUFLdnZCLEVBQUt5SSxTQUFTc3pELEVBQUtsNEMsUUFBUyxVQUNoQzdqQixFQUFLd0ksWUFBWXV6RCxFQUFLbDRDLFFBQVMsWUFRNUNvSCxZQUFhLFNBQVUzUSxHQUNuQmhiLEtBQUt3bkUsY0FFTCxNQUFNbVIsRUFBZ0IzOUQsUUFBdUMsR0FBS2hiLEtBQUtnM0UseUJBQXlCaDhELEVBQU0sS0FBTSxNQUM1RyxHQUFLaGIsS0FBSzJoRSxVQUFVRSxXQUtiLENBQ0gsTUFBTS9pRSxFQUFRa0IsS0FBS20zRSx1QkFBdUJ3QixHQUFjLEdBQ3hEMzRFLEtBQUtxM0UsYUFBYXY0RSxRQU5sQnVCLEVBQVFtQixRQUFRMHZCLFFBQVE5c0IsVUFBWXUwRSxFQUNwQzM0RSxLQUFLNDRFLG1CQUVMNTRFLEtBQUswekIsUUFBUS9xQixNQUFLLElBVzFCa3dFLGtCQUFtQixTQUFVQyxHQUN6QixJQUFLdjJFLEVBQVFva0QsT0FBUSxPQUFPLEVBQ3hCbXlCLEVBQUlsb0IsT0FBTTV3RCxLQUFLOCtDLElBQUk4UixLQUFLeHNELFVBQVlwRSxLQUFLdUMsUUFBUXcxRCxtQkFBcUIrZ0IsRUFBSWxvQixLQUFPa29CLEVBQUlsb0IsS0FBSzVpRCxRQUFRaE8sS0FBSys0RSxrQkFBbUIsS0FDMUhELEVBQUlwMUUsT0FBTTFELEtBQUs4K0MsSUFBSXA3QyxLQUFLVSxVQUFZcEUsS0FBS2czRSx5QkFBeUI4QixFQUFJcDFFLE9BQzFFMUQsS0FBSzQ0RSxvQkFRVDVDLFlBQWEsU0FBVWdELEdBQ25CLE1BQU1oMEIsRUFBV2hsRCxLQUFLaTVFLFVBQVU1NEUsRUFBUW1CLFFBQVEwdkIsUUFBUTlzQixVQUFXLEtBQU0sTUFDbkU4MEUsRUFBYXg0RSxFQUFLQyxjQUFjLE9BQ3RDdTRFLEVBQVc5MEUsVUFBWTRnRCxFQUV2QixNQUFNbTBCLEVBQWN6NEUsRUFBS3V3QixnQkFBZ0Jpb0QsR0FBWSxTQUFVMW9ELEdBQzNELE9BQU9BLEVBQVF2USxhQUFhLHNCQUdoQyxJQUFLLElBQUlwaUIsRUFBSSxFQUFHNEosRUFBTTB4RSxFQUFZN3lFLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQy9DczdFLEVBQVl0N0UsR0FBR3EwQixnQkFBZ0IsbUJBR25DLEdBQUkzdkIsRUFBUXcyRCxXQUFhaWdCLEVBQWMsQ0FDbkMsTUFBTTkwQyxFQUFReGpDLEVBQUtxbUQsc0JBQXNCL21ELEtBQUs4K0MsSUFBSXA3QyxLQUFNLENBQUMsb0JBQ3pELE1BQU8sd0JBQTBCMUQsS0FBSzgrQyxJQUFJOFIsS0FBS3g2QyxVQUFZLFNBQVc4dEIsRUFBUSxJQUFNZzFDLEVBQVc5MEUsVUFBWSxpQkFFM0csT0FBTzgwRSxFQUFXOTBFLFdBVTFCZzFFLGdCQUFpQixTQUFVSixHQUN2QixNQUFPLG1DQUFxQ3oyRSxFQUFRMHRCLElBQU0sVUFBWSxJQUFNLEtBQU9qd0IsS0FBS2cyRSxZQUFZZ0QsR0FBZ0IsVUFVeEhLLFVBQVcsU0FBVTdpRSxFQUFNOGlFLEdBQ3ZCLE1BQU0vaEIsRUFBYWgxRCxFQUFRZzFELFdBRTNCLEdBQXNCLElBQWxCL2dELEVBQUtHLFNBQWdCLENBQ3JCLEdBQUkzVyxLQUFLdTVFLDBCQUEwQjUzRSxLQUFLNlUsRUFBSzJhLFVBQVcsTUFBTyxHQUMvRCxHQUFJLFlBQVl4dkIsS0FBSzZVLEVBQUs1VixXQUFZLE9BQU80VixFQUFLSixVQUVsRCxNQUFNMUQsRUFBS2hTLEVBQUsycEQsa0JBQWtCN3pDLEdBQU0sU0FBU2dhLEdBQVcsT0FBTzl2QixFQUFLb3BELGtCQUFrQnQ1QixLQUFhOXZCLEVBQUtpNUIsaUJBQWlCbkosRUFBUzl2QixFQUFLdy9CLHVCQUEwQixHQUNySyxJQUFLLElBQUlyaUMsRUFBSTZVLEVBQUdwTSxPQUFTLEVBQUd6SSxHQUFLLEVBQUdBLElBQ2hDNlUsRUFBRzdVLEdBQUd1WSxVQUFZMUQsRUFBRzdVLEdBQUd1RyxVQUc1QixPQUFLazFFLEdBQWtCNTRFLEVBQUs2L0IsZ0JBQWdCL3BCLElBQVM5VixFQUFLdS9CLHFCQUFxQnpwQixJQUFTOVYsRUFBSzRuQyxZQUFZOXhCLElBQVM5VixFQUFLa2dDLFVBQVVwcUIsSUFBVTlWLEVBQUttSSxTQUFTMk4sSUFBUzlWLEVBQUt1cEQsUUFBUXp6QyxFQUFLdTJCLG1CQUN6S3JzQyxFQUFLb3BELGtCQUFrQnR6QyxHQUFRQSxFQUFLcFMsVUFBWW9TLEVBQUtKLFVBRXJELElBQU1taEQsRUFBYSxLQUFPNzJELEVBQUtvcEQsa0JBQWtCdHpDLEdBQVFBLEVBQUtwUyxVQUFZb1MsRUFBS0osV0FBYSxLQUFPbWhELEVBQWEsSUFJL0gsR0FBc0IsSUFBbEIvZ0QsRUFBS0csU0FBZ0IsQ0FDckIsSUFBSzJpRSxFQUFlLE9BQU81NEUsRUFBS3FrRCxlQUFldnVDLEVBQUtqUixhQUNwRCxNQUFNaTBFLEVBQVloakUsRUFBS2pSLFlBQVk4QyxNQUFNLE9BQ3pDLElBQUkyUyxFQUFPLEdBQ1gsSUFBSyxJQUFvQzlLLEVBQWhDclMsRUFBSSxFQUFHNEssRUFBTyt3RSxFQUFVbHpFLE9BQWN6SSxFQUFJNEssRUFBTTVLLElBQ3JEcVMsRUFBT3NwRSxFQUFVMzdFLEdBQUcySyxPQUNoQjBILEVBQUs1SixPQUFTLElBQUcwVSxHQUFRLElBQU11OEMsRUFBYSxJQUFNNzJELEVBQUtxa0QsZUFBZTcwQyxHQUFRLEtBQU9xbkQsRUFBYSxLQUUxRyxPQUFPdjhDLEVBR1gsT0FBc0IsSUFBbEJ4RSxFQUFLRyxVQUFrQjNXLEtBQUt5NUUsbUJBQ3JCLFVBQVNqakUsRUFBS2pSLFlBQVlpRCxPQUFTLFNBR3ZDLElBU1hreEUsY0FBZSxTQUFVeHBFLEdBQ3JCLElBQUtsUSxLQUFLbS9ELDBCQUEyQixPQUFPanZELEVBRTVDLE1BQU1va0IsRUFBSy94QixFQUFRczFELGFBQ25CLE9BQU8zbkQsRUFBS2xDLFFBQVFoTyxLQUFLbS9ELDJCQUEyQixTQUFVbGhFLEVBQUdjLEVBQUdPLEVBQUdLLEdBQ25FLE9BQU9aLEdBQXNCLGlCQUFWdTFCLEVBQUdoMUIsR0FBa0JnMUIsRUFBR2gxQixHQUFLQSxJQUFNSyxFQUFJLElBQU1BLEVBQUksUUFVNUVnNkUsc0JBQXVCLFNBQVUzK0QsR0FTN0IsT0FSQUEsRUFBT0EsRUFDRmhOLFFBQVFoTyxLQUFLNDVFLHVCQUF3QixJQUNyQzVyRSxRQUFRLGdFQUFpRSxJQUV6RSxZQUFZck0sS0FBSzNCLEtBQUt1QyxRQUFRMjFELHdCQUMvQmw5QyxFQUFPQSxFQUFLaE4sUUFBUSxvQkFBcUIsYUFHdENnTixFQUFLaE4sUUFBUWhPLEtBQUtvL0QsMEJBQTJCLElBQUlweEQsUUFBUWhPLEtBQUtxL0QsMEJBQTJCLEtBR3BHendCLGlCQUFrQixTQUFVaXJDLEVBQUlqMEQsR0FDNUIsTUFBTTNDLEVBQU9qakIsS0FBS29HLEdBQUd1QixLQUNmN0ksRUFBUThtQixFQUFLdFUsTUFBTSx1QkFDbkJ3b0UsRUFBVWg3RSxFQUFtQixFQUFYQSxFQUFNLEdBQVM0QixFQUFLMGtELGFBQWF4L0IsR0FDbkRtMEQsRUFBT2o3RSxFQUFRQSxFQUFNLEdBQUssTUFDaEMsSUFBSWs3RSxFQUFTRixFQVViLE9BUkksS0FBS240RSxLQUFLbzRFLEdBQ1ZDLEVBQVMvMkQsRUFBS3JiLE1BQU1reUUsRUFBVSxPQUNkLE9BQVRDLEVBQ1BDLEVBQVMvMkQsRUFBS3JiLE1BQWdCLE1BQVZreUUsR0FDSixNQUFUQyxJQUNQQyxFQUFTRixFQUFVLEtBR2ZELEdBQ0osSUFBSyxLQUNMLElBQUssTUFDTCxJQUFLLElBQ0QsT0FBaUIsTUFBVEcsR0FBaUI3dkIsUUFBUSxHQUFLMHZCLEVBQzFDLElBQUssS0FDRCxPQUFPNTJELEVBQUt0USxNQUFNcW5FLEVBQVMsT0FBU0gsRUFDeEMsUUFDSSxPQUFPRyxFQUFTSCxJQUk1QkksWUFBYSxTQUFVaDhFLEVBQUdzSyxFQUFHbkssR0FDekIsSUFBSTA5RCxHQUFNNzlELEVBQUVxVCxNQUFNLHFDQUF1QyxJQUFJLEdBQzdELEdBQUksUUFBUTNQLEtBQUt2RCxLQUFVMDlELElBQU83OUQsRUFBRXFULE1BQU0sa0JBQW9CLElBQUksR0FBSSxDQUNsRSxNQUFNc1UsR0FBUTNuQixFQUFFcVQsTUFBTSxzQkFBd0IsSUFBSSxHQUM1QzRvRSxHQUFRajhFLEVBQUVxVCxNQUFNLHNCQUF3QixJQUFJLEdBQzVDc1gsR0FBUzNxQixFQUFFcVQsTUFBTSx1QkFBeUIsSUFBSSxJQUNoRHNVLEdBQVFzMEQsR0FBUXR4RCxLQUNoQmt6QyxFQUFLLFdBQWFsMkMsRUFBTyxhQUFnQjVsQixLQUFLVSxLQUFLc2dDLFVBQVVwYixFQUFLLE1BQU8sR0FBTSxPQUFTLEtBQU9zMEQsRUFBTyxlQUFpQkEsRUFBTyxJQUFNLEtBQU90eEQsRUFBUSxTQUFXQSxFQUFRLElBQU0sSUFBTSxLQUkxTCxHQUFJa3pDLEVBQUksQ0FDQ3Z6RCxJQUFHQSxFQUFJLElBQ1osTUFBTXpILEVBQVFnN0QsRUFBRzl0RCxRQUFRLFVBQVcsSUFBSXNELE1BQU10UixLQUFLMGhFLGtCQUFrQnRqRSxJQUNyRSxHQUFJMEMsRUFBTyxDQUNQLE1BQU1xNUUsRUFBZSxHQUNyQixJQUFLLElBQStCeDdFLEVBQTNCZCxFQUFJLEVBQUc0SixFQUFNM0csRUFBTXdGLE9BQVd6SSxFQUFJNEosRUFBSzVKLElBRTVDLEdBREFjLEVBQUltQyxFQUFNakQsR0FBR3lULE1BQU0sOEJBQ2YzUyxJQUFNLGdDQUFnQ2dELEtBQUtoRCxFQUFFLElBQUssQ0FDbEQsTUFBTXd4RSxFQUFJenZFLEVBQUtrbEQsaUJBQWlCam5ELEVBQUUsR0FBRzZKLFFBQy9CRCxFQUFJdkksS0FBSytxQixnQkFBZ0JvbEQsR0FBR25pRSxRQUFRLEtBQU0sSUFDMUM5UCxFQUFJUyxFQUFFLEdBQUc2SixPQUNmLE9BQVEybkUsR0FDSixJQUFLLGFBQ0QsSUFBSzV0RSxFQUFRVCxRQUFRMGYsT0FBcUMsSUFBN0JqZixFQUFRaWYsS0FBSzlZLFFBQVF4SyxHQUFXLFNBQzdELE1BQ0osSUFBSyxXQUNELElBQUtxRSxFQUFRVCxRQUFRNGYsU0FBVSxTQUMxQjFoQixLQUFLMGhFLGtCQUFrQi95QixhQUFhaHRDLEtBQUtoRCxFQUFFLE1BQzVDQSxFQUFFLEdBQUtBLEVBQUUsR0FBR3FQLFNBQVNyUCxFQUFFLEdBQUcyUyxNQUFNLGdCQUFrQixJQUFJLEdBQUl0UixLQUFLNHVDLGlCQUFpQnZ2QyxLQUFLVyxLQUFNdUMsRUFBUW9zQyxnQkFFdkcsTUFDSixJQUFLLFFBQ0QsSUFBS3BzQyxFQUFRVCxRQUFRbWdCLFdBQWEsMENBQTBDdGdCLEtBQUt6RCxHQUFJLFNBQ3JGLE1BQ0osSUFBSyxrQkFDRCxJQUFLcUUsRUFBUVQsUUFBUW9nQixhQUFlLDBDQUEwQ3ZnQixLQUFLekQsR0FBSSxTQUkzRnFLLElBQU1ySyxHQUNOaThFLEVBQWF4eEUsS0FBS2hLLEVBQUUsSUFJNUJ3N0UsRUFBYTd6RSxPQUFTLEdBQUdpQyxFQUFFSSxLQUFLLFVBQVl3eEUsRUFBYWxvRSxLQUFLLEtBQU8sTUFJakYsT0FBTzFKLEdBV1g2eEUsV0FBWSxTQUFVQyxFQUFlcDhFLEVBQUdjLEdBQ3BDLEdBQUksMEJBQTBCNEMsS0FBSzFELEdBQUksT0FBT0EsRUFFOUMsSUFBSXNLLEVBQUksS0FDUixNQUFNTyxFQUFVL0osRUFBRXVTLE1BQU0sdUJBQXVCLEdBQUc1RCxjQUc1QzRzRSxFQUFRdDZFLEtBQUs4L0QseUJBQXlCaDNELEdBQzVDN0ssRUFBSUEsRUFBRStQLFFBQVEsb0NBQXFDLElBQ3hDL1AsRUFBUHE4RSxFQUFXcjhFLEVBQUUrUCxRQUFRc3NFLEVBQU8sSUFDdkJyOEUsRUFBRStQLFFBQVFoTyxLQUFLNC9ELDJCQUE0QixJQUdwRCxNQUFNMmEsRUFBUXY2RSxLQUFLNi9ELHlCQUF5Qi8yRCxHQUs1QyxHQUpXUCxFQUFQZ3lFLEVBQVd0OEUsRUFBRXFULE1BQU1pcEUsR0FDZHQ4RSxFQUFFcVQsTUFBTStvRSxFQUFnQnI2RSxLQUFLMC9ELDJCQUE2QjEvRCxLQUFLMi9ELHFDQUdwRTBhLEdBQTZCLFNBQVp2eEUsR0FBa0MsT0FBWkEsR0FBcUI5SSxLQUFLMGhFLGtCQUFrQjU0RCxHQUNuRixHQUFnQixNQUFaQSxFQUFpQixDQUNqQixNQUFNZ3pELEVBQUs3OUQsRUFBRXFULE1BQU0sK0NBQ2Z3cUQsSUFDS3Z6RCxJQUFHQSxFQUFJLElBQ1pBLEVBQUVJLEtBQUttekQsRUFBRyxVQUVOdnpELEdBQU0sVUFBVTVHLEtBQUs0RyxFQUFFb0gsY0FDZixTQUFaN0csR0FBa0MsT0FBWkEsSUFDdEJQLEVBQUl2SSxLQUFLaTZFLFlBQVloOEUsRUFBR3NLLEVBQUcsU0FDekJ2SSxLQUFLMGhFLGtCQUFrQjU0RCxHQUN6QlAsRUFBSXZJLEtBQUtpNkUsWUFBWWg4RSxFQUFHc0ssRUFBR08sR0FDcEIsd0JBQXdCbkgsS0FBS21ILEtBQ3BDUCxFQUFJdkksS0FBS2k2RSxZQUFZaDhFLEVBQUdzSyxFQUFHLGdCQUdoQyxDQUNILE1BQU11ekQsRUFBSzc5RCxFQUFFcVQsTUFBTSxvQ0FDZndxRCxJQUFPdnpELEVBQUdBLEVBQUksQ0FBQ3V6RCxFQUFHLElBQ2JBLElBQU92ekQsRUFBRWMsTUFBSyxTQUFVZCxHQUFLLE1BQU8sU0FBUzVHLEtBQUs0RyxFQUFFQyxZQUFhRCxFQUFFSSxLQUFLbXpELEVBQUcsSUFJeEYsR0FBSXA3RCxFQUFLa2dDLFVBQVU5M0IsR0FBVSxDQUN6QixNQUFNZ3pELEVBQUs3OUQsRUFBRXFULE1BQU0sb0NBQ2QvSSxJQUFHQSxFQUFJLElBQ1J1ekQsR0FBSXZ6RCxFQUFFSSxLQUFLbXpELEVBQUcsSUFHdEIsR0FBSXZ6RCxFQUNBLElBQUssSUFBMkJpSCxFQUF2QjNSLEVBQUksRUFBRzRKLEVBQU1jLEVBQUVqQyxPQUFXekksRUFBSTRKLEVBQUs1SixJQUV4QzJSLEVBQUssZ0RBQWdEN04sS0FBSzRHLEVBQUUxSyxHQUFHMkssUUFBVSxHQUFLRCxFQUFFMUssR0FDaEZrQixJQUFNLE1BQU00QyxLQUFLNk4sR0FBSyxHQUFLLEtBQU9BLEVBSTFDLE9BQU96USxHQVNYeTdFLFlBQWEsU0FBVWp3QyxHQUNuQixJQUFnQng1QixFQUFaalMsRUFBUSxHQUNaLE1BQU0yN0UsRUFBV2x3QyxFQUFJOXpCLFdBRXJCLElBQUssSUFBa0NuWCxFQUE5QnpCLEVBQUksRUFBRzRKLEVBQU1nekUsRUFBU24wRSxPQUFXekksRUFBSTRKLEVBQUs1SixJQUMvQ3lCLEVBQUltN0UsRUFBUzU4RSxHQUNPLElBQWZ5QixFQUFFcVgsU0FDSDdYLEdBQVMsV0FBVVEsRUFBRWlHLFlBQWMsVUFDM0I3RSxFQUFLNi9CLGdCQUFnQmpoQyxJQUFPb0IsRUFBS3UvQixxQkFBcUIzZ0MsSUFBT29CLEVBQUs0bkMsWUFBWWhwQyxJQUFPLFFBQVFxQyxLQUFLckMsRUFBRTZ4QixXQUt4R3BnQixJQUNBalMsR0FBU2lTLEVBQUVxRixVQUNYckYsRUFBSSxNQUVSalMsR0FBU1EsRUFBRThXLFlBUk5yRixJQUFHQSxFQUFJclEsRUFBS0MsY0FBYzRCLEVBQVFnMUQsYUFDdkN4bUQsRUFBRTlQLFlBQVkzQixHQUNkekIsSUFBSzRKLEtBWWIsT0FGSXNKLElBQUdqUyxHQUFTaVMsRUFBRXFGLFdBRVhoVSxFQUFHb29DLGNBQWNDLHlCQUF5QjNyQyxJQUdyRDQ3RSxpQkFBa0IsU0FBVUMsR0FDeEIsSUFBSTMvRCxFQUFPLEdBRVgsSUFBSyxJQUFpQ3hFLEVBQTdCM1ksRUFBSSxFQUFHNEosRUFBTWt6RSxFQUFRcjBFLE9BQWN6SSxFQUFJNEosRUFBSzVKLElBQ2pEMlksRUFBT21rRSxFQUFROThFLEdBQ08sSUFBbEIyWSxFQUFLRyxTQUNEalcsRUFBS212QyxPQUFPcjVCLEdBQ1p3RSxHQUFReEUsRUFBS3BTLFVBQ04xRCxFQUFLMC9CLFdBQVc1cEIsR0FDdkJ3RSxHQUFReEUsRUFBS0osVUFDTjFWLEVBQUs2L0IsZ0JBQWdCL3BCLEdBQzVCd0UsR0FBUSxRQUFTeEUsRUFBS3BTLFVBQVVvRSxRQUFVLFFBQVUsUUFDN0M5SCxFQUFLdS9CLHFCQUFxQnpwQixLQUFVOVYsRUFBS3FwRCxRQUFRdnpDLEdBQ3hEd0UsR0FBUWhiLEtBQUswNkUsaUJBQWlCbGtFLEdBRTlCd0UsR0FBUSxPQUFTeEUsRUFBS0osVUFBWSxRQUd0QzRFLEdBQVEsUUFBVXhFLEVBQUtqUixhQUFlLFFBQVUsUUFJeEQsT0FBT3lWLEdBR1g0L0QsY0FBZSxTQUFVRCxHQUNyQixJQUFJckIsR0FBZ0IsRUFFcEIsSUFBSyxJQUFpQ3Y2RSxFQUE3QmxCLEVBQUksRUFBRzRKLEVBQU1rekUsRUFBUXIwRSxPQUFXekksRUFBSTRKLEVBQUs1SixJQUU5QyxHQURBa0IsRUFBSTQ3RSxFQUFROThFLEdBQ08sSUFBZmtCLEVBQUU0WCxXQUFtQmpXLEVBQUtpbkQsbUJBQW1CNW9ELEtBQU8yQixFQUFLc3BELFFBQVFqckQsS0FBT2lCLEtBQUt1NUUsMEJBQTBCNTNFLEtBQUs1QyxFQUFFb3lCLFVBQVcsQ0FDekhtb0QsR0FBZ0IsRUFDaEIsTUFJUixPQUFPQSxHQVlYTCxVQUFXLFNBQVVqK0QsRUFBTTYrQyxFQUFXdFIsR0FDbEMsSUFBS2htRCxFQUFRMjBELFdBQVksT0FBT2w4QyxFQUVoQ0EsRUFBT2hiLEtBQUsyNUUsc0JBQXNCMzVFLEtBQUt5OUQsUUFBUTEzQixnQkFBZ0JybEMsRUFBS211RCxhQUFhN3pDLEdBQU8sYUFBYXRYLEtBQUtVLFdBQVc0SixRQUFRLCtCQUFnQ2hPLEtBQUtvNkUsV0FBVy82RSxLQUFLVyxNQUFNLElBQU9nTyxRQUFRLFlBQWEsSUFDcE4sTUFBTXU4QixFQUFNbm9DLEVBQUdvb0MsY0FBY0MseUJBQXlCenZCLEdBQ3RELElBQ0l0YSxFQUFLNnVELHdCQUF3QmhsQixFQUFLdnFDLEtBQUtpL0QsMEJBQTJCai9ELEtBQUtrL0QsMEJBQTJCbC9ELEtBQUs2NkUsa0JBQ3pHLE1BQU96dEUsR0FDTGtDLFFBQVFDLEtBQUssK0NBQWlEbkMsR0FHbEUsR0FBSXBOLEtBQUsyZ0UsaUJBQW1CM2dFLEtBQUsyZ0UsZ0JBQWdCOVYsTUFBTyxDQUNwRCxNQUFNaXdCLEVBQWV2d0MsRUFBSTNoQyxpQkFBaUI1SSxLQUFLMmdFLGdCQUFnQjlWLE9BQy9ELElBQUssSUFBc0Nrd0IsRUFBWWg1QixFQUE5Q2xrRCxFQUFJLEVBQUc0SixFQUFNcXpFLEVBQWF4MEUsT0FBK0J6SSxFQUFJNEosRUFBSzVKLElBQUssQ0FDNUVra0QsRUFBWSxHQUFHcndDLE1BQU0xVCxLQUFLODhFLEVBQWFqOUUsR0FBR2trRCxXQUMxQyxJQUFLLElBQUk3akQsRUFBSSxFQUFHcTFDLEVBQU93TyxFQUFVejdDLE9BQVFwSSxFQUFJcTFDLEVBQU1yMUMsSUFFL0MsR0FEQTY4RSxFQUFhLzZFLEtBQUsyZ0UsZ0JBQWdCcjRELElBQUl5NUMsRUFBVTdqRCxJQUM1QzY4RSxFQUFZLENBQ1pBLEVBQVdELEVBQWFqOUUsSUFDeEIsUUFNaEIsSUFBSTg4RSxFQUFVcHdDLEVBQUk5ekIsV0FDZHdpRSxFQUFZLEdBQ2hCLE1BQU1LLEVBQWdCdDVFLEtBQUs0NkUsY0FBY0QsR0FFdENyQixJQUNDcUIsRUFBVTM2RSxLQUFLdzZFLFlBQVlqd0MsR0FBSzl6QixZQUdwQyxJQUFLLElBQWlDMVgsRUFBN0JsQixFQUFJLEVBQUc0SixFQUFNa3pFLEVBQVFyMEUsT0FBV3pJLEVBQUk0SixFQUFLNUosSUFDOUNrQixFQUFJNDdFLEVBQVE5OEUsR0FDUm1DLEtBQUtnN0Usc0JBQXNCcjVFLEtBQUs1QyxFQUFFb3lCLFVBQ2xDOG5ELEdBQWFsNkUsRUFBRXFYLFVBR25CNmlFLEdBQWFqNUUsS0FBS3E1RSxVQUFVdDZFLEVBQUd1NkUsR0FXbkMsT0FSQUwsRUFBWXY0RSxFQUFLKy9CLHFCQUFxQnc0QyxHQUNqQ0EsR0FHR3BmLElBQVdvZixFQUFZQSxFQUFVanJFLFFBQTZCLGlCQUFkNnJELEVBQXlCbjVELEVBQUsydUQsb0JBQW9Cd0ssR0FBYUEsRUFBVyxLQUMxSHRSLElBQVcwd0IsRUFBWUEsRUFBVWpyRSxRQUE2QixpQkFBZHU2QyxFQUF5QjduRCxFQUFLNHVELG9CQUFvQi9HLEdBQWFBLEVBQVcsTUFIOUgwd0IsRUFBWWorRCxFQU1UaGIsS0FBSzA1RSxjQUFjVCxJQVE5QmpDLHlCQUEwQixTQUFVaHlCLEdBQ2hDLElBQUt6aUQsRUFBUTIwRCxXQUFZLE9BQU9sUyxFQUNoQ0EsRUFBV2hsRCxLQUFLMjVFLHNCQUFzQjM1RSxLQUFLeTlELFFBQVExM0IsZ0JBQWdCcmxDLEVBQUttdUQsYUFBYTdKLEdBQVcsYUFBYXRoRCxLQUFLVSxXQUFXNEosUUFBUSwrQkFBZ0NoTyxLQUFLbzZFLFdBQVcvNkUsS0FBS1csTUFBTSxJQUNoTSxNQUFNdXFDLEVBQU1ub0MsRUFBR29vQyxjQUFjQyx5QkFBeUJ1YSxHQUV0RCxJQUNJdGtELEVBQUs2dUQsd0JBQXdCaGxCLEVBQUt2cUMsS0FBS2kvRCwwQkFBMkJqL0QsS0FBS2svRCwwQkFBMkJsL0QsS0FBSzY2RSxrQkFDekcsTUFBT3p0RSxHQUNMa0MsUUFBUUMsS0FBSyw4REFBZ0VuQyxHQUdqRixHQUFJcE4sS0FBSzJnRSxpQkFBbUIzZ0UsS0FBSzJnRSxnQkFBZ0I5VixNQUFPLENBQ3BELE1BQU1pd0IsRUFBZXZ3QyxFQUFJM2hDLGlCQUFpQjVJLEtBQUsyZ0UsZ0JBQWdCOVYsT0FDL0QsSUFBSyxJQUFzQ2t3QixFQUFZaDVCLEVBQTlDbGtELEVBQUksRUFBRzRKLEVBQU1xekUsRUFBYXgwRSxPQUErQnpJLEVBQUk0SixFQUFLNUosSUFBSyxDQUM1RWtrRCxFQUFZLEdBQUdyd0MsTUFBTTFULEtBQUs4OEUsRUFBYWo5RSxHQUFHa2tELFdBQzFDLElBQUssSUFBSTdqRCxFQUFJLEVBQUdxMUMsRUFBT3dPLEVBQVV6N0MsT0FBUXBJLEVBQUlxMUMsRUFBTXIxQyxJQUUvQyxHQURBNjhFLEVBQWEvNkUsS0FBSzJnRSxnQkFBZ0JyNEQsSUFBSXk1QyxFQUFVN2pELElBQzVDNjhFLEVBQVksQ0FDWkEsRUFBV0QsRUFBYWo5RSxJQUN4QixRQU1oQixNQUFNODhFLEVBQVVwd0MsRUFBSTl6QixXQUNwQixJQUFJd2lFLEVBQVksR0FBSXQ1RSxFQUFJLEtBQ3hCLElBQUssSUFBV1osRUFBUGxCLEVBQUksRUFBTUEsRUFBSTg4RSxFQUFRcjBFLE9BQVF6SSxJQUduQyxHQUZBa0IsRUFBSTQ3RSxFQUFROThFLEdBRVJtQyxLQUFLZzdFLHNCQUFzQnI1RSxLQUFLNUMsRUFBRW95QixVQUNsQzhuRCxHQUFhbDZFLEVBQUVxWCxjQURuQixDQUtBLEtBQUsxVixFQUFLNi9CLGdCQUFnQnhoQyxJQUFPMkIsRUFBS3UvQixxQkFBcUJsaEMsSUFBTzJCLEVBQUs0bkMsWUFBWXZwQyxJQUFPMkIsRUFBS2tnQyxVQUFVN2hDLElBQXFCLElBQWZBLEVBQUU0WCxVQUFtQixZQUFZaFYsS0FBSzVDLEVBQUU2QixZQUFZLENBSS9KLEdBSEtqQixJQUFHQSxFQUFJZSxFQUFLQyxjQUFjNEIsRUFBUWcxRCxhQUN2QzUzRCxFQUFFc0IsWUFBWWxDLEdBQ2RsQixJQUNJODhFLEVBQVE5OEUsRUFBSSxLQUFPNkMsRUFBSzYvQixnQkFBZ0JvNkMsRUFBUTk4RSxFQUFJLElBQ3BELFNBRUFrQixFQUFJWSxFQUNKQSxFQUFJLEtBSVJBLElBQ0FzNUUsR0FBYWo1RSxLQUFLcTVFLFVBQVUxNUUsR0FBRyxHQUMvQkEsRUFBSSxNQUVSczVFLEdBQWFqNUUsS0FBS3E1RSxVQUFVdDZFLEdBQUcsR0FJbkMsT0FGSVksSUFBR3M1RSxHQUFhajVFLEtBQUtxNUUsVUFBVTE1RSxHQUFHLElBRWIsSUFBckJzNUUsRUFBVTN5RSxPQUFxQixJQUFNL0QsRUFBUWcxRCxXQUFhLFVBQVloMUQsRUFBUWcxRCxXQUFhLEtBRS9GMGhCLEVBQVl2NEUsRUFBSysvQixxQkFBcUJ3NEMsR0FDL0JqNUUsS0FBSzA1RSxjQUFjVCxLQVM5QjlCLHVCQUF3QixTQUFVbjhELEVBQU1pZ0UsR0FDcEMsSUFBSUMsRUFBYSxHQUNqQixNQUFNanFCLEVBQVU3cUQsRUFBRzJILE9BQ2JvdEUsRUFBUSxJQUFJbHFCLEVBQVEsbUhBQW9ILEtBQ3hJOG1CLEVBQXVCLGlCQUFULzhELEVBQW9CNVksRUFBR29vQyxjQUFjQyx5QkFBeUJ6dkIsR0FBUUEsRUFDcEZvZ0UsRUFBVyxTQUFVNXFELEdBQVcsT0FBT3h3QixLQUFLdWdDLGdCQUFnQi9QLElBQVl4d0IsS0FBS3NvQyxZQUFZOVgsSUFBWW54QixLQUFLcUIsR0FDMUcyNkUsRUFBU0osRUFBTyxHQUFLLEtBRTNCLElBQUlLLEVBQWFMLEVBQU8sRUFBZ0MsRUFBNUJqN0UsS0FBSzJoRSxVQUFVTyxXQXVDM0MsT0F0Q0FvWixFQUFhQSxFQUFhLEVBQUksSUFBSWwxRSxFQUFHd0osTUFBTTByRSxFQUFhLEdBQUdycEUsS0FBSyxLQUFPLEdBRXRFLFNBQVNtNEMsRUFBZTVvRCxFQUFTMmdCLEdBQzlCLE1BQU12QyxFQUFXcGUsRUFBUWlWLFdBQ25COGtFLEVBQWlCSixFQUFNeDVFLEtBQUtILEVBQVEydkIsVUFDcENxcUQsRUFBaUJELEVBQWlCcDVELEVBQVMsR0FFakQsSUFBSyxJQUFrQzNMLEVBQU1pd0QsRUFBSWdWLEVBQVFDLEVBQWF0ekUsRUFBS3V6RSxFQUFsRTk5RSxFQUFJLEVBQUc0SixFQUFNbVksRUFBU3RaLE9BQXVEekksRUFBSTRKLEVBQUs1SixJQUMzRjJZLEVBQU9vSixFQUFTL2hCLEdBQ2hCNjlFLEVBQWNQLEVBQU14NUUsS0FBSzZVLEVBQUsyYSxVQUM5QnMxQyxFQUFLaVYsRUFBY0wsRUFBUyxHQUM1QkksR0FBU0wsRUFBUzVrRSxJQUFVK2tFLEdBQW1CLGFBQWE1NUUsS0FBS0gsRUFBUTJ2QixVQUFxQixHQUFUa3FELEVBRS9ELElBQWxCN2tFLEVBQUtHLFNBSWEsSUFBbEJILEVBQUtHLFNBSXNCLElBQTNCSCxFQUFLQyxXQUFXblEsT0FLZmtRLEVBQUtKLFdBR05oTyxFQUFNb08sRUFBSzJhLFNBQVN6akIsY0FDcEJpdUUsRUFBWUgsR0FBaUJFLEVBQWN2NUQsRUFBUyxHQUNwRCs0RCxJQUFlTyxJQUFXRixFQUFpQixHQUFLOVUsSUFBT2tWLEVBQVlubEUsRUFBS0osVUFBVTlFLE1BQU0yL0MsRUFBUSxJQUFNN29ELEVBQU0sU0FBVSxNQUFNLEdBQUtxK0QsRUFDaklyYyxFQUFjNXpDLEVBQU0yTCxFQUFTbTVELEdBQzdCSixJQUFlLE1BQU12NUUsS0FBS3U1RSxHQUFjUyxFQUFZLElBQU0sS0FBT3Z6RSxFQUFNLEtBQU9xekUsR0FBVWhWLEdBQU04VSxHQUFnQyxhQUFhNTVFLEtBQUs2VSxFQUFLMmEsVUFBdENrcUQsRUFBMkQsS0FOMUtILElBQWMsSUFBSTkwRSxFQUFHdzFFLGVBQWdCQyxrQkFBa0JybEUsR0FMdkQwa0UsSUFBZSxRQUFRdjVFLEtBQUs2VSxFQUFLMmEsVUFBWWtxRCxFQUFTLEtBQU8sU0FBUzE1RSxLQUFLNlUsRUFBSysyQixjQUFjcGMsV0FBYSxRQUFReHZCLEtBQUs2VSxFQUFLMmEsVUFBWSxHQUFLcXFELEdBQWlCaGxFLEVBQUtKLFVBQVlxd0QsRUFKM0svbEUsRUFBS212QyxPQUFPcjVCLEVBQUsrMkIsaUJBQWdCMnRDLEdBQWN4NkUsRUFBS3FrRCxlQUFlLFFBQVFwakQsS0FBSzZVLEVBQUtnSyxNQUFRLEdBQUtoSyxFQUFLZ0ssT0FKNUcwNkQsR0FBYyxhQUFZMWtFLEVBQUtqUixZQUFZaUQsT0FBUyxVQUFTaStELEVBWnhFLENBa0NDc1IsRUFBTSxJQUVEbUQsRUFBVzF5RSxPQUFTNnlFLEdBVS9CditCLFlBQWEsU0FBVTl5QyxFQUFNOHhFLEVBQVVDLEdBQ25DMzVFLEVBQUdmLGlCQUFpQjJJLEVBQU04eEUsRUFBVUMsR0FDaEN4NUUsRUFBUW9rRCxRQUNSM21ELEtBQUs4K0MsSUFBSXo5QyxpQkFBaUIySSxFQUFNOHhFLElBVXhDai9CLGVBQWdCLFNBQVU3eUMsRUFBTTh4RSxHQUM1QjE1RSxFQUFHQyxvQkFBb0IySCxFQUFNOHhFLEdBQ3pCdjVFLEVBQVFva0QsUUFDUjNtRCxLQUFLOCtDLElBQUl6OEMsb0JBQW9CMkgsRUFBTTh4RSxJQVUzQ0UsV0FBWSxTQUFVQyxHQUNsQixNQUFNcGxCLEVBQWV0MEQsRUFBUXMwRCxhQUN2QnFsQixFQUFZMzVFLEVBQVE2MkQsZ0JBQzFCLElBQUkraUIsRUFBZ0IsRUFLcEIsR0FKTUYsSUFBV0UsRUFBZ0JuOEUsS0FBS284RSxjQUFjSCxFQUFXQyxJQUUvRGw4RSxLQUFLcThFLGdCQUVEeGxCLEVBQWUsRUFBRyxDQUNsQixJQUFJeWxCLEdBQU8sRUFDWCxNQUFNQyxFQUFRemlELEVBQVUwaUQsYUFBYU4sR0FFckMsR0FBSUssRUFBUTFsQixHQUVSLEdBREF5bEIsR0FBTyxFQUNISCxFQUFnQixFQUFHLENBQ25CbjhFLEtBQUtzbUUsZUFDTCxNQUFNcjJCLEVBQVFqd0MsS0FBS2t3QyxXQUNiKzJCLEVBQVNoM0IsRUFBTWlCLFVBQVksRUFDM0JoaEMsRUFBT2xRLEtBQUtnckIsbUJBQW1CemxCLFlBQy9CazNFLEVBQWdCeHNDLEVBQU1pQixXQUFhcXJDLEVBQVExbEIsR0FFakQ3MkQsS0FBS2dyQixtQkFBbUJ6bEIsWUFBYzJLLEVBQUt3QixNQUFNLEVBQUcrcUUsRUFBZ0IsRUFBSSxFQUFJQSxHQUFpQnZzRSxFQUFLd0IsTUFBTXUrQixFQUFNaUIsVUFBV2hoQyxFQUFLNUosUUFDOUh0RyxLQUFLb3pCLFNBQVM2YyxFQUFNYyxhQUFjazJCLEVBQVFoM0IsRUFBTWMsYUFBY2syQixTQUUxRHNWLEVBQVFKLEVBQWlCdGxCLElBQ2pDeWxCLEdBQU8sR0FHWCxHQUFJQSxJQUNBdDhFLEtBQUswOEUsb0JBQ0RQLEVBQWdCLEdBQUcsT0FBTyxFQUl0QyxPQUFPLEdBU1hqUyxlQUFnQixTQUFVMW9FLEVBQVM0M0QsR0FDL0IsR0FBSTcyRCxFQUFRczBELGFBQWMsQ0FDdEIsTUFBTXFsQixFQUFZOWlCLEdBQW1CNzJELEVBQVE2MkQsZ0JBQ3ZDOXlELEVBQVN0RyxLQUFLbzhFLGNBQWtDLGlCQUFaNTZFLEVBQXVCQSxFQUFXeEIsS0FBSzRnRSxlQUFzQyxJQUFyQnAvRCxFQUFRbVYsU0FBa0JuVixFQUFRNFUsVUFBWTVVLEVBQVErRCxZQUFjMjJFLEdBQ3RLLEdBQUk1MUUsRUFBUyxHQUFLQSxFQUFTd3pCLEVBQVUwaUQsYUFBYU4sR0FBYTM1RSxFQUFRczBELGFBRW5FLE9BREE3MkQsS0FBSzA4RSxxQkFDRSxFQUdmLE9BQU8sR0FVWE4sY0FBZSxTQUFVajRFLEVBQVNpMUQsR0FDOUIsTUFBTyxPQUFPejNELEtBQUt5M0QsR0FBbUIxNEQsRUFBS3ltRCxjQUFjaGpELEdBQVdBLEVBQVFtQyxRQU1oRnEyRSx1QkFBd0IsV0FDcEJ2OEUsRUFBSzB6QixpQkFFTCxNQUFNOG9ELEVBQWlCblksRUFBTW9ZLHNCQUM3QixHQUFJRCxFQUFnQixDQUNoQixJQUFJMTVFLEVBQUksRUFFSkEsR0FEQzlDLEVBQUs2L0QsWUFBYzcvRCxFQUFLNC9ELFlBQXVDLFNBQXpCejlELEVBQVFnMEQsYUFDM0NsMkQsRUFBUW1CLFFBQVF5MEQsUUFBUTlsQyxZQUV4Qjl2QixFQUFRbUIsUUFBUTZmLFFBQVE4TyxZQUdoQyxJQUFJMnNELEVBQWtCLFVBQ3RCLElBQUssSUFBSWovRSxFQUFJLEVBQUc0SixFQUFNbTFFLEVBQWV0MkUsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDbEQsR0FBSXFGLEVBQUkwNUUsRUFBZS8rRSxHQUFJLENBQ3ZCaS9FLEVBQWtCRixFQUFlLytFLEdBQUssR0FDdEMsTUFJSjRtRSxFQUFNc1kseUJBQTJCRCxJQUNqQ3JZLEVBQU1zWSx1QkFBeUJELEVBQy9CaGpELEVBQVVrakQsa0JBQWtCdlksRUFBTTlQLG1CQUFtQm1vQixPQVNqRVQsY0FBZSxXQUNQaDhFLEVBQVFtQixRQUFRbXhELGFBQ2hCdnNELEVBQUc2NkIsV0FBVyxTQUFVbkgsRUFBV3YzQixHQUMzQnZDLEtBQUt1RixhQUFldTBCLElBQ3BCOTVCLEtBQUt1RixZQUFjdTBCLEVBQVUwaUQsYUFBYWo2RSxFQUFRNjJELG1CQUV4RC81RCxLQUFLZ0IsRUFBUW1CLFFBQVFteEQsWUFBYTc0QixFQUFXdjNCLEdBQVUsSUFRakVtNkUsa0JBQW1CLFdBQ2YsTUFBTWpxQixFQUFjcHlELEVBQVFtQixRQUFRaXhELFlBQ2hDQSxJQUFnQi94RCxFQUFLNEUsU0FBU210RCxFQUFhLGNBQzNDL3hELEVBQUt5SSxTQUFTc3BELEVBQWEsWUFDM0Jyc0QsRUFBRzY2QixZQUFXLFdBQ1Z2Z0MsRUFBS3dJLFlBQVl1cEQsRUFBYSxjQUMvQixPQVFYd3FCLGlCQUFrQixXQUNkLElBQUssSUFBSXAvRSxFQUFJLEVBQUc0SixFQUFNekgsS0FBSzZnRSxzQkFBc0J2NkQsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDOURtQyxLQUFLNmdFLHNCQUFzQmhqRSxNQVFuQys2RSxpQkFBa0IsV0FDZCxJQUFLLElBQUkvNkUsRUFBSSxFQUFHNEosRUFBTXpILEtBQUs4Z0Usc0JBQXNCeDZELE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzlEbUMsS0FBSzhnRSxzQkFBc0JqakUsTUFTbkN3NUUsYUFBYyxTQUFVdjRFLEdBQ2hCeUQsRUFBUWl6RCxpQkFDUmp6RCxFQUFRaXpELGlCQUFpQjBuQixTQUFTQyxTQUFTcitFLEdBRTNDdUIsRUFBUW1CLFFBQVE0ZixLQUFLdGlCLE1BQVFBLEdBUXJDKzNFLGFBQWMsV0FDVixPQUFPdDBFLEVBQVFpekQsaUJBQW1CanpELEVBQVFpekQsaUJBQWlCMG5CLFNBQVNFLFdBQWEvOEUsRUFBUW1CLFFBQVE0ZixLQUFLdGlCLE9BTzFHMm9FLGNBQWUsU0FBVTRWLEdBQ3JCLE1BQU1sYyxFQUFhbmhFLEtBQUttaEUsV0FDbEJULEVBQWdCMWdFLEtBQUswZ0UsY0FFM0IsSUFBSyxJQUFJdGhFLEtBQU8raEUsRUFDUmtjLEVBQVkzMEUsUUFBUXRKLElBQVEsSUFBTXNCLEVBQUswakMsT0FBTys4QixFQUFZL2hFLEtBQzFEc2hFLEVBQWNoNEQsUUFBUXRKLElBQVEsRUFDOUIwQyxFQUFRMUMsR0FBS3UwQixPQUFPMzFCLEtBQUtnQyxLQUFNLE1BQ3hCbWhFLEVBQVdtYyxTQUFXLGFBQWEzN0UsS0FBS3ZDLEdBQzFDc0IsRUFBS3lyRCxvQkFBb0JnVixFQUFXbWMsVUFBVW5jLEVBQVdtYyxRQUFRam5FLGFBQWEsWUFBWSxHQUN4RjhxRCxFQUFXb2MsUUFBVSxZQUFZNTdFLEtBQUt2QyxHQUN4Q3NCLEVBQUt5ckQsb0JBQW9CZ1YsRUFBV29jLFNBQVNwYyxFQUFXb2MsT0FBT3JyRCxnQkFBZ0IsWUFFcEZ4eEIsRUFBS3dJLFlBQVlpNEQsRUFBVy9oRSxHQUFNLFlBVzlDbytFLE1BQU8sU0FBVUMsRUFBUUMsR0FDckIsTUFBTXpzQixFQUFVN3FELEVBQUcySCxPQUNuQi9OLEtBQUtnK0QsSUFBTXo3RCxFQUFRb2tELE9BQVN0bUQsRUFBUW1CLFFBQVFncUQsYUFBYTNFLGNBQWdCemdELEVBQ3pFcEcsS0FBSzgrQyxJQUFNMThDLEVBQ1hwQyxLQUFLNGdFLGNBQTRDLGNBQTVCcitELEVBQVE2MkQsZ0JBQzdCcDVELEtBQUsrcUIsZ0JBQWtCM2tCLEVBQUcyakIsaUJBQWlCMXBCLEVBQVFtQixRQUFRMHZCLFNBQzNEbHhCLEtBQUsyOUQsY0FBZ0J0OUQsRUFBUW1CLFFBQVFncUQsYUFBYW5rRCxhQUNsRHJILEtBQUs0OUQscUJBQXVCbDlELEVBQUtzZ0MsVUFBVWhoQyxLQUFLK3FCLGdCQUFnQjR5RCxpQkFBaUIsZ0JBQWtCajlFLEVBQUtzZ0MsVUFBVWhoQyxLQUFLK3FCLGdCQUFnQjR5RCxpQkFBaUIsbUJBQ3hKMzlFLEtBQUs2NkUsaUJBQW1CLFNBQVV0eUUsR0FDOUIsT0FBT3ZJLEtBQUsyQixLQUFLNEcsR0FBS0EsRUFBSSxJQUM1QmxKLEtBQUtrRCxFQUFRNjBELG1CQUVmLE1BQU13bUIsRUFBV3I3RSxFQUFRdzFELG1CQUFxQixHQUFLLFVBTW5ELEdBTEEvM0QsS0FBSys0RSxrQkFBb0IsSUFBSTluQixFQUFRLHdEQUF5RCxNQUM5Rmp4RCxLQUFLNDVFLHVCQUF5QixJQUFJM29CLEVBQVEsS0FBTzJzQixFQUFVLHNDQUF3Q0EsRUFBVSxtQkFBb0IsTUFDakk1OUUsS0FBS3U1RSwwQkFBNEIsSUFBSXRvQixFQUFRLEtBQU8yc0IsRUFBVSxrQ0FBb0MsS0FDbEc1OUUsS0FBS2c3RSxzQkFBd0IsSUFBSS9wQixFQUFRLEtBQU8xdUQsRUFBUXcxRCxtQkFBcUIsU0FBVyxJQUFNLElBQUssTUFFOUZ4MUQsRUFBUW9rRCxRQUFtQyxtQkFBbEJ2Z0QsRUFBR3kzRSxXQUEyQixDQUN4RCxJQUFJbm5FLEVBQVFyVyxFQUFRbUIsUUFBUWdxRCxhQUM1QixLQUFPOTBDLEdBQU8sQ0FDVixHQUFJQSxFQUFNb25FLFdBQVksQ0FDbEI5OUUsS0FBS2krRCxZQUFjdm5ELEVBQU1vbkUsV0FDekIsTUFDRyxHQUFJcG5FLGFBQWlCdFEsRUFBR3kzRSxXQUFZLENBQ3ZDNzlFLEtBQUtpK0QsWUFBY3ZuRCxFQUNuQixNQUVKQSxFQUFRQSxFQUFNak4sV0FFZHpKLEtBQUtpK0QsY0FBYWorRCxLQUFLaytELGlDQUFtQyxJQUlsRSxNQUFNNmYsRUFBbUIzM0UsRUFBRzdILE9BQU84SCxLQUFLOUQsRUFBUXMxRCxjQUMxQ21tQixFQUFpQno3RSxFQUFRNDFELGlCQUF3QjUxRCxFQUFRNDFELGlCQUFpQjl2RCxNQUFNLEtBQUtlLFFBQU8sU0FBVWIsR0FBSyxNQUFPLG9CQUFvQjVHLEtBQUs0RyxNQUEvRixHQUNsRCxJQUFLLElBQUkxSyxFQUFJLEVBQUdBLEVBQUltZ0YsRUFBYzEzRSxPQUFRekksSUFDdENrZ0YsRUFBaUI5MEUsT0FBTzgwRSxFQUFpQnIxRSxRQUFRczFFLEVBQWNuZ0YsR0FBRzZQLGVBQWdCLEdBRXRGMU4sS0FBS20vRCwwQkFBd0QsSUFBNUI0ZSxFQUFpQnozRSxPQUFlLEtBQU8sSUFBSTJxRCxFQUFRLFdBQWE4c0IsRUFBaUI5ckUsS0FBSyxLQUFPLDhCQUErQixNQUc3SixNQUFNZ3NFLEVBQWEsU0FBVXh0RSxFQUFLeXRFLEdBQVEsT0FBUXp0RSxFQUFxQixNQUFSQSxFQUFjLFVBQWN5dEUsRUFBY3p0RSxFQUFNLElBQU15dEUsRUFBbkJ6dEUsRUFBMUMsS0FFbEQwdEUsRUFBYyxtR0FFcEJuK0UsS0FBS3k1RSxtQkFBcUJsM0UsRUFBUTIxRCxxQkFBcUJ4dkQsUUFBUSxPQUFTLEdBQXNDLE1BQWpDbkcsRUFBUTIxRCxxQkFFckZsNEQsS0FBS2kvRCwwQkFBNEIsSUFBSWhPLEVBQVEsS0FBT2d0QixFQUFXMTdFLEVBQVEyMUQscUJBQXFCbHFELFFBQVEsTUFBTyxJQUFLLElBQU0sS0FBTSxLQUM1SGhPLEtBQUtrL0QsMEJBQTRCLElBQUlqTyxFQUFRLE1BQVExdUQsRUFBUXkxRCxlQUFpQixLQUFPLEtBQU0sS0FFM0ZoNEQsS0FBS28vRCwwQkFBNEIxK0QsRUFBSzJ1RCxvQkFBb0I0dUIsRUFBVzE3RSxFQUFRMjFELHFCQUFxQmxxRCxRQUFRLE1BQU8sbUJBQWMsS0FDL0hoTyxLQUFLcS9ELDBCQUE0QjMrRCxFQUFLNHVELG9CQUFvQi9zRCxFQUFReTFELGNBQWNocUQsUUFBUSxNQUFPLG9CQUUvRmhPLEtBQUtzL0QseUJBQTJCNStELEVBQUsydUQsb0JBQW9CNHVCLEVBQVcxN0UsRUFBUSsxRCxtQkFBb0IsS0FDaEd0NEQsS0FBS3UvRCx5QkFBMkI3K0QsRUFBSzR1RCxvQkFBb0Ivc0QsRUFBUTgxRCxvQkFFakUsTUFBTStsQixFQUFZLHVCQUNaQyxFQUFTOTdFLEVBQVFnMkQsb0JBQ3ZCLElBQUkrbEIsRUFBVyxHQUNYQyxFQUFVLEdBQ2QsR0FBTUYsRUFDRixJQUFLLElBQUlsTyxLQUFLa08sRUFDTDM5RSxFQUFLMGpDLE9BQU9pNkMsRUFBUWxPLEtBQU0sY0FBY3h1RSxLQUFLMDhFLEVBQU9sTyxNQUMvQyxRQUFOQSxFQUNBb08sRUFBVU4sRUFBV0ksRUFBT2xPLEdBQUlnTyxHQUVoQ0csRUFBU25PLEdBQUssSUFBSWxmLEVBQVEsU0FBV2d0QixFQUFXSSxFQUFPbE8sR0FBSSxJQUFNLElBQU1pTyxFQUFXLE9BSzlGcCtFLEtBQUswL0QsMkJBQTZCLElBQUl6TyxFQUFRLFVBQVlzdEIsR0FBV0oscUtBQWdDLElBQU1DLEVBQVcsTUFDdEhwK0UsS0FBSzIvRCxvQ0FBc0MsSUFBSTFPLEVBQVEsVUFBYXN0QixHQUFXSixHQUF4QixzQkFBcUVDLEVBQVcsTUFDdklwK0UsS0FBSzYvRCx5QkFBMkJ5ZSxFQUdoQyxNQUFNRSxFQUFTajhFLEVBQVFpMkQsb0JBR3ZCLEdBRkE4bEIsRUFBVyxHQUNYQyxFQUFVLEdBQ0pDLEVBQ0YsSUFBSyxJQUFJck8sS0FBS3FPLEVBQ0w5OUUsRUFBSzBqQyxPQUFPbzZDLEVBQVFyTyxLQUNmLFFBQU5BLEVBQ0FvTyxFQUFVTixFQUFXTyxFQUFPck8sR0FBSSxJQUVoQ21PLEVBQVNuTyxHQUFLLElBQUlsZixFQUFRLFNBQVdndEIsRUFBV08sRUFBT3JPLEdBQUksSUFBTSxJQUFNaU8sRUFBVyxPQUs5RnArRSxLQUFLNC9ELDJCQUE2QixJQUFJM08sRUFBUSxVQUFZc3RCLEdBQVcsS0FBTyxJQUFNSCxFQUFXLE1BQzdGcCtFLEtBQUs4L0QseUJBQTJCd2UsRUFHaEN0K0UsS0FBS2dnRSxVQUFZLFVBQVVyK0QsS0FBS1ksRUFBUXZELE1BQ3hDZ0IsS0FBS2lnRSxXQUFhLDBCQUEwQnQrRCxLQUFLWSxFQUFRdkQsTUFDekRnQixLQUFLa2dFLGlCQUFtQixrQkFBa0J2K0QsS0FBS1ksRUFBUXZELE1BR3ZEZ0IsS0FBS3krRSxrQkFHTHorRSxLQUFLNmdFLHNCQUF3QixHQUM3QjdnRSxLQUFLOGdFLHNCQUF3QixHQUc3QjlnRSxLQUFLMmdFLGdCQUFrQixDQUFFOVYsTUFBTyxHQUFJdmlELElBQUssSUFDekMsTUFBTW8yRSxFQUFlLEdBR3JCMStFLEtBQUswZ0UsY0FBZ0IsR0FDckIxZ0UsS0FBSytnRSxhQUFhNTRELEtBQU8sR0FDekJuSSxLQUFLK2dFLGFBQWFHLFVBQVksR0FFOUIsSUFDSXFKLEVBQVE1NkIsRUFEUmd2QyxFQUFtQixHQUV2QixJQUFLLElBQUl2L0UsS0FBTzBDLEVBQ1osR0FBS3BCLEVBQUswakMsT0FBT3RpQyxFQUFTMUMsR0FBMUIsQ0FXQSxHQVZBbXJFLEVBQVN6b0UsRUFBUTFDLEdBQ2pCdXdDLEVBQVMraEIsRUFBa0J0eUQsSUFDdEJtckUsRUFBTzUyQyxRQUFVNDJDLEVBQU8xK0IsU0FBVzhELEdBQ3BDM3ZDLEtBQUtpNUIsV0FBVzc1QixFQUFLLEtBQU11d0MsR0FFSyxtQkFBekI0NkIsRUFBTzVzQyxlQUFnRSxtQkFBekI0c0MsRUFBT3JzQyxnQkFDNURsK0IsS0FBS2k1QixXQUFXNzVCLEVBQUssS0FBTXV3QyxHQUMzQjN2QyxLQUFLNmdFLHNCQUFzQmw0RCxLQUFLNGhFLEVBQU81c0MsY0FBY3QrQixLQUFLVyxPQUMxREEsS0FBSzhnRSxzQkFBc0JuNEQsS0FBSzRoRSxFQUFPcnNDLGNBQWM3K0IsS0FBS1csUUFFMURvRyxFQUFHd0osTUFBTXRDLFFBQVFpOUQsRUFBT254QyxVQUFXLENBQ25DLE1BQU1BLEVBQVdteEMsRUFBT254QyxTQUN4QnA1QixLQUFLaTVCLFdBQVc3NUIsRUFBSyxLQUFNdXdDLEdBQzNCM3ZDLEtBQUsrZ0UsYUFBYTU0RCxLQUFPbkksS0FBSytnRSxhQUFhNTRELEtBQUsyUyxPQUFPc2UsR0FDdkR1bEQsRUFBaUJoMkUsS0FBS3ZKLEdBQ3RCLElBQUssSUFBSWdKLEVBQU0sRUFBR0ssRUFBTzJ3QixFQUFTOXlCLE9BQVE4QixFQUFNSyxFQUFNTCxJQUNsRHBJLEtBQUsrZ0UsYUFBYUcsVUFBVTluQyxFQUFTaHhCLEdBQUtzRixlQUFpQnRPLEVBR25FLEdBQUltckUsRUFBT25nQyxZQUFhLENBQ3BCLE1BQU0zTyxFQUFPOHVDLEVBQU9uZ0MsY0FDcEJzMEMsRUFBYS8xRSxLQUFLLElBQU04eUIsRUFBSzc2QixXQUM3QlosS0FBSzJnRSxnQkFBZ0JyNEQsSUFBSW16QixFQUFLNzZCLFdBQWE2NkIsRUFBSzRPLE9BQU9ockMsS0FBS1csT0FJcEVBLEtBQUsyZ0UsZ0JBQWdCOVYsTUFBUTZ6QixFQUFhL3VFLFdBQzFDM1AsS0FBSytnRSxhQUFhQyxZQUFjaGhFLEtBQUsrZ0UsYUFBYTU0RCxLQUFLOEosS0FBSyxLQUM1RGpTLEtBQUsrZ0UsYUFBYTdhLE9BQVMsSUFBSStLLEVBQVEsTUFBU2p4RCxLQUFLK2dFLGFBQWE1NEQsS0FBSzhKLEtBQUssTUFBUSxLQUFPLEtBQU0sS0FDakdqUyxLQUFLK2dFLGFBQWFFLGFBQWUsSUFBSWhRLEVBQVEsTUFBcUMsSUFBNUIwdEIsRUFBaUJyNEUsT0FBZSxJQUFNcTRFLEVBQWlCMXNFLEtBQUssTUFBUSxLQUFNLEtBR2hJalMsS0FBSzJoRSxVQUFVYSxlQUFpQm5pRSxFQUFRbUIsUUFBUXkwRCxRQUFRbjFELE1BQU1zbkMsUUFDOURwb0MsS0FBSyt6RCxhQUFlMXpELEVBQVFtQixRQUFRMGpDLFlBQ3BDbGxDLEtBQUtvMEQsYUFBZS96RCxFQUFRbUIsUUFBUTY2RCxZQUNwQ3I4RCxLQUFLdWdFLG1CQUFxQnZnRSxLQUFLbzBELGFBQWE5dkQsY0FBYyxVQUcxRHRFLEtBQUswekIsUUN0NkxGLFNBQVV0ekIsRUFBTXcrRSxHQUMzQixNQUFNeDRFLEVBQUtoRyxFQUFLZ0csR0FDVjFGLEVBQU9OLEVBQUtNLEtBQ1ptK0UsRUFBWXorRSxFQUFLbUMsUUFBUTgwRCxzQkFDL0IsSUFBSTVHLEVBQVNyd0QsRUFBS0MsUUFBUW1CLFFBQ3RCZ2lCLEVBQU9wakIsRUFBS0MsUUFBUW84RCxLQUFLajVDLEtBQ3pCQyxFQUFPcmpCLEVBQUtDLFFBQVFvOEQsS0FBS2g1QyxLQUV6QnE3RCxFQUFZLEtBQ1pDLEVBQWEsRUFDYkMsRUFBUSxHQUVaLFNBQVNDLElBQ0wsTUFBTS8yRSxFQUFPODJFLEVBQU1ELEdBQ25CdHVCLEVBQU92L0IsUUFBUTlzQixVQUFZOEQsRUFBSzg4QyxTQUVoQzVrRCxFQUFLZ3pCLFNBQVMxeUIsRUFBSzZ6QyxnQkFBZ0Jyc0MsRUFBS3RJLEVBQUVpd0IsS0FBTTRnQyxFQUFPdi9CLFNBQVVocEIsRUFBS3RJLEVBQUV1dEQsT0FBUXpzRCxFQUFLNnpDLGdCQUFnQnJzQyxFQUFLeEcsRUFBRW11QixLQUFNNGdDLEVBQU92L0IsU0FBVWhwQixFQUFLeEcsRUFBRXlyRCxRQUMxSS9zRCxFQUFLd0MsUUFFRG84RSxFQUFNMTRFLFFBQVUsR0FDWmtkLEdBQU1BLEVBQUtuTixhQUFhLFlBQVksR0FDcENvTixHQUFNQSxFQUFLcE4sYUFBYSxZQUFZLElBRXJCLElBQWYwb0UsR0FDSXY3RCxHQUFNQSxFQUFLbk4sYUFBYSxZQUFZLEdBQ3BDb04sR0FBTUEsRUFBS3lPLGdCQUFnQixhQUN4QjZzRCxJQUFlQyxFQUFNMTRFLE9BQVMsR0FDakNrZCxHQUFNQSxFQUFLME8sZ0JBQWdCLFlBQzNCek8sR0FBTUEsRUFBS3BOLGFBQWEsWUFBWSxLQUVwQ21OLEdBQU1BLEVBQUswTyxnQkFBZ0IsWUFDM0J6TyxHQUFNQSxFQUFLeU8sZ0JBQWdCLGFBSXZDOXhCLEVBQUswekIsaUJBQ0wxekIsRUFBSzY4RSxtQkFDTDc4RSxFQUFLaThFLGdCQUNMajhFLEVBQUtnMkUsd0JBR0x3SSxJQUdKLFNBQVNNLElBQ0w5K0UsRUFBSzY4RSxtQkFDTCxNQUFNenNELEVBQVVpZ0MsRUFBT3YvQixRQUFROXNCLFVBQy9CLElBQUtvc0IsR0FBY3d1RCxFQUFNRCxJQUFldnVELElBQVl3dUQsRUFBTUQsR0FBWS81QixTQUFXLE9BRWpGKzVCLElBQ0EsTUFBTTl1QyxFQUFRN3ZDLEVBQUt1aEUsVUFBVVcsT0FFekIwYyxFQUFNMTRFLE9BQVN5NEUsSUFDZkMsRUFBUUEsRUFBTXR0RSxNQUFNLEVBQUdxdEUsR0FDbkJ0N0QsR0FBTUEsRUFBS3BOLGFBQWEsWUFBWSxJQVV4QzJvRSxFQUFNRCxHQVBMOXVDLEVBT21CLENBQ2hCK1UsU0FBVXgwQixFQUNWNXdCLEVBQUcsQ0FDQ2l3QixLQUFNbnZCLEVBQUsrekMsWUFBWXhFLEVBQU1ZLGVBQWdCLEtBQU0sTUFDbkRzYyxPQUFRbGQsRUFBTWdCLGFBRWxCdnZDLEVBQUcsQ0FDQ211QixLQUFNbnZCLEVBQUsrekMsWUFBWXhFLEVBQU1jLGFBQWMsS0FBTSxNQUNqRG9jLE9BQVFsZCxFQUFNaUIsWUFkRixDQUNoQjhULFNBQVV4MEIsRUFDVjV3QixFQUFHLENBQUVpd0IsS0FBTSxDQUFDLEVBQUcsR0FBSXM5QixPQUFRLENBQUMsRUFBRyxJQUMvQnpyRCxFQUFHLENBQUVtdUIsS0FBTSxFQUFHczlCLE9BQVEsSUFnQlgsSUFBZjR4QixHQUFvQnY3RCxHQUFNQSxFQUFLME8sZ0JBQWdCLFlBRW5EOXhCLEVBQUtpOEUsZ0JBRUx1QyxJQUdKLE1BQU8sQ0FJSEksTUFBT0EsRUFTUHIyRSxLQUFNLFNBQVV3MkUsR0FDWi80RSxFQUFHNjZCLFdBQVc3Z0MsRUFBS2cyRSxzQkFBc0IvMkUsS0FBS2UsSUFDOUMsTUFBTWcvRSxFQUF3QixpQkFBVkQsRUFBc0JBLEVBQVEsRUFBSUEsRUFBUSxFQUFPQSxFQUFZTixFQUFKLEVBRXhFTyxJQUFRTixJQUNUMTRFLEVBQUdpNUUsYUFBYVAsR0FDWE0sR0FNVE4sRUFBWTE0RSxFQUFHNjZCLFlBQVcsV0FDdEI3NkIsRUFBR2k1RSxhQUFhUCxHQUNoQkEsRUFBWSxLQUNaSSxNQUNERSxHQVRLRixLQWVaMTdELEtBQU0sV0FDRXU3RCxFQUFhLElBQ2JBLElBQ0FFLE1BT1J4N0QsS0FBTSxXQUNFdTdELEVBQU0xNEUsT0FBUyxFQUFJeTRFLElBQ25CQSxJQUNBRSxNQVFSSyxHQUFJLFNBQVVqdUUsR0FDVjB0RSxFQUFhMXRFLEVBQVEsRUFBSzJ0RSxFQUFNMTRFLE9BQVMsRUFBSytLLEVBQzlDNHRFLEtBT0pNLGdCQUFpQixXQUNiLE9BQU9SLEdBTVgva0MsTUFBTyxTQUFVd2xDLEdBQ1RoOEQsR0FBTUEsRUFBS25OLGFBQWEsWUFBWSxHQUNwQ29OLEdBQU1BLEVBQUtwTixhQUFhLFlBQVksR0FDeENqVyxFQUFLdWhFLFVBQVVDLFdBQVksRUFDdkJ4aEUsRUFBS0MsUUFBUW84RCxLQUFLbDdDLE1BQU1uaEIsRUFBS0MsUUFBUW84RCxLQUFLbDdDLEtBQUtsTCxhQUFhLFlBQVksR0FFNUUyb0UsRUFBTS8xRSxPQUFPLEdBQ2I4MUUsRUFBYSxFQUdiQyxFQUFNRCxHQUFjLENBQ2hCLzVCLFNBQVU1a0QsRUFBSzQxRSxhQUFZLEdBQzNCcDJFLEVBQUcsQ0FDQ2l3QixLQUFNLENBQUMsRUFBRyxHQUNWczlCLE9BQVEsR0FFWnpyRCxFQUFHLENBQ0NtdUIsS0FBTSxDQUFDLEVBQUcsR0FDVnM5QixPQUFRLElBSVhxeUIsR0FBbUJaLEtBTzVCckksb0JBQXFCLFdBQ2pCOWxCLEVBQVNyd0QsRUFBS0MsUUFBUW1CLFFBQ3RCZ2lCLEVBQU9wakIsRUFBS0MsUUFBUW84RCxLQUFLajVDLEtBQ3pCQyxFQUFPcmpCLEVBQUtDLFFBQVFvOEQsS0FBS2g1QyxLQUVOLElBQWZzN0QsR0FDSXY3RCxHQUFNQSxFQUFLbk4sYUFBYSxZQUFZLEdBQ3BDb04sR0FBUXM3RCxJQUFlQyxFQUFNMTRFLE9BQVMsR0FBR21kLEVBQUtwTixhQUFhLFlBQVksR0FDM0VqVyxFQUFLdWhFLFVBQVVDLFdBQVksRUFDdkJ4aEUsRUFBS0MsUUFBUW84RCxLQUFLbDdDLE1BQU1uaEIsRUFBS0MsUUFBUW84RCxLQUFLbDdDLEtBQUtsTCxhQUFhLFlBQVksSUFDckUwb0UsSUFBZUMsRUFBTTE0RSxPQUFTLEdBQ2pDbWQsR0FBTUEsRUFBS3BOLGFBQWEsWUFBWSxJQVFoRG9wRSxTQUFVLFdBQ0ZYLEdBQVcxNEUsRUFBR2k1RSxhQUFhUCxHQUMvQkUsRUFBUSxPRHd0TE9VLENBQVMxL0UsS0FBTUEsS0FBSzIvRSx1QkFBdUJ0Z0YsS0FBS1csT0FHL0RBLEtBQUttcUIsVUFBVSxDQUFDZzBDLElBR1o1N0QsRUFBUW9rRCxTQUNSM21ELEtBQUs4K0MsSUFBTXorQyxFQUFRbUIsUUFBUWdxRCxhQUFhMUUsZ0JBQ3hDem1ELEVBQVFtQixRQUFRMHZCLFFBQVVseEIsS0FBSzgrQyxJQUFJcDdDLEtBQy9CbkIsRUFBUSt6RCxjQUFjN0YsU0FBUXB3RCxFQUFRbUIsUUFBUTB2QixRQUFRcHdCLE1BQU1zbkMsUUFBVTdsQyxFQUFRK3pELGNBQWM3RixRQUN6RSxTQUFuQmx1RCxFQUFRZ2EsU0FBbUJ2YyxLQUFLNC9FLFlBQWM1L0UsS0FBSzgrQyxJQUFJcDdDLE9BRy9EMUQsS0FBSzYvRSxpQkFBaUJwQyxFQUFRQyxJQU9sQ2UsZ0JBQWlCLFdBQ2J6K0UsS0FBSzgrRCx3QkFBMEJ6K0QsRUFBUW1CLFFBQVFzNUQsWUFBWWx5RCxpQkFBaUIsc0dBQzVFNUksS0FBSysrRCx3QkFBMEIxK0QsRUFBUW1CLFFBQVFzNUQsWUFBWWx5RCxpQkFBaUIscUdBRTVFLE1BQU02ekQsRUFBT3A4RCxFQUFRbzhELEtBQ2YwRSxFQUFhbmhFLEtBQUttaEUsV0FDeEJBLEVBQVdvYyxPQUFTOWdCLEVBQUt0NkMsT0FDekJnL0MsRUFBV21jLFFBQVU3Z0IsRUFBS3I2QyxRQUMxQisrQyxFQUFXNStELEVBQVFpMUQsU0FBUzcxQyxLQUFLa3JCLGVBQWlCNHZCLEVBQUs5NkMsS0FDdkR3L0MsRUFBVzUrRCxFQUFRaTFELFNBQVM1ckQsVUFBVWloQyxlQUFpQjR2QixFQUFLN3dELFVBQzVEdTFELEVBQVc1K0QsRUFBUWkxRCxTQUFTNTFDLE9BQU9pckIsZUFBaUI0dkIsRUFBSzc2QyxPQUN6RHUvQyxFQUFXNStELEVBQVFpMUQsU0FBUzMxQyxPQUFPZ3JCLGVBQWlCNHZCLEVBQUs1NkMsT0FDekRzL0MsRUFBVzUrRCxFQUFRaTFELFNBQVNDLElBQUk1cUIsZUFBaUI0dkIsRUFBSzM2QyxVQUN0RHEvQyxFQUFXNStELEVBQVFpMUQsU0FBU0UsSUFBSTdxQixlQUFpQjR2QixFQUFLMTZDLFlBRXREL2hCLEtBQUt5aEUsaUJBQW1CLENBQ3BCcCtDLFdBQVlvNUMsRUFBS3A1QyxXQUNqQkMsV0FBWW01QyxFQUFLbjVDLFdBQ2pCQyxTQUFVazVDLEVBQUtsNUMsVUFHbkJ2akIsS0FBS29qRSxxQkFTVHljLGlCQUFrQixTQUFVcEMsRUFBUUMsR0FDaENyOUUsRUFBUW1CLFFBQVEwdkIsUUFBUTlzQixVQUFZcTVFLEVBQVNDLEVBQVkxOUUsS0FBS2czRSwwQkFBK0MsaUJBQWQwRyxFQUF5QkEsRUFBWSxjQUFjLzdFLEtBQUt0QixFQUFRbUIsUUFBUXEwRCxjQUFjMWtDLFVBQVk5d0IsRUFBUW1CLFFBQVFxMEQsY0FBYy8yRCxNQUFRdUIsRUFBUW1CLFFBQVFxMEQsY0FBY3p4RCxZQUFjLEtBT3ZSZ3lFLHNCQUF1QixXQUNuQnAyRSxLQUFLMjNFLG9CQUNMMzNFLEtBQUsyMkUscUJBT1RnSix1QkFBd0IsV0FDaEIzL0UsS0FBS3F1QyxVQUFVbzJCLEVBQU1pQyxtQkFDekIxbUUsS0FBSzJoRSxVQUFVQyxXQUFZLEVBQ3ZCdmhFLEVBQVFvOEQsS0FBS2w3QyxNQUFNbGhCLEVBQVFvOEQsS0FBS2w3QyxLQUFLMlEsZ0JBQWdCLFlBRXJENEgsRUFBVWdtRCxVQUFVaG1ELEVBQVVnbUQsU0FBUzkvRSxLQUFLZzJFLGFBQVksR0FBT2gyRSxNQUNyQixVQUExQ0ssRUFBUW1CLFFBQVE2ZixRQUFRdmdCLE1BQU1DLFNBQXFCMGpFLEVBQU1nUix1QkFPakVrQyxrQkFBbUIsV0FDWDMzRSxLQUFLNC9FLFlBQ0x4NUUsRUFBRzY2QixZQUFXLFdBQ1YsTUFBTTVQLEVBQUlqeEIsRUFBS3cvRSxZQUFZdjRFLGFBQzNCaEgsRUFBUW1CLFFBQVFncUQsYUFBYTFxRCxNQUFNeWIsT0FBUzhVLEVBQUksS0FDM0Mzd0IsRUFBSzBqRCwyQkFBMkJoa0QsRUFBSzIvRSxxQkFBcUIxdUQsRUFBRyxTQUU5RDN3QixFQUFLMGpELDJCQUNiaGtELEVBQUsyL0UscUJBQXFCMS9FLEVBQVFtQixRQUFRZ3FELGFBQWFua0QsYUFBYyxPQUk3RTA0RSxxQkFBc0IsU0FBVTF1RCxFQUFHMnVELEdBQy9CM3VELEdBQVcsSUFBUEEsRUFBWTJ1RCxFQUFvQkMsZUFBaUJELEVBQW9CQyxjQUFjLEdBQUtELEVBQW9CQyxjQUFjLEdBQUdDLFVBQWFGLEVBQW9CRyxZQUFZNWpFLE9BQVN2YyxLQUFLNDlELHFCQUF5QnZzQyxFQUNqTnJ4QixLQUFLMjlELGdCQUFrQnRzQyxJQUNpQixtQkFBN0J5SSxFQUFVc21ELGdCQUErQnRtRCxFQUFVc21ELGVBQWUvdUQsRUFBR3J4QixLQUFLMjlELGNBQWV2OUQsRUFBTTQvRSxHQUMxR2hnRixLQUFLMjlELGNBQWdCdHNDLElBUTdCc2xELGtCQUFtQixXQUNmLEdBQUkzMkUsS0FBSyt6RCxhQUFjLENBQ25CLEdBQUkvekQsS0FBSzJoRSxVQUFVRSxXQUVmLFlBREE3aEUsS0FBSyt6RCxhQUFhanpELE1BQU1DLFFBQVUsUUFJdEMsTUFBTW13QixFQUFVN3dCLEVBQVFtQixRQUFRMHZCLFNBQzNCeHdCLEVBQUtzd0MsbUJBQW1COWYsRUFBUTNyQixjQUFnQjJyQixFQUFRNXNCLGNBQWM1RCxFQUFLb2tELHlCQUEyQjV6QixFQUFRNmxDLFVBQVV6bEQsTUFBTSxRQUFVLElBQUloTCxPQUFTLEVBQ3RKdEcsS0FBSyt6RCxhQUFhanpELE1BQU1DLFFBQVUsT0FFbENmLEtBQUsrekQsYUFBYWp6RCxNQUFNQyxRQUFVLFVBVzlDcy9FLGtCQUFtQixTQUFVQyxHQUN6QixHQUFJdGdGLEtBQUsrZ0UsYUFBYUUsYUFBYXQvRCxLQUFLM0IsS0FBS2l6Qix1QkFBd0IsT0FFckUsTUFBTWdkLEVBQVFqd0MsS0FBS2t3QyxXQUNiODRCLEVBQVkvNEIsRUFBTXUyQix3QkFDbEJNLEVBQVc3MkIsRUFBTVksZUFDakJnK0IsRUFBVW51RSxFQUFLNHdDLHNCQUFzQjAzQixFQUFXLE1BQ3RELElBQUlyQixFQUFXeGEsRUFBUXI1QyxFQUV2QixNQUFNODRELEVBQWdCbHNFLEVBQUtpNUIsaUJBQWlCcXZDLEVBQVd0b0UsRUFBSzRuQyxhQUM1RCxJQUFJc2tDLEdBQWtCbHNFLEVBQUtxcEQsUUFBUTZpQixHQUFuQyxDQUVPLEdBQTJCLElBQXZCNUQsRUFBVXJ5RCxVQUE4RCxTQUE1Q3F5RCxFQUFVbm5FLGFBQWEsaUJBQTZCLENBQ3ZGLElBQUlteUMsRUFBS2cxQixFQUFVOXVDLG1CQUduQixPQUZLeDVCLEVBQUs2L0IsZ0JBQWdCeVQsS0FBS0EsRUFBS2gwQyxLQUFLby9CLGdCQUFnQjRwQyxFQUFXem1FLEVBQVFnMUQsa0JBQzVFdjNELEtBQUtvekIsU0FBUzRnQixFQUFHaCtCLFdBQVksRUFBR2crQixFQUFHaCtCLFdBQVksR0FJbkQsSUFBS3RWLEVBQUt1L0IscUJBQXFCNm1DLEtBQWFwbUUsRUFBSytvQixhQUFhcTlDLEtBQWVwbUUsRUFBSzRuQyxZQUFZdytCLEVBQVNsbkQsU0FBU3F3QixFQUFNZ0IsZ0JBQWlCdndDLEVBQUs0bkMsWUFBWXcrQixFQUFTbG5ELFNBQVNxd0IsRUFBTWdCLFlBQWMsSUFBOUwsQ0FDQSxHQUFJdndDLEVBQUtpNUIsaUJBQWlCcXZDLEVBQVd0b0UsRUFBS3cvQixtQkFBb0IsT0FBTyxLQUVyRSxHQUFJMnVDLEVBZ0JBLE9BZkEvNkQsRUFBU3BULEVBQUtDLGNBQWMyL0UsR0FBYy85RSxFQUFRZzFELFlBQ2xEempELEVBQU8xUCxVQUFZeXFFLEVBQVF6cUUsVUFDTSxJQUE3QjBQLEVBQU8yQyxXQUFXblEsU0FBY3dOLEVBQU8xUCxVQUFZMUQsRUFBSzZxQyxnQkFFNURzakMsRUFBUXpxRSxVQUFZMFAsRUFBT3NDLFVBQzNCdEMsRUFBUys2RCxFQUFRNzRELFdBQ2pCMnhELEVBQVlqbkUsRUFBS2t6QyxrQkFBa0I5L0IsRUFBUSxNQUFNc2dCLEdBRTVDdXpDLElBQ0RBLEVBQVlqbkUsRUFBSzRxQyxlQUFlNXFDLEVBQUs2cUMsZ0JBQ3JDejNCLEVBQU8rckIsYUFBYThuQyxFQUFXN3pELEVBQU9rQyxhQUcxQ20zQyxFQUFTd2EsRUFBVXBpRSxZQUFZZSxZQUMvQnRHLEtBQUtvekIsU0FBU3UwQyxFQUFXeGEsRUFBUXdhLEVBQVd4YSxHQUloRCxHQUFHenNELEVBQUt1L0IscUJBQXFCK29DLElBQWVBLEVBQVV2eUQsV0FBV25RLFFBQVUsRUFBSSxDQUMzRSxJQUFJbWdFLEVBQUssS0FTVCxPQVJvQyxJQUFoQ3VDLEVBQVV2eUQsV0FBV25RLFFBQWdCNUYsRUFBS3NwRCxRQUFRZ2YsRUFBVWh6RCxZQUM1RHl3RCxFQUFLdUMsRUFBVWh6RCxZQUVmeXdELEVBQUsvbEUsRUFBSzRxQyxlQUFlNXFDLEVBQUs2cUMsZ0JBQzlCeTlCLEVBQVUvbkUsWUFBWXdsRSxTQUcxQnptRSxLQUFLb3pCLFNBQVNxekMsRUFBSSxFQUFHQSxFQUFJLEdBSTdCLElBU0ksR0FSMkIsSUFBdkJ1QyxFQUFVcnlELFdBQ1Y3QyxFQUFTcFQsRUFBS0MsY0FBYzIvRSxHQUFjLzlFLEVBQVFnMUQsWUFDbER5UixFQUFVdi9ELFdBQVdvMkIsYUFBYS9yQixFQUFRazFELEdBQzFDbDFELEVBQU83UyxZQUFZK25FLElBR25CdG9FLEVBQUtzcEQsUUFBUWwyQyxFQUFPMDNCLGNBQWM5cUMsRUFBS3NwQixXQUFXbFcsRUFBTzAzQixhQUN6RDlxQyxFQUFLc3BELFFBQVFsMkMsRUFBTzRzQixrQkFBa0JoZ0MsRUFBS3NwQixXQUFXbFcsRUFBTzRzQixpQkFDN0RoZ0MsRUFBS3NwRCxRQUFRMmQsR0FBWSxDQUN6QixNQUFNOEUsRUFBWS9yRSxFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxnQkFDM0NvOEIsRUFBVWwrRCxXQUFXbzJCLGFBQWE0c0MsRUFBVzlFLEdBQzdDQSxFQUFZOEUsR0FFbEIsTUFBTy9xRSxHQUNMMUIsS0FBS2ttRSxZQUFZLGVBQWUsRUFBUW9hLEdBQWMvOUUsRUFBUWcxRCxZQUM5RHYzRCxLQUFLd25FLGNBQ0x4bkUsS0FBS3NtRSxlQUtULEdBRkk1bEUsRUFBS3NwRCxRQUFRbDJDLEVBQU8wM0IsY0FBYzlxQyxFQUFLc3BCLFdBQVdsVyxFQUFPMDNCLGFBQ3pEOXFDLEVBQUtzcEQsUUFBUWwyQyxFQUFPNHNCLGtCQUFrQmhnQyxFQUFLc3BCLFdBQVdsVyxFQUFPNHNCLGlCQUM3RGhnQyxFQUFLc3BELFFBQVEyZCxHQUFZLENBQ3pCLE1BQU04RSxFQUFZL3JFLEVBQUs0cUMsZUFBZTVxQyxFQUFLNnFDLGdCQUMzQ284QixFQUFVbCtELFdBQVdvMkIsYUFBYTRzQyxFQUFXOUUsR0FDN0NBLEVBQVk4RSxFQUdoQnpzRSxLQUFLMnRDLFdBQWEsS0FDbEIzdEMsS0FBS29tRSxpQkFTVG1hLGdCQUFpQixTQUFVdnNDLEVBQUkwcEMsR0FDM0IxOUUsS0FBS0ssUUFBVUEsRUFBVTY3RCxFQUFTbG9CLEVBQUc2aEIsY0FBZTcxRCxLQUFLd2dGLGdCQUFnQnhzQyxHQUFLenhDLEdBQzlFdkMsS0FBS3lnRSxzQkFBdUIsRUFDNUJ6Z0UsS0FBS3lnRixhQUFZLEVBQU0vQyxJQVMzQitDLFlBQWEsU0FBVWhELEVBQVFDLEdBRTNCMTlFLEtBQUt3OUUsTUFBTUMsRUFBUUMsR0FDbkJqWixFQUFNaWMsWUFDTjFnRixLQUFLcThFLGdCQUNMNVgsRUFBTWtjLG9CQUNObGMsRUFBTW1jLGtCQUdOdmdGLEVBQVFtQixRQUFRNmYsUUFBUXZnQixNQUFNaXNCLFdBQWEsR0FFM0MsTUFBTWcrQixFQUFPeG9ELEVBQVErMEQsZUFDckIsSUFBSyxJQUFJNlksS0FBS3BsQixFQUNWMXFELEVBQVFtQixRQUFRMHZCLFFBQVE3YSxhQUFhODVELEVBQUdwbEIsRUFBS29sQixJQUdqRG53RSxLQUFLaTlFLG1CQUNMajlFLEtBQUt3Z0UscUJBQXNCLEVBQzNCeGdFLEtBQUt5Z0Usc0JBQXVCLEVBRTVCemdFLEtBQUswekIsUUFBUXNtQixPQUFNLEdBRW5CNXpDLEVBQUc2NkIsWUFBVyxXQUNnQyxtQkFBL0I3Z0MsRUFBS2cyRSx3QkFHWjNSLEVBQU1vYyxpQkFBaUJwYyxFQUFNb2MsZ0JBQWdCQyxRQUFRemdGLEVBQVFtQixRQUFRZ3FELGNBQ3JFaVosRUFBTXNjLGtCQUFrQnRjLEVBQU1zYyxpQkFBaUJELFFBQVF6Z0YsRUFBUW1CLFFBQVFreUQsZ0JBRTNFdHpELEVBQUtnMkUsd0JBRTJCLG1CQUFyQnQ4QyxFQUFVaUQsUUFBdUJqRCxFQUFVaUQsT0FBTzM4QixFQUFNcTlFLFFBVTNFK0MsZ0JBQWlCLFNBQVVRLEdBQ3ZCLE1BQU8sQ0FDSHp0QixLQUFNeXRCLEVBQVUvcUIsUUFDaEJ6QyxVQUFXd3RCLEVBQVV2L0UsU0FDckJneUQsU0FBVXV0QixFQUFVMy9ELFFBQ3BCcXlDLGVBQWdCc3RCLEVBQVV0dEIsZUFDMUJDLFVBQVdxdEIsRUFBVXJ0QixVQUNyQkMsWUFBYW90QixFQUFVbHJCLFdBQ3ZCakMsYUFBY210QixFQUFVeDFCLGFBQ3hCc0ksVUFBV2t0QixFQUFVNS9ELEtBQ3JCMnlDLGFBQWNpdEIsRUFBVTk3QyxZQUN4Qjh1QixhQUFjZ3RCLEVBQVUxdUIsWUFDeEIyQixZQUFhK3NCLEVBQVV6dUIsV0FDdkI0QixhQUFjNnNCLEVBQVVydUIsWUFDeEJ1QixhQUFjOHNCLEVBQVV2dUIsWUFDeEJudkQsU0FBVTA5RSxFQUFVNWtCLFFBQ3BCaEksYUFBYzRzQixFQUFVM2tCLFlBQ3hCaEksZUFBZ0Iyc0IsRUFBVTFrQixjQUMxQmhJLGVBQWdCMHNCLEVBQVV6a0IsY0FDMUJoSSxZQUFheXNCLEVBQVV4a0IsaUJBQ3ZCaEksYUFBY3dzQixFQUFVeHNCLGFBQ3hCQyxPQUFRdXNCLEVBQVV2c0IsVUFReEJnUSxFQUFRLENBQ1Z3YyxnQkFBZ0IsRUFDaEJDLGlCQUFrQixLQUNsQm5FLHVCQUF3QixVQUN4QkYsc0JBQXVCLEtBQ3ZCbG9CLG1CQUFvQixLQUNwQndzQixtQkFBb0IsSUFBSS82RSxFQUFHMkgsT0FBTyxzQkFDbENxekUsa0JBQW1CLElBQUloN0UsRUFBRzJILE9BQU8seUJBQ2pDc3pFLGdCQUFpQixJQUFJajdFLEVBQUcySCxPQUFPLGlFQUMvQnV6RSxzQkFBdUIsSUFBSWw3RSxFQUFHMkgsT0FBTyx5REFDckN3ekUsZ0JBQWlCLElBQUluN0UsRUFBRzJILE9BQU8sS0FBTzNILEVBQUc3SCxPQUFPOEgsS0FBSzlELEVBQVFzMUQsY0FBYzVsRCxLQUFLLEtBQU8sS0FBTSxLQUM3RnV2RSxtQkFBb0IsSUFBSXA3RSxFQUFHMkgsT0FBT3JOLEVBQUs2cUMsZUFBaUIsSUFBSyxJQUM3RGsyQyxpQkFBa0IsQ0FDZEMsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxJQUFLLElBQ0xDLElBQUssS0FHVEMsaUJBQWtCLFNBQVU3L0UsRUFBUzZjLEdBQ2pDLElBQUkzVixFQUFVLEtBQ2QsTUFBTTQ0RSxFQUFTM2QsRUFBTWdkLGlCQUFpQm4vRSxHQUV0QyxPQUFROC9FLEdBQ0osSUFBSyxJQUNENTRFLEVBQVUsWUFDVixNQUNKLElBQUssS0FDaUQsSUFBOUNqSCxFQUFRaTNELGlCQUFpQjl3RCxRQUFRLFVBQ2pDYyxFQUFVLFFBRWQsTUFDSixJQUFLLElBQ0cyVixJQUF5RCxJQUFoRDVjLEVBQVFpM0QsaUJBQWlCOXdELFFBQVEsVUFDMUNjLEVBQVUsU0FDRjJWLElBQXVELElBQTlDNWMsRUFBUWkzRCxpQkFBaUI5d0QsUUFBUSxVQUNsRGMsRUFBVSxRQUVkLE1BQ0osSUFBSyxLQUNzRCxJQUFuRGpILEVBQVFpM0QsaUJBQWlCOXdELFFBQVEsZUFDakNjLEVBQVUsYUFFZCxNQUNKLElBQUssS0FDbUQsSUFBaERqSCxFQUFRaTNELGlCQUFpQjl3RCxRQUFRLFlBQ2pDYyxFQUFVLFVBRWQsTUFDSixJQUFLLEtBQ2lELElBQTlDakgsRUFBUWkzRCxpQkFBaUI5d0QsUUFBUSxVQUU3QmMsRUFEQTJWLEVBQ1UsT0FFQSxRQUdsQixNQUNKLElBQUssS0FDaUQsSUFBOUM1YyxFQUFRaTNELGlCQUFpQjl3RCxRQUFRLFVBQ2pDYyxFQUFVLFFBRWQsTUFDSixJQUFLLEtBQ21ELElBQWhEakgsRUFBUWkzRCxpQkFBaUI5d0QsUUFBUSxZQUNqQ2MsRUFBVWpILEVBQVEwdEIsSUFBTSxTQUFXLFdBRXZDLE1BQ0osSUFBSyxLQUNtRCxJQUFoRDF0QixFQUFRaTNELGlCQUFpQjl3RCxRQUFRLFlBQ2pDYyxFQUFVakgsRUFBUTB0QixJQUFNLFVBQVksVUFLaEQsT0FBS3ptQixHQUVMcEosRUFBS3UxRSxlQUFldjFFLEVBQUsrZ0UsV0FBVzMzRCxHQUFVQSxJQUN2QyxLQUhnQjQ0RSxHQU0zQjFiLGlCQUFrQixXQUNkLElBQUk5a0IsRUFBZ0J4aEQsRUFBSzRxQixtQkFDekIsR0FBSTQyQixJQUFrQnhoRCxFQUFLdXRDLFdBQVksT0FDdkN2dEMsRUFBS3V0QyxXQUFhaVUsRUFFbEIsTUFBTXMwQixFQUFZM3pFLEVBQVEwdEIsSUFBTSxjQUFnQixhQUMxQ2t4QyxFQUFhL2dFLEVBQUsrZ0UsV0FDbEJraEIsRUFBZTVkLEVBQU04YyxnQkFDckJlLEVBQWtCLEdBQ2xCbGdCLEVBQWUsR0FFZjFCLEVBQWdCdGdFLEVBQUtzZ0UsY0FDckJudEIsRUFBT210QixFQUFjcDZELE9BQzNCLElBQUk2cUIsRUFBVyxHQUVmLEtBQU95d0IsRUFBYzVyQyxZQUNqQjRyQyxFQUFnQkEsRUFBYzVyQyxXQUdsQyxJQUFLLElBQUl4VSxFQUFVb2dELEdBQWdCbGhELEVBQUsrb0IsYUFBYWpvQixJQUM1Q0EsRUFEc0RBLEVBQVVBLEVBQVFpSSxXQUU3RSxHQUF5QixJQUFyQmpJLEVBQVFtVixXQUFrQmpXLEVBQUtzcEQsUUFBUXhvRCxHQUEzQyxDQUtBLEdBSkEydkIsRUFBVzN2QixFQUFRMnZCLFNBQVMwYixjQUM1QnUxQixFQUFhejVELEtBQUt3b0IsSUFHYi93QixFQUFLcS9ELFdBQ04sSUFBSyxJQUFXcmhFLEVBQVBGLEVBQUksRUFBU0EsRUFBSXExQyxFQUFNcjFDLElBQzVCRSxFQUFPc2lFLEVBQWN4aUUsSUFDa0IsSUFBbkNva0YsRUFBZ0I1NUUsUUFBUXRLLElBQWdCMEQsRUFBUTFELEdBQU11MUIsT0FBTzMxQixLQUFLb0MsRUFBTW9CLElBQ3hFOGdGLEVBQWdCMzVFLEtBQUt2SyxHQUs3QnNDLEVBQUs2L0IsZ0JBQWdCLytCLEtBRXVCLElBQXhDOGdGLEVBQWdCNTVFLFFBQVEsWUFBcUJ5NEQsRUFBV21jLFVBQVk1OEUsRUFBS3lyRCxvQkFBb0JnVixFQUFXbWMsV0FDcEc1OEUsRUFBSzAvQixXQUFXNStCLElBQWFBLEVBQVFWLE1BQU1vMUUsSUFBY3gxRSxFQUFLc2dDLFVBQVV4L0IsRUFBUVYsTUFBTW8xRSxHQUFZLEdBQUssS0FDdkdvTSxFQUFnQjM1RSxLQUFLLFdBQ3JCdzRELEVBQVdtYyxRQUFRcHJELGdCQUFnQixjQUtBLElBQXZDb3dELEVBQWdCNTVFLFFBQVEsV0FBb0J5NEQsRUFBV29jLFNBQVc3OEUsRUFBS3lyRCxvQkFBb0JnVixFQUFXb2MsVUFDdEcrRSxFQUFnQjM1RSxLQUFLLFVBQ2pCakksRUFBSzAvQixXQUFXNStCLEtBQWFBLEVBQVF5NEIsdUJBQ3JDa25DLEVBQVdvYyxPQUFPbG5FLGFBQWEsWUFBWSxHQUUzQzhxRCxFQUFXb2MsT0FBT3JyRCxnQkFBZ0IsY0FRMUNtd0QsR0FBZ0JBLEVBQWExZ0YsS0FBS3d2QixLQUNsQ214RCxFQUFnQjM1RSxLQUFLd29CLEdBQ3JCendCLEVBQUt5SSxTQUFTZzRELEVBQVdod0MsR0FBVyxXQUk1Qy93QixFQUFLcW5FLGNBQWM2YSxHQUduQmxpRixFQUFLdWhFLFVBQVVTLGFBQWVBLEVBQWFoWixVQUMzQ2hwRCxFQUFLdWhFLFVBQVVVLGdCQUFrQmlnQixFQUc3Qi8vRSxFQUFRMjJELGdCQUFlNzRELEVBQVFtQixRQUFRK3dELFdBQVdodEQsWUFBY25GLEVBQUt1aEUsVUFBVVMsYUFBYW53RCxLQUFLLFNBR3pHc3dFLHFCQUFzQixTQUFVN2dGLEdBQzVCLElBQUlFLEVBQVNGLEVBQUVFLE9BU2YsR0FSSXhCLEVBQUsyL0QscUJBQXFCcitELEVBQUVzRCxrQkFFNUIsb0NBQW9DckQsS0FBS0MsRUFBT3V2QixVQUNoRC93QixFQUFLNCtDLFdBQVksRUFFakJ0OUMsRUFBRTRILGlCQUdGNUksRUFBS2k1QixpQkFBaUIvM0IsRUFBUSxlQUM5QkYsRUFBRXNELGtCQUNGNUUsRUFBS2lnRSxpQkFBa0IsTUFDcEIsQ0FDSCxJQUFJNzJELEVBQVU1SCxFQUFPQyxhQUFhLGdCQUM5QmpCLEVBQVlnQixFQUFPaEIsVUFFdkIsTUFBUTRJLElBQVksZUFBZTdILEtBQUtmLEtBQWUsb0JBQW9CZSxLQUFLZixJQUM1RWdCLEVBQVNBLEVBQU82SCxXQUNoQkQsRUFBVTVILEVBQU9DLGFBQWEsZ0JBQzlCakIsRUFBWWdCLEVBQU9oQixVQUduQjRJLElBQVlwSixFQUFLbStELGNBQWdCLzBELElBQVlwSixFQUFLaWtFLGdCQUNsRDNpRSxFQUFFc0Qsb0JBS2R3OUUsZUFBY0EsQ0FBQ3g0RSxFQUFNOHhFLEVBQVVDLEtBQ3ZCeDVFLEVBQVFva0QsUUFDUnZtRCxFQUFLNDlELElBQUkzOEQsaUJBQWlCMkksRUFBTTh4RSxFQUFVQyxHQUU5QzM3RSxFQUFLZ0csR0FBRy9FLGlCQUFpQjJJLEVBQU04eEUsRUFBVUMsR0FDbEMsQ0FDSC94RSxLQUFNQSxFQUNOOHhFLFNBQVVBLEVBQ1ZDLFdBQVlBLElBSXBCMEcsa0JBQWtCejRFLEVBQU04eEUsRUFBVUMsR0FDekIveEUsSUFFZSxpQkFBVEEsSUFDUDh4RSxFQUFXOXhFLEVBQUs4eEUsU0FDaEJDLEVBQWEveEUsRUFBSyt4RSxXQUNsQi94RSxFQUFPQSxFQUFLQSxNQUVaekgsRUFBUW9rRCxRQUNSdm1ELEVBQUs0OUQsSUFBSTM3RCxvQkFBb0IySCxFQUFNOHhFLEVBQVVDLEdBRWpEMzdFLEVBQUtnRyxHQUFHL0Qsb0JBQW9CMkgsRUFBTTh4RSxFQUFVQyxLQUdoRDJHLGdCQUFpQixTQUFVaGhGLEdBQ3ZCLElBQUlFLEVBQVNGLEVBQUVFLE9BQ1hiLEVBQVVhLEVBQU9DLGFBQWEsZ0JBQzlCMkgsRUFBVTVILEVBQU9DLGFBQWEsZ0JBQzlCakIsRUFBWWdCLEVBQU9oQixVQUd2QixJQUZBUixFQUFLMHpCLGlCQUVFbHlCLEVBQU82SCxhQUFlRCxJQUFZLGVBQWU3SCxLQUFLZixLQUFlLGFBQWFlLEtBQUtmLElBQzFGZ0IsRUFBU0EsRUFBTzZILFdBQ2hCRCxFQUFVNUgsRUFBT0MsYUFBYSxnQkFDOUJkLEVBQVVhLEVBQU9DLGFBQWEsZ0JBQzlCakIsRUFBWWdCLEVBQU9oQixXQUdsQjRJLEdBQVl6SSxLQUNiYSxFQUFPb2pDLFVBRVg1a0MsRUFBS20xRSxXQUFXL3JFLEVBQVN6SSxFQUFTYSxLQUd0QytnRixxQkFBc0IsS0FDdEJDLG9CQUFxQixTQUFVbGhGLEdBQzNCLEdBQUl0QixFQUFLcS9ELFlBQWMvK0QsRUFBS2duRCxjQUFjcm5ELEVBQVFtQixRQUFRMHZCLFNBQVUsT0FDcEUsR0FBSXh3QixFQUFLdXVELDJCQUEyQnZ0RCxFQUFFRSxRQUVsQyxZQURBRixFQUFFNEgsaUJBV04sR0FQQW03RCxFQUFNZ2Usa0JBQWtCaGUsRUFBTWtlLHNCQUM5QmxlLEVBQU1rZSxxQkFBdUJsZSxFQUFNK2QsZUFBZSxXQUFXLFdBQ3pEcGlGLEVBQUtrbUUsZUFDTDdCLEVBQU1nZSxrQkFBa0JoZSxFQUFNa2UseUJBSUcsbUJBQTFCN29ELEVBQVUrb0QsY0FBaUUsSUFBbkMvb0QsRUFBVStvRCxZQUFZbmhGLEVBQUd0QixHQUFpQixPQUU3RixNQUFNMGlGLEVBQVlwaUYsRUFBS2k1QixpQkFBaUJqNEIsRUFBRUUsT0FBUWxCLEVBQUt3eEMsUUFDdkQsR0FBSTR3QyxFQUFXLENBQ1gsTUFBTS9wQyxFQUFjMzRDLEVBQUswQixRQUFRa2hCLE1BQzdCKzFCLEdBQWUrcEMsSUFBYy9wQyxFQUFZTyxhQUFlUCxFQUFZSSxRQUNwRS80QyxFQUFLNjRCLFdBQVcsU0FBUyxXQUNyQjhmLEVBQVkyRyx1QkFBdUIxaEQsS0FBS29DLEVBQU0waUYsR0FBVyxLQUMxRCxNQUlQMWlGLEVBQUs2L0QsWUFDTHdFLEVBQU02UixnQkFJZHlNLGdCQUFpQixTQUFVcmhGLEdBQ3ZCLE1BQU13b0IsRUFBZ0J4b0IsRUFBRUUsT0FFeEIsR0FBSXhCLEVBQUtxL0QsV0FLTCxPQUpBLzlELEVBQUU0SCxpQkFDRTVJLEVBQUttSSxTQUFTcWhCLElBQ2Q5akIsRUFBR3BFLEtBQUtrb0IsRUFBYzNRLEtBQU0yUSxFQUFjdG9CLFNBRXZDLEVBR1gsR0FBSWxCLEVBQUtnbkQsY0FBY3JuRCxFQUFRbUIsUUFBUTB2QixTQUFVLE9BR2pELEdBQWlDLG1CQUF0QjRJLEVBQVVrcEQsVUFBeUQsSUFBL0JscEQsRUFBVWtwRCxRQUFRdGhGLEVBQUd0QixHQUFpQixPQUVyRixNQUFNd21FLEVBQW9CeG1FLEVBQUtzbEUsaUJBQWlCeDdDLEdBQ2hELEdBQUkwOEMsRUFHQSxPQUZBbGxFLEVBQUU0SCxzQkFDRmxKLEVBQUs4K0IsZ0JBQWdCMG5DLEVBQWtCaGxFLE9BQVFnbEUsRUFBa0IzaEUsWUFJckUsTUFBTTRoQyxFQUFhbm1DLEVBQUtpNUIsaUJBQWlCelAsRUFBZSxjQUN4RCxHQUFJMmMsR0FBY25tQyxFQUFLZ25ELGNBQWM3Z0IsS0FDakNubEMsRUFBRTRILGlCQUNGdTlCLEVBQVdqa0MsUUFFUHhDLEVBQUs0L0QsWUFBYzUvRCxFQUFLKy9ELG1CQUFtQkMsUUFBUSxDQUNuRHFFLEVBQU1pUixxQkFFTixNQUFNN2MsRUFBYyxXQUNoQjRMLEVBQU02UixlQUNOenZDLEVBQVd4a0Msb0JBQW9CLE9BQVF3MkQsSUFHM0NoeUIsRUFBV3hsQyxpQkFBaUIsT0FBUXczRCxHQU01QyxHQUZBejRELEVBQUtrbUUsZUFFWSxJQUFiNWtFLEVBQUV1aEYsT0FBYyxDQUNoQixJQUFJaHpDLEVBQVE3dkMsRUFBSzh2QyxXQUNieHZDLEVBQUs2L0IsZ0JBQWdCMFAsRUFBTWMsZUFBcUMsSUFBcEJkLEVBQU1pQixZQUNsRGpCLEVBQVE3dkMsRUFBS2d6QixTQUFTNmMsRUFBTVksZUFBZ0JaLEVBQU1nQixZQUFhaEIsRUFBTVksZUFBZ0JaLEVBQU1ZLGVBQWV2cUMsUUFDMUdsRyxFQUFLbW5FLFdBQVd0M0IsRUFBTzd2QyxFQUFLb3ZCLGlCQUlwQyxNQUFNb3lCLEVBQWdCeGhELEVBQUs0cUIsbUJBQ3JCcS9DLEVBQVczcEUsRUFBS285QixpQkFBaUI4akIsRUFBZSxNQUNoRGl0QixFQUFVbnVFLEVBQUs0d0Msc0JBQXNCc1EsRUFBZSxNQUUxRCxJQUFJc2hDLEVBQWlDdGhDLEVBQ3JDLEtBQU9zaEMsRUFBK0JsdEUsWUFBWWt0RSxFQUFpQ0EsRUFBK0JsdEUsV0FFbEgsTUFBTW10RSxFQUF3Qi9pRixFQUFLc2xFLGlCQUFpQndkLEdBQ3BELEdBQUlDLEVBQXVCLENBQ3ZCLE1BQU1sekMsRUFBUTd2QyxFQUFLOHZDLFdBQ2QyK0IsR0FBVzUrQixFQUFNWSxpQkFBbUJaLEVBQU1jLGNBQWMzd0MsRUFBSzgrQixnQkFBZ0Jpa0QsRUFBc0J2aEYsT0FBUXVoRixFQUFzQmwrRSxpQkFDL0g3RSxFQUFLeStELDBCQUEwQnorRCxFQUFLMHpCLGlCQUUvQyxHQUFLdTJDLEdBQWEzcEUsRUFBS2duRCxjQUFjeDlCLElBQW1CeHBCLEVBQUttdkMsT0FBT2cvQixHQWtCaEVwSyxFQUFNaUMsdUJBbEJvRSxDQUMxRSxNQUFNejJCLEVBQVE3dkMsRUFBSzh2QyxXQUNuQixHQUFJeHZDLEVBQUtvOUIsaUJBQWlCbVMsRUFBTVksa0JBQW9CbndDLEVBQUtvOUIsaUJBQWlCbVMsRUFBTWMsY0FDNUUsR0FBSXJ3QyxFQUFLbXZDLE9BQU9nL0IsR0FBVSxDQUN0Qm50RSxFQUFFNEgsaUJBQ0YsTUFBTW94RCxFQUFNaDZELEVBQUtDLGNBQWMsTUFDekJ5aUYsRUFBU3hoQyxFQUFjMW5CLG1CQUM3QndnQyxFQUFJejVELFlBQVkyZ0QsR0FDaEJpdEIsRUFBUWh2QyxhQUFhNjZCLEVBQUswb0IsR0FDMUJoakYsRUFBS3dDLGFBQ0dsQyxFQUFLK29CLGFBQWFtNEIsSUFBbUJsaEQsRUFBSzRuQyxZQUFZc1osSUFBb0JsaEQsRUFBS3FwRCxRQUFRbkksS0FBa0JsaEQsRUFBS3d4QyxPQUFPMFAsSUFBK0csT0FBNUZ4aEQsRUFBS2lnRixrQkFBa0IzL0UsRUFBS3UvQixxQkFBcUI0dUMsR0FBVyxNQUFRdHNFLEVBQVFnMUQsWUFJNU5rTixFQUFNaUMsb0JBSE5obEUsRUFBRTRILGlCQUNGbEosRUFBS3dDLFNBU2J4QyxFQUFLNi9ELFlBQVk3NUQsRUFBRzY2QixXQUFXd2pDLEVBQU1rQyx3QkFHN0MwYyxjQUFlLEtBQ2ZDLHlCQUEwQixXQUNsQjdlLEVBQU00ZSxlQUNOajlFLEVBQUdpNUUsYUFBYTVhLEVBQU00ZSxlQUcxQjVlLEVBQU00ZSxjQUFnQmo5RSxFQUFHNjZCLFdBQVcsV0FDaEM3NkIsRUFBR2k1RSxhQUFhci9FLEtBQUtxakYsZUFDckJyakYsS0FBS3FqRixjQUFnQixLQUNyQnJqRixLQUFLeTFFLHVCQUNQcDJFLEtBQUtvbEUsR0FBUSxNQUduQmtDLHNCQUF1QixXQUNuQnZtRSxFQUFLa21FLGVBQ0wsTUFBTXIyQixFQUFRN3ZDLEVBQUs4dkMsV0FDZjl2QyxFQUFLMi9ELHNCQUF5QjMvRCxFQUFLOC9ELGtCQUFvQmp3QixFQUFNVSxVQUFZOHpCLEVBQU02UixlQUM5RTdSLEVBQU1nUixvQkFBb0J4bEMsSUFHbkN3bEMsb0JBQXFCLFNBQVU4TixHQUMzQixJQUFLbmpGLEVBQUs2L0QsV0FBWSxPQUV0QixNQUFNaHdCLEVBQVFzekMsR0FBWW5qRixFQUFLOHZDLFdBQ3pCN3VCLEVBQVVoaEIsRUFBUW1CLFFBQVE2ZixRQUMxQjQwQyxFQUFVNTFELEVBQVFtQixRQUFReTBELFFBQzFCbVIsRUFBWWhuRSxFQUFLb3ZCLGVBRXZCLElBQUlnMEQsRUFDSixHQUFJcGpGLEVBQUs4L0Qsa0JBQW9CandCLEVBQU1VLFVBQy9CNnlDLEdBQVcsT0FDUixHQUFJcGMsRUFBVU8sWUFBY1AsRUFBVVUsV0FDekMwYixFQUFXcGMsRUFBVVksWUFBY1osRUFBVVcsaUJBQzFDLENBQ0gsTUFBTXR4RCxFQUFhL1YsRUFBSzJwRCxrQkFBa0JwYSxFQUFNdTJCLHdCQUF5QixNQUN6RWdkLEVBQVc5aUYsRUFBSys3QyxjQUFjaG1DLEVBQVkyd0QsRUFBVU8sV0FBYWpuRSxFQUFLKzdDLGNBQWNobUMsRUFBWTJ3RCxFQUFVVSxZQUc5RyxJQUFJMmIsRUFBUXh6QyxFQUFNeXpDLGlCQUNsQkQsRUFBUUEsRUFBTUQsRUFBVyxFQUFJQyxFQUFNbjlFLE9BQVMsR0FFNUMsTUFBTXE5RSxFQUFldmpGLEVBQUt5akUsd0JBQzFCLElBQUlDLEVBQWE2ZixFQUFhanpFLEtBQzFCaTdDLEVBQVlnNEIsRUFBYXZ6RCxJQUU3QixNQUFNd3pELEVBQWMzdEIsRUFBUTlsQyxZQUN0Qms1QixFQUFVb2IsRUFBTUMsa0JBQWtCLE1BQ2xDbWYsRUFBWXg2QixFQUFRajVCLElBQ3BCMHpELEVBQWF6NkIsRUFBUTM0QyxLQU0zQixHQUpBMlEsRUFBUXZnQixNQUFNc3ZCLElBQU0sV0FDcEIvTyxFQUFRdmdCLE1BQU1pc0IsV0FBYSxTQUMzQjFMLEVBQVF2Z0IsTUFBTUMsUUFBVSxTQUVuQjBpRixFQUFPLENBQ1IsTUFBTWp0RSxFQUFPcFcsRUFBSzRxQixtQkFDbEIsR0FBSXRxQixFQUFLNi9CLGdCQUFnQi9wQixHQUFPLENBQzVCLE1BQU1pMkQsRUFBWS9yRSxFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxnQkFDM0NuckMsRUFBS296QixXQUFXaTVDLEVBQVcsTUFBTSxHQUNqQ3JzRSxFQUFLZ3pCLFNBQVNxNUMsRUFBVyxFQUFHQSxFQUFXLEdBQ3ZDcnNFLEVBQUtrbUUsZUFDTG1kLEVBQVFyakYsRUFBSzh2QyxXQUFXd3pDLGlCQUN4QkQsRUFBUUEsRUFBTUQsRUFBVyxFQUFJQyxFQUFNbjlFLE9BQVMsR0FHaEQsSUFBS205RSxFQUFPLENBQ1IsTUFBTU0sRUFBYXJqRixFQUFLNnFELFVBQVUvMEMsRUFBTW5XLEVBQVFtQixRQUFRZ3FELGNBQ3hEaTRCLEVBQVEsQ0FDSi95RSxLQUFNcXpFLEVBQVdyekUsS0FDakIwZixJQUFLMnpELEVBQVczekQsSUFDaEJ6ZixNQUFPb3pFLEVBQVdyekUsS0FDbEJzekUsT0FBUUQsRUFBVzN6RCxJQUFNNVosRUFBS25QLGFBQzlCNDhFLFFBQVEsR0FFWm5nQixFQUFhLEVBQ2JuWSxFQUFZLEVBR2hCNjNCLEdBQVcsRUFHZixNQUFNVSxFQUFjOTlFLEVBQUd1QixLQUFLQyxNQUFNdkgsRUFBUW1CLFFBQVFpekQsT0FBT3RrQyxZQUFjLEdBQ2pFb21DLEVBQWVsMUMsRUFBUThPLFlBQ3ZCZzBELEVBQWdCOWlFLEVBQVFoYSxhQUN4Qis4RSxFQUFjLFVBQVV6aUYsS0FBS3RCLEVBQVFtQixRQUFRZ3FELGFBQWFyNkIsVUFBWTl3QixFQUFRbUIsUUFBUWdxRCxhQUFhazRCLGlCQUFpQixHQUFLLEtBZS9ILEdBZElVLElBQ0FYLEVBQVEsQ0FDSi95RSxLQUFNK3lFLEVBQU0veUUsS0FBTzB6RSxFQUFZMXpFLEtBQy9CMGYsSUFBS3F6RCxFQUFNcnpELElBQU1nMEQsRUFBWWgwRCxJQUM3QnpmLE1BQU84eUUsRUFBTTl5RSxNQUFReXpFLEVBQVl6ekUsTUFBUXl6RSxFQUFZOW5FLE1BQ3JEMG5FLE9BQVFQLEVBQU1PLE9BQVNJLEVBQVlKLE9BQVNJLEVBQVk3bkUsU0FJaEVrb0QsRUFBTTRmLGtCQUFrQmIsRUFBVUMsRUFBT3BpRSxFQUFTeWlFLEVBQVlGLEVBQWE5ZixFQUFZblksRUFBV2s0QixFQUFXSyxHQUN6RzN0QixJQUFpQmwxQyxFQUFROE8sYUFBZWcwRCxJQUFrQjlpRSxFQUFRaGEsY0FDbEVvOUQsRUFBTTRmLGtCQUFrQmIsRUFBVUMsRUFBT3BpRSxFQUFTeWlFLEVBQVlGLEVBQWE5ZixFQUFZblksRUFBV2s0QixFQUFXSyxHQUc3RzNoRixFQUFRNHdELGlCQUFrQixDQUMxQixNQUFNbXhCLEVBQWVydUIsRUFBUTFvQixjQUU3QixJQUFJOU8sRUFBWWw4QixFQUFRNHdELGlCQUNwQnppRCxFQUFPK3RCLEVBQVV2TyxXQUNqQkUsRUFBTXFPLEVBQVVwTyxVQUVwQixNQUFPb08sRUFBVThPLGNBQWNqZCxTQUFTZzBELEtBQWtCLGlCQUFpQjNpRixLQUFLODhCLEVBQVU4TyxjQUFjcGMsV0FDcEdzTixFQUFZQSxFQUFVaXRCLGFBQ3RCaDdDLEdBQVErdEIsRUFBVXZPLFdBQ2xCRSxHQUFPcU8sRUFBVXBPLFVBR3JCaFAsRUFBUXZnQixNQUFNNFAsS0FBUTJRLEVBQVE2TyxXQUFheGYsRUFBT3VsRCxFQUFRL2xDLFdBQWMsS0FDeEU3TyxFQUFRdmdCLE1BQU1zdkIsSUFBTy9PLEVBQVFnUCxVQUFZRCxFQUFNNmxDLEVBQVE1bEMsVUFBYSxLQUd4RWhQLEVBQVF2Z0IsTUFBTWlzQixXQUFhLElBRy9CczNELGtCQUFtQixTQUFVYixFQUFVQyxFQUFPcGlFLEVBQVN5aUUsRUFBWUYsRUFBYTlmLEVBQVluWSxFQUFXazRCLEVBQVdLLEdBQzlHLE1BQ00zdEIsRUFBZWwxQyxFQUFROE8sWUFDdkJnMEQsRUFBZ0JWLEVBQU1RLFNBQVdULEVBQVcsRUFBSW5pRSxFQUFRaGEsYUFFeERrOUUsR0FBZ0JmLEVBQVdDLEVBQU0veUUsS0FBTyt5RSxFQUFNOXlFLE9BQVNtekUsRUFBY3Z0QixFQUFlLEVBQUt1TixFQUN6RjBnQixFQUFZRCxFQUFlaHVCLEVBQWVxdEIsRUFFaEQsSUFBSTdrRixHQUFLeWtGLEVBQVdDLEVBQU1yekQsSUFBTSt6RCxFQUFnQkQsRUFBY1QsRUFBTU8sT0FBU0UsSUFBZ0JULEVBQU1RLE9BQVMsRUFBSUosR0FBYWw0QixFQUN6SDd0RCxFQUFJeW1GLEVBQWUsRUFSUCxFQVFxQkMsRUFBWSxFQUFJRCxFQUFlQSxFQUFlQyxFQVJuRSxFQVF5RixFQUVyR0MsR0FBVyxFQUNmLE1BQU1DLEVBQVEzbEYsR0FBS3lrRixFQUFZL2UsRUFBTUMsa0JBQWtCLE1BQU10MEMsSUFBUS9PLEVBQVFoYSxhQUFlaEgsRUFBUW1CLFFBQVEwdkIsUUFBUTdwQixlQUMvR204RSxHQUFZa0IsRUFBUSxHQUFLamdCLEVBQU1rZ0Isc0JBQXdCRCxHQUN4RGxCLEdBQVcsRUFDWGlCLEdBQVcsR0FDSmpCLEdBQVlwaEYsRUFBR3dpRixnQkFBZ0J2MEQsVUFBWXEwRCxJQUNsRGxCLEdBQVcsRUFDWGlCLEdBQVcsR0FHWEEsSUFBVTFsRixHQUFLeWtGLEVBQVdDLEVBQU1yekQsSUFBTSt6RCxFQUFnQkQsRUFBY1QsRUFBTU8sT0FBU0UsSUFBZ0JULEVBQU1RLE9BQVMsRUFBSUosR0FBYWw0QixHQUV2SXRxQyxFQUFRdmdCLE1BQU00UCxLQUFPdEssRUFBR3VCLEtBQUtnTCxNQUFNN1UsR0FBSyxLQUN4Q3VqQixFQUFRdmdCLE1BQU1zdkIsSUFBTWhxQixFQUFHdUIsS0FBS2dMLE1BQU01VCxHQUFLLEtBRW5DeWtGLEdBQ0E5aUYsRUFBS3dJLFlBQVk3SSxFQUFRbUIsUUFBUWl6RCxPQUFRLGVBQ3pDL3pELEVBQUt5SSxTQUFTOUksRUFBUW1CLFFBQVFpekQsT0FBUSxpQkFDdENwMEQsRUFBUW1CLFFBQVFpekQsT0FBTzN6RCxNQUFNc3ZCLElBQU0rekQsRUFBZ0IsT0FFbkR6akYsRUFBS3dJLFlBQVk3SSxFQUFRbUIsUUFBUWl6RCxPQUFRLGlCQUN6Qy96RCxFQUFLeUksU0FBUzlJLEVBQVFtQixRQUFRaXpELE9BQVEsZUFDdENwMEQsRUFBUW1CLFFBQVFpekQsT0FBTzN6RCxNQUFNc3ZCLEtBQU84ekQsRUFBYyxNQUd0RCxNQUFNVyxFQUFheitFLEVBQUd1QixLQUFLZ0wsTUFBTzRqRCxFQUFlLEdBQU1ndUIsRUFBZXptRixJQUN0RXVDLEVBQVFtQixRQUFRaXpELE9BQU8zekQsTUFBTTRQLE1BQVFtMEUsRUFBYVgsRUFBYzdpRSxFQUFROE8sWUFBYzlPLEVBQVE4TyxZQUFjK3pELEVBQWNXLEVBQWFYLEVBQWNBLEVBQWNXLEdBQWMsTUFHckxuUCxtQkFBb0IsV0FDaEIsSUFBS3QxRSxFQUFLNC9ELFVBQVcsT0FFckIsTUFBTTMrQyxFQUFVaGhCLEVBQVFtQixRQUFRNmYsUUFDNUI5ZSxFQUFRNHdELGlCQUFrQjl4QyxFQUFRdmdCLE1BQU0yQixTQUFXLFdBQ2xENGUsRUFBUXZnQixNQUFNMkIsU0FBVyxXQUU5QjRlLEVBQVF2Z0IsTUFBTWlzQixXQUFhLFNBQzNCMUwsRUFBUXZnQixNQUFNQyxRQUFVLFFBQ3hCWCxFQUFLKy9ELG1CQUFtQjdqRCxNQUFRK0UsRUFBUXZnQixNQUFNd2IsTUFBUS9aLEVBQVFnMEQsYUFDOURuMkQsRUFBSysvRCxtQkFBbUIvdkMsSUFBTS9PLEVBQVF2Z0IsTUFBTXN2QixLQUFPN3RCLEVBQVE0d0QsaUJBQW1CLEdBQU0sRUFBSTl4QyxFQUFRaGEsY0FBaUIsS0FFN0UsbUJBQXpCeXlCLEVBQVVnckQsWUFBMkJockQsRUFBVWdyRCxXQUFXempFLEVBQVNoaEIsRUFBU0QsR0FFdkZxa0UsRUFBTWdULGtCQUNOcjNFLEVBQUsrL0QsbUJBQW1CQyxRQUFTLEVBQ2pDLytDLEVBQVF2Z0IsTUFBTWlzQixXQUFhLElBRy9CdXBELGFBQWMsV0FDTGwyRSxFQUFLaWdFLGlCQUFvQmpnRSxFQUFLdWhFLFVBQVVHLGVBQ3pDemhFLEVBQVFtQixRQUFRNmYsUUFBUXZnQixNQUFNQyxRQUFVLE9BQ3hDWCxFQUFLKy9ELG1CQUFtQkMsUUFBUyxJQUl6QzJrQixnQkFBaUIsU0FBVXJqRixHQUN2QixHQUFJLFFBQVFDLEtBQUtELEVBQUVFLE9BQU91dkIsVUFBVyxPQUFPLEVBQzVDLEdBQUkvd0IsRUFBS3EvRCxZQUFjci9ELEVBQUtvL0QsV0FJeEIsT0FIQTk5RCxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBQ0Y1RSxFQUFLc3pCLFFBQVE0ckQsR0FBR2wvRSxFQUFLc3pCLFFBQVE2ckQsb0JBQ3RCLEVBR1huL0UsRUFBS2ttRSxlQUVMLE1BQU05bEQsR0FBbUIsT0FBWDllLEVBQUU4ZSxLQUFnQixRQUFnQm80QyxJQUFYbDNELEVBQUU4ZSxLQUFxQixJQUFNOWUsRUFBRThlLE9BQVMsR0FDN0UsSUFBS3BnQixFQUFLNDdFLFdBQVd4N0QsR0FHakIsT0FGQTllLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxtQkFDSyxFQUlzQixtQkFBdEI4MEIsRUFBVWtyRCxVQUF5RCxJQUEvQmxyRCxFQUFVa3JELFFBQVF0akYsRUFBR3RCLElBR3BFQSxFQUFLc3pCLFFBQVEvcUIsTUFBSyxJQUd0QnM4RSxrQkFBbUIsU0FBVWgxQyxFQUFPaTFDLEdBQ2hDLE1BQU16bUQsRUFBWXltRCxFQUFVajFDLEVBQU1ZLGVBQWlCWixFQUFNYyxhQUNuRG9jLEVBQVMrM0IsRUFBVWoxQyxFQUFNZ0IsWUFBY2hCLEVBQU1pQixVQUM3Q2kwQyxFQUFhRCxFQUFVLGtCQUFvQixjQUVqRCxJQUFJRSxFQUVKLE9BSHlDLElBQXZCM21ELEVBQVU5bkIsVUFJeEJ5dUUsRUFBYzNnQixFQUFNNGdCLDZCQUE2QjVtRCxFQUFVaG9CLFdBQVcwMkMsR0FBU2c0QixFQUFZMW1ELEdBQ3BGMm1ELEdBQXdDLElBQXpCQSxFQUFZenVFLFVBQWtFLFVBQWhEeXVFLEVBQVl2akYsYUFBYSxxQkFFN0V1akYsRUFBYzNnQixFQUFNNGdCLDZCQUE2QjVtRCxFQUFXMG1ELEVBQVkxbUQsR0FDakVyK0IsRUFBS3lwRSxZQUFZcHJDLEVBQVcwdUIsRUFBUSszQixFQUFVLFFBQVUsUUFBV0UsR0FBd0MsSUFBekJBLEVBQVl6dUUsVUFBa0UsVUFBaER5dUUsRUFBWXZqRixhQUFhLHFCQUl4SndqRiw2QkFBOEIsU0FBVUMsRUFBWUgsRUFBWTFtRCxHQUM1RCxJQUFLNm1ELEVBQVksT0FBTyxLQUN4QixJQUFJRixFQUFjRSxFQUFXSCxHQUU3QixJQUFLQyxFQUFhLENBR2QsR0FGQUEsRUFBYzFrRixFQUFLbzlCLGlCQUFpQlcsR0FDcEMybUQsRUFBY0EsRUFBY0EsRUFBWUQsR0FBYyxNQUNsREMsR0FBZ0Ixa0YsRUFBSzRuQyxZQUFZODhDLEdBQ2hDLE9BQU8sS0FEdUNBLEVBQTZCLG9CQUFmRCxFQUFtQ0MsRUFBWXB2RSxXQUFhb3ZFLEVBQVlqNkIsVUFJN0ksT0FBT2k2QixHQUdYRyxnQkFBZ0IsRUFDaEJDLGtCQUFtQixTQUFVOWpGLEdBQ3pCLElBQUlrZ0QsRUFBZ0J4aEQsRUFBSzRxQixtQkFDekIsR0FBSXRxQixFQUFLa25ELGVBQWVoRyxHQUFnQixPQUV4QyxNQUFNdC9DLEVBQVVaLEVBQUVZLFFBQ1o2YyxFQUFRemQsRUFBRStqRixTQUNWQyxFQUFPaGtGLEVBQUVpa0YsU0FBV2prRixFQUFFa2tGLFNBQXVCLEtBQVp0akYsR0FBOEIsS0FBWkEsR0FBOEIsTUFBWkEsRUFDckU2MkIsRUFBTXozQixFQUFFbWtGLE9BR2QsR0FGQXBoQixFQUFNd2MsZUFBNkIsTUFBWjMrRSxHQUVsQm9qRixHQUFRdGxGLEVBQUtxL0QsYUFBZWdGLEVBQU0wYyxtQkFBbUJ4L0UsS0FBS1csR0FFM0QsT0FEQVosRUFBRTRILGtCQUNLLEVBVVgsR0FQQWxKLEVBQUsrcUIsYUFFRC9xQixFQUFLNi9ELFlBQ0x3RSxFQUFNNlIsZUFJeUIsbUJBQXhCeDhDLEVBQVVnc0QsWUFBNkQsSUFBakNoc0QsRUFBVWdzRCxVQUFVcGtGLEVBQUd0QixHQUFpQixPQUd6RixHQUFJc2xGLEdBQVFqaEIsRUFBTTBkLGlCQUFpQjcvRSxFQUFTNmMsR0FJeEMsT0FIQXNsRCxFQUFNOGdCLGdCQUFpQixFQUN2QjdqRixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0QsbUJBQ0ssRUFDQXkvRCxFQUFNOGdCLGlCQUNiOWdCLEVBQU04Z0IsZ0JBQWlCLEdBSTNCLE1BQU10MUMsRUFBUTd2QyxFQUFLOHZDLFdBQ2I2MUMsR0FBZTkxQyxFQUFNVSxXQUFhVixFQUFNWSxpQkFBbUJaLEVBQU1jLGFBQ2pFaTFDLEVBQW9CNWxGLEVBQUsyZ0UsYUFBYUUsYUFBYXQvRCxLQUFLdkIsRUFBSzZ5Qix1QkFBeUI3eUIsRUFBSzZ5QixzQkFBd0IsR0FDekgsSUFBSW8zQyxFQUFXM3BFLEVBQUtvOUIsaUJBQWlCOGpCLEVBQWUsT0FBU0EsRUFDekRpdEIsRUFBVW51RSxFQUFLNHdDLHNCQUFzQis0QixFQUFVLE1BR25ELElBRG1CLGNBQWMxb0UsS0FBS0QsRUFBRVksV0FDbUIsSUFBekNtaUUsRUFBTXdoQiw0QkFBNEJ2a0YsR0FBcEQsQ0FFQSxPQUFRWSxHQUNKLEtBQUssRUFDRCxJQUFLeWpGLEdBQ0dDLEVBQW1CLENBQ25CdGtGLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFDRjVFLEVBQUswQixRQUFRa2tGLEdBQW1CeHNELFFBQVF4N0IsS0FBS29DLEdBQzdDLE1BSVIsR0FBSTJsRixHQUFldGhCLEVBQU15aEIsY0FBZSxDQUNwQ3hrRixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBQ0YsTUFHSixJQUFLdEUsRUFBSzYvQixnQkFBZ0I4cEMsS0FBY2hxRSxFQUFRbUIsUUFBUTB2QixRQUFRNmIsb0JBQXNCcnNDLEVBQUs0bkMsWUFBWXNaLElBQWlFLE9BQS9DeGhELEVBQUtpZ0Ysa0JBQWtCOTlFLEVBQVFnMUQsWUFHcEosT0FGQTcxRCxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0QsbUJBQ0ssRUFHWCxJQUFLK2dGLElBQWdCMWIsRUFBU3B3Qyx3QkFBaUQsSUFBdEJnVyxFQUFNZ0IsY0FBc0IyUSxFQUFjbGhCLGtCQUFvQmhnQyxFQUFLMC9CLFdBQVdpcUMsSUFDbEkzcEUsRUFBSzYvQixnQkFBZ0I4cEMsTUFBZTNwRSxFQUFLb25ELG9CQUFvQnVpQixJQUFhM3BFLEVBQUtxbkQsMkJBQTJCc2lCLElBQWMsQ0FFekgsR0FBSTNwRSxFQUFLbW5ELDRCQUE0QndpQixFQUFTNWdFLFlBRzFDLE9BRkEvSCxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0QsbUJBQ0ssRUFHWCxHQUFJdEUsRUFBSytvQixhQUFhNGdELEVBQVM1Z0UsYUFBZTRnRSxFQUFTNXpELFdBQVduUSxRQUFVLEtBQU8rakUsRUFBU3IwRCxZQUFjdFYsRUFBS3N3QyxtQkFBbUJxNUIsRUFBUzlrRSxjQUFlLENBSXRKLEdBSEE3RCxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBRUVxbEUsRUFBU2w1QyxTQUFTMGIsZ0JBQWtCdHFDLEVBQVFnMUQsV0FBVzFxQixjQUFlLENBQ3RFdzlCLEVBQVNqbUUsVUFBWSxPQUNyQixNQUFNOC9CLEVBQVFtbUMsRUFBU3BqQixXQUN2QixLQUFPL2lCLEVBQU0sSUFDVG1tQyxFQUFTbjRDLGdCQUFnQmdTLEVBQU0sR0FBRzlsQyxVQUVuQyxDQUNILE1BQU0rbkYsRUFBZ0J6bEYsRUFBS0MsY0FBYzRCLEVBQVFnMUQsWUFDakQ0dUIsRUFBYy9oRixVQUFZLE9BQzFCaW1FLEVBQVM5OEIsY0FBY3BOLGFBQWFnbUQsRUFBZTliLEdBSXZELE9BREFqcUUsRUFBS2dtRSxlQUNFLEdBS2YsTUFBTVUsRUFBVzcyQixFQUFNWSxlQUN2QixHQUFJdzVCLElBQWFBLEVBQVNwd0Msd0JBQWdELElBQXRCZ1csRUFBTWdCLGFBQTJDLElBQXRCNjFCLEVBQVNud0QsV0FBbUJqVyxFQUFLNi9CLGdCQUFnQnVtQyxFQUFTcjlELFlBQWEsQ0FDbEosSUFBSTBxQyxFQUFPMnlCLEVBQVNyOUQsV0FBV2kzQixnQkFDL0IsTUFBTXlSLEVBQU8yMEIsRUFBU3I5RCxXQUFXK2hDLFlBQzVCMkksSUFDSWhDLEVBSURnQyxFQUFPaEMsR0FIUGdDLEVBQU96ekMsRUFBS0MsY0FBYyxNQUMxQjBwRSxFQUFTcHBFLFlBQVlrekMsS0FNN0IsSUFBSWl5QyxFQUFNdGYsRUFDVixLQUFNdUQsRUFBUy81QyxTQUFTODFELEtBQVNBLEVBQUkxbEQsaUJBQ2pDMGxELEVBQU1BLEVBQUkzOEUsV0FHZCxJQUFLNGdFLEVBQVMvNUMsU0FBUzgxRCxHQUFNLENBQ3pCdGYsRUFBU3ZoRSxZQUFjLEdBQ3ZCN0UsRUFBSzA1QixxQkFBcUIwc0MsRUFBVSxLQUFNdUQsR0FDMUMsT0FLUixHQUFJNUYsRUFBTXdnQixrQkFBa0JoMUMsR0FBTyxHQUFPLENBQ3RDdnVDLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFDRixPQUlDK2dGLEdBQWUzbEYsRUFBSzBwRSxjQUFjNzVCLEVBQU1ZLGVBQWdCWixFQUFNZ0IsWUFBYSxVQUN4RXZ3QyxFQUFLNi9CLGdCQUFnQjhwQyxFQUFTcHdDLDBCQUM5Qjc1QixFQUFLK2lFLGlCQUFtQmtILEVBQVNwd0MsdUJBQXVCZ3RCLFlBS2hFLE1BQU0raEIsRUFBWS80QixFQUFNdTJCLHdCQUd4QixHQUZBNkQsRUFBVzNwRSxFQUFLbzlCLGlCQUFpQm1TLEVBQU1ZLGVBQWdCLE1BQ3ZEZytCLEVBQVVudUUsRUFBSzR3QyxzQkFBc0IrNEIsRUFBVSxNQUMzQ3dFLEdBQVd4RSxJQUFhM3BFLEVBQUt3eEMsT0FBTzI4QixLQUFhLGdCQUFnQmx0RSxLQUFLa3RFLEVBQVExOUMsVUFBVyxDQUN6RixHQUFJendCLEVBQUswL0IsV0FBV2lxQyxJQUFhM3BFLEVBQUttdkMsT0FBT2cvQixLQUFhbnVFLEVBQUswL0IsV0FBV3l1QyxFQUFRcGxFLGFBQWU0Z0UsRUFBU3B3QywwQkFBNEIybkIsSUFBa0J5b0IsR0FBd0MsSUFBM0J6b0IsRUFBY2pyQyxZQUFvQmlyQyxFQUFjbGhCLGlCQUFtQmhnQyxFQUFLbXZDLE9BQU8rUixFQUFjbGhCLHFCQUM3UGhnQyxFQUFLbzlCLGlCQUFpQm1TLEVBQU1ZLGVBQWdCLFFBQVVud0MsRUFBS285QixpQkFBaUJtUyxFQUFNYyxhQUFjLE1BQVE4OUIsRUFBUXYrQyxTQUFTMmYsRUFBTVksZ0JBQXlDLElBQXRCWixFQUFNZ0IsYUFBc0JoQixFQUFNVSxXQUFhLENBQ2xNLEdBQUlWLEVBQU1ZLGlCQUFtQlosRUFBTWMsYUFDL0JydkMsRUFBRTRILGlCQUVGbEosRUFBS2dxRSxhQUNpQyxJQUFsQ242QixFQUFNWSxlQUFlbDZCLFVBQ3JCdlcsRUFBS2d6QixTQUFTNmMsRUFBTVksZUFBZ0JaLEVBQU1ZLGVBQWV0ckMsWUFBWWUsT0FBUTJwQyxFQUFNWSxlQUFnQlosRUFBTVksZUFBZXRyQyxZQUFZZSxRQUd4SWxHLEVBQUtzekIsUUFBUS9xQixNQUFLLE9BQ2YsQ0FDSCxJQUFJd3JDLEVBQU9rMkIsRUFBU3B3Qyx3QkFBMEI0MEMsRUFBUXBsRSxXQUN0RCxHQUFJL0ksRUFBSzAvQixXQUFXK1QsR0FBTyxDQUN2Qnp5QyxFQUFFNEgsaUJBRUYsSUFBSSs4RSxFQUFXbHlDLEVBQ2YsSUFBS0EsRUFBSzdqQixTQUFTKzVDLElBQWEzcEUsRUFBSzAvQixXQUFXaW1ELElBQWEzbEYsRUFBS212QyxPQUFPdzJDLEVBQVMxeEMsa0JBQW1CLENBRWpHLElBREEweEMsRUFBV0EsRUFBUzF4QyxpQkFBaUJBLGlCQUM5QmowQyxFQUFLMC9CLFdBQVdpbUQsSUFBYTNsRixFQUFLbXZDLE9BQU93MkMsRUFBUzF4QyxtQkFDckQweEMsRUFBV0EsRUFBUzF4QyxrQkFBb0IweEMsRUFBUzF4QyxpQkFBaUJBLGlCQUV0RVIsRUFBT2t5QyxFQUdYLElBQUlELEVBQU1qeUMsSUFBUzA2QixFQUFRcGxFLFdBQWFvbEUsRUFBUW51QyxnQkFBa0J5VCxFQUFLZ1gsVUFDbEVpN0IsSUFDREEsRUFBTTFsRixFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxnQkFDL0JzakMsRUFBUXBsRSxXQUFXbzJCLGFBQWF1bUQsRUFBS3ZYLEVBQVFwbEUsV0FBV3VNLGFBRTVELE1BQU1tM0MsRUFBMEIsSUFBakJpNUIsRUFBSXp2RSxTQUFpQnl2RSxFQUFJN2dGLFlBQVllLE9BQVMsRUFDdkRzWixFQUFXeXFELEVBQVM1ekQsV0FDMUIsSUFBSTgyQyxFQUFRNjRCLEVBQ1IxdkUsRUFBUWtKLEVBQVMsR0FDckIsS0FBUWxKLEVBQVFrSixFQUFTLElBQ3JCdTBCLEVBQUt0VSxhQUFhbnBCLEVBQU82MkMsRUFBTS9oQixhQUMvQitoQixFQUFRNzJDLEVBR1poVyxFQUFLc3BCLFdBQVdxZ0QsR0FDZ0IsSUFBNUJ3RSxFQUFRanZELFNBQVN0WixRQUFjNUYsRUFBS3NwQixXQUFXNmtELEdBRW5EenVFLEVBQUtnekIsU0FBU2d6RCxFQUFLajVCLEVBQVFpNUIsRUFBS2o1QixHQUVoQy9zRCxFQUFLc3pCLFFBQVEvcUIsTUFBSyxJQUkxQixNQUlKLElBQUtvOUUsR0FBcUMsSUFBdEI5MUMsRUFBTWdCLFlBQW1CLENBQ3pDLElBQUlqQixHQUFTLEVBQ1R5NEIsRUFBT08sRUFDWCxLQUFPUCxHQUFRQSxJQUFTb0csSUFBWW51RSxFQUFLK29CLGFBQWFnL0MsSUFBTyxDQUN6RCxHQUFJQSxFQUFLL25DLGtCQUNpQyxJQUFsQytuQyxFQUFLL25DLGdCQUFnQi9wQixXQUFtQmpXLEVBQUtzd0MsbUJBQW1CeTNCLEVBQUsvbkMsZ0JBQWdCbjdCLFlBQVlpRCxTQUFTLENBQzFHd25DLEdBQVMsRUFDVCxNQUdSeTRCLEVBQU9BLEVBQUtoL0QsV0FHaEIsR0FBSXVtQyxHQUFVNitCLEVBQVFwbEUsV0FBWSxDQUM5Qi9ILEVBQUU0SCxpQkFDRmxKLEVBQUsyckMseUJBQXlCOGlDLEVBQVVudUUsRUFBSzAvQixXQUFXaXFDLEdBQVksQ0FBQ0EsR0FBWSxLQUFPLE1BQU0sR0FBTyxHQUVyR2pxRSxFQUFLc3pCLFFBQVEvcUIsTUFBSyxHQUNsQixRQU1aLElBQUtvOUUsR0FBZTFiLElBQW1DLElBQXRCcDZCLEVBQU1nQixhQUFzQjJRLElBQWtCeW9CLEdBQWFBLEVBQVM1ekQsV0FBV3c1QixFQUFNZ0IsY0FBd0IsQ0FDMUksTUFBTXdoQyxFQUFNN3dCLElBQWtCeW9CLEVBQVdBLEVBQVM1ekQsV0FBV3c1QixFQUFNZ0IsYUFBZTJRLEVBQzVFek4sRUFBT2syQixFQUFTM3BDLGdCQUVoQjRsRCxHQUFvQyxJQUF2QnRkLEVBQVVyeUQsVUFBa0JqVyxFQUFLc3BELFFBQVFnZixNQUFnQkEsRUFBVXRvQyxpQkFBeUMsSUFBdEJ1UCxFQUFNZ0IsWUFDL0csR0FBSXdoQyxJQUFRQSxFQUFJL3hDLGtCQUFzQnNvQyxHQUFhdG9FLEVBQUs0bkMsWUFBWTBnQyxFQUFVdG9DLGtCQUFzQjRsRCxHQUFhNWxGLEVBQUs0bkMsWUFBWTZMLElBQVMsQ0FDdkksTUFBTXl5QixFQUFvQnhtRSxFQUFLc2xFLGlCQUFpQnZ4QixHQUM1Q3l5QixHQUNBbGxFLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFDa0MsSUFBaENxbEUsRUFBUzlrRSxZQUFZZSxRQUFjNUYsRUFBS3NwQixXQUFXcWdELElBQzhCLElBQWpGanFFLEVBQUs4K0IsZ0JBQWdCMG5DLEVBQWtCaGxFLE9BQVFnbEUsRUFBa0IzaEUsYUFBdUI3RSxFQUFLeW1FLFFBQzFGbm1FLEVBQUs0bkMsWUFBWTZMLEtBQ3hCenlDLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFDRnRFLEVBQUtzcEIsV0FBV21xQixJQUVwQixNQUdKLEdBQUlzK0IsR0FBTy94RSxFQUFLZ25ELGNBQWMrcUIsRUFBSS94QyxpQkFBa0IsQ0FDaERoL0IsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGdEUsRUFBS3NwQixXQUFXeW9ELEVBQUkveEMsaUJBQ3BCLE9BSVIsTUFDSixLQUFLLEdBQ0QsR0FBSXNsRCxFQUFtQixDQUNuQnRrRixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBQ0Y1RSxFQUFLMEIsUUFBUWtrRixHQUFtQnhzRCxRQUFReDdCLEtBQUtvQyxHQUM3QyxNQUdKLEdBQUkybEYsR0FBZXRoQixFQUFNeWhCLGNBQWUsQ0FDcEN4a0YsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGLE1BSUosR0FBSXkvRCxFQUFNd2dCLGtCQUFrQmgxQyxHQUFPLEdBQVEsQ0FDdkN2dUMsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGLE1BSUosSUFBS3RFLEVBQUs2L0IsZ0JBQWdCcWhCLElBQWdELE9BQTlCQSxFQUFjcFcsYUFBeUI5cUMsRUFBS3N3QyxtQkFBbUI0USxFQUFjcFcsY0FBMEQsT0FBMUNvVyxFQUFjcFcsWUFBWUEsY0FBMEJ5RSxFQUFNZ0IsY0FBZ0IyUSxFQUFjcjhDLFlBQVllLE9BQVEsQ0FDalAsTUFBTWlnRixFQUFTbGMsRUFBU253QyxtQkFDeEIsSUFBS3FzRCxFQUFRLE1BQ2IsR0FBSTdsRixFQUFLNG5DLFlBQVlpK0MsR0FBUyxDQUcxQixHQUZBN2tGLEVBQUU0SCxpQkFFRTVJLEVBQUtzd0MsbUJBQW1CcTVCLEtBQ3hCM3BFLEVBQUtzcEIsV0FBV3FnRCxHQUVaM3BFLEVBQUtxcEQsUUFBUXc4QixJQUFTLENBQ3RCLElBQUlob0UsRUFBTzdkLEVBQUsyekIsZ0JBQWdCa3lELEVBQVE3bEYsRUFBS3d4QyxRQUFRLEdBQ3JEM3pCLEVBQU9BLEVBQUt3dUIsbUJBQXFCeHVCLEVBQ2pDbmUsRUFBS2d6QixTQUFTN1UsRUFBTSxFQUFHQSxFQUFNLEdBQzdCLE1BS1IsTUFBTXFvRCxFQUFvQnhtRSxFQUFLc2xFLGlCQUFpQjZnQixHQUM1QzNmLEdBQ0FsbEUsRUFBRXNELG1CQUNtRixJQUFqRjVFLEVBQUs4K0IsZ0JBQWdCMG5DLEVBQWtCaGxFLE9BQVFnbEUsRUFBa0IzaEUsYUFBdUI3RSxFQUFLeW1FLFFBQzFGbm1FLEVBQUs0bkMsWUFBWWkrQyxLQUN4QjdrRixFQUFFc0Qsa0JBQ0Z0RSxFQUFLc3BCLFdBQVd1OEQsSUFHcEIsT0FJUixJQUFLUixJQUFnQjNsRixFQUFLeXBFLFlBQVk1NUIsRUFBTWMsYUFBY2QsRUFBTWlCLFlBQWUwUSxJQUFrQnlvQixHQUFhQSxFQUFTNXpELFdBQVd3NUIsRUFBTWdCLGNBQXdCLENBQzVKLE1BQU13aEMsRUFBTTd3QixJQUFrQnlvQixHQUFXQSxFQUFTNXpELFdBQVd3NUIsRUFBTWdCLGNBQWdDMlEsRUFFbkcsR0FBSTZ3QixHQUFPL3hFLEVBQUtnbkQsY0FBYytxQixFQUFJam5DLGFBQWMsQ0FDNUM5cEMsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGdEUsRUFBS3NwQixXQUFXeW9ELEVBQUlqbkMsYUFDcEIsTUFDRyxHQUFJOXFDLEVBQUs0bkMsWUFBWW1xQyxHQUFNLENBQzlCL3dFLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFDRnRFLEVBQUtzcEIsV0FBV3lvRCxHQUNoQixPQWNSLElBVEtzVCxHQUFlM2xGLEVBQUswcEUsY0FBYzc1QixFQUFNYyxhQUFjZCxFQUFNaUIsVUFBVyxRQUNwRXh3QyxFQUFLNi9CLGdCQUFnQjhwQyxFQUFTbndDLHNCQUM5Qjk1QixFQUFLK2lFLGlCQUFtQmtILEVBQVNwakIsWUFLekNvakIsRUFBVzNwRSxFQUFLbzlCLGlCQUFpQm1TLEVBQU1ZLGVBQWdCLE1BQ3ZEZytCLEVBQVVudUUsRUFBSzR3QyxzQkFBc0IrNEIsRUFBVSxNQUMzQzNwRSxFQUFLMC9CLFdBQVdpcUMsSUFBYTNwRSxFQUFLbXZDLE9BQU9nL0IsS0FBYWp0QixJQUFrQnlvQixHQUF3QyxJQUEzQnpvQixFQUFjanJDLFlBQW9CaXJDLEVBQWNwVyxhQUFlOXFDLEVBQUttdkMsT0FBTytSLEVBQWNwVyxnQkFDN0s5cUMsRUFBS285QixpQkFBaUJtUyxFQUFNWSxlQUFnQixRQUFVbndDLEVBQUtvOUIsaUJBQWlCbVMsRUFBTWMsYUFBYyxNQUFRODlCLEVBQVF2K0MsU0FBUzJmLEVBQU1jLGNBQWlCZCxFQUFNaUIsWUFBYzBRLEVBQWNyOEMsWUFBWWUsUUFBVTJwQyxFQUFNVSxZQUFlLENBQzFOVixFQUFNWSxpQkFBbUJaLEVBQU1jLGNBQWMzd0MsRUFBS2dxRSxhQUV0RCxJQUFJajRCLEVBQU96eEMsRUFBSytuRCxhQUFhNGhCLEVBQVN6cUQsU0FBVWxmLEVBQUttdkMsUUFBUSxHQUU3RCxHQURBc0MsRUFBT0EsR0FBUWs0QixFQUFTbndDLG9CQUFzQjIwQyxFQUFRcGxFLFdBQVd5d0IsbUJBQzdEaVksSUFBU3p4QyxFQUFLbXZDLE9BQU9zQyxJQUFTenhDLEVBQUsrbkQsYUFBYXRXLEVBQUt2eUIsU0FBVWxmLEVBQUttdkMsUUFBUSxJQUFTLENBR3JGLElBQUl1MkMsRUFBS3htRSxFQUNULEdBSEFsZSxFQUFFNEgsaUJBR0U1SSxFQUFLbXZDLE9BQU9zQyxHQUFPLENBQ25CLE1BQU16N0IsRUFBUXk3QixFQUFLcEYsa0JBR25CLElBRkFudEIsRUFBV2xKLEVBQU1ELFdBQ2pCMnZFLEVBQU14bUUsRUFBUyxHQUNSQSxFQUFTLElBQ1p5cUQsRUFBU3hxQyxhQUFhamdCLEVBQVMsR0FBSXV5QixHQUV2Q3p4QyxFQUFLc3BCLFdBQVd0VCxPQUNiLENBR0gsSUFGQTB2RSxFQUFNajBDLEVBQUtuOEIsV0FDWDRKLEVBQVd1eUIsRUFBSzE3QixXQUNUbUosRUFBUyxJQUNaeXFELEVBQVNwcEUsWUFBWTJlLEVBQVMsSUFFbENsZixFQUFLc3BCLFdBQVdtb0IsR0FFcEIveEMsRUFBS2d6QixTQUFTZ3pELEVBQUssRUFBR0EsRUFBSyxHQUUzQmhtRixFQUFLc3pCLFFBQVEvcUIsTUFBSyxHQUV0QixNQUdKLE1BQ0osS0FBSyxFQUNELEdBQUlxOUUsR0FBcUJ6akYsRUFBUWczRCxXQUFZLE1BRTdDLEdBREE3M0QsRUFBRTRILGlCQUNFbzhFLEdBQVF2c0QsR0FBT3o0QixFQUFLK29CLGFBQWFtNEIsR0FBZ0IsTUFFckQsTUFBTTZwQixHQUFXeDdCLEVBQU1VLFdBQWF2d0MsRUFBS3lwRSxZQUFZNTVCLEVBQU1ZLGVBQWdCWixFQUFNZ0IsYUFDM0U1ZCxFQUFrQmp6QixFQUFLa3pCLG9CQUFvQixNQUNqRHN1QixFQUFnQnhoRCxFQUFLNHFCLG1CQUNyQixNQUFNOUwsRUFBUSxHQUNkLElBQUlzbkUsRUFBUSxHQUNSQyxFQUFLL2xGLEVBQUswL0IsV0FBVy9NLEVBQWdCLElBQUtxekQsRUFBS2htRixFQUFLMC9CLFdBQVcvTSxFQUFnQkEsRUFBZ0Ivc0IsT0FBUyxJQUN4RzNILEVBQUksQ0FBQ3kxQixHQUFJNmIsRUFBTVksZUFBZ0JDLEdBQUliLEVBQU1nQixZQUFhM2MsR0FBSTJiLEVBQU1jLGFBQWNJLEdBQUlsQixFQUFNaUIsV0FDNUYsSUFBSyxJQUF5Q25nQyxFQUFyQ2xULEVBQUksRUFBRzRKLEVBQU00ckIsRUFBZ0Ivc0IsT0FBV3pJLEVBQUk0SixFQUFLNUosSUFFdEQsR0FEQWtULEVBQUlzaUIsRUFBZ0J4MUIsR0FDaEI2QyxFQUFLMC9CLFdBQVdydkIsR0FBSSxDQUNwQixJQUFLQSxFQUFFa3BCLHlCQUEyQjlhLEVBQzlCLFNBRUFELEVBQU12VyxLQUFLb0ksUUFHZnkxRSxFQUFNNzlFLEtBQUtvSSxHQUtuQixHQUFJbU8sRUFBTTVZLE9BQVMsR0FBS21sRSxHQUFVcnJFLEVBQUswQixRQUFRNkIsS0FDM0NoRixFQUFJeUIsRUFBSzBCLFFBQVE2QixLQUFLbXdDLGVBQWU5MUMsS0FBS29DLEVBQU0rZSxFQUFPRCxPQUNwRCxDQUVILE1BQU00akUsRUFBWXBpRixFQUFLaTVCLGlCQUFpQmlvQixFQUFlbGhELEVBQUt3eEMsUUFDNUQsR0FBSTR3QyxHQUFhclgsRUFBUSxDQUNyQixNQUFNem9ELEVBQVF0aUIsRUFBS2k1QixpQkFBaUJtcEQsRUFBVyxTQUN6QzVqRSxFQUFReGUsRUFBS3V3QixnQkFBZ0JqTyxFQUFPdGlCLEVBQUt3eEMsUUFDL0MsSUFBSTJXLEVBQU0xcEMsRUFBUXplLEVBQUtxb0QsUUFBUTdwQyxFQUFPNGpFLEdBQWFwaUYsRUFBS29vRCxRQUFRNXBDLEVBQU80akUsR0FFbkVqNkIsSUFBUTNwQyxFQUFNNVksUUFBVzZZLElBQU8wcEMsRUFBTSxJQUM3QixJQUFUQSxHQUFjMXBDLElBQU8wcEMsRUFBTTNwQyxFQUFNNVksT0FBUyxHQUU5QyxJQUFJcWdGLEVBQVd6bkUsRUFBTTJwQyxHQUNyQixJQUFLODlCLEVBQVUsTUFDZkEsRUFBV0EsRUFBUzU1QyxtQkFBcUI0NUMsRUFDekN2bUYsRUFBS2d6QixTQUFTdXpELEVBQVUsRUFBR0EsRUFBVSxHQUNyQyxNQUdKSCxFQUFRQSxFQUFNMXJFLE9BQU9vRSxHQUNyQnVuRSxFQUFLQyxFQUFLLEtBSWQsR0FBSUYsRUFBTWxnRixPQUFTLEVBQ2YsR0FBSzZZLEVBcUNFLENBQ0gsTUFBTTFYLEVBQU0rK0UsRUFBTWxnRixPQUFTLEVBQzNCLElBQUssSUFBVzY0QixFQUFQdGhDLEVBQUksRUFBU0EsR0FBSzRKLEVBQUs1SixJQUFLLENBQ2pDc2hDLEVBQU9xbkQsRUFBTTNvRixHQUFHNFksV0FDaEIsSUFBSyxJQUErQkMsRUFBM0J4WSxFQUFJLEVBQUdxMUMsRUFBT3BVLEVBQUs3NEIsT0FBZXBJLEVBQUlxMUMsSUFDM0M3OEIsRUFBUXlvQixFQUFLamhDLEdBQ1J3WSxHQUY0Q3hZLElBR2pELElBQUl3QyxFQUFLc3dDLG1CQUFtQnQ2QixHQUE1QixDQUVJLFlBQVkvVSxLQUFLK1UsRUFBTW5SLGFBQ3ZCN0UsRUFBS3NwQixXQUFXdFQsR0FDVCxXQUFXL1UsS0FBSytVLEVBQU1uUixlQUM3Qm1SLEVBQU1uUixZQUFjbVIsRUFBTW5SLFlBQVl5SSxRQUFRLFdBQVksS0FHOUQsT0FJUixNQUFNZ0ksRUFBYXRWLEVBQUsyekIsZ0JBQWdCbXlELEVBQU0sR0FBSSxRQUFRLEdBQ3BESSxFQUFXbG1GLEVBQUsyekIsZ0JBQWdCbXlELEVBQU0vK0UsR0FBTSxRQUFRLElBQ3JEZy9FLEdBQU16d0UsSUFDUHJYLEVBQUV5MUIsR0FBS3BlLEVBQ1ByWCxFQUFFbXlDLEdBQUssSUFFTjQxQyxHQUFNRSxJQUNQam9GLEVBQUUyMUIsR0FBS3N5RCxFQUNQam9GLEVBQUV3eUMsR0FBS3kxQyxFQUFTcmhGLFlBQVllLFlBaEV4QixDQUNSLE1BQU11Z0YsRUFBVW5tRixFQUFLNHFDLGVBQWUsSUFBSWxsQyxFQUFHd0osTUFBTXhQLEVBQUt1aEUsVUFBVU0sUUFBVSxHQUFHaHdELEtBQUssTUFDbEYsR0FBcUIsSUFBakJ1MEUsRUFBTWxnRixPQUFjLENBQ3BCLE1BQU13Z0YsRUFBWTFtRixFQUFLb3pCLFdBQVdxekQsRUFBUyxNQUFNLEdBQ2pELElBQUtDLEVBQVcsT0FBTyxFQUNsQkwsSUFDRDluRixFQUFFeTFCLEdBQUt5eUQsRUFDUGxvRixFQUFFbXlDLEdBQUtnMkMsRUFBVTUxQyxXQUVoQncxQyxJQUNEL25GLEVBQUUyMUIsR0FBS3V5RCxFQUNQbG9GLEVBQUV3eUMsR0FBSzIxQyxFQUFVNTFDLGVBRWxCLENBQ0gsTUFBTXpwQyxFQUFNKytFLEVBQU1sZ0YsT0FBUyxFQUMzQixJQUFLLElBQVdvUSxFQUFQN1ksRUFBSSxFQUFVQSxHQUFLNEosRUFBSzVKLElBQzdCNlksRUFBUTh2RSxFQUFNM29GLEdBQUdtWSxXQUNaVSxJQUVEaFcsRUFBS3NwRCxRQUFRdHpDLEdBQ2I4dkUsRUFBTTNvRixHQUFHZ2lDLGFBQWFnbkQsRUFBUXZvRCxXQUFVLEdBQVE1bkIsR0FFaERBLEVBQU1uUixZQUFjc2hGLEVBQVF0aEYsWUFBY21SLEVBQU1uUixhQUl4RCxNQUFNeVEsRUFBYXRWLEVBQUsyekIsZ0JBQWdCbXlELEVBQU0sR0FBSSxRQUFRLEdBQ3BESSxFQUFXbG1GLEVBQUsyekIsZ0JBQWdCbXlELEVBQU0vK0UsR0FBTSxRQUFRLElBQ3JEZy9FLEdBQU16d0UsSUFDUHJYLEVBQUV5MUIsR0FBS3BlLEVBQ1ByWCxFQUFFbXlDLEdBQUssSUFFTjQxQyxHQUFNRSxJQUNQam9GLEVBQUUyMUIsR0FBS3N5RCxFQUNQam9GLEVBQUV3eUMsR0FBS3kxQyxFQUFTcmhGLFlBQVllLFNBbUM1Q2xHLEVBQUtnekIsU0FBU3owQixFQUFFeTFCLEdBQUl6MUIsRUFBRW15QyxHQUFJbnlDLEVBQUUyMUIsR0FBSTMxQixFQUFFd3lDLElBRWxDL3dDLEVBQUtzekIsUUFBUS9xQixNQUFLLEdBRWxCLE1BQ0osS0FBSyxHQUVELE1BQU1vK0UsRUFBZXJtRixFQUFLd25ELHFCQUFxQnRHLEVBQWUsTUFFOUQsR0FBSXhoRCxFQUFLd2dFLGNBQWUsQ0FDcEIsSUFBSW9tQixFQUFZLEdBT2hCLEdBTElBLEdBREU3bkUsR0FBUzRuRSxHQUFpQjVuRSxFQUNoQixPQUVBLElBQU1rckQsRUFBU2w1QyxTQUFXLFVBQVlrNUMsRUFBU2w1QyxTQUFXLEtBR3JFL3dCLEVBQUs4cEUsZUFBZThjLEVBQVcsYUFFaEMsT0FEQXRsRixFQUFFNEgsa0JBQ0ssRUFJZixJQUFLNlYsSUFBVTZtRSxFQUFtQixDQUM5QixNQUFNaUIsRUFBZ0I3bUYsRUFBSzBwRSxjQUFjNzVCLEVBQU1jLGFBQWNkLEVBQU1pQixVQUFXLE9BQ3hFZzJDLEVBQWtCOW1GLEVBQUswcEUsY0FBYzc1QixFQUFNWSxlQUFnQlosRUFBTWdCLFlBQWEsU0FHcEYsR0FBSWcyQyxJQUFrQixZQUFZdGxGLEtBQUswb0UsRUFBU2w1QyxXQUFhLFFBQVF4dkIsS0FBSzBvRSxFQUFTbDVDLFdBQVksQ0FDM0ZzekMsRUFBTTBpQixjQUFjemxGLEdBQ3BCLElBQUltb0IsRUFBTyxLQUNYLE1BQU1pM0IsRUFBWTFnRCxFQUFLZy9CLGdCQUFnQmlyQyxFQUFVOW5FLEVBQVFnMUQsWUFFekQsR0FBSTB2QixHQUFpQkEsRUFBYzNnRixPQUFTLEVBQUcsQ0FDM0N1akIsRUFBT285RCxFQUFjNXBELE1BQ3JCLE1BQU0rcEQsRUFBWXY5RCxFQUNsQixLQUFNbzlELEVBQWMzZ0YsT0FBUyxHQUN6QnVqQixFQUFPQSxFQUFLNW9CLFlBQVlnbUYsRUFBYzVwRCxPQUUxQ3lqQixFQUFVNy9DLFlBQVltbUYsR0FJMUIsR0FEQXY5RCxFQUFRQSxFQUE4QkEsRUFBSzVvQixZQUFZNi9DLEVBQVU5cUMsWUFBbEQ4cUMsRUFBVTlxQyxXQUNyQnRWLEVBQUtzcEQsUUFBUW5nQyxHQUFPLENBQ3BCLE1BQU00aUQsRUFBWS9yRSxFQUFLNHFDLGVBQWU1cUMsRUFBSzZxQyxnQkFDM0MxaEIsRUFBS3BnQixXQUFXbzJCLGFBQWE0c0MsRUFBVzVpRCxHQUN4Q3pwQixFQUFLZ3pCLFNBQVNxNUMsRUFBVyxFQUFHQSxFQUFXLFFBRXZDcnNFLEVBQUtnekIsU0FBU3ZKLEVBQU0sRUFBR0EsRUFBTSxHQUVqQyxNQUNHLEdBQUlnbEQsR0FBV3hFLElBQWEzcEUsRUFBS3d4QyxPQUFPMjhCLEtBQWEsZ0JBQWdCbHRFLEtBQUtrdEUsRUFBUTE5QyxVQUFXLENBQ2hHLE1BQU04ZSxFQUFRN3ZDLEVBQUs4dkMsV0FDbkIsR0FBRzl2QyxFQUFLeXBFLFlBQVk1NUIsRUFBTWMsYUFBY2QsRUFBTWlCLFlBQWN4d0MsRUFBS212QyxPQUFPK1IsRUFBY3BXLGFBQWMsQ0FDaEdpNUIsRUFBTTBpQixjQUFjemxGLEdBQ3BCLE1BQU1xK0IsRUFBUXIvQixFQUFLQyxjQUFjLE1BQzNCOGxFLEVBQUsvbEUsRUFBS0MsY0FBYyxNQUM5Qm8vQixFQUFNOStCLFlBQVl3bEUsR0FFbEI0RCxFQUFTNWdFLFdBQVdvMkIsYUFBYUUsRUFBT3NxQyxFQUFTbndDLG9CQUNqRDZGLEVBQU05K0IsWUFBWTJnRCxFQUFjcFcsYUFFaENwckMsRUFBS2d6QixTQUFTcXpDLEVBQUksRUFBR0EsRUFBSSxHQUN6QixNQUdKLElBQWdELElBQTNDeDJCLEVBQU11MkIsd0JBQXdCN3ZELFdBQWtCczVCLEVBQU11MkIsd0JBQXdCdHNDLHFCQUE4Qng1QixFQUFLc3dDLG1CQUFtQnE1QixFQUFTdFQsVUFBVXZ1RCxVQUFZOUgsRUFBSzAvQixXQUFXaXFDLEVBQVNud0Msb0JBQXFCLENBQ2xOdXFDLEVBQU0waUIsY0FBY3psRixHQUNwQixJQUFJcStCLEVBQVEsS0FFWixHQUFJci9CLEVBQUswL0IsV0FBV3l1QyxFQUFRcGxFLFlBQWEsQ0FDckMsTUFBTTQ5RSxFQUFXaGQsRUFBUzVnRSxXQUFXQSxXQUNyQ29sRSxFQUFVd1ksRUFBUzU5RSxXQUNuQixNQUFNNjlFLEVBQWM1bUYsRUFBS0MsY0FBYyxNQUN2QzJtRixFQUFZbGpGLFVBQVksT0FDeEIxRCxFQUFLMG5ELGtCQUFrQmsvQixFQUFhamQsRUFBVTluRSxFQUFRazJELGVBQ3REMTRCLEVBQVF1bkQsRUFDUnpZLEVBQVFodkMsYUFBYUUsRUFBT3NuRCxFQUFTbnRELHdCQUNsQyxDQUNILE1BQU00bUIsRUFBWXBnRCxFQUFLd3hDLE9BQU8yOEIsRUFBUXBsRSxZQUFjLE1BQVEvSSxFQUFLbXZDLE9BQU9nL0IsRUFBUXBsRSxZQUFjLEtBQVEvSSxFQUFLNi9CLGdCQUFnQnN1QyxFQUFRMzBDLHNCQUF3Qng1QixFQUFLdS9CLHFCQUFxQjR1QyxFQUFRMzBDLG9CQUF1QjIwQyxFQUFRMzBDLG1CQUFtQi9JLFNBQVl6d0IsRUFBSzYvQixnQkFBZ0JzdUMsRUFBUTUwQywwQkFBNEJ2NUIsRUFBS3UvQixxQkFBcUI0dUMsRUFBUTUwQyx3QkFBMkI0MEMsRUFBUTUwQyx1QkFBdUI5SSxTQUFXNXVCLEVBQVFnMUQsV0FDbmF4M0IsRUFBUXIvQixFQUFLQyxjQUFjbWdELEdBQzNCcGdELEVBQUswbkQsa0JBQWtCcm9CLEVBQU9zcUMsRUFBVTluRSxFQUFRazJELGVBQ2hELE1BQU05a0IsRUFBT3Z6QyxFQUFLMnJDLHlCQUF5QjhpQyxFQUFTLENBQUN4RSxHQUFXLE1BQU0sR0FBTSxHQUM1RTEyQixFQUFLRSxHQUFHaFUsYUFBYUUsRUFBTzRULEVBQUtyZixJQUdyQ3lMLEVBQU0zN0IsVUFBWSxPQUNsQjFELEVBQUswNUIscUJBQXFCaXdDLEVBQVUsS0FBTSxNQUMxQ2pxRSxFQUFLZ3pCLFNBQVMyTSxFQUFPLEVBQUdBLEVBQU8sR0FDL0IsT0FJUixHQUFJZ25ELEVBQWMsQ0FDZHRpQixFQUFNMGlCLGNBQWN6bEYsR0FDcEIsTUFBTTZsRixFQUFrQjNsQyxJQUFrQm1sQyxFQUNwQ1MsRUFBYXBuRixFQUFLb3ZCLGVBQ2xCNVAsRUFBV2dpQyxFQUFjbnJDLFdBQVkwMkMsRUFBU3E2QixFQUFXeGYsWUFBYTd6QixFQUFPeU4sRUFBYzNuQix1QkFBd0JrWSxFQUFPeVAsRUFBY3BXLFlBRTlJLElBQUs5cUMsRUFBS3FuRCwyQkFBMkJnL0IsSUFBbUJubkUsSUFBYzJuRSxHQUFtQnQzQyxFQUFNVSxXQUFhL3dCLEVBQVN0WixPQUFTLEdBQUs2bUQsRUFBUyxHQUFLenNELEVBQUtzcEQsUUFBUXBxQyxFQUFTdXRDLE9BQWN2dEMsRUFBU3V0QyxFQUFTLE1BQVN2dEMsRUFBU3V0QyxFQUFTLElBQU16c0QsRUFBS3N3QyxtQkFBbUJweEIsRUFBU3V0QyxFQUFTLEdBQUc1bkQsZUFBbUQsSUFBbENxYSxFQUFTdXRDLEVBQVMsR0FBR3gyQyxVQUFrQmpXLEVBQUtzd0MsbUJBQW1CcHhCLEVBQVN1dEMsRUFBUyxHQUFHNW5ELGVBQW1CNG5ELEVBQVMsR0FBS3pzRCxFQUFLc3BELFFBQVFwcUMsRUFBU3V0QyxFQUFTLE1BQ3BibzZCLEdBQW1CN21GLEVBQUtzd0MsbUJBQW1CNFEsRUFBY3I4QyxjQUFnQjdFLEVBQUtzcEQsUUFBUTdWLEtBQVV6ekMsRUFBS3NwRCxRQUFRN1YsRUFBS3pULG1CQUFxQmhnQyxFQUFLc3dDLG1CQUFtQm1ELEVBQUt6VCxnQkFBZ0JuN0IsaUJBQW1CNHNDLElBQVV6eEMsRUFBS3NwRCxRQUFRN1gsSUFBU3p4QyxFQUFLc3dDLG1CQUFtQm1CLEVBQUs1c0MsZUFBa0IsQ0FDaFJnaUYsRUFBaUI3bUYsRUFBS3NwQixXQUFXcEssRUFBU3V0QyxFQUFTLElBQ3REenNELEVBQUtzcEIsV0FBVzQzQixHQUNyQixNQUFNN2hCLEVBQVEzL0IsRUFBS2cvQixnQkFBZ0IybkQsRUFBZXJtRixFQUFLNi9CLGdCQUFnQndtRCxFQUFhN3NELHNCQUF3Qng1QixFQUFLdS9CLHFCQUFxQjhtRCxFQUFhN3NELG9CQUF1QjZzRCxFQUFhN3NELG1CQUFxQixNQUM1TXg1QixFQUFLZ3lDLHFCQUFxQjNTLEVBQU9nbkQsR0FDakMzbUYsRUFBS2d6QixTQUFTMk0sRUFBTyxFQUFHQSxFQUFPLEdBQy9CLE1BR0osR0FBSXduRCxFQUFpQixDQUNqQnp0RCxFQUFVMnRELFdBQWF4M0MsRUFBTVUsV0FBYWp3QyxFQUFLc3BELFFBQVEvWixFQUFNWSxlQUFlcDZCLFdBQVd3NUIsRUFBTWdCLFlBQWMsSUFBTyxPQUFTLFlBQWEsR0FBTSxHQUU5SSxJQUFJMDJCLEVBQVk2ZixFQUFXN2YsVUFDM0IsTUFBTStmLEVBQVVGLEVBQVd4ZixZQUN2QitlLElBQWlCcGYsSUFDakJBLEVBQVlBLEVBQVVseEQsV0FBV2l4RSxFQUFVdjZCLEVBQVMsRUFBSXU2QixFQUFVLEVBQUlBLElBRzFFdG5GLEVBQUtnekIsU0FBU3UwQyxFQUFXLEVBQUdBLEVBQVcsT0FDcEMsQ0FDSCxNQUFNZ2dCLEVBQVlILEVBQVc3ZixVQUFVbjhCLFlBQ2pDaTdCLEVBQUsvbEUsRUFBS0MsY0FBYyxNQUM5QlAsRUFBS296QixXQUFXaXpDLEVBQUksTUFBTSxHQUUxQixNQUFNbWhCLEVBQVNuaEIsRUFBRy9sQyxnQkFBaUJtbkQsRUFBU3BoQixFQUFHajdCLFlBQzFDOXFDLEVBQUtzcEQsUUFBUTI5QixJQUFlam5GLEVBQUtzcEQsUUFBUTQ5QixJQUFhQyxJQUFVbm5GLEVBQUtzd0MsbUJBQW1CNjJDLEdBSXpGem5GLEVBQUtnekIsU0FBU3kwRCxFQUFRLEVBQUdBLEVBQVEsSUFIakNwaEIsRUFBR2g5RCxXQUFXbzJCLGFBQWE0bUMsRUFBR25vQyxXQUFVLEdBQVFtb0MsR0FDaERybUUsRUFBS2d6QixTQUFTcXpDLEVBQUksRUFBR0EsRUFBSSxJQU1qQ2hDLEVBQU04Z0IsZ0JBQWlCLEVBQ3ZCLE1BSUosR0FBSXQxQyxFQUFNVSxZQUFjdTJDLEdBQW1CRCxHQUFnQixDQUN2RHhpQixFQUFNMGlCLGNBQWN6bEYsR0FDakI4N0QsSUFDQzZNLEVBQVNqbUUsVUFBWW81RCxFQUFZOW9ELFNBQVMyMUQsRUFBU2ptRSxXQUFXNEosUUFBUSxlQUFnQixLQVUxRixNQUFNODVFLEVBQVVwbkYsRUFBS0MsY0FBYyxNQUM3Qm1nRCxFQUFZcGdELEVBQUtDLGNBQWMwcEUsRUFBU2w1QyxVQUM5Q3p3QixFQUFLMG5ELGtCQUFrQnRILEVBQVd1cEIsRUFBVTluRSxFQUFRazJELGVBRXBELElBQUkvaEQsRUFBUW94RSxFQUNaLEVBQUcsQ0FDQyxJQUFLcG5GLEVBQUtzcEQsUUFBUXBJLElBQTZDLElBQTNCQSxFQUFjanJDLFNBQWdCLENBQzlELE1BQU01RixFQUFJNndDLEVBQWN0akIsV0FBVSxHQUNsQ3Z0QixFQUFFOVAsWUFBWXlWLEdBQ2RBLEVBQVEzRixFQUVaNndDLEVBQWdCQSxFQUFjbjRDLGlCQUMxQjRnRSxJQUFhem9CLEdBQWlCeW9CLEVBQVMvNUMsU0FBU3N4QixJQUV4RGQsRUFBVTcvQyxZQUFZeVYsR0FDdEIyekQsRUFBUzVnRSxXQUFXbzJCLGFBQWFpaEIsRUFBV29tQyxJQUFvQkQsRUFBZ0I1YyxFQUFXQSxFQUFTbndDLG9CQUNoRytzRCxHQUNBN21GLEVBQUtnekIsU0FBUzAwRCxFQUFTLEVBQUdBLEVBQVMsR0FFdkMsTUFHSixHQUFJemQsRUFBVSxDQUdWLElBQUl0cUMsRUFGSnIrQixFQUFFc0Qsa0JBR0YsSUFBSW1vRCxFQUFTLEVBQ2IsR0FBS2xkLEVBQU1VLFVBNkNINVEsRUFEQXIvQixFQUFLc3dDLG1CQUFtQnE1QixHQUNoQmpxRSxFQUFLZy9CLGdCQUFnQmlyQyxFQUFVQSxFQUFTL3JDLFdBQVUsSUFFbEQ1OUIsRUFBSzgvQixhQUFheVAsRUFBTWMsYUFBY2QsRUFBTWlCLFVBQVd4d0MsRUFBS215QyxnQkFBZ0J3M0IsUUEvQ3RFLENBQ2xCLE1BQU0wZCxFQUFjcm5GLEVBQUtvOUIsaUJBQWlCbVMsRUFBTVksZUFBZ0IsUUFBVW53QyxFQUFLbzlCLGlCQUFpQm1TLEVBQU1jLGFBQWMsTUFDOUcrUCxFQUFZdXBCLEVBQVMvckMsV0FBVSxHQUNyQ3dpQixFQUFVMThDLFVBQVksT0FDdEIsTUFBTXpGLEVBQUl5QixFQUFLZ3FFLGFBRWYsR0FEQXJxQyxFQUFRci9CLEVBQUtvOUIsaUJBQWlCbi9CLEVBQUU4L0IsVUFBVyxPQUN0Q3NCLEVBQU8sQ0FDSnIvQixFQUFLK29CLGFBQWE5cUIsRUFBRTgvQixhQUNwQmdtQyxFQUFNMGlCLGNBQWN6bEYsR0FDcEJyQixFQUFRbUIsUUFBUTB2QixRQUFRandCLFlBQVk2L0MsR0FDcEMvZ0IsRUFBUStnQixFQUNScGdELEVBQUswbkQsa0JBQWtCcm9CLEVBQU9zcUMsRUFBVTluRSxFQUFRazJELGVBQ2hEcjRELEVBQUtnekIsU0FBUzJNLEVBQU9vdEIsRUFBUXB0QixFQUFPb3RCLElBRXhDLE1BR0osTUFBTTY2QixFQUFhdG5GLEVBQUs0d0Msc0JBQXNCM3lDLEVBQUU4L0IsV0FFaEQsR0FEQXNCLEVBQVFBLEVBQU16UCxTQUFTMDNELEdBQWN0bkYsRUFBSzJ6QixnQkFBZ0IyekQsRUFBWXRuRixFQUFLbzlCLGlCQUFpQnorQixLQUFLcUIsSUFBU3EvQixFQUN0R2dvRCxHQUNBLEdBQUlkLElBQWtCQyxFQUNsQm5uRCxFQUFNdDJCLFdBQVdvMkIsYUFBYWloQixFQUFhbmlELEVBQUUrc0UsZUFBaUIvc0UsRUFBRTgvQixZQUFjOS9CLEVBQUUrc0UsY0FBNEMzckMsRUFBM0JBLEVBQU03RixvQkFDdkc2RixFQUFRK2dCLEVBQ1JxTSxFQUFTLE9BR1QsR0FEQUEsRUFBU3h1RCxFQUFFd3VELE9BQ1ArNUIsRUFBaUIsQ0FDakIsTUFBTWUsRUFBU2xvRCxFQUFNdDJCLFdBQVdvMkIsYUFBYWloQixFQUFXL2dCLEdBQ3BEa25ELElBQ0FsbkQsRUFBUWtvRCxFQUNSOTZCLEVBQVMsU0FLakI4NUIsR0FBaUJDLEdBQ2pCbm5ELEVBQU10MkIsV0FBV28yQixhQUFhaWhCLEVBQVluaUQsRUFBRStzRSxlQUFpQi9zRSxFQUFFOC9CLFlBQWM5L0IsRUFBRStzRSxjQUFpQjNyQyxFQUFNN0YsbUJBQXFCNkYsR0FDM0hBLEVBQVErZ0IsRUFDUnFNLEVBQVMsR0FFVHB0QixFQUFRci9CLEVBQUs4L0IsYUFBYTdoQyxFQUFFOC9CLFVBQVc5L0IsRUFBRXd1RCxPQUFRenNELEVBQUtteUMsZ0JBQWdCdzNCLElBV2xGNUYsRUFBTTBpQixjQUFjemxGLEdBQ3BCaEIsRUFBSzBuRCxrQkFBa0Jyb0IsRUFBT3NxQyxFQUFVOW5FLEVBQVFrMkQsZUFDaERyNEQsRUFBS2d6QixTQUFTMk0sRUFBT290QixFQUFRcHRCLEVBQU9vdEIsR0FFcEMsT0FJUixHQUFJNDRCLEVBQWEsTUFRakIsR0FOSWxYLEdBQVdudUUsRUFBS2k1QixpQkFBaUJrMUMsRUFBUyxlQUFpQm51RSxFQUFLaTVCLGlCQUFpQmsxQyxFQUFTbnVFLEVBQUttdkMsVUFDL0Y0MEIsRUFBTTBpQixjQUFjemxGLEdBQ3BCMm9FLEVBQVdqcUUsRUFBS2cvQixnQkFBZ0JpckMsRUFBVSxNQUMxQ2pxRSxFQUFLZ3pCLFNBQVNpM0MsRUFBVSxFQUFHQSxFQUFVLElBR3JDMmIsRUFBbUIsQ0FDbkJ0a0YsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGNUUsRUFBS2trRSxlQUNMbGtFLEVBQUswekIsaUJBRUwsTUFBTW8wRCxFQUFjN25GLEVBQVEybEYsR0FDdEJ2bkQsRUFBWXlwRCxFQUFZeHlELFdBQ3hCNGQsRUFBVTdVLEVBQVV4RSx3QkFBMEJ3RSxFQUFVdkUsbUJBRTlELElBQUk2RixFQUFRLEtBQ1JyL0IsRUFBSzAvQixXQUFXM0IsRUFBVWgxQixZQUMxQnMyQixFQUFRci9CLEVBQUtDLGNBQWMsT0FFM0JvL0IsRUFBUXIvQixFQUFLQyxjQUFlRCxFQUFLNi9CLGdCQUFnQitTLEtBQWE1eUMsRUFBS3UvQixxQkFBcUJxVCxHQUFZQSxFQUFRbmlCLFNBQVc1dUIsRUFBUWcxRCxZQUMvSHgzQixFQUFNMzdCLFVBQVksUUFHbEIrYSxFQUFPc2YsRUFBVWgxQixXQUFXbzJCLGFBQWFFLEVBQU90QixHQUMvQ0EsRUFBVWgxQixXQUFXbzJCLGFBQWFFLEVBQU90QixFQUFVdkUsb0JBRXhEOTVCLEVBQUtnekIsU0FBUzJNLEVBQU8sRUFBR0EsRUFBTyxHQUUvQjMvQixFQUFLNjRCLFdBQVcrc0QsR0FBbUIsWUFDdUMsSUFBbEU1bEYsRUFBSzgrQixnQkFBZ0JncEQsRUFBWTF5RCxTQUFVd3dELElBQThCNWxGLEVBQUt5bUUsU0FDbkYsTUFHUCxNQUNKLEtBQUssR0FDRCxHQUFJbWYsRUFJQSxPQUhBdGtGLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxrQkFDRjVFLEVBQUswekIsa0JBQ0UsRUFLbkIsR0FBSTNVLEdBQXFCLEtBQVo3YyxFQUFnQixDQUN6QlosRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGLE1BQU0rekMsRUFBYzM0QyxFQUFLMEIsUUFBUWtoQixNQUNqQyxHQUFJKzFCLElBQWdCQSxFQUFZSSxTQUFXSixFQUFZTSxLQUFNLENBQ3pELE1BQU05NkIsRUFBTzdkLEVBQUtpNUIsaUJBQWlCMHdDLEVBQVUzcEUsRUFBS3d4QyxRQUNsRCxHQUFJM3pCLEVBRUEsWUFEQXc2QixFQUFZMkcsdUJBQXVCMWhELEtBQUtvQyxFQUFNbWUsR0FBTSxTQUl6RCxHQUFJWSxJQUFVemUsRUFBS3VqRCxVQUFZOXFCLEVBQU11c0QsSUFBcUIsS0FBWnBqRixFQUFnQixDQUNqRVosRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUNGLE1BQU1takYsRUFBTy9uRixFQUFLb3pCLFdBQVc5eUIsRUFBSzRxQyxlQUFlLE1BQ2pELEdBQUk2OEMsR0FBUUEsRUFBSzFwRCxVQUViLFlBREFyK0IsRUFBS2d6QixTQUFTKzBELEVBQUsxcEQsVUFBVzBwRCxFQUFLajNDLFVBQVdpM0MsRUFBSzFwRCxVQUFXMHBELEVBQUtqM0MsV0FLM0UsR0FBSXh3QyxFQUFLa3BDLE9BQVM4N0MsSUFBU3ZzRCxJQUFRNHNELElBQWdCdGhCLEVBQU00YyxnQkFBZ0IxL0UsS0FBS1csSUFBWTVCLEVBQUtzcEQsUUFBUS9aLEVBQU11MkIseUJBQTBCLENBQ25JLE1BQU1pRyxFQUFZL3JFLEVBQUs0cUMsZUFBZTVxQyxFQUFLNnFDLGdCQUMzQ25yQyxFQUFLb3pCLFdBQVdpNUMsRUFBVyxNQUFNLEdBQ2pDcnNFLEVBQUtnekIsU0FBU3E1QyxFQUFXLEVBQUdBLEVBQVcsR0FHdkNoSSxFQUFNMmMsa0JBQWtCei9FLEtBQUtXLEtBQzdCbEMsRUFBS2ttRSxlQUNMN0IsRUFBTWlDLHNCQUlkdWYsNEJBQTZCLFNBQVV2a0YsR0FDbkMsR0FBSUEsRUFBRStqRixTQUFVLE9BRWhCLElBQUk3akMsRUFBZ0J4aEQsRUFBSzRxQixtQkFFekIsTUFBTXM2RCxFQUFhLFNBQVU5dUUsRUFBTTIyQyxFQUFTLEdBSXhDLEdBSEF6ckQsRUFBRTRILGlCQUNGNUgsRUFBRXNELG1CQUVHd1IsRUFBTSxPQUVYLElBQUk0eEUsRUFBZ0Job0YsRUFBS3NsRSxpQkFBaUJsdkQsR0FDdEM0eEUsRUFDQWhvRixFQUFLOCtCLGdCQUFnQmtwRCxFQUFjeG1GLE9BQVF3bUYsRUFBY25qRixhQUV6RDdFLEVBQUtnekIsU0FBUzVjLEVBQU0yMkMsRUFBUTMyQyxFQUFNMjJDLEdBQ2xDL3NELEVBQUswekIsbUJBSVA5USxFQUFRdGlCLEVBQUtpNUIsaUJBQWlCaW9CLEVBQWUsU0FDbkQsR0FBSTUrQixFQUFPLENBQ1AsTUFBTWk2QixFQUFhdjhDLEVBQUtpNUIsaUJBQWlCaW9CLEVBQWUsTUFDbEQ1RSxFQUFjdDhDLEVBQUtpNUIsaUJBQWlCaW9CLEVBQWUsTUFFekQsSUFBSXltQyxFQUF1QnJyQyxFQUN2QnNyQyxFQUFzQnRyQyxFQUMxQixHQUFJQSxFQUFhLENBQ2IsS0FBT3FyQyxFQUFxQnJ5RSxZQUFZcXlFLEVBQXVCQSxFQUFxQnJ5RSxXQUNwRixLQUFPc3lFLEVBQW9CbjlCLFdBQVdtOUIsRUFBc0JBLEVBQW9CbjlCLFVBR3BGLElBQUkrM0IsRUFBaUN0aEMsRUFDckMsS0FBT3NoQyxFQUErQmx0RSxZQUFZa3RFLEVBQWlDQSxFQUErQmx0RSxXQUNsSCxNQUFNdXlFLEVBQW1CckYsSUFBbUNtRixFQUN0REcsRUFBa0J0RixJQUFtQ29GLEVBRTNELElBQUlHLEVBQWUsS0FDZnQ3QixFQUFTLEVBQ2IsR0FBa0IsS0FBZHpyRCxFQUFFWSxTQUFrQmltRixFQUFpQixDQUNyQyxNQUFNRyxFQUFjenJDLEdBQWNBLEVBQVdoakIsdUJBSTdDLElBSGlCd3VELEVBQWJDLEVBQTRCQSxFQUFZOW9FLFNBQVNvOUIsRUFBWTlDLFdBQzdDeDVDLEVBQUtzcUQsdUJBQXVCaG9DLEVBQU81aUIsRUFBS0MsUUFBUW1CLFFBQVEwdkIsU0FFckV1M0QsRUFBYXQ5QixXQUFXczlCLEVBQWVBLEVBQWF0OUIsVUFDdkRzOUIsSUFBY3Q3QixFQUFTczdCLEVBQWFsakYsWUFBWWUsYUFDakQsR0FBa0IsS0FBZDVFLEVBQUVZLFNBQWtCa21GLEVBQWdCLENBQzNDLE1BQU1sckMsRUFBVUwsR0FBY0EsRUFBVy9pQixtQkFJekMsSUFIYXV1RCxFQUFUbnJDLEVBQXdCQSxFQUFRMTlCLFNBQVNvOUIsRUFBWTlDLFdBQ3JDeDVDLEVBQUswcUQsbUJBQW1CcG9DLEVBQU81aUIsRUFBS0MsUUFBUW1CLFFBQVEwdkIsU0FFakV1M0QsRUFBYXp5RSxZQUFZeXlFLEVBQWVBLEVBQWF6eUUsV0FHaEUsR0FBSXl5RSxFQUVBLE9BREFuRCxFQUFXbUQsRUFBY3Q3QixJQUNsQixFQUlmLE1BQU1pN0IsRUFBZ0Job0YsRUFBS3NsRSxpQkFBaUI5akIsR0FDNUMsR0FBSXdtQyxFQUFlLENBQ2YsTUFBTU8sRUFBaUIsUUFBUWhuRixLQUFLRCxFQUFFWSxTQUNoQ3NtRixFQUFhLFFBQVFqbkYsS0FBS0QsRUFBRVksU0FFbEMsR0FBSXFtRixFQUFnQixDQUNoQixNQUFNRSxFQUFzQm5vRixFQUFLc3FELHVCQUF1Qm85QixFQUFjeG1GLE9BQVF4QixFQUFLQyxRQUFRbUIsUUFBUTB2QixTQUNuR28wRCxFQUFXdUQsRUFBcUJBLEdBQXVCQSxFQUFvQnRqRixZQUFZZSxhQUNwRixHQUFJc2lGLEVBQVksQ0FFbkJ0RCxFQUR3QjVrRixFQUFLMHFELG1CQUFtQmc5QixFQUFjeG1GLE9BQVF4QixFQUFLQyxRQUFRbUIsUUFBUTB2QixhQU92RzQzRCxnQkFBaUIsU0FBVXBuRixHQUN2QixHQUFJK2lFLEVBQU04Z0IsZUFBZ0IsT0FFMUJubEYsRUFBS2ttRSxlQUNMLE1BQU1oa0UsRUFBVVosRUFBRVksUUFDWm9qRixFQUFPaGtGLEVBQUVpa0YsU0FBV2prRixFQUFFa2tGLFNBQXVCLEtBQVp0akYsR0FBOEIsS0FBWkEsR0FBOEIsTUFBWkEsRUFDckU2MkIsRUFBTXozQixFQUFFbWtGLE9BRWQsR0FBSXpsRixFQUFLcS9ELFdBRUwsYUFES2ltQixHQUFRamhCLEVBQU0wYyxtQkFBbUJ4L0UsS0FBS1csSUFBVW1pRSxFQUFNaUMsb0JBSS9ELE1BQU16MkIsRUFBUTd2QyxFQUFLOHZDLFdBQ25CLElBQUkwUixFQUFnQnhoRCxFQUFLNHFCLG1CQUV6QixHQUFJNXFCLEVBQUs2L0QsYUFBZ0I3L0QsRUFBSzgvRCxrQkFBZ0MsS0FBWjU5RCxJQUFvQjJ0QyxFQUFNVSxXQUFZLENBQ3BGLElBQUl2d0MsRUFBSzgvRCxpQkFJTCxZQURBdUUsRUFBTWdSLHNCQUZVLEtBQVpuekUsR0FBZ0JtaUUsRUFBTTZlLDJCQU9sQyxJQUFJSixFQUFpQ3RoQyxFQUNyQyxLQUFPc2hDLEVBQStCbHRFLFlBQVlrdEUsRUFBaUNBLEVBQStCbHRFLFdBRWxILE1BQU1tdEUsRUFBd0IvaUYsRUFBS3NsRSxpQkFBaUJ3ZCxHQUtwRCxHQUpvQixLQUFkeGhGLEVBQUVZLFVBQWtCWixFQUFFK2pGLFVBQWF0QyxFQUF1Qi9pRixFQUFLOCtCLGdCQUFnQmlrRCxFQUFzQnZoRixPQUFRdWhGLEVBQXNCbCtFLFlBQ2hJN0UsRUFBS3krRCwwQkFBMEJ6K0QsRUFBSzB6QixpQkFHN0IsSUFBWnh4QixHQUFpQjVCLEVBQUsrb0IsYUFBYW00QixJQUFnRCxLQUE5QkEsRUFBY3I4QyxhQUF3RCxJQUFsQ3E4QyxFQUFjaGlDLFNBQVN0WixPQUFjLENBQzlINUUsRUFBRTRILGlCQUNGNUgsRUFBRXNELGtCQUVGNDhDLEVBQWN4OUMsVUFBWSxHQUUxQixNQUFNMmtGLEVBQWFyb0YsRUFBS0MsY0FBY0QsRUFBSzYvQixnQkFBZ0JuZ0MsRUFBS3VoRSxVQUFVUyxhQUFhLElBQU1oaUUsRUFBS3VoRSxVQUFVUyxhQUFhLEdBQUs3L0QsRUFBUWcxRCxZQVF0SSxPQVBBd3hCLEVBQVcza0YsVUFBWSxPQUV2Qnc5QyxFQUFjM2dELFlBQVk4bkYsR0FDMUIzb0YsRUFBS2d6QixTQUFTMjFELEVBQVksRUFBR0EsRUFBWSxHQUN6Q3RrQixFQUFNaUMsd0JBRU50bUUsRUFBS3N6QixRQUFRL3FCLE1BQUssR0FJdEIsTUFBTTBoRSxFQUFXM3BFLEVBQUtvOUIsaUJBQWlCOGpCLEVBQWUsTUFDaERpdEIsRUFBVW51RSxFQUFLNHdDLHNCQUFzQnNRLEVBQWUsTUFDcEQxZCxFQUFROWpDLEVBQUsraUUsaUJBRW5CLEdBQUlqL0IsRUFBTyxDQUNQLElBQUssSUFBSXJtQyxFQUFJLEVBQUc0SixFQUFNeThCLEVBQU01OUIsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDekIsS0FBWnlFLEdBQWtCLFFBQVFYLEtBQUt1aUMsRUFBTXJtQyxHQUFHTyxNQUN4Q2lzRSxFQUFTbjRDLGdCQUFnQixNQUc3Qm00QyxFQUFTaDBELGFBQWE2dEIsRUFBTXJtQyxHQUFHTyxLQUFNOGxDLEVBQU1ybUMsR0FBR2lCLE9BRWxEc0IsRUFBSytpRSxpQkFBbUIsS0FHdkJrSCxJQUFZcDZCLEVBQU1VLFdBQWNqd0MsRUFBSzRuQyxZQUFZc1osSUFBbUJsaEQsRUFBS212QyxPQUFPK1IsSUFBOEcsT0FBNUZ4aEQsRUFBS2lnRixrQkFBa0IzL0UsRUFBS3UvQixxQkFBcUI0dUMsR0FBVyxNQUFRdHNFLEVBQVFnMUQsY0FDL0szVixFQUFnQnhoRCxFQUFLNHFCLG9CQUl6QixJQURpQjA2RCxJQUFTdnNELElBQVFzckMsRUFBTTRjLGdCQUFnQjEvRSxLQUFLVyxJQUNuQixJQUEzQnMvQyxFQUFjanJDLFVBQWtCalcsRUFBS3drRCxnQkFBZ0J2akQsS0FBS2lnRCxFQUFjcjhDLHFCQUFvQ3F6RCxJQUFsQmwzRCxFQUFFc25GLFlBQTRCdG5GLEVBQUVzbkYsWUFBY3ZrQixFQUFNd2MsZ0JBQWlCLENBQzFLLElBQUlud0MsRUFBS2IsRUFBTWdCLFlBQWFFLEVBQUtsQixFQUFNaUIsVUFDdkMsTUFBTSszQyxHQUFxQnJuQyxFQUFjcjhDLFlBQVk2TSxVQUFVLEVBQUcrK0IsR0FBSTcvQixNQUFNbXpELEVBQU0rYyxxQkFBdUIsSUFBSWw3RSxPQUM3R3dxQyxFQUFLYixFQUFNZ0IsWUFBY2c0QyxFQUN6QjkzQyxFQUFLbEIsRUFBTWlCLFVBQVkrM0MsRUFDdkJybkMsRUFBY3I4QyxZQUFjcThDLEVBQWNyOEMsWUFBWXlJLFFBQVF0TixFQUFLd2tELGdCQUFpQixJQUNwRjlrRCxFQUFLZ3pCLFNBQVN3dUIsRUFBZTlRLEVBQUssRUFBSSxFQUFJQSxFQUFJOFEsRUFBZXpRLEVBQUssRUFBSSxFQUFJQSxHQUc5RS93QyxFQUFLNDdFLFdBQVcsSUFHaUIsbUJBQXRCbGlELEVBQVVvdkQsVUFBeUQsSUFBL0JwdkQsRUFBVW92RCxRQUFReG5GLEVBQUd0QixJQUcvRHNsRixHQUFTdnNELEdBQVFzckMsRUFBTTZjLHNCQUFzQjMvRSxLQUFLVyxJQUNuRGxDLEVBQUtzekIsUUFBUS9xQixNQUFLLElBSTFCd2dGLGlCQUFrQixTQUFVem5GLEdBQ3hCdEIsRUFBSzB6QixpQkFDRDF6QixFQUFLNi9ELFlBQVl3RSxFQUFNNlIsZUFHTyxtQkFBdkJ4OEMsRUFBVXN2RCxVQUF5QnR2RCxFQUFVc3ZELFNBQVMxbkYsRUFBR3RCLElBR3hFaXBGLGdCQUFpQixTQUFVM25GLEdBQ25CdEIsRUFBSzQrQyxZQUNUNStDLEVBQUtpdUMsVUFBVyxFQUNoQmpvQyxFQUFHNjZCLFdBQVd3akMsRUFBTWlDLGtCQUVoQnRtRSxFQUFLNC9ELFdBQVd5RSxFQUFNaVIscUJBR08sbUJBQXRCNTdDLEVBQVV3dkQsU0FBd0J4dkQsRUFBVXd2RCxRQUFRNW5GLEVBQUd0QixLQUd0RW1wRixlQUFnQixTQUFVN25GLEdBQ2xCdEIsRUFBSzQrQyxXQUFhNStDLEVBQUt1aEUsVUFBVUUsYUFDckN6aEUsRUFBS2l1QyxVQUFXLEVBQ2hCanVDLEVBQUt1dEMsV0FBYSxLQUNsQnZ0QyxFQUFLMHpCLGtCQUNEMXpCLEVBQUs0L0QsV0FBYTUvRCxFQUFLNi9ELGFBQVl3RSxFQUFNNlIsZUFFN0NsMkUsRUFBS3FuRSxjQUFjLElBRW5Ccm5FLEVBQUt1aEUsVUFBVVMsYUFBZSxHQUM5QmhpRSxFQUFLdWhFLFVBQVVVLGdCQUFrQixHQUM3QjkvRCxFQUFRMjJELGdCQUFlNzRELEVBQVFtQixRQUFRK3dELFdBQVdodEQsWUFBYyxJQUVwQyxtQkFBckJ1MEIsRUFBVTB2RCxRQUF1QjF2RCxFQUFVMHZELE9BQU85bkYsRUFBR3RCLEVBQUtKLFFBR3pFeXBGLHdCQUF5QixTQUFVL25GLEdBQy9CQSxFQUFFc0Qsa0JBRUY1RSxFQUFLK3FCLGFBQ0wvcUIsRUFBSzB6QixpQkFFTDF6QixFQUFLdWhFLFVBQVVLLGNBQWdCdGdFLEVBQUVnb0YsUUFDakNycEYsRUFBUW1CLFFBQVFnN0QsaUJBQWlCMTdELE1BQU1DLFFBQVUsUUFRakRxQixFQUFHZixpQkFBaUIsWUFBYW9qRSxFQUFNa2xCLGdCQUN2Q3ZuRixFQUFHZixpQkFBaUIsV0FQcEIsU0FBU3VvRixJQUNMdnBGLEVBQVFtQixRQUFRZzdELGlCQUFpQjE3RCxNQUFNQyxRQUFVLE9BQ2pEcUIsRUFBR0Msb0JBQW9CLFlBQWFvaUUsRUFBTWtsQixnQkFDMUN2bkYsRUFBR0Msb0JBQW9CLFVBQVd1bkYsT0FPMUNELGVBQWdCLFNBQVVqb0YsR0FDdEIsTUFBTW1vRixFQUFpQnhwRixFQUFRbUIsUUFBUXMwRCxXQUFXenVELGNBQWdCM0YsRUFBRWdvRixRQUFVdHBGLEVBQUt1aEUsVUFBVUssZUFDdkYzd0MsRUFBS3c0RCxFQUFpQnpwRixFQUFLdWhFLFVBQVVRLGdCQUFrQi9oRSxFQUFLdWhFLFVBQVVRLGdCQUFrQjBuQixFQUM5RnhwRixFQUFRbUIsUUFBUWdxRCxhQUFhMXFELE1BQU15YixPQUFTbGMsRUFBUW1CLFFBQVE0ZixLQUFLdGdCLE1BQU15YixPQUFTOFUsRUFBSSxLQUNwRmp4QixFQUFLdWhFLFVBQVVLLGNBQWdCdGdFLEVBQUVnb0YsUUFDNUJocEYsRUFBSzBqRCwyQkFBMkJoa0QsRUFBSzIvRSxxQkFBcUIxdUQsRUFBRyxPQUd0RXV2RCxnQkFBaUIsV0FDUmxnRixFQUFLMGpELDJCQUEyQmhrRCxFQUFLdThFLHlCQUUxQyxNQUFNdDdELEVBQVVoaEIsRUFBUW1CLFFBQVE2ZixRQUMxQnlvRSxFQUE2QyxTQUExQnpvRSxFQUFRdmdCLE1BQU1DLFNBQXVCWCxFQUFLNC9ELFlBQWM1L0QsRUFBSysvRCxtQkFBbUJDLE9BQ3pHLEdBQTRCLElBQXhCLytDLEVBQVE4TyxhQUFzQjI1RCxFQUFsQyxDQVVBLEdBUkl6cEYsRUFBUStDLGFBQTBELFVBQTNDL0MsRUFBUStDLFlBQVlHLEtBQUt6QyxNQUFNQyxVQUN0RFYsRUFBUStDLFlBQVlNLEtBQUs1QyxNQUFNcUcsVUFBYWYsRUFBR2dCLFlBQWMvRyxFQUFRK0MsWUFBWUksT0FBTzZELGFBQWUsR0FBTSxNQUc3R2pILEVBQUtzK0QscUJBQXVCdCtELEVBQUtrK0QsU0FDakNsK0QsRUFBSzZqRSxpQkFBaUI3akUsRUFBS3MrRCxvQkFBcUJ0K0QsRUFBS2srRCxTQUdyRGwrRCxFQUFLdWhFLFVBQVVHLGFBR2YsT0FGQTFoRSxFQUFLdWhFLFVBQVVJLHdCQUEyQjM3RCxFQUFHZ0IsWUFBY2lhLEVBQVFoYSxhQUFnQmpILEVBQUt1aEUsVUFBVUksNEJBQ2xHMWhFLEVBQVFtQixRQUFRczBELFdBQVdoMUQsTUFBTXliLE9BQVNuYyxFQUFLdWhFLFVBQVVJLHVCQUF5QixNQUlsRjNoRSxFQUFLdWhFLFVBQVVFLFlBQWN6aEUsRUFBSzQvRCxVQUNsQ3lFLEVBQU1pUixzQkFJVnQxRSxFQUFLdTNFLG9CQUVEdjNFLEVBQUtrZ0UsVUFDTGovQyxFQUFRdmdCLE1BQU13YixNQUFTamMsRUFBUW1CLFFBQVF5MEQsUUFBUTlsQyxZQUFjLEVBQUssS0FDbEVzMEMsRUFBTWdULHNCQUlkQSxnQkFBaUIsV0FDYixHQUFJcjNFLEVBQUt1aEUsVUFBVUcsY0FBd0QsSUFBeEN6aEUsRUFBUW1CLFFBQVE2ZixRQUFROE8sYUFBcUI1dEIsRUFBUW8yRCxjQUFnQixFQUFHLE9BRTNHLE1BQU1uM0QsRUFBVW5CLEVBQVFtQixRQUNsQnVvRixFQUFldm9GLEVBQVFzMEQsV0FBV3p1RCxhQUNsQ3E0QixHQUFLMS9CLEtBQUtncUYsU0FBVzVuRixFQUFHd2lGLGdCQUFnQmo1QixXQUFhcHBELEVBQVFvMkQsY0FDN0RzeEIsRUFBWXhsQixFQUFNQyxrQkFBa0JuaUUsRUFBUTR3RCxrQkFBa0IvaUMsS0FBT2h3QixFQUFLNC9ELFVBQVl4K0QsRUFBUTZmLFFBQVFoYSxhQUFlLEdBQ3JINmlGLEVBQWU5cEYsRUFBSzQvRCxXQUFjdGdDLEVBQUl1cUQsRUFBYSxFQUFJdnFELEVBQUl1cUQsRUFBWTVwRixFQUFRbUIsUUFBUTZmLFFBQVFoYSxhQUFlLEVBRWhIcTRCLEVBQUl1cUQsRUFDSnhsQixFQUFNa2Msb0JBRURqaEQsRUFBSXQvQixFQUFLdWhFLFVBQVVRLGlCQUFtQjRuQixFQUFlRSxHQUNyRDdwRixFQUFLa2dFLFNBQVNtRSxFQUFNMGxCLGlCQUFpQkQsR0FDMUMxb0YsRUFBUTZmLFFBQVF2Z0IsTUFBTXN2QixJQUFPODVELEVBQWVILEVBQWVFLEVBQVkxbkYsRUFBUW8yRCxjQUFnQmo1QixFQUFJdC9CLEVBQUt1aEUsVUFBVVEsZ0JBQW1CLE1BRWhJemlDLEdBQUt1cUQsR0FDVnhsQixFQUFNMGxCLGlCQUFpQkQsSUFJL0J4bEIsa0JBQW1CLFNBQVVqbUMsR0FDekIsSUFBSXVtQyxFQUFXdm1DLEdBQWFwK0IsRUFBUW1CLFFBQVF5MEQsUUFDeENsM0QsRUFBSSxFQUFHakIsRUFBSSxFQUFHOEIsRUFBSSxFQUV0QixLQUFPb2xFLEdBQ0hqbUUsR0FBS2ltRSxFQUFTMzBDLFVBQ2R2eUIsR0FBS2tuRSxFQUFTOTBDLFdBQ2R0d0IsR0FBS29sRSxFQUFTclosVUFDZHFaLEVBQVdBLEVBQVN0WixhQUd4QixNQUFPLENBQ0h0N0IsSUFBS3J4QixFQUNMMlIsS0FBTTVTLEVBQ05zc0YsT0FBUXhxRixJQUloQitrRixvQkFBcUIsV0FDakIsT0FBT3ZpRixFQUFHd2lGLGdCQUFnQm5PLGNBQWdCaFMsRUFBTUMsa0JBQWtCLE1BQU10MEMsSUFBTS92QixFQUFRbUIsUUFBUXkwRCxRQUFRNXVELGVBRzFHOGlGLGlCQUFrQixTQUFVRCxHQUN4QixNQUFNMW9GLEVBQVVuQixFQUFRbUIsUUFFbkJwQixFQUFLNC9ELFdBQWN6OUQsRUFBUTR3RCxtQkFDNUIzeEQsRUFBUWd6RCxhQUFhMXpELE1BQU15YixPQUFTL2EsRUFBUTZmLFFBQVFoYSxhQUFlLEtBQ25FN0YsRUFBUWd6RCxhQUFhMXpELE1BQU1DLFFBQVUsU0FHekNTLEVBQVE2ZixRQUFRdmdCLE1BQU1zdkIsSUFBTzd0QixFQUFRbzJELGNBQWdCdXhCLEVBQWdCLEtBQ3JFMW9GLEVBQVE2ZixRQUFRdmdCLE1BQU13YixNQUFRbGMsRUFBSzQvRCxVQUFZNS9ELEVBQUsrL0QsbUJBQW1CN2pELE1BQVE5YSxFQUFRNmYsUUFBUThPLFlBQWMsS0FDN0d6dkIsRUFBS3lJLFNBQVMzSCxFQUFRNmYsUUFBUyxxQkFDL0JqaEIsRUFBS2tnRSxTQUFVLEdBR25CcWdCLGtCQUFtQixXQUNmLE1BQU1uL0UsRUFBVW5CLEVBQVFtQixRQUV4QkEsRUFBUWd6RCxhQUFhMXpELE1BQU1DLFFBQVUsT0FDckNTLEVBQVE2ZixRQUFRdmdCLE1BQU1zdkIsSUFBTWh3QixFQUFLNC9ELFVBQVk1L0QsRUFBSysvRCxtQkFBbUIvdkMsSUFBTSxHQUMzRTV1QixFQUFRNmYsUUFBUXZnQixNQUFNd2IsTUFBUWxjLEVBQUs0L0QsVUFBWTUvRCxFQUFLKy9ELG1CQUFtQjdqRCxNQUFRLEdBQy9FOWEsRUFBUXMwRCxXQUFXaDFELE1BQU1naEMsVUFBWSxHQUVyQ3BoQyxFQUFLd0ksWUFBWTFILEVBQVE2ZixRQUFTLHFCQUNsQ2poQixFQUFLa2dFLFNBQVUsR0FHbkJrWCxvQkFBcUIsV0FDYnAzRSxFQUFLdWhFLFVBQVVHLGVBQ25CemhFLEVBQVFtQixRQUFRNGYsS0FBS3RnQixNQUFNeWIsT0FBU2xjLEVBQVFtQixRQUFRNGYsS0FBS3ExRCxhQUFlLE9BSTVFeVAsWUFBYSxXQUNULE1BQU1qMkMsRUFBUTd2QyxFQUFLOHZDLFdBQ2I5YixFQUFLNmIsRUFBTVksZUFDWHZjLEVBQUsyYixFQUFNYyxhQUdYczVDLEVBQVEzcEYsRUFBSzR3QyxzQkFBc0JsZCxHQUNuQ2syRCxFQUFRNXBGLEVBQUs0d0Msc0JBQXNCaGQsR0FDbkNpMkQsRUFBVTdwRixFQUFLd3hDLE9BQU9tNEMsR0FDdEJHLEVBQVU5cEYsRUFBS3d4QyxPQUFPbzRDLEdBQ3RCNS9CLEVBQVd6YSxFQUFNdTJCLHdCQUN2QixJQUFNK2pCLElBQVlGLEVBQU1wd0QseUJBQTJCb3dELEVBQU05OEMsY0FBY3RULHdCQUE0QnV3RCxJQUFZRixFQUFNcHdELHFCQUF1Qm93RCxFQUFNLzhDLGNBQWNyVCxxQkFBd0Jtd0QsSUFBVUMsRUFDOUwsR0FBS0MsRUFFRSxJQUFLQyxFQUtSLE9BRkE5cEYsRUFBS3NwQixXQUFXdHBCLEVBQUtpNUIsaUJBQWlCMHdELEdBQU8sU0FBUzc1RCxHQUFVLE9BQU9rNkIsSUFBYWw2QixFQUFRL21CLGVBQzVGckosRUFBS2dtRSxlQUNFLEVBSlAxbEUsRUFBS3NwQixXQUFXdHBCLEVBQUtpNUIsaUJBQWlCMHdELEdBQU8sU0FBUzc1RCxHQUFVLE9BQU9rNkIsSUFBYWw2QixFQUFRL21CLG9CQUY1Ri9JLEVBQUtzcEIsV0FBV3RwQixFQUFLaTVCLGlCQUFpQjJ3RCxHQUFPLFNBQVM5NUQsR0FBVSxPQUFPazZCLElBQWFsNkIsRUFBUS9tQixlQVdwRyxNQUFNZ2hGLEVBQXdCLElBQWhCcjJELEVBQUd6ZCxTQUFpQmpXLEVBQUtpNUIsaUJBQWlCdkYsRUFBSSxpQkFBbUIsS0FDekVzMkQsRUFBd0IsSUFBaEJwMkQsRUFBRzNkLFNBQWlCalcsRUFBS2k1QixpQkFBaUJyRixFQUFJLGlCQUFtQixLQUkvRSxPQUhJbTJELEdBQU8vcEYsRUFBS3NwQixXQUFXeWdFLEdBQ3ZCQyxHQUFPaHFGLEVBQUtzcEIsV0FBVzBnRSxJQUVwQixHQUdYQyxnQkFBaUIsU0FBVWpwRixHQUN2QixNQUFNa3BGLEVBQWdCbHFGLEVBQUtrcEMsS0FBT3hqQyxFQUFHd2tGLGNBQWdCbHBGLEVBQUVrcEYsY0FDdkQsT0FBS0EsR0FDRW5tQixFQUFNb21CLG9CQUFvQixRQUFTbnBGLEVBQUdrcEYsSUFHakRFLHVCQUF3QixTQUFVcHBGLEVBQUcrNUIsRUFBTW12RCxHQUN2Q2xwRixFQUFFNEgsaUJBQ0Y1SCxFQUFFc0Qsa0JBQ0Y0bEYsRUFBY0csUUFBUSxZQUFhdHZELEVBQUtsSCxVQUFVbmUsWUFHdEQ0MEUsZUFBZ0IsU0FBVXRwRixHQUN0QixNQUFNa3BGLEVBQWdCbHFGLEVBQUtrcEMsS0FBT3hqQyxFQUFHd2tGLGNBQWdCbHBGLEVBQUVrcEYsY0FHdkQsR0FBZ0MsbUJBQXJCOXdELEVBQVVteEQsU0FBc0UsSUFBN0NueEQsRUFBVW14RCxPQUFPdnBGLEVBQUdrcEYsRUFBZXhxRixHQUc3RSxPQUZBc0IsRUFBRTRILGlCQUNGNUgsRUFBRXNELG1CQUNLLEVBR1gsTUFBTXkyQixFQUFPcjdCLEVBQUt5K0QseUJBQ2RwakMsSUFBUy82QixFQUFLa3BDLE9BQ2Q2NkIsRUFBTXFtQix1QkFBdUJwcEYsRUFBRys1QixFQUFNbXZELEdBQ3RDbHFGLEVBQUt5SSxTQUFTc3lCLEVBQUtsSCxVQUFXLHFCQUU5Qm51QixFQUFHNjZCLFlBQVcsV0FDVnZnQyxFQUFLd0ksWUFBWXV5QixFQUFLbEgsVUFBVyx1QkFDbEMsT0FJWDIyRCxlQUFnQixTQUFVL21GLEdBRVUsbUJBQXJCMjFCLEVBQVVxeEQsUUFDakJyeEQsRUFBVXF4RCxPQUFPaG5GLEVBQVMvRCxJQUtsQ2dyRixjQUFlLFNBQVUxcEYsR0FDckIsTUFBTWtwRixFQUFnQmxxRixFQUFLa3BDLEtBQU94akMsRUFBR3drRixjQUFnQmxwRixFQUFFa3BGLGNBR3ZELEdBQStCLG1CQUFwQjl3RCxFQUFVdXhELFFBQW9FLElBQTVDdnhELEVBQVV1eEQsTUFBTTNwRixFQUFHa3BGLEVBQWV4cUYsR0FHM0UsT0FGQXNCLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxtQkFDSyxFQUdYLE1BQU15MkIsRUFBT3I3QixFQUFLeStELHlCQUNkcGpDLElBQVMvNkIsRUFBS2twQyxPQUNkNjZCLEVBQU1xbUIsdUJBQXVCcHBGLEVBQUcrNUIsRUFBTW12RCxHQUN0Q2xxRixFQUFLc3BCLFdBQVd5UixFQUFLbEgsV0FDckJuMEIsRUFBSzB6QixrQkFHVDF0QixFQUFHNjZCLFlBQVcsV0FFVjdnQyxFQUFLc3pCLFFBQVEvcUIsTUFBSyxPQUkxQjJpRixlQUFnQixTQUFVNXBGLEdBQ3RCLEdBQUl0QixFQUFLcS9ELFlBQWMvK0QsRUFBS2twQyxLQUd4QixPQUZBbG9DLEVBQUU0SCxpQkFDRjVILEVBQUVzRCxtQkFDSyxFQUdYLE1BQU11bUYsRUFBZTdwRixFQUFFNnBGLGFBQ3ZCLE9BQUtBLElBRUw5bUIsRUFBTSttQiwwQkFBMEI5cEYsR0FDaEN0QixFQUFLZ3FFLGFBRUFubkUsU0FBU1MsS0FBSzRzQixTQUFTbHdCLEVBQUt3K0QsMEJBQTBCeCtELEVBQUswekIsaUJBRXpEMndDLEVBQU1vbUIsb0JBQW9CLE9BQVFucEYsRUFBRzZwRixLQUdoREMsMEJBQTJCLFNBQVU5cEYsR0FDakMsTUFBTXV1QyxFQUFRLENBQUVZLGVBQWdCLEtBQU1JLFlBQWEsS0FBTUYsYUFBYyxLQUFNRyxVQUFXLE1BRXhGLElBQUl2eUMsRUFBSSxLQWtCUixHQWpCSStDLEVBQUUrdEUsYUFDRngvQixFQUFNWSxlQUFpQm52QyxFQUFFK3RFLFlBQ3pCeC9CLEVBQU1nQixZQUFjdnZDLEVBQUUrcEYsWUFDdEJ4N0MsRUFBTWMsYUFBZXJ2QyxFQUFFK3RFLFlBQ3ZCeC9CLEVBQU1pQixVQUFZeHZDLEVBQUUrcEYsYUFFcEI5c0YsRUFET3lCLEVBQUswK0MsSUFBSTRzQyxvQkFDWnRyRixFQUFLMCtDLElBQUk0c0Msb0JBQW9CaHFGLEVBQUVpcUYsUUFBU2pxRixFQUFFZ29GLFNBRTFDdHBGLEVBQUs4dkMsV0FFVHZ4QyxJQUNBc3hDLEVBQU1ZLGVBQWlCbHlDLEVBQUVreUMsZUFDekJaLEVBQU1nQixZQUFjdHlDLEVBQUVzeUMsWUFDdEJoQixFQUFNYyxhQUFlcHlDLEVBQUVveUMsYUFDdkJkLEVBQU1pQixVQUFZdnlDLEVBQUV1eUMsV0FHcEJqQixFQUFNWSxpQkFBbUJaLEVBQU1jLGFBQWMsQ0FDN0MsTUFBTXhjLEVBQVk3ekIsRUFBS2k1QixpQkFBaUJzVyxFQUFNWSxlQUFnQm53QyxFQUFLNG5DLGFBQy9EL1QsSUFDQTBiLEVBQU1ZLGVBQWlCdGMsRUFDdkIwYixFQUFNZ0IsWUFBYyxFQUNwQmhCLEVBQU1jLGFBQWV4YyxFQUNyQjBiLEVBQU1pQixVQUFZLEdBRzFCOXdDLEVBQUtnekIsU0FBUzZjLEVBQU1ZLGVBQWdCWixFQUFNZ0IsWUFBYWhCLEVBQU1jLGFBQWNkLEVBQU1pQixZQUdyRjI1QyxvQkFBcUIsU0FBVTdnRixFQUFNdEksRUFBRzhlLEdBQ3BDLElBQUlvckUsRUFBV0MsRUFDZixHQUFJbnJGLEVBQUtrcEMsS0FBTSxDQUNYZ2lELEVBQVlwckUsRUFBS3NyRSxRQUFRLFFBRXpCLE1BQU03N0MsRUFBUTd2QyxFQUFLOHZDLFdBQ2I2N0MsRUFBVXJyRixFQUFLQyxjQUFjLE9BQzdCcXJGLEVBQVksQ0FDZDUzRCxHQUFJNmIsRUFBTVksZUFDVkMsR0FBSWIsRUFBTWdCLFlBQ1YzYyxHQUFJMmIsRUFBTWMsYUFDVkksR0FBSWxCLEVBQU1pQixXQWdCZCxPQWJBNjZDLEVBQVExMUUsYUFBYSxtQkFBbUIsR0FDeEMwMUUsRUFBUWpyRixNQUFNc25DLFFBQVUsNEVBRXhCL25DLEVBQVFtQixRQUFRQyxTQUFTUixZQUFZOHFGLEdBQ3JDQSxFQUFRbnBGLFFBRVJ3RCxFQUFHNjZCLFlBQVcsV0FDVjRxRCxFQUFZRSxFQUFRM25GLFVBQ3BCMUQsRUFBS3NwQixXQUFXK2hFLEdBQ2hCM3JGLEVBQUtnekIsU0FBUzQ0RCxFQUFVNTNELEdBQUk0M0QsRUFBVWw3QyxHQUFJazdDLEVBQVUxM0QsR0FBSTAzRCxFQUFVNzZDLElBQ2xFc3pCLEVBQU13bkIsa0JBQWtCamlGLEVBQU10SSxFQUFHa3FGLEVBQVdDLEVBQVdyckUsT0FHcEQsRUFJUCxHQUZBb3JFLEVBQVlwckUsRUFBS3NyRSxRQUFRLGNBQ3pCRCxFQUFZcnJFLEVBQUtzckUsUUFBUSxjQUM0QyxJQUFqRXJuQixFQUFNd25CLGtCQUFrQmppRixFQUFNdEksRUFBR2txRixFQUFXQyxFQUFXcnJFLEdBR3ZELE9BRkE5ZSxFQUFFNEgsaUJBQ0Y1SCxFQUFFc0QsbUJBQ0ssR0FLbkJpbkYsa0JBQW1CLFNBQVVqaUYsRUFBTXRJLEVBQUdrcUYsRUFBV0MsRUFBV3JyRSxHQUV4RCxNQUFNMHJFLEVBQVMsK0JBQStCdnFGLEtBQUtrcUYsSUFBYyw4QkFBOEJscUYsS0FBS2txRixJQUFjLDZCQUE2QmxxRixLQUFLa3FGLElBQWMsNEJBQTRCbHFGLEtBQUtrcUYsSUFDakxBLEVBVWRBLEVBQVluckYsRUFBS3FrRCxlQUFlNm1DLEdBQVc1OUUsUUFBUSxNQUFPLFNBUDFENjlFLEVBQVlBLEVBQVU3OUUsUUFBUSx5R0FBMEcsSUFDcElrK0UsSUFDQUwsRUFBWUEsRUFBVTc5RSxRQUFRLE1BQU8sS0FDckM0OUUsRUFBWUEsRUFBVTU5RSxRQUFRLE1BQU8sTUFFekM2OUUsRUFBWXpyRixFQUFLNjRFLFVBQVU0UyxFQUFXenJGLEVBQUtrL0QseUJBQTBCbC9ELEVBQUttL0QsMkJBSzlFLE1BQU0xSSxFQUFlejJELEVBQUs0N0UsV0FBVzU3RSxFQUFLd2dFLGNBQWdCaXJCLEVBQVlELEdBRXRFLEdBQWEsVUFBVDVoRixHQUFpRCxtQkFBdEI4dkIsRUFBVXF5RCxRQUF3QixDQUM3RCxNQUFNcnRGLEVBQVFnN0IsRUFBVXF5RCxRQUFRenFGLEVBQUdtcUYsRUFBV2gxQixFQUFjejJELEdBQzVELElBQWMsSUFBVnRCLEVBQ0EsT0FBTyxFQUNKLEdBQXFCLGlCQUFWQSxFQUFvQixDQUNsQyxJQUFLQSxFQUFPLE9BQU8sRUFDbkIrc0YsRUFBWS9zRixHQUlwQixHQUFhLFNBQVRrTCxHQUErQyxtQkFBckI4dkIsRUFBVXN5RCxPQUF1QixDQUMzRCxNQUFNdHRGLEVBQVFnN0IsRUFBVXN5RCxPQUFPMXFGLEVBQUdtcUYsRUFBV2gxQixFQUFjejJELEdBQzNELElBQWMsSUFBVnRCLEVBQ0EsT0FBTyxFQUNKLEdBQXFCLGlCQUFWQSxFQUFvQixDQUNsQyxJQUFLQSxFQUFPLE9BQU8sRUFDbkIrc0YsRUFBWS9zRixHQUtwQixNQUFNZzhCLEVBQVF0YSxFQUFLc2EsTUFDbkIsT0FBSUEsRUFBTXgwQixPQUFTLElBQU00bEYsR0FDakIsU0FBU3ZxRixLQUFLbTVCLEVBQU0sR0FBRzl3QixPQUFTNUosRUFBSzBCLFFBQVFvaEIsT0FDN0M0VyxFQUFVdXlELFlBQVl2eEQsSUFFbkIsS0FHTis3QixJQUlEZzFCLEdBQ0EveEQsRUFBVTJ0RCxXQUFXb0UsR0FBVyxHQUFNLElBQy9CLFFBRlgsSUFNSlMsb0JBQXFCLFNBQVU1cUYsR0FDM0IsR0FBSXRCLEVBQUtvL0QsWUFBY3AvRCxFQUFLcS9ELFdBQVksT0FBTyxFQUMvQyxNQUFNbHJDLEVBQVk3ekIsRUFBS2k1QixpQkFBaUJqNEIsRUFBRUUsT0FBUWxCLEVBQUs0bkMsYUFDakRpa0QsRUFBbUJuc0YsRUFBS2cwRCxhQUFhdHpELE1BRTNDLEdBQUl5ekIsSUFBY24wQixFQUFLNnlCLHNCQUF1QixDQUMxQyxNQUFNdTVELEVBQVFuc0YsRUFBUW1CLFFBQ3RCLElBQUltcUQsRUFBWSxFQUNaM1gsRUFBS3c0QyxFQUFNdDdELFFBQ2YsR0FDSXk2QixHQUFhM1gsRUFBRzJYLFVBQ2hCM1gsRUFBS0EsRUFBR3pHLG9CQUNIeUcsSUFBTyxpQkFBaUJyeUMsS0FBS3F5QyxFQUFHN2lCLFdBRXpDLE1BQU0wNUMsRUFBVTJoQixFQUFNdDdELFFBQVF5NkIsVUFDeEJ0QyxFQUFVb2IsRUFBTUMsa0JBQWtCLE1BQ2xDa0csRUFBZWxxRSxFQUFLNnFELFVBQVVoM0IsRUFBV2k0RCxFQUFNaGhDLGNBQWNwN0IsSUFBTXk2QyxFQUNuRW5yQyxFQUFJaCtCLEVBQUUrcUYsTUFBUTlnQyxHQUFhcHBELEVBQVFva0QsU0FBV3BrRCxFQUFRNHdELGlCQUFtQnE1QixFQUFNbnJFLFFBQVFoYSxhQUFlLEdBQ3RHbkosRUFBSTBzRSxHQUFnQnJvRSxFQUFRb2tELE9BQVNnRixFQUFZdEMsRUFBUWo1QixLQUV6RHlmLEVBQVNudkMsRUFBSzAvQixXQUFXN0wsRUFBVTlxQixZQUN6QyxJQUFJMGpDLEVBQU0sR0FBSS9jLEVBQU0sR0FDcEIsSUFBS3lmLEdBQVV0YixFQUFVbU0saUJBQW1CaGdDLEVBQUs2L0IsZ0JBQWdCaE0sRUFBVTBGLDBCQUE0QnlGLEVBQUt4aEMsRUFBSSxHQUM1R2t5QixFQUFNdzZDLEVBQ056OUIsRUFBTSxRQUNILEtBQUswQyxFQUFVdGIsRUFBVWlYLFlBQWU5cUMsRUFBSzYvQixnQkFBZ0JoTSxFQUFVMkYsd0JBQXdCd0YsRUFBS3hoQyxFQUFJcTJCLEVBQVVsdEIsYUFBZSxJQUtwSSxZQURBa2xGLEVBQWlCeHJGLFFBQVUsUUFIM0JxdkIsRUFBTXc2QyxFQUFlcjJDLEVBQVVsdEIsYUFDL0I4bEMsRUFBTSxJQU1WL3NDLEVBQUt1aEUsVUFBVXNCLGVBQWlCMXVDLEVBQ2hDbjBCLEVBQUt1aEUsVUFBVXVCLGNBQWdCLzFCLEVBQy9Cby9DLEVBQWlCbjhELElBQU9BLEVBQU15NkMsRUFBVyxLQUN6Q3pxRSxFQUFLbWdFLG1CQUFtQnovRCxNQUFNNFAsS0FBUWhRLEVBQUs2cUQsVUFBVWgzQixHQUFXN2pCLEtBQVE2akIsRUFBVXBFLFlBQWMsRUFBSyxHQUFNLEtBQzNHbzhELEVBQWlCeHJGLFFBQVUsWUFFTyxTQUE3QndyRixFQUFpQnhyRixVQUN0QndyRixFQUFpQnhyRixRQUFVLFNBSW5Db21GLGNBQWN6bEYsR0FDVkEsRUFBRTRILGlCQUNHNUksRUFBS3lqRCxVQUFhempELEVBQUt1akQsWUFFNUI3akQsRUFBSzI5RCxZQUFZbjdELFFBQ2pCeEMsRUFBS3dDLFVBR1Q4cEYsdUJBQXdCLFNBQVVockYsR0FDOUJBLEVBQUU0SCxrQkFHTnFqRixhQUFjLFNBQVVqckYsR0FDcEJBLEVBQUU0SCxpQkFFRixNQUFNaXJCLEVBQVluMEIsRUFBS3VoRSxVQUFVc0IsZUFDM0I5MUIsRUFBT250QyxLQUFzQ0EsS0FBL0JJLEVBQUt1aEUsVUFBVXVCLGNBQzdCcnpCLEVBQVNudkMsRUFBSzAvQixXQUFXN0wsRUFBVTlxQixZQUVuQ3FLLEVBQVNwVCxFQUFLQyxjQUFja3ZDLEVBQVMsS0FBT252QyxFQUFLd3hDLE9BQU8zZCxFQUFVOXFCLFlBQWMsTUFBUWxILEVBQVFnMUQsWUFHdEcsR0FGSzFuQixJQUFRLzdCLEVBQU8xUCxVQUFZLFFBRTVCaEUsRUFBS3dnRSxnQkFBa0J4Z0UsRUFBSzhwRSxlQUFlcDJELEVBQU9zQyxVQUFXLGFBQWMsT0FFL0VtZSxFQUFVOXFCLFdBQVdvMkIsYUFBYS9yQixFQUFnQixNQUFScTVCLEVBQWM1WSxFQUFZQSxFQUFVaVgsYUFDOUVwckMsRUFBS2cwRCxhQUFhdHpELE1BQU1DLFFBQVUsT0FDbENYLEVBQUt1aEUsVUFBVXNCLGVBQWlCLEtBRWhDLE1BQU1qcEMsRUFBVTZWLEVBQVMvN0IsRUFBU0EsRUFBT2tDLFdBQ3pDNVYsRUFBS2d6QixTQUFTNEcsRUFBUyxFQUFHQSxFQUFTLEdBRW5DNTVCLEVBQUtzekIsUUFBUS9xQixNQUFLLElBR3RCazRFLGdCQUFpQixLQUNqQkUsaUJBQWtCLEtBQ2xCTCxVQUFXLFdBQ1AsTUFBTWtNLEVBQWVycUYsRUFBUW9rRCxPQUFTdm1ELEVBQUs0OUQsSUFBTTM5RCxFQUFRbUIsUUFBUTB2QixRQUM3RHh3QixFQUFLMGpELDRCQUNMcGtELEtBQUs2Z0YsZ0JBQWtCLElBQUl6NkUsRUFBR3UrQyxnQkFBZSxTQUFTa29DLEdBQ2xEenNGLEVBQUsyL0Usc0JBQXNCLEVBQUc4TSxFQUFRLFFBSzlDeHNGLEVBQVFtQixRQUFRNmYsUUFBUWhnQixpQkFBaUIsWUFBYW9qRSxFQUFNOGQsc0JBQXNCLEdBQ2xGbGlGLEVBQVFtQixRQUFRbXlELFVBQVV0eUQsaUJBQWlCLFlBQWFvakUsRUFBTThkLHNCQUFzQixHQUNwRmxpRixFQUFRbUIsUUFBUTZmLFFBQVFoZ0IsaUJBQWlCLFFBQVNvakUsRUFBTWllLGlCQUFpQixHQUV6RWtLLEVBQWF2ckYsaUJBQWlCLFlBQWFvakUsRUFBTW1lLHFCQUFxQixHQUN0RWdLLEVBQWF2ckYsaUJBQWlCLFFBQVNvakUsRUFBTXNlLGlCQUFpQixHQUM5RDZKLEVBQWF2ckYsaUJBQWlCWCxFQUFLa3BDLEtBQU8sWUFBYyxRQUFTNjZCLEVBQU1zZ0IsaUJBQWlCLEdBQ3hGNkgsRUFBYXZyRixpQkFBaUIsVUFBV29qRSxFQUFNK2dCLG1CQUFtQixHQUNsRW9ILEVBQWF2ckYsaUJBQWlCLFFBQVNvakUsRUFBTXFrQixpQkFBaUIsR0FDOUQ4RCxFQUFhdnJGLGlCQUFpQixRQUFTb2pFLEVBQU1rbUIsaUJBQWlCLEdBQzlEaUMsRUFBYXZyRixpQkFBaUIsT0FBUW9qRSxFQUFNdW1CLGdCQUFnQixHQUM1RDRCLEVBQWF2ckYsaUJBQWlCLE1BQU9vakUsRUFBTTJtQixlQUFlLEdBQzFEd0IsRUFBYXZyRixpQkFBaUIsT0FBUW9qRSxFQUFNNm1CLGdCQUFnQixHQUM1RHNCLEVBQWF2ckYsaUJBQWlCLFNBQVVvakUsRUFBTTBrQixrQkFBa0IsR0FDaEV5RCxFQUFhdnJGLGlCQUFpQixRQUFTb2pFLEVBQU00a0IsaUJBQWlCLEdBQzlEdUQsRUFBYXZyRixpQkFBaUIsT0FBUW9qRSxFQUFNOGtCLGdCQUFnQixHQUc1RDlrQixFQUFNeWMsaUJBQW1CLENBQUUxeEUsRUFBR2kxRCxFQUFNa29CLGFBQWF0dEYsS0FBSyxJQUFLTixFQUFHMGxFLEVBQU1rb0IsYUFBYXR0RixLQUFLLEtBQU1pYSxFQUFHbXJELEVBQU1rb0IsYUFBYXR0RixLQUFLLE1BQ3ZIdXRGLEVBQWF2ckYsaUJBQWlCLFlBQWFvakUsRUFBTTZuQixxQkFBcUIsR0FDdEVsc0YsRUFBS21nRSxtQkFBbUJsL0QsaUJBQWlCLFlBQWFvakUsRUFBTWlvQix3QkFBd0IsR0FDcEZ0c0YsRUFBS21nRSxtQkFBbUJsL0QsaUJBQWlCLFFBQVNvakUsRUFBTXljLGlCQUFpQjF4RSxHQUFHLEdBQzVFblAsRUFBUW1CLFFBQVE4NkQsY0FBY2o3RCxpQkFBaUIsWUFBYW9qRSxFQUFNeWMsaUJBQWlCbmlGLEdBQUcsR0FDdEZzQixFQUFRbUIsUUFBUSs2RCxjQUFjbDdELGlCQUFpQixZQUFhb2pFLEVBQU15YyxpQkFBaUI1bkUsR0FBRyxHQUd0RnN6RSxFQUFhdnJGLGlCQUFpQixhQUFjb2pFLEVBQU1tZSxvQkFBcUIsQ0FBQ2tLLFNBQVMsRUFBTS9RLFlBQVksSUFDbkc2USxFQUFhdnJGLGlCQUFpQixXQUFZb2pFLEVBQU1zZSxnQkFBaUIsQ0FBQytKLFNBQVMsRUFBTS9RLFlBQVksSUFHdEUsU0FBbkJ4NUUsRUFBUWdhLFFBQXNCaGEsRUFBUWl6RCxtQkFDdENuMUQsRUFBUW1CLFFBQVE0ZixLQUFLL2YsaUJBQWlCLFVBQVdvakUsRUFBTStTLHFCQUFxQixHQUM1RW4zRSxFQUFRbUIsUUFBUTRmLEtBQUsvZixpQkFBaUIsUUFBU29qRSxFQUFNK1MscUJBQXFCLEdBQzFFbjNFLEVBQVFtQixRQUFRNGYsS0FBSy9mLGlCQUFpQixRQUFTb2pFLEVBQU0rUyxxQkFBcUIsSUFJMUVuM0UsRUFBUW1CLFFBQVE4d0QsY0FDWixNQUFNM3dELEtBQUtZLEVBQVFnYSxTQUFXaGEsRUFBUTQyRCxhQUN0Qzk0RCxFQUFRbUIsUUFBUTh3RCxZQUFZanhELGlCQUFpQixZQUFhb2pFLEVBQU1nbEIseUJBQXlCLEdBRXpGL29GLEVBQUt5SSxTQUFTOUksRUFBUW1CLFFBQVE4d0QsWUFBYSxxQkFLbkRtUyxFQUFNc29CLHdCQUdGcnNGLEVBQUswakQsNEJBQTJCcGtELEtBQUsrZ0YsaUJBQW1CLElBQUkzNkUsRUFBR3UrQyxlQUFldmtELEVBQUt1OEUseUJBR3ZGdjJFLEVBQUcvRSxpQkFBaUIsU0FBVW9qRSxFQUFNbWMsaUJBQWlCLEdBQ2pEcitFLEVBQVFvMkQsZUFBaUIsR0FDekJ2eUQsRUFBRy9FLGlCQUFpQixTQUFVb2pFLEVBQU1nVCxpQkFBaUIsSUFJN0R1VixhQUFjLFdBQ1YsTUFBTUosRUFBZXJxRixFQUFRb2tELE9BQVN2bUQsRUFBSzQ5RCxJQUFNMzlELEVBQVFtQixRQUFRMHZCLFFBRWpFN3dCLEVBQVFtQixRQUFRNmYsUUFBUWhmLG9CQUFvQixZQUFhb2lFLEVBQU04ZCxzQkFDL0RsaUYsRUFBUW1CLFFBQVFteUQsVUFBVXR4RCxvQkFBb0IsWUFBYW9pRSxFQUFNOGQsc0JBQ2pFbGlGLEVBQVFtQixRQUFRNmYsUUFBUWhmLG9CQUFvQixRQUFTb2lFLEVBQU1pZSxpQkFFM0RrSyxFQUFhdnFGLG9CQUFvQixZQUFhb2lFLEVBQU1tZSxxQkFDcERnSyxFQUFhdnFGLG9CQUFvQixRQUFTb2lFLEVBQU1zZSxpQkFDaEQ2SixFQUFhdnFGLG9CQUFvQjNCLEVBQUtrcEMsS0FBTyxZQUFjLFFBQVM2NkIsRUFBTXNnQixpQkFDMUU2SCxFQUFhdnFGLG9CQUFvQixVQUFXb2lFLEVBQU0rZ0IsbUJBQ2xEb0gsRUFBYXZxRixvQkFBb0IsUUFBU29pRSxFQUFNcWtCLGlCQUNoRDhELEVBQWF2cUYsb0JBQW9CLFFBQVNvaUUsRUFBTWttQixpQkFDaERpQyxFQUFhdnFGLG9CQUFvQixPQUFRb2lFLEVBQU11bUIsZ0JBQy9DNEIsRUFBYXZxRixvQkFBb0IsTUFBT29pRSxFQUFNMm1CLGVBQzlDd0IsRUFBYXZxRixvQkFBb0IsT0FBUW9pRSxFQUFNNm1CLGdCQUMvQ3NCLEVBQWF2cUYsb0JBQW9CLFNBQVVvaUUsRUFBTTBrQixrQkFFakR5RCxFQUFhdnFGLG9CQUFvQixZQUFhb2lFLEVBQU02bkIscUJBQ3BEbHNGLEVBQUttZ0UsbUJBQW1CbCtELG9CQUFvQixZQUFhb2lFLEVBQU1pb0Isd0JBQy9EdHNGLEVBQUttZ0UsbUJBQW1CbCtELG9CQUFvQixRQUFTb2lFLEVBQU15YyxpQkFBaUIxeEUsR0FDNUVuUCxFQUFRbUIsUUFBUTg2RCxjQUFjajZELG9CQUFvQixZQUFhb2lFLEVBQU15YyxpQkFBaUJuaUYsR0FDdEZzQixFQUFRbUIsUUFBUSs2RCxjQUFjbDZELG9CQUFvQixZQUFhb2lFLEVBQU15YyxpQkFBaUI1bkUsR0FDdEZtckQsRUFBTXljLGlCQUFtQixLQUV6QjBMLEVBQWF2cUYsb0JBQW9CLGFBQWNvaUUsRUFBTW1lLG9CQUFxQixDQUFDa0ssU0FBUyxFQUFNL1EsWUFBWSxJQUN0RzZRLEVBQWF2cUYsb0JBQW9CLFdBQVlvaUUsRUFBTXNlLGdCQUFpQixDQUFDK0osU0FBUyxFQUFNL1EsWUFBWSxJQUNoRzZRLEVBQWF2cUYsb0JBQW9CLFFBQVNvaUUsRUFBTTRrQixpQkFDaER1RCxFQUFhdnFGLG9CQUFvQixPQUFRb2lFLEVBQU04a0IsZ0JBRS9DbHBGLEVBQVFtQixRQUFRNGYsS0FBSy9lLG9CQUFvQixVQUFXb2lFLEVBQU0rUyxxQkFDMURuM0UsRUFBUW1CLFFBQVE0ZixLQUFLL2Usb0JBQW9CLFFBQVNvaUUsRUFBTStTLHFCQUN4RG4zRSxFQUFRbUIsUUFBUTRmLEtBQUsvZSxvQkFBb0IsUUFBU29pRSxFQUFNK1MscUJBRXBEbjNFLEVBQVFtQixRQUFROHdELGFBQ2hCanlELEVBQVFtQixRQUFROHdELFlBQVlqd0Qsb0JBQW9CLFlBQWFvaUUsRUFBTWdsQix5QkFHbkVobEIsRUFBTW9jLGtCQUNOcGMsRUFBTW9jLGdCQUFnQm9NLFVBQVU1c0YsRUFBUW1CLFFBQVFncUQsY0FDaERpWixFQUFNb2MsZ0JBQWtCLE1BR3hCcGMsRUFBTXNjLG1CQUNOdGMsRUFBTXNjLGlCQUFpQmtNLFVBQVU1c0YsRUFBUW1CLFFBQVFreUQsZ0JBQ2pEK1EsRUFBTXNjLGlCQUFtQixNQUc3QjM2RSxFQUFHL0Qsb0JBQW9CLFNBQVVvaUUsRUFBTW1jLGlCQUN2Q3g2RSxFQUFHL0Qsb0JBQW9CLFNBQVVvaUUsRUFBTWdULGtCQUczQ3NWLHNCQUF1QixXQUNuQixHQUFrQyxJQUE5QnA0QixFQUFtQnJ1RCxPQUVuQixZQURBcXVELEVBQXFCLE1BSXpCOFAsRUFBTXNZLHVCQUF5QixVQUMvQixNQUFNbVEsRUFBWXpvQixFQUFNb1ksc0JBQXdCLEdBQzFDc1EsRUFBYTFvQixFQUFNOVAsbUJBQXFCLENBQUNyekMsUUFBU3F6QyxFQUFtQixJQUMzRSxJQUFLLElBQTRDL3VDLEVBQU0yMUMsRUFBOUMxOUQsRUFBSSxFQUFHNEosRUFBTWt0RCxFQUFtQnJ1RCxPQUEyQnpJLEVBQUk0SixFQUFLNUosSUFDekUwOUQsRUFBYzVHLEVBQW1COTJELEdBQ2pDK25CLEVBQXdCLEVBQWpCMjFDLEVBQVksR0FDbkIyeEIsRUFBVXZrRixLQUFLaWQsR0FDZnVuRSxFQUFXdm5FLEdBQVEyMUMsRUFBWSxHQUduQzJ4QixFQUFVcnlDLE1BQUssU0FBVXJyQyxFQUFHOEosR0FBSyxPQUFPOUosRUFBSThKLEtBQU0waUQsUUFBUSxhQUs1RGxpQyxFQUFZLENBSWQxNUIsS0FBTUEsRUFDTk0sS0FBTUEsRUFPTnE4QixPQUFRLEtBQ1Jxc0QsU0FBVSxLQUNWdkcsWUFBYSxLQUNiRyxRQUFTLEtBQ1RnQyxRQUFTLEtBQ1RjLFVBQVcsS0FDWG9ELFFBQVMsS0FDVCtCLE9BQVEsS0FDUkksTUFBTyxLQUNQL0IsUUFBUyxLQVFURSxPQUFRLEtBT1IxSixTQUFVLEtBT1ZxTCxPQUFRLEtBWVJpQixPQUFRLEtBQ1JELFFBQVMsS0FRVHJILFdBQVksS0FTWm5mLGVBQWdCLEtBT2hCaVEsZUFBZ0IsS0FPaEJDLGlCQUFrQixLQWVsQnI1QyxtQkFBb0IsS0FhcEJvSixtQkFBb0IsS0FVcEJzRCxtQkFBb0IsS0ErQnBCck4sb0JBQXFCLEtBNEJyQjJKLG9CQUFxQixLQXlCckJzRCxvQkFBcUIsS0FrQnJCdk8sY0FBZSxLQUtmd0ssY0FBZSxLQUtmeUQsY0FBZSxLQVNmak4sbUJBQW9CLEtBS3BCZ0ssbUJBQW9CLEtBS3BCc0QsbUJBQW9CLEtBS3BCdTNDLGVBQWdCLEtBUWhCZ04sb0JBQXFCLEtBT3JCcFEsa0JBQW1CLFNBQVUzd0IsR0FDekJqc0QsRUFBSytxQixhQUNML3FCLEVBQUtra0UsZUFDTGxrRSxFQUFLOGpFLGVBRUwsTUFBTW1wQixFQUFhandCLEVBQWE1TCxlQUFlcHZELEVBQUlpcUQsRUFBWWpzRCxFQUFLMEIsUUFBU1MsR0FDN0VveUQsRUFBcUIwNEIsRUFBV3o0QixrQkFDaEM2UCxFQUFNc29CLHdCQUVOMXNGLEVBQVFtQixRQUFRNmYsUUFBUThlLGFBQWFrdEQsRUFBV3Z5QixZQUFhejZELEVBQVFtQixRQUFRczVELGFBQzdFLE1BQU13eUIsRUFBYXB4QixFQUFTNzdELEVBQVFtQixRQUFRcTBELGNBQWV6MUQsRUFBS29nRixnQkFBZ0JuZ0YsRUFBUW1CLFNBQVVlLEdBRWxHbEMsRUFBUW1CLFFBQVU4ckYsRUFBVzlyRixRQUM3Qm5CLEVBQVFvOEQsS0FBTzZ3QixFQUFXN3dCLEtBQ3RCbDZELEVBQVFva0QsU0FBUXRtRCxFQUFRbUIsUUFBUTB2QixRQUFVOXdCLEVBQUswK0MsSUFBSXA3QyxNQUV2RHRELEVBQUttakUsdUJBQ0xuakUsRUFBS3ErRSxrQkFDTHIrRSxFQUFLc3pCLFFBQVE2aUQsc0JBRWJuMkUsRUFBS3V0QyxXQUFhLEtBQ2R2dEMsRUFBS2l1QyxVQUFVbzJCLEVBQU1pQyxtQkFDckJ0bUUsRUFBS3EvRCxZQUFZLytELEVBQUswckQsb0JBQW1CLEVBQU1oc0QsRUFBSzIrRCx5QkFDWCxtQkFBbENqbEMsRUFBVXN6RCxxQkFBb0N0ekQsRUFBVXN6RCxvQkFBb0JDLEVBQVd2eUIsWUFBWWx5RCxpQkFBaUIsVUFBV3hJLElBTzlJbXRGLFdBQVksU0FBVUMsR0FDbEIvb0IsRUFBTXVvQixlQUNONXNGLEVBQUt3NEUsbUJBRUxsNEUsRUFBS3dJLFlBQVk5SSxFQUFLcWhFLGlCQUFpQm4rQyxXQUFZLFVBQ25ENWlCLEVBQUt3SSxZQUFZOUksRUFBS3FoRSxpQkFBaUJsK0MsU0FBVSxVQUNqRG5qQixFQUFLdWhFLFVBQVVFLFlBQWEsRUFDNUJ6aEUsRUFBS3cvRSxZQUFjLEtBRW5CeC9FLEVBQUswQixRQUFVMHJGLEVBQVMxckYsU0FBVzFCLEVBQUswQixRQUN4QyxNQUFNNnpELEVBQWUsQ0FBQ3B6RCxFQUFTaXJGLEdBQVV0NEIsUUFBTyxTQUFVcnlELEVBQU02TCxHQUM1RCxJQUFLLElBQUl0UCxLQUFPc1AsRUFDWixHQUFLaE8sRUFBSzBqQyxPQUFPMTFCLEVBQVF0UCxHQUN6QixHQUFZLFlBQVJBLEdBQXFCc1AsRUFBT3RQLElBQVF5RCxFQUFLekQsR0FBTSxDQUMvQyxJQUFJdkIsRUFBSWdGLEVBQUt6RCxHQUFNZCxFQUFJb1EsRUFBT3RQLEdBQzlCdkIsRUFBSUEsRUFBRXlJLE9BQVN6SSxFQUFJdUksRUFBRzdILE9BQU84SCxLQUFLeEksR0FBR3lLLEtBQUksU0FBU2xLLEdBQVEsT0FBT1AsRUFBRU8sTUFDbkVFLEVBQUlBLEVBQUVnSSxPQUFTaEksRUFBSThILEVBQUc3SCxPQUFPOEgsS0FBSy9ILEdBQUdnSyxLQUFJLFNBQVNsSyxHQUFRLE9BQU9FLEVBQUVGLE1BQ25FeUUsRUFBS3pELEdBQVFkLEVBQUU4SyxRQUFPLFNBQVM4ekQsR0FBTyxPQUEyQixJQUFwQnIvRCxFQUFFNkssUUFBUXcwRCxNQUFpQnBpRCxPQUFPamQsUUFFL0VnRixFQUFLekQsR0FBT3NQLEVBQU90UCxHQUczQixPQUFPeUQsSUFDUixJQUVHbXhDLEVBQUszekMsRUFBUW1CLFFBQ2JrOEUsRUFBWTFwQyxFQUFHOWlCLFFBQVE5c0IsVUFHdkIrM0QsRUFBT2lCLEVBQWExSCxZQUFZQyxFQUFjdDFELEVBQVNrQyxHQUV6RDQ1RCxFQUFLakcsY0FDTHhFLEVBQW9CeUssRUFBS2pHLFlBQ3pCOTFELEVBQUtnK0QsWUFBYyxJQUduQmpDLEVBQUtyNkQsVUFDTDFCLEVBQUswQixRQUFVQSxFQUFVcTZELEVBQUtyNkQsU0FJRyxJQUFqQ2t5QyxFQUFHMmYsVUFBVS96QyxTQUFTdFosU0FBY3RHLEtBQUsyekQsVUFBWSxJQUN6RGdCLEVBQXFCd0gsRUFBSzk2QyxRQUFRdXpDLGtCQUNsQ3gwRCxFQUFLbUMsUUFBVUEsRUFBVW96RCxFQUN6QnYxRCxFQUFLd0UsS0FBT0EsRUFBT3JDLEVBQVFxQyxLQUV2QnJDLEVBQVFva0QsUUFDUjNTLEVBQUd3WCxhQUFhbnFELGlCQUFpQixRQUFRLFdBQ3JDWCxFQUFLaXdELG1CQUFtQjN3RCxLQUFNdUMsR0FDOUJuQyxFQUFLbWdGLGdCQUFnQnZzQyxFQUFJMHBDLE1BSWpDMXBDLEVBQUc4aEIsV0FBVzcwRCxZQUFZK3lDLEVBQUd3WCxjQUV4QmpwRCxFQUFRb2tELFFBQ1R2bUQsRUFBS21nRixnQkFBZ0J2c0MsRUFBSTBwQyxJQVVqQytQLGdCQUFpQixTQUFVM3NGLEdBQ3ZCLE1BQU00c0YsRUFBWW5yRixFQUFRK3pELGNBQWdCNTFELEVBQUs0dkQsdUJBQXVCL3RELEVBQVN6QixHQUN6RWt6QyxFQUFLM3pDLEVBQVFtQixRQUduQnd5QyxFQUFHaWlCLFFBQVFuMUQsTUFBTXNuQyxRQUFVc2xELEVBQVV0OUQsSUFFckM0akIsRUFBRzV5QixLQUFLdGdCLE1BQU1zbkMsUUFBVTdsQyxFQUFRK3pELGNBQWN6eEIsTUFDOUNtUCxFQUFHNXlCLEtBQUt0Z0IsTUFBTUMsUUFBVSxPQUNELFNBQW5Cd0IsRUFBUWdhLE9BQ1J5M0IsRUFBRzV5QixLQUFLdGdCLE1BQU00MUQsU0FBVyxTQUV6QjFpQixFQUFHNXlCLEtBQUt0Z0IsTUFBTTQxRCxTQUFXLEdBR3hCbjBELEVBQVFva0QsUUFHVDNTLEVBQUd3WCxhQUFhMXFELE1BQU1zbkMsUUFBVXNsRCxFQUFVN29ELE1BQzFDbVAsRUFBRzlpQixRQUFRcHdCLE1BQU1zbkMsUUFBVXNsRCxFQUFVajlCLFFBSHJDemMsRUFBR3dYLGFBQWExcUQsTUFBTXNuQyxRQUFVc2xELEVBQVU3b0QsTUFBUTZvRCxFQUFVajlCLFFBV3BFajFCLFdBQVksU0FBVXQwQixHQUNsQjlHLEVBQUtzOEQsT0FBTzE2RCxLQUFLaEUsS0FBS29DLEVBQU04RyxJQU1oQ3ltRixZQUFhLFdBQ1R2dEYsRUFBS3M4RCxPQUFPMzZELE1BQU0vRCxLQUFLb0MsSUFPM0JtaEIsS0FBTSxXQUNGLE1BQU15akMsRUFBVzVrRCxFQUFLNDFFLGFBQVksR0FDbEMzMUUsRUFBUW1CLFFBQVFxMEQsY0FBYy8yRCxNQUFRa21ELEVBQ3RDeWYsRUFBTXltQixlQUFlbG1DLEVBQVU1a0QsSUFPbkN3dEYsV0FBWSxXQUNSLE9BQU92dEYsR0FTWDIxRSxZQUFhLFNBQVVnRCxHQUNuQixPQUFPNTRFLEVBQUs0MUUsWUFBWWdELElBUTVCNlUsUUFBUyxXQUNMLE9BQU94dEYsRUFBUW1CLFFBQVEwdkIsUUFBUTNyQixhQVVuQ2kzRSxhQUFjLFNBQVVwakIsR0FFcEIsT0FEQUEsRUFBNkMsaUJBQXBCQSxFQUErQkEsRUFBa0I3MkQsRUFBUTYyRCxnQkFDM0VoNUQsRUFBS2c4RSxjQUFlaDhFLEVBQUt3Z0UsY0FBZ0J2Z0UsRUFBUW1CLFFBQVEwdkIsUUFBUTlzQixVQUFZL0QsRUFBUW1CLFFBQVEwdkIsUUFBUTNyQixZQUFjNnpELElBYzlIMDBCLGNBQWUsV0FDWCxPQUFPenRGLEVBQVE2aUIsTUFBUTdpQixFQUFRNmlCLE1BQU15UixVQUFZLElBaUJyRG81RCxhQUFjLFNBQVU5b0YsR0FDcEIsT0FBTzVFLEVBQVE0RSxHQUFjNUUsRUFBUTRFLEdBQVkwdkIsVUFBWSxJQU9qRTAzRCxZQUFhLFNBQVV2eEQsR0FDZDE2QixFQUFLMEIsUUFBUW9oQixPQUFVNFgsSUFFdkIxNkIsRUFBS2crRCxZQUFZbDdDLE1BQ2pCOWlCLEVBQUswQixRQUFRb2hCLE1BQU02WCxhQUFhLzhCLEtBQUtvQyxFQUFNMDZCLEdBRG5CMTZCLEVBQUs2NEIsV0FBVyxRQUFTNzRCLEVBQUswQixRQUFRb2hCLE1BQU02WCxhQUFhMTdCLEtBQUtlLEVBQU0wNkIsR0FBUSxNQUV6RzE2QixFQUFLd0MsVUFVVDZrRixXQUFZLFNBQVV6c0UsRUFBTWd6RSxFQUFpQjlqQixFQUFnQitqQixHQUd6RCxHQUZLNXRGLEVBQVFtQixRQUFRZ3FELGFBQWFsN0IsU0FBU2x3QixFQUFLb3ZCLGVBQWVtNEMsWUFBWXZuRSxFQUFLd0MsUUFFNUQsaUJBQVRvWSxFQUFtQixDQUNyQmd6RSxJQUFpQmh6RSxFQUFPNWEsRUFBSzY0RSxVQUFVaitELEVBQU0sS0FBTSxPQUNyRGt6RSxNQUFVbHpFLEVBQU9rekUsSUFBUyxDQUFDQyxNQUFPbnpFLEVBQU16WSxRQUFTLENBQUUwa0QsV0FBWSxDQUFFcmxELE9BQVEsY0FJNUUsSUFDSSxHQUFJbEIsRUFBSzAvQixXQUFXMS9CLEVBQUtvOUIsaUJBQWlCMTlCLEVBQUs0cUIsbUJBQW9CLE9BQVEsQ0FDdkUsTUFDTTJ2RCxFQURNdjRFLEVBQUdvb0MsY0FBY0MseUJBQXlCenZCLEdBQ2xDdkUsV0FDaEJyVyxFQUFLdzZFLGNBQWNELEtBQVUzL0QsRUFBTzVhLEVBQUtzNkUsaUJBQWlCQyxJQUdsRSxNQUNNQSxFQURNdjRFLEVBQUdvb0MsY0FBY0MseUJBQXlCenZCLEdBQ2xDdkUsV0FFcEIsR0FBSXl6RCxFQUFnQixDQUNoQixNQUFNbGdFLEVBQU81SixFQUFLd2dFLGNBQWdCLFlBQWMsY0FDaEQsSUFBSXd0QixFQUFZLEdBQ2hCLElBQUssSUFBSXZ3RixFQUFJLEVBQUc0SixFQUFNa3pFLEVBQVFyMEUsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDM0N1d0YsR0FBYXpULEVBQVE5OEUsR0FBR21NLEdBRTVCLElBQUs1SixFQUFLOHBFLGVBQWVra0IsRUFBVyxNQUFPLE9BRy9DLElBQUlsd0YsRUFBR3NSLEVBQUd6USxFQUFHbzFDLEVBQU1rNkMsRUFDbkIsS0FBUW53RixFQUFJeThFLEVBQVEsSUFDWnhtQyxHQUEwQixJQUFsQkEsRUFBS3g5QixVQUFrQm5ILEdBQW9CLElBQWZBLEVBQUVtSCxVQUFrQmpXLEVBQUtzcEQsUUFBUTlyRCxJQUNyRWkyQyxFQUFPajJDLEVBQ1B3QyxFQUFLc3BCLFdBQVc5ckIsS0FHcEJhLEVBQUlxQixFQUFLb3pCLFdBQVd0MUIsRUFBR3NSLEdBQUcsR0FDMUJBLEVBQUl6USxFQUFFMC9CLFdBQWExL0IsRUFDZHN2RixJQUFVQSxFQUFXdHZGLEdBQzFCbzFDLEVBQU9qMkMsR0FHVyxJQUFsQmkyQyxFQUFLeDlCLFVBQWlDLElBQWZuSCxFQUFFbUgsV0FBZ0JuSCxFQUFJMmtDLEdBQ2pELE1BQU1nWixFQUF3QixJQUFmMzlDLEVBQUVtSCxTQUFrQjVYLEVBQUVteUMsV0FBYTFoQyxFQUFFakssWUFBWWUsT0FBU2tKLEVBQUVpSCxXQUFXblEsT0FDbEYybkYsRUFBZ0I3dEYsRUFBS2d6QixTQUFTaTdELEVBQVM1dkQsV0FBYTR2RCxFQUFVQSxFQUFTcDlDLGFBQWUsRUFBR3poQyxFQUFHMjlDLEdBQ3pFLElBQWYzOUMsRUFBRW1ILFVBQWtCbkgsRUFBRTI3QyxVQUMxQi9xRCxFQUFLZ3pCLFNBQVM1akIsRUFBRTI3QyxVQUFXMzdDLEVBQUUyN0MsVUFBVTVsRCxZQUFZZSxPQUFRa0osRUFBRTI3QyxVQUFXMzdDLEVBQUUyN0MsVUFBVTVsRCxZQUFZZSxRQUUvRmxHLEVBQUtnekIsU0FBUzVqQixFQUFHMjlDLEVBQVEzOUMsRUFBRzI5QyxHQUNuQyxNQUFPLy9DLEdBQ0wsR0FBSWhOLEVBQUtvL0QsWUFBY3AvRCxFQUFLcS9ELFdBQVksT0FDeENud0QsUUFBUUMsS0FBSywrQkFBaUNuQyxHQUM5Q2hOLEVBQUs4bEUsWUFBWSxjQUFjLEVBQU9sckQsU0FHMUMsR0FBSXRhLEVBQUs0bkMsWUFBWXR0QixHQUNqQjVhLEVBQUsyK0IsZ0JBQWdCL2pCLEdBQU0sRUFBT2t2RCxHQUFnQixPQUMvQyxDQUNILElBQUlnQixFQUFZLE1BQ1p4cUUsRUFBSzYvQixnQkFBZ0J2bEIsSUFBU3RhLEVBQUt1cEQsUUFBUWp2QyxNQUMzQ2t3RCxFQUFZeHFFLEVBQUtvOUIsaUJBQWlCMTlCLEVBQUs0cUIsbUJBQW9CLE9BRS9ENXFCLEVBQUtvekIsV0FBV3hZLEVBQU1rd0QsRUFBV2hCLEdBSXpDOXBFLEVBQUt1dEMsV0FBYSxLQUNsQnZ0QyxFQUFLd0MsUUFHTHhDLEVBQUtzekIsUUFBUS9xQixNQUFLLElBT3RCZ2pCLFlBQWEsU0FBVXE1QixHQUNuQjVrRCxFQUFLdXJCLFlBQVlxNUIsSUFPckJzcEMsZUFBZ0IsU0FBVXRwQyxHQUN0QixNQUFNMnpCLEVBQWV2NEUsRUFBSzQyRSx5QkFBeUJoeUIsR0FFbkQsR0FBSzVrRCxFQUFLdWhFLFVBQVVFLFdBWWhCemhFLEVBQUtpM0UsYUFBYWozRSxFQUFLeTJFLGVBQWlCLEtBQU96MkUsRUFBSysyRSx1QkFBdUJ3QixHQUFjLFFBWjdELENBQzVCLE1BQU05dUQsRUFBT25wQixFQUFLQyxjQUFjLE9BQ2hDa3BCLEVBQUt6bEIsVUFBWXUwRSxFQUVqQixNQUFNem5ELEVBQVU3d0IsRUFBUW1CLFFBQVEwdkIsUUFDMUJ0UixFQUFXaUssRUFBS2pLLFNBQ3RCLElBQUssSUFBSS9oQixFQUFJLEVBQUc0SixFQUFNbVksRUFBU3RaLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQ3hDK2hCLEVBQVMvaEIsSUFDVHF6QixFQUFRandCLFlBQVkyZSxFQUFTL2hCLElBUXpDdUMsRUFBS3N6QixRQUFRL3FCLE1BQUssSUFPdEI0bEYsU0FBVSxTQUFVenZGLEdBQ2hCc0IsRUFBS3EvRCxXQUFhM2dFLEVBRWxCNEIsRUFBSzByRCxxQkFBcUJ0dEQsRUFBT3NCLEVBQUsyK0QseUJBRWxDamdFLEdBRUFzQixFQUFLMHpCLGlCQUNEMXpCLEVBQUtzK0QscUJBQXVCdCtELEVBQUtzK0Qsb0JBQW9CMTVCLFVBQVU1a0MsRUFBSytxQixhQUNwRS9xQixFQUFLNCtELHdCQUEwQjUrRCxFQUFLNCtELHVCQUF1Qmg2QixVQUFVNWtDLEVBQUs4akUsZUFDMUU5akUsRUFBS3UrRCx1QkFBeUJ2K0QsRUFBS3UrRCxzQkFBc0IzNUIsVUFBVTVrQyxFQUFLa2tFLGVBQ3hFbGtFLEVBQUs4QixXQUFXOUIsRUFBSzBCLFFBQVE1QixPQUFPNkIsTUFBTS9ELEtBQUtvQyxHQUVuREMsRUFBUW1CLFFBQVE0ZixLQUFLL0ssYUFBYSxXQUFZLFFBQzlDM1YsRUFBS3lJLFNBQVM5SSxFQUFRbUIsUUFBUWdxRCxhQUFjLGtCQUU1Q25yRCxFQUFRbUIsUUFBUTRmLEtBQUs4USxnQkFBZ0IsWUFDckN4eEIsRUFBS3dJLFlBQVk3SSxFQUFRbUIsUUFBUWdxRCxhQUFjLGlCQUcvQ2pwRCxFQUFRaXpELGtCQUFrQmp6RCxFQUFRaXpELGlCQUFpQm5uRCxVQUFVLGFBQWN2UCxJQU1uRjB2RixRQUFTLFdBQ0x4dUYsS0FBS3FoQixRQUFRbXRFLFVBQ2J4dUYsS0FBS2t4QixRQUFRczlELFdBTWpCeHBELFNBQVUsV0FDTmhsQyxLQUFLd3VGLFdBTVRDLE9BQVEsV0FDSnp1RixLQUFLcWhCLFFBQVFvdEUsU0FDYnp1RixLQUFLa3hCLFFBQVF1OUQsVUFNakI5dkMsUUFBUyxXQUNMMytDLEtBQUt5dUYsVUFNVHorRCxLQUFNLFdBQ0YsTUFBTTArRCxFQUFlcnVGLEVBQVFtQixRQUFReTBELFFBQVFuMUQsTUFDaEIsU0FBekI0dEYsRUFBYTN0RixVQUFvQjJ0RixFQUFhM3RGLFFBQVV3QixFQUFReEIsVUFNeEU2MkUsS0FBTSxXQUNGdjNFLEVBQVFtQixRQUFReTBELFFBQVFuMUQsTUFBTUMsUUFBVSxRQU01Q3k0QixRQUFTLFdBRUxwNUIsRUFBSytxQixhQUNML3FCLEVBQUtra0UsZUFDTGxrRSxFQUFLMHpCLGlCQUNEMXpCLEVBQUtzOEQsUUFBUXQ4RCxFQUFLczhELE9BQU8zNkQsTUFBTS9ELEtBQUtvQyxHQUNwQ0EsRUFBSzhCLFdBQVc5QixFQUFLMEIsUUFBUTVCLE9BQU82QixNQUFNL0QsS0FBS29DLEdBR25EQSxFQUFLc3pCLFFBQVErckQsV0FHYmhiLEVBQU11b0IsZUFHTnRzRixFQUFLc3BCLFdBQVczcEIsRUFBUW1CLFFBQVE2ZixTQUNoQzNnQixFQUFLc3BCLFdBQVczcEIsRUFBUW1CLFFBQVF5MEQsU0FHaEMsSUFBSyxJQUFJa2EsS0FBSy92RSxFQUFLMDVCLFVBQWlCcDVCLEVBQUswakMsT0FBT2hrQyxFQUFNK3ZFLFdBQVcvdkUsRUFBSzA1QixVQUFVcTJDLEdBQ2hGLElBQUssSUFBSUEsS0FBSy92RSxFQUFZTSxFQUFLMGpDLE9BQU9oa0MsRUFBTSt2RSxXQUFXL3ZFLEVBQUsrdkUsR0FDNUQsSUFBSyxJQUFJQSxLQUFLMUwsRUFBYS9qRSxFQUFLMGpDLE9BQU9xZ0MsRUFBTzBMLFdBQVcxTCxFQUFNMEwsR0FDL0QsSUFBSyxJQUFJQSxLQUFLOXZFLEVBQWVLLEVBQUswakMsT0FBTy9qQyxFQUFTOHZFLFdBQVc5dkUsRUFBUTh2RSxHQUNyRSxJQUFLLElBQUlBLEtBQUt6ZSxFQUF5Qmh4RCxFQUFLMGpDLE9BQU9zdEIsRUFBbUJ5ZSxXQUFXemUsRUFBa0J5ZSxHQUduRyxJQUFLLElBQUlBLEtBQUtud0UsS0FBWVUsRUFBSzBqQyxPQUFPcGtDLEtBQU1td0UsV0FBV253RSxLQUFLbXdFLElBTWhFOXVELFFBQVMsQ0FJTG10RSxRQUFTLFdBRUxwdUYsRUFBSytxQixhQUNML3FCLEVBQUs4akUsZUFDTDlqRSxFQUFLa2tFLGVBRUxqa0UsRUFBUW84RCxLQUFLbCtCLE1BQU16OUIsTUFBTUMsUUFBVSxTQU12Q2lrQyxTQUFVLFdBQ05obEMsS0FBS3d1RixXQU1UQyxPQUFRLFdBQ0pwdUYsRUFBUW84RCxLQUFLbCtCLE1BQU16OUIsTUFBTUMsUUFBVSxRQU12QzQ5QyxRQUFTLFdBQ0wzK0MsS0FBS3l1RixVQU1UeitELEtBQU0sV0FDRTV2QixFQUFLNC9ELFVBQ0x5RSxFQUFNaVIsc0JBRU5yMUUsRUFBUW1CLFFBQVE2ZixRQUFRdmdCLE1BQU1DLFFBQVUsR0FDeENWLEVBQVFtQixRQUFRZ3pELGFBQWExekQsTUFBTUMsUUFBVSxJQUdqRDBqRSxFQUFNbWMsbUJBTVZoSixLQUFNLFdBQ0V4M0UsRUFBSzQvRCxVQUNMeUUsRUFBTTZSLGdCQUVOajJFLEVBQVFtQixRQUFRNmYsUUFBUXZnQixNQUFNQyxRQUFVLE9BQ3hDVixFQUFRbUIsUUFBUWd6RCxhQUFhMXpELE1BQU1DLFFBQVUsUUFHakQwakUsRUFBTW1jLG9CQU9kMXZELFFBQVMsQ0FJTHM5RCxRQUFTLFdBRUxwdUYsRUFBSzB6QixpQkFDRDF6QixFQUFLOEIsV0FBVzlCLEVBQUswQixRQUFRNUIsT0FBTzZCLE1BQU0vRCxLQUFLb0MsR0FFbkRDLEVBQVFtQixRQUFRMHZCLFFBQVE3YSxhQUFhLG1CQUFtQixHQUN4RGpXLEVBQUtvL0QsWUFBYSxFQUVkajlELEVBQVFpekQsaUJBQ1JqekQsRUFBUWl6RCxpQkFBaUJubkQsVUFBVSxZQUFZLEdBRS9DaE8sRUFBUW1CLFFBQVE0ZixLQUFLL0ssYUFBYSxXQUFZLGFBT3REbzRFLE9BQVEsV0FDSnB1RixFQUFRbUIsUUFBUTB2QixRQUFRN2EsYUFBYSxtQkFBbUIsR0FDeERqVyxFQUFLby9ELFlBQWEsRUFFZGo5RCxFQUFRaXpELGlCQUNSanpELEVBQVFpekQsaUJBQWlCbm5ELFVBQVUsWUFBWSxHQUUvQ2hPLEVBQVFtQixRQUFRNGYsS0FBSzhRLGdCQUFnQixlQVFyRDl4QixFQUFLMDVCLFVBQVlBLEVBQ2pCMTVCLEVBQUttQyxRQUFVQSxFQUdmLElBQUl5K0UsRUFBWTNnRixFQUFRbUIsUUFDcEI2bUQsRUFBVzI0QixFQUFVbnJCLGNBQ3JCcmxCLEVBQVF3d0MsRUFBVS9xQixRQTZCdEIsT0E1QkE1TixFQUFTdm5ELE1BQU1DLFFBQVUsT0FDekJ5dkMsRUFBTTF2QyxNQUFNQyxRQUFVLFFBR2xCd0IsRUFBUW9rRCxRQUNScTZCLEVBQVV4MUIsYUFBYW5xRCxpQkFBaUIsUUFBUSxXQUM1Q1gsRUFBS2l3RCxtQkFBbUIzd0QsS0FBTXVDLEdBQzlCbkMsRUFBS3FnRixhQUFZLEVBQU9sK0UsRUFBUXpELE9BQ2hDeUQsRUFBUXpELE1BQVEsUUFLbUIsaUJBQWhDdXBELEVBQVNudUIsbUJBQ2hCbXVCLEVBQVM1K0MsV0FBV28yQixhQUFhMlEsRUFBTzZYLEVBQVNudUIsb0JBRWpEbXVCLEVBQVM1K0MsV0FBV3hJLFlBQVl1dkMsR0FHcEN3d0MsRUFBVWxyQixXQUFXNzBELFlBQVkrL0UsRUFBVXgxQixjQUMzQ3cxQixFQUFZMzRCLEVBQVc3WCxFQUFRLEtBRzFCanVDLEVBQVFva0QsU0FDVHZtRCxFQUFLcWdGLGFBQVksRUFBT2wrRSxFQUFRekQsT0FDaEN5RCxFQUFRekQsTUFBUSxNQUdiZzdCLEVEbG9TSTE1QixDQUFLODdELEVBQVMxNkQsRUFBUzI2RCxFQUFLN0ksWUFBYTZJLEVBQUs1NUQsU0FBVTQ1RCxFQUFLekssa0JBQW1CeUssRUFBS3I2RCxRQUFTcTZELEVBQUs1NUQsUUFBUXFDLEtBQU1yQyxFQUFTNDVELEVBQUt4SCxzQkdoRXpJNTBELE9BQU80dUYsV0FDUnB3RixPQUFPQyxlQUFldUIsT0FBUSxZQUFhLENBQ3ZDdEIsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPOHZGLEVBQVUvckYsS0FBSyxDQUNsQmYsUUFBU0EsTyxrQ0NMcEIsSUFBVWpDLEVBQVFDLEVBQVJELEVBYVMsb0JBQVhFLE9BQXlCQSxPQUFTQyxLQWJ4QkYsRUFhOEIsU0FBVUMsRUFBUUUsR0FDL0QsTUFBTXMwQixFQUFZLENBQ2RuMkIsS0FBTSxZQU9Oc2dDLGNBQWUsU0FBVUgsRUFBTzM5QixHQUM1QixNQUFNNjlCLEVBQVl6K0IsS0FBS1UsS0FBS0MsY0FBYyxPQUkxQyxPQUhBODlCLEVBQVU3OUIsVUFBWSxnQkFBa0JBLEVBQ3hDNjlCLEVBQVV4OUIsWUFBWXM5QixHQUVmRSxHQU9YRCxVQUFXLFNBQVVoOUIsR0FDakIsTUFBTSs4QixFQUFRditCLEtBQUtVLEtBQUtDLGNBQWMsVUFHdEMsT0FGQTQ5QixFQUFNdDlCLFlBQVlPLEdBRVgrOEIsR0FPWEksZUFBZ0IsV0FDWixNQUFNclosRUFBVXRsQixLQUFLVSxLQUFLQyxjQUFjLGNBRXhDLE9BREEya0IsRUFBUWxoQixVQUFZLFFBQVVwRSxLQUFLNEUsS0FBS0MsVUFBVXlnQixRQUFVLFNBQ3JEQSxJQXNCZixZQWxCd0IsSUFBYnJsQixJQUNGRixFQUFPK0MsbUJBQ1J2RSxPQUFPQyxlQUFldUIsRUFBUSxvQkFBcUIsQ0FDL0N0QixZQUFZLEVBQ1pzRSxVQUFVLEVBQ1ZDLGNBQWMsRUFDZGxFLE1BQU8sS0FJZlAsT0FBT0MsZUFBZXVCLEVBQU8rQyxrQkFBbUIsWUFBYSxDQUN6RHJFLFlBQVksRUFDWnNFLFVBQVUsRUFDVkMsY0FBYyxFQUNkbEUsTUFBT3kxQixLQUlSQSxHQXJFcUQsaUJBQW5CMzJCLEVBQU9ELFFBQzVDQyxFQUFPRCxRQUFVa0MsRUFBT29ELFNBQ3BCbkQsRUFBUUQsR0FBUSxHQUNoQixTQUFVcUQsR0FDTixJQUFLQSxFQUFFRCxTQUNILE1BQU0sSUFBSUUsTUFBTSw4Q0FFcEIsT0FBT3JELEVBQVFvRCxJQUd2QnBELEVBQVFELEkscUJDbkJnRGpDLEVBQU9ELFFBRzdELFdBQWMsYUFFdkIsU0FBU2t4RixFQUFlNTlFLEdBQ3ZCLE9BQU9BLEdBQUtBLEVBQUVoUyxZQUFjVixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUtpVCxFQUFHLFdBQWFBLEVBQVcsUUFBSUEsRUFHakcsU0FBUzY5RSxFQUFxQkMsRUFBSW54RixHQUNqQyxPQUFpQ214RixFQUExQm54RixFQUFTLENBQUVELFFBQVMsSUFBaUJDLEVBQU9ELFNBQVVDLEVBQU9ELFFBR3JFLElBQUlxeEYsRUFBT0YsR0FBcUIsU0FBVWx4RixFQUFRRCxHQUNsRFksT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3REbkIsRUFBUXN4RixVQUFPLEVBQ2Z0eEYsRUFBUXN4RixLQUFPLHUyU0FHZkosRUFBY0csR0FDZEEsRUFBS0MsS0FFTCxJQUFJQyxFQUFhSixHQUFxQixTQUFVbHhGLEVBQVFELEdBQ3hEWSxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRc3hGLEtBQU90eEYsRUFBUXd4Rix1QkFBeUJ4eEYsRUFBUXl4RixlQUFpQnp4RixFQUFRMHhGLFlBQWMxeEYsRUFBUTJ4RixtQkFBcUIzeEYsRUFBUTR4Rix3QkFBcUIsRUFFeko1eEYsRUFBUTR4RixtQkFBcUIsU0FDN0I1eEYsRUFBUTJ4RixtQkFBcUIsU0FDN0IzeEYsRUFBUTB4RixZQUFjMXhGLEVBQVE0eEYsbUJBQ3pCbG5GLE1BQU0sSUFDTkMsS0FBSSxTQUFVMkksRUFBR3BULEdBQUssTUFBTyxHQUFHaWQsT0FBTzdKLEdBQUc2SixPQUFPbmQsRUFBUTJ4RixtQkFBbUIxaUQsT0FBTy91QyxPQUN4RkYsRUFBUXl4RixlQUFpQixDQUNyQixNQUNBLE9BQ0EsT0FDQSxPQUNBLGFBQ0EsT0FDQSxXQUNBLFNBQ0EsV0FDQSxhQUNBLFVBQ0EsU0FDQSxXQUNBLFNBQ0EsV0FDQSxVQUNBLFdBRUp6eEYsRUFBUXd4Rix1QkFBeUIsd3dKQUNqQ3h4RixFQUFRc3hGLEtBQU9ELEVBQUtDLFFBR3BCSixFQUFjSyxHQUNkQSxFQUFXRCxLQUNYQyxFQUFXQyx1QkFDWEQsRUFBV0UsZUFDWEYsRUFBV0csWUFDWEgsRUFBV0ksbUJBQ1hKLEVBQVdLLG1CQUVYLElBQUlDLEVBQWNWLEdBQXFCLFNBQVVseEYsRUFBUUQsR0FHekQsU0FBUzh4RixFQUFZMWdDLEVBQVEyZ0MsRUFBT2hoRixHQUVoQyxNQUFzQixtQkFBWEEsRUFDQUEsRUFBT3FnRCxFQUFRMmdDLEdBSWZoaEYsRUFUZm5RLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RG5CLEVBQVFneUYsZUFBWSxFQW1FcEJoeUYsRUFBUWd5RixVQXhEUixTQUFtQnhCLEVBQU81ckYsR0FDdEIsSUFBSW1yQixFQUFXLEdBQ1hraUUsRUFBYXg2QixJQUNibk8sRUFBYSxHQUNiNG9DLEdBQXdCLEVBRTVCLEdBQUl0dEYsR0FBV0EsRUFBUXV0RixpQkFDbkIsSUFBSyxJQUFJeitFLEVBQVEsRUFBR0EsRUFBUTlPLEVBQVF1dEYsaUJBQWlCeHBGLE9BQVErSyxJQUFTLENBQ2xFLElBQUkwK0UsRUFBY3h0RixFQUFRdXRGLGlCQUFpQnorRSxHQUMzQyxHQUFJMCtFLEVBQVlwdUYsS0FBS0EsS0FBS3dzRixFQUFNcC9CLFFBQzVCLE9BQU9naEMsRUFBWUosVUFBVXhCLEVBQU1wL0IsT0FBUW8vQixHQUt2RCxPQUFJNXJGLEdBQVdBLEVBQVF5dEYsU0FDZlAsRUFBWXRCLEVBQU1wL0IsT0FBUW8vQixFQUFPNXJGLEVBQVF5dEYsU0FDaEM3QixFQUFNcC9CLFFBR25CeHNELEdBQVdBLEVBQVFtckIsV0FDbkJBLEVBQVcraEUsRUFBWXRCLEVBQU1wL0IsT0FBUW8vQixFQUFPNXJGLEVBQVFtckIsV0FFcER5Z0UsRUFBTXpnRSxTQUNOQSxFQUFXLEdBRUxBLElBQ05BLEVBQVd5Z0UsRUFBTThCLFFBQ1gsVUFDQTlCLEVBQU0rQixPQUNGLFdBQ0EsV0FHVjN0RixHQUFXQSxFQUFRNHRGLFdBQ25CUCxFQUFhSCxFQUFZdEIsRUFBTXAvQixPQUFRby9CLEVBQU81ckYsRUFBUTR0RixXQUV0RDV0RixHQUFXQSxFQUFRNnRGLG1CQUNuQlAsRUFBd0JKLEVBQVl0QixFQUFNcC9CLE9BQVFvL0IsRUFBTzVyRixFQUFRNnRGLG1CQUdqRTd0RixHQUFXQSxFQUFRMGtELGFBQ25CQSxFQUFhd29DLEVBQVl0QixFQUFNcC9CLE9BQVFvL0IsRUFBTzVyRixFQUFRMGtELGFBRW5ELE1BQU1uc0MsT0FBT3ZjLE9BQU84SCxLQUFLNGdELEdBQzNCMytDLEtBQUksU0FBVWxKLEdBQ2YsT0FBMkIsSUFBcEI2bkQsRUFBVzduRCxHQUFnQkEsRUFBTSxHQUFHMGIsT0FBTzFiLEVBQUssTUFBTzBiLE9BQU9tc0MsRUFBVzduRCxHQUFNLFNBRXJGNlMsS0FBSyxLQUFNLFVBQVc2SSxPQUFPNFMsR0FBVTVTLE9BQU9xekUsRUFBTXAvQixPQUFRLE1BQU9qMEMsT0FBT3F6RSxFQUFNcC9CLE9BQU96b0QsT0FBU3NwRixFQUMvRkMsRUFDSTFCLEVBQU1wL0IsT0FBTzM4QyxVQUFVLEVBQUd6SyxLQUFLZ0wsTUFBTWk5RSxFQUFhLElBQ2hELElBQ0F6QixFQUFNcC9CLE9BQU8zOEMsVUFBVSs3RSxFQUFNcC9CLE9BQU96b0QsT0FBU3FCLEtBQUsrd0MsS0FBS2szQyxFQUFhLEdBQUl6QixFQUFNcC9CLE9BQU96b0QsUUFDdkY2bkYsRUFBTXAvQixPQUFPMzhDLFVBQVUsRUFBR3c5RSxHQUFjLElBQzVDekIsRUFBTXAvQixPQUFRLGFBS3hCOC9CLEVBQWNXLEdBQ2RBLEVBQVlHLFVBRVosSUFBSTloRixFQUFRaWhGLEdBQXFCLFNBQVVseEYsRUFBUUQsR0FDbkRZLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RG5CLEVBQVEweUYsT0FBUzF5RixFQUFRMnlGLFNBQVczeUYsRUFBUTR5RixVQUFZNXlGLEVBQVE2eUYsV0FBYTd5RixFQUFROHlGLFFBQVU5eUYsRUFBUSt5RixXQUFhL3lGLEVBQVFnekYsT0FBU2h6RixFQUFRaXpGLE9BQVNqekYsRUFBUXVuQixLQUFPdm5CLEVBQVErSCxJQUFNL0gsRUFBUWt6RixXQUFRLEVBRW5NLElBQ0lDLEVBQVMsNkZBRVRqaEUsRUFBTyxrQkFBa0IvVSxPQURULHNDQUMrQkEsT0FBT28wRSxFQUFXQyx1QkFBd0IsMEJBQTBCcjBFLE9BQU9vMEUsRUFBV0MsdUJBQXdCLGdCQUM3SjRCLEVBQU8sbUZBSVBDLEVBQXNCLElBQUlsMkUsT0FEZiwyQkFDZ0MsWUFDM0NtMkUsRUFBTyxNQUFNbjJFLE9BRkYsMkJBRW1CLE9BQU9BLE9BQU9nMkUsRUFBUSxLQUFLaDJFLE9BQU9pMkUsRUFBTSxjQUFjajJFLE9BSDdFLGlCQUcwRixTQUFTQSxPQUFPazJFLEVBQXFCLE1BQzFJcnpGLEVBQVFrekYsTUFBUSxnQkFBZ0IvMUUsT0FWYiwyREFVa0MsTUFBTUEsT0FBT2cyRSxFQUFRLEtBQUtoMkUsT0FBT2kyRSxFQUFNLEtBQzVGcHpGLEVBQVErSCxJQUFNLElBQUlvVixPQUFPbTJFLEVBQU0sS0FBS24yRSxPQUFPK1UsRUFBTSxLQUNqRGx5QixFQUFRdW5CLEtBQU8scUVBRWZ2bkIsRUFBUWl6RixPQUFTLGVBQWU5MUUsT0FBT25kLEVBQVFrekYsTUFBTyxPQUFPLzFFLE9BQU9uZCxFQUFRdW5CLEtBQU0sT0FBT3BLLE9BQU9uZCxFQUFRK0gsSUFBSyxZQUM3Ry9ILEVBQVFnekYsT0FBUyxVQUFVNzFFLE9BQU9uZCxFQUFRa3pGLE1BQU8sWUFBWS8xRSxPQUFPbmQsRUFBUXVuQixLQUFNLFlBQVlwSyxPQUFPbmQsRUFBUStILElBQUssWUFDbEgvSCxFQUFRK3lGLFdBQWEsSUFBSTNpRixPQUFPcFEsRUFBUWd6RixPQUFRLE1BQ2hELElBQ0loekYsRUFBUSt5RixXQUFhLElBQUkzaUYsT0FBT3BRLEVBQVFpekYsT0FBUSxNQUVwRCxNQUFPbHZGLEdBQ0gvRCxFQUFRK3lGLFdBQWEsSUFBSTNpRixPQUFPcFEsRUFBUWd6RixPQUFRLE1BR3BEaHpGLEVBQVE4eUYsUUFBVSxJQUFJMWlGLE9BQU8sS0FBSytNLE9BQU9pMkUsRUFBTSxLQUFLajJFLE9BbkJ6Qyx1Q0FtQnNELE1BQU8sS0FDeEVuZCxFQUFRNnlGLFdBQWEsSUFBSXppRixPQUFPLEtBQUsrTSxPQUFPbmQsRUFBUWt6RixNQUFPLE1BQU8sS0FDbEVsekYsRUFBUTR5RixVQUFZLElBQUl4aUYsT0FBTyxLQUFLK00sT0FBT25kLEVBQVF1bkIsS0FBTSxNQUFPLEtBQ2hFdm5CLEVBQVEyeUYsU0FBVyxJQUFJdmlGLE9BQU8sS0FBSytNLE9BQU9uZCxFQUFRK0gsSUFBSyxNQUFPLEtBSzlEL0gsRUFBUTB5RixPQURLLENBQUUsT0FBVSxFQUFHLEtBQVEsQ0FBRSxTQUFZLEdBQUksU0FBWSxHQUFLLFFBQVcsRUFBRyxNQUFTLENBQUUsU0FBWSxFQUFHLE1BQVMsRUFBRyxLQUFRLEdBQUssTUFBUyxHQUFJLElBQU8sQ0FBRSxJQUFPLENBQUMsR0FBSSxHQUFJLFNBQVksQ0FBQyxHQUFJLElBQUssS0FBUSxDQUFDLElBQUssS0FBUSxHQUFJLFdBQWMsR0FBSSxLQUFRLEdBQUksbUJBQXNCLEdBQUksS0FBUSxRQUk5UnhCLEVBQWNoaEYsR0FDZEEsRUFBTXdpRixPQUNOeGlGLEVBQU15aUYsU0FDTnppRixFQUFNMGlGLFVBQ04xaUYsRUFBTTJpRixXQUNOM2lGLEVBQU00aUYsUUFDTjVpRixFQUFNNmlGLFdBQ043aUYsRUFBTThpRixPQUNOOWlGLEVBQU0raUYsT0FDTi9pRixFQUFNcVgsS0FDTnJYLEVBQU1uSSxJQUNObUksRUFBTWdqRixNQUVOLElBQUlLLEVBQVFwQyxHQUFxQixTQUFVbHhGLEVBQVFELEdBQ25EWSxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRd3pGLGtCQUFvQnh6RixFQUFReXpGLGtCQUFvQnp6RixFQUFRMHpGLGtCQUFvQjF6RixFQUFRMnpGLHNCQUFtQixFQVcvRzN6RixFQUFRMnpGLGlCQVRSLFNBQTBCQyxFQUFTQyxFQUFTNXZGLEVBQVErWCxHQUNoRCxPQUFJQSxJQUFhNjNFLElBR2I1dkYsRUFBT3lHLE1BQU1rcEYsR0FBU2pyRixPQUFTMUUsRUFBT3lHLE1BQU1tcEYsR0FBU2xyRixRQUFXLEdBQy9EaXJGLElBQVlDLEdBQVc1dkYsRUFBT3lHLE1BQU1rcEYsR0FBU2pyRixPQUFTLEdBQU0sUUFEakUsSUFNSjNJLEVBQVEwekYsa0JBQW9CbkMsRUFBV0UsZUFBZXYwQyxNQUFLLFNBQVVyckMsRUFBRzhKLEdBQUssT0FBT0EsRUFBRWhULE9BQVNrSixFQUFFbEosVUFBVyxHQUFHQSxPQU0vRzNJLEVBQVF5ekYsa0JBTFIsU0FBMkJLLEdBQ3ZCLE1BQVEsdUJBQXVCOXZGLEtBQUs4dkYsSUFDaEMsbUJBQW1COXZGLEtBQUs4dkYsSUFnQmhDOXpGLEVBQVF3ekYsa0JBWlIsU0FBMkJ2dkYsRUFBUTh2RixFQUFXQyxHQUkxQyxJQUhBLElBQUlDLEVBQWdCaHdGLEVBQU9vTSxRQUFRLHlCQUEwQixRQUN6REgsRUFBUSxJQUFJRSxPQUFPLGtDQUFrQytNLE9BQU84MkUsRUFBZSxpQkFBaUI5MkUsT0FBTzgyRSxFQUFlLGFBQWMsTUFDaEk3cUYsRUFBUyxLQUMrQixRQUFwQ0EsRUFBUzhHLEVBQU1zRCxLQUFLdWdGLEtBRXhCLEdBRFUzcUYsRUFBT3NLLE1BQVF0SyxFQUFPLEdBQUdULFNBQ3ZCcXJGLEVBQ1IsT0FBTyxFQUdmLE9BQU8sTUFvTFgsT0EvS0E5QyxFQUFjcUMsR0FDZEEsRUFBTUMsa0JBQ05ELEVBQU1FLGtCQUNORixFQUFNRyxrQkFDTkgsRUFBTUksaUJBeUtNekMsRUF2S0RDLEdBQXFCLFNBQVVseEYsRUFBUUQsR0FDbERZLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUt0RCxJQUNJK3lGLEVBQVcsSUFBSTlqRixPQUFPLEtBQUsrTSxPQURabzBFLEVBQ2dDRCxLQUFNLE1BQU8sS0FDNUR0ckYsRUFBTyxTQUFVd3FGLEVBQU8yRCxRQUNQLElBQWJBLElBQXVCQSxHQUFXLEdBbUh0QyxJQWxIQSxJQUFJQyxFQUFRLEdBQ1JockYsRUFBUyxLQUNUaXJGLEVBQVUsV0FDVixJQUFJbmhGLEVBQVE5SixFQUFPc0ssTUFDZlAsRUFBTUQsRUFBUTlKLEVBQU8sR0FBR1QsT0FDeEJ5b0QsRUFBU2hvRCxFQUFPLEdBQ2hCMm1CLEVBQVczbUIsRUFBTzhHLEVBQU13aUYsT0FBTzNxRixJQUFJZ29CLFNBQVMsS0FDNUMzbUIsRUFBTzhHLEVBQU13aUYsT0FBTzNxRixJQUFJZ29CLFNBQVMsS0FDakMzbUIsRUFBTzhHLEVBQU13aUYsT0FBTzNxRixJQUFJZ29CLFNBQVMsSUFvQnJDLEdBVkl3aEUsRUFBV0ksbUJBQW1CNW1GLFFBQVF5bEYsRUFBTXZoRCxPQUFPOTdCLEtBQVMsR0FDNURvK0UsRUFBV0csWUFBWXgvRSxTQUFRLFNBQVVZLEdBQ3JDLElBQUk4Z0YsRUFBVTlnRixFQUFJbThCLE9BQU8sR0FDckI0a0QsRUFBVS9nRixFQUFJbThCLE9BQU8sSUFDckIsRUFBSXNrRCxFQUFNSSxrQkFBa0JDLEVBQVNDLEVBQVN6aUMsRUFBUW8vQixFQUFNdmhELE9BQU85N0IsTUFDbkVpK0MsR0FBa0JvL0IsRUFBTXZoRCxPQUFPOTdCLEdBQy9CQSxRQUlSZ2hGLEVBQVUsQ0FPVixJQUFpRixJQUE3RSxDQUFDLEtBQU0sS0FBTSxNQUFNcHBGLFFBQVF5bEYsRUFBTXZoRCxPQUFPLzdCLEVBQVEsR0FBS3M5RSxFQUFNdmhELE9BQU85N0IsTUFDOUQsRUFBSW9nRixFQUFNRSxtQkFBbUJqRCxFQUFNLzdFLFVBQVV2QixFQUFRcWdGLEVBQU1HLGtCQUFvQixHQUFJeGdGLElBQ25GLE1BQU8sV0FRZixHQUFJczlFLEVBQU0vN0UsVUFBVXRCLEVBQUtxOUUsRUFBTTduRixRQUFRb0MsUUFBUSxTQUFXLEdBQ3REeWxGLEVBQU0vN0UsVUFBVSxFQUFHdkIsR0FBT25JLFFBQVEsT0FBUyxJQUMzQyxFQUFJd29GLEVBQU1DLG1CQUFtQnBpQyxFQUFRby9CLEVBQU9yOUUsR0FDNUMsTUFBTyxXQUlmLElBQUltaEYsRUFBTWxyRixFQUFPOEcsRUFBTXdpRixPQUFPM3FGLElBQUl3c0YsSUFBSSxLQUFPbnJGLEVBQU84RyxFQUFNd2lGLE9BQU8zcUYsSUFBSXdzRixJQUFJLElBQ3pFLEdBQUlELElBQVN2a0UsSUFBZTNtQixFQUFPOEcsRUFBTXdpRixPQUFPUSxNQUFNbmpFLFlBQWdCdWtFLEVBQUlFLFdBQVcsVUFBWU4sRUFBU2x3RixLQUFLc3dGLEdBQzNHLE1BQU8sV0FFWCxHQUFJbHJGLEVBQU84RyxFQUFNd2lGLE9BQU8rQixPQUFRLENBQzVCLElBQUlsbEUsRUFBT25tQixFQUFPOEcsRUFBTXdpRixPQUFPM3FGLElBQUl3bkIsS0FBSyxLQUFPbm1CLEVBQU84RyxFQUFNd2lGLE9BQU8zcUYsSUFBSXduQixLQUFLLEtBQU9ubUIsRUFBTzhHLEVBQU13aUYsT0FBTzNxRixJQUFJd25CLEtBQUssSUFDNUcyQyxHQUFRay9CLEVBQU96OUMsTUFBTSxrQ0FBb0MsSUFBSSxHQUM3RHU1QyxHQUFTa0UsRUFBT3o5QyxNQUFNLG9CQUFzQixJQUFJLEdBQ2hEK2dGLEdBQVl0akMsRUFBT3o5QyxNQUFNLGdCQUFrQixJQUFJLEdBQy9DZ2hGLE9BQWdCMTVCLElBQVQxckMsR0FBc0I2aEMsRUFBT3o5QyxNQUFNLDJDQUE2QyxJQUFJLFFBQUtzbkQsRUFDcEdtNUIsRUFBTXBwRixLQUFLLENBQ1BrSSxNQUFPQSxFQUNQQyxJQUFLQSxFQUNMaStDLE9BQVFBLEVBQ1JxakMsT0FBTyxFQUNQMWtFLFNBQVVBLEVBQ1Y2a0UsS0FBTXhyRixFQUFPOEcsRUFBTXdpRixPQUFPM3FGLElBQUk2c0YsTUFDOUJ4QixLQUFNaHFGLEVBQU84RyxFQUFNd2lGLE9BQU8zcUYsSUFBSXFyRixNQUM5QnVCLEtBQU1BLEVBQ05wbEUsS0FBTW9sRSxFQUFPLElBQU1BLEVBQU8sSUFBTXBsRSxFQUNoQzhqRSxzQkFBdUJ0akUsRUFDdkJtQyxLQUFNQSxRQUFRK29DLEVBQ2QvTixNQUFPQSxFQUNQd25DLFNBQVVBLEVBQ1ZHLE9BQVEsYUFHWCxHQUFJenJGLEVBQU84RyxFQUFNd2lGLE9BQU9ILFFBQVMsQ0FDbEMsSUFBSXVDLEVBQVcxakMsRUFBTzlrQyxPQUFPLEdBQzdCOG5FLEVBQU1wcEYsS0FBSyxDQUNQa0ksTUFBT0EsRUFDUEMsSUFBS0EsRUFDTGkrQyxPQUFRQSxFQUNSbWhDLFFBQVEsRUFDUnhpRSxTQUFVM21CLEVBQU84RyxFQUFNd2lGLE9BQU9uckUsS0FBS3dJLFVBQ25DZ2xFLFNBQVUzckYsRUFBTzhHLEVBQU13aUYsT0FBT25yRSxLQUFLbzlCLFVBQ25DbXdDLFNBQVVBLEVBQ1ZFLGNBQWVGLEVBQVN4b0UsT0FBTyxFQUFHd29FLEVBQVNuc0YsT0FBU1MsRUFBTzhHLEVBQU13aUYsT0FBT25yRSxLQUFLbzlCLFVBQVVoOEMsUUFDdkZrc0YsT0FBUSxjQUdQenJGLEVBQU84RyxFQUFNd2lGLE9BQU9KLFNBQ3pCOEIsRUFBTXBwRixLQUFLLENBQ1BrSSxNQUFPQSxFQUNQQyxJQUFLQSxFQUNMaStDLE9BQVFBLEVBQ1JraEMsU0FBUyxFQUNUMkMsTUFBTzdyRixFQUFPOEcsRUFBTXdpRixPQUFPUSxNQUFNK0IsT0FDakNsbEUsU0FBVTNtQixFQUFPOEcsRUFBTXdpRixPQUFPUSxNQUFNbmpFLFVBQ3BDUixLQUFNbm1CLEVBQU84RyxFQUFNd2lGLE9BQU9RLE1BQU0zakUsTUFDaENzbEUsT0FBUSxVQUlaVCxFQUFNcHBGLEtBQUssQ0FDUGtJLE1BQU9BLEVBQ1BDLElBQUtBLEVBQ0xpK0MsT0FBUUEsRUFDUnlqQyxPQUFRLGFBSStCLFFBQTNDenJGLEVBQVM4RyxFQUFNNmlGLFdBQVd2L0UsS0FBS2c5RSxLQUNuQzZELElBRUosT0FBT0QsR0FFUDdELEVBQVcsU0FBVTFvQixHQUNyQixJQUFJcXRCLEVBQW9CLGlCQUFScnRCLEVBQ1YsQ0FBRTJvQixNQUFPM29CLEVBQUtqakUsYUFBU3EyRCxFQUFXdHNELGdCQUFZc3NELEdBQzlDNE0sRUFBSzJvQixFQUFRMEUsRUFBRzFFLE1BQU81ckYsRUFBVXN3RixFQUFHdHdGLFFBQVMrSixFQUFhdW1GLEVBQUd2bUYsV0FDbkUsR0FBSUEsRUFDQSxJQUFLLElBQUkrRSxFQUFRLEVBQUdBLEVBQVEvRSxFQUFXaEcsT0FBUStLLElBQVMsQ0FDcEQsSUFBSXBFLEVBQVlYLEVBQVcrRSxHQUMzQjg4RSxFQUFRQSxFQUFNbmdGLFFBQVFmLEVBQVV0TCxLQUFNc0wsRUFBVTBpRixXQUd4RCxJQUFJb0MsRUFBUXB1RixFQUFLd3FGLEdBQVE1ckYsR0FBVyxJQUFJdXZGLFVBQ3BDZ0IsRUFBUyxHQUdiLElBQVN6aEYsRUFBUSxFQUFHQSxFQUFRMGdGLEVBQU16ckYsT0FBUStLLElBQ3RDeWhGLEdBQ0tBLElBRWUsSUFBVnpoRixFQUNJODhFLEVBQU0vN0UsVUFBVSxFQUFHMi9FLEVBQU0xZ0YsR0FBT1IsT0FDaEMsTUFDTixFQUFJMitFLEVBQVlHLFdBQVdvQyxFQUFNMWdGLEdBQVE5TyxJQUN4Q3d2RixFQUFNMWdGLEVBQVEsR0FDVDg4RSxFQUFNLzdFLFVBQVUyL0UsRUFBTTFnRixHQUFPUCxJQUFLaWhGLEVBQU0xZ0YsRUFBUSxHQUFHUixPQUNuRHM5RSxFQUFNLzdFLFVBQVUyL0UsRUFBTTFnRixHQUFPUCxNQUUvQyxPQUFPZ2lGLEdBQWtCM0UsR0FFN0JELEVBQVN2cUYsS0FBT0EsRUFDaEJ1cUYsRUFBU2xoRixTQUFXLENBQ2hCK2xGLEdBQUksU0FBVTVFLEdBQVMsT0FBT3RnRixFQUFNNGlGLFFBQVE5dUYsS0FBS3dzRixJQUNqRDBDLE1BQU8sU0FBVTFDLEdBQVMsT0FBT3RnRixFQUFNMmlGLFdBQVc3dUYsS0FBS3dzRixJQUN2RGpwRSxLQUFNLFNBQVVpcEUsR0FBUyxPQUFPdGdGLEVBQU0waUYsVUFBVTV1RixLQUFLd3NGLElBQ3JEem9GLElBQUssU0FBVXlvRixHQUFTLE9BQU90Z0YsRUFBTXlpRixTQUFTM3VGLEtBQUt3c0YsSUFBVXRnRixFQUFNNGlGLFFBQVE5dUYsS0FBS3dzRixLQUVwRnh3RixFQUFRMmpCLFFBQVU0c0UsTUEzWThEcHVGLEksa0NDUWhGLElBQVVELEVBQVFDLEVBQVJELEVBYVMsb0JBQVhFLE9BQXlCQSxPQUFTQyxLQWJ4QkYsRUFhOEIsU0FBVUMsRUFBUUUsR0FDL0QsTUFBTXUwQixFQUFXLENBQ2JwMkIsS0FBTSxXQWlDTitCLElBQUssU0FBVUMsR0FDWCxNQUFNMEUsRUFBUTFFLEVBQUswRSxNQUNiekUsRUFBVUQsRUFBS0MsUUFDckJBLEVBQVFtMEIsU0FBVyxDQUNmdytELGVBQWdCLEVBQ2hCQyxlQUFnQixFQUNoQjcwRCxlQUFnQixHQUNoQjgwRCxVQUFXLEVBQ1hDLFVBQVcsRUFDWGg5RCxVQUFXLEVBQ1hFLFVBQVcsRUFDWHdLLGlCQUFpQixFQUNqQnV5RCxrQkFBbUIsR0FDbkJDLFdBQVksS0FDWkMsV0FBVyxFQUNYQyxXQUFZLENBQ1I3dEUsTUFBTzVnQixFQUFNd25DLGNBQ2I1N0IsS0FBTTVMLEVBQU15bkMsV0FDWjU3QixNQUFPN0wsRUFBTTBuQyxZQUNiN21CLE9BQVE3Z0IsRUFBTTJuQyxlQUt0QixJQUFJK21ELEVBQXVCeHpGLEtBQUt5ekYscUJBQXFCcnpGLEdBQ3JEQyxFQUFRbTBCLFNBQVNtMkMsZ0JBQWtCNm9CLEVBRW5DbnpGLEVBQVFtMEIsU0FBU3dpQixVQUFZdzhDLEVBQXFCbHZGLGNBQWMsb0JBQ2hFakUsRUFBUW0wQixTQUFTay9ELFVBQVlGLEVBQXFCbHZGLGNBQWMsa0JBQ2hFakUsRUFBUW0wQixTQUFTbS9ELGNBQWdCSCxFQUFxQmx2RixjQUFjLHNCQUVwRSxJQUFJc3ZGLEVBQWdCNXpGLEtBQUs2ekYscUJBQXFCenpGLEdBQzlDQyxFQUFRbTBCLFNBQVNzaUIsYUFBZTg4QyxFQUVoQyxJQUFJRSxFQUFpQnp6RixFQUFRbTBCLFNBQVN1L0QsY0FBZ0IxekYsRUFBUW0wQixTQUFTay9ELFVBQVU5cUYsaUJBQWlCLFFBQ2xHdkksRUFBUW0wQixTQUFTdy9ELGtCQUFvQkosRUFBY3R2RixjQUFjLDJCQUNqRWpFLEVBQVFtMEIsU0FBU3kvRCxnQkFBa0JMLEVBQWNockYsaUJBQWlCLHlDQUNsRXZJLEVBQVFtMEIsU0FBUzAvRCxrQkFBb0JOLEVBQWNockYsaUJBQWlCLDJDQUVwRXZJLEVBQVFtMEIsU0FBUzIvRCxVQUFZUCxFQUFjdHZGLGNBQWMsMkJBQ3pEakUsRUFBUW0wQixTQUFTNC9ELGNBQWdCL3pGLEVBQVFtMEIsU0FBUzIvRCxVQUFVdnJGLGlCQUFpQixVQUU3RXZJLEVBQVFtMEIsU0FBUzYvRCxZQUFjVCxFQUFjdHZGLGNBQWMsOEJBQzNEakUsRUFBUW0wQixTQUFTOC9ELGVBQWlCVixFQUFjdHZGLGNBQWMsMENBQzlEakUsRUFBUW0wQixTQUFTKy9ELGNBQWdCWCxFQUFjdHZGLGNBQWMsZ0NBRzdEa3ZGLEVBQXFCbnlGLGlCQUFpQixhQUFhLFNBQVVLLEdBQUtBLEVBQUU0SCxvQkFDcEV3cUYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEYwekYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEYwekYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEYwekYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEYwekYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEYwekYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEYwekYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEYwekYsRUFBZSxHQUFHenlGLGlCQUFpQixZQUFhckIsS0FBS3cwRiwwQkFBMEJuMUYsS0FBS2UsSUFDcEZ3ekYsRUFBY3Z5RixpQkFBaUIsUUFBU3JCLEtBQUt5MEYscUJBQXFCcDFGLEtBQUtlLElBR3ZFQyxFQUFRbUIsUUFBUUMsU0FBU1IsWUFBWXV5RixHQUNyQ256RixFQUFRbUIsUUFBUUMsU0FBU1IsWUFBWTJ5RixHQUdyQ0osRUFBdUIsS0FBTUksRUFBZ0IsS0FBTUUsRUFBaUIsTUFJeEVMLHFCQUFzQixTQUFVcnpGLEdBQzVCLE1BQU1zMEYsRUFBbUJ0MEYsRUFBS00sS0FBS0MsY0FBYyxPQWtCakQsT0FoQkErekYsRUFBaUI5ekYsVUFBWSxzQ0FDN0I4ekYsRUFBaUI1ekYsTUFBTUMsUUFBVSxPQUNqQzJ6RixFQUFpQnR3RixVQUFZLDRTQWN0QnN3RixHQUdYYixxQkFBc0IsU0FBVXp6RixHQUM1QixNQUFNd0UsRUFBT3hFLEVBQUt3RSxLQUNaRSxFQUFRMUUsRUFBSzBFLE1BQ2I4dUYsRUFBZ0J4ekYsRUFBS00sS0FBS0MsY0FBYyxPQW9GOUMsT0FsRkFpekYsRUFBY2h6RixVQUFZLHVDQUMxQmd6RixFQUFjeHZGLFVBQVksd1FBSzRDUSxFQUFLa2hCLFdBQVdXLFVBTDVELHdNQVM0QzdoQixFQUFLa2hCLFdBQVdZLFNBVDVELHVNQWE0QzloQixFQUFLa2hCLFdBQVdhLFNBYjVELDRHQWdCdEI3aEIsRUFBTW0rQyxVQUNOLGdFQUFrRXIrQyxFQUFLa2hCLFdBQVdlLFNBakI1RCw4SEFvQnRCL2hCLEVBQU1vK0MsWUFDTixnRUFBa0V0K0MsRUFBS2toQixXQUFXa0IsV0FyQjVELDZIQXdCdEJsaUIsRUFBTXErQyxhQUNOLGdFQUFrRXYrQyxFQUFLa2hCLFdBQVdtQixZQXpCNUQsdUtBOEJ0Qm5pQixFQUFNcytDLGtCQUNOLGdFQUFrRXgrQyxFQUFLa2hCLFdBQVdnQixpQkEvQjVELCtHQWtDdEJoaUIsRUFBTXUrQyxnQkFDTixnRUFBa0V6K0MsRUFBS2toQixXQUFXaUIsZUFuQzVELDJIQXNDdEJqaUIsRUFBTXduQyxjQUNOLGdFQUFrRTFuQyxFQUFLeWMsUUFBUWdCLE1BdkN6RCxxUUE2Q3RCdmQsRUFBTXduQyxjQUNOLGdFQUFrRTFuQyxFQUFLQyxVQUFVNmdCLE1BOUMzRCwrSEFpRHRCNWdCLEVBQU15bkMsV0FDTixnRUFBa0UzbkMsRUFBS0MsVUFBVTZMLEtBbEQzRCxpSUFxRHRCNUwsRUFBTTJuQyxhQUNOLGdFQUFrRTduQyxFQUFLQyxVQUFVOGdCLE9BdEQzRCxnSUF5RHRCN2dCLEVBQU0wbkMsWUFDTixnRUFBa0U1bkMsRUFBS0MsVUFBVThMLE1BMUQzRCxtSkFnRXRCN0wsRUFBTXdnQixRQUNOLGdFQUFrRTFnQixFQUFLQyxVQUFVeWdCLFFBakUzRCxnR0FvRXRCeGdCLEVBQU1pMEIsT0FDTixnRUFBa0VuMEIsRUFBS0MsVUFBVTJnQixhQXJFM0QsZ0dBd0V0QjFnQixFQUFNaytDLE9BQ04sZ0VBQWtFcCtDLEVBQUtraEIsV0FBV0MsS0F6RTVELGdHQTRFdEJqaEIsRUFBTWt1QixPQUNOLGdFQUFrRXB1QixFQUFLa2hCLFdBQVdHLE9BN0U1RCxnQ0FpRm5CMnRFLEdBV1hydEQsaUJBQWtCLFNBQVV2aUMsRUFBZXhDLEVBQVMrOEIsRUFBT0UsR0FLdkQsT0FKS2o5QixJQUFTQSxFQUFVd0MsRUFBY3d4QixVQUNqQytJLElBQU9BLEVBQVF2NkIsRUFBY3l4QixRQUM3QmdKLElBQVdBLEVBQVl6NkIsRUFBYzB4QixZQUVyQ2wwQixFQUVHLEtBQUtHLEtBQUtILEVBQVFWLE1BQU13YixRQUFpQ21pQixHQUFheitCLEtBQUtVLEtBQUtzZ0MsVUFBVXZDLEVBQVUzOUIsTUFBTXdiLE1BQU8sSUFBTyxLQUFPLElBQTlGOWEsRUFBUVYsTUFBTXdiLE1BRmxDLElBYXpCa3FCLGlCQUFrQixTQUFVeGlDLEVBQWV4QyxFQUFTKzhCLEVBQU9FLEdBS3ZELE9BSktqOUIsSUFBU0EsRUFBVXdDLEVBQWN3eEIsVUFDakMrSSxJQUFPQSxFQUFRdjZCLEVBQWN5eEIsUUFDN0JnSixJQUFXQSxFQUFZejZCLEVBQWMweEIsWUFFckMrSSxHQUFjRixFQUVaditCLEtBQUtVLEtBQUtzZ0MsVUFBVXpDLEVBQU16OUIsTUFBTW9tQyxjQUFlLEdBQUssSUFBTWxuQyxLQUFLSyxRQUFRbTBCLFNBQVNxTSxnQkFBa0J0QyxFQUFNejlCLE1BQU15YixPQUFXLEtBQUs1YSxLQUFLSCxFQUFRVixNQUFNeWIsU0FBWSxLQUFLNWEsS0FBS0gsRUFBUVYsTUFBTXdiLFFBQWtDbWlCLEdBQWF6K0IsS0FBS1UsS0FBS3NnQyxVQUFVdkMsRUFBVTM5QixNQUFNeWIsT0FBUSxJQUFPLEtBQU8sSUFBaEcvYSxFQUFRVixNQUFNeWIsT0FGakwvYSxHQUFXQSxFQUFRVixNQUFNeWIsUUFBVyxJQVUxRTZrQiwyQkFBNEIsU0FBVXA5QixFQUFlMndGLEdBQ2pELE1BQU1DLEVBQXFCNXdGLEVBQWNnekIsaUJBQW1CaDNCLEtBQUtLLFFBQVFtMEIsU0FBU3FNLGdCQUNsRjc4QixFQUFjeWhCLFdBQVd4SSxRQUFValosRUFBY3V5QixtQkFBZ0YsVUFBM0R2eUIsRUFBY3d4QixTQUFTM3pCLGFBQWEsbUJBRTFHLElBQUlvUCxFQUFJMmpGLEVBQXFCLEdBQUs1MEYsS0FBSzhCLFFBQVEweUIsU0FBUytSLGlCQUFpQnZvQyxLQUFLZ0MsS0FBTWdFLEdBTXBGLEdBTElpTixJQUFNak4sRUFBY2l5QixnQkFBZWhsQixFQUFJLElBQ3ZDak4sRUFBY2d6QixrQkFBaUIvbEIsRUFBSWpSLEtBQUtVLEtBQUtzZ0MsVUFBVS92QixFQUFHLElBQzlEak4sRUFBYzJ4QixPQUFPNzJCLE1BQVFtUyxFQUM3QjBqRixFQUFVeDhELGFBQWFuNkIsS0FBS2dDLEtBQU0sTUFFN0JnRSxFQUFjZ3pCLGdCQUFpQixDQUNoQyxJQUFJMEksRUFBSWsxRCxFQUFxQixHQUFLNTBGLEtBQUs4QixRQUFRMHlCLFNBQVNnUyxpQkFBaUJ4b0MsS0FBS2dDLEtBQU1nRSxHQUNoRjA3QixJQUFNMTdCLEVBQWNreUIsZ0JBQWV3SixFQUFJLElBQ3ZDMTdCLEVBQWNnekIsa0JBQWlCMEksRUFBSTEvQixLQUFLVSxLQUFLc2dDLFVBQVV0QixFQUFHLElBQzlEMTdCLEVBQWM0eEIsT0FBTzkyQixNQUFRNGdDLEVBR2pDMTdCLEVBQWMyeEIsT0FBT3FQLFdBQVc0dkQsRUFDaEM1d0YsRUFBYzR4QixPQUFPb1AsV0FBVzR2RCxFQUNoQzV3RixFQUFjeWhCLFdBQVd1ZixXQUFXNHZELEVBRXBDRCxFQUFVdjhELFNBQVNwNkIsS0FBS2dDLE9BVTVCeTlCLHFCQUFzQixTQUFVejVCLEVBQWV3NUIsR0FDM0MsR0FBSXg1QixFQUFjZ3pCLGdCQUNILE1BQVB3RyxHQUFjeDVCLEVBQWMyeEIsT0FBTzcyQixNQUFRLE1BQUtrRixFQUFjMnhCLE9BQU83MkIsTUFBUSxVQUlyRixHQUFJa0YsRUFBY3loQixXQUFXeEksU0FBV2paLEVBQWNrekIsUUFBVSxLQUFLdjFCLEtBQUtxQyxFQUFjMnhCLE9BQU83MkIsUUFBVSxLQUFLNkMsS0FBS3FDLEVBQWM0eEIsT0FBTzkyQixPQUFRLENBQzVJLE1BQU0rMUYsRUFBUTd3RixFQUFjMnhCLE9BQU83MkIsTUFBTWtQLFFBQVEsVUFBVyxLQUFPaEssRUFBYzh3QixTQUMzRWdnRSxFQUFROXdGLEVBQWM0eEIsT0FBTzkyQixNQUFNa1AsUUFBUSxVQUFXLEtBQU9oSyxFQUFjOHdCLFNBRWpGLEdBQUkrL0QsSUFBVUMsRUFBTyxPQUVyQixNQUFNQyxFQUFnQixNQUFWRixFQUFnQixFQUFJLEVBRXJCLE1BQVByM0QsRUFDQXg1QixFQUFjNHhCLE9BQU85MkIsTUFBUWtCLEtBQUtVLEtBQUtzZ0MsVUFBVWg5QixFQUFjb3pCLFFBQVVwM0IsS0FBS1UsS0FBS3NnQyxVQUFVaDlCLEVBQWMyeEIsT0FBTzcyQixNQUFPaTJGLEdBQU1BLEdBQU9ELEVBRXRJOXdGLEVBQWMyeEIsT0FBTzcyQixNQUFRa0IsS0FBS1UsS0FBS3NnQyxVQUFVaDlCLEVBQWNtekIsUUFBVW4zQixLQUFLVSxLQUFLc2dDLFVBQVVoOUIsRUFBYzR4QixPQUFPOTJCLE1BQU9pMkYsR0FBTUEsR0FBT0YsSUFVbEpuM0QsaUJBQWtCLFNBQVUxNUIsR0FDeEIsTUFBTWd4RixFQUFTaHhGLEVBQWMyeEIsT0FBTzcyQixNQUM5Qm0yRixFQUFTanhGLEVBQWM0eEIsT0FBTzkyQixNQUVwQyxHQUFJa0YsRUFBY3loQixXQUFXeEksU0FBVyxNQUFNdGIsS0FBS3F6RixJQUFXLE1BQU1yekYsS0FBS3N6RixJQUlyRSxJQUhjRCxFQUFPaG5GLFFBQVEsVUFBVyxLQUFPaEssRUFBYzh3QixhQUMvQ21nRSxFQUFPam5GLFFBQVEsVUFBVyxLQUFPaEssRUFBYzh3QixVQUd6RDl3QixFQUFja3pCLFFBQVMsT0FDcEIsSUFBS2x6QixFQUFja3pCLE9BQVEsQ0FDOUIsTUFBTWptQixFQUFJalIsS0FBS1UsS0FBS3NnQyxVQUFVZzBELEVBQVEsR0FDaEN0MUQsRUFBSTEvQixLQUFLVSxLQUFLc2dDLFVBQVVpMEQsRUFBUSxHQUV0Q2p4RixFQUFja3pCLFFBQVMsRUFDdkJsekIsRUFBY216QixRQUFVbG1CLEVBQUl5dUIsRUFDNUIxN0IsRUFBY296QixRQUFVc0ksRUFBSXp1QixRQUdoQ2pOLEVBQWNrekIsUUFBUyxHQVEvQnNLLG1CQUFvQixTQUFVeDlCLEdBQ3RCQSxFQUFjZ3pCLGdCQUNkaHpCLEVBQWMyeEIsT0FBTzcyQixNQUFRa0YsRUFBY215QixVQUFZLElBQU0sSUFBTW55QixFQUFjbXlCLFdBRWpGbnlCLEVBQWMyeEIsT0FBTzcyQixNQUFRa0YsRUFBY215QixVQUMzQ255QixFQUFjNHhCLE9BQU85MkIsTUFBUWtGLEVBQWNxeUIsWUFTbkR3TCx3QkFBeUIsU0FBVTc5QixHQUMvQixNQUFNaU4sRUFBSWpSLEtBQUs4QixRQUFRMHlCLFNBQVMrUixpQkFBaUJ2b0MsS0FBS2dDLEtBQU1nRSxHQUN0RDA3QixFQUFJMS9CLEtBQUs4QixRQUFRMHlCLFNBQVNnUyxpQkFBaUJ4b0MsS0FBS2dDLEtBQU1nRSxHQUU1REEsRUFBY3d4QixTQUFTbmYsYUFBYSxRQUFTcEYsRUFBRWpELFFBQVEsS0FBTSxLQUM3RGhLLEVBQWN3eEIsU0FBU25mLGFBQWEsU0FBVXFwQixFQUFFMXhCLFFBQVEsS0FBTSxLQUM5RGhLLEVBQWN3eEIsU0FBU25mLGFBQWEsWUFBYXBGLEVBQUksSUFBTXl1QixHQUNyRDE3QixFQUFjeStCLGNBQWF6K0IsRUFBY3krQixZQUFjL0MsSUFTakVuRyx1QkFBd0IsU0FBVXJQLEVBQWVxZ0QsR0FDN0MsTUFBTTJxQixFQUFrQmwxRixLQUFLSyxRQUFRbTBCLFNBQy9CeHdCLEVBQWdCaEUsS0FBS0ssUUFBUWtxRSxHQUNuQzJxQixFQUFnQjkyRCxlQUFpQm1zQyxFQUVqQyxNQUFNSSxFQUFrQnVxQixFQUFnQnZxQixnQkFDbEMzekIsRUFBWWsrQyxFQUFnQmwrQyxVQUM1Qm1XLEVBQVNudEQsS0FBS1UsS0FBSzZxRCxVQUFVcmhDLEVBQWVscUIsS0FBS0ssUUFBUW1CLFFBQVFncUQsY0FFakUycEMsRUFBYUQsRUFBZ0JyMEQsZ0JBQWtCLGFBQWFsL0IsS0FBS2dHLEtBQUt5dEYsSUFBSWxyRSxFQUFjcm9CLGFBQWEsZ0JBQWdCOE4sWUFFckh6TSxFQUFJaXlGLEVBQWFqckUsRUFBYzdpQixhQUFlNmlCLEVBQWNpRyxZQUM1RGtCLEVBQUk4akUsRUFBYWpyRSxFQUFjaUcsWUFBY2pHLEVBQWM3aUIsYUFDM0R0SSxFQUFJb3VELEVBQU8vOEIsSUFDWHR5QixFQUFJcXZELEVBQU96OEMsS0FBTzFRLEtBQUtLLFFBQVFtQixRQUFRZ3FELGFBQWFzWSxXQUUxRDZHLEVBQWdCN3BFLE1BQU1zdkIsSUFBTXJ4QixFQUFJLEtBQ2hDNHJFLEVBQWdCN3BFLE1BQU00UCxLQUFPNVMsRUFBSSxLQUNqQzZzRSxFQUFnQjdwRSxNQUFNd2IsTUFBUXBaLEVBQUksS0FDbEN5bkUsRUFBZ0I3cEUsTUFBTXliLE9BQVM4VSxFQUFJLEtBRW5DMmxCLEVBQVVsMkMsTUFBTXN2QixJQUFNLE1BQ3RCNG1CLEVBQVVsMkMsTUFBTTRQLEtBQU8sTUFDdkJzbUMsRUFBVWwyQyxNQUFNd2IsTUFBU3BaLEVBQUksS0FDN0I4ekMsRUFBVWwyQyxNQUFNeWIsT0FBVThVLEVBQUksS0FFOUIsSUFBSWhQLEVBQVE2SCxFQUFjcm9CLGFBQWEsZUFBaUIsUUFDeER3Z0IsRUFBa0IsU0FBVkEsRUFBbUIsUUFBVUEsRUFHckMsTUFBTW9jLEVBQVl6K0IsS0FBS1UsS0FBS2k1QixpQkFBaUJ6UCxFQUFlbHFCLEtBQUtVLEtBQUs0bkMsYUFDaEUvSixFQUFRditCLEtBQUtVLEtBQUtpNUIsaUJBQWlCelAsRUFBZSxVQUNsRG1yRSxFQUFXcjFGLEtBQUs4QixRQUFRMHlCLFNBQVMrUixpQkFBaUJ2b0MsS0FBS2dDLEtBQU1nRSxFQUFla21CLEVBQWVxVSxFQUFPRSxJQUFjLE9BQ2hINjJELEVBQVd0eEYsRUFBY2d6QixpQkFBOEIsVUFBWHV6QyxFQUFxQixHQUFLLE1BQVF2cUUsS0FBSzhCLFFBQVEweUIsU0FBU2dTLGlCQUFpQnhvQyxLQUFLZ0MsS0FBTWdFLEVBQWVrbUIsRUFBZXFVLEVBQU9FLElBQWMsUUFDekx6K0IsS0FBS1UsS0FBSzB0QyxVQUFVOG1ELEVBQWdCdkIsY0FBZTN6RixLQUFLNEUsS0FBS0MsVUFBVXdkLEdBQVMsS0FBT2d6RSxFQUFXQyxFQUFXLEtBRzdHSixFQUFnQmxCLGtCQUFrQmx6RixNQUFNQyxRQUFVaUQsRUFBY3d5QixVQUFZLEdBQUssT0FDakYsTUFBTSsrRCxHQUFnQnZ4RixFQUFjd3lCLFdBQWN4eUIsRUFBYzB5QixnQkFBbUIxeUIsRUFBY2d6QixnQkFBMkIsT0FBVCxPQUM3Rys4RCxFQUFnQm1CLEVBQWdCbkIsY0FDdEMsSUFBSyxJQUFJbDJGLEVBQUksRUFBRzRKLEVBQU1zc0YsRUFBY3p0RixPQUFRekksRUFBSTRKLEVBQUs1SixJQUNqRGsyRixFQUFjbDJGLEdBQUdpRCxNQUFNQyxRQUFVdzBGLEVBR3JDLEdBQUl2eEYsRUFBY3d5QixVQUFXLENBQ3pCLE1BQU1nL0QsRUFBWU4sRUFBZ0JqQixnQkFDbEN1QixFQUFVLEdBQUcxMEYsTUFBTUMsUUFBVXkwRixFQUFVLEdBQUcxMEYsTUFBTUMsUUFBVWlELEVBQWM0eUIsVUFBWSxHQUFLLE9BSTdGLEdBQUk1eUIsRUFBYzh5QixXQUNkbytELEVBQWdCYixZQUFZdnpGLE1BQU1DLFFBQVUsV0FDekMsQ0FDSG0wRixFQUFnQmIsWUFBWXZ6RixNQUFNQyxRQUFVLEdBQzVDLE1BQU1rc0MsRUFBWWlvRCxFQUFnQmQsY0FDbENwMEYsS0FBS1UsS0FBS3NzQyxjQUFja29ELEVBQWdCYixZQUFZdG5ELGtCQUFtQm1vRCxFQUFnQjNCLFdBQVdseEUsSUFDbEcsSUFBSyxJQUFJeGtCLEVBQUksRUFBRzRKLEVBQU13bEMsRUFBVTNtQyxPQUFRekksRUFBSTRKLEVBQUs1SixJQUN6Q292QyxFQUFVcHZDLEdBQUdnRSxhQUFhLGdCQUFrQndnQixFQUFPcmlCLEtBQUtVLEtBQUt5SSxTQUFTOGpDLEVBQVVwdkMsR0FBSSxNQUNuRm1DLEtBQUtVLEtBQUt3SSxZQUFZK2pDLEVBQVVwdkMsR0FBSSxNQUtqRCxNQUFNNDNGLEVBQVdQLEVBQWdCaEIsa0JBQzNCcDFGLEVBQVEsS0FBSzZDLEtBQUt1b0IsRUFBY3BwQixNQUFNd2IsUUFBVSxLQUFLM2EsS0FBSzg4QixFQUFVMzlCLE1BQU13YixPQUFVdGMsS0FBS1UsS0FBS3NnQyxVQUFVdkMsRUFBVTM5QixNQUFNd2IsTUFBTyxHQUFLLElBQU8sR0FBSyxHQUN0SixJQUFLLElBQUl6ZSxFQUFJLEVBQUc0SixFQUFNZ3VGLEVBQVNudkYsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDeEM0M0YsRUFBUzUzRixHQUFHZ0UsYUFBYSxnQkFBa0IvQyxFQUMzQ2tCLEtBQUtVLEtBQUt5SSxTQUFTc3NGLEVBQVM1M0YsR0FBSSxVQUVoQ21DLEtBQUtVLEtBQUt3SSxZQUFZdXNGLEVBQVM1M0YsR0FBSSxVQUt0Q21HLEVBQWNxekIsY0FHZjY5RCxFQUFnQlgsY0FBY3p6RixNQUFNQyxRQUFVLEdBQzFDZixLQUFLVSxLQUFLMnpCLGdCQUFnQm5LLEVBQWN6Z0IsV0FBWSxlQUNwRHpKLEtBQUtVLEtBQUt5SSxTQUFTK3JGLEVBQWdCWCxjQUFlLFVBQ2xEdndGLEVBQWNzekIsaUJBQWtCLElBRWhDdDNCLEtBQUtVLEtBQUt3SSxZQUFZZ3NGLEVBQWdCWCxjQUFlLFVBQ3JEdndGLEVBQWNzekIsaUJBQWtCLElBUnBDNDlELEVBQWdCWCxjQUFjenpGLE1BQU1DLFFBQVUsT0FZbEQ0cEUsRUFBZ0I3cEUsTUFBTUMsUUFBVSxRQUVoQyxNQUFNd3RELEVBQVksQ0FBQzc5QyxLQUFNLEVBQUcwZixJQUFLLElBQzdCcHdCLEtBQUt1QyxRQUFRb2tELFNBQ2I0SCxFQUFVNzlDLE1BQVExUSxLQUFLSyxRQUFRbUIsUUFBUWdxRCxhQUFhamUsY0FBY3JkLFdBQ2xFcStCLEVBQVVuK0IsS0FBT3B3QixLQUFLSyxRQUFRbUIsUUFBUWdxRCxhQUFhamUsY0FBY2xkLFdBR3JFcndCLEtBQUtrMEIsc0JBQXNCZ2hFLEVBQWdCcCtDLGFBQWM2ekIsRUFBaUIsU0FBVXBjLEdBS3BGdnVELEtBQUttMEIsY0FBY3cyQyxFQUFpQnVxQixFQUFnQnArQyxhQUo5QixXQUNsQjkyQyxLQUFLVSxLQUFLMHJELG1CQUFtQnB1RCxLQUFLZ0MsS0FBS1UsTUFBTSxFQUFPVixLQUFLKytELHlCQUN6RC8rRCxLQUFLMHpCLFFBQVE2aUQsdUJBRStEbDNFLEtBQUtXLE1BQU9rcUIsRUFBZXFnRCxHQUMzR3ZxRSxLQUFLVSxLQUFLMHJELG9CQUFtQixFQUFNcHNELEtBQUsrK0QseUJBRXhDbTJCLEVBQWdCaEMsVUFBWWh3RixFQUM1Qmd5RixFQUFnQi9CLFVBQVk5aEUsRUFFNUIsTUFBTTRRLEdBQWMvWCxFQUFjcm9CLGFBQWEsZ0JBQWtCLElBQUl3RyxNQUFNLEtBSTNFLE9BSEE2c0YsRUFBZ0IvK0QsVUFBWThMLEVBQVcsSUFBTS9YLEVBQWN3ckUsYUFDM0RSLEVBQWdCNytELFVBQVk0TCxFQUFXLElBQU0vWCxFQUFjeXJFLGNBRXBELENBQ0h6eUYsRUFBR0EsRUFDSG11QixFQUFHQSxFQUNIdHlCLEVBQUdBLEVBQ0hqQixFQUFHQSxJQUlYODNGLGdCQUFpQixLQUtqQkMsY0FBZSxXQUNYLE1BQU14QixFQUFjcjBGLEtBQUtLLFFBQVFtMEIsU0FBUzYvRCxZQUMxQ3IwRixLQUFLVSxLQUFLeUksU0FBU2tyRixFQUFhLE1BQ2hDcjBGLEtBQUtLLFFBQVFtMEIsU0FBUzIvRCxVQUFVcnpGLE1BQU1zdkIsSUFBT2lrRSxFQUFZaGtFLFVBQVlna0UsRUFBWWh0RixhQUFnQixLQUNqR3JILEtBQUtLLFFBQVFtMEIsU0FBUzIvRCxVQUFVcnpGLE1BQU00UCxLQUFRMmpGLEVBQVlua0UsV0FBYW1rRSxFQUFZbGtFLFlBQWMsRUFBSyxLQUN0R253QixLQUFLSyxRQUFRbTBCLFNBQVMyL0QsVUFBVXJ6RixNQUFNQyxRQUFVLFFBRWhEZixLQUFLOEIsUUFBUTB5QixTQUFTb2hFLGdCQUFrQixXQUNwQzUxRixLQUFLVSxLQUFLd0ksWUFBWWxKLEtBQUtLLFFBQVFtMEIsU0FBUzYvRCxZQUFhLE1BQ3pEcjBGLEtBQUtLLFFBQVFtMEIsU0FBUzIvRCxVQUFVcnpGLE1BQU1DLFFBQVUsT0FDaERmLEtBQUs2OEMsZUFBZSxRQUFTNzhDLEtBQUs4QixRQUFRMHlCLFNBQVNvaEUsaUJBQ25ENTFGLEtBQUs4QixRQUFRMHlCLFNBQVNvaEUsZ0JBQWtCLE1BQzFDdjJGLEtBQUtXLE1BRVBBLEtBQUs4OEMsWUFBWSxRQUFTOThDLEtBQUs4QixRQUFRMHlCLFNBQVNvaEUsa0JBUXBEbkIscUJBQXNCLFNBQVUveUYsR0FDNUJBLEVBQUVzRCxrQkFFRixNQUFNcEQsRUFBU0YsRUFBRUUsT0FDWDRILEVBQVU1SCxFQUFPQyxhQUFhLGlCQUFtQkQsRUFBTzZILFdBQVc1SCxhQUFhLGdCQUV0RixJQUFLMkgsRUFBUyxPQUVkLE1BQU0xSyxFQUFROEMsRUFBT0MsYUFBYSxlQUFpQkQsRUFBTzZILFdBQVc1SCxhQUFhLGNBRTVFb0QsRUFBYWpGLEtBQUtLLFFBQVFtMEIsU0FBUzRKLGVBQ25DMDNELEVBQWlCOTFGLEtBQUtLLFFBQVE0RSxHQUM5Qis3RSxFQUFZOFUsRUFBZXRnRSxTQUMzQnVnRSxFQUFnQi8xRixLQUFLOEIsUUFBUW1ELEdBSW5DLEdBRkF2RCxFQUFFNEgsaUJBRW1ELG1CQUExQ3RKLEtBQUs4QixRQUFRMHlCLFNBQVNvaEUsa0JBQzdCNTFGLEtBQUs4QixRQUFRMHlCLFNBQVNvaEUsa0JBQ04sWUFBWnBzRixHQUZSLENBS0EsT0FBUUEsR0FDSixJQUFLLE9BQ0R4SixLQUFLOEIsUUFBUTB5QixTQUFTc00sZUFBZTlpQyxLQUFLZ0MsS0FBTWdoRixHQUNoRCtVLEVBQWN4MEQsWUFBWXZqQyxLQUFLZ0MsTUFDL0JBLEtBQUtrL0IsZ0JBQWdCOGhELEVBQVcvN0UsR0FDaEMsTUFDSixJQUFLLFVBQ0QsSUFBSSt3RixFQUFXaDJGLEtBQUs4QixRQUFRMHlCLFNBQVNnUyxpQkFBaUJ4b0MsS0FBS2dDLEtBQU04MUYsR0FDakUsR0FBSTkxRixLQUFLSyxRQUFRbTBCLFNBQVNxTSxnQkFBaUIsQ0FDdkMsTUFBTW8xRCxFQUFhalYsRUFBVW4vRSxhQUFhLG1CQUN0Q28wRixJQUFZRCxFQUFXQyxFQUFXNXRGLE1BQU0sS0FBSyxJQUdyRHJJLEtBQUs4QixRQUFRMHlCLFNBQVNzTSxlQUFlOWlDLEtBQUtnQyxLQUFNZ2hGLEdBQ2hEK1UsRUFBYzEwRCxlQUFlcmpDLEtBQUtnQyxLQUFlLElBQVJsQixFQUFvRCxPQUFyQ2tCLEtBQUtVLEtBQUtzZ0MsVUFBVWcxRCxFQUFVLElBQWdCLEtBQUtyMEYsS0FBS3EwRixHQUFrQkEsRUFBTCxJQUM3SGgyRixLQUFLay9CLGdCQUFnQjhoRCxFQUFXLzdFLEdBQ2hDLE1BQ0osSUFBSyxTQUNELE1BQU10RyxFQUFJcWlGLEVBQVVuL0UsYUFBYSxnQkFBa0IsSUFDbkQsSUFBSW9QLEVBQUkrdkUsRUFBVW4vRSxhQUFhLGlCQUFtQixHQUM5QzY5QixFQUFJc2hELEVBQVVuL0UsYUFBYSxpQkFBbUIsR0FFbkMsTUFBVi9DLElBQWtCa0IsS0FBS0ssUUFBUW0wQixTQUFTcU0saUJBQStCLE1BQVYvaEMsR0FBaUJrQixLQUFLSyxRQUFRbTBCLFNBQVNxTSxnQkFDckduQixFQUFJQSxFQUFJLEdBQUssTUFFYnp1QixFQUFJQSxFQUFJLEdBQUssTUFHakIrdkUsRUFBVTNxRSxhQUFhLGVBQWdCcEYsR0FDdkMrdkUsRUFBVTNxRSxhQUFhLGVBQWdCcXBCLEdBRXZDMS9CLEtBQUs4QixRQUFRMHlCLFNBQVMwaEUsY0FBY2xWLEVBQVdyaUYsRUFBR3NTLEVBQUd5dUIsR0FDckQsTUFDSixJQUFLLFNBQ0QsTUFBTXcxRCxFQUFrQmwxRixLQUFLSyxRQUFRbTBCLFNBQy9CMmhFLEVBQWlELEVBQXhDblYsRUFBVW4vRSxhQUFhLGVBQStCLEVBQVIvQyxFQUN2RHMzRixFQUFNcDJGLEtBQUtvRyxHQUFHdUIsS0FBS3l0RixJQUFJZSxJQUFVLElBQU0sRUFBSUEsRUFFakRuVixFQUFVM3FFLGFBQWEsY0FBZSsvRSxHQUN0Q2xCLEVBQWdCcjBELGdCQUFrQixhQUFhbC9CLEtBQUszQixLQUFLb0csR0FBR3VCLEtBQUt5dEYsSUFBSWdCLEdBQUt6bUYsWUFDMUUzUCxLQUFLOEIsUUFBUTB5QixTQUFTdU0saUJBQWlCL2lDLEtBQUtnQyxLQUFNZ2hGLEVBQVcsS0FBTSxNQUVuRWhoRixLQUFLay9CLGdCQUFnQjhoRCxFQUFXLzdFLEdBQ2hDLE1BQ0osSUFBSyxVQUVELFlBREFqRixLQUFLOEIsUUFBUTB5QixTQUFTcWhFLGNBQWM3M0YsS0FBS2dDLE1BRTdDLElBQUssUUFDRCxNQUFNcTJGLEVBQXVCLFVBQVZ2M0YsRUFBb0IsT0FBU0EsRUFDaERpM0YsRUFBY2wzRCxTQUFTN2dDLEtBQUtnQyxLQUFNcTJGLEVBQVksS0FBTSxLQUFNLE1BQzFEcjJGLEtBQUtrL0IsZ0JBQWdCOGhELEVBQVcvN0UsR0FDaEMsTUFDSixJQUFLLFVBQ0QsTUFBTXFnQixHQUFXd3dFLEVBQWV4K0QsZ0JBTWhDLEdBTEF5K0QsRUFBY2w0RCxXQUFXNy9CLEtBQUtnQyxNQUFNLEdBQ3BDODFGLEVBQWV4K0QsZ0JBQWtCdytELEVBQWV0K0QsZUFBZXZhLFFBQVVxSSxFQUV6RXl3RSxFQUFjbDdELGFBQWE3OEIsS0FBS2dDLE1BQU0sR0FBTyxHQUFPLEdBRWhEc2xCLEVBQVMsQ0FDVCxNQUFNZ3hFLEVBQWN0MkYsS0FBS1UsS0FBSzJ6QixnQkFBZ0J5aEUsRUFBZXYrRCxVQUFVLFNBQVUvRyxHQUM3RSxPQUE0QixJQUFyQkEsRUFBUTdaLFlBR2QyL0UsRUFHRHQyRixLQUFLb3pCLFNBQVNrakUsRUFBYSxFQUFHQSxFQUFhQSxFQUFZL3dGLFlBQVllLFFBRm5Fd3ZGLEVBQWV2K0QsU0FBUzMwQixRQUs1QjVDLEtBQUs4ekIsc0JBRUw5ekIsS0FBS2svQixnQkFBZ0I4aEQsRUFBVy83RSxHQUNoQzh3RixFQUFjbDRELFdBQVc3L0IsS0FBS2dDLE1BQU0sR0FHeEMsTUFDSixJQUFLLFNBQ0QrMUYsRUFBYy96RCxjQUFjaGtDLEtBQUtnQyxNQUNqQ0EsS0FBS2svQixnQkFBZ0I4aEQsRUFBVy83RSxHQUNoQyxNQUNKLElBQUssU0FDRDh3RixFQUFjbDRELFdBQVc3L0IsS0FBS2dDLE1BQzlCQSxLQUFLOHpCLGlCQUNMLE1BQ0osSUFBSyxTQUNEaWlFLEVBQWN2OEQsUUFBUXg3QixLQUFLZ0MsTUFLbkNBLEtBQUswekIsUUFBUS9xQixNQUFLLEtBT3RCbTRCLGVBQWdCLFNBQVV0L0IsR0FDdEIsTUFBTW9rQixHQUFRcGtCLEVBQVFLLGFBQWEsY0FBZ0JMLEVBQVFLLGFBQWEsZ0JBQWtCLElBQUl3RyxNQUFNLEtBQ3BHckksS0FBS0ssUUFBUW0wQixTQUFTcU0saUJBQWtCLEVBRXhDci9CLEVBQVFWLE1BQU1paEMsU0FBVyxHQUN6QnZnQyxFQUFRVixNQUFNNnVGLFVBQVksR0FDMUJudUYsRUFBUVYsTUFBTXkxRixnQkFBa0IsR0FDaEMvMEYsRUFBUTZVLGFBQWEsY0FBZSxJQUNwQzdVLEVBQVE2VSxhQUFhLGVBQWdCLElBQ3JDN1UsRUFBUTZVLGFBQWEsZUFBZ0IsSUFFckNyVyxLQUFLOEIsUUFBUTlCLEtBQUtLLFFBQVFtMEIsU0FBUzRKLGdCQUFnQmtELFFBQVF0akMsS0FBS2dDLEtBQU00bEIsRUFBSyxHQUFLQSxFQUFLLEdBQUssT0FBUUEsRUFBSyxHQUFLQSxFQUFLLEdBQUssSUFBSSxJQVM5SG1iLGlCQUFrQixTQUFVdi9CLEVBQVM4YSxFQUFPQyxHQUN4QyxJQUFJMDVFLEVBQWF6MEYsRUFBUUssYUFBYSxtQkFDdEMsTUFBTXN6RixFQUFhbjFGLEtBQUtLLFFBQVFtMEIsU0FBU3FNLGdCQUNuQ3UxRCxFQUE0QyxFQUF0QzUwRixFQUFRSyxhQUFhLGVBQ2pDLElBQUkyMEYsRUFBYyxHQUVsQixHQUFJUCxJQUFlZCxFQUNmYyxFQUFhQSxFQUFXNXRGLE1BQU0sS0FDUixTQUFsQjR0RixFQUFXLElBQW1DLFNBQWxCQSxFQUFXLEdBQ3ZDajJGLEtBQUs4QixRQUFROUIsS0FBS0ssUUFBUW0wQixTQUFTNEosZ0JBQWdCbUQsWUFBWXZqQyxLQUFLZ0MsTUFFcEVBLEtBQUs4QixRQUFROUIsS0FBS0ssUUFBUW0wQixTQUFTNEosZ0JBQWdCaUQsZUFBZXJqQyxLQUFLZ0MsS0FBTWkyRixFQUFXLEdBQUlBLEVBQVcsUUFFeEcsQ0FDSCxNQUFNMTNELEVBQVF2K0IsS0FBS1UsS0FBS2k1QixpQkFBaUJuNEIsRUFBUyxVQUU1Q2kxRixFQUFVbjZFLEdBQVM5YSxFQUFRMnVCLFlBQzNCdW1FLEVBQVVuNkUsR0FBVS9hLEVBQVE2RixhQUM1Qm5FLEdBQUtpeUYsRUFBYXVCLEVBQVVELEdBQVcsS0FDdkNwbEUsR0FBSzhqRSxFQUFhc0IsRUFBVUMsR0FBVyxLQVE3QyxHQU5BMTJGLEtBQUs4QixRQUFROUIsS0FBS0ssUUFBUW0wQixTQUFTNEosZ0JBQWdCd0Qsa0JBQWtCNWpDLEtBQUtnQyxNQUMxRUEsS0FBSzhCLFFBQVE5QixLQUFLSyxRQUFRbTBCLFNBQVM0SixnQkFBZ0JrRCxRQUFRdGpDLEtBQUtnQyxLQUFNeTJGLEVBQVUsS0FBTUMsRUFBVSxNQUFNLEdBRXRHbjRELEVBQU16OUIsTUFBTXdiLE1BQVFwWixFQUNwQnE3QixFQUFNejlCLE1BQU15YixPQUFZdmMsS0FBS0ssUUFBUUwsS0FBS0ssUUFBUW0wQixTQUFTNEosZ0JBQWdCN0csU0FBVyxHQUFLbEcsRUFFdkY4akUsRUFBWSxDQUNaLElBQUl3QixFQUFVRixFQUFVLEVBQUssTUFBU0EsRUFBVSxFQUFLLE9BQ2pERyxFQUFVRixFQUFVLEVBQUssTUFBU0EsRUFBVSxFQUFLLE9BQ3JERixFQUFzQixLQUFSSixJQUF1QixNQUFUQSxFQUFlUSxFQUFTRCxHQUk1RG4xRixFQUFRVixNQUFNeTFGLGdCQUFrQkMsRUFDaEN4MkYsS0FBSzhCLFFBQVEweUIsU0FBUzBoRSxjQUFjMTBGLEVBQVM0MEYsRUFBSXptRixXQUFZbk8sRUFBUUssYUFBYSxpQkFBbUIsR0FBSUwsRUFBUUssYUFBYSxpQkFBbUIsSUFFaklMLEVBQVFWLE1BQU1paEMsU0FBMUJvekQsRUFBcUMsT0FDWCxHQUU5Qm4xRixLQUFLOEIsUUFBUTB5QixTQUFTMk4sbUJBQW1CbmtDLEtBQUtnQyxLQUFNd0IsSUFHeEQwMEYsY0FBZSxTQUFVMTBGLEVBQVM3QyxFQUFHc1MsRUFBR3l1QixHQUNwQyxJQUFJcGpCLEdBQVM5YSxFQUFRMnVCLFlBQWMzdUIsRUFBUTZGLGVBQWlCLElBQUkxRixLQUFLaEQsR0FBSyxHQUFLLEdBQzNFazRGLEVBQVksR0FFaEIsR0FBSSxRQUFRbDFGLEtBQUtoRCxLQUFPc1MsR0FBS3l1QixHQUd6QixPQUZBbTNELEVBQVk1bEYsRUFBSSxJQUFNLElBRWR0UyxHQUNKLElBQUssS0FDRGs0RixFQUFZNWxGLEdBQUt5dUIsRUFBSSxJQUFNQSxFQUFJbTNELEVBQVksR0FDM0MsTUFDSixJQUFLLE1BQ0R2NkUsSUFBVSxFQUNWdTZFLEVBQVk1bEYsR0FBS3l1QixFQUFJLElBQU16dUIsRUFBSTRsRixFQUFZLEdBQzNDLE1BQ0osSUFBSyxNQUNEQSxFQUFZNWxGLEdBQUt5dUIsRUFBSSxJQUFNenVCLEVBQUk0bEYsRUFBWSxHQUMzQyxNQUNKLElBQUssT0FDRHY2RSxJQUFVLEVBQ1Z1NkUsRUFBWTVsRixHQUFLeXVCLEVBQUksSUFBTUEsRUFBSW0zRCxFQUFZLEdBQzNDLE1BQ0osUUFDSUEsRUFBWSxHQUlwQmw0RixFQUFJLEtBQVEsSUFDWjZDLEVBQVFWLE1BQU1paEMsU0FBVyxJQUc3QnZnQyxFQUFRVixNQUFNNnVGLFVBQVksVUFBWWh4RixFQUFJLFFBQVVzUyxFQUFJLFlBQWNBLEVBQUksT0FBUyxLQUFPeXVCLEVBQUksWUFBY0EsRUFBSSxPQUFTLEtBQU9tM0QsRUFBWSxhQUFlQSxFQUFZLElBQU12NkUsRUFBUSxNQUFRLEtBT2pNNmxCLG1CQUFvQixTQUFVM2dDLEdBQzFCLE1BQU1xbEMsRUFBYTdtQyxLQUFLVSxLQUFLMnpCLGdCQUFnQnIwQixLQUFLVSxLQUFLaTVCLGlCQUFpQm40QixFQUFTLFVBQVcsY0FDeEZxbEMsSUFDQUEsRUFBVy9sQyxNQUFNZ2hDLFdBQWE5aEMsS0FBS0ssUUFBUW0wQixTQUFTcU0sZ0JBQWtCci9CLEVBQVEydUIsWUFBYzN1QixFQUFRNkYsYUFBZSxHQUFLLE9BUWhJbXRGLDBCQUEyQixTQUFVOXlGLEdBQ2pDQSxFQUFFc0Qsa0JBQ0Z0RCxFQUFFNEgsaUJBRUYsTUFBTTRyRixFQUFrQmwxRixLQUFLSyxRQUFRbTBCLFNBQy9Ca04sRUFBWXd6RCxFQUFnQjlCLGtCQUFvQjF4RixFQUFFRSxPQUFPbWdELFVBQVUsR0FFekVtekMsRUFBZ0JsQyxlQUFpQnR4RixFQUFFaXFGLFFBQ25DdUosRUFBZ0JqQyxlQUFpQnZ4RixFQUFFZ29GLFFBQ25DMXBGLEtBQUtLLFFBQVFtQixRQUFRZzdELGlCQUFpQjE3RCxNQUFNQyxRQUFVLFFBQ3REbTBGLEVBQWdCcCtDLGFBQWFoMkMsTUFBTUMsUUFBVSxPQUM3Q20wRixFQUFnQmwrQyxVQUFVbDJDLE1BQU1rOUIsTUFBUSxJQUFJcjhCLEtBQUsrL0IsR0FBYSxRQUFVLElBQUkvL0IsS0FBSysvQixHQUFhLE9BQVMsT0FFdkcsTUFBTW8xRCxFQUFtQixTQUFxQnAxRixHQUMxQyxHQUFlLFlBQVhBLEVBQUVzSSxNQUFvQyxLQUFkdEksRUFBRVksUUFBZ0IsT0FFOUMsTUFBTXM4RSxFQUFTc1csRUFBZ0I1QixVQUMvQjRCLEVBQWdCNUIsV0FBWSxFQUU1QnR6RixLQUFLNjhDLGVBQWUsWUFBYWs2QyxHQUNqQy8yRixLQUFLNjhDLGVBQWUsVUFBV2k2QyxHQUMvQjkyRixLQUFLNjhDLGVBQWUsVUFBV2k2QyxHQUVoQixZQUFYcDFGLEVBQUVzSSxNQUNGaEssS0FBSzh6QixpQkFDTDl6QixLQUFLSyxRQUFRbUIsUUFBUWc3RCxpQkFBaUIxN0QsTUFBTUMsUUFBVSxPQUN0RGYsS0FBSzhCLFFBQVE5QixLQUFLSyxRQUFRbTBCLFNBQVM0SixnQkFBZ0J2N0IsS0FBSzdFLEtBQUtnQyxRQUc3REEsS0FBSzhCLFFBQVEweUIsU0FBU3dpRSx5QkFBeUJoNUYsS0FBS2dDLEtBQU0waEMsR0FFdERrOUMsR0FBUTUrRSxLQUFLMHpCLFFBQVEvcUIsTUFBSyxLQUVwQ3RKLEtBQUtXLE1BRUQrMkYsRUFBd0IvMkYsS0FBSzhCLFFBQVEweUIsU0FBU3lpRSxpQkFBaUI1M0YsS0FBS1csS0FBTWsxRixFQUFpQnh6RCxFQUFXMWhDLEtBQUtLLFFBQVE2MEYsRUFBZ0I5MkQsaUJBQ3pJcCtCLEtBQUs4OEMsWUFBWSxZQUFhaTZDLEdBQzlCLzJGLEtBQUs4OEMsWUFBWSxVQUFXZzZDLEdBQzVCOTJGLEtBQUs4OEMsWUFBWSxVQUFXZzZDLElBV2hDRyxpQkFBa0IsU0FBVS9CLEVBQWlCeHpELEVBQVc2b0MsRUFBUTdvRSxHQUM1RCxNQUFNaXFGLEVBQVVqcUYsRUFBRWlxRixRQUNaakMsRUFBVWhvRixFQUFFZ29GLFFBRWxCLElBQUl3TixFQUFVM3NCLEVBQU8xMEMsV0FDakJzaEUsRUFBVTVzQixFQUFPejBDLFdBRXJCLE1BQU01eUIsRUFBSXFuRSxFQUFPMTBDLFlBQWMsSUFBSWwwQixLQUFLKy9CLEdBQWFpcUQsRUFBVXVKLEVBQWdCbEMsZUFBaUJrQyxFQUFnQmxDLGVBQWlCckgsR0FDM0h0NkQsRUFBSWs1QyxFQUFPejBDLFlBQWMsSUFBSW4wQixLQUFLKy9CLEdBQWFnb0QsRUFBVXdMLEVBQWdCakMsZUFBaUJpQyxFQUFnQmpDLGVBQWlCdkosR0FDM0gwTixFQUFPN3NCLEVBQU96MEMsV0FBYXkwQyxFQUFPMTBDLFdBQWMzeUIsRUFFbEQsSUFBSXZCLEtBQUsrL0IsS0FBWXd6RCxFQUFnQmwrQyxVQUFVbDJDLE1BQU1zdkIsSUFBT202QyxFQUFPejBDLFlBQWMsSUFBSW4wQixLQUFLKy9CLEdBQWFyUSxFQUFJK2xFLEdBQU8sTUFDbEgsSUFBSXoxRixLQUFLKy9CLEtBQVl3ekQsRUFBZ0JsK0MsVUFBVWwyQyxNQUFNNFAsS0FBUTY1RCxFQUFPMTBDLFdBQWEzeUIsRUFBSyxNQUV0RixNQUFNdkIsS0FBSysvQixLQUNYd3pELEVBQWdCbCtDLFVBQVVsMkMsTUFBTXdiLE1BQVFwWixFQUFJLEtBQzVDZzBGLEVBQVVoMEYsR0FHVixjQUFjdkIsS0FBSysvQixJQUNuQnd6RCxFQUFnQmwrQyxVQUFVbDJDLE1BQU15YixPQUFTNjZFLEVBQUssS0FDOUNELEVBQVVDLEdBRUwsV0FBV3oxRixLQUFLKy9CLEtBQ3JCd3pELEVBQWdCbCtDLFVBQVVsMkMsTUFBTXliLE9BQVM4VSxFQUFJLEtBQzdDOGxFLEVBQVU5bEUsR0FHZDZqRSxFQUFnQmhDLFVBQVlnRSxFQUM1QmhDLEVBQWdCL0IsVUFBWWdFLEVBQzVCbjNGLEtBQUtVLEtBQUswdEMsVUFBVThtRCxFQUFnQnZCLGNBQWUzekYsS0FBS29HLEdBQUd1QixLQUFLQyxNQUFNc3ZGLEdBQVcsTUFBUWwzRixLQUFLb0csR0FBR3VCLEtBQUtDLE1BQU11dkYsSUFDNUdqQyxFQUFnQjVCLFdBQVksR0FRaEMwRCx5QkFBMEIsU0FBVXQxRCxHQUNoQyxNQUFNeXpELEVBQWFuMUYsS0FBS0ssUUFBUW0wQixTQUFTcU0sZ0JBQ3pDN2dDLEtBQUs4ekIsaUJBQ0w5ekIsS0FBS0ssUUFBUW1CLFFBQVFnN0QsaUJBQWlCMTdELE1BQU1DLFFBQVUsT0FFdEQsSUFBSW1DLEVBQUlsRCxLQUFLb0csR0FBR3VCLEtBQUtDLE1BQU11dEYsRUFBYW4xRixLQUFLSyxRQUFRbTBCLFNBQVMyK0QsVUFBWW56RixLQUFLSyxRQUFRbTBCLFNBQVMwK0QsV0FDNUY3aEUsRUFBSXJ4QixLQUFLb0csR0FBR3VCLEtBQUtDLE1BQU11dEYsRUFBYW4xRixLQUFLSyxRQUFRbTBCLFNBQVMwK0QsVUFBWWx6RixLQUFLSyxRQUFRbTBCLFNBQVMyK0QsV0FFaEcsSUFBS2dDLElBQWUsS0FBS3h6RixLQUFLdUIsR0FBSSxDQUM5QixNQUFNbTBGLEVBQVUsR0FDVm44RSxFQUFRbGIsS0FBS0ssUUFBUW1CLFFBQVFncUQsYUFBYTZOLFlBQXlCLEVBQVZnK0IsRUFBZSxFQUUxRXIzRixLQUFLVSxLQUFLc2dDLFVBQVU5OUIsRUFBRyxHQUFLZ1ksSUFDNUJtVyxFQUFJcnhCLEtBQUtvRyxHQUFHdUIsS0FBS0MsTUFBT3lwQixFQUFJbnVCLEVBQUtnWSxHQUNqQ2hZLEVBQUlnWSxHQUlaLE1BQU1qVyxFQUFhakYsS0FBS0ssUUFBUW0wQixTQUFTNEosZUFDekNwK0IsS0FBSzhCLFFBQVFtRCxHQUFZcThCLFFBQVF0akMsS0FBS2dDLEtBQU1rRCxFQUFHbXVCLEdBQUcsRUFBT3FRLEdBQ3JEeXpELEdBQVluMUYsS0FBSzhCLFFBQVEweUIsU0FBU3VNLGlCQUFpQi9pQyxLQUFLZ0MsS0FBTUEsS0FBS0ssUUFBUUwsS0FBS0ssUUFBUW0wQixTQUFTNEosZ0JBQWdCNUksU0FBVXR5QixFQUFHbXVCLEdBRWxJcnhCLEtBQUtrL0IsZ0JBQWdCbC9CLEtBQUtLLFFBQVE0RSxHQUFZdXdCLFNBQVV2d0IsS0FzQmhFLFlBbEJ3QixJQUFiaEYsSUFDRkYsRUFBTytDLG1CQUNSdkUsT0FBT0MsZUFBZXVCLEVBQVEsb0JBQXFCLENBQy9DdEIsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPLEtBSWZQLE9BQU9DLGVBQWV1QixFQUFPK0Msa0JBQW1CLFdBQVksQ0FDeERyRSxZQUFZLEVBQ1pzRSxVQUFVLEVBQ1ZDLGNBQWMsRUFDZGxFLE1BQU8wMUIsS0FJUkEsR0EzM0JxRCxpQkFBbkI1MkIsRUFBT0QsUUFDNUNDLEVBQU9ELFFBQVVrQyxFQUFPb0QsU0FDcEJuRCxFQUFRRCxHQUFRLEdBQ2hCLFNBQVVxRCxHQUNOLElBQUtBLEVBQUVELFNBQ0gsTUFBTSxJQUFJRSxNQUFNLDhDQUVwQixPQUFPckQsRUFBUW9ELElBR3ZCcEQsRUFBUUQsSSxvQ0NYZixJQUFVQSxFQUFRQyxFQUFSRCxFQWFTLG9CQUFYRSxPQUF5QkEsT0FBU0MsS0FieEJGLEVBYThCLFNBQVVDLEVBQVFFLEdBQy9ELE1BQU13MEIsRUFBYyxDQUNoQnIyQixLQUFNLGNBQ05pRixTQUFVLEtBRVZpMEYscUJBQXNCLFNBQVVsdkYsR0FDNUIsT0FBSSxPQUFPekcsS0FBS3lHLEtBQ0osVUFBVXpHLEtBQUt5RyxFQUFJbWxDLGNBQWNwYyxZQUFjLFVBQVV4dkIsS0FBS3lHLEVBQUltbEMsY0FBY0EsY0FBY3BjLFdBYzlHNEssT0FBUSxTQUFVdzdELEVBQVdDLEVBQWNyN0QsRUFBVXM3RCxFQUFVQyxHQUMzRDEzRixLQUFLa3pCLGNBQ0wsTUFBTXlrRSxFQUFhMzNGLEtBQUs4QixRQUFRMnlCLFlBQzFCenVCLEVBQVUyeEYsRUFBV3QwRixTQUFXckQsS0FBS1UsS0FBS3VGLG9CQUloRCxHQUZBRCxFQUFRRSxtQkFBcUJ5eEYsRUFBV0MsZ0JBQWdCdjRGLEtBQUtXLEtBQU1nRyxFQUFTeXhGLEVBQVVDLEdBQ3RGMXhGLEVBQVFoRSxLQUFLLE9BQVF1MUYsR0FBVyxHQUNaLE9BQWpCQyxHQUFpRCxpQkFBakJBLEdBQTZCeDNGLEtBQUtvRyxHQUFHN0gsT0FBTzhILEtBQUtteEYsR0FBY2x4RixPQUFTLEVBQ3ZHLElBQUksSUFBSWxILEtBQU9vNEYsRUFDWHh4RixFQUFRTyxpQkFBaUJuSCxFQUFLbzRGLEVBQWFwNEYsSUFHbkQ0RyxFQUFRUSxLQUFLMjFCLElBR2pCeTdELGdCQUFpQixTQUFVNXhGLEVBQVN5eEYsRUFBVUMsR0FDMUMsR0FBMkIsSUFBdkIxeEYsRUFBUVMsV0FDUixHQUF1QixNQUFuQlQsRUFBUVUsT0FDUixJQUNJK3dGLEVBQVN6eEYsR0FDWCxNQUFPdEUsR0FDTCxNQUFNeUIsTUFBTSx5REFBMkR6QixFQUFFd0YsUUFBVSxLQUNyRixRQUNFbEgsS0FBS3l6QixtQkFFTixDQUNIenpCLEtBQUt5ekIsZUFDTCxNQUFNOXNCLEVBQU9YLEVBQVFjLGFBQXlCRixLQUFLQyxNQUFNYixFQUFRYyxjQUE3QmQsRUFDcEMsR0FBNkIsbUJBQWxCMHhGLEdBQWdDQSxFQUFjLEdBQUkvd0YsRUFBSzNHLE1BQU8sQ0FDckUsTUFBTXNILEVBQU0sMERBQTREdEIsRUFBUVUsT0FBUyxnQkFBa0JDLEVBQUlZLGNBQWdCdkIsRUFBUWMsY0FFdkksTUFEQTlHLEtBQUs4NUIsVUFBVTBCLFdBQVdsMEIsR0FDcEJuRSxNQUFNbUUsTUFxQjVCMjJCLFVBQVcsU0FBVWg1QixFQUFZNHlGLEVBQVVDLEVBQW9CbDZELEVBQWVwSixHQUMxRSxJQUFJcnNCLEVBQU8sR0FDWCxJQUFLLElBQUl0SyxFQUFJLEVBQUc0SixFQUFNb3dGLEVBQVN2eEYsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDNUNzSyxFQUFPQSxFQUFLMlMsT0FBTyxHQUFHcEosTUFBTTFULEtBQUtnQyxLQUFLSyxRQUFRbUIsUUFBUTB2QixRQUFRdG9CLGlCQUFpQml2RixFQUFTaDZGLEdBQUssa0NBR2pHLE1BQU1rNkYsRUFBb0IvM0YsS0FBSzhCLFFBQVEyeUIsWUFDakNwMEIsRUFBVUwsS0FBS0ssUUFBUTRFLEdBQ3ZCK3lGLEVBQVczM0YsRUFBUXMwQixVQUNuQnNqRSxFQUFjRixFQUFrQi80RCxRQUFRMy9CLEtBQUtXLE1BRW5ELEdBQUltSSxFQUFLN0IsU0FBVzB4RixFQUFTMXhGLE9BQVEsQ0FFakMsR0FBSXRHLEtBQUt5Z0UscUJBQXNCLENBQzNCLElBQUssSUFBSTVpRSxFQUFJLEVBQUc0SixFQUFNVSxFQUFLN0IsT0FBUXpJLEVBQUk0SixFQUFLNUosSUFDeENvNkYsRUFBWWh6RixFQUFZa0QsRUFBS3RLLEdBQUlpNkYsRUFBb0IsS0FBTXRqRSxHQUUvRCxPQUNHLENBQ0gsSUFBSTBqRSxHQUFhLEVBQ2pCLElBQUssSUFBa0N6OEQsRUFBOUI1OUIsRUFBSSxFQUFHNEosRUFBTXV3RixFQUFTMXhGLE9BQWN6SSxFQUFJNEosRUFBSzVKLElBRWxELEdBREE0OUIsRUFBT3U4RCxFQUFTbjZGLEdBQ2tILElBQTlIc0ssRUFBS2lCLFFBQU8sU0FBVXJLLEdBQUssT0FBTzA4QixFQUFLaG1CLE1BQVExVyxFQUFFMFcsS0FBT2dtQixFQUFLcHFCLE1BQU0xQixhQUFlNVEsRUFBRThDLGFBQWEsaUJBQWtCeUUsT0FBYyxDQUNqSTR4RixHQUFhLEVBQ2IsTUFJUixJQUFLQSxFQUFZLFFBS3pCLE1BQU05NUQsRUFBaUI1SixFQUFXeDBCLEtBQUtLLFFBQVFtMEIsU0FBUzRKLGVBQWlCLEdBQ3JFNUosSUFBVXgwQixLQUFLSyxRQUFRbTBCLFNBQVM0SixlQUFpQm41QixHQUNyRCxNQUFNa3pGLEVBQWMsR0FDZEMsRUFBWSxHQUNsQixJQUFLLElBQUl2NkYsRUFBSSxFQUFHNEosRUFBTXV3RixFQUFTMXhGLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzVDdTZGLEVBQVV2NkYsR0FBS202RixFQUFTbjZGLEdBQUd3VCxNQUkvQixJQUZBaFIsRUFBUXNnQyxhQUFleDRCLEVBRWhCQSxFQUFLN0IsT0FBUyxHQUFHLENBQ3BCLE1BQU04QixFQUFNRCxFQUFLZ1gsUUFDWm5mLEtBQUtVLEtBQUtpNUIsaUJBQWlCdnhCLEVBQUtwSSxLQUFLVSxLQUFLazVCLG1CQUFzQm0rRCxFQUFrQlQscUJBQXFCbHZGLElBR2hHQSxFQUFJdkcsYUFBYSxlQUFpQnUyRixFQUFVMXZGLFFBQXlDLEVBQWpDTixFQUFJdkcsYUFBYSxlQUFxQixHQUNsR3MyRixFQUFZeHZGLEtBQUt0SSxFQUFRdTBCLFlBQ3pCeHNCLEVBQUk4cEIsZ0JBQWdCLGNBQ3BCK2xFLEVBQVloekYsRUFBWW1ELEVBQUswdkYsRUFBb0IsS0FBTXRqRSxJQUV2RDJqRSxFQUFZeHZGLEtBQXNDLEVBQWpDUCxFQUFJdkcsYUFBYSxnQkFQbENzMkYsRUFBWXh2RixLQUFLdEksRUFBUXUwQixZQUN6QmdKLEVBQWN4MUIsSUFVdEIsSUFBSyxJQUFXeXhCLEVBQVBoOEIsRUFBSSxFQUFjQSxFQUFJbTZGLEVBQVMxeEYsT0FBUXpJLElBQzVDZzhCLEVBQVltK0QsRUFBU242RixHQUFHd1QsTUFDcEI4bUYsRUFBWXp2RixRQUFRbXhCLElBQWMsSUFFdENtK0QsRUFBUy91RixPQUFPcEwsRUFBRyxHQUNlLG1CQUF2Qmk2RixHQUFtQ0EsRUFBbUIsS0FBTWorRCxFQUFXLFNBQVUsS0FBTSxFQUFHNzVCLE1BQ3JHbkMsS0FHQTIyQixJQUFVeDBCLEtBQUtLLFFBQVFtMEIsU0FBUzRKLGVBQWlCQSxJQWN6RFksUUFBUyxTQUFVLzVCLEVBQVl6RCxFQUFTczJGLEVBQW9CNXlFLEVBQU1zUCxHQUM5RCxNQUFNNEosRUFBaUI1SixFQUFXeDBCLEtBQUtLLFFBQVFtMEIsU0FBUzRKLGVBQWlCLEdBQ3JFNUosSUFBVXgwQixLQUFLSyxRQUFRbTBCLFNBQVM0SixlQUFpQm41QixHQUVyRCxNQUFNb3pGLEVBQVNyNEYsS0FBSzhCLFFBQVFtRCxHQUN0QjVFLEVBQVVMLEtBQUtLLFFBQVE0RSxHQUN2Qit5RixFQUFXMzNGLEVBQVFzMEIsVUFDekIsSUFBSWtGLEVBQVlyNEIsRUFBUUssYUFBYSxjQUNqQzQ1QixFQUFPLEtBQ1A2OEQsRUFBUSxHQVVaLEdBUktwekUsSUFDREEsRUFBTyxDQUNILEtBQVExakIsRUFBUUssYUFBYSxvQkFBNkMsaUJBQWhCTCxFQUFRaVUsSUFBbUJqVSxFQUFRaVUsSUFBSXBOLE1BQU0sS0FBS2cxQixNQUFRLElBQ3BILEtBQVE3N0IsRUFBUUssYUFBYSxtQkFBcUIsS0FLckRnNEIsR0FBYTc1QixLQUFLd2dFLG9CQUNuQjgzQixFQUFRLFNBQ1J6K0QsRUFBWXg1QixFQUFRdTBCLGFBRXBCcHpCLEVBQVE2VSxhQUFhLGFBQWN3akIsR0FDbkNyNEIsRUFBUTZVLGFBQWEsaUJBQWtCNk8sRUFBSzltQixNQUM1Q29ELEVBQVE2VSxhQUFhLGlCQUFrQjZPLEVBQUtVLE1BRTVDNlYsRUFBTyxDQUNIaG1CLElBQUtqVSxFQUFRaVUsSUFDYnBFLE1BQW1CLEVBQVp3b0IsRUFDUHo3QixLQUFNOG1CLEVBQUs5bUIsS0FDWHduQixLQUFNVixFQUFLVSxNQUdmb3lFLEVBQVNydkYsS0FBSzh5QixPQUNYLENBQ0g2OEQsRUFBUSxTQUNSeitELEdBQWEsRUFFYixJQUFLLElBQUloOEIsRUFBSSxFQUFHNEosRUFBTXV3RixFQUFTMXhGLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzVDLEdBQUlnOEIsSUFBY20rRCxFQUFTbjZGLEdBQUd3VCxNQUFPLENBQ2pDb3FCLEVBQU91OEQsRUFBU242RixHQUNoQixNQUlINDlCLElBQ0Q1QixFQUFZeDVCLEVBQVF1MEIsYUFDcEI2RyxFQUFPLENBQUVwcUIsTUFBT3dvQixHQUNoQm0rRCxFQUFTcnZGLEtBQUs4eUIsSUFHbEJBLEVBQUtobUIsSUFBTWpVLEVBQVFpVSxJQUNuQmdtQixFQUFLcjlCLEtBQU9vRCxFQUFRSyxhQUFhLGtCQUNqQzQ1QixFQUFLN1YsS0FBZ0QsRUFBekNwa0IsRUFBUUssYUFBYSxrQkFXckMsR0FQQTQ1QixFQUFLajZCLFFBQVVBLEVBQ2ZpNkIsRUFBS3pJLE9BQVNxbEUsRUFBTzcrRCxRQUFRbjZCLEtBQUtXLEtBQU13QixHQUN4Q2k2QixFQUFLcEMsT0FBUyxTQUFVNzNCLEdBQ3BCQSxFQUFRKzJGLGdCQUFlLEdBQ3ZCdjRGLEtBQUtvRyxHQUFHNjZCLFdBQVdvM0QsRUFBT2gvRCxPQUFPaDZCLEtBQUtXLEtBQU13QixLQUM5Q25DLEtBQUtXLEtBQU13QixHQUVUZ3pCLEVBQVUsQ0FLVixJQUpLaHpCLEVBQVFLLGFBQWEsZ0JBQWtCTCxFQUFRazBGLGNBQ2hEbDBGLEVBQVE2VSxhQUFhLGNBQWU3VSxFQUFRazBGLGFBQWUsSUFBTWwwRixFQUFRbTBGLGdCQUd4RW4wRixFQUFRSyxhQUFhLGVBQWdCLENBQ3RDLE1BQU00OEIsRUFBWXorQixLQUFLVSxLQUFLaTVCLGlCQUFpQm40QixFQUFTeEIsS0FBS1UsS0FBS2s1QixrQkFDMUQyRSxFQUFRditCLEtBQUtVLEtBQUtpNUIsaUJBQWlCbjRCLEVBQVMsVUFFNUMwQixFQUFJbEQsS0FBSzhCLFFBQVEweUIsU0FBUytSLGlCQUFpQnZvQyxLQUFLZ0MsS0FBTUssRUFBU21CLEVBQVMrOEIsRUFBT0UsR0FDL0VwTixFQUFJcnhCLEtBQUs4QixRQUFRMHlCLFNBQVNnUyxpQkFBaUJ4b0MsS0FBS2dDLEtBQU1LLEVBQVNtQixFQUFTKzhCLEVBQU9FLEdBQ3JGajlCLEVBQVE2VSxhQUFhLGNBQWVuVCxFQUFJLElBQU1tdUIsR0FDOUM3dkIsRUFBUTZVLGFBQWEsWUFBYW5ULEVBQUksSUFBTW11QixHQUdoRCxJQUFLN3ZCLEVBQVFWLE1BQU13YixNQUFPLENBQ3RCLE1BQU1zSixHQUFRcGtCLEVBQVFLLGFBQWEsY0FBZ0JMLEVBQVFLLGFBQWEsZ0JBQWtCLElBQUl3RyxNQUFNLEtBQ3BHZ3dGLEVBQU8vK0QsYUFBYXQ3QixLQUFLZ0MsS0FBTXdCLEVBQVMsTUFDeEM2MkYsRUFBT3o1RCxVQUFVNWdDLEtBQUtnQyxLQUFNNGxCLEVBQUssR0FBSUEsRUFBSyxJQUc5QzVsQixLQUFLSyxRQUFRbTBCLFNBQVM0SixlQUFpQkEsRUFHVCxtQkFBdkIwNUQsR0FBbUNBLEVBQW1CdDJGLEVBQVNxNEIsRUFBV3krRCxFQUFPNzhELElBQVFwN0IsRUFBUXcwQixrQkFBb0IsRUFBSSxFQUFJeDBCLEVBQVF3MEIsa0JBQW1CNzBCLE9BU3ZLczZCLFdBQVksU0FBVXIxQixFQUFZb00sRUFBT3ltRixHQUNyQyxHQUFJem1GLEdBQVMsRUFBRyxDQUNaLE1BQU0ybUYsRUFBV2g0RixLQUFLSyxRQUFRNEUsR0FBWTB2QixVQUUxQyxJQUFLLElBQUk5MkIsRUFBSSxFQUFHNEosRUFBTXV3RixFQUFTMXhGLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzVDLEdBQUl3VCxJQUFVMm1GLEVBQVNuNkYsR0FBR3dULE1BR3RCLE9BRkEybUYsRUFBUy91RixPQUFPcEwsRUFBRyxRQUNlLG1CQUF2Qmk2RixHQUFtQ0EsRUFBbUIsS0FBTXptRixFQUFPLFNBQVUsS0FBTSxFQUFHclIsU0FZakhtK0IsVUFBVyxTQUFVbDVCLEVBQVk2eUYsR0FDN0IsTUFBTXozRixFQUFVTCxLQUFLSyxRQUFRNEUsR0FFN0IsR0FBa0MsbUJBQXZCNnlGLEVBQW1DLENBQzFDLE1BQU1FLEVBQVczM0YsRUFBUXMwQixVQUN6QixJQUFLLElBQUk5MkIsRUFBSSxFQUFHNEosRUFBTXV3RixFQUFTMXhGLE9BQVF6SSxFQUFJNEosRUFBSzVKLElBQzVDaTZGLEVBQW1CLEtBQU1FLEVBQVNuNkYsR0FBR3dULE1BQU8sU0FBVSxLQUFNLEVBQUdyUixNQUl2RUssRUFBUXMwQixVQUFZLEdBQ3BCdDBCLEVBQVF1MEIsV0FBYSxJQXNCN0IsWUFsQndCLElBQWIzMEIsSUFDRkYsRUFBTytDLG1CQUNSdkUsT0FBT0MsZUFBZXVCLEVBQVEsb0JBQXFCLENBQy9DdEIsWUFBWSxFQUNac0UsVUFBVSxFQUNWQyxjQUFjLEVBQ2RsRSxNQUFPLEtBSWZQLE9BQU9DLGVBQWV1QixFQUFPK0Msa0JBQW1CLGNBQWUsQ0FDM0RyRSxZQUFZLEVBQ1pzRSxVQUFVLEVBQ1ZDLGNBQWMsRUFDZGxFLE1BQU8yMUIsS0FJUkEsR0ExVHFELGlCQUFuQjcyQixFQUFPRCxRQUM1Q0MsRUFBT0QsUUFBVWtDLEVBQU9vRCxTQUNwQm5ELEVBQVFELEdBQVEsR0FDaEIsU0FBVXFELEdBQ04sSUFBS0EsRUFBRUQsU0FDSCxNQUFNLElBQUlFLE1BQU0sOENBRXBCLE9BQU9yRCxFQUFRb0QsSUFHdkJwRCxFQUFRRCIsImZpbGUiOiJzdW5lZGl0b3IubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiWEpSMVwiKTtcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9NT0RVTEVTIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcclxuICAgIH1cclxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICh3aW5kb3csIG5vR2xvYmFsKSB7XHJcbiAgICBjb25zdCBkaWFsb2cgPSB7XHJcbiAgICAgICAgbmFtZTogJ2RpYWxvZycsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvbnN0cnVjdG9yXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3QgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgICAgICBjb250ZXh0LmRpYWxvZyA9IHtcclxuICAgICAgICAgICAgICAgIGtpbmQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlTW9kYWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgX2Nsb3NlU2lnbmFsOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqIGRpYWxvZyAqL1xyXG4gICAgICAgICAgICBsZXQgZGlhbG9nX2RpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgZGlhbG9nX2Rpdi5jbGFzc05hbWUgPSAnc2UtZGlhbG9nIHN1bi1lZGl0b3ItY29tbW9uJztcclxuXHJcbiAgICAgICAgICAgIGxldCBkaWFsb2dfYmFjayA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgZGlhbG9nX2JhY2suY2xhc3NOYW1lID0gJ3NlLWRpYWxvZy1iYWNrJztcclxuICAgICAgICAgICAgZGlhbG9nX2JhY2suc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgICAgIGxldCBkaWFsb2dfYXJlYSA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgZGlhbG9nX2FyZWEuY2xhc3NOYW1lID0gJ3NlLWRpYWxvZy1pbm5lcic7XHJcbiAgICAgICAgICAgIGRpYWxvZ19hcmVhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICBkaWFsb2dfZGl2LmFwcGVuZENoaWxkKGRpYWxvZ19iYWNrKTtcclxuICAgICAgICAgICAgZGlhbG9nX2Rpdi5hcHBlbmRDaGlsZChkaWFsb2dfYXJlYSk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmRpYWxvZy5tb2RhbEFyZWEgPSBkaWFsb2dfZGl2O1xyXG4gICAgICAgICAgICBjb250ZXh0LmRpYWxvZy5iYWNrID0gZGlhbG9nX2JhY2s7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZGlhbG9nLm1vZGFsID0gZGlhbG9nX2FyZWE7XHJcblxyXG4gICAgICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgICAgICBjb250ZXh0LmRpYWxvZy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9vbk1vdXNlRG93bl9kaWFsb2cuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZGlhbG9nLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGlja19kaWFsb2cuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvKiogYXBwZW5kIGh0bWwgKi9cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKGRpYWxvZ19kaXYpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgICAgICBkaWFsb2dfZGl2ID0gbnVsbCwgZGlhbG9nX2JhY2sgPSBudWxsLCBkaWFsb2dfYXJlYSA9IG51bGw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IHRvIGNvbnRyb2wgdGhlIGJlaGF2aW9yIG9mIGNsb3NpbmcgdGhlIGRpYWxvZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZSBFdmVudCBvYmplY3RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9vbk1vdXNlRG93bl9kaWFsb2c6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgvc2UtZGlhbG9nLWlubmVyLy50ZXN0KGUudGFyZ2V0LmNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cuX2Nsb3NlU2lnbmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cuX2Nsb3NlU2lnbmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXZlbnQgdG8gY2xvc2UgdGhlIHdpbmRvdyB3aGVuIHRoZSBvdXRzaWRlIGFyZWEgb2YgdGhlIGRpYWxvZyBvciBjbG9zZSBidXR0b24gaXMgY2xpY2tcclxuICAgICAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGUgRXZlbnQgb2JqZWN0XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfb25DbGlja19kaWFsb2c6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgvY2xvc2UvLnRlc3QoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSkgfHwgdGhpcy5jb250ZXh0LmRpYWxvZy5fY2xvc2VTaWduYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGEgRGlhbG9nIHBsdWdpblxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBraW5kIERpYWxvZyBwbHVnaW4gbmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdXBkYXRlIFdoZXRoZXIgaXQgd2lsbCBvcGVuIGZvciB1cGRhdGUgKCdpbWFnZScgPT09IHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uIChraW5kLCB1cGRhdGUpICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGFsRm9ybSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zLmRpYWxvZy5fYmluZENsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLnBsdWdpbnMuZGlhbG9nLl9iaW5kQ2xvc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5fYmluZENsb3NlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5fYmluZENsb3NlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghLzI3Ly50ZXN0KGUua2V5Q29kZSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9kLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLnBsdWdpbnMuZGlhbG9nLl9iaW5kQ2xvc2UpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCA9IHVwZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucG9wdXBEaXNwbGF5ID09PSAnZnVsbCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cubW9kYWxBcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cubW9kYWxBcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpYWxvZy5raW5kID0ga2luZDtcclxuICAgICAgICAgICAgdGhpcy5tb2RhbEZvcm0gPSB0aGlzLmNvbnRleHRba2luZF0ubW9kYWw7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzRWxlbWVudCA9IHRoaXMuY29udGV4dFtraW5kXS5mb2N1c0VsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMucGx1Z2luc1traW5kXS5vbiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5wbHVnaW5zW2tpbmRdLm9uLmNhbGwodGhpcywgdXBkYXRlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cubW9kYWxBcmVhLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLmJhY2suc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cubW9kYWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxGb3JtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZvY3VzRWxlbWVudCkgZm9jdXNFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2JpbmRDbG9zZTogbnVsbCxcclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xvc2UgYSBEaWFsb2cgcGx1Z2luXHJcbiAgICAgICAgICogVGhlIHBsdWdpbidzIFwiaW5pdFwiIG1ldGhvZCBpcyBjYWxsZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2lucy5kaWFsb2cuX2JpbmRDbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5wbHVnaW5zLmRpYWxvZy5fYmluZENsb3NlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuX2JpbmRDbG9zZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGtpbmQgPSB0aGlzLmNvbnRleHQuZGlhbG9nLmtpbmQ7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxGb3JtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cuYmFjay5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLm1vZGFsQXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wbHVnaW5zW2tpbmRdLmluaXQgPT09ICdmdW5jdGlvbicpIHRoaXMucGx1Z2luc1traW5kXS5pbml0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaWFsb2cua2luZCA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGFsRm9ybSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0eXBlb2Ygbm9HbG9iYWwgPT09IHR5cGVvZiB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5TVU5FRElUT1JfTU9EVUxFUykge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnU1VORURJVE9SX01PRFVMRVMnLCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1VORURJVE9SX01PRFVMRVMsICdkaWFsb2cnLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgdmFsdWU6IGRpYWxvZ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkaWFsb2c7XHJcbn0pKTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xyXG4gICAgICAgICAgICBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOlxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF3LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVU5FRElUT1JfTU9EVUxFUyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGdsb2JhbCk7XHJcbiAgICB9XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xyXG4gICAgY29uc3QgZmlsZUJyb3dzZXIgPSB7XHJcbiAgICAgICAgbmFtZTogJ2ZpbGVCcm93c2VyJyxcclxuICAgICAgICBfeG1sSHR0cDogbnVsbCxcclxuICAgICAgICBfbG9hZGluZzogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvbnN0cnVjdG9yXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3QgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGVCcm93c2VyID0ge1xyXG4gICAgICAgICAgICAgICAgX2Nsb3NlU2lnbmFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFyZWE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB0YWdBcmVhOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgYm9keTogbnVsbCxcclxuICAgICAgICAgICAgICAgIGxpc3Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB0YWdFbGVtZW50czogbnVsbCxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnczogW10sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvckhhbmRsZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luOiAnJyxcclxuICAgICAgICAgICAgICAgIGNvbHVtblNpemU6IDRcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBmaWxlQnJvd3NlciAqL1xyXG4gICAgICAgICAgICBsZXQgYnJvd3Nlcl9kaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIGJyb3dzZXJfZGl2LmNsYXNzTmFtZSA9ICdzZS1maWxlLWJyb3dzZXIgc3VuLWVkaXRvci1jb21tb24nO1xyXG5cclxuICAgICAgICAgICAgbGV0IGJhY2sgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIGJhY2suY2xhc3NOYW1lID0gJ3NlLWZpbGUtYnJvd3Nlci1iYWNrJztcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250ZW50ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICBjb250ZW50LmNsYXNzTmFtZSA9ICdzZS1maWxlLWJyb3dzZXItaW5uZXInO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCA9IHRoaXMuc2V0X2Jyb3dzZXIoY29yZSk7XHJcblxyXG4gICAgICAgICAgICBicm93c2VyX2Rpdi5hcHBlbmRDaGlsZChiYWNrKTtcclxuICAgICAgICAgICAgYnJvd3Nlcl9kaXYuYXBwZW5kQ2hpbGQoY29udGVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRpbmcgPSBicm93c2VyX2Rpdi5xdWVyeVNlbGVjdG9yKCcuc2UtbG9hZGluZy1ib3gnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIuYXJlYSA9IGJyb3dzZXJfZGl2O1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGVCcm93c2VyLmhlYWRlciA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcignLnNlLWZpbGUtYnJvd3Nlci1oZWFkZXInKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxlQnJvd3Nlci50aXRsZUFyZWEgPSBjb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZS1maWxlLWJyb3dzZXItdGl0bGUnKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxlQnJvd3Nlci50YWdBcmVhID0gY29udGVudC5xdWVyeVNlbGVjdG9yKCcuc2UtZmlsZS1icm93c2VyLXRhZ3MnKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxlQnJvd3Nlci5ib2R5ID0gY29udGVudC5xdWVyeVNlbGVjdG9yKCcuc2UtZmlsZS1icm93c2VyLWJvZHknKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxlQnJvd3Nlci5saXN0ID0gY29udGVudC5xdWVyeVNlbGVjdG9yKCcuc2UtZmlsZS1icm93c2VyLWxpc3QnKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIudGFnQXJlYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja1RhZy5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxlQnJvd3Nlci5saXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrRmlsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgY29udGVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9vbk1vdXNlRG93bl9icm93c2VyLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGlja19icm93c2VyLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5hcHBlbmRDaGlsZChicm93c2VyX2Rpdik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgICAgIGJyb3dzZXJfZGl2ID0gbnVsbCwgYmFjayA9IG51bGwsIGNvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldF9icm93c2VyOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwic2UtZmlsZS1icm93c2VyLWNvbnRlbnRcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWZpbGUtYnJvd3Nlci1oZWFkZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImNsb3NlXCIgY2xhc3M9XCJzZS1idG4gc2UtZmlsZS1icm93c2VyLWNsb3NlXCIgY2xhc3M9XCJjbG9zZVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMuY2FuY2VsICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS1maWxlLWJyb3dzZXItdGl0bGVcIj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZmlsZS1icm93c2VyLXRhZ3NcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1maWxlLWJyb3dzZXItYm9keVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWxvYWRpbmctYm94IHN1bi1lZGl0b3ItY29tbW9uXCI+PGRpdiBjbGFzcz1cInNlLWxvYWRpbmctZWZmZWN0XCI+PC9kaXY+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZmlsZS1icm93c2VyLWxpc3RcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXZlbnQgdG8gY29udHJvbCB0aGUgYmVoYXZpb3Igb2YgY2xvc2luZyB0aGUgYnJvd3NlclxyXG4gICAgICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZSBFdmVudCBvYmplY3RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9vbk1vdXNlRG93bl9icm93c2VyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoL3NlLWZpbGUtYnJvd3Nlci1pbm5lci8udGVzdChlLnRhcmdldC5jbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXIuX2Nsb3NlU2lnbmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxlQnJvd3Nlci5fY2xvc2VTaWduYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCB0byBjbG9zZSB0aGUgd2luZG93IHdoZW4gdGhlIG91dHNpZGUgYXJlYSBvZiB0aGUgYnJvd3NlciBvciBjbG9zZSBidXR0b24gaXMgY2xpY2tcclxuICAgICAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGUgRXZlbnQgb2JqZWN0XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfb25DbGlja19icm93c2VyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKC9jbG9zZS8udGVzdChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpKSB8fCB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXIuX2Nsb3NlU2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXIuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGEgZmlsZSBicm93c2VyIHBsdWdpblxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5OYW1lIFBsdWdpbiBuYW1lIHVzaW5nIHRoZSBmaWxlIGJyb3dzZXJcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHNlbGVjdG9ySGFuZGxlciBXaGVuIHRoZSBmdW5jdGlvbiBjb21lcyBhcyBhbiBhcmd1bWVudCB2YWx1ZSwgaXQgc3Vic3RpdHV0ZXMgXCJjb250ZXh0LnNlbGVjdG9ySGFuZGxlclwiLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCBzZWxlY3RvckhhbmRsZXIpICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXIuX2JpbmRDbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLl9iaW5kQ2xvc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLl9iaW5kQ2xvc2UgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXIuX2JpbmRDbG9zZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIS8yNy8udGVzdChlLmtleUNvZGUpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXIuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9kLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXIuX2JpbmRDbG9zZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWxlQnJvd3NlckNvbnRleHQgPSB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXI7XHJcbiAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5jb250ZXh0UGx1Z2luID0gcGx1Z2luTmFtZTtcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LnNlbGVjdG9ySGFuZGxlciA9IHNlbGVjdG9ySGFuZGxlcjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbkNvbnRleHQgPSB0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV07XHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3RDbGFzc05hbWUgPSBwbHVnaW5Db250ZXh0Lmxpc3RDbGFzcztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnV0aWwuaGFzQ2xhc3MoZmlsZUJyb3dzZXJDb250ZXh0Lmxpc3QsIGxpc3RDbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQubGlzdC5jbGFzc05hbWUgPSAnc2UtZmlsZS1icm93c2VyLWxpc3QgJyArIGxpc3RDbGFzc05hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucG9wdXBEaXNwbGF5ID09PSAnZnVsbCcpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5hcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5hcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LnRpdGxlQXJlYS50ZXh0Q29udGVudCA9IHBsdWdpbkNvbnRleHQudGl0bGU7XHJcbiAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5hcmVhLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLl9kcmF3RmlsZUxpc3QuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0udXJsLCB0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0uaGVhZGVyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZENsb3NlOiBudWxsLFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZSBhIGZpbGVCcm93c2VyIHBsdWdpblxyXG4gICAgICAgICAqIFRoZSBwbHVnaW4ncyBcImluaXRcIiBtZXRob2QgaXMgY2FsbGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVCcm93c2VyUGx1Z2luID0gdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbGVCcm93c2VyUGx1Z2luLl94bWxIdHRwKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlclBsdWdpbi5feG1sSHR0cC5hYm9ydCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsZUJyb3dzZXJQbHVnaW4uX2JpbmRDbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZmlsZUJyb3dzZXJQbHVnaW4uX2JpbmRDbG9zZSk7XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlclBsdWdpbi5fYmluZENsb3NlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZUJyb3dzZXJDb250ZXh0ID0gdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyO1xyXG4gICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuYXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuc2VsZWN0b3JIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LnNlbGVjdGVkVGFncyA9IFtdO1xyXG4gICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuaXRlbXMgPSBbXTtcclxuICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0Lmxpc3QuaW5uZXJIVE1MID0gZmlsZUJyb3dzZXJDb250ZXh0LnRhZ0FyZWEuaW5uZXJIVE1MID0gZmlsZUJyb3dzZXJDb250ZXh0LnRpdGxlQXJlYS50ZXh0Q29udGVudCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnBsdWdpbnNbZmlsZUJyb3dzZXJDb250ZXh0LmNvbnRleHRQbHVnaW5dLmluaXQgPT09ICdmdW5jdGlvbicpIHRoaXMucGx1Z2luc1tmaWxlQnJvd3NlckNvbnRleHQuY29udGV4dFBsdWdpbl0uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQuY29udGV4dFBsdWdpbiA9ICcnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IGZpbGUgYnJvd3NlciBsb2FkaW5nIGJveFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dCcm93c2VyTG9hZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZSBmaWxlIGJyb3dzZXIgbG9hZGluZyBib3hcclxuICAgICAgICAgKi9cclxuICAgICAgICBjbG9zZUJyb3dzZXJMb2FkaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZHJhd0ZpbGVMaXN0OiBmdW5jdGlvbiAodXJsLCBicm93c2VySGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVCcm93c2VyUGx1Z2luID0gdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgeG1sSHR0cCA9IGZpbGVCcm93c2VyUGx1Z2luLl94bWxIdHRwID0gdGhpcy51dGlsLmdldFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHhtbEh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZmlsZUJyb3dzZXJQbHVnaW4uX2NhbGxCYWNrR2V0LmJpbmQodGhpcywgeG1sSHR0cCk7XHJcbiAgICAgICAgICAgIHhtbEh0dHAub3BlbignZ2V0JywgdXJsLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYoYnJvd3NlckhlYWRlciAhPT0gbnVsbCAmJiB0eXBlb2YgYnJvd3NlckhlYWRlciA9PT0gJ29iamVjdCcgJiYgdGhpcy5fdy5PYmplY3Qua2V5cyhicm93c2VySGVhZGVyKS5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQga2V5IGluIGJyb3dzZXJIZWFkZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcihrZXksIGJyb3dzZXJIZWFkZXJba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeG1sSHR0cC5zZW5kKG51bGwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLnNob3dCcm93c2VyTG9hZGluZygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jYWxsQmFja0dldDogZnVuY3Rpb24gKHhtbEh0dHApIHtcclxuICAgICAgICAgICAgaWYgKHhtbEh0dHAucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLl94bWxIdHRwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh4bWxIdHRwLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZSh4bWxIdHRwLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMucmVzdWx0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5fZHJhd0xpc3RJdGVtLmNhbGwodGhpcywgcmVzLnJlc3VsdCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzLm51bGxNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXIubGlzdC5pbm5lckhUTUwgPSByZXMubnVsbE1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmZpbGVCcm93c2VyLmRyYXdMaXN0LmZhaWxdIGNhdXNlIDogXCInICsgZS5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLmNsb3NlQnJvd3NlckxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGVCcm93c2VyLmJvZHkuc3R5bGUubWF4SGVpZ2h0ID0gKHRoaXMuX3cuaW5uZXJIZWlnaHQgLSB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXIuaGVhZGVyLm9mZnNldEhlaWdodCAtIDUwKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZXhjZXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVCcm93c2VyLmNsb3NlQnJvd3NlckxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeG1sSHR0cC5zdGF0dXMgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gIXhtbEh0dHAucmVzcG9uc2VUZXh0ID8geG1sSHR0cCA6IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSAnW1NVTkVESVRPUi5maWxlQnJvd3Nlci5nZXQuc2VydmVyRXhjZXB0aW9uXSBzdGF0dXM6ICcgKyB4bWxIdHRwLnN0YXR1cyArICcsIHJlc3BvbnNlOiAnICsgKHJlcy5lcnJvck1lc3NhZ2UgfHwgeG1sSHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9kcmF3TGlzdEl0ZW06IGZ1bmN0aW9uIChpdGVtcywgdXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVCcm93c2VyQ29udGV4dCA9IHRoaXMuY29udGV4dC5maWxlQnJvd3NlcjtcclxuICAgICAgICAgICAgY29uc3QgcGx1Z2luQ29udGV4dCA9IHRoaXMuY29udGV4dFtmaWxlQnJvd3NlckNvbnRleHQuY29udGV4dFBsdWdpbl07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBfdGFncyA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBpdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtblNpemUgPSBwbHVnaW5Db250ZXh0LmNvbHVtblNpemUgfHwgZmlsZUJyb3dzZXJDb250ZXh0LmNvbHVtblNpemU7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0U2l6ZSA9IGNvbHVtblNpemUgPD0gMSA/IDEgOiAoTWF0aC5yb3VuZChsZW4vY29sdW1uU2l6ZSkgfHwgMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRyYXdJdGVtSGFuZGxlciA9IHBsdWdpbkNvbnRleHQuaXRlbVRlbXBsYXRlSGFuZGxlcjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCB0YWdzSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBsZXQgbGlzdEhUTUwgPSAnPGRpdiBjbGFzcz1cInNlLWZpbGUtaXRlbS1jb2x1bW5cIj4nO1xyXG4gICAgICAgICAgICBsZXQgY29sdW1ucyA9IDE7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpdGVtLCB0YWdzOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIHRhZ3MgPSAhaXRlbS50YWcgPyBbXSA6IHR5cGVvZiBpdGVtLnRhZyA9PT0gJ3N0cmluZycgPyBpdGVtLnRhZy5zcGxpdCgnLCcpIDogaXRlbS50YWc7XHJcbiAgICAgICAgICAgICAgICB0YWdzID0gaXRlbS50YWcgPSB0YWdzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdi50cmltKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgbGlzdEhUTUwgKz0gZHJhd0l0ZW1IYW5kbGVyKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgoaSArIDEpICUgc3BsaXRTaXplID09PSAwICYmIGNvbHVtbnMgPCBjb2x1bW5TaXplICYmIChpICsgMSkgPCBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zKys7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdEhUTUwgKz0gJzwvZGl2PjxkaXYgY2xhc3M9XCJzZS1maWxlLWl0ZW0tY29sdW1uXCI+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZSAmJiB0YWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0ID0gMCwgdExlbiA9IHRhZ3MubGVuZ3RoLCB0YWc7IHQgPCB0TGVuOyB0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnID0gdGFnc1t0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAmJiBfdGFncy5pbmRleE9mKHRhZykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGFncy5wdXNoKHRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzSFRNTCArPSAnPGEgdGl0bGU9XCInICsgdGFnICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgdGFnICsgJ1wiPicgKyB0YWcgKyAnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGlzdEhUTUwgKz0gJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQubGlzdC5pbm5lckhUTUwgPSBsaXN0SFRNTDtcclxuXHJcbiAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0LnRhZ0FyZWEuaW5uZXJIVE1MID0gdGFnc0hUTUw7XHJcbiAgICAgICAgICAgICAgICBmaWxlQnJvd3NlckNvbnRleHQudGFnRWxlbWVudHMgPSBmaWxlQnJvd3NlckNvbnRleHQudGFnQXJlYS5xdWVyeVNlbGVjdG9yQWxsKCdBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrVGFnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnV0aWwuaXNBbmNob3IodGFyZ2V0KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGFnTmFtZSA9IHRhcmdldC50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgY29uc3QgZmlsZUJyb3dzZXJQbHVnaW4gPSB0aGlzLnBsdWdpbnMuZmlsZUJyb3dzZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVCcm93c2VyQ29udGV4dCA9IHRoaXMuY29udGV4dC5maWxlQnJvd3NlcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdFRhZyA9IGZpbGVCcm93c2VyQ29udGV4dC50YWdBcmVhLnF1ZXJ5U2VsZWN0b3IoJ2FbdGl0bGU9XCInICsgdGFnTmFtZSArICdcIl0nKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUYWdzID0gZmlsZUJyb3dzZXJDb250ZXh0LnNlbGVjdGVkVGFncztcclxuICAgICAgICAgICAgY29uc3Qgc1RhZ0luZGV4ID0gc2VsZWN0ZWRUYWdzLmluZGV4T2YodGFnTmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc1RhZ0luZGV4ID4gLTEpe1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWdzLnNwbGljZShzVGFnSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHNlbGVjdFRhZywgJ29uJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFRhZ3MucHVzaCh0YWdOYW1lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhzZWxlY3RUYWcsICdvbicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaWxlQnJvd3NlclBsdWdpbi5fZHJhd0xpc3RJdGVtLmNhbGwodGhpcyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFncy5sZW5ndGggPT09IDAgP1xyXG4gICAgICAgICAgICAgICAgZmlsZUJyb3dzZXJDb250ZXh0Lml0ZW1zIDpcclxuICAgICAgICAgICAgICAgIGZpbGVCcm93c2VyQ29udGV4dC5pdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS50YWcuc29tZShmdW5jdGlvbiAodGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZFRhZ3MuaW5kZXhPZih0YWcpID4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KSwgZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uQ2xpY2tGaWxlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWxlQnJvd3NlckNvbnRleHQgPSB0aGlzLmNvbnRleHQuZmlsZUJyb3dzZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3RFbCA9IGZpbGVCcm93c2VyQ29udGV4dC5saXN0O1xyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGxldCBjb21tYW5kID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IGxpc3RFbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKGxpc3RFbCAhPT0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSAoZmlsZUJyb3dzZXJDb250ZXh0LnNlbGVjdG9ySGFuZGxlciB8fCB0aGlzLmNvbnRleHRbZmlsZUJyb3dzZXJDb250ZXh0LmNvbnRleHRQbHVnaW5dLnNlbGVjdG9ySGFuZGxlcik7XHJcbiAgICAgICAgICAgIGhhbmRsZXIodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuX19zZV9faW1nX25hbWUnKS50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5jbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBub0dsb2JhbCA9PT0gdHlwZW9mIHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICghd2luZG93LlNVTkVESVRPUl9NT0RVTEVTKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdTVU5FRElUT1JfTU9EVUxFUycsIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVU5FRElUT1JfTU9EVUxFUywgJ2ZpbGVCcm93c2VyJywge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiBmaWxlQnJvd3NlclxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmaWxlQnJvd3NlcjtcclxufSkpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBUaXZpZSBvbiAxMy0wNy0yMDE1LlxuICovXG5cbmZ1bmN0aW9uIGdldERlZmF1bHRPcHRzIChzaW1wbGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBvbWl0RXh0cmFXTEluQ29kZUJsb2Nrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnT21pdCB0aGUgZGVmYXVsdCBleHRyYSB3aGl0ZWxpbmUgYWRkZWQgdG8gY29kZSBibG9ja3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBub0hlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBnZW5lcmF0ZWQgaGVhZGVyIGlkJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgcHJlZml4SGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0FkZCBhIHByZWZpeCB0byB0aGUgZ2VuZXJhdGVkIGhlYWRlciBpZHMuIFBhc3NpbmcgYSBzdHJpbmcgd2lsbCBwcmVmaXggdGhhdCBzdHJpbmcgdG8gdGhlIGhlYWRlciBpZC4gU2V0dGluZyB0byB0cnVlIHdpbGwgYWRkIGEgZ2VuZXJpYyBcXCdzZWN0aW9uLVxcJyBwcmVmaXgnLFxuICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9LFxuICAgIHJhd1ByZWZpeEhlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdTZXR0aW5nIHRoaXMgb3B0aW9uIHRvIHRydWUgd2lsbCBwcmV2ZW50IHNob3dkb3duIGZyb20gbW9kaWZ5aW5nIHRoZSBwcmVmaXguIFRoaXMgbWlnaHQgcmVzdWx0IGluIG1hbGZvcm1lZCBJRHMgKGlmLCBmb3IgaW5zdGFuY2UsIHRoZSBcIiBjaGFyIGlzIHVzZWQgaW4gdGhlIHByZWZpeCknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaENvbXBhdGlibGVIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnR2VuZXJhdGUgaGVhZGVyIGlkcyBjb21wYXRpYmxlIHdpdGggZ2l0aHViIHN0eWxlIChzcGFjZXMgYXJlIHJlcGxhY2VkIHdpdGggZGFzaGVzLCBhIGJ1bmNoIG9mIG5vbiBhbHBoYW51bWVyaWMgY2hhcnMgYXJlIHJlbW92ZWQpJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgcmF3SGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1JlbW92ZSBvbmx5IHNwYWNlcywgXFwnIGFuZCBcIiBmcm9tIGdlbmVyYXRlZCBoZWFkZXIgaWRzIChpbmNsdWRpbmcgcHJlZml4ZXMpLCByZXBsYWNpbmcgdGhlbSB3aXRoIGRhc2hlcyAoLSkuIFdBUk5JTkc6IFRoaXMgbWlnaHQgcmVzdWx0IGluIG1hbGZvcm1lZCBpZHMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBoZWFkZXJMZXZlbFN0YXJ0OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUaGUgaGVhZGVyIGJsb2NrcyBsZXZlbCBzdGFydCcsXG4gICAgICB0eXBlOiAnaW50ZWdlcidcbiAgICB9LFxuICAgIHBhcnNlSW1nRGltZW5zaW9uczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgaW1hZ2UgZGltZW5zaW9uIHBhcnNpbmcnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzaW1wbGlmaWVkQXV0b0xpbms6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIEdGTSBhdXRvbGluayBzdHlsZScsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0V4Y2x1ZGVzIHRyYWlsaW5nIHB1bmN0dWF0aW9uIGZyb20gbGlua3MgZ2VuZXJhdGVkIHdpdGggYXV0b0xpbmtpbmcnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBsaXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQYXJzZSBtaWR3b3JkIHVuZGVyc2NvcmVzIGFzIGxpdGVyYWwgdW5kZXJzY29yZXMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBsaXRlcmFsTWlkV29yZEFzdGVyaXNrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUGFyc2UgbWlkd29yZCBhc3Rlcmlza3MgYXMgbGl0ZXJhbCBhc3Rlcmlza3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzdHJpa2V0aHJvdWdoOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBzdHJpa2V0aHJvdWdoIHN1cHBvcnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICB0YWJsZXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIHRhYmxlcyBzdXBwb3J0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgdGFibGVzSGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0FkZCBhbiBpZCB0byB0YWJsZSBoZWFkZXJzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZ2hDb2RlQmxvY2tzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIEdGTSBmZW5jZWQgY29kZSBibG9ja3Mgc3VwcG9ydCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHRhc2tsaXN0czoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgR0ZNIHRhc2tsaXN0IHN1cHBvcnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzbW9vdGhMaXZlUHJldmlldzoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUHJldmVudHMgd2VpcmQgZWZmZWN0cyBpbiBsaXZlIHByZXZpZXdzIGR1ZSB0byBpbmNvbXBsZXRlIGlucHV0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgc21hcnRJbmRlbnRhdGlvbkZpeDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHJpZXMgdG8gc21hcnRseSBmaXggaW5kZW50YXRpb24gaW4gZXM2IHN0cmluZ3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBkaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0Rpc2FibGVzIHRoZSByZXF1aXJlbWVudCBvZiBpbmRlbnRpbmcgbmVzdGVkIHN1Ymxpc3RzIGJ5IDQgc3BhY2VzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgc2ltcGxlTGluZUJyZWFrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUGFyc2VzIHNpbXBsZSBsaW5lIGJyZWFrcyBhcyA8YnI+IChHRk0gU3R5bGUpJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgcmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ01ha2VzIGFkZGluZyBhIHNwYWNlIGJldHdlZW4gYCNgIGFuZCB0aGUgaGVhZGVyIHRleHQgbWFuZGF0b3J5IChHRk0gU3R5bGUpJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZ2hNZW50aW9uczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5hYmxlcyBnaXRodWIgQG1lbnRpb25zJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZ2hNZW50aW9uc0xpbms6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS97dX0nLFxuICAgICAgZGVzY3JpYmU6ICdDaGFuZ2VzIHRoZSBsaW5rIGdlbmVyYXRlZCBieSBAbWVudGlvbnMuIE9ubHkgYXBwbGllcyBpZiBnaE1lbnRpb25zIG9wdGlvbiBpcyBlbmFibGVkLicsXG4gICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgZW5jb2RlRW1haWxzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgICBkZXNjcmliZTogJ0VuY29kZSBlLW1haWwgYWRkcmVzc2VzIHRocm91Z2ggdGhlIHVzZSBvZiBDaGFyYWN0ZXIgRW50aXRpZXMsIHRyYW5zZm9ybWluZyBBU0NJSSBlLW1haWwgYWRkcmVzc2VzIGludG8gaXRzIGVxdWl2YWxlbnQgZGVjaW1hbCBlbnRpdGllcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIG9wZW5MaW5rc0luTmV3V2luZG93OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdPcGVuIGFsbCBsaW5rcyBpbiBuZXcgd2luZG93cycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGJhY2tzbGFzaEVzY2FwZXNIVE1MVGFnczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnU3VwcG9ydCBmb3IgSFRNTCBUYWcgZXNjYXBpbmcuIGV4OiBcXDxkaXY+Zm9vXFw8L2Rpdj4nLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBlbW9qaToge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5hYmxlIGVtb2ppIHN1cHBvcnQuIEV4OiBgdGhpcyBpcyBhIDpzbWlsZTogZW1vamlgJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGUgc3VwcG9ydCBmb3IgdW5kZXJsaW5lLiBTeW50YXggaXMgZG91YmxlIG9yIHRyaXBsZSB1bmRlcnNjb3JlczogYF9fdW5kZXJsaW5lIHdvcmRfX2AuIFdpdGggdGhpcyBvcHRpb24gZW5hYmxlZCwgdW5kZXJzY29yZXMgbm8gbG9uZ2VyIHBhcnNlcyBpbnRvIGA8ZW0+YCBhbmQgYDxzdHJvbmc+YCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGVsbGlwc2lzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgICBkZXNjcmliZTogJ1JlcGxhY2VzIHRocmVlIGRvdHMgd2l0aCB0aGUgZWxsaXBzaXMgdW5pY29kZSBjaGFyYWN0ZXInLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBjb21wbGV0ZUhUTUxEb2N1bWVudDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnT3V0cHV0cyBhIGNvbXBsZXRlIGh0bWwgZG9jdW1lbnQsIGluY2x1ZGluZyBgPGh0bWw+YCwgYDxoZWFkPmAgYW5kIGA8Ym9keT5gIHRhZ3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBtZXRhZGF0YToge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5hYmxlIHN1cHBvcnQgZm9yIGRvY3VtZW50IG1ldGFkYXRhIChkZWZpbmVkIGF0IHRoZSB0b3Agb2YgdGhlIGRvY3VtZW50IGJldHdlZW4gYMKrwqvCq2AgYW5kIGDCu8K7wrtgIG9yIGJldHdlZW4gYC0tLWAgYW5kIGAtLS1gKS4nLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzcGxpdEFkamFjZW50QmxvY2txdW90ZXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1NwbGl0IGFkamFjZW50IGJsb2NrcXVvdGUgYmxvY2tzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH1cbiAgfTtcbiAgaWYgKHNpbXBsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkZWZhdWx0T3B0aW9ucykpO1xuICB9XG4gIHZhciByZXQgPSB7fTtcbiAgZm9yICh2YXIgb3B0IGluIGRlZmF1bHRPcHRpb25zKSB7XG4gICAgaWYgKGRlZmF1bHRPcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgIHJldFtvcHRdID0gZGVmYXVsdE9wdGlvbnNbb3B0XS5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGFsbE9wdGlvbnNPbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIG9wdGlvbnMgPSBnZXREZWZhdWx0T3B0cyh0cnVlKSxcbiAgICAgIHJldCA9IHt9O1xuICBmb3IgKHZhciBvcHQgaW4gb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgIHJldFtvcHRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBUaXZpZSBvbiAwNi0wMS0yMDE1LlxuICovXG5cbi8vIFByaXZhdGUgcHJvcGVydGllc1xudmFyIHNob3dkb3duID0ge30sXG4gICAgcGFyc2VycyA9IHt9LFxuICAgIGV4dGVuc2lvbnMgPSB7fSxcbiAgICBnbG9iYWxPcHRpb25zID0gZ2V0RGVmYXVsdE9wdHModHJ1ZSksXG4gICAgc2V0Rmxhdm9yID0gJ3ZhbmlsbGEnLFxuICAgIGZsYXZvciA9IHtcbiAgICAgIGdpdGh1Yjoge1xuICAgICAgICBvbWl0RXh0cmFXTEluQ29kZUJsb2NrczogICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHNpbXBsaWZpZWRBdXRvTGluazogICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZXhjbHVkZVRyYWlsaW5nUHVuY3R1YXRpb25Gcm9tVVJMczogICB0cnVlLFxuICAgICAgICBsaXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzOiAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHN0cmlrZXRocm91Z2g6ICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFibGVzOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICB0YWJsZXNIZWFkZXJJZDogICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGdoQ29kZUJsb2NrczogICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFza2xpc3RzOiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBkaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHM6IHRydWUsXG4gICAgICAgIHNpbXBsZUxpbmVCcmVha3M6ICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgcmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQ6ICAgICAgICB0cnVlLFxuICAgICAgICBnaENvbXBhdGlibGVIZWFkZXJJZDogICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGdoTWVudGlvbnM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzOiAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBlbW9qaTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHNwbGl0QWRqYWNlbnRCbG9ja3F1b3RlczogICAgICAgICAgICAgdHJ1ZVxuICAgICAgfSxcbiAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgIG5vSGVhZGVySWQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hDb2RlQmxvY2tzOiAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgfSxcbiAgICAgIGdob3N0OiB7XG4gICAgICAgIG9taXRFeHRyYVdMSW5Db2RlQmxvY2tzOiAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgcGFyc2VJbWdEaW1lbnNpb25zOiAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaW1wbGlmaWVkQXV0b0xpbms6ICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHM6ICAgdHJ1ZSxcbiAgICAgICAgbGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3JlczogICAgICAgICAgICB0cnVlLFxuICAgICAgICBzdHJpa2V0aHJvdWdoOiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhYmxlczogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFibGVzSGVhZGVySWQ6ICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBnaENvZGVCbG9ja3M6ICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhc2tsaXN0czogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc21vb3RoTGl2ZVByZXZpZXc6ICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaW1wbGVMaW5lQnJlYWtzOiAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHJlcXVpcmVTcGFjZUJlZm9yZUhlYWRpbmdUZXh0OiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hNZW50aW9uczogICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgZW5jb2RlRW1haWxzOiAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICB9LFxuICAgICAgdmFuaWxsYTogZ2V0RGVmYXVsdE9wdHModHJ1ZSksXG4gICAgICBhbGxPbjogYWxsT3B0aW9uc09uKClcbiAgICB9O1xuXG4vKipcbiAqIGhlbHBlciBuYW1lc3BhY2VcbiAqIEB0eXBlIHt7fX1cbiAqL1xuc2hvd2Rvd24uaGVscGVyID0ge307XG5cbi8qKlxuICogVE9ETyBMRUdBQ1kgU1VQUE9SVCBDT0RFXG4gKiBAdHlwZSB7e319XG4gKi9cbnNob3dkb3duLmV4dGVuc2lvbnMgPSB7fTtcblxuLyoqXG4gKiBTZXQgYSBnbG9iYWwgb3B0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJucyB7c2hvd2Rvd259XG4gKi9cbnNob3dkb3duLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ2xvYmFsT3B0aW9uc1trZXldID0gdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXQgYSBnbG9iYWwgb3B0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuc2hvd2Rvd24uZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnbG9iYWxPcHRpb25zW2tleV07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZ2xvYmFsIG9wdGlvbnNcbiAqIEBzdGF0aWNcbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuc2hvd2Rvd24uZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ2xvYmFsT3B0aW9ucztcbn07XG5cbi8qKlxuICogUmVzZXQgZ2xvYmFsIG9wdGlvbnMgdG8gdGhlIGRlZmF1bHQgdmFsdWVzXG4gKiBAc3RhdGljXG4gKi9cbnNob3dkb3duLnJlc2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnbG9iYWxPcHRpb25zID0gZ2V0RGVmYXVsdE9wdHModHJ1ZSk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgZmxhdm9yIHNob3dkb3duIHNob3VsZCB1c2UgYXMgZGVmYXVsdFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuc2hvd2Rvd24uc2V0Rmxhdm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWZsYXZvci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHRocm93IEVycm9yKG5hbWUgKyAnIGZsYXZvciB3YXMgbm90IGZvdW5kJyk7XG4gIH1cbiAgc2hvd2Rvd24ucmVzZXRPcHRpb25zKCk7XG4gIHZhciBwcmVzZXQgPSBmbGF2b3JbbmFtZV07XG4gIHNldEZsYXZvciA9IG5hbWU7XG4gIGZvciAodmFyIG9wdGlvbiBpbiBwcmVzZXQpIHtcbiAgICBpZiAocHJlc2V0Lmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgIGdsb2JhbE9wdGlvbnNbb3B0aW9uXSA9IHByZXNldFtvcHRpb25dO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBzZXQgZmxhdm9yXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5nZXRGbGF2b3IgPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHNldEZsYXZvcjtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBvcHRpb25zIG9mIGEgc3BlY2lmaWVkIGZsYXZvci4gUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlIGZsYXZvciB3YXMgbm90IGZvdW5kXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmbGF2b3JcbiAqIEByZXR1cm5zIHt7fXx1bmRlZmluZWR9XG4gKi9cbnNob3dkb3duLmdldEZsYXZvck9wdGlvbnMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChmbGF2b3IuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gZmxhdm9yW25hbWVdO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBvcHRpb25zXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzaW1wbGU9dHJ1ZV1cbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuc2hvd2Rvd24uZ2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAoc2ltcGxlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdldERlZmF1bHRPcHRzKHNpbXBsZSk7XG59O1xuXG4vKipcbiAqIEdldCBvciBzZXQgYSBzdWJQYXJzZXJcbiAqXG4gKiBzdWJQYXJzZXIobmFtZSkgICAgICAgLSBHZXQgYSByZWdpc3RlcmVkIHN1YlBhcnNlclxuICogc3ViUGFyc2VyKG5hbWUsIGZ1bmMpIC0gUmVnaXN0ZXIgYSBzdWJQYXJzZXJcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZnVuY11cbiAqIEByZXR1cm5zIHsqfVxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIgPSBmdW5jdGlvbiAobmFtZSwgZnVuYykge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcobmFtZSkpIHtcbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZXJzW25hbWVdID0gZnVuYztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcnNlcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlcnNbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignU3ViUGFyc2VyIG5hbWVkICcgKyBuYW1lICsgJyBub3QgcmVnaXN0ZXJlZCEnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogR2V0cyBvciByZWdpc3RlcnMgYW4gZXh0ZW5zaW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtvYmplY3R8b2JqZWN0W118ZnVuY3Rpb249fSBleHRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5zaG93ZG93bi5leHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSwgZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhuYW1lKSkge1xuICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gXFwnbmFtZVxcJyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBuYW1lID0gc2hvd2Rvd24uaGVscGVyLnN0ZEV4dE5hbWUobmFtZSk7XG5cbiAgLy8gR2V0dGVyXG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0KSkge1xuICAgIGlmICghZXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0V4dGVuc2lvbiBuYW1lZCAnICsgbmFtZSArICcgaXMgbm90IHJlZ2lzdGVyZWQhJyk7XG4gICAgfVxuICAgIHJldHVybiBleHRlbnNpb25zW25hbWVdO1xuXG4gICAgLy8gU2V0dGVyXG4gIH0gZWxzZSB7XG4gICAgLy8gRXhwYW5kIGV4dGVuc2lvbiBpZiBpdCdzIHdyYXBwZWQgaW4gYSBmdW5jdGlvblxuICAgIGlmICh0eXBlb2YgZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBleHQgPSBleHQoKTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgZXh0ZW5zaW9uIGlzIGFuIGFycmF5XG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHQpKSB7XG4gICAgICBleHQgPSBbZXh0XTtcbiAgICB9XG5cbiAgICB2YXIgdmFsaWRFeHRlbnNpb24gPSB2YWxpZGF0ZShleHQsIG5hbWUpO1xuXG4gICAgaWYgKHZhbGlkRXh0ZW5zaW9uLnZhbGlkKSB7XG4gICAgICBleHRlbnNpb25zW25hbWVdID0gZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcih2YWxpZEV4dGVuc2lvbi5lcnJvcik7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEdldHMgYWxsIGV4dGVuc2lvbnMgcmVnaXN0ZXJlZFxuICogQHJldHVybnMge3t9fVxuICovXG5zaG93ZG93bi5nZXRBbGxFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBleHRlbnNpb25zO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5zaG93ZG93bi5yZW1vdmVFeHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGRlbGV0ZSBleHRlbnNpb25zW25hbWVdO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBleHRlbnNpb25zXG4gKi9cbnNob3dkb3duLnJlc2V0RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBleHRlbnNpb25zID0ge307XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGV4dGVuc2lvblxuICogQHBhcmFtIHthcnJheX0gZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge3t2YWxpZDogYm9vbGVhbiwgZXJyb3I6IHN0cmluZ319XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlIChleHRlbnNpb24sIG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBlcnJNc2cgPSAobmFtZSkgPyAnRXJyb3IgaW4gJyArIG5hbWUgKyAnIGV4dGVuc2lvbi0+JyA6ICdFcnJvciBpbiB1bm5hbWVkIGV4dGVuc2lvbicsXG4gICAgICByZXQgPSB7XG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgICBlcnJvcjogJydcbiAgICAgIH07XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHRlbnNpb24pKSB7XG4gICAgZXh0ZW5zaW9uID0gW2V4dGVuc2lvbl07XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dGVuc2lvbi5sZW5ndGg7ICsraSkge1xuICAgIHZhciBiYXNlTXNnID0gZXJyTXNnICsgJyBzdWItZXh0ZW5zaW9uICcgKyBpICsgJzogJyxcbiAgICAgICAgZXh0ID0gZXh0ZW5zaW9uW2ldO1xuICAgIGlmICh0eXBlb2YgZXh0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ211c3QgYmUgYW4gb2JqZWN0LCBidXQgJyArIHR5cGVvZiBleHQgKyAnIGdpdmVuJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoZXh0LnR5cGUpKSB7XG4gICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAncHJvcGVydHkgXCJ0eXBlXCIgbXVzdCBiZSBhIHN0cmluZywgYnV0ICcgKyB0eXBlb2YgZXh0LnR5cGUgKyAnIGdpdmVuJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSBleHQudHlwZSA9IGV4dC50eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBub3JtYWxpemUgZXh0ZW5zaW9uIHR5cGVcbiAgICBpZiAodHlwZSA9PT0gJ2xhbmd1YWdlJykge1xuICAgICAgdHlwZSA9IGV4dC50eXBlID0gJ2xhbmcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnaHRtbCcpIHtcbiAgICAgIHR5cGUgPSBleHQudHlwZSA9ICdvdXRwdXQnO1xuICAgIH1cblxuICAgIGlmICh0eXBlICE9PSAnbGFuZycgJiYgdHlwZSAhPT0gJ291dHB1dCcgJiYgdHlwZSAhPT0gJ2xpc3RlbmVyJykge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ3R5cGUgJyArIHR5cGUgKyAnIGlzIG5vdCByZWNvZ25pemVkLiBWYWxpZCB2YWx1ZXM6IFwibGFuZy9sYW5ndWFnZVwiLCBcIm91dHB1dC9odG1sXCIgb3IgXCJsaXN0ZW5lclwiJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdsaXN0ZW5lcicpIHtcbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0Lmxpc3RlbmVycykpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnLiBFeHRlbnNpb25zIG9mIHR5cGUgXCJsaXN0ZW5lclwiIG11c3QgaGF2ZSBhIHByb3BlcnR5IGNhbGxlZCBcImxpc3RlbmVyc1wiJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChleHQuZmlsdGVyKSAmJiBzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0LnJlZ2V4KSkge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArIHR5cGUgKyAnIGV4dGVuc2lvbnMgbXVzdCBkZWZpbmUgZWl0aGVyIGEgXCJyZWdleFwiIHByb3BlcnR5IG9yIGEgXCJmaWx0ZXJcIiBtZXRob2QnO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHQubGlzdGVuZXJzKSB7XG4gICAgICBpZiAodHlwZW9mIGV4dC5saXN0ZW5lcnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wibGlzdGVuZXJzXCIgcHJvcGVydHkgbXVzdCBiZSBhbiBvYmplY3QgYnV0ICcgKyB0eXBlb2YgZXh0Lmxpc3RlbmVycyArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbG4gaW4gZXh0Lmxpc3RlbmVycykge1xuICAgICAgICBpZiAoZXh0Lmxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShsbikpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGV4dC5saXN0ZW5lcnNbbG5dICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJsaXN0ZW5lcnNcIiBwcm9wZXJ0eSBtdXN0IGJlIGFuIGhhc2ggb2YgW2V2ZW50IG5hbWVdOiBbY2FsbGJhY2tdLiBsaXN0ZW5lcnMuJyArIGxuICtcbiAgICAgICAgICAgICAgJyBtdXN0IGJlIGEgZnVuY3Rpb24gYnV0ICcgKyB0eXBlb2YgZXh0Lmxpc3RlbmVyc1tsbl0gKyAnIGdpdmVuJztcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4dC5maWx0ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZXh0LmZpbHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdcImZpbHRlclwiIG11c3QgYmUgYSBmdW5jdGlvbiwgYnV0ICcgKyB0eXBlb2YgZXh0LmZpbHRlciArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXh0LnJlZ2V4KSB7XG4gICAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKGV4dC5yZWdleCkpIHtcbiAgICAgICAgZXh0LnJlZ2V4ID0gbmV3IFJlZ0V4cChleHQucmVnZXgsICdnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIShleHQucmVnZXggaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wicmVnZXhcIiBwcm9wZXJ0eSBtdXN0IGVpdGhlciBiZSBhIHN0cmluZyBvciBhIFJlZ0V4cCBvYmplY3QsIGJ1dCAnICsgdHlwZW9mIGV4dC5yZWdleCArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChleHQucmVwbGFjZSkpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJyZWdleFwiIGV4dGVuc2lvbnMgbXVzdCBpbXBsZW1lbnQgYSByZXBsYWNlIHN0cmluZyBvciBmdW5jdGlvbic7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge29iamVjdH0gZXh0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuc2hvd2Rvd24udmFsaWRhdGVFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdmFsaWRhdGVFeHRlbnNpb24gPSB2YWxpZGF0ZShleHQsIG51bGwpO1xuICBpZiAoIXZhbGlkYXRlRXh0ZW5zaW9uLnZhbGlkKSB7XG4gICAgY29uc29sZS53YXJuKHZhbGlkYXRlRXh0ZW5zaW9uLmVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLyoqXG4gKiBzaG93ZG93bmpzIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuXG5pZiAoIXNob3dkb3duLmhhc093blByb3BlcnR5KCdoZWxwZXInKSkge1xuICBzaG93ZG93bi5oZWxwZXIgPSB7fTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YXIgaXMgc3RyaW5nXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gYVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnNob3dkb3duLmhlbHBlci5pc1N0cmluZyA9IGZ1bmN0aW9uIChhKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICh0eXBlb2YgYSA9PT0gJ3N0cmluZycgfHwgYSBpbnN0YW5jZW9mIFN0cmluZyk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHZhciBpcyBhIGZ1bmN0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0geyp9IGFcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5zaG93ZG93bi5oZWxwZXIuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChhKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGEgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxuLyoqXG4gKiBpc0FycmF5IGhlbHBlciBmdW5jdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHsqfSBhXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkgPSBmdW5jdGlvbiAoYSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGEpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59O1xuXG4vKipcbiAqIEZvckVhY2ggaGVscGVyIGZ1bmN0aW9uXG4gKiBJdGVyYXRlcyBvdmVyIEFycmF5cyBhbmQgT2JqZWN0cyAob3duIHByb3BlcnRpZXMgb25seSlcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBBY2NlcHRzIDMgcGFyYW1zOiAxLiB2YWx1ZSwgMi4ga2V5LCAzLiB0aGUgb3JpZ2luYWwgYXJyYXkvb2JqZWN0XG4gKi9cbnNob3dkb3duLmhlbHBlci5mb3JFYWNoID0gZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2spIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBjaGVjayBpZiBvYmogaXMgZGVmaW5lZFxuICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKG9iaikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29iaiBwYXJhbSBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChjYWxsYmFjaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxiYWNrIHBhcmFtIGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgcGFyYW0gbXVzdCBiZSBhIGZ1bmN0aW9uL2Nsb3N1cmUnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqLmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBvYmouZm9yRWFjaChjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjYWxsYmFjayhvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiAob2JqKSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICBjYWxsYmFjayhvYmpbcHJvcF0sIHByb3AsIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignb2JqIGRvZXMgbm90IHNlZW0gdG8gYmUgYW4gYXJyYXkgb3IgYW4gaXRlcmFibGUgb2JqZWN0Jyk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhbmRhcmRpZGl6ZSBleHRlbnNpb24gbmFtZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IHMgZXh0ZW5zaW9uIG5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci5zdGRFeHROYW1lID0gZnVuY3Rpb24gKHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gcy5yZXBsYWNlKC9bXz8qK1xcL1xcXFwuXi1dL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJycpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2sgKHdob2xlTWF0Y2gsIG0xKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGNoYXJDb2RlVG9Fc2NhcGUgPSBtMS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gJ8KoRScgKyBjaGFyQ29kZVRvRXNjYXBlICsgJ0UnO1xufVxuXG4vKipcbiAqIENhbGxiYWNrIHVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgd2hlbiBwYXNzaW5nIHRocm91Z2ggU3RyaW5nLnJlcGxhY2VcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSB3aG9sZU1hdGNoXG4gKiBAcGFyYW0ge3N0cmluZ30gbTFcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2sgPSBlc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2s7XG5cbi8qKlxuICogRXNjYXBlIGNoYXJhY3RlcnMgaW4gYSBzdHJpbmdcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhcnNUb0VzY2FwZVxuICogQHBhcmFtIHtib29sZWFufSBhZnRlckJhY2tzbGFzaFxuICogQHJldHVybnMge1hNTHxzdHJpbmd8dm9pZHwqfVxuICovXG5zaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyA9IGZ1bmN0aW9uICh0ZXh0LCBjaGFyc1RvRXNjYXBlLCBhZnRlckJhY2tzbGFzaCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIEZpcnN0IHdlIGhhdmUgdG8gZXNjYXBlIHRoZSBlc2NhcGUgY2hhcmFjdGVycyBzbyB0aGF0XG4gIC8vIHdlIGNhbiBidWlsZCBhIGNoYXJhY3RlciBjbGFzcyBvdXQgb2YgdGhlbVxuICB2YXIgcmVnZXhTdHJpbmcgPSAnKFsnICsgY2hhcnNUb0VzY2FwZS5yZXBsYWNlKC8oW1xcW1xcXVxcXFxdKS9nLCAnXFxcXCQxJykgKyAnXSknO1xuXG4gIGlmIChhZnRlckJhY2tzbGFzaCkge1xuICAgIHJlZ2V4U3RyaW5nID0gJ1xcXFxcXFxcJyArIHJlZ2V4U3RyaW5nO1xuICB9XG5cbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFN0cmluZywgJ2cnKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcblxuICByZXR1cm4gdGV4dDtcbn07XG5cbi8qKlxuICogVW5lc2NhcGUgSFRNTCBlbnRpdGllc1xuICogQHBhcmFtIHR4dFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uaGVscGVyLnVuZXNjYXBlSFRNTEVudGl0aWVzID0gZnVuY3Rpb24gKHR4dCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIHR4dFxuICAgIC5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJylcbiAgICAucmVwbGFjZSgvJmx0Oy9nLCAnPCcpXG4gICAgLnJlcGxhY2UoLyZndDsvZywgJz4nKVxuICAgIC5yZXBsYWNlKC8mYW1wOy9nLCAnJicpO1xufTtcblxudmFyIHJneEZpbmRNYXRjaFBvcyA9IGZ1bmN0aW9uIChzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBmID0gZmxhZ3MgfHwgJycsXG4gICAgICBnID0gZi5pbmRleE9mKCdnJykgPiAtMSxcbiAgICAgIHggPSBuZXcgUmVnRXhwKGxlZnQgKyAnfCcgKyByaWdodCwgJ2cnICsgZi5yZXBsYWNlKC9nL2csICcnKSksXG4gICAgICBsID0gbmV3IFJlZ0V4cChsZWZ0LCBmLnJlcGxhY2UoL2cvZywgJycpKSxcbiAgICAgIHBvcyA9IFtdLFxuICAgICAgdCwgcywgbSwgc3RhcnQsIGVuZDtcblxuICBkbyB7XG4gICAgdCA9IDA7XG4gICAgd2hpbGUgKChtID0geC5leGVjKHN0cikpKSB7XG4gICAgICBpZiAobC50ZXN0KG1bMF0pKSB7XG4gICAgICAgIGlmICghKHQrKykpIHtcbiAgICAgICAgICBzID0geC5sYXN0SW5kZXg7XG4gICAgICAgICAgc3RhcnQgPSBzIC0gbVswXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodCkge1xuICAgICAgICBpZiAoIS0tdCkge1xuICAgICAgICAgIGVuZCA9IG0uaW5kZXggKyBtWzBdLmxlbmd0aDtcbiAgICAgICAgICB2YXIgb2JqID0ge1xuICAgICAgICAgICAgbGVmdDoge3N0YXJ0OiBzdGFydCwgZW5kOiBzfSxcbiAgICAgICAgICAgIG1hdGNoOiB7c3RhcnQ6IHMsIGVuZDogbS5pbmRleH0sXG4gICAgICAgICAgICByaWdodDoge3N0YXJ0OiBtLmluZGV4LCBlbmQ6IGVuZH0sXG4gICAgICAgICAgICB3aG9sZU1hdGNoOiB7c3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHBvcy5wdXNoKG9iaik7XG4gICAgICAgICAgaWYgKCFnKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAodCAmJiAoeC5sYXN0SW5kZXggPSBzKSk7XG5cbiAgcmV0dXJuIHBvcztcbn07XG5cbi8qKlxuICogbWF0Y2hSZWN1cnNpdmVSZWdFeHBcbiAqXG4gKiAoYykgMjAwNyBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT5cbiAqIE1JVCBMaWNlbnNlXG4gKlxuICogQWNjZXB0cyBhIHN0cmluZyB0byBzZWFyY2gsIGEgbGVmdCBhbmQgcmlnaHQgZm9ybWF0IGRlbGltaXRlclxuICogYXMgcmVnZXggcGF0dGVybnMsIGFuZCBvcHRpb25hbCByZWdleCBmbGFncy4gUmV0dXJucyBhbiBhcnJheVxuICogb2YgbWF0Y2hlcywgYWxsb3dpbmcgbmVzdGVkIGluc3RhbmNlcyBvZiBsZWZ0L3JpZ2h0IGRlbGltaXRlcnMuXG4gKiBVc2UgdGhlIFwiZ1wiIGZsYWcgdG8gcmV0dXJuIGFsbCBtYXRjaGVzLCBvdGhlcndpc2Ugb25seSB0aGVcbiAqIGZpcnN0IGlzIHJldHVybmVkLiBCZSBjYXJlZnVsIHRvIGVuc3VyZSB0aGF0IHRoZSBsZWZ0IGFuZFxuICogcmlnaHQgZm9ybWF0IGRlbGltaXRlcnMgcHJvZHVjZSBtdXR1YWxseSBleGNsdXNpdmUgbWF0Y2hlcy5cbiAqIEJhY2tyZWZlcmVuY2VzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGhpbiB0aGUgcmlnaHQgZGVsaW1pdGVyXG4gKiBkdWUgdG8gaG93IGl0IGlzIGludGVybmFsbHkgY29tYmluZWQgd2l0aCB0aGUgbGVmdCBkZWxpbWl0ZXIuXG4gKiBXaGVuIG1hdGNoaW5nIHN0cmluZ3Mgd2hvc2UgZm9ybWF0IGRlbGltaXRlcnMgYXJlIHVuYmFsYW5jZWRcbiAqIHRvIHRoZSBsZWZ0IG9yIHJpZ2h0LCB0aGUgb3V0cHV0IGlzIGludGVudGlvbmFsbHkgYXMgYVxuICogY29udmVudGlvbmFsIHJlZ2V4IGxpYnJhcnkgd2l0aCByZWN1cnNpb24gc3VwcG9ydCB3b3VsZFxuICogcHJvZHVjZSwgZS5nLiBcIjw8eD5cIiBhbmQgXCI8eD4+XCIgYm90aCBwcm9kdWNlIFtcInhcIl0gd2hlbiB1c2luZ1xuICogXCI8XCIgYW5kIFwiPlwiIGFzIHRoZSBkZWxpbWl0ZXJzIChib3RoIHN0cmluZ3MgY29udGFpbiBhIHNpbmdsZSxcbiAqIGJhbGFuY2VkIGluc3RhbmNlIG9mIFwiPHg+XCIpLlxuICpcbiAqIGV4YW1wbGVzOlxuICogbWF0Y2hSZWN1cnNpdmVSZWdFeHAoXCJ0ZXN0XCIsIFwiXFxcXChcIiwgXCJcXFxcKVwiKVxuICogcmV0dXJuczogW11cbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwKFwiPHQ8PGU+PjxzPj50PD5cIiwgXCI8XCIsIFwiPlwiLCBcImdcIilcbiAqIHJldHVybnM6IFtcInQ8PGU+PjxzPlwiLCBcIlwiXVxuICogbWF0Y2hSZWN1cnNpdmVSZWdFeHAoXCI8ZGl2IGlkPVxcXCJ4XFxcIj50ZXN0PC9kaXY+XCIsIFwiPGRpdlxcXFxiW14+XSo+XCIsIFwiPC9kaXY+XCIsIFwiZ2lcIilcbiAqIHJldHVybnM6IFtcInRlc3RcIl1cbiAqL1xuc2hvd2Rvd24uaGVscGVyLm1hdGNoUmVjdXJzaXZlUmVnRXhwID0gZnVuY3Rpb24gKHN0ciwgbGVmdCwgcmlnaHQsIGZsYWdzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbWF0Y2hQb3MgPSByZ3hGaW5kTWF0Y2hQb3MgKHN0ciwgbGVmdCwgcmlnaHQsIGZsYWdzKSxcbiAgICAgIHJlc3VsdHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoUG9zLmxlbmd0aDsgKytpKSB7XG4gICAgcmVzdWx0cy5wdXNoKFtcbiAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS53aG9sZU1hdGNoLnN0YXJ0LCBtYXRjaFBvc1tpXS53aG9sZU1hdGNoLmVuZCksXG4gICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ubWF0Y2guc3RhcnQsIG1hdGNoUG9zW2ldLm1hdGNoLmVuZCksXG4gICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ubGVmdC5zdGFydCwgbWF0Y2hQb3NbaV0ubGVmdC5lbmQpLFxuICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLnJpZ2h0LnN0YXJ0LCBtYXRjaFBvc1tpXS5yaWdodC5lbmQpXG4gICAgXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gcmVwbGFjZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZWZ0XG4gKiBAcGFyYW0ge3N0cmluZ30gcmlnaHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbGFnc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uaGVscGVyLnJlcGxhY2VSZWN1cnNpdmVSZWdFeHAgPSBmdW5jdGlvbiAoc3RyLCByZXBsYWNlbWVudCwgbGVmdCwgcmlnaHQsIGZsYWdzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc0Z1bmN0aW9uKHJlcGxhY2VtZW50KSkge1xuICAgIHZhciByZXBTdHIgPSByZXBsYWNlbWVudDtcbiAgICByZXBsYWNlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXBTdHI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBtYXRjaFBvcyA9IHJneEZpbmRNYXRjaFBvcyhzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncyksXG4gICAgICBmaW5hbFN0ciA9IHN0cixcbiAgICAgIGxuZyA9IG1hdGNoUG9zLmxlbmd0aDtcblxuICBpZiAobG5nID4gMCkge1xuICAgIHZhciBiaXRzID0gW107XG4gICAgaWYgKG1hdGNoUG9zWzBdLndob2xlTWF0Y2guc3RhcnQgIT09IDApIHtcbiAgICAgIGJpdHMucHVzaChzdHIuc2xpY2UoMCwgbWF0Y2hQb3NbMF0ud2hvbGVNYXRjaC5zdGFydCkpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxuZzsgKytpKSB7XG4gICAgICBiaXRzLnB1c2goXG4gICAgICAgIHJlcGxhY2VtZW50KFxuICAgICAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS53aG9sZU1hdGNoLnN0YXJ0LCBtYXRjaFBvc1tpXS53aG9sZU1hdGNoLmVuZCksXG4gICAgICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLm1hdGNoLnN0YXJ0LCBtYXRjaFBvc1tpXS5tYXRjaC5lbmQpLFxuICAgICAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5sZWZ0LnN0YXJ0LCBtYXRjaFBvc1tpXS5sZWZ0LmVuZCksXG4gICAgICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLnJpZ2h0LnN0YXJ0LCBtYXRjaFBvc1tpXS5yaWdodC5lbmQpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBpZiAoaSA8IGxuZyAtIDEpIHtcbiAgICAgICAgYml0cy5wdXNoKHN0ci5zbGljZShtYXRjaFBvc1tpXS53aG9sZU1hdGNoLmVuZCwgbWF0Y2hQb3NbaSArIDFdLndob2xlTWF0Y2guc3RhcnQpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1hdGNoUG9zW2xuZyAtIDFdLndob2xlTWF0Y2guZW5kIDwgc3RyLmxlbmd0aCkge1xuICAgICAgYml0cy5wdXNoKHN0ci5zbGljZShtYXRjaFBvc1tsbmcgLSAxXS53aG9sZU1hdGNoLmVuZCkpO1xuICAgIH1cbiAgICBmaW5hbFN0ciA9IGJpdHMuam9pbignJyk7XG4gIH1cbiAgcmV0dXJuIGZpbmFsU3RyO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCB3aXRoaW4gdGhlIHBhc3NlZCBTdHJpbmcgb2JqZWN0IG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSBzcGVjaWZpZWQgcmVnZXgsXG4gKiBzdGFydGluZyB0aGUgc2VhcmNoIGF0IGZyb21JbmRleC4gUmV0dXJucyAtMSBpZiB0aGUgdmFsdWUgaXMgbm90IGZvdW5kLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIHNlYXJjaFxuICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4IFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzZWFyY2hcbiAqIEBwYXJhbSB7aW50fSBbZnJvbUluZGV4ID0gMF0gSW5kZXggdG8gc3RhcnQgdGhlIHNlYXJjaFxuICogQHJldHVybnMge051bWJlcn1cbiAqIEB0aHJvd3MgSW52YWxpZEFyZ3VtZW50RXJyb3JcbiAqL1xuc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZiA9IGZ1bmN0aW9uIChzdHIsIHJlZ2V4LCBmcm9tSW5kZXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhzdHIpKSB7XG4gICAgdGhyb3cgJ0ludmFsaWRBcmd1bWVudEVycm9yOiBmaXJzdCBwYXJhbWV0ZXIgb2Ygc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZiBmdW5jdGlvbiBtdXN0IGJlIGEgc3RyaW5nJztcbiAgfVxuICBpZiAocmVnZXggaW5zdGFuY2VvZiBSZWdFeHAgPT09IGZhbHNlKSB7XG4gICAgdGhyb3cgJ0ludmFsaWRBcmd1bWVudEVycm9yOiBzZWNvbmQgcGFyYW1ldGVyIG9mIHNob3dkb3duLmhlbHBlci5yZWdleEluZGV4T2YgZnVuY3Rpb24gbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBSZWdFeHAnO1xuICB9XG4gIHZhciBpbmRleE9mID0gc3RyLnN1YnN0cmluZyhmcm9tSW5kZXggfHwgMCkuc2VhcmNoKHJlZ2V4KTtcbiAgcmV0dXJuIChpbmRleE9mID49IDApID8gKGluZGV4T2YgKyAoZnJvbUluZGV4IHx8IDApKSA6IGluZGV4T2Y7XG59O1xuXG4vKipcbiAqIFNwbGl0cyB0aGUgcGFzc2VkIHN0cmluZyBvYmplY3QgYXQgdGhlIGRlZmluZWQgaW5kZXgsIGFuZCByZXR1cm5zIGFuIGFycmF5IGNvbXBvc2VkIG9mIHRoZSB0d28gc3Vic3RyaW5nc1xuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBzdHJpbmcgdG8gc3BsaXRcbiAqIEBwYXJhbSB7aW50fSBpbmRleCBpbmRleCB0byBzcGxpdCBzdHJpbmcgYXRcbiAqIEByZXR1cm5zIHtbc3RyaW5nLHN0cmluZ119XG4gKiBAdGhyb3dzIEludmFsaWRBcmd1bWVudEVycm9yXG4gKi9cbnNob3dkb3duLmhlbHBlci5zcGxpdEF0SW5kZXggPSBmdW5jdGlvbiAoc3RyLCBpbmRleCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKHN0cikpIHtcbiAgICB0aHJvdyAnSW52YWxpZEFyZ3VtZW50RXJyb3I6IGZpcnN0IHBhcmFtZXRlciBvZiBzaG93ZG93bi5oZWxwZXIucmVnZXhJbmRleE9mIGZ1bmN0aW9uIG11c3QgYmUgYSBzdHJpbmcnO1xuICB9XG4gIHJldHVybiBbc3RyLnN1YnN0cmluZygwLCBpbmRleCksIHN0ci5zdWJzdHJpbmcoaW5kZXgpXTtcbn07XG5cbi8qKlxuICogT2JmdXNjYXRlIGFuIGUtbWFpbCBhZGRyZXNzIHRocm91Z2ggdGhlIHVzZSBvZiBDaGFyYWN0ZXIgRW50aXRpZXMsXG4gKiB0cmFuc2Zvcm1pbmcgQVNDSUkgY2hhcmFjdGVycyBpbnRvIHRoZWlyIGVxdWl2YWxlbnQgZGVjaW1hbCBvciBoZXggZW50aXRpZXMuXG4gKlxuICogU2luY2UgaXQgaGFzIGEgcmFuZG9tIGNvbXBvbmVudCwgc3Vic2VxdWVudCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIHByb2R1Y2UgZGlmZmVyZW50IHJlc3VsdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFpbFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmVuY29kZUVtYWlsQWRkcmVzcyA9IGZ1bmN0aW9uIChtYWlsKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGVuY29kZSA9IFtcbiAgICBmdW5jdGlvbiAoY2gpIHtcbiAgICAgIHJldHVybiAnJiMnICsgY2guY2hhckNvZGVBdCgwKSArICc7JztcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChjaCkge1xuICAgICAgcmV0dXJuICcmI3gnICsgY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikgKyAnOyc7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoY2gpIHtcbiAgICAgIHJldHVybiBjaDtcbiAgICB9XG4gIF07XG5cbiAgbWFpbCA9IG1haWwucmVwbGFjZSgvLi9nLCBmdW5jdGlvbiAoY2gpIHtcbiAgICBpZiAoY2ggPT09ICdAJykge1xuICAgICAgLy8gdGhpcyAqbXVzdCogYmUgZW5jb2RlZC4gSSBpbnNpc3QuXG4gICAgICBjaCA9IGVuY29kZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKV0oY2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAvLyByb3VnaGx5IDEwJSByYXcsIDQ1JSBoZXgsIDQ1JSBkZWNcbiAgICAgIGNoID0gKFxuICAgICAgICByID4gMC45ID8gZW5jb2RlWzJdKGNoKSA6IHIgPiAwLjQ1ID8gZW5jb2RlWzFdKGNoKSA6IGVuY29kZVswXShjaClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjaDtcbiAgfSk7XG5cbiAgcmV0dXJuIG1haWw7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gc3RyXG4gKiBAcGFyYW0gdGFyZ2V0TGVuZ3RoXG4gKiBAcGFyYW0gcGFkU3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIucGFkRW5kID0gZnVuY3Rpb24gcGFkRW5kIChzdHIsIHRhcmdldExlbmd0aCwgcGFkU3RyaW5nKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLypqc2hpbnQgYml0d2lzZTogZmFsc2UqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3BhY2UtaW5maXgtb3BzXG4gIHRhcmdldExlbmd0aCA9IHRhcmdldExlbmd0aD4+MDsgLy9mbG9vciBpZiBudW1iZXIgb3IgY29udmVydCBub24tbnVtYmVyIHRvIDA7XG4gIC8qanNoaW50IGJpdHdpc2U6IHRydWUqL1xuICBwYWRTdHJpbmcgPSBTdHJpbmcocGFkU3RyaW5nIHx8ICcgJyk7XG4gIGlmIChzdHIubGVuZ3RoID4gdGFyZ2V0TGVuZ3RoKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzdHIpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldExlbmd0aCA9IHRhcmdldExlbmd0aCAtIHN0ci5sZW5ndGg7XG4gICAgaWYgKHRhcmdldExlbmd0aCA+IHBhZFN0cmluZy5sZW5ndGgpIHtcbiAgICAgIHBhZFN0cmluZyArPSBwYWRTdHJpbmcucmVwZWF0KHRhcmdldExlbmd0aCAvIHBhZFN0cmluZy5sZW5ndGgpOyAvL2FwcGVuZCB0byBvcmlnaW5hbCB0byBlbnN1cmUgd2UgYXJlIGxvbmdlciB0aGFuIG5lZWRlZFxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKHN0cikgKyBwYWRTdHJpbmcuc2xpY2UoMCx0YXJnZXRMZW5ndGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFBPTFlGSUxMU1xuICovXG4vLyB1c2UgdGhpcyBpbnN0ZWFkIG9mIGJ1aWx0aW4gaXMgdW5kZWZpbmVkIGZvciBJRTggY29tcGF0aWJpbGl0eVxuaWYgKHR5cGVvZiAoY29uc29sZSkgPT09ICd1bmRlZmluZWQnKSB7XG4gIGNvbnNvbGUgPSB7XG4gICAgd2FybjogZnVuY3Rpb24gKG1zZykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgYWxlcnQobXNnKTtcbiAgICB9LFxuICAgIGxvZzogZnVuY3Rpb24gKG1zZykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgYWxlcnQobXNnKTtcbiAgICB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICB0aHJvdyBtc2c7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIENvbW1vbiByZWdleGVzLlxuICogV2UgZGVjbGFyZSBzb21lIGNvbW1vbiByZWdleGVzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2VcbiAqL1xuc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMgPSB7XG4gIGFzdGVyaXNrRGFzaEFuZENvbG9uOiAvKFsqXzp+XSkvZ1xufTtcblxuLyoqXG4gKiBFTU9KSVMgTElTVFxuICovXG5zaG93ZG93bi5oZWxwZXIuZW1vamlzID0ge1xuICAnKzEnOidcXHVkODNkXFx1ZGM0ZCcsXG4gICctMSc6J1xcdWQ4M2RcXHVkYzRlJyxcbiAgJzEwMCc6J1xcdWQ4M2RcXHVkY2FmJyxcbiAgJzEyMzQnOidcXHVkODNkXFx1ZGQyMicsXG4gICcxc3RfcGxhY2VfbWVkYWwnOidcXHVkODNlXFx1ZGQ0NycsXG4gICcybmRfcGxhY2VfbWVkYWwnOidcXHVkODNlXFx1ZGQ0OCcsXG4gICczcmRfcGxhY2VfbWVkYWwnOidcXHVkODNlXFx1ZGQ0OScsXG4gICc4YmFsbCc6J1xcdWQ4M2NcXHVkZmIxJyxcbiAgJ2EnOidcXHVkODNjXFx1ZGQ3MFxcdWZlMGYnLFxuICAnYWInOidcXHVkODNjXFx1ZGQ4ZScsXG4gICdhYmMnOidcXHVkODNkXFx1ZGQyNCcsXG4gICdhYmNkJzonXFx1ZDgzZFxcdWRkMjEnLFxuICAnYWNjZXB0JzonXFx1ZDgzY1xcdWRlNTEnLFxuICAnYWVyaWFsX3RyYW13YXknOidcXHVkODNkXFx1ZGVhMScsXG4gICdhaXJwbGFuZSc6J1xcdTI3MDhcXHVmZTBmJyxcbiAgJ2FsYXJtX2Nsb2NrJzonXFx1MjNmMCcsXG4gICdhbGVtYmljJzonXFx1MjY5N1xcdWZlMGYnLFxuICAnYWxpZW4nOidcXHVkODNkXFx1ZGM3ZCcsXG4gICdhbWJ1bGFuY2UnOidcXHVkODNkXFx1ZGU5MScsXG4gICdhbXBob3JhJzonXFx1ZDgzY1xcdWRmZmEnLFxuICAnYW5jaG9yJzonXFx1MjY5M1xcdWZlMGYnLFxuICAnYW5nZWwnOidcXHVkODNkXFx1ZGM3YycsXG4gICdhbmdlcic6J1xcdWQ4M2RcXHVkY2EyJyxcbiAgJ2FuZ3J5JzonXFx1ZDgzZFxcdWRlMjAnLFxuICAnYW5ndWlzaGVkJzonXFx1ZDgzZFxcdWRlMjcnLFxuICAnYW50JzonXFx1ZDgzZFxcdWRjMWMnLFxuICAnYXBwbGUnOidcXHVkODNjXFx1ZGY0ZScsXG4gICdhcXVhcml1cyc6J1xcdTI2NTJcXHVmZTBmJyxcbiAgJ2FyaWVzJzonXFx1MjY0OFxcdWZlMGYnLFxuICAnYXJyb3dfYmFja3dhcmQnOidcXHUyNWMwXFx1ZmUwZicsXG4gICdhcnJvd19kb3VibGVfZG93bic6J1xcdTIzZWMnLFxuICAnYXJyb3dfZG91YmxlX3VwJzonXFx1MjNlYicsXG4gICdhcnJvd19kb3duJzonXFx1MmIwN1xcdWZlMGYnLFxuICAnYXJyb3dfZG93bl9zbWFsbCc6J1xcdWQ4M2RcXHVkZDNkJyxcbiAgJ2Fycm93X2ZvcndhcmQnOidcXHUyNWI2XFx1ZmUwZicsXG4gICdhcnJvd19oZWFkaW5nX2Rvd24nOidcXHUyOTM1XFx1ZmUwZicsXG4gICdhcnJvd19oZWFkaW5nX3VwJzonXFx1MjkzNFxcdWZlMGYnLFxuICAnYXJyb3dfbGVmdCc6J1xcdTJiMDVcXHVmZTBmJyxcbiAgJ2Fycm93X2xvd2VyX2xlZnQnOidcXHUyMTk5XFx1ZmUwZicsXG4gICdhcnJvd19sb3dlcl9yaWdodCc6J1xcdTIxOThcXHVmZTBmJyxcbiAgJ2Fycm93X3JpZ2h0JzonXFx1MjdhMVxcdWZlMGYnLFxuICAnYXJyb3dfcmlnaHRfaG9vayc6J1xcdTIxYWFcXHVmZTBmJyxcbiAgJ2Fycm93X3VwJzonXFx1MmIwNlxcdWZlMGYnLFxuICAnYXJyb3dfdXBfZG93bic6J1xcdTIxOTVcXHVmZTBmJyxcbiAgJ2Fycm93X3VwX3NtYWxsJzonXFx1ZDgzZFxcdWRkM2MnLFxuICAnYXJyb3dfdXBwZXJfbGVmdCc6J1xcdTIxOTZcXHVmZTBmJyxcbiAgJ2Fycm93X3VwcGVyX3JpZ2h0JzonXFx1MjE5N1xcdWZlMGYnLFxuICAnYXJyb3dzX2Nsb2Nrd2lzZSc6J1xcdWQ4M2RcXHVkZDAzJyxcbiAgJ2Fycm93c19jb3VudGVyY2xvY2t3aXNlJzonXFx1ZDgzZFxcdWRkMDQnLFxuICAnYXJ0JzonXFx1ZDgzY1xcdWRmYTgnLFxuICAnYXJ0aWN1bGF0ZWRfbG9ycnknOidcXHVkODNkXFx1ZGU5YicsXG4gICdhcnRpZmljaWFsX3NhdGVsbGl0ZSc6J1xcdWQ4M2RcXHVkZWYwJyxcbiAgJ2FzdG9uaXNoZWQnOidcXHVkODNkXFx1ZGUzMicsXG4gICdhdGhsZXRpY19zaG9lJzonXFx1ZDgzZFxcdWRjNWYnLFxuICAnYXRtJzonXFx1ZDgzY1xcdWRmZTcnLFxuICAnYXRvbV9zeW1ib2wnOidcXHUyNjliXFx1ZmUwZicsXG4gICdhdm9jYWRvJzonXFx1ZDgzZVxcdWRkNTEnLFxuICAnYic6J1xcdWQ4M2NcXHVkZDcxXFx1ZmUwZicsXG4gICdiYWJ5JzonXFx1ZDgzZFxcdWRjNzYnLFxuICAnYmFieV9ib3R0bGUnOidcXHVkODNjXFx1ZGY3YycsXG4gICdiYWJ5X2NoaWNrJzonXFx1ZDgzZFxcdWRjMjQnLFxuICAnYmFieV9zeW1ib2wnOidcXHVkODNkXFx1ZGViYycsXG4gICdiYWNrJzonXFx1ZDgzZFxcdWRkMTknLFxuICAnYmFjb24nOidcXHVkODNlXFx1ZGQ1MycsXG4gICdiYWRtaW50b24nOidcXHVkODNjXFx1ZGZmOCcsXG4gICdiYWdnYWdlX2NsYWltJzonXFx1ZDgzZFxcdWRlYzQnLFxuICAnYmFndWV0dGVfYnJlYWQnOidcXHVkODNlXFx1ZGQ1NicsXG4gICdiYWxhbmNlX3NjYWxlJzonXFx1MjY5NlxcdWZlMGYnLFxuICAnYmFsbG9vbic6J1xcdWQ4M2NcXHVkZjg4JyxcbiAgJ2JhbGxvdF9ib3gnOidcXHVkODNkXFx1ZGRmMycsXG4gICdiYWxsb3RfYm94X3dpdGhfY2hlY2snOidcXHUyNjExXFx1ZmUwZicsXG4gICdiYW1ib28nOidcXHVkODNjXFx1ZGY4ZCcsXG4gICdiYW5hbmEnOidcXHVkODNjXFx1ZGY0YycsXG4gICdiYW5nYmFuZyc6J1xcdTIwM2NcXHVmZTBmJyxcbiAgJ2JhbmsnOidcXHVkODNjXFx1ZGZlNicsXG4gICdiYXJfY2hhcnQnOidcXHVkODNkXFx1ZGNjYScsXG4gICdiYXJiZXInOidcXHVkODNkXFx1ZGM4OCcsXG4gICdiYXNlYmFsbCc6J1xcdTI2YmVcXHVmZTBmJyxcbiAgJ2Jhc2tldGJhbGwnOidcXHVkODNjXFx1ZGZjMCcsXG4gICdiYXNrZXRiYWxsX21hbic6J1xcdTI2ZjlcXHVmZTBmJyxcbiAgJ2Jhc2tldGJhbGxfd29tYW4nOidcXHUyNmY5XFx1ZmUwZiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnYmF0JzonXFx1ZDgzZVxcdWRkODcnLFxuICAnYmF0aCc6J1xcdWQ4M2RcXHVkZWMwJyxcbiAgJ2JhdGh0dWInOidcXHVkODNkXFx1ZGVjMScsXG4gICdiYXR0ZXJ5JzonXFx1ZDgzZFxcdWRkMGInLFxuICAnYmVhY2hfdW1icmVsbGEnOidcXHVkODNjXFx1ZGZkNicsXG4gICdiZWFyJzonXFx1ZDgzZFxcdWRjM2InLFxuICAnYmVkJzonXFx1ZDgzZFxcdWRlY2YnLFxuICAnYmVlJzonXFx1ZDgzZFxcdWRjMWQnLFxuICAnYmVlcic6J1xcdWQ4M2NcXHVkZjdhJyxcbiAgJ2JlZXJzJzonXFx1ZDgzY1xcdWRmN2InLFxuICAnYmVldGxlJzonXFx1ZDgzZFxcdWRjMWUnLFxuICAnYmVnaW5uZXInOidcXHVkODNkXFx1ZGQzMCcsXG4gICdiZWxsJzonXFx1ZDgzZFxcdWRkMTQnLFxuICAnYmVsbGhvcF9iZWxsJzonXFx1ZDgzZFxcdWRlY2UnLFxuICAnYmVudG8nOidcXHVkODNjXFx1ZGY3MScsXG4gICdiaWtpbmdfbWFuJzonXFx1ZDgzZFxcdWRlYjQnLFxuICAnYmlrZSc6J1xcdWQ4M2RcXHVkZWIyJyxcbiAgJ2Jpa2luZ193b21hbic6J1xcdWQ4M2RcXHVkZWI0Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdiaWtpbmknOidcXHVkODNkXFx1ZGM1OScsXG4gICdiaW9oYXphcmQnOidcXHUyNjIzXFx1ZmUwZicsXG4gICdiaXJkJzonXFx1ZDgzZFxcdWRjMjYnLFxuICAnYmlydGhkYXknOidcXHVkODNjXFx1ZGY4MicsXG4gICdibGFja19jaXJjbGUnOidcXHUyNmFiXFx1ZmUwZicsXG4gICdibGFja19mbGFnJzonXFx1ZDgzY1xcdWRmZjQnLFxuICAnYmxhY2tfaGVhcnQnOidcXHVkODNkXFx1ZGRhNCcsXG4gICdibGFja19qb2tlcic6J1xcdWQ4M2NcXHVkY2NmJyxcbiAgJ2JsYWNrX2xhcmdlX3NxdWFyZSc6J1xcdTJiMWJcXHVmZTBmJyxcbiAgJ2JsYWNrX21lZGl1bV9zbWFsbF9zcXVhcmUnOidcXHUyNWZlXFx1ZmUwZicsXG4gICdibGFja19tZWRpdW1fc3F1YXJlJzonXFx1MjVmY1xcdWZlMGYnLFxuICAnYmxhY2tfbmliJzonXFx1MjcxMlxcdWZlMGYnLFxuICAnYmxhY2tfc21hbGxfc3F1YXJlJzonXFx1MjVhYVxcdWZlMGYnLFxuICAnYmxhY2tfc3F1YXJlX2J1dHRvbic6J1xcdWQ4M2RcXHVkZDMyJyxcbiAgJ2Jsb25kZV9tYW4nOidcXHVkODNkXFx1ZGM3MScsXG4gICdibG9uZGVfd29tYW4nOidcXHVkODNkXFx1ZGM3MSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnYmxvc3NvbSc6J1xcdWQ4M2NcXHVkZjNjJyxcbiAgJ2Jsb3dmaXNoJzonXFx1ZDgzZFxcdWRjMjEnLFxuICAnYmx1ZV9ib29rJzonXFx1ZDgzZFxcdWRjZDgnLFxuICAnYmx1ZV9jYXInOidcXHVkODNkXFx1ZGU5OScsXG4gICdibHVlX2hlYXJ0JzonXFx1ZDgzZFxcdWRjOTknLFxuICAnYmx1c2gnOidcXHVkODNkXFx1ZGUwYScsXG4gICdib2FyJzonXFx1ZDgzZFxcdWRjMTcnLFxuICAnYm9hdCc6J1xcdTI2ZjVcXHVmZTBmJyxcbiAgJ2JvbWInOidcXHVkODNkXFx1ZGNhMycsXG4gICdib29rJzonXFx1ZDgzZFxcdWRjZDYnLFxuICAnYm9va21hcmsnOidcXHVkODNkXFx1ZGQxNicsXG4gICdib29rbWFya190YWJzJzonXFx1ZDgzZFxcdWRjZDEnLFxuICAnYm9va3MnOidcXHVkODNkXFx1ZGNkYScsXG4gICdib29tJzonXFx1ZDgzZFxcdWRjYTUnLFxuICAnYm9vdCc6J1xcdWQ4M2RcXHVkYzYyJyxcbiAgJ2JvdXF1ZXQnOidcXHVkODNkXFx1ZGM5MCcsXG4gICdib3dpbmdfbWFuJzonXFx1ZDgzZFxcdWRlNDcnLFxuICAnYm93X2FuZF9hcnJvdyc6J1xcdWQ4M2NcXHVkZmY5JyxcbiAgJ2Jvd2luZ193b21hbic6J1xcdWQ4M2RcXHVkZTQ3Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdib3dsaW5nJzonXFx1ZDgzY1xcdWRmYjMnLFxuICAnYm94aW5nX2dsb3ZlJzonXFx1ZDgzZVxcdWRkNGEnLFxuICAnYm95JzonXFx1ZDgzZFxcdWRjNjYnLFxuICAnYnJlYWQnOidcXHVkODNjXFx1ZGY1ZScsXG4gICdicmlkZV93aXRoX3ZlaWwnOidcXHVkODNkXFx1ZGM3MCcsXG4gICdicmlkZ2VfYXRfbmlnaHQnOidcXHVkODNjXFx1ZGYwOScsXG4gICdicmllZmNhc2UnOidcXHVkODNkXFx1ZGNiYycsXG4gICdicm9rZW5faGVhcnQnOidcXHVkODNkXFx1ZGM5NCcsXG4gICdidWcnOidcXHVkODNkXFx1ZGMxYicsXG4gICdidWlsZGluZ19jb25zdHJ1Y3Rpb24nOidcXHVkODNjXFx1ZGZkNycsXG4gICdidWxiJzonXFx1ZDgzZFxcdWRjYTEnLFxuICAnYnVsbGV0dHJhaW5fZnJvbnQnOidcXHVkODNkXFx1ZGU4NScsXG4gICdidWxsZXR0cmFpbl9zaWRlJzonXFx1ZDgzZFxcdWRlODQnLFxuICAnYnVycml0byc6J1xcdWQ4M2NcXHVkZjJmJyxcbiAgJ2J1cyc6J1xcdWQ4M2RcXHVkZThjJyxcbiAgJ2J1c2luZXNzX3N1aXRfbGV2aXRhdGluZyc6J1xcdWQ4M2RcXHVkZDc0JyxcbiAgJ2J1c3N0b3AnOidcXHVkODNkXFx1ZGU4ZicsXG4gICdidXN0X2luX3NpbGhvdWV0dGUnOidcXHVkODNkXFx1ZGM2NCcsXG4gICdidXN0c19pbl9zaWxob3VldHRlJzonXFx1ZDgzZFxcdWRjNjUnLFxuICAnYnV0dGVyZmx5JzonXFx1ZDgzZVxcdWRkOGInLFxuICAnY2FjdHVzJzonXFx1ZDgzY1xcdWRmMzUnLFxuICAnY2FrZSc6J1xcdWQ4M2NcXHVkZjcwJyxcbiAgJ2NhbGVuZGFyJzonXFx1ZDgzZFxcdWRjYzYnLFxuICAnY2FsbF9tZV9oYW5kJzonXFx1ZDgzZVxcdWRkMTknLFxuICAnY2FsbGluZyc6J1xcdWQ4M2RcXHVkY2YyJyxcbiAgJ2NhbWVsJzonXFx1ZDgzZFxcdWRjMmInLFxuICAnY2FtZXJhJzonXFx1ZDgzZFxcdWRjZjcnLFxuICAnY2FtZXJhX2ZsYXNoJzonXFx1ZDgzZFxcdWRjZjgnLFxuICAnY2FtcGluZyc6J1xcdWQ4M2NcXHVkZmQ1JyxcbiAgJ2NhbmNlcic6J1xcdTI2NGJcXHVmZTBmJyxcbiAgJ2NhbmRsZSc6J1xcdWQ4M2RcXHVkZDZmJyxcbiAgJ2NhbmR5JzonXFx1ZDgzY1xcdWRmNmMnLFxuICAnY2Fub2UnOidcXHVkODNkXFx1ZGVmNicsXG4gICdjYXBpdGFsX2FiY2QnOidcXHVkODNkXFx1ZGQyMCcsXG4gICdjYXByaWNvcm4nOidcXHUyNjUxXFx1ZmUwZicsXG4gICdjYXInOidcXHVkODNkXFx1ZGU5NycsXG4gICdjYXJkX2ZpbGVfYm94JzonXFx1ZDgzZFxcdWRkYzMnLFxuICAnY2FyZF9pbmRleCc6J1xcdWQ4M2RcXHVkY2M3JyxcbiAgJ2NhcmRfaW5kZXhfZGl2aWRlcnMnOidcXHVkODNkXFx1ZGRjMicsXG4gICdjYXJvdXNlbF9ob3JzZSc6J1xcdWQ4M2NcXHVkZmEwJyxcbiAgJ2NhcnJvdCc6J1xcdWQ4M2VcXHVkZDU1JyxcbiAgJ2NhdCc6J1xcdWQ4M2RcXHVkYzMxJyxcbiAgJ2NhdDInOidcXHVkODNkXFx1ZGMwOCcsXG4gICdjZCc6J1xcdWQ4M2RcXHVkY2JmJyxcbiAgJ2NoYWlucyc6J1xcdTI2ZDMnLFxuICAnY2hhbXBhZ25lJzonXFx1ZDgzY1xcdWRmN2UnLFxuICAnY2hhcnQnOidcXHVkODNkXFx1ZGNiOScsXG4gICdjaGFydF93aXRoX2Rvd253YXJkc190cmVuZCc6J1xcdWQ4M2RcXHVkY2M5JyxcbiAgJ2NoYXJ0X3dpdGhfdXB3YXJkc190cmVuZCc6J1xcdWQ4M2RcXHVkY2M4JyxcbiAgJ2NoZWNrZXJlZF9mbGFnJzonXFx1ZDgzY1xcdWRmYzEnLFxuICAnY2hlZXNlJzonXFx1ZDgzZVxcdWRkYzAnLFxuICAnY2hlcnJpZXMnOidcXHVkODNjXFx1ZGY1MicsXG4gICdjaGVycnlfYmxvc3NvbSc6J1xcdWQ4M2NcXHVkZjM4JyxcbiAgJ2NoZXN0bnV0JzonXFx1ZDgzY1xcdWRmMzAnLFxuICAnY2hpY2tlbic6J1xcdWQ4M2RcXHVkYzE0JyxcbiAgJ2NoaWxkcmVuX2Nyb3NzaW5nJzonXFx1ZDgzZFxcdWRlYjgnLFxuICAnY2hpcG11bmsnOidcXHVkODNkXFx1ZGMzZicsXG4gICdjaG9jb2xhdGVfYmFyJzonXFx1ZDgzY1xcdWRmNmInLFxuICAnY2hyaXN0bWFzX3RyZWUnOidcXHVkODNjXFx1ZGY4NCcsXG4gICdjaHVyY2gnOidcXHUyNmVhXFx1ZmUwZicsXG4gICdjaW5lbWEnOidcXHVkODNjXFx1ZGZhNicsXG4gICdjaXJjdXNfdGVudCc6J1xcdWQ4M2NcXHVkZmFhJyxcbiAgJ2NpdHlfc3VucmlzZSc6J1xcdWQ4M2NcXHVkZjA3JyxcbiAgJ2NpdHlfc3Vuc2V0JzonXFx1ZDgzY1xcdWRmMDYnLFxuICAnY2l0eXNjYXBlJzonXFx1ZDgzY1xcdWRmZDknLFxuICAnY2wnOidcXHVkODNjXFx1ZGQ5MScsXG4gICdjbGFtcCc6J1xcdWQ4M2RcXHVkZGRjJyxcbiAgJ2NsYXAnOidcXHVkODNkXFx1ZGM0ZicsXG4gICdjbGFwcGVyJzonXFx1ZDgzY1xcdWRmYWMnLFxuICAnY2xhc3NpY2FsX2J1aWxkaW5nJzonXFx1ZDgzY1xcdWRmZGInLFxuICAnY2xpbmtpbmdfZ2xhc3Nlcyc6J1xcdWQ4M2VcXHVkZDQyJyxcbiAgJ2NsaXBib2FyZCc6J1xcdWQ4M2RcXHVkY2NiJyxcbiAgJ2Nsb2NrMSc6J1xcdWQ4M2RcXHVkZDUwJyxcbiAgJ2Nsb2NrMTAnOidcXHVkODNkXFx1ZGQ1OScsXG4gICdjbG9jazEwMzAnOidcXHVkODNkXFx1ZGQ2NScsXG4gICdjbG9jazExJzonXFx1ZDgzZFxcdWRkNWEnLFxuICAnY2xvY2sxMTMwJzonXFx1ZDgzZFxcdWRkNjYnLFxuICAnY2xvY2sxMic6J1xcdWQ4M2RcXHVkZDViJyxcbiAgJ2Nsb2NrMTIzMCc6J1xcdWQ4M2RcXHVkZDY3JyxcbiAgJ2Nsb2NrMTMwJzonXFx1ZDgzZFxcdWRkNWMnLFxuICAnY2xvY2syJzonXFx1ZDgzZFxcdWRkNTEnLFxuICAnY2xvY2syMzAnOidcXHVkODNkXFx1ZGQ1ZCcsXG4gICdjbG9jazMnOidcXHVkODNkXFx1ZGQ1MicsXG4gICdjbG9jazMzMCc6J1xcdWQ4M2RcXHVkZDVlJyxcbiAgJ2Nsb2NrNCc6J1xcdWQ4M2RcXHVkZDUzJyxcbiAgJ2Nsb2NrNDMwJzonXFx1ZDgzZFxcdWRkNWYnLFxuICAnY2xvY2s1JzonXFx1ZDgzZFxcdWRkNTQnLFxuICAnY2xvY2s1MzAnOidcXHVkODNkXFx1ZGQ2MCcsXG4gICdjbG9jazYnOidcXHVkODNkXFx1ZGQ1NScsXG4gICdjbG9jazYzMCc6J1xcdWQ4M2RcXHVkZDYxJyxcbiAgJ2Nsb2NrNyc6J1xcdWQ4M2RcXHVkZDU2JyxcbiAgJ2Nsb2NrNzMwJzonXFx1ZDgzZFxcdWRkNjInLFxuICAnY2xvY2s4JzonXFx1ZDgzZFxcdWRkNTcnLFxuICAnY2xvY2s4MzAnOidcXHVkODNkXFx1ZGQ2MycsXG4gICdjbG9jazknOidcXHVkODNkXFx1ZGQ1OCcsXG4gICdjbG9jazkzMCc6J1xcdWQ4M2RcXHVkZDY0JyxcbiAgJ2Nsb3NlZF9ib29rJzonXFx1ZDgzZFxcdWRjZDUnLFxuICAnY2xvc2VkX2xvY2tfd2l0aF9rZXknOidcXHVkODNkXFx1ZGQxMCcsXG4gICdjbG9zZWRfdW1icmVsbGEnOidcXHVkODNjXFx1ZGYwMicsXG4gICdjbG91ZCc6J1xcdTI2MDFcXHVmZTBmJyxcbiAgJ2Nsb3VkX3dpdGhfbGlnaHRuaW5nJzonXFx1ZDgzY1xcdWRmMjknLFxuICAnY2xvdWRfd2l0aF9saWdodG5pbmdfYW5kX3JhaW4nOidcXHUyNmM4JyxcbiAgJ2Nsb3VkX3dpdGhfcmFpbic6J1xcdWQ4M2NcXHVkZjI3JyxcbiAgJ2Nsb3VkX3dpdGhfc25vdyc6J1xcdWQ4M2NcXHVkZjI4JyxcbiAgJ2Nsb3duX2ZhY2UnOidcXHVkODNlXFx1ZGQyMScsXG4gICdjbHVicyc6J1xcdTI2NjNcXHVmZTBmJyxcbiAgJ2NvY2t0YWlsJzonXFx1ZDgzY1xcdWRmNzgnLFxuICAnY29mZmVlJzonXFx1MjYxNVxcdWZlMGYnLFxuICAnY29mZmluJzonXFx1MjZiMFxcdWZlMGYnLFxuICAnY29sZF9zd2VhdCc6J1xcdWQ4M2RcXHVkZTMwJyxcbiAgJ2NvbWV0JzonXFx1MjYwNFxcdWZlMGYnLFxuICAnY29tcHV0ZXInOidcXHVkODNkXFx1ZGNiYicsXG4gICdjb21wdXRlcl9tb3VzZSc6J1xcdWQ4M2RcXHVkZGIxJyxcbiAgJ2NvbmZldHRpX2JhbGwnOidcXHVkODNjXFx1ZGY4YScsXG4gICdjb25mb3VuZGVkJzonXFx1ZDgzZFxcdWRlMTYnLFxuICAnY29uZnVzZWQnOidcXHVkODNkXFx1ZGUxNScsXG4gICdjb25ncmF0dWxhdGlvbnMnOidcXHUzMjk3XFx1ZmUwZicsXG4gICdjb25zdHJ1Y3Rpb24nOidcXHVkODNkXFx1ZGVhNycsXG4gICdjb25zdHJ1Y3Rpb25fd29ya2VyX21hbic6J1xcdWQ4M2RcXHVkYzc3JyxcbiAgJ2NvbnN0cnVjdGlvbl93b3JrZXJfd29tYW4nOidcXHVkODNkXFx1ZGM3NyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnY29udHJvbF9rbm9icyc6J1xcdWQ4M2NcXHVkZjliJyxcbiAgJ2NvbnZlbmllbmNlX3N0b3JlJzonXFx1ZDgzY1xcdWRmZWEnLFxuICAnY29va2llJzonXFx1ZDgzY1xcdWRmNmEnLFxuICAnY29vbCc6J1xcdWQ4M2NcXHVkZDkyJyxcbiAgJ3BvbGljZW1hbic6J1xcdWQ4M2RcXHVkYzZlJyxcbiAgJ2NvcHlyaWdodCc6J1xcdTAwYTlcXHVmZTBmJyxcbiAgJ2Nvcm4nOidcXHVkODNjXFx1ZGYzZCcsXG4gICdjb3VjaF9hbmRfbGFtcCc6J1xcdWQ4M2RcXHVkZWNiJyxcbiAgJ2NvdXBsZSc6J1xcdWQ4M2RcXHVkYzZiJyxcbiAgJ2NvdXBsZV93aXRoX2hlYXJ0X3dvbWFuX21hbic6J1xcdWQ4M2RcXHVkYzkxJyxcbiAgJ2NvdXBsZV93aXRoX2hlYXJ0X21hbl9tYW4nOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1Mjc2NFxcdWZlMGYmendqO1xcdWQ4M2RcXHVkYzY4JyxcbiAgJ2NvdXBsZV93aXRoX2hlYXJ0X3dvbWFuX3dvbWFuJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdTI3NjRcXHVmZTBmJnp3ajtcXHVkODNkXFx1ZGM2OScsXG4gICdjb3VwbGVraXNzX21hbl9tYW4nOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1Mjc2NFxcdWZlMGYmendqO1xcdWQ4M2RcXHVkYzhiJnp3ajtcXHVkODNkXFx1ZGM2OCcsXG4gICdjb3VwbGVraXNzX21hbl93b21hbic6J1xcdWQ4M2RcXHVkYzhmJyxcbiAgJ2NvdXBsZWtpc3Nfd29tYW5fd29tYW4nOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1Mjc2NFxcdWZlMGYmendqO1xcdWQ4M2RcXHVkYzhiJnp3ajtcXHVkODNkXFx1ZGM2OScsXG4gICdjb3cnOidcXHVkODNkXFx1ZGMyZScsXG4gICdjb3cyJzonXFx1ZDgzZFxcdWRjMDQnLFxuICAnY293Ym95X2hhdF9mYWNlJzonXFx1ZDgzZVxcdWRkMjAnLFxuICAnY3JhYic6J1xcdWQ4M2VcXHVkZDgwJyxcbiAgJ2NyYXlvbic6J1xcdWQ4M2RcXHVkZDhkJyxcbiAgJ2NyZWRpdF9jYXJkJzonXFx1ZDgzZFxcdWRjYjMnLFxuICAnY3Jlc2NlbnRfbW9vbic6J1xcdWQ4M2NcXHVkZjE5JyxcbiAgJ2NyaWNrZXQnOidcXHVkODNjXFx1ZGZjZicsXG4gICdjcm9jb2RpbGUnOidcXHVkODNkXFx1ZGMwYScsXG4gICdjcm9pc3NhbnQnOidcXHVkODNlXFx1ZGQ1MCcsXG4gICdjcm9zc2VkX2ZpbmdlcnMnOidcXHVkODNlXFx1ZGQxZScsXG4gICdjcm9zc2VkX2ZsYWdzJzonXFx1ZDgzY1xcdWRmOGMnLFxuICAnY3Jvc3NlZF9zd29yZHMnOidcXHUyNjk0XFx1ZmUwZicsXG4gICdjcm93bic6J1xcdWQ4M2RcXHVkYzUxJyxcbiAgJ2NyeSc6J1xcdWQ4M2RcXHVkZTIyJyxcbiAgJ2NyeWluZ19jYXRfZmFjZSc6J1xcdWQ4M2RcXHVkZTNmJyxcbiAgJ2NyeXN0YWxfYmFsbCc6J1xcdWQ4M2RcXHVkZDJlJyxcbiAgJ2N1Y3VtYmVyJzonXFx1ZDgzZVxcdWRkNTInLFxuICAnY3VwaWQnOidcXHVkODNkXFx1ZGM5OCcsXG4gICdjdXJseV9sb29wJzonXFx1MjdiMCcsXG4gICdjdXJyZW5jeV9leGNoYW5nZSc6J1xcdWQ4M2RcXHVkY2IxJyxcbiAgJ2N1cnJ5JzonXFx1ZDgzY1xcdWRmNWInLFxuICAnY3VzdGFyZCc6J1xcdWQ4M2NcXHVkZjZlJyxcbiAgJ2N1c3RvbXMnOidcXHVkODNkXFx1ZGVjMycsXG4gICdjeWNsb25lJzonXFx1ZDgzY1xcdWRmMDAnLFxuICAnZGFnZ2VyJzonXFx1ZDgzZFxcdWRkZTEnLFxuICAnZGFuY2VyJzonXFx1ZDgzZFxcdWRjODMnLFxuICAnZGFuY2luZ193b21lbic6J1xcdWQ4M2RcXHVkYzZmJyxcbiAgJ2RhbmNpbmdfbWVuJzonXFx1ZDgzZFxcdWRjNmYmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ2RhbmdvJzonXFx1ZDgzY1xcdWRmNjEnLFxuICAnZGFya19zdW5nbGFzc2VzJzonXFx1ZDgzZFxcdWRkNzYnLFxuICAnZGFydCc6J1xcdWQ4M2NcXHVkZmFmJyxcbiAgJ2Rhc2gnOidcXHVkODNkXFx1ZGNhOCcsXG4gICdkYXRlJzonXFx1ZDgzZFxcdWRjYzUnLFxuICAnZGVjaWR1b3VzX3RyZWUnOidcXHVkODNjXFx1ZGYzMycsXG4gICdkZWVyJzonXFx1ZDgzZVxcdWRkOGMnLFxuICAnZGVwYXJ0bWVudF9zdG9yZSc6J1xcdWQ4M2NcXHVkZmVjJyxcbiAgJ2RlcmVsaWN0X2hvdXNlJzonXFx1ZDgzY1xcdWRmZGEnLFxuICAnZGVzZXJ0JzonXFx1ZDgzY1xcdWRmZGMnLFxuICAnZGVzZXJ0X2lzbGFuZCc6J1xcdWQ4M2NcXHVkZmRkJyxcbiAgJ2Rlc2t0b3BfY29tcHV0ZXInOidcXHVkODNkXFx1ZGRhNScsXG4gICdtYWxlX2RldGVjdGl2ZSc6J1xcdWQ4M2RcXHVkZDc1XFx1ZmUwZicsXG4gICdkaWFtb25kX3NoYXBlX3dpdGhfYV9kb3RfaW5zaWRlJzonXFx1ZDgzZFxcdWRjYTAnLFxuICAnZGlhbW9uZHMnOidcXHUyNjY2XFx1ZmUwZicsXG4gICdkaXNhcHBvaW50ZWQnOidcXHVkODNkXFx1ZGUxZScsXG4gICdkaXNhcHBvaW50ZWRfcmVsaWV2ZWQnOidcXHVkODNkXFx1ZGUyNScsXG4gICdkaXp6eSc6J1xcdWQ4M2RcXHVkY2FiJyxcbiAgJ2Rpenp5X2ZhY2UnOidcXHVkODNkXFx1ZGUzNScsXG4gICdkb19ub3RfbGl0dGVyJzonXFx1ZDgzZFxcdWRlYWYnLFxuICAnZG9nJzonXFx1ZDgzZFxcdWRjMzYnLFxuICAnZG9nMic6J1xcdWQ4M2RcXHVkYzE1JyxcbiAgJ2RvbGxhcic6J1xcdWQ4M2RcXHVkY2I1JyxcbiAgJ2RvbGxzJzonXFx1ZDgzY1xcdWRmOGUnLFxuICAnZG9scGhpbic6J1xcdWQ4M2RcXHVkYzJjJyxcbiAgJ2Rvb3InOidcXHVkODNkXFx1ZGVhYScsXG4gICdkb3VnaG51dCc6J1xcdWQ4M2NcXHVkZjY5JyxcbiAgJ2RvdmUnOidcXHVkODNkXFx1ZGQ0YScsXG4gICdkcmFnb24nOidcXHVkODNkXFx1ZGMwOScsXG4gICdkcmFnb25fZmFjZSc6J1xcdWQ4M2RcXHVkYzMyJyxcbiAgJ2RyZXNzJzonXFx1ZDgzZFxcdWRjNTcnLFxuICAnZHJvbWVkYXJ5X2NhbWVsJzonXFx1ZDgzZFxcdWRjMmEnLFxuICAnZHJvb2xpbmdfZmFjZSc6J1xcdWQ4M2VcXHVkZDI0JyxcbiAgJ2Ryb3BsZXQnOidcXHVkODNkXFx1ZGNhNycsXG4gICdkcnVtJzonXFx1ZDgzZVxcdWRkNDEnLFxuICAnZHVjayc6J1xcdWQ4M2VcXHVkZDg2JyxcbiAgJ2R2ZCc6J1xcdWQ4M2RcXHVkY2MwJyxcbiAgJ2UtbWFpbCc6J1xcdWQ4M2RcXHVkY2U3JyxcbiAgJ2VhZ2xlJzonXFx1ZDgzZVxcdWRkODUnLFxuICAnZWFyJzonXFx1ZDgzZFxcdWRjNDInLFxuICAnZWFyX29mX3JpY2UnOidcXHVkODNjXFx1ZGYzZScsXG4gICdlYXJ0aF9hZnJpY2EnOidcXHVkODNjXFx1ZGYwZCcsXG4gICdlYXJ0aF9hbWVyaWNhcyc6J1xcdWQ4M2NcXHVkZjBlJyxcbiAgJ2VhcnRoX2FzaWEnOidcXHVkODNjXFx1ZGYwZicsXG4gICdlZ2cnOidcXHVkODNlXFx1ZGQ1YScsXG4gICdlZ2dwbGFudCc6J1xcdWQ4M2NcXHVkZjQ2JyxcbiAgJ2VpZ2h0X3BvaW50ZWRfYmxhY2tfc3Rhcic6J1xcdTI3MzRcXHVmZTBmJyxcbiAgJ2VpZ2h0X3Nwb2tlZF9hc3Rlcmlzayc6J1xcdTI3MzNcXHVmZTBmJyxcbiAgJ2VsZWN0cmljX3BsdWcnOidcXHVkODNkXFx1ZGQwYycsXG4gICdlbGVwaGFudCc6J1xcdWQ4M2RcXHVkYzE4JyxcbiAgJ2VtYWlsJzonXFx1MjcwOVxcdWZlMGYnLFxuICAnZW5kJzonXFx1ZDgzZFxcdWRkMWEnLFxuICAnZW52ZWxvcGVfd2l0aF9hcnJvdyc6J1xcdWQ4M2RcXHVkY2U5JyxcbiAgJ2V1cm8nOidcXHVkODNkXFx1ZGNiNicsXG4gICdldXJvcGVhbl9jYXN0bGUnOidcXHVkODNjXFx1ZGZmMCcsXG4gICdldXJvcGVhbl9wb3N0X29mZmljZSc6J1xcdWQ4M2NcXHVkZmU0JyxcbiAgJ2V2ZXJncmVlbl90cmVlJzonXFx1ZDgzY1xcdWRmMzInLFxuICAnZXhjbGFtYXRpb24nOidcXHUyNzU3XFx1ZmUwZicsXG4gICdleHByZXNzaW9ubGVzcyc6J1xcdWQ4M2RcXHVkZTExJyxcbiAgJ2V5ZSc6J1xcdWQ4M2RcXHVkYzQxJyxcbiAgJ2V5ZV9zcGVlY2hfYnViYmxlJzonXFx1ZDgzZFxcdWRjNDEmendqO1xcdWQ4M2RcXHVkZGU4JyxcbiAgJ2V5ZWdsYXNzZXMnOidcXHVkODNkXFx1ZGM1MycsXG4gICdleWVzJzonXFx1ZDgzZFxcdWRjNDAnLFxuICAnZmFjZV93aXRoX2hlYWRfYmFuZGFnZSc6J1xcdWQ4M2VcXHVkZDE1JyxcbiAgJ2ZhY2Vfd2l0aF90aGVybW9tZXRlcic6J1xcdWQ4M2VcXHVkZDEyJyxcbiAgJ2Zpc3Rfb25jb21pbmcnOidcXHVkODNkXFx1ZGM0YScsXG4gICdmYWN0b3J5JzonXFx1ZDgzY1xcdWRmZWQnLFxuICAnZmFsbGVuX2xlYWYnOidcXHVkODNjXFx1ZGY0MicsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2JveSc6J1xcdWQ4M2RcXHVkYzZhJyxcbiAgJ2ZhbWlseV9tYW5fYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fYm95X2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NiZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl9naXJsJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV9tYW5fZ2lybF9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fZ2lybF9naXJsJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfbWFuX21hbl9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY2Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX21hbl9naXJsJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfbWFuX21hbl9naXJsX2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV9tYW5fd29tYW5fYm95X2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fd29tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X21hbl93b21hbl9naXJsX2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fd29tYW5fZ2lybF9naXJsJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X3dvbWFuX2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfd29tYW5fYm95X2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NiZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX2dpcmwnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X3dvbWFuX2dpcmxfYm95JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfd29tYW5fZ2lybF9naXJsJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfd29tYW5fd29tYW5fYm95JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfd29tYW5fd29tYW5fYm95X2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV93b21hbl93b21hbl9naXJsJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfd29tYW5fd29tYW5fZ2lybF9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfd29tYW5fd29tYW5fZ2lybF9naXJsJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFzdF9mb3J3YXJkJzonXFx1MjNlOScsXG4gICdmYXgnOidcXHVkODNkXFx1ZGNlMCcsXG4gICdmZWFyZnVsJzonXFx1ZDgzZFxcdWRlMjgnLFxuICAnZmVldCc6J1xcdWQ4M2RcXHVkYzNlJyxcbiAgJ2ZlbWFsZV9kZXRlY3RpdmUnOidcXHVkODNkXFx1ZGQ3NVxcdWZlMGYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2ZlcnJpc193aGVlbCc6J1xcdWQ4M2NcXHVkZmExJyxcbiAgJ2ZlcnJ5JzonXFx1MjZmNCcsXG4gICdmaWVsZF9ob2NrZXknOidcXHVkODNjXFx1ZGZkMScsXG4gICdmaWxlX2NhYmluZXQnOidcXHVkODNkXFx1ZGRjNCcsXG4gICdmaWxlX2ZvbGRlcic6J1xcdWQ4M2RcXHVkY2MxJyxcbiAgJ2ZpbG1fcHJvamVjdG9yJzonXFx1ZDgzZFxcdWRjZmQnLFxuICAnZmlsbV9zdHJpcCc6J1xcdWQ4M2NcXHVkZjllJyxcbiAgJ2ZpcmUnOidcXHVkODNkXFx1ZGQyNScsXG4gICdmaXJlX2VuZ2luZSc6J1xcdWQ4M2RcXHVkZTkyJyxcbiAgJ2ZpcmV3b3Jrcyc6J1xcdWQ4M2NcXHVkZjg2JyxcbiAgJ2ZpcnN0X3F1YXJ0ZXJfbW9vbic6J1xcdWQ4M2NcXHVkZjEzJyxcbiAgJ2ZpcnN0X3F1YXJ0ZXJfbW9vbl93aXRoX2ZhY2UnOidcXHVkODNjXFx1ZGYxYicsXG4gICdmaXNoJzonXFx1ZDgzZFxcdWRjMWYnLFxuICAnZmlzaF9jYWtlJzonXFx1ZDgzY1xcdWRmNjUnLFxuICAnZmlzaGluZ19wb2xlX2FuZF9maXNoJzonXFx1ZDgzY1xcdWRmYTMnLFxuICAnZmlzdF9yYWlzZWQnOidcXHUyNzBhJyxcbiAgJ2Zpc3RfbGVmdCc6J1xcdWQ4M2VcXHVkZDFiJyxcbiAgJ2Zpc3RfcmlnaHQnOidcXHVkODNlXFx1ZGQxYycsXG4gICdmbGFncyc6J1xcdWQ4M2NcXHVkZjhmJyxcbiAgJ2ZsYXNobGlnaHQnOidcXHVkODNkXFx1ZGQyNicsXG4gICdmbGV1cl9kZV9saXMnOidcXHUyNjljXFx1ZmUwZicsXG4gICdmbGlnaHRfYXJyaXZhbCc6J1xcdWQ4M2RcXHVkZWVjJyxcbiAgJ2ZsaWdodF9kZXBhcnR1cmUnOidcXHVkODNkXFx1ZGVlYicsXG4gICdmbG9wcHlfZGlzayc6J1xcdWQ4M2RcXHVkY2JlJyxcbiAgJ2Zsb3dlcl9wbGF5aW5nX2NhcmRzJzonXFx1ZDgzY1xcdWRmYjQnLFxuICAnZmx1c2hlZCc6J1xcdWQ4M2RcXHVkZTMzJyxcbiAgJ2ZvZyc6J1xcdWQ4M2NcXHVkZjJiJyxcbiAgJ2ZvZ2d5JzonXFx1ZDgzY1xcdWRmMDEnLFxuICAnZm9vdGJhbGwnOidcXHVkODNjXFx1ZGZjOCcsXG4gICdmb290cHJpbnRzJzonXFx1ZDgzZFxcdWRjNjMnLFxuICAnZm9ya19hbmRfa25pZmUnOidcXHVkODNjXFx1ZGY3NCcsXG4gICdmb3VudGFpbic6J1xcdTI2ZjJcXHVmZTBmJyxcbiAgJ2ZvdW50YWluX3Blbic6J1xcdWQ4M2RcXHVkZDhiJyxcbiAgJ2ZvdXJfbGVhZl9jbG92ZXInOidcXHVkODNjXFx1ZGY0MCcsXG4gICdmb3hfZmFjZSc6J1xcdWQ4M2VcXHVkZDhhJyxcbiAgJ2ZyYW1lZF9waWN0dXJlJzonXFx1ZDgzZFxcdWRkYmMnLFxuICAnZnJlZSc6J1xcdWQ4M2NcXHVkZDkzJyxcbiAgJ2ZyaWVkX2VnZyc6J1xcdWQ4M2NcXHVkZjczJyxcbiAgJ2ZyaWVkX3NocmltcCc6J1xcdWQ4M2NcXHVkZjY0JyxcbiAgJ2ZyaWVzJzonXFx1ZDgzY1xcdWRmNWYnLFxuICAnZnJvZyc6J1xcdWQ4M2RcXHVkYzM4JyxcbiAgJ2Zyb3duaW5nJzonXFx1ZDgzZFxcdWRlMjYnLFxuICAnZnJvd25pbmdfZmFjZSc6J1xcdTI2MzlcXHVmZTBmJyxcbiAgJ2Zyb3duaW5nX21hbic6J1xcdWQ4M2RcXHVkZTRkJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdmcm93bmluZ193b21hbic6J1xcdWQ4M2RcXHVkZTRkJyxcbiAgJ21pZGRsZV9maW5nZXInOidcXHVkODNkXFx1ZGQ5NScsXG4gICdmdWVscHVtcCc6J1xcdTI2ZmRcXHVmZTBmJyxcbiAgJ2Z1bGxfbW9vbic6J1xcdWQ4M2NcXHVkZjE1JyxcbiAgJ2Z1bGxfbW9vbl93aXRoX2ZhY2UnOidcXHVkODNjXFx1ZGYxZCcsXG4gICdmdW5lcmFsX3Vybic6J1xcdTI2YjFcXHVmZTBmJyxcbiAgJ2dhbWVfZGllJzonXFx1ZDgzY1xcdWRmYjInLFxuICAnZ2Vhcic6J1xcdTI2OTlcXHVmZTBmJyxcbiAgJ2dlbSc6J1xcdWQ4M2RcXHVkYzhlJyxcbiAgJ2dlbWluaSc6J1xcdTI2NGFcXHVmZTBmJyxcbiAgJ2dob3N0JzonXFx1ZDgzZFxcdWRjN2InLFxuICAnZ2lmdCc6J1xcdWQ4M2NcXHVkZjgxJyxcbiAgJ2dpZnRfaGVhcnQnOidcXHVkODNkXFx1ZGM5ZCcsXG4gICdnaXJsJzonXFx1ZDgzZFxcdWRjNjcnLFxuICAnZ2xvYmVfd2l0aF9tZXJpZGlhbnMnOidcXHVkODNjXFx1ZGYxMCcsXG4gICdnb2FsX25ldCc6J1xcdWQ4M2VcXHVkZDQ1JyxcbiAgJ2dvYXQnOidcXHVkODNkXFx1ZGMxMCcsXG4gICdnb2xmJzonXFx1MjZmM1xcdWZlMGYnLFxuICAnZ29sZmluZ19tYW4nOidcXHVkODNjXFx1ZGZjY1xcdWZlMGYnLFxuICAnZ29sZmluZ193b21hbic6J1xcdWQ4M2NcXHVkZmNjXFx1ZmUwZiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnZ29yaWxsYSc6J1xcdWQ4M2VcXHVkZDhkJyxcbiAgJ2dyYXBlcyc6J1xcdWQ4M2NcXHVkZjQ3JyxcbiAgJ2dyZWVuX2FwcGxlJzonXFx1ZDgzY1xcdWRmNGYnLFxuICAnZ3JlZW5fYm9vayc6J1xcdWQ4M2RcXHVkY2Q3JyxcbiAgJ2dyZWVuX2hlYXJ0JzonXFx1ZDgzZFxcdWRjOWEnLFxuICAnZ3JlZW5fc2FsYWQnOidcXHVkODNlXFx1ZGQ1NycsXG4gICdncmV5X2V4Y2xhbWF0aW9uJzonXFx1Mjc1NScsXG4gICdncmV5X3F1ZXN0aW9uJzonXFx1Mjc1NCcsXG4gICdncmltYWNpbmcnOidcXHVkODNkXFx1ZGUyYycsXG4gICdncmluJzonXFx1ZDgzZFxcdWRlMDEnLFxuICAnZ3Jpbm5pbmcnOidcXHVkODNkXFx1ZGUwMCcsXG4gICdndWFyZHNtYW4nOidcXHVkODNkXFx1ZGM4MicsXG4gICdndWFyZHN3b21hbic6J1xcdWQ4M2RcXHVkYzgyJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdndWl0YXInOidcXHVkODNjXFx1ZGZiOCcsXG4gICdndW4nOidcXHVkODNkXFx1ZGQyYicsXG4gICdoYWlyY3V0X3dvbWFuJzonXFx1ZDgzZFxcdWRjODcnLFxuICAnaGFpcmN1dF9tYW4nOidcXHVkODNkXFx1ZGM4NyZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnaGFtYnVyZ2VyJzonXFx1ZDgzY1xcdWRmNTQnLFxuICAnaGFtbWVyJzonXFx1ZDgzZFxcdWRkMjgnLFxuICAnaGFtbWVyX2FuZF9waWNrJzonXFx1MjY5MicsXG4gICdoYW1tZXJfYW5kX3dyZW5jaCc6J1xcdWQ4M2RcXHVkZWUwJyxcbiAgJ2hhbXN0ZXInOidcXHVkODNkXFx1ZGMzOScsXG4gICdoYW5kJzonXFx1MjcwYicsXG4gICdoYW5kYmFnJzonXFx1ZDgzZFxcdWRjNWMnLFxuICAnaGFuZHNoYWtlJzonXFx1ZDgzZVxcdWRkMWQnLFxuICAnaGFua2V5JzonXFx1ZDgzZFxcdWRjYTknLFxuICAnaGF0Y2hlZF9jaGljayc6J1xcdWQ4M2RcXHVkYzI1JyxcbiAgJ2hhdGNoaW5nX2NoaWNrJzonXFx1ZDgzZFxcdWRjMjMnLFxuICAnaGVhZHBob25lcyc6J1xcdWQ4M2NcXHVkZmE3JyxcbiAgJ2hlYXJfbm9fZXZpbCc6J1xcdWQ4M2RcXHVkZTQ5JyxcbiAgJ2hlYXJ0JzonXFx1Mjc2NFxcdWZlMGYnLFxuICAnaGVhcnRfZGVjb3JhdGlvbic6J1xcdWQ4M2RcXHVkYzlmJyxcbiAgJ2hlYXJ0X2V5ZXMnOidcXHVkODNkXFx1ZGUwZCcsXG4gICdoZWFydF9leWVzX2NhdCc6J1xcdWQ4M2RcXHVkZTNiJyxcbiAgJ2hlYXJ0YmVhdCc6J1xcdWQ4M2RcXHVkYzkzJyxcbiAgJ2hlYXJ0cHVsc2UnOidcXHVkODNkXFx1ZGM5NycsXG4gICdoZWFydHMnOidcXHUyNjY1XFx1ZmUwZicsXG4gICdoZWF2eV9jaGVja19tYXJrJzonXFx1MjcxNFxcdWZlMGYnLFxuICAnaGVhdnlfZGl2aXNpb25fc2lnbic6J1xcdTI3OTcnLFxuICAnaGVhdnlfZG9sbGFyX3NpZ24nOidcXHVkODNkXFx1ZGNiMicsXG4gICdoZWF2eV9oZWFydF9leGNsYW1hdGlvbic6J1xcdTI3NjNcXHVmZTBmJyxcbiAgJ2hlYXZ5X21pbnVzX3NpZ24nOidcXHUyNzk2JyxcbiAgJ2hlYXZ5X211bHRpcGxpY2F0aW9uX3gnOidcXHUyNzE2XFx1ZmUwZicsXG4gICdoZWF2eV9wbHVzX3NpZ24nOidcXHUyNzk1JyxcbiAgJ2hlbGljb3B0ZXInOidcXHVkODNkXFx1ZGU4MScsXG4gICdoZXJiJzonXFx1ZDgzY1xcdWRmM2YnLFxuICAnaGliaXNjdXMnOidcXHVkODNjXFx1ZGYzYScsXG4gICdoaWdoX2JyaWdodG5lc3MnOidcXHVkODNkXFx1ZGQwNicsXG4gICdoaWdoX2hlZWwnOidcXHVkODNkXFx1ZGM2MCcsXG4gICdob2Nobyc6J1xcdWQ4M2RcXHVkZDJhJyxcbiAgJ2hvbGUnOidcXHVkODNkXFx1ZGQ3MycsXG4gICdob25leV9wb3QnOidcXHVkODNjXFx1ZGY2ZicsXG4gICdob3JzZSc6J1xcdWQ4M2RcXHVkYzM0JyxcbiAgJ2hvcnNlX3JhY2luZyc6J1xcdWQ4M2NcXHVkZmM3JyxcbiAgJ2hvc3BpdGFsJzonXFx1ZDgzY1xcdWRmZTUnLFxuICAnaG90X3BlcHBlcic6J1xcdWQ4M2NcXHVkZjM2JyxcbiAgJ2hvdGRvZyc6J1xcdWQ4M2NcXHVkZjJkJyxcbiAgJ2hvdGVsJzonXFx1ZDgzY1xcdWRmZTgnLFxuICAnaG90c3ByaW5ncyc6J1xcdTI2NjhcXHVmZTBmJyxcbiAgJ2hvdXJnbGFzcyc6J1xcdTIzMWJcXHVmZTBmJyxcbiAgJ2hvdXJnbGFzc19mbG93aW5nX3NhbmQnOidcXHUyM2YzJyxcbiAgJ2hvdXNlJzonXFx1ZDgzY1xcdWRmZTAnLFxuICAnaG91c2Vfd2l0aF9nYXJkZW4nOidcXHVkODNjXFx1ZGZlMScsXG4gICdob3VzZXMnOidcXHVkODNjXFx1ZGZkOCcsXG4gICdodWdzJzonXFx1ZDgzZVxcdWRkMTcnLFxuICAnaHVzaGVkJzonXFx1ZDgzZFxcdWRlMmYnLFxuICAnaWNlX2NyZWFtJzonXFx1ZDgzY1xcdWRmNjgnLFxuICAnaWNlX2hvY2tleSc6J1xcdWQ4M2NcXHVkZmQyJyxcbiAgJ2ljZV9za2F0ZSc6J1xcdTI2ZjgnLFxuICAnaWNlY3JlYW0nOidcXHVkODNjXFx1ZGY2NicsXG4gICdpZCc6J1xcdWQ4M2NcXHVkZDk0JyxcbiAgJ2lkZW9ncmFwaF9hZHZhbnRhZ2UnOidcXHVkODNjXFx1ZGU1MCcsXG4gICdpbXAnOidcXHVkODNkXFx1ZGM3ZicsXG4gICdpbmJveF90cmF5JzonXFx1ZDgzZFxcdWRjZTUnLFxuICAnaW5jb21pbmdfZW52ZWxvcGUnOidcXHVkODNkXFx1ZGNlOCcsXG4gICd0aXBwaW5nX2hhbmRfd29tYW4nOidcXHVkODNkXFx1ZGM4MScsXG4gICdpbmZvcm1hdGlvbl9zb3VyY2UnOidcXHUyMTM5XFx1ZmUwZicsXG4gICdpbm5vY2VudCc6J1xcdWQ4M2RcXHVkZTA3JyxcbiAgJ2ludGVycm9iYW5nJzonXFx1MjA0OVxcdWZlMGYnLFxuICAnaXBob25lJzonXFx1ZDgzZFxcdWRjZjEnLFxuICAnaXpha2F5YV9sYW50ZXJuJzonXFx1ZDgzY1xcdWRmZWUnLFxuICAnamFja19vX2xhbnRlcm4nOidcXHVkODNjXFx1ZGY4MycsXG4gICdqYXBhbic6J1xcdWQ4M2RcXHVkZGZlJyxcbiAgJ2phcGFuZXNlX2Nhc3RsZSc6J1xcdWQ4M2NcXHVkZmVmJyxcbiAgJ2phcGFuZXNlX2dvYmxpbic6J1xcdWQ4M2RcXHVkYzdhJyxcbiAgJ2phcGFuZXNlX29ncmUnOidcXHVkODNkXFx1ZGM3OScsXG4gICdqZWFucyc6J1xcdWQ4M2RcXHVkYzU2JyxcbiAgJ2pveSc6J1xcdWQ4M2RcXHVkZTAyJyxcbiAgJ2pveV9jYXQnOidcXHVkODNkXFx1ZGUzOScsXG4gICdqb3lzdGljayc6J1xcdWQ4M2RcXHVkZDc5JyxcbiAgJ2thYWJhJzonXFx1ZDgzZFxcdWRkNGInLFxuICAna2V5JzonXFx1ZDgzZFxcdWRkMTEnLFxuICAna2V5Ym9hcmQnOidcXHUyMzI4XFx1ZmUwZicsXG4gICdrZXljYXBfdGVuJzonXFx1ZDgzZFxcdWRkMWYnLFxuICAna2lja19zY29vdGVyJzonXFx1ZDgzZFxcdWRlZjQnLFxuICAna2ltb25vJzonXFx1ZDgzZFxcdWRjNTgnLFxuICAna2lzcyc6J1xcdWQ4M2RcXHVkYzhiJyxcbiAgJ2tpc3NpbmcnOidcXHVkODNkXFx1ZGUxNycsXG4gICdraXNzaW5nX2NhdCc6J1xcdWQ4M2RcXHVkZTNkJyxcbiAgJ2tpc3NpbmdfY2xvc2VkX2V5ZXMnOidcXHVkODNkXFx1ZGUxYScsXG4gICdraXNzaW5nX2hlYXJ0JzonXFx1ZDgzZFxcdWRlMTgnLFxuICAna2lzc2luZ19zbWlsaW5nX2V5ZXMnOidcXHVkODNkXFx1ZGUxOScsXG4gICdraXdpX2ZydWl0JzonXFx1ZDgzZVxcdWRkNWQnLFxuICAna29hbGEnOidcXHVkODNkXFx1ZGMyOCcsXG4gICdrb2tvJzonXFx1ZDgzY1xcdWRlMDEnLFxuICAnbGFiZWwnOidcXHVkODNjXFx1ZGZmNycsXG4gICdsYXJnZV9ibHVlX2NpcmNsZSc6J1xcdWQ4M2RcXHVkZDM1JyxcbiAgJ2xhcmdlX2JsdWVfZGlhbW9uZCc6J1xcdWQ4M2RcXHVkZDM3JyxcbiAgJ2xhcmdlX29yYW5nZV9kaWFtb25kJzonXFx1ZDgzZFxcdWRkMzYnLFxuICAnbGFzdF9xdWFydGVyX21vb24nOidcXHVkODNjXFx1ZGYxNycsXG4gICdsYXN0X3F1YXJ0ZXJfbW9vbl93aXRoX2ZhY2UnOidcXHVkODNjXFx1ZGYxYycsXG4gICdsYXRpbl9jcm9zcyc6J1xcdTI3MWRcXHVmZTBmJyxcbiAgJ2xhdWdoaW5nJzonXFx1ZDgzZFxcdWRlMDYnLFxuICAnbGVhdmVzJzonXFx1ZDgzY1xcdWRmNDMnLFxuICAnbGVkZ2VyJzonXFx1ZDgzZFxcdWRjZDInLFxuICAnbGVmdF9sdWdnYWdlJzonXFx1ZDgzZFxcdWRlYzUnLFxuICAnbGVmdF9yaWdodF9hcnJvdyc6J1xcdTIxOTRcXHVmZTBmJyxcbiAgJ2xlZnR3YXJkc19hcnJvd193aXRoX2hvb2snOidcXHUyMWE5XFx1ZmUwZicsXG4gICdsZW1vbic6J1xcdWQ4M2NcXHVkZjRiJyxcbiAgJ2xlbyc6J1xcdTI2NGNcXHVmZTBmJyxcbiAgJ2xlb3BhcmQnOidcXHVkODNkXFx1ZGMwNicsXG4gICdsZXZlbF9zbGlkZXInOidcXHVkODNjXFx1ZGY5YScsXG4gICdsaWJyYSc6J1xcdTI2NGVcXHVmZTBmJyxcbiAgJ2xpZ2h0X3JhaWwnOidcXHVkODNkXFx1ZGU4OCcsXG4gICdsaW5rJzonXFx1ZDgzZFxcdWRkMTcnLFxuICAnbGlvbic6J1xcdWQ4M2VcXHVkZDgxJyxcbiAgJ2xpcHMnOidcXHVkODNkXFx1ZGM0NCcsXG4gICdsaXBzdGljayc6J1xcdWQ4M2RcXHVkYzg0JyxcbiAgJ2xpemFyZCc6J1xcdWQ4M2VcXHVkZDhlJyxcbiAgJ2xvY2snOidcXHVkODNkXFx1ZGQxMicsXG4gICdsb2NrX3dpdGhfaW5rX3Blbic6J1xcdWQ4M2RcXHVkZDBmJyxcbiAgJ2xvbGxpcG9wJzonXFx1ZDgzY1xcdWRmNmQnLFxuICAnbG9vcCc6J1xcdTI3YmYnLFxuICAnbG91ZF9zb3VuZCc6J1xcdWQ4M2RcXHVkZDBhJyxcbiAgJ2xvdWRzcGVha2VyJzonXFx1ZDgzZFxcdWRjZTInLFxuICAnbG92ZV9ob3RlbCc6J1xcdWQ4M2NcXHVkZmU5JyxcbiAgJ2xvdmVfbGV0dGVyJzonXFx1ZDgzZFxcdWRjOGMnLFxuICAnbG93X2JyaWdodG5lc3MnOidcXHVkODNkXFx1ZGQwNScsXG4gICdseWluZ19mYWNlJzonXFx1ZDgzZVxcdWRkMjUnLFxuICAnbSc6J1xcdTI0YzJcXHVmZTBmJyxcbiAgJ21hZyc6J1xcdWQ4M2RcXHVkZDBkJyxcbiAgJ21hZ19yaWdodCc6J1xcdWQ4M2RcXHVkZDBlJyxcbiAgJ21haGpvbmcnOidcXHVkODNjXFx1ZGMwNFxcdWZlMGYnLFxuICAnbWFpbGJveCc6J1xcdWQ4M2RcXHVkY2ViJyxcbiAgJ21haWxib3hfY2xvc2VkJzonXFx1ZDgzZFxcdWRjZWEnLFxuICAnbWFpbGJveF93aXRoX21haWwnOidcXHVkODNkXFx1ZGNlYycsXG4gICdtYWlsYm94X3dpdGhfbm9fbWFpbCc6J1xcdWQ4M2RcXHVkY2VkJyxcbiAgJ21hbic6J1xcdWQ4M2RcXHVkYzY4JyxcbiAgJ21hbl9hcnRpc3QnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmYTgnLFxuICAnbWFuX2FzdHJvbmF1dCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGU4MCcsXG4gICdtYW5fY2FydHdoZWVsaW5nJzonXFx1ZDgzZVxcdWRkMzgmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21hbl9jb29rJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZjczJyxcbiAgJ21hbl9kYW5jaW5nJzonXFx1ZDgzZFxcdWRkN2EnLFxuICAnbWFuX2ZhY2VwYWxtaW5nJzonXFx1ZDgzZVxcdWRkMjYmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21hbl9mYWN0b3J5X3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGZlZCcsXG4gICdtYW5fZmFybWVyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZjNlJyxcbiAgJ21hbl9maXJlZmlnaHRlcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGU5MicsXG4gICdtYW5faGVhbHRoX3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHUyNjk1XFx1ZmUwZicsXG4gICdtYW5faW5fdHV4ZWRvJzonXFx1ZDgzZVxcdWRkMzUnLFxuICAnbWFuX2p1ZGdlJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdTI2OTZcXHVmZTBmJyxcbiAgJ21hbl9qdWdnbGluZyc6J1xcdWQ4M2VcXHVkZDM5Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fbWVjaGFuaWMnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRkMjcnLFxuICAnbWFuX29mZmljZV93b3JrZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjYmMnLFxuICAnbWFuX3BpbG90JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdTI3MDhcXHVmZTBmJyxcbiAgJ21hbl9wbGF5aW5nX2hhbmRiYWxsJzonXFx1ZDgzZVxcdWRkM2UmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21hbl9wbGF5aW5nX3dhdGVyX3BvbG8nOidcXHVkODNlXFx1ZGQzZCZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWFuX3NjaWVudGlzdCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGQyYycsXG4gICdtYW5fc2hydWdnaW5nJzonXFx1ZDgzZVxcdWRkMzcmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21hbl9zaW5nZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmYTQnLFxuICAnbWFuX3N0dWRlbnQnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmOTMnLFxuICAnbWFuX3RlYWNoZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmZWInLFxuICAnbWFuX3RlY2hub2xvZ2lzdCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGNiYicsXG4gICdtYW5fd2l0aF9ndWFfcGlfbWFvJzonXFx1ZDgzZFxcdWRjNzInLFxuICAnbWFuX3dpdGhfdHVyYmFuJzonXFx1ZDgzZFxcdWRjNzMnLFxuICAndGFuZ2VyaW5lJzonXFx1ZDgzY1xcdWRmNGEnLFxuICAnbWFuc19zaG9lJzonXFx1ZDgzZFxcdWRjNWUnLFxuICAnbWFudGVscGllY2VfY2xvY2snOidcXHVkODNkXFx1ZGQ3MCcsXG4gICdtYXBsZV9sZWFmJzonXFx1ZDgzY1xcdWRmNDEnLFxuICAnbWFydGlhbF9hcnRzX3VuaWZvcm0nOidcXHVkODNlXFx1ZGQ0YicsXG4gICdtYXNrJzonXFx1ZDgzZFxcdWRlMzcnLFxuICAnbWFzc2FnZV93b21hbic6J1xcdWQ4M2RcXHVkYzg2JyxcbiAgJ21hc3NhZ2VfbWFuJzonXFx1ZDgzZFxcdWRjODYmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21lYXRfb25fYm9uZSc6J1xcdWQ4M2NcXHVkZjU2JyxcbiAgJ21lZGFsX21pbGl0YXJ5JzonXFx1ZDgzY1xcdWRmOTYnLFxuICAnbWVkYWxfc3BvcnRzJzonXFx1ZDgzY1xcdWRmYzUnLFxuICAnbWVnYSc6J1xcdWQ4M2RcXHVkY2UzJyxcbiAgJ21lbG9uJzonXFx1ZDgzY1xcdWRmNDgnLFxuICAnbWVtbyc6J1xcdWQ4M2RcXHVkY2RkJyxcbiAgJ21lbl93cmVzdGxpbmcnOidcXHVkODNlXFx1ZGQzYyZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWVub3JhaCc6J1xcdWQ4M2RcXHVkZDRlJyxcbiAgJ21lbnMnOidcXHVkODNkXFx1ZGViOScsXG4gICdtZXRhbCc6J1xcdWQ4M2VcXHVkZDE4JyxcbiAgJ21ldHJvJzonXFx1ZDgzZFxcdWRlODcnLFxuICAnbWljcm9waG9uZSc6J1xcdWQ4M2NcXHVkZmE0JyxcbiAgJ21pY3Jvc2NvcGUnOidcXHVkODNkXFx1ZGQyYycsXG4gICdtaWxrX2dsYXNzJzonXFx1ZDgzZVxcdWRkNWInLFxuICAnbWlsa3lfd2F5JzonXFx1ZDgzY1xcdWRmMGMnLFxuICAnbWluaWJ1cyc6J1xcdWQ4M2RcXHVkZTkwJyxcbiAgJ21pbmlkaXNjJzonXFx1ZDgzZFxcdWRjYmQnLFxuICAnbW9iaWxlX3Bob25lX29mZic6J1xcdWQ4M2RcXHVkY2Y0JyxcbiAgJ21vbmV5X21vdXRoX2ZhY2UnOidcXHVkODNlXFx1ZGQxMScsXG4gICdtb25leV93aXRoX3dpbmdzJzonXFx1ZDgzZFxcdWRjYjgnLFxuICAnbW9uZXliYWcnOidcXHVkODNkXFx1ZGNiMCcsXG4gICdtb25rZXknOidcXHVkODNkXFx1ZGMxMicsXG4gICdtb25rZXlfZmFjZSc6J1xcdWQ4M2RcXHVkYzM1JyxcbiAgJ21vbm9yYWlsJzonXFx1ZDgzZFxcdWRlOWQnLFxuICAnbW9vbic6J1xcdWQ4M2NcXHVkZjE0JyxcbiAgJ21vcnRhcl9ib2FyZCc6J1xcdWQ4M2NcXHVkZjkzJyxcbiAgJ21vc3F1ZSc6J1xcdWQ4M2RcXHVkZDRjJyxcbiAgJ21vdG9yX2JvYXQnOidcXHVkODNkXFx1ZGVlNScsXG4gICdtb3Rvcl9zY29vdGVyJzonXFx1ZDgzZFxcdWRlZjUnLFxuICAnbW90b3JjeWNsZSc6J1xcdWQ4M2NcXHVkZmNkJyxcbiAgJ21vdG9yd2F5JzonXFx1ZDgzZFxcdWRlZTMnLFxuICAnbW91bnRfZnVqaSc6J1xcdWQ4M2RcXHVkZGZiJyxcbiAgJ21vdW50YWluJzonXFx1MjZmMCcsXG4gICdtb3VudGFpbl9iaWtpbmdfbWFuJzonXFx1ZDgzZFxcdWRlYjUnLFxuICAnbW91bnRhaW5fYmlraW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlYjUmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ21vdW50YWluX2NhYmxld2F5JzonXFx1ZDgzZFxcdWRlYTAnLFxuICAnbW91bnRhaW5fcmFpbHdheSc6J1xcdWQ4M2RcXHVkZTllJyxcbiAgJ21vdW50YWluX3Nub3cnOidcXHVkODNjXFx1ZGZkNCcsXG4gICdtb3VzZSc6J1xcdWQ4M2RcXHVkYzJkJyxcbiAgJ21vdXNlMic6J1xcdWQ4M2RcXHVkYzAxJyxcbiAgJ21vdmllX2NhbWVyYSc6J1xcdWQ4M2NcXHVkZmE1JyxcbiAgJ21veWFpJzonXFx1ZDgzZFxcdWRkZmYnLFxuICAnbXJzX2NsYXVzJzonXFx1ZDgzZVxcdWRkMzYnLFxuICAnbXVzY2xlJzonXFx1ZDgzZFxcdWRjYWEnLFxuICAnbXVzaHJvb20nOidcXHVkODNjXFx1ZGY0NCcsXG4gICdtdXNpY2FsX2tleWJvYXJkJzonXFx1ZDgzY1xcdWRmYjknLFxuICAnbXVzaWNhbF9ub3RlJzonXFx1ZDgzY1xcdWRmYjUnLFxuICAnbXVzaWNhbF9zY29yZSc6J1xcdWQ4M2NcXHVkZmJjJyxcbiAgJ211dGUnOidcXHVkODNkXFx1ZGQwNycsXG4gICduYWlsX2NhcmUnOidcXHVkODNkXFx1ZGM4NScsXG4gICduYW1lX2JhZGdlJzonXFx1ZDgzZFxcdWRjZGInLFxuICAnbmF0aW9uYWxfcGFyayc6J1xcdWQ4M2NcXHVkZmRlJyxcbiAgJ25hdXNlYXRlZF9mYWNlJzonXFx1ZDgzZVxcdWRkMjInLFxuICAnbmVja3RpZSc6J1xcdWQ4M2RcXHVkYzU0JyxcbiAgJ25lZ2F0aXZlX3NxdWFyZWRfY3Jvc3NfbWFyayc6J1xcdTI3NGUnLFxuICAnbmVyZF9mYWNlJzonXFx1ZDgzZVxcdWRkMTMnLFxuICAnbmV1dHJhbF9mYWNlJzonXFx1ZDgzZFxcdWRlMTAnLFxuICAnbmV3JzonXFx1ZDgzY1xcdWRkOTUnLFxuICAnbmV3X21vb24nOidcXHVkODNjXFx1ZGYxMScsXG4gICduZXdfbW9vbl93aXRoX2ZhY2UnOidcXHVkODNjXFx1ZGYxYScsXG4gICduZXdzcGFwZXInOidcXHVkODNkXFx1ZGNmMCcsXG4gICduZXdzcGFwZXJfcm9sbCc6J1xcdWQ4M2RcXHVkZGRlJyxcbiAgJ25leHRfdHJhY2tfYnV0dG9uJzonXFx1MjNlZCcsXG4gICduZyc6J1xcdWQ4M2NcXHVkZDk2JyxcbiAgJ25vX2dvb2RfbWFuJzonXFx1ZDgzZFxcdWRlNDUmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ25vX2dvb2Rfd29tYW4nOidcXHVkODNkXFx1ZGU0NScsXG4gICduaWdodF93aXRoX3N0YXJzJzonXFx1ZDgzY1xcdWRmMDMnLFxuICAnbm9fYmVsbCc6J1xcdWQ4M2RcXHVkZDE1JyxcbiAgJ25vX2JpY3ljbGVzJzonXFx1ZDgzZFxcdWRlYjMnLFxuICAnbm9fZW50cnknOidcXHUyNmQ0XFx1ZmUwZicsXG4gICdub19lbnRyeV9zaWduJzonXFx1ZDgzZFxcdWRlYWInLFxuICAnbm9fbW9iaWxlX3Bob25lcyc6J1xcdWQ4M2RcXHVkY2Y1JyxcbiAgJ25vX21vdXRoJzonXFx1ZDgzZFxcdWRlMzYnLFxuICAnbm9fcGVkZXN0cmlhbnMnOidcXHVkODNkXFx1ZGViNycsXG4gICdub19zbW9raW5nJzonXFx1ZDgzZFxcdWRlYWQnLFxuICAnbm9uLXBvdGFibGVfd2F0ZXInOidcXHVkODNkXFx1ZGViMScsXG4gICdub3NlJzonXFx1ZDgzZFxcdWRjNDMnLFxuICAnbm90ZWJvb2snOidcXHVkODNkXFx1ZGNkMycsXG4gICdub3RlYm9va193aXRoX2RlY29yYXRpdmVfY292ZXInOidcXHVkODNkXFx1ZGNkNCcsXG4gICdub3Rlcyc6J1xcdWQ4M2NcXHVkZmI2JyxcbiAgJ251dF9hbmRfYm9sdCc6J1xcdWQ4M2RcXHVkZDI5JyxcbiAgJ28nOidcXHUyYjU1XFx1ZmUwZicsXG4gICdvMic6J1xcdWQ4M2NcXHVkZDdlXFx1ZmUwZicsXG4gICdvY2Vhbic6J1xcdWQ4M2NcXHVkZjBhJyxcbiAgJ29jdG9wdXMnOidcXHVkODNkXFx1ZGMxOScsXG4gICdvZGVuJzonXFx1ZDgzY1xcdWRmNjInLFxuICAnb2ZmaWNlJzonXFx1ZDgzY1xcdWRmZTInLFxuICAnb2lsX2RydW0nOidcXHVkODNkXFx1ZGVlMicsXG4gICdvayc6J1xcdWQ4M2NcXHVkZDk3JyxcbiAgJ29rX2hhbmQnOidcXHVkODNkXFx1ZGM0YycsXG4gICdva19tYW4nOidcXHVkODNkXFx1ZGU0NiZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnb2tfd29tYW4nOidcXHVkODNkXFx1ZGU0NicsXG4gICdvbGRfa2V5JzonXFx1ZDgzZFxcdWRkZGQnLFxuICAnb2xkZXJfbWFuJzonXFx1ZDgzZFxcdWRjNzQnLFxuICAnb2xkZXJfd29tYW4nOidcXHVkODNkXFx1ZGM3NScsXG4gICdvbSc6J1xcdWQ4M2RcXHVkZDQ5JyxcbiAgJ29uJzonXFx1ZDgzZFxcdWRkMWInLFxuICAnb25jb21pbmdfYXV0b21vYmlsZSc6J1xcdWQ4M2RcXHVkZTk4JyxcbiAgJ29uY29taW5nX2J1cyc6J1xcdWQ4M2RcXHVkZThkJyxcbiAgJ29uY29taW5nX3BvbGljZV9jYXInOidcXHVkODNkXFx1ZGU5NCcsXG4gICdvbmNvbWluZ190YXhpJzonXFx1ZDgzZFxcdWRlOTYnLFxuICAnb3Blbl9maWxlX2ZvbGRlcic6J1xcdWQ4M2RcXHVkY2MyJyxcbiAgJ29wZW5faGFuZHMnOidcXHVkODNkXFx1ZGM1MCcsXG4gICdvcGVuX21vdXRoJzonXFx1ZDgzZFxcdWRlMmUnLFxuICAnb3Blbl91bWJyZWxsYSc6J1xcdTI2MDJcXHVmZTBmJyxcbiAgJ29waGl1Y2h1cyc6J1xcdTI2Y2UnLFxuICAnb3JhbmdlX2Jvb2snOidcXHVkODNkXFx1ZGNkOScsXG4gICdvcnRob2RveF9jcm9zcyc6J1xcdTI2MjZcXHVmZTBmJyxcbiAgJ291dGJveF90cmF5JzonXFx1ZDgzZFxcdWRjZTQnLFxuICAnb3dsJzonXFx1ZDgzZVxcdWRkODknLFxuICAnb3gnOidcXHVkODNkXFx1ZGMwMicsXG4gICdwYWNrYWdlJzonXFx1ZDgzZFxcdWRjZTYnLFxuICAncGFnZV9mYWNpbmdfdXAnOidcXHVkODNkXFx1ZGNjNCcsXG4gICdwYWdlX3dpdGhfY3VybCc6J1xcdWQ4M2RcXHVkY2MzJyxcbiAgJ3BhZ2VyJzonXFx1ZDgzZFxcdWRjZGYnLFxuICAncGFpbnRicnVzaCc6J1xcdWQ4M2RcXHVkZDhjJyxcbiAgJ3BhbG1fdHJlZSc6J1xcdWQ4M2NcXHVkZjM0JyxcbiAgJ3BhbmNha2VzJzonXFx1ZDgzZVxcdWRkNWUnLFxuICAncGFuZGFfZmFjZSc6J1xcdWQ4M2RcXHVkYzNjJyxcbiAgJ3BhcGVyY2xpcCc6J1xcdWQ4M2RcXHVkY2NlJyxcbiAgJ3BhcGVyY2xpcHMnOidcXHVkODNkXFx1ZGQ4NycsXG4gICdwYXJhc29sX29uX2dyb3VuZCc6J1xcdTI2ZjEnLFxuICAncGFya2luZyc6J1xcdWQ4M2NcXHVkZDdmXFx1ZmUwZicsXG4gICdwYXJ0X2FsdGVybmF0aW9uX21hcmsnOidcXHUzMDNkXFx1ZmUwZicsXG4gICdwYXJ0bHlfc3VubnknOidcXHUyNmM1XFx1ZmUwZicsXG4gICdwYXNzZW5nZXJfc2hpcCc6J1xcdWQ4M2RcXHVkZWYzJyxcbiAgJ3Bhc3Nwb3J0X2NvbnRyb2wnOidcXHVkODNkXFx1ZGVjMicsXG4gICdwYXVzZV9idXR0b24nOidcXHUyM2Y4JyxcbiAgJ3BlYWNlX3N5bWJvbCc6J1xcdTI2MmVcXHVmZTBmJyxcbiAgJ3BlYWNoJzonXFx1ZDgzY1xcdWRmNTEnLFxuICAncGVhbnV0cyc6J1xcdWQ4M2VcXHVkZDVjJyxcbiAgJ3BlYXInOidcXHVkODNjXFx1ZGY1MCcsXG4gICdwZW4nOidcXHVkODNkXFx1ZGQ4YScsXG4gICdwZW5jaWwyJzonXFx1MjcwZlxcdWZlMGYnLFxuICAncGVuZ3Vpbic6J1xcdWQ4M2RcXHVkYzI3JyxcbiAgJ3BlbnNpdmUnOidcXHVkODNkXFx1ZGUxNCcsXG4gICdwZXJmb3JtaW5nX2FydHMnOidcXHVkODNjXFx1ZGZhZCcsXG4gICdwZXJzZXZlcmUnOidcXHVkODNkXFx1ZGUyMycsXG4gICdwZXJzb25fZmVuY2luZyc6J1xcdWQ4M2VcXHVkZDNhJyxcbiAgJ3BvdXRpbmdfd29tYW4nOidcXHVkODNkXFx1ZGU0ZScsXG4gICdwaG9uZSc6J1xcdTI2MGVcXHVmZTBmJyxcbiAgJ3BpY2snOidcXHUyNmNmJyxcbiAgJ3BpZyc6J1xcdWQ4M2RcXHVkYzM3JyxcbiAgJ3BpZzInOidcXHVkODNkXFx1ZGMxNicsXG4gICdwaWdfbm9zZSc6J1xcdWQ4M2RcXHVkYzNkJyxcbiAgJ3BpbGwnOidcXHVkODNkXFx1ZGM4YScsXG4gICdwaW5lYXBwbGUnOidcXHVkODNjXFx1ZGY0ZCcsXG4gICdwaW5nX3BvbmcnOidcXHVkODNjXFx1ZGZkMycsXG4gICdwaXNjZXMnOidcXHUyNjUzXFx1ZmUwZicsXG4gICdwaXp6YSc6J1xcdWQ4M2NcXHVkZjU1JyxcbiAgJ3BsYWNlX29mX3dvcnNoaXAnOidcXHVkODNkXFx1ZGVkMCcsXG4gICdwbGF0ZV93aXRoX2N1dGxlcnknOidcXHVkODNjXFx1ZGY3ZCcsXG4gICdwbGF5X29yX3BhdXNlX2J1dHRvbic6J1xcdTIzZWYnLFxuICAncG9pbnRfZG93bic6J1xcdWQ4M2RcXHVkYzQ3JyxcbiAgJ3BvaW50X2xlZnQnOidcXHVkODNkXFx1ZGM0OCcsXG4gICdwb2ludF9yaWdodCc6J1xcdWQ4M2RcXHVkYzQ5JyxcbiAgJ3BvaW50X3VwJzonXFx1MjYxZFxcdWZlMGYnLFxuICAncG9pbnRfdXBfMic6J1xcdWQ4M2RcXHVkYzQ2JyxcbiAgJ3BvbGljZV9jYXInOidcXHVkODNkXFx1ZGU5MycsXG4gICdwb2xpY2V3b21hbic6J1xcdWQ4M2RcXHVkYzZlJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdwb29kbGUnOidcXHVkODNkXFx1ZGMyOScsXG4gICdwb3Bjb3JuJzonXFx1ZDgzY1xcdWRmN2YnLFxuICAncG9zdF9vZmZpY2UnOidcXHVkODNjXFx1ZGZlMycsXG4gICdwb3N0YWxfaG9ybic6J1xcdWQ4M2RcXHVkY2VmJyxcbiAgJ3Bvc3Rib3gnOidcXHVkODNkXFx1ZGNlZScsXG4gICdwb3RhYmxlX3dhdGVyJzonXFx1ZDgzZFxcdWRlYjAnLFxuICAncG90YXRvJzonXFx1ZDgzZVxcdWRkNTQnLFxuICAncG91Y2gnOidcXHVkODNkXFx1ZGM1ZCcsXG4gICdwb3VsdHJ5X2xlZyc6J1xcdWQ4M2NcXHVkZjU3JyxcbiAgJ3BvdW5kJzonXFx1ZDgzZFxcdWRjYjcnLFxuICAncmFnZSc6J1xcdWQ4M2RcXHVkZTIxJyxcbiAgJ3BvdXRpbmdfY2F0JzonXFx1ZDgzZFxcdWRlM2UnLFxuICAncG91dGluZ19tYW4nOidcXHVkODNkXFx1ZGU0ZSZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAncHJheSc6J1xcdWQ4M2RcXHVkZTRmJyxcbiAgJ3ByYXllcl9iZWFkcyc6J1xcdWQ4M2RcXHVkY2ZmJyxcbiAgJ3ByZWduYW50X3dvbWFuJzonXFx1ZDgzZVxcdWRkMzAnLFxuICAncHJldmlvdXNfdHJhY2tfYnV0dG9uJzonXFx1MjNlZScsXG4gICdwcmluY2UnOidcXHVkODNlXFx1ZGQzNCcsXG4gICdwcmluY2Vzcyc6J1xcdWQ4M2RcXHVkYzc4JyxcbiAgJ3ByaW50ZXInOidcXHVkODNkXFx1ZGRhOCcsXG4gICdwdXJwbGVfaGVhcnQnOidcXHVkODNkXFx1ZGM5YycsXG4gICdwdXJzZSc6J1xcdWQ4M2RcXHVkYzViJyxcbiAgJ3B1c2hwaW4nOidcXHVkODNkXFx1ZGNjYycsXG4gICdwdXRfbGl0dGVyX2luX2l0c19wbGFjZSc6J1xcdWQ4M2RcXHVkZWFlJyxcbiAgJ3F1ZXN0aW9uJzonXFx1Mjc1MycsXG4gICdyYWJiaXQnOidcXHVkODNkXFx1ZGMzMCcsXG4gICdyYWJiaXQyJzonXFx1ZDgzZFxcdWRjMDcnLFxuICAncmFjZWhvcnNlJzonXFx1ZDgzZFxcdWRjMGUnLFxuICAncmFjaW5nX2Nhcic6J1xcdWQ4M2NcXHVkZmNlJyxcbiAgJ3JhZGlvJzonXFx1ZDgzZFxcdWRjZmInLFxuICAncmFkaW9fYnV0dG9uJzonXFx1ZDgzZFxcdWRkMTgnLFxuICAncmFkaW9hY3RpdmUnOidcXHUyNjIyXFx1ZmUwZicsXG4gICdyYWlsd2F5X2Nhcic6J1xcdWQ4M2RcXHVkZTgzJyxcbiAgJ3JhaWx3YXlfdHJhY2snOidcXHVkODNkXFx1ZGVlNCcsXG4gICdyYWluYm93JzonXFx1ZDgzY1xcdWRmMDgnLFxuICAncmFpbmJvd19mbGFnJzonXFx1ZDgzY1xcdWRmZjNcXHVmZTBmJnp3ajtcXHVkODNjXFx1ZGYwOCcsXG4gICdyYWlzZWRfYmFja19vZl9oYW5kJzonXFx1ZDgzZVxcdWRkMWEnLFxuICAncmFpc2VkX2hhbmRfd2l0aF9maW5nZXJzX3NwbGF5ZWQnOidcXHVkODNkXFx1ZGQ5MCcsXG4gICdyYWlzZWRfaGFuZHMnOidcXHVkODNkXFx1ZGU0YycsXG4gICdyYWlzaW5nX2hhbmRfd29tYW4nOidcXHVkODNkXFx1ZGU0YicsXG4gICdyYWlzaW5nX2hhbmRfbWFuJzonXFx1ZDgzZFxcdWRlNGImendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ3JhbSc6J1xcdWQ4M2RcXHVkYzBmJyxcbiAgJ3JhbWVuJzonXFx1ZDgzY1xcdWRmNWMnLFxuICAncmF0JzonXFx1ZDgzZFxcdWRjMDAnLFxuICAncmVjb3JkX2J1dHRvbic6J1xcdTIzZmEnLFxuICAncmVjeWNsZSc6J1xcdTI2N2JcXHVmZTBmJyxcbiAgJ3JlZF9jaXJjbGUnOidcXHVkODNkXFx1ZGQzNCcsXG4gICdyZWdpc3RlcmVkJzonXFx1MDBhZVxcdWZlMGYnLFxuICAncmVsYXhlZCc6J1xcdTI2M2FcXHVmZTBmJyxcbiAgJ3JlbGlldmVkJzonXFx1ZDgzZFxcdWRlMGMnLFxuICAncmVtaW5kZXJfcmliYm9uJzonXFx1ZDgzY1xcdWRmOTcnLFxuICAncmVwZWF0JzonXFx1ZDgzZFxcdWRkMDEnLFxuICAncmVwZWF0X29uZSc6J1xcdWQ4M2RcXHVkZDAyJyxcbiAgJ3Jlc2N1ZV93b3JrZXJfaGVsbWV0JzonXFx1MjZkMScsXG4gICdyZXN0cm9vbSc6J1xcdWQ4M2RcXHVkZWJiJyxcbiAgJ3Jldm9sdmluZ19oZWFydHMnOidcXHVkODNkXFx1ZGM5ZScsXG4gICdyZXdpbmQnOidcXHUyM2VhJyxcbiAgJ3JoaW5vY2Vyb3MnOidcXHVkODNlXFx1ZGQ4ZicsXG4gICdyaWJib24nOidcXHVkODNjXFx1ZGY4MCcsXG4gICdyaWNlJzonXFx1ZDgzY1xcdWRmNWEnLFxuICAncmljZV9iYWxsJzonXFx1ZDgzY1xcdWRmNTknLFxuICAncmljZV9jcmFja2VyJzonXFx1ZDgzY1xcdWRmNTgnLFxuICAncmljZV9zY2VuZSc6J1xcdWQ4M2NcXHVkZjkxJyxcbiAgJ3JpZ2h0X2FuZ2VyX2J1YmJsZSc6J1xcdWQ4M2RcXHVkZGVmJyxcbiAgJ3JpbmcnOidcXHVkODNkXFx1ZGM4ZCcsXG4gICdyb2JvdCc6J1xcdWQ4M2VcXHVkZDE2JyxcbiAgJ3JvY2tldCc6J1xcdWQ4M2RcXHVkZTgwJyxcbiAgJ3JvZmwnOidcXHVkODNlXFx1ZGQyMycsXG4gICdyb2xsX2V5ZXMnOidcXHVkODNkXFx1ZGU0NCcsXG4gICdyb2xsZXJfY29hc3Rlcic6J1xcdWQ4M2NcXHVkZmEyJyxcbiAgJ3Jvb3N0ZXInOidcXHVkODNkXFx1ZGMxMycsXG4gICdyb3NlJzonXFx1ZDgzY1xcdWRmMzknLFxuICAncm9zZXR0ZSc6J1xcdWQ4M2NcXHVkZmY1JyxcbiAgJ3JvdGF0aW5nX2xpZ2h0JzonXFx1ZDgzZFxcdWRlYTgnLFxuICAncm91bmRfcHVzaHBpbic6J1xcdWQ4M2RcXHVkY2NkJyxcbiAgJ3Jvd2luZ19tYW4nOidcXHVkODNkXFx1ZGVhMycsXG4gICdyb3dpbmdfd29tYW4nOidcXHVkODNkXFx1ZGVhMyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAncnVnYnlfZm9vdGJhbGwnOidcXHVkODNjXFx1ZGZjOScsXG4gICdydW5uaW5nX21hbic6J1xcdWQ4M2NcXHVkZmMzJyxcbiAgJ3J1bm5pbmdfc2hpcnRfd2l0aF9zYXNoJzonXFx1ZDgzY1xcdWRmYmQnLFxuICAncnVubmluZ193b21hbic6J1xcdWQ4M2NcXHVkZmMzJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdzYSc6J1xcdWQ4M2NcXHVkZTAyXFx1ZmUwZicsXG4gICdzYWdpdHRhcml1cyc6J1xcdTI2NTBcXHVmZTBmJyxcbiAgJ3Nha2UnOidcXHVkODNjXFx1ZGY3NicsXG4gICdzYW5kYWwnOidcXHVkODNkXFx1ZGM2MScsXG4gICdzYW50YSc6J1xcdWQ4M2NcXHVkZjg1JyxcbiAgJ3NhdGVsbGl0ZSc6J1xcdWQ4M2RcXHVkY2UxJyxcbiAgJ3NheG9waG9uZSc6J1xcdWQ4M2NcXHVkZmI3JyxcbiAgJ3NjaG9vbCc6J1xcdWQ4M2NcXHVkZmViJyxcbiAgJ3NjaG9vbF9zYXRjaGVsJzonXFx1ZDgzY1xcdWRmOTInLFxuICAnc2Npc3NvcnMnOidcXHUyNzAyXFx1ZmUwZicsXG4gICdzY29ycGlvbic6J1xcdWQ4M2VcXHVkZDgyJyxcbiAgJ3Njb3JwaXVzJzonXFx1MjY0ZlxcdWZlMGYnLFxuICAnc2NyZWFtJzonXFx1ZDgzZFxcdWRlMzEnLFxuICAnc2NyZWFtX2NhdCc6J1xcdWQ4M2RcXHVkZTQwJyxcbiAgJ3Njcm9sbCc6J1xcdWQ4M2RcXHVkY2RjJyxcbiAgJ3NlYXQnOidcXHVkODNkXFx1ZGNiYScsXG4gICdzZWNyZXQnOidcXHUzMjk5XFx1ZmUwZicsXG4gICdzZWVfbm9fZXZpbCc6J1xcdWQ4M2RcXHVkZTQ4JyxcbiAgJ3NlZWRsaW5nJzonXFx1ZDgzY1xcdWRmMzEnLFxuICAnc2VsZmllJzonXFx1ZDgzZVxcdWRkMzMnLFxuICAnc2hhbGxvd19wYW5fb2ZfZm9vZCc6J1xcdWQ4M2VcXHVkZDU4JyxcbiAgJ3NoYW1yb2NrJzonXFx1MjYxOFxcdWZlMGYnLFxuICAnc2hhcmsnOidcXHVkODNlXFx1ZGQ4OCcsXG4gICdzaGF2ZWRfaWNlJzonXFx1ZDgzY1xcdWRmNjcnLFxuICAnc2hlZXAnOidcXHVkODNkXFx1ZGMxMScsXG4gICdzaGVsbCc6J1xcdWQ4M2RcXHVkYzFhJyxcbiAgJ3NoaWVsZCc6J1xcdWQ4M2RcXHVkZWUxJyxcbiAgJ3NoaW50b19zaHJpbmUnOidcXHUyNmU5JyxcbiAgJ3NoaXAnOidcXHVkODNkXFx1ZGVhMicsXG4gICdzaGlydCc6J1xcdWQ4M2RcXHVkYzU1JyxcbiAgJ3Nob3BwaW5nJzonXFx1ZDgzZFxcdWRlY2QnLFxuICAnc2hvcHBpbmdfY2FydCc6J1xcdWQ4M2RcXHVkZWQyJyxcbiAgJ3Nob3dlcic6J1xcdWQ4M2RcXHVkZWJmJyxcbiAgJ3NocmltcCc6J1xcdWQ4M2VcXHVkZDkwJyxcbiAgJ3NpZ25hbF9zdHJlbmd0aCc6J1xcdWQ4M2RcXHVkY2Y2JyxcbiAgJ3NpeF9wb2ludGVkX3N0YXInOidcXHVkODNkXFx1ZGQyZicsXG4gICdza2knOidcXHVkODNjXFx1ZGZiZicsXG4gICdza2llcic6J1xcdTI2ZjcnLFxuICAnc2t1bGwnOidcXHVkODNkXFx1ZGM4MCcsXG4gICdza3VsbF9hbmRfY3Jvc3Nib25lcyc6J1xcdTI2MjBcXHVmZTBmJyxcbiAgJ3NsZWVwaW5nJzonXFx1ZDgzZFxcdWRlMzQnLFxuICAnc2xlZXBpbmdfYmVkJzonXFx1ZDgzZFxcdWRlY2MnLFxuICAnc2xlZXB5JzonXFx1ZDgzZFxcdWRlMmEnLFxuICAnc2xpZ2h0bHlfZnJvd25pbmdfZmFjZSc6J1xcdWQ4M2RcXHVkZTQxJyxcbiAgJ3NsaWdodGx5X3NtaWxpbmdfZmFjZSc6J1xcdWQ4M2RcXHVkZTQyJyxcbiAgJ3Nsb3RfbWFjaGluZSc6J1xcdWQ4M2NcXHVkZmIwJyxcbiAgJ3NtYWxsX2FpcnBsYW5lJzonXFx1ZDgzZFxcdWRlZTknLFxuICAnc21hbGxfYmx1ZV9kaWFtb25kJzonXFx1ZDgzZFxcdWRkMzknLFxuICAnc21hbGxfb3JhbmdlX2RpYW1vbmQnOidcXHVkODNkXFx1ZGQzOCcsXG4gICdzbWFsbF9yZWRfdHJpYW5nbGUnOidcXHVkODNkXFx1ZGQzYScsXG4gICdzbWFsbF9yZWRfdHJpYW5nbGVfZG93bic6J1xcdWQ4M2RcXHVkZDNiJyxcbiAgJ3NtaWxlJzonXFx1ZDgzZFxcdWRlMDQnLFxuICAnc21pbGVfY2F0JzonXFx1ZDgzZFxcdWRlMzgnLFxuICAnc21pbGV5JzonXFx1ZDgzZFxcdWRlMDMnLFxuICAnc21pbGV5X2NhdCc6J1xcdWQ4M2RcXHVkZTNhJyxcbiAgJ3NtaWxpbmdfaW1wJzonXFx1ZDgzZFxcdWRlMDgnLFxuICAnc21pcmsnOidcXHVkODNkXFx1ZGUwZicsXG4gICdzbWlya19jYXQnOidcXHVkODNkXFx1ZGUzYycsXG4gICdzbW9raW5nJzonXFx1ZDgzZFxcdWRlYWMnLFxuICAnc25haWwnOidcXHVkODNkXFx1ZGMwYycsXG4gICdzbmFrZSc6J1xcdWQ4M2RcXHVkYzBkJyxcbiAgJ3NuZWV6aW5nX2ZhY2UnOidcXHVkODNlXFx1ZGQyNycsXG4gICdzbm93Ym9hcmRlcic6J1xcdWQ4M2NcXHVkZmMyJyxcbiAgJ3Nub3dmbGFrZSc6J1xcdTI3NDRcXHVmZTBmJyxcbiAgJ3Nub3dtYW4nOidcXHUyNmM0XFx1ZmUwZicsXG4gICdzbm93bWFuX3dpdGhfc25vdyc6J1xcdTI2MDNcXHVmZTBmJyxcbiAgJ3NvYic6J1xcdWQ4M2RcXHVkZTJkJyxcbiAgJ3NvY2Nlcic6J1xcdTI2YmRcXHVmZTBmJyxcbiAgJ3Nvb24nOidcXHVkODNkXFx1ZGQxYycsXG4gICdzb3MnOidcXHVkODNjXFx1ZGQ5OCcsXG4gICdzb3VuZCc6J1xcdWQ4M2RcXHVkZDA5JyxcbiAgJ3NwYWNlX2ludmFkZXInOidcXHVkODNkXFx1ZGM3ZScsXG4gICdzcGFkZXMnOidcXHUyNjYwXFx1ZmUwZicsXG4gICdzcGFnaGV0dGknOidcXHVkODNjXFx1ZGY1ZCcsXG4gICdzcGFya2xlJzonXFx1Mjc0N1xcdWZlMGYnLFxuICAnc3BhcmtsZXInOidcXHVkODNjXFx1ZGY4NycsXG4gICdzcGFya2xlcyc6J1xcdTI3MjgnLFxuICAnc3BhcmtsaW5nX2hlYXJ0JzonXFx1ZDgzZFxcdWRjOTYnLFxuICAnc3BlYWtfbm9fZXZpbCc6J1xcdWQ4M2RcXHVkZTRhJyxcbiAgJ3NwZWFrZXInOidcXHVkODNkXFx1ZGQwOCcsXG4gICdzcGVha2luZ19oZWFkJzonXFx1ZDgzZFxcdWRkZTMnLFxuICAnc3BlZWNoX2JhbGxvb24nOidcXHVkODNkXFx1ZGNhYycsXG4gICdzcGVlZGJvYXQnOidcXHVkODNkXFx1ZGVhNCcsXG4gICdzcGlkZXInOidcXHVkODNkXFx1ZGQ3NycsXG4gICdzcGlkZXJfd2ViJzonXFx1ZDgzZFxcdWRkNzgnLFxuICAnc3BpcmFsX2NhbGVuZGFyJzonXFx1ZDgzZFxcdWRkZDMnLFxuICAnc3BpcmFsX25vdGVwYWQnOidcXHVkODNkXFx1ZGRkMicsXG4gICdzcG9vbic6J1xcdWQ4M2VcXHVkZDQ0JyxcbiAgJ3NxdWlkJzonXFx1ZDgzZVxcdWRkOTEnLFxuICAnc3RhZGl1bSc6J1xcdWQ4M2NcXHVkZmRmJyxcbiAgJ3N0YXInOidcXHUyYjUwXFx1ZmUwZicsXG4gICdzdGFyMic6J1xcdWQ4M2NcXHVkZjFmJyxcbiAgJ3N0YXJfYW5kX2NyZXNjZW50JzonXFx1MjYyYVxcdWZlMGYnLFxuICAnc3Rhcl9vZl9kYXZpZCc6J1xcdTI3MjFcXHVmZTBmJyxcbiAgJ3N0YXJzJzonXFx1ZDgzY1xcdWRmMjAnLFxuICAnc3RhdGlvbic6J1xcdWQ4M2RcXHVkZTg5JyxcbiAgJ3N0YXR1ZV9vZl9saWJlcnR5JzonXFx1ZDgzZFxcdWRkZmQnLFxuICAnc3RlYW1fbG9jb21vdGl2ZSc6J1xcdWQ4M2RcXHVkZTgyJyxcbiAgJ3N0ZXcnOidcXHVkODNjXFx1ZGY3MicsXG4gICdzdG9wX2J1dHRvbic6J1xcdTIzZjknLFxuICAnc3RvcF9zaWduJzonXFx1ZDgzZFxcdWRlZDEnLFxuICAnc3RvcHdhdGNoJzonXFx1MjNmMScsXG4gICdzdHJhaWdodF9ydWxlcic6J1xcdWQ4M2RcXHVkY2NmJyxcbiAgJ3N0cmF3YmVycnknOidcXHVkODNjXFx1ZGY1MycsXG4gICdzdHVja19vdXRfdG9uZ3VlJzonXFx1ZDgzZFxcdWRlMWInLFxuICAnc3R1Y2tfb3V0X3Rvbmd1ZV9jbG9zZWRfZXllcyc6J1xcdWQ4M2RcXHVkZTFkJyxcbiAgJ3N0dWNrX291dF90b25ndWVfd2lua2luZ19leWUnOidcXHVkODNkXFx1ZGUxYycsXG4gICdzdHVkaW9fbWljcm9waG9uZSc6J1xcdWQ4M2NcXHVkZjk5JyxcbiAgJ3N0dWZmZWRfZmxhdGJyZWFkJzonXFx1ZDgzZVxcdWRkNTknLFxuICAnc3VuX2JlaGluZF9sYXJnZV9jbG91ZCc6J1xcdWQ4M2NcXHVkZjI1JyxcbiAgJ3N1bl9iZWhpbmRfcmFpbl9jbG91ZCc6J1xcdWQ4M2NcXHVkZjI2JyxcbiAgJ3N1bl9iZWhpbmRfc21hbGxfY2xvdWQnOidcXHVkODNjXFx1ZGYyNCcsXG4gICdzdW5fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWUnLFxuICAnc3VuZmxvd2VyJzonXFx1ZDgzY1xcdWRmM2InLFxuICAnc3VuZ2xhc3Nlcyc6J1xcdWQ4M2RcXHVkZTBlJyxcbiAgJ3N1bm55JzonXFx1MjYwMFxcdWZlMGYnLFxuICAnc3VucmlzZSc6J1xcdWQ4M2NcXHVkZjA1JyxcbiAgJ3N1bnJpc2Vfb3Zlcl9tb3VudGFpbnMnOidcXHVkODNjXFx1ZGYwNCcsXG4gICdzdXJmaW5nX21hbic6J1xcdWQ4M2NcXHVkZmM0JyxcbiAgJ3N1cmZpbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjNCZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnc3VzaGknOidcXHVkODNjXFx1ZGY2MycsXG4gICdzdXNwZW5zaW9uX3JhaWx3YXknOidcXHVkODNkXFx1ZGU5ZicsXG4gICdzd2VhdCc6J1xcdWQ4M2RcXHVkZTEzJyxcbiAgJ3N3ZWF0X2Ryb3BzJzonXFx1ZDgzZFxcdWRjYTYnLFxuICAnc3dlYXRfc21pbGUnOidcXHVkODNkXFx1ZGUwNScsXG4gICdzd2VldF9wb3RhdG8nOidcXHVkODNjXFx1ZGY2MCcsXG4gICdzd2ltbWluZ19tYW4nOidcXHVkODNjXFx1ZGZjYScsXG4gICdzd2ltbWluZ193b21hbic6J1xcdWQ4M2NcXHVkZmNhJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdzeW1ib2xzJzonXFx1ZDgzZFxcdWRkMjMnLFxuICAnc3luYWdvZ3VlJzonXFx1ZDgzZFxcdWRkNGQnLFxuICAnc3lyaW5nZSc6J1xcdWQ4M2RcXHVkYzg5JyxcbiAgJ3RhY28nOidcXHVkODNjXFx1ZGYyZScsXG4gICd0YWRhJzonXFx1ZDgzY1xcdWRmODknLFxuICAndGFuYWJhdGFfdHJlZSc6J1xcdWQ4M2NcXHVkZjhiJyxcbiAgJ3RhdXJ1cyc6J1xcdTI2NDlcXHVmZTBmJyxcbiAgJ3RheGknOidcXHVkODNkXFx1ZGU5NScsXG4gICd0ZWEnOidcXHVkODNjXFx1ZGY3NScsXG4gICd0ZWxlcGhvbmVfcmVjZWl2ZXInOidcXHVkODNkXFx1ZGNkZScsXG4gICd0ZWxlc2NvcGUnOidcXHVkODNkXFx1ZGQyZCcsXG4gICd0ZW5uaXMnOidcXHVkODNjXFx1ZGZiZScsXG4gICd0ZW50JzonXFx1MjZmYVxcdWZlMGYnLFxuICAndGhlcm1vbWV0ZXInOidcXHVkODNjXFx1ZGYyMScsXG4gICd0aGlua2luZyc6J1xcdWQ4M2VcXHVkZDE0JyxcbiAgJ3Rob3VnaHRfYmFsbG9vbic6J1xcdWQ4M2RcXHVkY2FkJyxcbiAgJ3RpY2tldCc6J1xcdWQ4M2NcXHVkZmFiJyxcbiAgJ3RpY2tldHMnOidcXHVkODNjXFx1ZGY5ZicsXG4gICd0aWdlcic6J1xcdWQ4M2RcXHVkYzJmJyxcbiAgJ3RpZ2VyMic6J1xcdWQ4M2RcXHVkYzA1JyxcbiAgJ3RpbWVyX2Nsb2NrJzonXFx1MjNmMicsXG4gICd0aXBwaW5nX2hhbmRfbWFuJzonXFx1ZDgzZFxcdWRjODEmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ3RpcmVkX2ZhY2UnOidcXHVkODNkXFx1ZGUyYicsXG4gICd0bSc6J1xcdTIxMjJcXHVmZTBmJyxcbiAgJ3RvaWxldCc6J1xcdWQ4M2RcXHVkZWJkJyxcbiAgJ3Rva3lvX3Rvd2VyJzonXFx1ZDgzZFxcdWRkZmMnLFxuICAndG9tYXRvJzonXFx1ZDgzY1xcdWRmNDUnLFxuICAndG9uZ3VlJzonXFx1ZDgzZFxcdWRjNDUnLFxuICAndG9wJzonXFx1ZDgzZFxcdWRkMWQnLFxuICAndG9waGF0JzonXFx1ZDgzY1xcdWRmYTknLFxuICAndG9ybmFkbyc6J1xcdWQ4M2NcXHVkZjJhJyxcbiAgJ3RyYWNrYmFsbCc6J1xcdWQ4M2RcXHVkZGIyJyxcbiAgJ3RyYWN0b3InOidcXHVkODNkXFx1ZGU5YycsXG4gICd0cmFmZmljX2xpZ2h0JzonXFx1ZDgzZFxcdWRlYTUnLFxuICAndHJhaW4nOidcXHVkODNkXFx1ZGU4YicsXG4gICd0cmFpbjInOidcXHVkODNkXFx1ZGU4NicsXG4gICd0cmFtJzonXFx1ZDgzZFxcdWRlOGEnLFxuICAndHJpYW5ndWxhcl9mbGFnX29uX3Bvc3QnOidcXHVkODNkXFx1ZGVhOScsXG4gICd0cmlhbmd1bGFyX3J1bGVyJzonXFx1ZDgzZFxcdWRjZDAnLFxuICAndHJpZGVudCc6J1xcdWQ4M2RcXHVkZDMxJyxcbiAgJ3RyaXVtcGgnOidcXHVkODNkXFx1ZGUyNCcsXG4gICd0cm9sbGV5YnVzJzonXFx1ZDgzZFxcdWRlOGUnLFxuICAndHJvcGh5JzonXFx1ZDgzY1xcdWRmYzYnLFxuICAndHJvcGljYWxfZHJpbmsnOidcXHVkODNjXFx1ZGY3OScsXG4gICd0cm9waWNhbF9maXNoJzonXFx1ZDgzZFxcdWRjMjAnLFxuICAndHJ1Y2snOidcXHVkODNkXFx1ZGU5YScsXG4gICd0cnVtcGV0JzonXFx1ZDgzY1xcdWRmYmEnLFxuICAndHVsaXAnOidcXHVkODNjXFx1ZGYzNycsXG4gICd0dW1ibGVyX2dsYXNzJzonXFx1ZDgzZVxcdWRkNDMnLFxuICAndHVya2V5JzonXFx1ZDgzZVxcdWRkODMnLFxuICAndHVydGxlJzonXFx1ZDgzZFxcdWRjMjInLFxuICAndHYnOidcXHVkODNkXFx1ZGNmYScsXG4gICd0d2lzdGVkX3JpZ2h0d2FyZHNfYXJyb3dzJzonXFx1ZDgzZFxcdWRkMDAnLFxuICAndHdvX2hlYXJ0cyc6J1xcdWQ4M2RcXHVkYzk1JyxcbiAgJ3R3b19tZW5faG9sZGluZ19oYW5kcyc6J1xcdWQ4M2RcXHVkYzZjJyxcbiAgJ3R3b193b21lbl9ob2xkaW5nX2hhbmRzJzonXFx1ZDgzZFxcdWRjNmQnLFxuICAndTUyNzInOidcXHVkODNjXFx1ZGUzOScsXG4gICd1NTQwOCc6J1xcdWQ4M2NcXHVkZTM0JyxcbiAgJ3U1NWI2JzonXFx1ZDgzY1xcdWRlM2EnLFxuICAndTYzMDcnOidcXHVkODNjXFx1ZGUyZlxcdWZlMGYnLFxuICAndTY3MDgnOidcXHVkODNjXFx1ZGUzN1xcdWZlMGYnLFxuICAndTY3MDknOidcXHVkODNjXFx1ZGUzNicsXG4gICd1NmU4MCc6J1xcdWQ4M2NcXHVkZTM1JyxcbiAgJ3U3MTIxJzonXFx1ZDgzY1xcdWRlMWFcXHVmZTBmJyxcbiAgJ3U3NTMzJzonXFx1ZDgzY1xcdWRlMzgnLFxuICAndTc5ODEnOidcXHVkODNjXFx1ZGUzMicsXG4gICd1N2E3YSc6J1xcdWQ4M2NcXHVkZTMzJyxcbiAgJ3VtYnJlbGxhJzonXFx1MjYxNFxcdWZlMGYnLFxuICAndW5hbXVzZWQnOidcXHVkODNkXFx1ZGUxMicsXG4gICd1bmRlcmFnZSc6J1xcdWQ4M2RcXHVkZDFlJyxcbiAgJ3VuaWNvcm4nOidcXHVkODNlXFx1ZGQ4NCcsXG4gICd1bmxvY2snOidcXHVkODNkXFx1ZGQxMycsXG4gICd1cCc6J1xcdWQ4M2NcXHVkZDk5JyxcbiAgJ3Vwc2lkZV9kb3duX2ZhY2UnOidcXHVkODNkXFx1ZGU0MycsXG4gICd2JzonXFx1MjcwY1xcdWZlMGYnLFxuICAndmVydGljYWxfdHJhZmZpY19saWdodCc6J1xcdWQ4M2RcXHVkZWE2JyxcbiAgJ3Zocyc6J1xcdWQ4M2RcXHVkY2ZjJyxcbiAgJ3ZpYnJhdGlvbl9tb2RlJzonXFx1ZDgzZFxcdWRjZjMnLFxuICAndmlkZW9fY2FtZXJhJzonXFx1ZDgzZFxcdWRjZjknLFxuICAndmlkZW9fZ2FtZSc6J1xcdWQ4M2NcXHVkZmFlJyxcbiAgJ3Zpb2xpbic6J1xcdWQ4M2NcXHVkZmJiJyxcbiAgJ3ZpcmdvJzonXFx1MjY0ZFxcdWZlMGYnLFxuICAndm9sY2Fubyc6J1xcdWQ4M2NcXHVkZjBiJyxcbiAgJ3ZvbGxleWJhbGwnOidcXHVkODNjXFx1ZGZkMCcsXG4gICd2cyc6J1xcdWQ4M2NcXHVkZDlhJyxcbiAgJ3Z1bGNhbl9zYWx1dGUnOidcXHVkODNkXFx1ZGQ5NicsXG4gICd3YWxraW5nX21hbic6J1xcdWQ4M2RcXHVkZWI2JyxcbiAgJ3dhbGtpbmdfd29tYW4nOidcXHVkODNkXFx1ZGViNiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd2FuaW5nX2NyZXNjZW50X21vb24nOidcXHVkODNjXFx1ZGYxOCcsXG4gICd3YW5pbmdfZ2liYm91c19tb29uJzonXFx1ZDgzY1xcdWRmMTYnLFxuICAnd2FybmluZyc6J1xcdTI2YTBcXHVmZTBmJyxcbiAgJ3dhc3RlYmFza2V0JzonXFx1ZDgzZFxcdWRkZDEnLFxuICAnd2F0Y2gnOidcXHUyMzFhXFx1ZmUwZicsXG4gICd3YXRlcl9idWZmYWxvJzonXFx1ZDgzZFxcdWRjMDMnLFxuICAnd2F0ZXJtZWxvbic6J1xcdWQ4M2NcXHVkZjQ5JyxcbiAgJ3dhdmUnOidcXHVkODNkXFx1ZGM0YicsXG4gICd3YXZ5X2Rhc2gnOidcXHUzMDMwXFx1ZmUwZicsXG4gICd3YXhpbmdfY3Jlc2NlbnRfbW9vbic6J1xcdWQ4M2NcXHVkZjEyJyxcbiAgJ3djJzonXFx1ZDgzZFxcdWRlYmUnLFxuICAnd2VhcnknOidcXHVkODNkXFx1ZGUyOScsXG4gICd3ZWRkaW5nJzonXFx1ZDgzZFxcdWRjOTInLFxuICAnd2VpZ2h0X2xpZnRpbmdfbWFuJzonXFx1ZDgzY1xcdWRmY2JcXHVmZTBmJyxcbiAgJ3dlaWdodF9saWZ0aW5nX3dvbWFuJzonXFx1ZDgzY1xcdWRmY2JcXHVmZTBmJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3aGFsZSc6J1xcdWQ4M2RcXHVkYzMzJyxcbiAgJ3doYWxlMic6J1xcdWQ4M2RcXHVkYzBiJyxcbiAgJ3doZWVsX29mX2RoYXJtYSc6J1xcdTI2MzhcXHVmZTBmJyxcbiAgJ3doZWVsY2hhaXInOidcXHUyNjdmXFx1ZmUwZicsXG4gICd3aGl0ZV9jaGVja19tYXJrJzonXFx1MjcwNScsXG4gICd3aGl0ZV9jaXJjbGUnOidcXHUyNmFhXFx1ZmUwZicsXG4gICd3aGl0ZV9mbGFnJzonXFx1ZDgzY1xcdWRmZjNcXHVmZTBmJyxcbiAgJ3doaXRlX2Zsb3dlcic6J1xcdWQ4M2RcXHVkY2FlJyxcbiAgJ3doaXRlX2xhcmdlX3NxdWFyZSc6J1xcdTJiMWNcXHVmZTBmJyxcbiAgJ3doaXRlX21lZGl1bV9zbWFsbF9zcXVhcmUnOidcXHUyNWZkXFx1ZmUwZicsXG4gICd3aGl0ZV9tZWRpdW1fc3F1YXJlJzonXFx1MjVmYlxcdWZlMGYnLFxuICAnd2hpdGVfc21hbGxfc3F1YXJlJzonXFx1MjVhYlxcdWZlMGYnLFxuICAnd2hpdGVfc3F1YXJlX2J1dHRvbic6J1xcdWQ4M2RcXHVkZDMzJyxcbiAgJ3dpbHRlZF9mbG93ZXInOidcXHVkODNlXFx1ZGQ0MCcsXG4gICd3aW5kX2NoaW1lJzonXFx1ZDgzY1xcdWRmOTAnLFxuICAnd2luZF9mYWNlJzonXFx1ZDgzY1xcdWRmMmMnLFxuICAnd2luZV9nbGFzcyc6J1xcdWQ4M2NcXHVkZjc3JyxcbiAgJ3dpbmsnOidcXHVkODNkXFx1ZGUwOScsXG4gICd3b2xmJzonXFx1ZDgzZFxcdWRjM2EnLFxuICAnd29tYW4nOidcXHVkODNkXFx1ZGM2OScsXG4gICd3b21hbl9hcnRpc3QnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmYTgnLFxuICAnd29tYW5fYXN0cm9uYXV0JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkZTgwJyxcbiAgJ3dvbWFuX2NhcnR3aGVlbGluZyc6J1xcdWQ4M2VcXHVkZDM4Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9jb29rJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZjczJyxcbiAgJ3dvbWFuX2ZhY2VwYWxtaW5nJzonXFx1ZDgzZVxcdWRkMjYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuX2ZhY3Rvcnlfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZmVkJyxcbiAgJ3dvbWFuX2Zhcm1lcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGYzZScsXG4gICd3b21hbl9maXJlZmlnaHRlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGU5MicsXG4gICd3b21hbl9oZWFsdGhfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdTI2OTVcXHVmZTBmJyxcbiAgJ3dvbWFuX2p1ZGdlJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdTI2OTZcXHVmZTBmJyxcbiAgJ3dvbWFuX2p1Z2dsaW5nJzonXFx1ZDgzZVxcdWRkMzkmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuX21lY2hhbmljJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkZDI3JyxcbiAgJ3dvbWFuX29mZmljZV93b3JrZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjYmMnLFxuICAnd29tYW5fcGlsb3QnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1MjcwOFxcdWZlMGYnLFxuICAnd29tYW5fcGxheWluZ19oYW5kYmFsbCc6J1xcdWQ4M2VcXHVkZDNlJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9wbGF5aW5nX3dhdGVyX3BvbG8nOidcXHVkODNlXFx1ZGQzZCZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fc2NpZW50aXN0JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkZDJjJyxcbiAgJ3dvbWFuX3NocnVnZ2luZyc6J1xcdWQ4M2VcXHVkZDM3Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9zaW5nZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmYTQnLFxuICAnd29tYW5fc3R1ZGVudCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGY5MycsXG4gICd3b21hbl90ZWFjaGVyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZmViJyxcbiAgJ3dvbWFuX3RlY2hub2xvZ2lzdCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGNiYicsXG4gICd3b21hbl93aXRoX3R1cmJhbic6J1xcdWQ4M2RcXHVkYzczJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbnNfY2xvdGhlcyc6J1xcdWQ4M2RcXHVkYzVhJyxcbiAgJ3dvbWFuc19oYXQnOidcXHVkODNkXFx1ZGM1MicsXG4gICd3b21lbl93cmVzdGxpbmcnOidcXHVkODNlXFx1ZGQzYyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tZW5zJzonXFx1ZDgzZFxcdWRlYmEnLFxuICAnd29ybGRfbWFwJzonXFx1ZDgzZFxcdWRkZmEnLFxuICAnd29ycmllZCc6J1xcdWQ4M2RcXHVkZTFmJyxcbiAgJ3dyZW5jaCc6J1xcdWQ4M2RcXHVkZDI3JyxcbiAgJ3dyaXRpbmdfaGFuZCc6J1xcdTI3MGRcXHVmZTBmJyxcbiAgJ3gnOidcXHUyNzRjJyxcbiAgJ3llbGxvd19oZWFydCc6J1xcdWQ4M2RcXHVkYzliJyxcbiAgJ3llbic6J1xcdWQ4M2RcXHVkY2I0JyxcbiAgJ3lpbl95YW5nJzonXFx1MjYyZlxcdWZlMGYnLFxuICAneXVtJzonXFx1ZDgzZFxcdWRlMGInLFxuICAnemFwJzonXFx1MjZhMVxcdWZlMGYnLFxuICAnemlwcGVyX21vdXRoX2ZhY2UnOidcXHVkODNlXFx1ZGQxMCcsXG4gICd6enonOidcXHVkODNkXFx1ZGNhNCcsXG5cbiAgLyogc3BlY2lhbCBlbW9qaXMgOlAgKi9cbiAgJ29jdG9jYXQnOiAgJzxpbWcgYWx0PVwiOm9jdG9jYXQ6XCIgaGVpZ2h0PVwiMjBcIiB3aWR0aD1cIjIwXCIgYWxpZ249XCJhYnNtaWRkbGVcIiBzcmM9XCJodHRwczovL2Fzc2V0cy1jZG4uZ2l0aHViLmNvbS9pbWFnZXMvaWNvbnMvZW1vamkvb2N0b2NhdC5wbmdcIj4nLFxuICAnc2hvd2Rvd24nOiAnPHNwYW4gc3R5bGU9XCJmb250LWZhbWlseTogXFwnQW5vbnltb3VzIFByb1xcJywgbW9ub3NwYWNlOyB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgdGV4dC1kZWNvcmF0aW9uLXN0eWxlOiBkYXNoZWQ7IHRleHQtZGVjb3JhdGlvbi1jb2xvcjogIzNlOGI4YTt0ZXh0LXVuZGVybGluZS1wb3NpdGlvbjogdW5kZXI7XCI+Uzwvc3Bhbj4nXG59O1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEVzdGV2YW8gb24gMzEtMDUtMjAxNS5cbiAqL1xuXG4vKipcbiAqIFNob3dkb3duIENvbnZlcnRlciBjbGFzc1xuICogQGNsYXNzXG4gKiBAcGFyYW0ge29iamVjdH0gW2NvbnZlcnRlck9wdGlvbnNdXG4gKiBAcmV0dXJucyB7Q29udmVydGVyfVxuICovXG5zaG93ZG93bi5Db252ZXJ0ZXIgPSBmdW5jdGlvbiAoY29udmVydGVyT3B0aW9ucykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHt7fX1cbiAgICAgICAqL1xuICAgICAgb3B0aW9ucyA9IHt9LFxuXG4gICAgICAvKipcbiAgICAgICAqIExhbmd1YWdlIGV4dGVuc2lvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAqL1xuICAgICAgbGFuZ0V4dGVuc2lvbnMgPSBbXSxcblxuICAgICAgLyoqXG4gICAgICAgKiBPdXRwdXQgbW9kaWZpZXJzIGV4dGVuc2lvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAqL1xuICAgICAgb3V0cHV0TW9kaWZpZXJzID0gW10sXG5cbiAgICAgIC8qKlxuICAgICAgICogRXZlbnQgbGlzdGVuZXJzXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge3t9fVxuICAgICAgICovXG4gICAgICBsaXN0ZW5lcnMgPSB7fSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZmxhdm9yIHNldCBpbiB0aGlzIGNvbnZlcnRlclxuICAgICAgICovXG4gICAgICBzZXRDb252Rmxhdm9yID0gc2V0Rmxhdm9yLFxuXG4gICAgICAvKipcbiAgICAgICAqIE1ldGFkYXRhIG9mIHRoZSBkb2N1bWVudFxuICAgICAgICogQHR5cGUge3twYXJzZWQ6IHt9LCByYXc6IHN0cmluZywgZm9ybWF0OiBzdHJpbmd9fVxuICAgICAgICovXG4gICAgICBtZXRhZGF0YSA9IHtcbiAgICAgICAgcGFyc2VkOiB7fSxcbiAgICAgICAgcmF3OiAnJyxcbiAgICAgICAgZm9ybWF0OiAnJ1xuICAgICAgfTtcblxuICBfY29uc3RydWN0b3IoKTtcblxuICAvKipcbiAgICogQ29udmVydGVyIGNvbnN0cnVjdG9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBfY29uc3RydWN0b3IgKCkge1xuICAgIGNvbnZlcnRlck9wdGlvbnMgPSBjb252ZXJ0ZXJPcHRpb25zIHx8IHt9O1xuXG4gICAgZm9yICh2YXIgZ09wdCBpbiBnbG9iYWxPcHRpb25zKSB7XG4gICAgICBpZiAoZ2xvYmFsT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShnT3B0KSkge1xuICAgICAgICBvcHRpb25zW2dPcHRdID0gZ2xvYmFsT3B0aW9uc1tnT3B0XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNZXJnZSBvcHRpb25zXG4gICAgaWYgKHR5cGVvZiBjb252ZXJ0ZXJPcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIgb3B0IGluIGNvbnZlcnRlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNvbnZlcnRlck9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgICAgIG9wdGlvbnNbb3B0XSA9IGNvbnZlcnRlck9wdGlvbnNbb3B0XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignQ29udmVydGVyIGV4cGVjdHMgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgdG8gYmUgYW4gb2JqZWN0LCBidXQgJyArIHR5cGVvZiBjb252ZXJ0ZXJPcHRpb25zICtcbiAgICAgICcgd2FzIHBhc3NlZCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmV4dGVuc2lvbnMpIHtcbiAgICAgIHNob3dkb3duLmhlbHBlci5mb3JFYWNoKG9wdGlvbnMuZXh0ZW5zaW9ucywgX3BhcnNlRXh0ZW5zaW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7Kn0gZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nJ11cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9wYXJzZUV4dGVuc2lvbiAoZXh0LCBuYW1lKSB7XG5cbiAgICBuYW1lID0gbmFtZSB8fCBudWxsO1xuICAgIC8vIElmIGl0J3MgYSBzdHJpbmcsIHRoZSBleHRlbnNpb24gd2FzIHByZXZpb3VzbHkgbG9hZGVkXG4gICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1N0cmluZyhleHQpKSB7XG4gICAgICBleHQgPSBzaG93ZG93bi5oZWxwZXIuc3RkRXh0TmFtZShleHQpO1xuICAgICAgbmFtZSA9IGV4dDtcblxuICAgICAgLy8gTEVHQUNZX1NVUFBPUlQgQ09ERVxuICAgICAgaWYgKHNob3dkb3duLmV4dGVuc2lvbnNbZXh0XSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0RFUFJFQ0FUSU9OIFdBUk5JTkc6ICcgKyBleHQgKyAnIGlzIGFuIG9sZCBleHRlbnNpb24gdGhhdCB1c2VzIGEgZGVwcmVjYXRlZCBsb2FkaW5nIG1ldGhvZC4nICtcbiAgICAgICAgICAnUGxlYXNlIGluZm9ybSB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlIGV4dGVuc2lvbiBzaG91bGQgYmUgdXBkYXRlZCEnKTtcbiAgICAgICAgbGVnYWN5RXh0ZW5zaW9uTG9hZGluZyhzaG93ZG93bi5leHRlbnNpb25zW2V4dF0sIGV4dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gRU5EIExFR0FDWSBTVVBQT1JUIENPREVcblxuICAgICAgfSBlbHNlIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGV4dGVuc2lvbnNbZXh0XSkpIHtcbiAgICAgICAgZXh0ID0gZXh0ZW5zaW9uc1tleHRdO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignRXh0ZW5zaW9uIFwiJyArIGV4dCArICdcIiBjb3VsZCBub3QgYmUgbG9hZGVkLiBJdCB3YXMgZWl0aGVyIG5vdCBmb3VuZCBvciBpcyBub3QgYSB2YWxpZCBleHRlbnNpb24uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV4dCA9IGV4dCgpO1xuICAgIH1cblxuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0KSkge1xuICAgICAgZXh0ID0gW2V4dF07XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkRXh0ID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcbiAgICBpZiAoIXZhbGlkRXh0LnZhbGlkKSB7XG4gICAgICB0aHJvdyBFcnJvcih2YWxpZEV4dC5lcnJvcik7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHQubGVuZ3RoOyArK2kpIHtcbiAgICAgIHN3aXRjaCAoZXh0W2ldLnR5cGUpIHtcblxuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3V0cHV0JzpcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMucHVzaChleHRbaV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGV4dFtpXS5oYXNPd25Qcm9wZXJ0eSgnbGlzdGVuZXJzJykpIHtcbiAgICAgICAgZm9yICh2YXIgbG4gaW4gZXh0W2ldLmxpc3RlbmVycykge1xuICAgICAgICAgIGlmIChleHRbaV0ubGlzdGVuZXJzLmhhc093blByb3BlcnR5KGxuKSkge1xuICAgICAgICAgICAgbGlzdGVuKGxuLCBleHRbaV0ubGlzdGVuZXJzW2xuXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogTEVHQUNZX1NVUFBPUlRcbiAgICogQHBhcmFtIHsqfSBleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIGxlZ2FjeUV4dGVuc2lvbkxvYWRpbmcgKGV4dCwgbmFtZSkge1xuICAgIGlmICh0eXBlb2YgZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBleHQgPSBleHQobmV3IHNob3dkb3duLkNvbnZlcnRlcigpKTtcbiAgICB9XG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHQpKSB7XG4gICAgICBleHQgPSBbZXh0XTtcbiAgICB9XG4gICAgdmFyIHZhbGlkID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcblxuICAgIGlmICghdmFsaWQudmFsaWQpIHtcbiAgICAgIHRocm93IEVycm9yKHZhbGlkLmVycm9yKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dC5sZW5ndGg7ICsraSkge1xuICAgICAgc3dpdGNoIChleHRbaV0udHlwZSkge1xuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ291dHB1dCc6XG4gICAgICAgICAgb3V0cHV0TW9kaWZpZXJzLnB1c2goZXh0W2ldKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDovLyBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZVxuICAgICAgICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gbG9hZGVyIGVycm9yOiBUeXBlIHVucmVjb2duaXplZCEhIScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gYW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIGZ1bmN0aW9uIGxpc3RlbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgaW4gY29udmVydGVyLmxpc3RlbigpIG1ldGhvZDogbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCBidXQgJyArIHR5cGVvZiBuYW1lICsgJyBnaXZlbicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IGluIGNvbnZlcnRlci5saXN0ZW4oKSBtZXRob2Q6IGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiwgYnV0ICcgKyB0eXBlb2YgY2FsbGJhY2sgKyAnIGdpdmVuJyk7XG4gICAgfVxuXG4gICAgaWYgKCFsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGxpc3RlbmVyc1tuYW1lXSA9IFtdO1xuICAgIH1cbiAgICBsaXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiByVHJpbUlucHV0VGV4dCAodGV4dCkge1xuICAgIHZhciByc3AgPSB0ZXh0Lm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aCxcbiAgICAgICAgcmd4ID0gbmV3IFJlZ0V4cCgnXlxcXFxzezAsJyArIHJzcCArICd9JywgJ2dtJyk7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShyZ3gsICcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhbiBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZ0TmFtZSBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRleHRcbiAgICogQHBhcmFtIHt7fX0gb3B0aW9ucyBDb252ZXJ0ZXIgT3B0aW9uc1xuICAgKiBAcGFyYW0ge3t9fSBnbG9iYWxzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLl9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoIChldnROYW1lLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShldnROYW1lKSkge1xuICAgICAgZm9yICh2YXIgZWkgPSAwOyBlaSA8IGxpc3RlbmVyc1tldnROYW1lXS5sZW5ndGg7ICsrZWkpIHtcbiAgICAgICAgdmFyIG5UZXh0ID0gbGlzdGVuZXJzW2V2dE5hbWVdW2VpXShldnROYW1lLCB0ZXh0LCB0aGlzLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaWYgKG5UZXh0ICYmIHR5cGVvZiBuVGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0ZXh0ID0gblRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7c2hvd2Rvd24uQ29udmVydGVyfVxuICAgKi9cbiAgdGhpcy5saXN0ZW4gPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICBsaXN0ZW4obmFtZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIG1hcmtkb3duIHN0cmluZyBpbnRvIEhUTUxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICB0aGlzLm1ha2VIdG1sID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAvL2NoZWNrIGlmIHRleHQgaXMgbm90IGZhbHN5XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICB2YXIgZ2xvYmFscyA9IHtcbiAgICAgIGdIdG1sQmxvY2tzOiAgICAgW10sXG4gICAgICBnSHRtbE1kQmxvY2tzOiAgIFtdLFxuICAgICAgZ0h0bWxTcGFuczogICAgICBbXSxcbiAgICAgIGdVcmxzOiAgICAgICAgICAge30sXG4gICAgICBnVGl0bGVzOiAgICAgICAgIHt9LFxuICAgICAgZ0RpbWVuc2lvbnM6ICAgICB7fSxcbiAgICAgIGdMaXN0TGV2ZWw6ICAgICAgMCxcbiAgICAgIGhhc2hMaW5rQ291bnRzOiAge30sXG4gICAgICBsYW5nRXh0ZW5zaW9uczogIGxhbmdFeHRlbnNpb25zLFxuICAgICAgb3V0cHV0TW9kaWZpZXJzOiBvdXRwdXRNb2RpZmllcnMsXG4gICAgICBjb252ZXJ0ZXI6ICAgICAgIHRoaXMsXG4gICAgICBnaENvZGVCbG9ja3M6ICAgIFtdLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgcGFyc2VkOiB7fSxcbiAgICAgICAgcmF3OiAnJyxcbiAgICAgICAgZm9ybWF0OiAnJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBUaGlzIGxldHMgdXMgdXNlIMKoIHRyZW1hIGFzIGFuIGVzY2FwZSBjaGFyIHRvIGF2b2lkIG1kNSBoYXNoZXNcbiAgICAvLyBUaGUgY2hvaWNlIG9mIGNoYXJhY3RlciBpcyBhcmJpdHJhcnk7IGFueXRoaW5nIHRoYXQgaXNuJ3RcbiAgICAvLyBtYWdpYyBpbiBNYXJrZG93biB3aWxsIHdvcmsuXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgvZywgJ8KoVCcpO1xuXG4gICAgLy8gUmVwbGFjZSAkIHdpdGggwqhEXG4gICAgLy8gUmVnRXhwIGludGVycHJldHMgJCBhcyBhIHNwZWNpYWwgY2hhcmFjdGVyXG4gICAgLy8gd2hlbiBpdCdzIGluIGEgcmVwbGFjZW1lbnQgc3RyaW5nXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwkL2csICfCqEQnKTtcblxuICAgIC8vIFN0YW5kYXJkaXplIGxpbmUgZW5kaW5nc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJyk7IC8vIERPUyB0byBVbml4XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyL2csICdcXG4nKTsgLy8gTWFjIHRvIFVuaXhcblxuICAgIC8vIFN0YXJkYXJkaXplIGxpbmUgc3BhY2VzXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFx1MDBBMC9nLCAnJm5ic3A7Jyk7XG5cbiAgICBpZiAob3B0aW9ucy5zbWFydEluZGVudGF0aW9uRml4KSB7XG4gICAgICB0ZXh0ID0gclRyaW1JbnB1dFRleHQodGV4dCk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRleHQgYmVnaW5zIGFuZCBlbmRzIHdpdGggYSBjb3VwbGUgb2YgbmV3bGluZXM6XG4gICAgdGV4dCA9ICdcXG5cXG4nICsgdGV4dCArICdcXG5cXG4nO1xuXG4gICAgLy8gZGV0YWJcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdkZXRhYicpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gICAgLyoqXG4gICAgICogU3RyaXAgYW55IGxpbmVzIGNvbnNpc3Rpbmcgb25seSBvZiBzcGFjZXMgYW5kIHRhYnMuXG4gICAgICogVGhpcyBtYWtlcyBzdWJzZXF1ZW50IHJlZ2V4cyBlYXNpZXIgdG8gd3JpdGUsIGJlY2F1c2Ugd2UgY2FuXG4gICAgICogbWF0Y2ggY29uc2VjdXRpdmUgYmxhbmsgbGluZXMgd2l0aCAvXFxuKy8gaW5zdGVhZCBvZiBzb21ldGhpbmdcbiAgICAgKiBjb250b3J0ZWQgbGlrZSAvWyBcXHRdKlxcbisvXG4gICAgICovXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlsgXFx0XSskL21nLCAnJyk7XG5cbiAgICAvL3J1biBsYW5ndWFnZUV4dGVuc2lvbnNcbiAgICBzaG93ZG93bi5oZWxwZXIuZm9yRWFjaChsYW5nRXh0ZW5zaW9ucywgZnVuY3Rpb24gKGV4dCkge1xuICAgICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigncnVuRXh0ZW5zaW9uJykoZXh0LCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9KTtcblxuICAgIC8vIHJ1biB0aGUgc3ViIHBhcnNlcnNcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtZXRhZGF0YScpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hQcmVDb2RlVGFncycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2dpdGh1YkNvZGVCbG9ja3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hDb2RlVGFncycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlwTGlua0RlZmluaXRpb25zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuaGFzaEhUTUxTcGFucycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuZXNjYXBlU3BlY2lhbENoYXJzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAvLyBhdHRhY2tsYWI6IFJlc3RvcmUgZG9sbGFyIHNpZ25zXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqhEL2csICckJCcpO1xuXG4gICAgLy8gYXR0YWNrbGFiOiBSZXN0b3JlIHRyZW1hc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoVC9nLCAnwqgnKTtcblxuICAgIC8vIHJlbmRlciBhIGNvbXBsZXRlIGh0bWwgZG9jdW1lbnQgaW5zdGVhZCBvZiBhIHBhcnRpYWwgaWYgdGhlIG9wdGlvbiBpcyBlbmFibGVkXG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignY29tcGxldGVIVE1MRG9jdW1lbnQnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAgIC8vIFJ1biBvdXRwdXQgbW9kaWZpZXJzXG4gICAgc2hvd2Rvd24uaGVscGVyLmZvckVhY2gob3V0cHV0TW9kaWZpZXJzLCBmdW5jdGlvbiAoZXh0KSB7XG4gICAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nKShleHQsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG1ldGFkYXRhXG4gICAgbWV0YWRhdGEgPSBnbG9iYWxzLm1ldGFkYXRhO1xuICAgIHJldHVybiB0ZXh0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBIVE1MIHN0cmluZyBpbnRvIGEgbWFya2Rvd24gc3RyaW5nXG4gICAqIEBwYXJhbSBzcmNcbiAgICogQHBhcmFtIFtIVE1MUGFyc2VyXSBBIFdIQVRXRyBET00gYW5kIEhUTUwgcGFyc2VyLCBzdWNoIGFzIEpTRE9NLiBJZiBub25lIGlzIHN1cHBsaWVkLCB3aW5kb3cuZG9jdW1lbnQgd2lsbCBiZSB1c2VkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5tYWtlTWFya2Rvd24gPSB0aGlzLm1ha2VNZCA9IGZ1bmN0aW9uIChzcmMsIEhUTUxQYXJzZXIpIHtcblxuICAgIC8vIHJlcGxhY2UgXFxyXFxuIHdpdGggXFxuXG4gICAgc3JjID0gc3JjLnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJyk7XG4gICAgc3JjID0gc3JjLnJlcGxhY2UoL1xcci9nLCAnXFxuJyk7IC8vIG9sZCBtYWNzXG5cbiAgICAvLyBkdWUgdG8gYW4gZWRnZSBjYXNlLCB3ZSBuZWVkIHRvIGZpbmQgdGhpczogPiA8XG4gICAgLy8gdG8gcHJldmVudCByZW1vdmluZyBvZiBub24gc2lsZW50IHdoaXRlIHNwYWNlc1xuICAgIC8vIGV4OiA8ZW0+dGhpcyBpczwvZW0+IDxzdHJvbmc+c3BhcnRhPC9zdHJvbmc+XG4gICAgc3JjID0gc3JjLnJlcGxhY2UoLz5bIFxcdF0rPC8sICc+wqhOQlNQOzwnKTtcblxuICAgIGlmICghSFRNTFBhcnNlcikge1xuICAgICAgaWYgKHdpbmRvdyAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgSFRNTFBhcnNlciA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSFRNTFBhcnNlciBpcyB1bmRlZmluZWQuIElmIGluIGEgd2Vid29ya2VyIG9yIG5vZGVqcyBlbnZpcm9ubWVudCwgeW91IG5lZWQgdG8gcHJvdmlkZSBhIFdIQVRXRyBET00gYW5kIEhUTUwgc3VjaCBhcyBKU0RPTScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkb2MgPSBIVE1MUGFyc2VyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRvYy5pbm5lckhUTUwgPSBzcmM7XG5cbiAgICB2YXIgZ2xvYmFscyA9IHtcbiAgICAgIHByZUxpc3Q6IHN1YnN0aXR1dGVQcmVDb2RlVGFncyhkb2MpXG4gICAgfTtcblxuICAgIC8vIHJlbW92ZSBhbGwgbmV3bGluZXMgYW5kIGNvbGxhcHNlIHNwYWNlc1xuICAgIGNsZWFuKGRvYyk7XG5cbiAgICAvLyBzb21lIHN0dWZmLCBsaWtlIGFjY2lkZW50YWwgcmVmZXJlbmNlIGxpbmtzIG11c3Qgbm93IGJlIGVzY2FwZWRcbiAgICAvLyBUT0RPXG4gICAgLy8gZG9jLmlubmVySFRNTCA9IGRvYy5pbm5lckhUTUwucmVwbGFjZSgvXFxbW1xcU1xcdCBdXS8pO1xuXG4gICAgdmFyIG5vZGVzID0gZG9jLmNoaWxkTm9kZXMsXG4gICAgICAgIG1kRG9jID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtZERvYyArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykobm9kZXNbaV0sIGdsb2JhbHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFuIChub2RlKSB7XG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7ICsrbikge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkTm9kZXNbbl07XG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgIGlmICghL1xcUy8udGVzdChjaGlsZC5ub2RlVmFsdWUpICYmICEvXlsgXSskLy50ZXN0KGNoaWxkLm5vZGVWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgLS1uO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGlsZC5ub2RlVmFsdWUgPSBjaGlsZC5ub2RlVmFsdWUuc3BsaXQoJ1xcbicpLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIGNoaWxkLm5vZGVWYWx1ZSA9IGNoaWxkLm5vZGVWYWx1ZS5yZXBsYWNlKC8oXFxzKSsvZywgJyQxJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgY2xlYW4oY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmluZCBhbGwgcHJlIHRhZ3MgYW5kIHJlcGxhY2UgY29udGVudHMgd2l0aCBwbGFjZWhvbGRlclxuICAgIC8vIHdlIG5lZWQgdGhpcyBzbyB0aGF0IHdlIGNhbiByZW1vdmUgYWxsIGluZGVudGF0aW9uIGZyb20gaHRtbFxuICAgIC8vIHRvIGVhc2UgdXAgcGFyc2luZ1xuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVQcmVDb2RlVGFncyAoZG9jKSB7XG5cbiAgICAgIHZhciBwcmVzID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZScpLFxuICAgICAgICAgIHByZXNQSCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXMubGVuZ3RoOyArK2kpIHtcblxuICAgICAgICBpZiAocHJlc1tpXS5jaGlsZEVsZW1lbnRDb3VudCA9PT0gMSAmJiBwcmVzW2ldLmZpcnN0Q2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnY29kZScpIHtcbiAgICAgICAgICB2YXIgY29udGVudCA9IHByZXNbaV0uZmlyc3RDaGlsZC5pbm5lckhUTUwudHJpbSgpLFxuICAgICAgICAgICAgICBsYW5ndWFnZSA9IHByZXNbaV0uZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGFuZ3VhZ2UnKSB8fCAnJztcblxuICAgICAgICAgIC8vIGlmIGRhdGEtbGFuZ3VhZ2UgYXR0cmlidXRlIGlzIG5vdCBkZWZpbmVkLCB0aGVuIHdlIGxvb2sgZm9yIGNsYXNzIGxhbmd1YWdlLSpcbiAgICAgICAgICBpZiAobGFuZ3VhZ2UgPT09ICcnKSB7XG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IHByZXNbaV0uZmlyc3RDaGlsZC5jbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgY2xhc3Nlcy5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IGNsYXNzZXNbY10ubWF0Y2goL15sYW5ndWFnZS0oLispJC8pO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlID0gbWF0Y2hlc1sxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVuZXNjYXBlIGh0bWwgZW50aXRpZXMgaW4gY29udGVudFxuICAgICAgICAgIGNvbnRlbnQgPSBzaG93ZG93bi5oZWxwZXIudW5lc2NhcGVIVE1MRW50aXRpZXMoY29udGVudCk7XG5cbiAgICAgICAgICBwcmVzUEgucHVzaChjb250ZW50KTtcbiAgICAgICAgICBwcmVzW2ldLm91dGVySFRNTCA9ICc8cHJlY29kZSBsYW5ndWFnZT1cIicgKyBsYW5ndWFnZSArICdcIiBwcmVjb2RlbnVtPVwiJyArIGkudG9TdHJpbmcoKSArICdcIj48L3ByZWNvZGU+JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVzUEgucHVzaChwcmVzW2ldLmlubmVySFRNTCk7XG4gICAgICAgICAgcHJlc1tpXS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICBwcmVzW2ldLnNldEF0dHJpYnV0ZSgncHJlbnVtJywgaS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXNQSDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWREb2M7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCBhbiBvcHRpb24gb2YgdGhpcyBDb252ZXJ0ZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICB0aGlzLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgb3B0aW9uc1trZXldID0gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgb3B0aW9uIG9mIHRoaXMgQ29udmVydGVyIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICB0aGlzLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gb3B0aW9uc1trZXldO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG9wdGlvbnMgb2YgdGhpcyBDb252ZXJ0ZXIgaW5zdGFuY2VcbiAgICogQHJldHVybnMge3t9fVxuICAgKi9cbiAgdGhpcy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgZXh0ZW5zaW9uIHRvIFRISVMgY29udmVydGVyXG4gICAqIEBwYXJhbSB7e319IGV4dGVuc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWU9bnVsbF1cbiAgICovXG4gIHRoaXMuYWRkRXh0ZW5zaW9uID0gZnVuY3Rpb24gKGV4dGVuc2lvbiwgbmFtZSkge1xuICAgIG5hbWUgPSBuYW1lIHx8IG51bGw7XG4gICAgX3BhcnNlRXh0ZW5zaW9uKGV4dGVuc2lvbiwgbmFtZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVzZSBhIGdsb2JhbCByZWdpc3RlcmVkIGV4dGVuc2lvbiB3aXRoIFRISVMgY29udmVydGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb25OYW1lIE5hbWUgb2YgdGhlIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBleHRlbnNpb25cbiAgICovXG4gIHRoaXMudXNlRXh0ZW5zaW9uID0gZnVuY3Rpb24gKGV4dGVuc2lvbk5hbWUpIHtcbiAgICBfcGFyc2VFeHRlbnNpb24oZXh0ZW5zaW9uTmFtZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZmxhdm9yIFRISVMgY29udmVydGVyIHNob3VsZCB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIHRoaXMuc2V0Rmxhdm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIWZsYXZvci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IobmFtZSArICcgZmxhdm9yIHdhcyBub3QgZm91bmQnKTtcbiAgICB9XG4gICAgdmFyIHByZXNldCA9IGZsYXZvcltuYW1lXTtcbiAgICBzZXRDb252Rmxhdm9yID0gbmFtZTtcbiAgICBmb3IgKHZhciBvcHRpb24gaW4gcHJlc2V0KSB7XG4gICAgICBpZiAocHJlc2V0Lmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgICAgb3B0aW9uc1tvcHRpb25dID0gcHJlc2V0W29wdGlvbl07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnRseSBzZXQgZmxhdm9yIG9mIHRoaXMgY29udmVydGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmdldEZsYXZvciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc2V0Q29udkZsYXZvcjtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV4dGVuc2lvbiBmcm9tIFRISVMgY29udmVydGVyLlxuICAgKiBOb3RlOiBUaGlzIGlzIGEgY29zdGx5IG9wZXJhdGlvbi4gSXQncyBiZXR0ZXIgdG8gaW5pdGlhbGl6ZSBhIG5ldyBjb252ZXJ0ZXJcbiAgICogYW5kIHNwZWNpZnkgdGhlIGV4dGVuc2lvbnMgeW91IHdpc2ggdG8gdXNlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4dGVuc2lvblxuICAgKi9cbiAgdGhpcy5yZW1vdmVFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHRlbnNpb24pKSB7XG4gICAgICBleHRlbnNpb24gPSBbZXh0ZW5zaW9uXTtcbiAgICB9XG4gICAgZm9yICh2YXIgYSA9IDA7IGEgPCBleHRlbnNpb24ubGVuZ3RoOyArK2EpIHtcbiAgICAgIHZhciBleHQgPSBleHRlbnNpb25bYV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhbmdFeHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChsYW5nRXh0ZW5zaW9uc1tpXSA9PT0gZXh0KSB7XG4gICAgICAgICAgbGFuZ0V4dGVuc2lvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgb3V0cHV0TW9kaWZpZXJzLmxlbmd0aDsgKytpaSkge1xuICAgICAgICBpZiAob3V0cHV0TW9kaWZpZXJzW2lpXSA9PT0gZXh0KSB7XG4gICAgICAgICAgb3V0cHV0TW9kaWZpZXJzLnNwbGljZShpaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgZXh0ZW5zaW9uIG9mIFRISVMgY29udmVydGVyXG4gICAqIEByZXR1cm5zIHt7bGFuZ3VhZ2U6IEFycmF5LCBvdXRwdXQ6IEFycmF5fX1cbiAgICovXG4gIHRoaXMuZ2V0QWxsRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFuZ3VhZ2U6IGxhbmdFeHRlbnNpb25zLFxuICAgICAgb3V0cHV0OiBvdXRwdXRNb2RpZmllcnNcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1ldGFkYXRhIG9mIHRoZSBwcmV2aW91c2x5IHBhcnNlZCBkb2N1bWVudFxuICAgKiBAcGFyYW0gcmF3XG4gICAqIEByZXR1cm5zIHtzdHJpbmd8e319XG4gICAqL1xuICB0aGlzLmdldE1ldGFkYXRhID0gZnVuY3Rpb24gKHJhdykge1xuICAgIGlmIChyYXcpIHtcbiAgICAgIHJldHVybiBtZXRhZGF0YS5yYXc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXRhZGF0YS5wYXJzZWQ7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1ldGFkYXRhIGZvcm1hdCBvZiB0aGUgcHJldmlvdXNseSBwYXJzZWQgZG9jdW1lbnRcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRoaXMuZ2V0TWV0YWRhdGFGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1ldGFkYXRhLmZvcm1hdDtcbiAgfTtcblxuICAvKipcbiAgICogUHJpdmF0ZTogc2V0IGEgc2luZ2xlIGtleSwgdmFsdWUgbWV0YWRhdGEgcGFpclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgdGhpcy5fc2V0TWV0YWRhdGFQYWlyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBtZXRhZGF0YS5wYXJzZWRba2V5XSA9IHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlOiBzZXQgbWV0YWRhdGEgZm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXRcbiAgICovXG4gIHRoaXMuX3NldE1ldGFkYXRhRm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIG1ldGFkYXRhLmZvcm1hdCA9IGZvcm1hdDtcbiAgfTtcblxuICAvKipcbiAgICogUHJpdmF0ZTogc2V0IG1ldGFkYXRhIHJhdyB0ZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSByYXdcbiAgICovXG4gIHRoaXMuX3NldE1ldGFkYXRhUmF3ID0gZnVuY3Rpb24gKHJhdykge1xuICAgIG1ldGFkYXRhLnJhdyA9IHJhdztcbiAgfTtcbn07XG4iLCIvKipcbiAqIFR1cm4gTWFya2Rvd24gbGluayBzaG9ydGN1dHMgaW50byBYSFRNTCA8YT4gdGFncy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdhbmNob3JzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2FuY2hvcnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIHdyaXRlQW5jaG9yVGFnID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGxpbmtUZXh0LCBsaW5rSWQsIHVybCwgbTUsIG02LCB0aXRsZSkge1xuICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQodGl0bGUpKSB7XG4gICAgICB0aXRsZSA9ICcnO1xuICAgIH1cbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgZXhwbGljaXQgZW1wdHkgdXJsXG4gICAgaWYgKHdob2xlTWF0Y2guc2VhcmNoKC9cXCg8P1xccyo+PyA/KFsnXCJdLipbJ1wiXSk/XFwpJC9tKSA+IC0xKSB7XG4gICAgICB1cmwgPSAnJztcbiAgICB9IGVsc2UgaWYgKCF1cmwpIHtcbiAgICAgIGlmICghbGlua0lkKSB7XG4gICAgICAgIC8vIGxvd2VyLWNhc2UgYW5kIHR1cm4gZW1iZWRkZWQgbmV3bGluZXMgaW50byBzcGFjZXNcbiAgICAgICAgbGlua0lkID0gbGlua1RleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gP1xcbi9nLCAnICcpO1xuICAgICAgfVxuICAgICAgdXJsID0gJyMnICsgbGlua0lkO1xuXG4gICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnbG9iYWxzLmdVcmxzW2xpbmtJZF0pKSB7XG4gICAgICAgIHVybCA9IGdsb2JhbHMuZ1VybHNbbGlua0lkXTtcbiAgICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ2xvYmFscy5nVGl0bGVzW2xpbmtJZF0pKSB7XG4gICAgICAgICAgdGl0bGUgPSBnbG9iYWxzLmdUaXRsZXNbbGlua0lkXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHdob2xlTWF0Y2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy91cmwgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh1cmwsICcqXycsIGZhbHNlKTsgLy8gcmVwbGFjZWQgbGluZSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlXG4gICAgdXJsID0gdXJsLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gICAgdmFyIHJlc3VsdCA9ICc8YSBocmVmPVwiJyArIHVybCArICdcIic7XG5cbiAgICBpZiAodGl0bGUgIT09ICcnICYmIHRpdGxlICE9PSBudWxsKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICAgIC8vdGl0bGUgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh0aXRsZSwgJypfJywgZmFsc2UpOyAvLyByZXBsYWNlZCBsaW5lIHRvIGltcHJvdmUgcGVyZm9ybWFuY2VcbiAgICAgIHRpdGxlID0gdGl0bGUucmVwbGFjZShzaG93ZG93bi5oZWxwZXIucmVnZXhlcy5hc3Rlcmlza0Rhc2hBbmRDb2xvbiwgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gICAgICByZXN1bHQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuXG4gICAgLy8gb3B0aW9uTGlua3NJbk5ld1dpbmRvdyBvbmx5IGFwcGxpZXNcbiAgICAvLyB0byBleHRlcm5hbCBsaW5rcy4gSGFzaCBsaW5rcyAoIykgb3BlbiBpbiBzYW1lIHBhZ2VcbiAgICBpZiAob3B0aW9ucy5vcGVuTGlua3NJbk5ld1dpbmRvdyAmJiAhL14jLy50ZXN0KHVybCkpIHtcbiAgICAgIC8vIGVzY2FwZWQgX1xuICAgICAgcmVzdWx0ICs9ICcgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIsKoRTk1RWJsYW5rXCInO1xuICAgIH1cblxuICAgIHJlc3VsdCArPSAnPicgKyBsaW5rVGV4dCArICc8L2E+JztcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gRmlyc3QsIGhhbmRsZSByZWZlcmVuY2Utc3R5bGUgbGlua3M6IFtsaW5rIHRleHRdIFtpZF1cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxbKCg/OlxcW1teXFxdXSpdfFteXFxbXFxdXSkqKV0gPyg/OlxcbiAqKT9cXFsoLio/KV0oKSgpKCkoKS9nLCB3cml0ZUFuY2hvclRhZyk7XG5cbiAgLy8gTmV4dCwgaW5saW5lLXN0eWxlIGxpbmtzOiBbbGluayB0ZXh0XSh1cmwgXCJvcHRpb25hbCB0aXRsZVwiKVxuICAvLyBjYXNlcyB3aXRoIGNyYXp5IHVybHMgbGlrZSAuL2ltYWdlL2NhdDEpLnBuZ1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsoKD86XFxbW15cXF1dKl18W15cXFtcXF1dKSopXSgpWyBcXHRdKlxcKFsgXFx0XT88KFtePl0qKT4oPzpbIFxcdF0qKChbXCInXSkoW15cIl0qPylcXDUpKT9bIFxcdF0/XFwpL2csXG4gICAgd3JpdGVBbmNob3JUYWcpO1xuXG4gIC8vIG5vcm1hbCBjYXNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsoKD86XFxbW15cXF1dKl18W15cXFtcXF1dKSopXSgpWyBcXHRdKlxcKFsgXFx0XT88PyhbXFxTXSs/KD86XFwoW1xcU10qP1xcKVtcXFNdKj8pPyk+Pyg/OlsgXFx0XSooKFtcIiddKShbXlwiXSo/KVxcNSkpP1sgXFx0XT9cXCkvZyxcbiAgICB3cml0ZUFuY2hvclRhZyk7XG5cbiAgLy8gaGFuZGxlIHJlZmVyZW5jZS1zdHlsZSBzaG9ydGN1dHM6IFtsaW5rIHRleHRdXG4gIC8vIFRoZXNlIG11c3QgY29tZSBsYXN0IGluIGNhc2UgeW91J3ZlIGFsc28gZ290IFtsaW5rIHRlc3RdWzFdXG4gIC8vIG9yIFtsaW5rIHRlc3RdKC9mb28pXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcWyhbXlxcW1xcXV0rKV0oKSgpKCkoKSgpL2csIHdyaXRlQW5jaG9yVGFnKTtcblxuICAvLyBMYXN0bHkgaGFuZGxlIEdpdGh1Yk1lbnRpb25zIGlmIG9wdGlvbiBpcyBlbmFibGVkXG4gIGlmIChvcHRpb25zLmdoTWVudGlvbnMpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXnxcXHMpKFxcXFwpPyhAKFthLXpcXGRdKyg/OlthLXpcXGQuLV0rP1thLXpcXGRdKykqKSkvZ21pLCBmdW5jdGlvbiAod20sIHN0LCBlc2NhcGUsIG1lbnRpb25zLCB1c2VybmFtZSkge1xuICAgICAgaWYgKGVzY2FwZSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIHJldHVybiBzdCArIG1lbnRpb25zO1xuICAgICAgfVxuXG4gICAgICAvL2NoZWNrIGlmIG9wdGlvbnMuZ2hNZW50aW9uc0xpbmsgaXMgYSBzdHJpbmdcbiAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG9wdGlvbnMuZ2hNZW50aW9uc0xpbmspKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ2hNZW50aW9uc0xpbmsgb3B0aW9uIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIHZhciBsbmsgPSBvcHRpb25zLmdoTWVudGlvbnNMaW5rLnJlcGxhY2UoL1xce3V9L2csIHVzZXJuYW1lKSxcbiAgICAgICAgICB0YXJnZXQgPSAnJztcbiAgICAgIGlmIChvcHRpb25zLm9wZW5MaW5rc0luTmV3V2luZG93KSB7XG4gICAgICAgIHRhcmdldCA9ICcgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIsKoRTk1RWJsYW5rXCInO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0ICsgJzxhIGhyZWY9XCInICsgbG5rICsgJ1wiJyArIHRhcmdldCArICc+JyArIG1lbnRpb25zICsgJzwvYT4nO1xuICAgIH0pO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYW5jaG9ycy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLy8gdXJsIGFsbG93ZWQgY2hhcnMgW2EtelxcZF8ufjovPyNbXUAhJCYnKCkqKyw7PS1dXG5cbnZhciBzaW1wbGVVUkxSZWdleCAgPSAvKFsqfl9dK3xcXGIpKCgoaHR0cHM/fGZ0cHxkaWN0KTpcXC9cXC98d3d3XFwuKVteJ1wiPlxcc10rP1xcLlteJ1wiPlxcc10rPykoKShcXDEpPyg/PVxcc3wkKSg/IVtcIjw+XSkvZ2ksXG4gICAgc2ltcGxlVVJMUmVnZXgyID0gLyhbKn5fXSt8XFxiKSgoKGh0dHBzP3xmdHB8ZGljdCk6XFwvXFwvfHd3d1xcLilbXidcIj5cXHNdK1xcLlteJ1wiPlxcc10rPykoWy4hPywoKVxcW1xcXV0pPyhcXDEpPyg/PVxcc3wkKSg/IVtcIjw+XSkvZ2ksXG4gICAgZGVsaW1VcmxSZWdleCAgID0gLygpPCgoKGh0dHBzP3xmdHB8ZGljdCk6XFwvXFwvfHd3d1xcLilbXidcIj5cXHNdKykoKT4oKS9naSxcbiAgICBzaW1wbGVNYWlsUmVnZXggPSAvKF58XFxzKSg/Om1haWx0bzopPyhbQS1aYS16MC05ISMkJSYnKistLz0/Xl9ge3x9fi5dK0BbLWEtejAtOV0rKFxcLlstYS16MC05XSspKlxcLlthLXpdKykoPz0kfFxccykvZ21pLFxuICAgIGRlbGltTWFpbFJlZ2V4ICA9IC88KCkoPzptYWlsdG86KT8oWy0uXFx3XStAWy1hLXowLTldKyhcXC5bLWEtejAtOV0rKSpcXC5bYS16XSspPi9naSxcblxuICAgIHJlcGxhY2VMaW5rID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHJldHVybiBmdW5jdGlvbiAod20sIGxlYWRpbmdNYWdpY0NoYXJzLCBsaW5rLCBtMiwgbTMsIHRyYWlsaW5nUHVuY3R1YXRpb24sIHRyYWlsaW5nTWFnaWNDaGFycykge1xuICAgICAgICBsaW5rID0gbGluay5yZXBsYWNlKHNob3dkb3duLmhlbHBlci5yZWdleGVzLmFzdGVyaXNrRGFzaEFuZENvbG9uLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgICAgICAgdmFyIGxua1R4dCA9IGxpbmssXG4gICAgICAgICAgICBhcHBlbmQgPSAnJyxcbiAgICAgICAgICAgIHRhcmdldCA9ICcnLFxuICAgICAgICAgICAgbG1jICAgID0gbGVhZGluZ01hZ2ljQ2hhcnMgfHwgJycsXG4gICAgICAgICAgICB0bWMgICAgPSB0cmFpbGluZ01hZ2ljQ2hhcnMgfHwgJyc7XG4gICAgICAgIGlmICgvXnd3d1xcLi9pLnRlc3QobGluaykpIHtcbiAgICAgICAgICBsaW5rID0gbGluay5yZXBsYWNlKC9ed3d3XFwuL2ksICdodHRwOi8vd3d3LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHMgJiYgdHJhaWxpbmdQdW5jdHVhdGlvbikge1xuICAgICAgICAgIGFwcGVuZCA9IHRyYWlsaW5nUHVuY3R1YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMub3BlbkxpbmtzSW5OZXdXaW5kb3cpIHtcbiAgICAgICAgICB0YXJnZXQgPSAnIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCLCqEU5NUVibGFua1wiJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG1jICsgJzxhIGhyZWY9XCInICsgbGluayArICdcIicgKyB0YXJnZXQgKyAnPicgKyBsbmtUeHQgKyAnPC9hPicgKyBhcHBlbmQgKyB0bWM7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICByZXBsYWNlTWFpbCA9IGZ1bmN0aW9uIChvcHRpb25zLCBnbG9iYWxzKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGIsIG1haWwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSAnbWFpbHRvOic7XG4gICAgICAgIGIgPSBiIHx8ICcnO1xuICAgICAgICBtYWlsID0gc2hvd2Rvd24uc3ViUGFyc2VyKCd1bmVzY2FwZVNwZWNpYWxDaGFycycpKG1haWwsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICBpZiAob3B0aW9ucy5lbmNvZGVFbWFpbHMpIHtcbiAgICAgICAgICBocmVmID0gc2hvd2Rvd24uaGVscGVyLmVuY29kZUVtYWlsQWRkcmVzcyhocmVmICsgbWFpbCk7XG4gICAgICAgICAgbWFpbCA9IHNob3dkb3duLmhlbHBlci5lbmNvZGVFbWFpbEFkZHJlc3MobWFpbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaHJlZiA9IGhyZWYgKyBtYWlsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiICsgJzxhIGhyZWY9XCInICsgaHJlZiArICdcIj4nICsgbWFpbCArICc8L2E+JztcbiAgICAgIH07XG4gICAgfTtcblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdhdXRvTGlua3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYXV0b0xpbmtzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoZGVsaW1VcmxSZWdleCwgcmVwbGFjZUxpbmsob3B0aW9ucykpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGRlbGltTWFpbFJlZ2V4LCByZXBsYWNlTWFpbChvcHRpb25zLCBnbG9iYWxzKSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYXV0b0xpbmtzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdzaW1wbGlmaWVkQXV0b0xpbmtzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5zaW1wbGlmaWVkQXV0b0xpbmspIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3NpbXBsaWZpZWRBdXRvTGlua3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgaWYgKG9wdGlvbnMuZXhjbHVkZVRyYWlsaW5nUHVuY3R1YXRpb25Gcm9tVVJMcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2ltcGxlVVJMUmVnZXgyLCByZXBsYWNlTGluayhvcHRpb25zKSk7XG4gIH0gZWxzZSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShzaW1wbGVVUkxSZWdleCwgcmVwbGFjZUxpbmsob3B0aW9ucykpO1xuICB9XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2ltcGxlTWFpbFJlZ2V4LCByZXBsYWNlTWFpbChvcHRpb25zLCBnbG9iYWxzKSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnc2ltcGxpZmllZEF1dG9MaW5rcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHRyYW5zZm9ybWF0aW9ucyB0aGF0IGZvcm0gYmxvY2stbGV2ZWxcbiAqIHRhZ3MgbGlrZSBwYXJhZ3JhcGhzLCBoZWFkZXJzLCBhbmQgbGlzdCBpdGVtcy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja0dhbXV0JywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrR2FtdXQuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gd2UgcGFyc2UgYmxvY2txdW90ZXMgZmlyc3Qgc28gdGhhdCB3ZSBjYW4gaGF2ZSBoZWFkaW5ncyBhbmQgaHJzXG4gIC8vIGluc2lkZSBibG9ja3F1b3Rlc1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja1F1b3RlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoZWFkZXJzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gRG8gSG9yaXpvbnRhbCBSdWxlczpcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaG9yaXpvbnRhbFJ1bGUnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdsaXN0cycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlQmxvY2tzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3RhYmxlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIFdlIGFscmVhZHkgcmFuIF9IYXNoSFRNTEJsb2NrcygpIGJlZm9yZSwgaW4gTWFya2Rvd24oKSwgYnV0IHRoYXRcbiAgLy8gd2FzIHRvIGVzY2FwZSByYXcgSFRNTCBpbiB0aGUgb3JpZ2luYWwgTWFya2Rvd24gc291cmNlLiBUaGlzIHRpbWUsXG4gIC8vIHdlJ3JlIGVzY2FwaW5nIHRoZSBtYXJrdXAgd2UndmUganVzdCBjcmVhdGVkLCBzbyB0aGF0IHdlIGRvbid0IHdyYXBcbiAgLy8gPHA+IHRhZ3MgYXJvdW5kIGJsb2NrLWxldmVsIHRhZ3MuXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MQmxvY2tzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3BhcmFncmFwaHMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdibG9ja0dhbXV0LmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignYmxvY2tRdW90ZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYmxvY2tRdW90ZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gYWRkIGEgY291cGxlIGV4dHJhIGxpbmVzIGFmdGVyIHRoZSB0ZXh0IGFuZCBlbmR0ZXh0IG1hcmtcbiAgdGV4dCA9IHRleHQgKyAnXFxuXFxuJztcblxuICB2YXIgcmd4ID0gLyheIHswLDN9PlsgXFx0XT8uK1xcbiguK1xcbikqXFxuKikrL2dtO1xuXG4gIGlmIChvcHRpb25zLnNwbGl0QWRqYWNlbnRCbG9ja3F1b3Rlcykge1xuICAgIHJneCA9IC9eIHswLDN9PltcXHNcXFNdKj8oPzpcXG5cXG4pL2dtO1xuICB9XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZ3gsIGZ1bmN0aW9uIChicSkge1xuICAgIC8vIGF0dGFja2xhYjogaGFjayBhcm91bmQgS29ucXVlcm9yIDMuNS40IGJ1ZzpcbiAgICAvLyBcIi0tLS0tLS0tLS1idWdcIi5yZXBsYWNlKC9eLS9nLFwiXCIpID09IFwiYnVnXCJcbiAgICBicSA9IGJxLnJlcGxhY2UoL15bIFxcdF0qPlsgXFx0XT8vZ20sICcnKTsgLy8gdHJpbSBvbmUgbGV2ZWwgb2YgcXVvdGluZ1xuXG4gICAgLy8gYXR0YWNrbGFiOiBjbGVhbiB1cCBoYWNrXG4gICAgYnEgPSBicS5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gICAgYnEgPSBicS5yZXBsYWNlKC9eWyBcXHRdKyQvZ20sICcnKTsgLy8gdHJpbSB3aGl0ZXNwYWNlLW9ubHkgbGluZXNcbiAgICBicSA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKGJxLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBicSA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKGJxLCBvcHRpb25zLCBnbG9iYWxzKTsgLy8gcmVjdXJzZVxuXG4gICAgYnEgPSBicS5yZXBsYWNlKC8oXnxcXG4pL2csICckMSAgJyk7XG4gICAgLy8gVGhlc2UgbGVhZGluZyBzcGFjZXMgc2NyZXcgd2l0aCA8cHJlPiBjb250ZW50LCBzbyB3ZSBuZWVkIHRvIGZpeCB0aGF0OlxuICAgIGJxID0gYnEucmVwbGFjZSgvKFxccyo8cHJlPlteXFxyXSs/PFxcL3ByZT4pL2dtLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcbiAgICAgIHZhciBwcmUgPSBtMTtcbiAgICAgIC8vIGF0dGFja2xhYjogaGFjayBhcm91bmQgS29ucXVlcm9yIDMuNS40IGJ1ZzpcbiAgICAgIHByZSA9IHByZS5yZXBsYWNlKC9eICAvbWcsICfCqDAnKTtcbiAgICAgIHByZSA9IHByZS5yZXBsYWNlKC/CqDAvZywgJycpO1xuICAgICAgcmV0dXJuIHByZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKCc8YmxvY2txdW90ZT5cXG4nICsgYnEgKyAnXFxuPC9ibG9ja3F1b3RlPicsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB9KTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdibG9ja1F1b3Rlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKiBQcm9jZXNzIE1hcmtkb3duIGA8cHJlPjxjb2RlPmAgYmxvY2tzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVCbG9ja3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29kZUJsb2Nrcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBzZW50aW5lbCB3b3JrYXJvdW5kcyBmb3IgbGFjayBvZiBcXEEgYW5kIFxcWiwgc2FmYXJpXFxraHRtbCBidWdcbiAgdGV4dCArPSAnwqgwJztcblxuICB2YXIgcGF0dGVybiA9IC8oPzpcXG5cXG58XikoKD86KD86WyBdezR9fFxcdCkuKlxcbispKykoXFxuKlsgXXswLDN9W14gXFx0XFxuXXwoPz3CqDApKS9nO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHBhdHRlcm4sIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSwgbTIpIHtcbiAgICB2YXIgY29kZWJsb2NrID0gbTEsXG4gICAgICAgIG5leHRDaGFyID0gbTIsXG4gICAgICAgIGVuZCA9ICdcXG4nO1xuXG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdvdXRkZW50JykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignZGV0YWInKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9eXFxuKy9nLCAnJyk7IC8vIHRyaW0gbGVhZGluZyBuZXdsaW5lc1xuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7IC8vIHRyaW0gdHJhaWxpbmcgbmV3bGluZXNcblxuICAgIGlmIChvcHRpb25zLm9taXRFeHRyYVdMSW5Db2RlQmxvY2tzKSB7XG4gICAgICBlbmQgPSAnJztcbiAgICB9XG5cbiAgICBjb2RlYmxvY2sgPSAnPHByZT48Y29kZT4nICsgY29kZWJsb2NrICsgZW5kICsgJzwvY29kZT48L3ByZT4nO1xuXG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKSArIG5leHRDaGFyO1xuICB9KTtcblxuICAvLyBzdHJpcCBzZW50aW5lbFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqDAvLCAnJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29kZUJsb2Nrcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKlxuICogICAqICBCYWNrdGljayBxdW90ZXMgYXJlIHVzZWQgZm9yIDxjb2RlPjwvY29kZT4gc3BhbnMuXG4gKlxuICogICAqICBZb3UgY2FuIHVzZSBtdWx0aXBsZSBiYWNrdGlja3MgYXMgdGhlIGRlbGltaXRlcnMgaWYgeW91IHdhbnQgdG9cbiAqICAgICBpbmNsdWRlIGxpdGVyYWwgYmFja3RpY2tzIGluIHRoZSBjb2RlIHNwYW4uIFNvLCB0aGlzIGlucHV0OlxuICpcbiAqICAgICAgICAgSnVzdCB0eXBlIGBgZm9vIGBiYXJgIGJhemBgIGF0IHRoZSBwcm9tcHQuXG4gKlxuICogICAgICAgV2lsbCB0cmFuc2xhdGUgdG86XG4gKlxuICogICAgICAgICA8cD5KdXN0IHR5cGUgPGNvZGU+Zm9vIGBiYXJgIGJhejwvY29kZT4gYXQgdGhlIHByb21wdC48L3A+XG4gKlxuICogICAgVGhlcmUncyBubyBhcmJpdHJhcnkgbGltaXQgdG8gdGhlIG51bWJlciBvZiBiYWNrdGlja3MgeW91XG4gKiAgICBjYW4gdXNlIGFzIGRlbGltdGVycy4gSWYgeW91IG5lZWQgdGhyZWUgY29uc2VjdXRpdmUgYmFja3RpY2tzXG4gKiAgICBpbiB5b3VyIGNvZGUsIHVzZSBmb3VyIGZvciBkZWxpbWl0ZXJzLCBldGMuXG4gKlxuICogICogIFlvdSBjYW4gdXNlIHNwYWNlcyB0byBnZXQgbGl0ZXJhbCBiYWNrdGlja3MgYXQgdGhlIGVkZ2VzOlxuICpcbiAqICAgICAgICAgLi4uIHR5cGUgYGAgYGJhcmAgYGAgLi4uXG4gKlxuICogICAgICAgVHVybnMgdG86XG4gKlxuICogICAgICAgICAuLi4gdHlwZSA8Y29kZT5gYmFyYDwvY29kZT4gLi4uXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignY29kZVNwYW5zJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvZGVTcGFucy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBpZiAodHlwZW9mICh0ZXh0KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0ZXh0ID0gJyc7XG4gIH1cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF58W15cXFxcXSkoYCspKFteXFxyXSo/W15gXSlcXDIoPyFgKS9nbSxcbiAgICBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yLCBtMykge1xuICAgICAgdmFyIGMgPSBtMztcbiAgICAgIGMgPSBjLnJlcGxhY2UoL14oWyBcXHRdKikvZywgJycpO1x0Ly8gbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgICBjID0gYy5yZXBsYWNlKC9bIFxcdF0qJC9nLCAnJyk7XHQvLyB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICBjID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoYywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICBjID0gbTEgKyAnPGNvZGU+JyArIGMgKyAnPC9jb2RlPic7XG4gICAgICBjID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTFNwYW5zJykoYywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29kZVNwYW5zLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIENyZWF0ZSBhIGZ1bGwgSFRNTCBkb2N1bWVudCBmcm9tIHRoZSBwcm9jZXNzZWQgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb21wbGV0ZUhUTUxEb2N1bWVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuY29tcGxldGVIVE1MRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvbXBsZXRlSFRNTERvY3VtZW50LmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBkb2N0eXBlID0gJ2h0bWwnLFxuICAgICAgZG9jdHlwZVBhcnNlZCA9ICc8IURPQ1RZUEUgSFRNTD5cXG4nLFxuICAgICAgdGl0bGUgPSAnJyxcbiAgICAgIGNoYXJzZXQgPSAnPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XFxuJyxcbiAgICAgIGxhbmcgPSAnJyxcbiAgICAgIG1ldGFkYXRhID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5kb2N0eXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRvY3R5cGVQYXJzZWQgPSAnPCFET0NUWVBFICcgKyAgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuZG9jdHlwZSArICc+XFxuJztcbiAgICBkb2N0eXBlID0gZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuZG9jdHlwZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGRvY3R5cGUgPT09ICdodG1sJyB8fCBkb2N0eXBlID09PSAnaHRtbDUnKSB7XG4gICAgICBjaGFyc2V0ID0gJzxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPic7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgbWV0YSBpbiBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZCkge1xuICAgIGlmIChnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5oYXNPd25Qcm9wZXJ0eShtZXRhKSkge1xuICAgICAgc3dpdGNoIChtZXRhLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnZG9jdHlwZSc6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICAgIHRpdGxlID0gJzx0aXRsZT4nICsgIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLnRpdGxlICsgJzwvdGl0bGU+XFxuJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjaGFyc2V0JzpcbiAgICAgICAgICBpZiAoZG9jdHlwZSA9PT0gJ2h0bWwnIHx8IGRvY3R5cGUgPT09ICdodG1sNScpIHtcbiAgICAgICAgICAgIGNoYXJzZXQgPSAnPG1ldGEgY2hhcnNldD1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5jaGFyc2V0ICsgJ1wiPlxcbic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYXJzZXQgPSAnPG1ldGEgbmFtZT1cImNoYXJzZXRcIiBjb250ZW50PVwiJyArIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLmNoYXJzZXQgKyAnXCI+XFxuJztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbGFuZ3VhZ2UnOlxuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nID0gJyBsYW5nPVwiJyArIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkW21ldGFdICsgJ1wiJztcbiAgICAgICAgICBtZXRhZGF0YSArPSAnPG1ldGEgbmFtZT1cIicgKyBtZXRhICsgJ1wiIGNvbnRlbnQ9XCInICsgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWRbbWV0YV0gKyAnXCI+XFxuJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1ldGFkYXRhICs9ICc8bWV0YSBuYW1lPVwiJyArIG1ldGEgKyAnXCIgY29udGVudD1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZFttZXRhXSArICdcIj5cXG4nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRleHQgPSBkb2N0eXBlUGFyc2VkICsgJzxodG1sJyArIGxhbmcgKyAnPlxcbjxoZWFkPlxcbicgKyB0aXRsZSArIGNoYXJzZXQgKyBtZXRhZGF0YSArICc8L2hlYWQ+XFxuPGJvZHk+XFxuJyArIHRleHQudHJpbSgpICsgJ1xcbjwvYm9keT5cXG48L2h0bWw+JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb21wbGV0ZUhUTUxEb2N1bWVudC5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKiBDb252ZXJ0IGFsbCB0YWJzIHRvIHNwYWNlc1xuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdkZXRhYi5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBleHBhbmQgZmlyc3Qgbi0xIHRhYnNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFx0KD89XFx0KS9nLCAnICAgICcpOyAvLyBnX3RhYl93aWR0aFxuXG4gIC8vIHJlcGxhY2UgdGhlIG50aCB3aXRoIHR3byBzZW50aW5lbHNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFx0L2csICfCqEHCqEInKTtcblxuICAvLyB1c2UgdGhlIHNlbnRpbmVsIHRvIGFuY2hvciBvdXIgcmVnZXggc28gaXQgZG9lc24ndCBleHBsb2RlXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoQiguKz8pwqhBL2csIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuICAgIHZhciBsZWFkaW5nVGV4dCA9IG0xLFxuICAgICAgICBudW1TcGFjZXMgPSA0IC0gbGVhZGluZ1RleHQubGVuZ3RoICUgNDsgIC8vIGdfdGFiX3dpZHRoXG5cbiAgICAvLyB0aGVyZSAqbXVzdCogYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXM6XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1TcGFjZXM7IGkrKykge1xuICAgICAgbGVhZGluZ1RleHQgKz0gJyAnO1xuICAgIH1cblxuICAgIHJldHVybiBsZWFkaW5nVGV4dDtcbiAgfSk7XG5cbiAgLy8gY2xlYW4gdXAgc2VudGluZWxzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoQS9nLCAnICAgICcpOyAgLy8gZ190YWJfd2lkdGhcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqhCL2csICcnKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdkZXRhYi5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdlbGxpcHNpcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuZWxsaXBzaXMpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VsbGlwc2lzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcLlxcLlxcLi9nLCAn4oCmJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZWxsaXBzaXMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKiBUdXJuIGVtb2ppIGNvZGVzIGludG8gZW1vamlzXG4gKlxuICogTGlzdCBvZiBzdXBwb3J0ZWQgZW1vamlzOiBodHRwczovL2dpdGh1Yi5jb20vc2hvd2Rvd25qcy9zaG93ZG93bi93aWtpL0Vtb2ppc1xuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2Vtb2ppJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5lbW9qaSkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW1vamkuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGVtb2ppUmd4ID0gLzooW1xcU10rPyk6L2c7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShlbW9qaVJneCwgZnVuY3Rpb24gKHdtLCBlbW9qaUNvZGUpIHtcbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmVtb2ppcy5oYXNPd25Qcm9wZXJ0eShlbW9qaUNvZGUpKSB7XG4gICAgICByZXR1cm4gc2hvd2Rvd24uaGVscGVyLmVtb2ppc1tlbW9qaUNvZGVdO1xuICAgIH1cbiAgICByZXR1cm4gd207XG4gIH0pO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Vtb2ppLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsIi8qKlxuICogU21hcnQgcHJvY2Vzc2luZyBmb3IgYW1wZXJzYW5kcyBhbmQgYW5nbGUgYnJhY2tldHMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQW1wc0FuZEFuZ2xlcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW5jb2RlQW1wc0FuZEFuZ2xlcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBBbXBlcnNhbmQtZW5jb2RpbmcgYmFzZWQgZW50aXJlbHkgb24gTmF0IElyb25zJ3MgQW1wdXRhdG9yIE1UIHBsdWdpbjpcbiAgLy8gaHR0cDovL2J1bXBwby5uZXQvcHJvamVjdHMvYW1wdXRhdG9yL1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mKD8hIz9beFhdPyg/OlswLTlhLWZBLUZdK3xcXHcrKTspL2csICcmYW1wOycpO1xuXG4gIC8vIEVuY29kZSBuYWtlZCA8J3NcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPCg/IVthLXpcXC8/JCFdKS9naSwgJyZsdDsnKTtcblxuICAvLyBFbmNvZGUgPFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88L2csICcmbHQ7Jyk7XG5cbiAgLy8gRW5jb2RlID5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUFtcHNBbmRBbmdsZXMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsIi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nLCB3aXRoIGFmdGVyIHByb2Nlc3NpbmcgdGhlIGZvbGxvd2luZyBiYWNrc2xhc2ggZXNjYXBlIHNlcXVlbmNlcy5cbiAqXG4gKiBhdHRhY2tsYWI6IFRoZSBwb2xpdGUgd2F5IHRvIGRvIHRoaXMgaXMgd2l0aCB0aGUgbmV3IGVzY2FwZUNoYXJhY3RlcnMoKSBmdW5jdGlvbjpcbiAqXG4gKiAgICB0ZXh0ID0gZXNjYXBlQ2hhcmFjdGVycyh0ZXh0LFwiXFxcXFwiLHRydWUpO1xuICogICAgdGV4dCA9IGVzY2FwZUNoYXJhY3RlcnModGV4dCxcImAqX3t9W10oKT4jKy0uIVwiLHRydWUpO1xuICpcbiAqIC4uLmJ1dCB3ZSdyZSBzaWRlc3RlcHBpbmcgaXRzIHVzZSBvZiB0aGUgKHNsb3cpIFJlZ0V4cCBjb25zdHJ1Y3RvclxuICogYXMgYW4gb3B0aW1pemF0aW9uIGZvciBGaXJlZm94LiAgVGhpcyBmdW5jdGlvbiBnZXRzIGNhbGxlZCBhIExPVC5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFwoXFxcXCkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFwoW2AqX3t9XFxbXFxdKCk+IysuIX49fDotXSkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW5jb2RlQmFja3NsYXNoRXNjYXBlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKiBFbmNvZGUvZXNjYXBlIGNlcnRhaW4gY2hhcmFjdGVycyBpbnNpZGUgTWFya2Rvd24gY29kZSBydW5zLlxuICogVGhlIHBvaW50IGlzIHRoYXQgaW4gY29kZSwgdGhlc2UgY2hhcmFjdGVycyBhcmUgbGl0ZXJhbHMsXG4gKiBhbmQgbG9zZSB0aGVpciBzcGVjaWFsIE1hcmtkb3duIG1lYW5pbmdzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW5jb2RlQ29kZS5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBFbmNvZGUgYWxsIGFtcGVyc2FuZHM7IEhUTUwgZW50aXRpZXMgYXJlIG5vdFxuICAvLyBlbnRpdGllcyB3aXRoaW4gYSBNYXJrZG93biBjb2RlIHNwYW4uXG4gIHRleHQgPSB0ZXh0XG4gICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgLy8gRG8gdGhlIGFuZ2xlIGJyYWNrZXQgc29uZyBhbmQgZGFuY2U6XG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgLy8gTm93LCBlc2NhcGUgY2hhcmFjdGVycyB0aGF0IGFyZSBtYWdpYyBpbiBNYXJrZG93bjpcbiAgICAucmVwbGFjZSgvKFsqX3t9XFxbXFxdXFxcXD1+LV0pL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUNvZGUuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsIi8qKlxuICogV2l0aGluIHRhZ3MgLS0gbWVhbmluZyBiZXR3ZWVuIDwgYW5kID4gLS0gZW5jb2RlIFtcXCBgICogXyB+ID1dIHNvIHRoZXlcbiAqIGRvbid0IGNvbmZsaWN0IHdpdGggdGhlaXIgdXNlIGluIE1hcmtkb3duIGZvciBjb2RlLCBpdGFsaWNzIGFuZCBzdHJvbmcuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignZXNjYXBlU3BlY2lhbENoYXJzV2l0aGluVGFnQXR0cmlidXRlcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZXNjYXBlU3BlY2lhbENoYXJzV2l0aGluVGFnQXR0cmlidXRlcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBCdWlsZCBhIHJlZ2V4IHRvIGZpbmQgSFRNTCB0YWdzLlxuICB2YXIgdGFncyAgICAgPSAvPFxcLz9bYS16XFxkXzotXSsoPzpbXFxzXStbXFxzXFxTXSs/KT8+L2dpLFxuICAgICAgY29tbWVudHMgPSAvPCEoLS0oPzooPzpbXj4tXXwtW14+XSkoPzpbXi1dfC1bXi1dKSopLS0pPi9naTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHRhZ3MsIGZ1bmN0aW9uICh3aG9sZU1hdGNoKSB7XG4gICAgcmV0dXJuIHdob2xlTWF0Y2hcbiAgICAgIC5yZXBsYWNlKC8oLik8XFwvP2NvZGU+KD89LikvZywgJyQxYCcpXG4gICAgICAucmVwbGFjZSgvKFtcXFxcYCpffj18XSkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gIH0pO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoY29tbWVudHMsIGZ1bmN0aW9uICh3aG9sZU1hdGNoKSB7XG4gICAgcmV0dXJuIHdob2xlTWF0Y2hcbiAgICAgIC5yZXBsYWNlKC8oW1xcXFxgKl9+PXxdKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgfSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZXNjYXBlU3BlY2lhbENoYXJzV2l0aGluVGFnQXR0cmlidXRlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKiBIYW5kbGUgZ2l0aHViIGNvZGVibG9ja3MgcHJpb3IgdG8gcnVubmluZyBIYXNoSFRNTCBzbyB0aGF0XG4gKiBIVE1MIGNvbnRhaW5lZCB3aXRoaW4gdGhlIGNvZGVibG9jayBnZXRzIGVzY2FwZWQgcHJvcGVybHlcbiAqIEV4YW1wbGU6XG4gKiBgYGBydWJ5XG4gKiAgICAgZGVmIGhlbGxvX3dvcmxkKHgpXG4gKiAgICAgICBwdXRzIFwiSGVsbG8sICN7eH1cIlxuICogICAgIGVuZFxuICogYGBgXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBlYXJseSBleGl0IGlmIG9wdGlvbiBpcyBub3QgZW5hYmxlZFxuICBpZiAoIW9wdGlvbnMuZ2hDb2RlQmxvY2tzKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdnaXRodWJDb2RlQmxvY2tzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgKz0gJ8KoMCc7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKD86XnxcXG4pKD86IHswLDN9KShgYGArfH5+fispKD86ICopKFteXFxzYH5dKilcXG4oW1xcc1xcU10qPylcXG4oPzogezAsM30pXFwxL2csIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBkZWxpbSwgbGFuZ3VhZ2UsIGNvZGVibG9jaykge1xuICAgIHZhciBlbmQgPSAob3B0aW9ucy5vbWl0RXh0cmFXTEluQ29kZUJsb2NrcykgPyAnJyA6ICdcXG4nO1xuXG4gICAgLy8gRmlyc3QgcGFyc2UgdGhlIGdpdGh1YiBjb2RlIGJsb2NrXG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXlxcbisvZywgJycpOyAvLyB0cmltIGxlYWRpbmcgbmV3bGluZXNcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXFxuKyQvZywgJycpOyAvLyB0cmltIHRyYWlsaW5nIHdoaXRlc3BhY2VcblxuICAgIGNvZGVibG9jayA9ICc8cHJlPjxjb2RlJyArIChsYW5ndWFnZSA/ICcgY2xhc3M9XCInICsgbGFuZ3VhZ2UgKyAnIGxhbmd1YWdlLScgKyBsYW5ndWFnZSArICdcIicgOiAnJykgKyAnPicgKyBjb2RlYmxvY2sgKyBlbmQgKyAnPC9jb2RlPjwvcHJlPic7XG5cbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAvLyBTaW5jZSBHSENvZGVibG9ja3MgY2FuIGJlIGZhbHNlIHBvc2l0aXZlcywgd2UgbmVlZCB0b1xuICAgIC8vIHN0b3JlIHRoZSBwcmltaXRpdmUgdGV4dCBhbmQgdGhlIHBhcnNlZCB0ZXh0IGluIGEgZ2xvYmFsIHZhcixcbiAgICAvLyBhbmQgdGhlbiByZXR1cm4gYSB0b2tlblxuICAgIHJldHVybiAnXFxuXFxuwqhHJyArIChnbG9iYWxzLmdoQ29kZUJsb2Nrcy5wdXNoKHt0ZXh0OiB3aG9sZU1hdGNoLCBjb2RlYmxvY2s6IGNvZGVibG9ja30pIC0gMSkgKyAnR1xcblxcbic7XG4gIH0pO1xuXG4gIC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwLywgJycpO1xuXG4gIHJldHVybiBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2dpdGh1YkNvZGVCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hCbG9jay5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF5cXG4rfFxcbiskKS9nLCAnJyk7XG4gIHRleHQgPSAnXFxuXFxuwqhLJyArIChnbG9iYWxzLmdIdG1sQmxvY2tzLnB1c2godGV4dCkgLSAxKSArICdLXFxuXFxuJztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEJsb2NrLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIEhhc2ggYW5kIGVzY2FwZSA8Y29kZT4gZWxlbWVudHMgdGhhdCBzaG91bGQgbm90IGJlIHBhcnNlZCBhcyBtYXJrZG93blxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hDb2RlVGFncycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaENvZGVUYWdzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciByZXBGdW5jID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG1hdGNoLCBsZWZ0LCByaWdodCkge1xuICAgIHZhciBjb2RlYmxvY2sgPSBsZWZ0ICsgc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykobWF0Y2gsIG9wdGlvbnMsIGdsb2JhbHMpICsgcmlnaHQ7XG4gICAgcmV0dXJuICfCqEMnICsgKGdsb2JhbHMuZ0h0bWxTcGFucy5wdXNoKGNvZGVibG9jaykgLSAxKSArICdDJztcbiAgfTtcblxuICAvLyBIYXNoIG5ha2VkIDxjb2RlPlxuICB0ZXh0ID0gc2hvd2Rvd24uaGVscGVyLnJlcGxhY2VSZWN1cnNpdmVSZWdFeHAodGV4dCwgcmVwRnVuYywgJzxjb2RlXFxcXGJbXj5dKj4nLCAnPC9jb2RlPicsICdnaW0nKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoYXNoQ29kZVRhZ3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignaGFzaEVsZW1lbnQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuICAgIHZhciBibG9ja1RleHQgPSBtMTtcblxuICAgIC8vIFVuZG8gZG91YmxlIGxpbmVzXG4gICAgYmxvY2tUZXh0ID0gYmxvY2tUZXh0LnJlcGxhY2UoL1xcblxcbi9nLCAnXFxuJyk7XG4gICAgYmxvY2tUZXh0ID0gYmxvY2tUZXh0LnJlcGxhY2UoL15cXG4vLCAnJyk7XG5cbiAgICAvLyBzdHJpcCB0cmFpbGluZyBibGFuayBsaW5lc1xuICAgIGJsb2NrVGV4dCA9IGJsb2NrVGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG5cbiAgICAvLyBSZXBsYWNlIHRoZSBlbGVtZW50IHRleHQgd2l0aCBhIG1hcmtlciAoXCLCqEt4S1wiIHdoZXJlIHggaXMgaXRzIGtleSlcbiAgICBibG9ja1RleHQgPSAnXFxuXFxuwqhLJyArIChnbG9iYWxzLmdIdG1sQmxvY2tzLnB1c2goYmxvY2tUZXh0KSAtIDEpICsgJ0tcXG5cXG4nO1xuXG4gICAgcmV0dXJuIGJsb2NrVGV4dDtcbiAgfTtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGJsb2NrVGFncyA9IFtcbiAgICAgICAgJ3ByZScsXG4gICAgICAgICdkaXYnLFxuICAgICAgICAnaDEnLFxuICAgICAgICAnaDInLFxuICAgICAgICAnaDMnLFxuICAgICAgICAnaDQnLFxuICAgICAgICAnaDUnLFxuICAgICAgICAnaDYnLFxuICAgICAgICAnYmxvY2txdW90ZScsXG4gICAgICAgICd0YWJsZScsXG4gICAgICAgICdkbCcsXG4gICAgICAgICdvbCcsXG4gICAgICAgICd1bCcsXG4gICAgICAgICdzY3JpcHQnLFxuICAgICAgICAnbm9zY3JpcHQnLFxuICAgICAgICAnZm9ybScsXG4gICAgICAgICdmaWVsZHNldCcsXG4gICAgICAgICdpZnJhbWUnLFxuICAgICAgICAnbWF0aCcsXG4gICAgICAgICdzdHlsZScsXG4gICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgJ2hlYWRlcicsXG4gICAgICAgICdmb290ZXInLFxuICAgICAgICAnbmF2JyxcbiAgICAgICAgJ2FydGljbGUnLFxuICAgICAgICAnYXNpZGUnLFxuICAgICAgICAnYWRkcmVzcycsXG4gICAgICAgICdhdWRpbycsXG4gICAgICAgICdjYW52YXMnLFxuICAgICAgICAnZmlndXJlJyxcbiAgICAgICAgJ2hncm91cCcsXG4gICAgICAgICdvdXRwdXQnLFxuICAgICAgICAndmlkZW8nLFxuICAgICAgICAncCdcbiAgICAgIF0sXG4gICAgICByZXBGdW5jID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG1hdGNoLCBsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgdHh0ID0gd2hvbGVNYXRjaDtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBodG1sIGVsZW1lbnQgaXMgbWFya2VkIGFzIG1hcmtkb3duXG4gICAgICAgIC8vIGlmIHNvLCBpdCdzIGNvbnRlbnRzIHNob3VsZCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAgICAgICAgaWYgKGxlZnQuc2VhcmNoKC9cXGJtYXJrZG93blxcYi8pICE9PSAtMSkge1xuICAgICAgICAgIHR4dCA9IGxlZnQgKyBnbG9iYWxzLmNvbnZlcnRlci5tYWtlSHRtbChtYXRjaCkgKyByaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1xcblxcbsKoSycgKyAoZ2xvYmFscy5nSHRtbEJsb2Nrcy5wdXNoKHR4dCkgLSAxKSArICdLXFxuXFxuJztcbiAgICAgIH07XG5cbiAgaWYgKG9wdGlvbnMuYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzKSB7XG4gICAgLy8gZW5jb2RlIGJhY2tzbGFzaCBlc2NhcGVkIEhUTUwgdGFnc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFw8KFxcLz9bXj5dKz8pPi9nLCBmdW5jdGlvbiAod20sIGluc2lkZSkge1xuICAgICAgcmV0dXJuICcmbHQ7JyArIGluc2lkZSArICcmZ3Q7JztcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGhhc2ggSFRNTCBCbG9ja3NcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1RhZ3MubGVuZ3RoOyArK2kpIHtcblxuICAgIHZhciBvcFRhZ1BvcyxcbiAgICAgICAgcmd4MSAgICAgPSBuZXcgUmVnRXhwKCdeIHswLDN9KDwnICsgYmxvY2tUYWdzW2ldICsgJ1xcXFxiW14+XSo+KScsICdpbScpLFxuICAgICAgICBwYXRMZWZ0ICA9ICc8JyArIGJsb2NrVGFnc1tpXSArICdcXFxcYltePl0qPicsXG4gICAgICAgIHBhdFJpZ2h0ID0gJzwvJyArIGJsb2NrVGFnc1tpXSArICc+JztcbiAgICAvLyAxLiBMb29rIGZvciB0aGUgZmlyc3QgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9wZW5pbmcgSFRNTCB0YWcgaW4gdGhlIHRleHRcbiAgICB3aGlsZSAoKG9wVGFnUG9zID0gc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZih0ZXh0LCByZ3gxKSkgIT09IC0xKSB7XG5cbiAgICAgIC8vIGlmIHRoZSBIVE1MIHRhZyBpcyBcXCBlc2NhcGVkLCB3ZSBuZWVkIHRvIGVzY2FwZSBpdCBhbmQgYnJlYWtcblxuXG4gICAgICAvLzIuIFNwbGl0IHRoZSB0ZXh0IGluIHRoYXQgcG9zaXRpb25cbiAgICAgIHZhciBzdWJUZXh0cyA9IHNob3dkb3duLmhlbHBlci5zcGxpdEF0SW5kZXgodGV4dCwgb3BUYWdQb3MpLFxuICAgICAgICAgIC8vMy4gTWF0Y2ggcmVjdXJzaXZlbHlcbiAgICAgICAgICBuZXdTdWJUZXh0MSA9IHNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwKHN1YlRleHRzWzFdLCByZXBGdW5jLCBwYXRMZWZ0LCBwYXRSaWdodCwgJ2ltJyk7XG5cbiAgICAgIC8vIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgaWYgKG5ld1N1YlRleHQxID09PSBzdWJUZXh0c1sxXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRleHQgPSBzdWJUZXh0c1swXS5jb25jYXQobmV3U3ViVGV4dDEpO1xuICAgIH1cbiAgfVxuICAvLyBIUiBTUEVDSUFMIENBU0VcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcbiB7MCwzfSg8KGhyKVxcYihbXjw+XSkqP1xcLz8+KVsgXFx0XSooPz1cXG57Mix9KSkvZyxcbiAgICBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hFbGVtZW50JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3Igc3RhbmRhbG9uZSBIVE1MIGNvbW1lbnRzXG4gIHRleHQgPSBzaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCh0ZXh0LCBmdW5jdGlvbiAodHh0KSB7XG4gICAgcmV0dXJuICdcXG5cXG7CqEsnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaCh0eHQpIC0gMSkgKyAnS1xcblxcbic7XG4gIH0sICdeIHswLDN9PCEtLScsICctLT4nLCAnZ20nKTtcblxuICAvLyBQSFAgYW5kIEFTUC1zdHlsZSBwcm9jZXNzb3IgaW5zdHJ1Y3Rpb25zICg8Py4uLj8+IGFuZCA8JS4uLiU+KVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPzpcXG5cXG4pKCB7MCwzfSg/OjwoWz8lXSlbXlxccl0qP1xcMj4pWyBcXHRdKig/PVxcbnsyLH0pKS9nLFxuICAgIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEVsZW1lbnQnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsIi8qKlxuICogSGFzaCBzcGFuIGVsZW1lbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTFNwYW5zJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoYXNoSFRNTFNwYW5zLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIGZ1bmN0aW9uIGhhc2hIVE1MU3BhbiAoaHRtbCkge1xuICAgIHJldHVybiAnwqhDJyArIChnbG9iYWxzLmdIdG1sU3BhbnMucHVzaChodG1sKSAtIDEpICsgJ0MnO1xuICB9XG5cbiAgLy8gSGFzaCBTZWxmIENsb3NpbmcgdGFnc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88W14+XSs/XFwvPi9naSwgZnVuY3Rpb24gKHdtKSB7XG4gICAgcmV0dXJuIGhhc2hIVE1MU3Bhbih3bSk7XG4gIH0pO1xuXG4gIC8vIEhhc2ggdGFncyB3aXRob3V0IHByb3BlcnRpZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPChbXj5dKz8pPltcXHNcXFNdKj88XFwvXFwxPi9nLCBmdW5jdGlvbiAod20pIHtcbiAgICByZXR1cm4gaGFzaEhUTUxTcGFuKHdtKTtcbiAgfSk7XG5cbiAgLy8gSGFzaCB0YWdzIHdpdGggcHJvcGVydGllc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88KFtePl0rPylcXHNbXj5dKz8+W1xcc1xcU10qPzxcXC9cXDE+L2csIGZ1bmN0aW9uICh3bSkge1xuICAgIHJldHVybiBoYXNoSFRNTFNwYW4od20pO1xuICB9KTtcblxuICAvLyBIYXNoIHNlbGYgY2xvc2luZyB0YWdzIHdpdGhvdXQgLz5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPFtePl0rPz4vZ2ksIGZ1bmN0aW9uICh3bSkge1xuICAgIHJldHVybiBoYXNoSFRNTFNwYW4od20pO1xuICB9KTtcblxuICAvKnNob3dkb3duLmhlbHBlci5tYXRjaFJlY3Vyc2l2ZVJlZ0V4cCh0ZXh0LCAnPGNvZGVcXFxcYltePl0qPicsICc8L2NvZGU+JywgJ2dpJyk7Ki9cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoYXNoSFRNTFNwYW5zLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cbi8qKlxuICogVW5oYXNoIEhUTUwgc3BhbnNcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCd1bmhhc2hIVE1MU3BhbnMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuaGFzaEhUTUxTcGFucy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGdsb2JhbHMuZ0h0bWxTcGFucy5sZW5ndGg7ICsraSkge1xuICAgIHZhciByZXBUZXh0ID0gZ2xvYmFscy5nSHRtbFNwYW5zW2ldLFxuICAgICAgICAvLyBsaW1pdGVyIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcCAoYXNzdW1lIDEwIGFzIGxpbWl0IGZvciByZWN1cnNlKVxuICAgICAgICBsaW1pdCA9IDA7XG5cbiAgICB3aGlsZSAoL8KoQyhcXGQrKUMvLnRlc3QocmVwVGV4dCkpIHtcbiAgICAgIHZhciBudW0gPSBSZWdFeHAuJDE7XG4gICAgICByZXBUZXh0ID0gcmVwVGV4dC5yZXBsYWNlKCfCqEMnICsgbnVtICsgJ0MnLCBnbG9iYWxzLmdIdG1sU3BhbnNbbnVtXSk7XG4gICAgICBpZiAobGltaXQgPT09IDEwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ21heGltdW0gbmVzdGluZyBvZiAxMCBzcGFucyByZWFjaGVkISEhJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgKytsaW1pdDtcbiAgICB9XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgnwqhDJyArIGkgKyAnQycsIHJlcFRleHQpO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndW5oYXNoSFRNTFNwYW5zLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIEhhc2ggYW5kIGVzY2FwZSA8cHJlPjxjb2RlPiBlbGVtZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcGFyc2VkIGFzIG1hcmtkb3duXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaGFzaFByZUNvZGVUYWdzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoYXNoUHJlQ29kZVRhZ3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIHJlcEZ1bmMgPSBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbWF0Y2gsIGxlZnQsIHJpZ2h0KSB7XG4gICAgLy8gZW5jb2RlIGh0bWwgZW50aXRpZXNcbiAgICB2YXIgY29kZWJsb2NrID0gbGVmdCArIHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQ29kZScpKG1hdGNoLCBvcHRpb25zLCBnbG9iYWxzKSArIHJpZ2h0O1xuICAgIHJldHVybiAnXFxuXFxuwqhHJyArIChnbG9iYWxzLmdoQ29kZUJsb2Nrcy5wdXNoKHt0ZXh0OiB3aG9sZU1hdGNoLCBjb2RlYmxvY2s6IGNvZGVibG9ja30pIC0gMSkgKyAnR1xcblxcbic7XG4gIH07XG5cbiAgLy8gSGFzaCA8cHJlPjxjb2RlPlxuICB0ZXh0ID0gc2hvd2Rvd24uaGVscGVyLnJlcGxhY2VSZWN1cnNpdmVSZWdFeHAodGV4dCwgcmVwRnVuYywgJ14gezAsM308cHJlXFxcXGJbXj5dKj5cXFxccyo8Y29kZVxcXFxiW14+XSo+JywgJ14gezAsM308L2NvZGU+XFxcXHMqPC9wcmU+JywgJ2dpbScpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hQcmVDb2RlVGFncy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdoZWFkZXJzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hlYWRlcnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGhlYWRlckxldmVsU3RhcnQgPSAoaXNOYU4ocGFyc2VJbnQob3B0aW9ucy5oZWFkZXJMZXZlbFN0YXJ0KSkpID8gMSA6IHBhcnNlSW50KG9wdGlvbnMuaGVhZGVyTGV2ZWxTdGFydCksXG5cbiAgICAgIC8vIFNldCB0ZXh0LXN0eWxlIGhlYWRlcnM6XG4gICAgICAvL1x0SGVhZGVyIDFcbiAgICAgIC8vXHQ9PT09PT09PVxuICAgICAgLy9cbiAgICAgIC8vXHRIZWFkZXIgMlxuICAgICAgLy9cdC0tLS0tLS0tXG4gICAgICAvL1xuICAgICAgc2V0ZXh0UmVnZXhIMSA9IChvcHRpb25zLnNtb290aExpdmVQcmV2aWV3KSA/IC9eKC4rKVsgXFx0XSpcXG49ezIsfVsgXFx0XSpcXG4rL2dtIDogL14oLispWyBcXHRdKlxcbj0rWyBcXHRdKlxcbisvZ20sXG4gICAgICBzZXRleHRSZWdleEgyID0gKG9wdGlvbnMuc21vb3RoTGl2ZVByZXZpZXcpID8gL14oLispWyBcXHRdKlxcbi17Mix9WyBcXHRdKlxcbisvZ20gOiAvXiguKylbIFxcdF0qXFxuLStbIFxcdF0qXFxuKy9nbTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNldGV4dFJlZ2V4SDEsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuXG4gICAgdmFyIHNwYW5HYW11dCA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykobTEsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSAob3B0aW9ucy5ub0hlYWRlcklkKSA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMSkgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0LFxuICAgICAgICBoYXNoQmxvY2sgPSAnPGgnICsgaExldmVsICsgaElEICsgJz4nICsgc3BhbkdhbXV0ICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoaGFzaEJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShzZXRleHRSZWdleEgyLCBmdW5jdGlvbiAobWF0Y2hGb3VuZCwgbTEpIHtcbiAgICB2YXIgc3BhbkdhbXV0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShtMSwgb3B0aW9ucywgZ2xvYmFscyksXG4gICAgICAgIGhJRCA9IChvcHRpb25zLm5vSGVhZGVySWQpID8gJycgOiAnIGlkPVwiJyArIGhlYWRlcklkKG0xKSArICdcIicsXG4gICAgICAgIGhMZXZlbCA9IGhlYWRlckxldmVsU3RhcnQgKyAxLFxuICAgICAgICBoYXNoQmxvY2sgPSAnPGgnICsgaExldmVsICsgaElEICsgJz4nICsgc3BhbkdhbXV0ICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoaGFzaEJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgLy8gYXR4LXN0eWxlIGhlYWRlcnM6XG4gIC8vICAjIEhlYWRlciAxXG4gIC8vICAjIyBIZWFkZXIgMlxuICAvLyAgIyMgSGVhZGVyIDIgd2l0aCBjbG9zaW5nIGhhc2hlcyAjI1xuICAvLyAgLi4uXG4gIC8vICAjIyMjIyMgSGVhZGVyIDZcbiAgLy9cbiAgdmFyIGF0eFN0eWxlID0gKG9wdGlvbnMucmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQpID8gL14oI3sxLDZ9KVsgXFx0XSsoLis/KVsgXFx0XSojKlxcbisvZ20gOiAvXigjezEsNn0pWyBcXHRdKiguKz8pWyBcXHRdKiMqXFxuKy9nbTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGF0eFN0eWxlLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yKSB7XG4gICAgdmFyIGhUZXh0ID0gbTI7XG4gICAgaWYgKG9wdGlvbnMuY3VzdG9taXplZEhlYWRlcklkKSB7XG4gICAgICBoVGV4dCA9IG0yLnJlcGxhY2UoL1xccz9cXHsoW157XSs/KX1cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB2YXIgc3BhbiA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykoaFRleHQsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSAob3B0aW9ucy5ub0hlYWRlcklkKSA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMikgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0IC0gMSArIG0xLmxlbmd0aCxcbiAgICAgICAgaGVhZGVyID0gJzxoJyArIGhMZXZlbCArIGhJRCArICc+JyArIHNwYW4gKyAnPC9oJyArIGhMZXZlbCArICc+JztcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGhlYWRlciwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGhlYWRlcklkIChtKSB7XG4gICAgdmFyIHRpdGxlLFxuICAgICAgICBwcmVmaXg7XG5cbiAgICAvLyBJdCBpcyBzZXBhcmF0ZSBmcm9tIG90aGVyIG9wdGlvbnMgdG8gYWxsb3cgY29tYmluaW5nIHByZWZpeCBhbmQgY3VzdG9taXplZFxuICAgIGlmIChvcHRpb25zLmN1c3RvbWl6ZWRIZWFkZXJJZCkge1xuICAgICAgdmFyIG1hdGNoID0gbS5tYXRjaCgvXFx7KFtee10rPyl9XFxzKiQvKTtcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICBtID0gbWF0Y2hbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGl0bGUgPSBtO1xuXG4gICAgLy8gUHJlZml4IGlkIHRvIHByZXZlbnQgY2F1c2luZyBpbmFkdmVydGVudCBwcmUtZXhpc3Rpbmcgc3R5bGUgbWF0Y2hlcy5cbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG9wdGlvbnMucHJlZml4SGVhZGVySWQpKSB7XG4gICAgICBwcmVmaXggPSBvcHRpb25zLnByZWZpeEhlYWRlcklkO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wcmVmaXhIZWFkZXJJZCA9PT0gdHJ1ZSkge1xuICAgICAgcHJlZml4ID0gJ3NlY3Rpb24tJztcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlZml4ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLnJhd1ByZWZpeEhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHByZWZpeCArIHRpdGxlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdoQ29tcGF0aWJsZUhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgICAgLy8gcmVwbGFjZSBwcmV2aW91c2x5IGVzY2FwZWQgY2hhcnMgKCYsIMKoIGFuZCAkKVxuICAgICAgICAucmVwbGFjZSgvJmFtcDsvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC/CqFQvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC/CqEQvZywgJycpXG4gICAgICAgIC8vIHJlcGxhY2UgcmVzdCBvZiB0aGUgY2hhcnMgKCZ+JCBhcmUgcmVwZWF0ZWQgYXMgdGhleSBtaWdodCBoYXZlIGJlZW4gZXNjYXBlZClcbiAgICAgICAgLy8gYm9ycm93ZWQgZnJvbSBnaXRodWIncyByZWRjYXJwZXQgKHNvbWUgdGhleSBzaG91bGQgcHJvZHVjZSBzaW1pbGFyIHJlc3VsdHMpXG4gICAgICAgIC5yZXBsYWNlKC9bJiskLFxcLzo7PT9AXCIje318XsKoflxcW1xcXWBcXFxcKikoJS4hJzw+XS9nLCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnJhd0hlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgICAgLy8gcmVwbGFjZSBwcmV2aW91c2x5IGVzY2FwZWQgY2hhcnMgKCYsIMKoIGFuZCAkKVxuICAgICAgICAucmVwbGFjZSgvJmFtcDsvZywgJyYnKVxuICAgICAgICAucmVwbGFjZSgvwqhUL2csICfCqCcpXG4gICAgICAgIC5yZXBsYWNlKC/CqEQvZywgJyQnKVxuICAgICAgICAvLyByZXBsYWNlIFwiIGFuZCAnXG4gICAgICAgIC5yZXBsYWNlKC9bXCInXS9nLCAnLScpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC9bXlxcd10vZywgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJhd1ByZWZpeEhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHByZWZpeCArIHRpdGxlO1xuICAgIH1cblxuICAgIGlmIChnbG9iYWxzLmhhc2hMaW5rQ291bnRzW3RpdGxlXSkge1xuICAgICAgdGl0bGUgPSB0aXRsZSArICctJyArIChnbG9iYWxzLmhhc2hMaW5rQ291bnRzW3RpdGxlXSsrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFscy5oYXNoTGlua0NvdW50c1t0aXRsZV0gPSAxO1xuICAgIH1cbiAgICByZXR1cm4gdGl0bGU7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoZWFkZXJzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIFR1cm4gTWFya2Rvd24gbGluayBzaG9ydGN1dHMgaW50byBYSFRNTCA8YT4gdGFncy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdob3Jpem9udGFsUnVsZScsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaG9yaXpvbnRhbFJ1bGUuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGtleSA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoJzxociAvPicsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eIHswLDJ9KCA/LSl7Myx9WyBcXHRdKiQvZ20sIGtleSk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL14gezAsMn0oID9cXCopezMsfVsgXFx0XSokL2dtLCBrZXkpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eIHswLDJ9KCA/Xyl7Myx9WyBcXHRdKiQvZ20sIGtleSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaG9yaXpvbnRhbFJ1bGUuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsIi8qKlxuICogVHVybiBNYXJrZG93biBpbWFnZSBzaG9ydGN1dHMgaW50byA8aW1nPiB0YWdzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2ltYWdlcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpbWFnZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGlubGluZVJlZ0V4cCAgICAgID0gLyFcXFsoW15cXF1dKj8pXVsgXFx0XSooKVxcKFsgXFx0XT88PyhbXFxTXSs/KD86XFwoW1xcU10qP1xcKVtcXFNdKj8pPyk+Pyg/OiA9KFsqXFxkXStbQS1aYS16JV17MCw0fSl4KFsqXFxkXStbQS1aYS16JV17MCw0fSkpP1sgXFx0XSooPzooW1wiJ10pKFteXCJdKj8pXFw2KT9bIFxcdF0/XFwpL2csXG4gICAgICBjcmF6eVJlZ0V4cCAgICAgICA9IC8hXFxbKFteXFxdXSo/KV1bIFxcdF0qKClcXChbIFxcdF0/PChbXj5dKik+KD86ID0oWypcXGRdK1tBLVphLXolXXswLDR9KXgoWypcXGRdK1tBLVphLXolXXswLDR9KSk/WyBcXHRdKig/Oig/OihbXCInXSkoW15cIl0qPylcXDYpKT9bIFxcdF0/XFwpL2csXG4gICAgICBiYXNlNjRSZWdFeHAgICAgICA9IC8hXFxbKFteXFxdXSo/KV1bIFxcdF0qKClcXChbIFxcdF0/PD8oZGF0YTouKz9cXC8uKz87YmFzZTY0LFtBLVphLXowLTkrLz1cXG5dKz8pPj8oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qKD86KFtcIiddKShbXlwiXSo/KVxcNik/WyBcXHRdP1xcKS9nLFxuICAgICAgcmVmZXJlbmNlUmVnRXhwICAgPSAvIVxcWyhbXlxcXV0qPyldID8oPzpcXG4gKik/XFxbKFtcXHNcXFNdKj8pXSgpKCkoKSgpKCkvZyxcbiAgICAgIHJlZlNob3J0Y3V0UmVnRXhwID0gLyFcXFsoW15cXFtcXF1dKyldKCkoKSgpKCkoKS9nO1xuXG4gIGZ1bmN0aW9uIHdyaXRlSW1hZ2VUYWdCYXNlNjQgKHdob2xlTWF0Y2gsIGFsdFRleHQsIGxpbmtJZCwgdXJsLCB3aWR0aCwgaGVpZ2h0LCBtNSwgdGl0bGUpIHtcbiAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICByZXR1cm4gd3JpdGVJbWFnZVRhZyAod2hvbGVNYXRjaCwgYWx0VGV4dCwgbGlua0lkLCB1cmwsIHdpZHRoLCBoZWlnaHQsIG01LCB0aXRsZSk7XG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZUltYWdlVGFnICh3aG9sZU1hdGNoLCBhbHRUZXh0LCBsaW5rSWQsIHVybCwgd2lkdGgsIGhlaWdodCwgbTUsIHRpdGxlKSB7XG5cbiAgICB2YXIgZ1VybHMgICA9IGdsb2JhbHMuZ1VybHMsXG4gICAgICAgIGdUaXRsZXMgPSBnbG9iYWxzLmdUaXRsZXMsXG4gICAgICAgIGdEaW1zICAgPSBnbG9iYWxzLmdEaW1lbnNpb25zO1xuXG4gICAgbGlua0lkID0gbGlua0lkLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICB0aXRsZSA9ICcnO1xuICAgIH1cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGV4cGxpY2l0IGVtcHR5IHVybFxuICAgIGlmICh3aG9sZU1hdGNoLnNlYXJjaCgvXFwoPD9cXHMqPj8gPyhbJ1wiXS4qWydcIl0pP1xcKSQvbSkgPiAtMSkge1xuICAgICAgdXJsID0gJyc7XG5cbiAgICB9IGVsc2UgaWYgKHVybCA9PT0gJycgfHwgdXJsID09PSBudWxsKSB7XG4gICAgICBpZiAobGlua0lkID09PSAnJyB8fCBsaW5rSWQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gbG93ZXItY2FzZSBhbmQgdHVybiBlbWJlZGRlZCBuZXdsaW5lcyBpbnRvIHNwYWNlc1xuICAgICAgICBsaW5rSWQgPSBhbHRUZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvID9cXG4vZywgJyAnKTtcbiAgICAgIH1cbiAgICAgIHVybCA9ICcjJyArIGxpbmtJZDtcblxuICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ1VybHNbbGlua0lkXSkpIHtcbiAgICAgICAgdXJsID0gZ1VybHNbbGlua0lkXTtcbiAgICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ1RpdGxlc1tsaW5rSWRdKSkge1xuICAgICAgICAgIHRpdGxlID0gZ1RpdGxlc1tsaW5rSWRdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGdEaW1zW2xpbmtJZF0pKSB7XG4gICAgICAgICAgd2lkdGggPSBnRGltc1tsaW5rSWRdLndpZHRoO1xuICAgICAgICAgIGhlaWdodCA9IGdEaW1zW2xpbmtJZF0uaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gd2hvbGVNYXRjaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbHRUZXh0ID0gYWx0VGV4dFxuICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgIC8vYWx0VGV4dCA9IHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzKGFsdFRleHQsICcqXycsIGZhbHNlKTtcbiAgICAgIC5yZXBsYWNlKHNob3dkb3duLmhlbHBlci5yZWdleGVzLmFzdGVyaXNrRGFzaEFuZENvbG9uLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgICAvL3VybCA9IHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzKHVybCwgJypfJywgZmFsc2UpO1xuICAgIHVybCA9IHVybC5yZXBsYWNlKHNob3dkb3duLmhlbHBlci5yZWdleGVzLmFzdGVyaXNrRGFzaEFuZENvbG9uLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgICB2YXIgcmVzdWx0ID0gJzxpbWcgc3JjPVwiJyArIHVybCArICdcIiBhbHQ9XCInICsgYWx0VGV4dCArICdcIic7XG5cbiAgICBpZiAodGl0bGUgJiYgc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKHRpdGxlKSkge1xuICAgICAgdGl0bGUgPSB0aXRsZVxuICAgICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgICAvL3RpdGxlID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModGl0bGUsICcqXycsIGZhbHNlKTtcbiAgICAgICAgLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgICAgcmVzdWx0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICAgIH1cblxuICAgIGlmICh3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgIHdpZHRoICA9ICh3aWR0aCA9PT0gJyonKSA/ICdhdXRvJyA6IHdpZHRoO1xuICAgICAgaGVpZ2h0ID0gKGhlaWdodCA9PT0gJyonKSA/ICdhdXRvJyA6IGhlaWdodDtcblxuICAgICAgcmVzdWx0ICs9ICcgd2lkdGg9XCInICsgd2lkdGggKyAnXCInO1xuICAgICAgcmVzdWx0ICs9ICcgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIic7XG4gICAgfVxuXG4gICAgcmVzdWx0ICs9ICcgLz4nO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIEZpcnN0LCBoYW5kbGUgcmVmZXJlbmNlLXN0eWxlIGxhYmVsZWQgaW1hZ2VzOiAhW2FsdCB0ZXh0XVtpZF1cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWZlcmVuY2VSZWdFeHAsIHdyaXRlSW1hZ2VUYWcpO1xuXG4gIC8vIE5leHQsIGhhbmRsZSBpbmxpbmUgaW1hZ2VzOiAgIVthbHQgdGV4dF0odXJsID08d2lkdGg+eDxoZWlnaHQ+IFwib3B0aW9uYWwgdGl0bGVcIilcblxuICAvLyBiYXNlNjQgZW5jb2RlZCBpbWFnZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZShiYXNlNjRSZWdFeHAsIHdyaXRlSW1hZ2VUYWdCYXNlNjQpO1xuXG4gIC8vIGNhc2VzIHdpdGggY3JhenkgdXJscyBsaWtlIC4vaW1hZ2UvY2F0MSkucG5nXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoY3JhenlSZWdFeHAsIHdyaXRlSW1hZ2VUYWcpO1xuXG4gIC8vIG5vcm1hbCBjYXNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGlubGluZVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgLy8gaGFuZGxlIHJlZmVyZW5jZS1zdHlsZSBzaG9ydGN1dHM6ICFbaW1nIHRleHRdXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVmU2hvcnRjdXRSZWdFeHAsIHdyaXRlSW1hZ2VUYWcpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2ltYWdlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdpdGFsaWNzQW5kQm9sZCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpdGFsaWNzQW5kQm9sZC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBpdCdzIGZhc3RlciB0byBoYXZlIDMgc2VwYXJhdGUgcmVnZXhlcyBmb3IgZWFjaCBjYXNlIHRoYW4gaGF2ZSBqdXN0IG9uZVxuICAvLyBiZWNhdXNlIG9mIGJhY2t0cmFjaW5nLCBpbiBzb21lIGNhc2VzLCBpdCBjb3VsZCBsZWFkIHRvIGFuIGV4cG9uZW50aWFsIGVmZmVjdFxuICAvLyBjYWxsZWQgXCJjYXRhc3Ryb3BoaWMgYmFja3RyYWNlXCIuIE9taW5vdXMhXG5cbiAgZnVuY3Rpb24gcGFyc2VJbnNpZGUgKHR4dCwgbGVmdCwgcmlnaHQpIHtcbiAgICAvKlxuICAgIGlmIChvcHRpb25zLnNpbXBsaWZpZWRBdXRvTGluaykge1xuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzaW1wbGlmaWVkQXV0b0xpbmtzJykodHh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgKi9cbiAgICByZXR1cm4gbGVmdCArIHR4dCArIHJpZ2h0O1xuICB9XG5cbiAgLy8gUGFyc2UgdW5kZXJzY29yZXNcbiAgaWYgKG9wdGlvbnMubGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3Jlcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl9fXyhcXFNbXFxzXFxTXSo/KV9fX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsICc8c3Ryb25nPjxlbT4nLCAnPC9lbT48L3N0cm9uZz4nKTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXGJfXyhcXFNbXFxzXFxTXSo/KV9fXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgJzxzdHJvbmc+JywgJzwvc3Ryb25nPicpO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl8oXFxTW1xcc1xcU10qPylfXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgJzxlbT4nLCAnPC9lbT4nKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fX18oXFxTW1xcc1xcU10qPylfX18vZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fXyhcXFNbXFxzXFxTXSo/KV9fL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxzdHJvbmc+JywgJzwvc3Ryb25nPicpIDogd207XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXyhbXlxcc19dW1xcc1xcU10qPylfL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgLy8gIS9eX1teX10vLnRlc3QobSkgLSB0ZXN0IGlmIGl0IGRvZXNuJ3Qgc3RhcnQgd2l0aCBfXyAoc2luY2UgaXQgc2VlbXMgcmVkdW5kYW50LCB3ZSByZW1vdmVkIGl0KVxuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxlbT4nLCAnPC9lbT4nKSA6IHdtO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gTm93IHBhcnNlIGFzdGVyaXNrc1xuICBpZiAob3B0aW9ucy5saXRlcmFsTWlkV29yZEFzdGVyaXNrcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhbXipdfF4pXFxCXFwqXFwqXFwqKFxcU1tcXHNcXFNdKj8pXFwqXFwqXFwqXFxCKD8hXFwqKS9nLCBmdW5jdGlvbiAod20sIGxlYWQsIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsIGxlYWQgKyAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+Jyk7XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFteKl18XilcXEJcXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCpcXEIoPyFcXCopL2csIGZ1bmN0aW9uICh3bSwgbGVhZCwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgbGVhZCArICc8c3Ryb25nPicsICc8L3N0cm9uZz4nKTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oW14qXXxeKVxcQlxcKihcXFNbXFxzXFxTXSo/KVxcKlxcQig/IVxcKikvZywgZnVuY3Rpb24gKHdtLCBsZWFkLCB0eHQpIHtcbiAgICAgIHJldHVybiBwYXJzZUluc2lkZSAodHh0LCBsZWFkICsgJzxlbT4nLCAnPC9lbT4nKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCpcXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCpcXCovZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCovZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz4nLCAnPC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCooW15cXHMqXVtcXHNcXFNdKj8pXFwqL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgLy8gIS9eXFwqW14qXS8udGVzdChtKSAtIHRlc3QgaWYgaXQgZG9lc24ndCBzdGFydCB3aXRoICoqIChzaW5jZSBpdCBzZWVtcyByZWR1bmRhbnQsIHdlIHJlbW92ZWQgaXQpXG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPGVtPicsICc8L2VtPicpIDogd207XG4gICAgfSk7XG4gIH1cblxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2l0YWxpY3NBbmRCb2xkLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIEZvcm0gSFRNTCBvcmRlcmVkIChudW1iZXJlZCkgYW5kIHVub3JkZXJlZCAoYnVsbGV0ZWQpIGxpc3RzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2xpc3RzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHRoZSBjb250ZW50cyBvZiBhIHNpbmdsZSBvcmRlcmVkIG9yIHVub3JkZXJlZCBsaXN0LCBzcGxpdHRpbmcgaXRcbiAgICogaW50byBpbmRpdmlkdWFsIGxpc3QgaXRlbXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0U3RyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdHJpbVRyYWlsaW5nXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiBwcm9jZXNzTGlzdEl0ZW1zIChsaXN0U3RyLCB0cmltVHJhaWxpbmcpIHtcbiAgICAvLyBUaGUgJGdfbGlzdF9sZXZlbCBnbG9iYWwga2VlcHMgdHJhY2sgb2Ygd2hlbiB3ZSdyZSBpbnNpZGUgYSBsaXN0LlxuICAgIC8vIEVhY2ggdGltZSB3ZSBlbnRlciBhIGxpc3QsIHdlIGluY3JlbWVudCBpdDsgd2hlbiB3ZSBsZWF2ZSBhIGxpc3QsXG4gICAgLy8gd2UgZGVjcmVtZW50LiBJZiBpdCdzIHplcm8sIHdlJ3JlIG5vdCBpbiBhIGxpc3QgYW55bW9yZS5cbiAgICAvL1xuICAgIC8vIFdlIGRvIHRoaXMgYmVjYXVzZSB3aGVuIHdlJ3JlIG5vdCBpbnNpZGUgYSBsaXN0LCB3ZSB3YW50IHRvIHRyZWF0XG4gICAgLy8gc29tZXRoaW5nIGxpa2UgdGhpczpcbiAgICAvL1xuICAgIC8vICAgIEkgcmVjb21tZW5kIHVwZ3JhZGluZyB0byB2ZXJzaW9uXG4gICAgLy8gICAgOC4gT29wcywgbm93IHRoaXMgbGluZSBpcyB0cmVhdGVkXG4gICAgLy8gICAgYXMgYSBzdWItbGlzdC5cbiAgICAvL1xuICAgIC8vIEFzIGEgc2luZ2xlIHBhcmFncmFwaCwgZGVzcGl0ZSB0aGUgZmFjdCB0aGF0IHRoZSBzZWNvbmQgbGluZSBzdGFydHNcbiAgICAvLyB3aXRoIGEgZGlnaXQtcGVyaW9kLXNwYWNlIHNlcXVlbmNlLlxuICAgIC8vXG4gICAgLy8gV2hlcmVhcyB3aGVuIHdlJ3JlIGluc2lkZSBhIGxpc3QgKG9yIHN1Yi1saXN0KSwgdGhhdCBsaW5lIHdpbGwgYmVcbiAgICAvLyB0cmVhdGVkIGFzIHRoZSBzdGFydCBvZiBhIHN1Yi1saXN0LiBXaGF0IGEga2x1ZGdlLCBodWg/IFRoaXMgaXNcbiAgICAvLyBhbiBhc3BlY3Qgb2YgTWFya2Rvd24ncyBzeW50YXggdGhhdCdzIGhhcmQgdG8gcGFyc2UgcGVyZmVjdGx5XG4gICAgLy8gd2l0aG91dCByZXNvcnRpbmcgdG8gbWluZC1yZWFkaW5nLiBQZXJoYXBzIHRoZSBzb2x1dGlvbiBpcyB0b1xuICAgIC8vIGNoYW5nZSB0aGUgc3ludGF4IHJ1bGVzIHN1Y2ggdGhhdCBzdWItbGlzdHMgbXVzdCBzdGFydCB3aXRoIGFcbiAgICAvLyBzdGFydGluZyBjYXJkaW5hbCBudW1iZXI7IGUuZy4gXCIxLlwiIG9yIFwiYS5cIi5cbiAgICBnbG9iYWxzLmdMaXN0TGV2ZWwrKztcblxuICAgIC8vIHRyaW0gdHJhaWxpbmcgYmxhbmsgbGluZXM6XG4gICAgbGlzdFN0ciA9IGxpc3RTdHIucmVwbGFjZSgvXFxuezIsfSQvLCAnXFxuJyk7XG5cbiAgICAvLyBhdHRhY2tsYWI6IGFkZCBzZW50aW5lbCB0byBlbXVsYXRlIFxcelxuICAgIGxpc3RTdHIgKz0gJ8KoMCc7XG5cbiAgICB2YXIgcmd4ID0gLyhcXG4pPyheIHswLDN9KShbKistXXxcXGQrWy5dKVsgXFx0XSsoKFxcWyh4fFh8ICk/XSk/WyBcXHRdKlteXFxyXSs/KFxcbnsxLDJ9KSkoPz1cXG4qKMKoMHwgezAsM30oWyorLV18XFxkK1suXSlbIFxcdF0rKSkvZ20sXG4gICAgICAgIGlzUGFyYWdyYXBoZWQgPSAoL1xcblsgXFx0XSpcXG4oPyHCqDApLy50ZXN0KGxpc3RTdHIpKTtcblxuICAgIC8vIFNpbmNlIHZlcnNpb24gMS41LCBuZXN0aW5nIHN1Ymxpc3RzIHJlcXVpcmVzIDQgc3BhY2VzIChvciAxIHRhYikgaW5kZW50YXRpb24sXG4gICAgLy8gd2hpY2ggaXMgYSBzeW50YXggYnJlYWtpbmcgY2hhbmdlXG4gICAgLy8gYWN0aXZhdGluZyB0aGlzIG9wdGlvbiByZXZlcnRzIHRvIG9sZCBiZWhhdmlvclxuICAgIGlmIChvcHRpb25zLmRpc2FibGVGb3JjZWQ0U3BhY2VzSW5kZW50ZWRTdWJsaXN0cykge1xuICAgICAgcmd4ID0gLyhcXG4pPyheIHswLDN9KShbKistXXxcXGQrWy5dKVsgXFx0XSsoKFxcWyh4fFh8ICk/XSk/WyBcXHRdKlteXFxyXSs/KFxcbnsxLDJ9KSkoPz1cXG4qKMKoMHxcXDIoWyorLV18XFxkK1suXSlbIFxcdF0rKSkvZ207XG4gICAgfVxuXG4gICAgbGlzdFN0ciA9IGxpc3RTdHIucmVwbGFjZShyZ3gsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSwgbTIsIG0zLCBtNCwgdGFza2J0biwgY2hlY2tlZCkge1xuICAgICAgY2hlY2tlZCA9IChjaGVja2VkICYmIGNoZWNrZWQudHJpbSgpICE9PSAnJyk7XG5cbiAgICAgIHZhciBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdvdXRkZW50JykobTQsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICAgIGJ1bGxldFN0eWxlID0gJyc7XG5cbiAgICAgIC8vIFN1cHBvcnQgZm9yIGdpdGh1YiB0YXNrbGlzdHNcbiAgICAgIGlmICh0YXNrYnRuICYmIG9wdGlvbnMudGFza2xpc3RzKSB7XG4gICAgICAgIGJ1bGxldFN0eWxlID0gJyBjbGFzcz1cInRhc2stbGlzdC1pdGVtXCIgc3R5bGU9XCJsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XCInO1xuICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eWyBcXHRdKlxcWyh4fFh8ICk/XS9tLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG90cCA9ICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgZGlzYWJsZWQgc3R5bGU9XCJtYXJnaW46IDBweCAwLjM1ZW0gMC4yNWVtIC0xLjZlbTsgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcIic7XG4gICAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIG90cCArPSAnIGNoZWNrZWQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdHAgKz0gJz4nO1xuICAgICAgICAgIHJldHVybiBvdHA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBJU1NVRSAjMzEyXG4gICAgICAvLyBUaGlzIGlucHV0OiAtIC0gLSBhXG4gICAgICAvLyBjYXVzZXMgdHJvdWJsZSB0byB0aGUgcGFyc2VyLCBzaW5jZSBpdCBpbnRlcnByZXRzIGl0IGFzOlxuICAgICAgLy8gPHVsPjxsaT48bGk+PGxpPmE8L2xpPjwvbGk+PC9saT48L3VsPlxuICAgICAgLy8gaW5zdGVhZCBvZjpcbiAgICAgIC8vIDx1bD48bGk+LSAtIGE8L2xpPjwvdWw+XG4gICAgICAvLyBTbywgdG8gcHJldmVudCBpdCwgd2Ugd2lsbCBwdXQgYSBtYXJrZXIgKMKoQSlpbiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5lXG4gICAgICAvLyBLaW5kIG9mIGhhY2tpc2gvbW9ua2V5IHBhdGNoaW5nLCBidXQgc2VlbXMgbW9yZSBlZmZlY3RpdmUgdGhhbiBvdmVyY29tcGxpY2F0aW5nIHRoZSBsaXN0IHBhcnNlclxuICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXihbLSorXXxcXGRcXC4pWyBcXHRdK1tcXFNcXG4gXSovZywgZnVuY3Rpb24gKHdtMikge1xuICAgICAgICByZXR1cm4gJ8KoQScgKyB3bTI7XG4gICAgICB9KTtcblxuICAgICAgLy8gbTEgLSBMZWFkaW5nIGxpbmUgb3JcbiAgICAgIC8vIEhhcyBhIGRvdWJsZSByZXR1cm4gKG11bHRpIHBhcmFncmFwaCkgb3JcbiAgICAgIC8vIEhhcyBzdWJsaXN0XG4gICAgICBpZiAobTEgfHwgKGl0ZW0uc2VhcmNoKC9cXG57Mix9LykgPiAtMSkpIHtcbiAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja0dhbXV0JykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZWN1cnNpb24gZm9yIHN1Yi1saXN0czpcbiAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignbGlzdHMnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXFxuJC8sICcnKTsgLy8gY2hvbXAoaXRlbSlcbiAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxCbG9ja3MnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAgICAgICAvLyBDb2xhcHNlIGRvdWJsZSBsaW5lYnJlYWtzXG4gICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL1xcblxcbisvZywgJ1xcblxcbicpO1xuICAgICAgICBpZiAoaXNQYXJhZ3JhcGhlZCkge1xuICAgICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3BhcmFncmFwaHMnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgdGhlIG1hcmtlciAowqhBKVxuICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgnwqhBJywgJycpO1xuICAgICAgLy8gd2UgY2FuIGZpbmFsbHkgd3JhcCB0aGUgbGluZSBpbiBsaXN0IGl0ZW0gdGFnc1xuICAgICAgaXRlbSA9ICAnPGxpJyArIGJ1bGxldFN0eWxlICsgJz4nICsgaXRlbSArICc8L2xpPlxcbic7XG5cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuXG4gICAgLy8gYXR0YWNrbGFiOiBzdHJpcCBzZW50aW5lbFxuICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2UoL8KoMC9nLCAnJyk7XG5cbiAgICBnbG9iYWxzLmdMaXN0TGV2ZWwtLTtcblxuICAgIGlmICh0cmltVHJhaWxpbmcpIHtcbiAgICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2UoL1xccyskLywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiBsaXN0U3RyO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVTdGFydE51bWJlciAobGlzdCwgbGlzdFR5cGUpIHtcbiAgICAvLyBjaGVjayBpZiBvbCBhbmQgc3RhcnRzIGJ5IGEgbnVtYmVyIGRpZmZlcmVudCB0aGFuIDFcbiAgICBpZiAobGlzdFR5cGUgPT09ICdvbCcpIHtcbiAgICAgIHZhciByZXMgPSBsaXN0Lm1hdGNoKC9eICooXFxkKylcXC4vKTtcbiAgICAgIGlmIChyZXMgJiYgcmVzWzFdICE9PSAnMScpIHtcbiAgICAgICAgcmV0dXJuICcgc3RhcnQ9XCInICsgcmVzWzFdICsgJ1wiJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGFuZCBwYXJzZSBjb25zZWN1dGl2ZSBsaXN0cyAoYmV0dGVyIGZpeCBmb3IgaXNzdWUgIzE0MilcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpc3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpc3RUeXBlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdHJpbVRyYWlsaW5nXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZUNvbnNlY3V0aXZlTGlzdHMgKGxpc3QsIGxpc3RUeXBlLCB0cmltVHJhaWxpbmcpIHtcbiAgICAvLyBjaGVjayBpZiB3ZSBjYXVnaHQgMiBvciBtb3JlIGNvbnNlY3V0aXZlIGxpc3RzIGJ5IG1pc3Rha2VcbiAgICAvLyB3ZSB1c2UgdGhlIGNvdW50ZXJSZ3gsIG1lYW5pbmcgaWYgbGlzdFR5cGUgaXMgVUwgd2UgbG9vayBmb3IgT0wgYW5kIHZpY2UgdmVyc2FcbiAgICB2YXIgb2xSZ3ggPSAob3B0aW9ucy5kaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHMpID8gL14gP1xcZCtcXC5bIFxcdF0vZ20gOiAvXiB7MCwzfVxcZCtcXC5bIFxcdF0vZ20sXG4gICAgICAgIHVsUmd4ID0gKG9wdGlvbnMuZGlzYWJsZUZvcmNlZDRTcGFjZXNJbmRlbnRlZFN1Ymxpc3RzKSA/IC9eID9bKistXVsgXFx0XS9nbSA6IC9eIHswLDN9WyorLV1bIFxcdF0vZ20sXG4gICAgICAgIGNvdW50ZXJSeGcgPSAobGlzdFR5cGUgPT09ICd1bCcpID8gb2xSZ3ggOiB1bFJneCxcbiAgICAgICAgcmVzdWx0ID0gJyc7XG5cbiAgICBpZiAobGlzdC5zZWFyY2goY291bnRlclJ4ZykgIT09IC0xKSB7XG4gICAgICAoZnVuY3Rpb24gcGFyc2VDTCAodHh0KSB7XG4gICAgICAgIHZhciBwb3MgPSB0eHQuc2VhcmNoKGNvdW50ZXJSeGcpLFxuICAgICAgICAgICAgc3R5bGUgPSBzdHlsZVN0YXJ0TnVtYmVyKGxpc3QsIGxpc3RUeXBlKTtcbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBzbGljZVxuICAgICAgICAgIHJlc3VsdCArPSAnXFxuXFxuPCcgKyBsaXN0VHlwZSArIHN0eWxlICsgJz5cXG4nICsgcHJvY2Vzc0xpc3RJdGVtcyh0eHQuc2xpY2UoMCwgcG9zKSwgISF0cmltVHJhaWxpbmcpICsgJzwvJyArIGxpc3RUeXBlICsgJz5cXG4nO1xuXG4gICAgICAgICAgLy8gaW52ZXJ0IGNvdW50ZXJUeXBlIGFuZCBsaXN0VHlwZVxuICAgICAgICAgIGxpc3RUeXBlID0gKGxpc3RUeXBlID09PSAndWwnKSA/ICdvbCcgOiAndWwnO1xuICAgICAgICAgIGNvdW50ZXJSeGcgPSAobGlzdFR5cGUgPT09ICd1bCcpID8gb2xSZ3ggOiB1bFJneDtcblxuICAgICAgICAgIC8vcmVjdXJzZVxuICAgICAgICAgIHBhcnNlQ0wodHh0LnNsaWNlKHBvcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCArPSAnXFxuXFxuPCcgKyBsaXN0VHlwZSArIHN0eWxlICsgJz5cXG4nICsgcHJvY2Vzc0xpc3RJdGVtcyh0eHQsICEhdHJpbVRyYWlsaW5nKSArICc8LycgKyBsaXN0VHlwZSArICc+XFxuJztcbiAgICAgICAgfVxuICAgICAgfSkobGlzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlU3RhcnROdW1iZXIobGlzdCwgbGlzdFR5cGUpO1xuICAgICAgcmVzdWx0ID0gJ1xcblxcbjwnICsgbGlzdFR5cGUgKyBzdHlsZSArICc+XFxuJyArIHByb2Nlc3NMaXN0SXRlbXMobGlzdCwgISF0cmltVHJhaWxpbmcpICsgJzwvJyArIGxpc3RUeXBlICsgJz5cXG4nO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKiogU3RhcnQgb2YgbGlzdCBwYXJzaW5nICoqL1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdsaXN0cy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgLy8gYWRkIHNlbnRpbmVsIHRvIGhhY2sgYXJvdW5kIGtodG1sL3NhZmFyaSBidWc6XG4gIC8vIGh0dHA6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTExMjMxXG4gIHRleHQgKz0gJ8KoMCc7XG5cbiAgaWYgKGdsb2JhbHMuZ0xpc3RMZXZlbCkge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL14oKCB7MCwzfShbKistXXxcXGQrWy5dKVsgXFx0XSspW15cXHJdKz8owqgwfFxcbnsyLH0oPz1cXFMpKD8hWyBcXHRdKig/OlsqKy1dfFxcZCtbLl0pWyBcXHRdKykpKS9nbSxcbiAgICAgIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBsaXN0LCBtMikge1xuICAgICAgICB2YXIgbGlzdFR5cGUgPSAobTIuc2VhcmNoKC9bKistXS9nKSA+IC0xKSA/ICd1bCcgOiAnb2wnO1xuICAgICAgICByZXR1cm4gcGFyc2VDb25zZWN1dGl2ZUxpc3RzKGxpc3QsIGxpc3RUeXBlLCB0cnVlKTtcbiAgICAgIH1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhcXG5cXG58Xlxcbj8pKCggezAsM30oWyorLV18XFxkK1suXSlbIFxcdF0rKVteXFxyXSs/KMKoMHxcXG57Mix9KD89XFxTKSg/IVsgXFx0XSooPzpbKistXXxcXGQrWy5dKVsgXFx0XSspKSkvZ20sXG4gICAgICBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIGxpc3QsIG0zKSB7XG4gICAgICAgIHZhciBsaXN0VHlwZSA9IChtMy5zZWFyY2goL1sqKy1dL2cpID4gLTEpID8gJ3VsJyA6ICdvbCc7XG4gICAgICAgIHJldHVybiBwYXJzZUNvbnNlY3V0aXZlTGlzdHMobGlzdCwgbGlzdFR5cGUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLy8gc3RyaXAgc2VudGluZWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwLywgJycpO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdsaXN0cy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKiBQYXJzZSBtZXRhZGF0YSBhdCB0aGUgdG9wIG9mIHRoZSBkb2N1bWVudFxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ldGFkYXRhJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5tZXRhZGF0YSkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbWV0YWRhdGEuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgZnVuY3Rpb24gcGFyc2VNZXRhZGF0YUNvbnRlbnRzIChjb250ZW50KSB7XG4gICAgLy8gcmF3IGlzIHJhdyBzbyBpdCdzIG5vdCBjaGFuZ2VkIGluIGFueSB3YXlcbiAgICBnbG9iYWxzLm1ldGFkYXRhLnJhdyA9IGNvbnRlbnQ7XG5cbiAgICAvLyBlc2NhcGUgY2hhcnMgZm9yYmlkZGVuIGluIGh0bWwgYXR0cmlidXRlc1xuICAgIC8vIGRvdWJsZSBxdW90ZXNcbiAgICBjb250ZW50ID0gY29udGVudFxuICAgICAgLy8gYW1wZXJzYW5kIGZpcnN0XG4gICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgLy8gZG91YmxlIHF1b3Rlc1xuICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcblxuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xcbiB7NH0vZywgJyAnKTtcbiAgICBjb250ZW50LnJlcGxhY2UoL14oW1xcUyBdKyk6ICsoW1xcc1xcU10rPykkL2dtLCBmdW5jdGlvbiAod20sIGtleSwgdmFsdWUpIHtcbiAgICAgIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfVxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXHMqwqvCq8KrKyhcXFMqPylcXG4oW1xcc1xcU10rPylcXG7Cu8K7wrsrXFxuLywgZnVuY3Rpb24gKHdob2xlbWF0Y2gsIGZvcm1hdCwgY29udGVudCkge1xuICAgIHBhcnNlTWV0YWRhdGFDb250ZW50cyhjb250ZW50KTtcbiAgICByZXR1cm4gJ8KoTSc7XG4gIH0pO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXHMqLS0tKyhcXFMqPylcXG4oW1xcc1xcU10rPylcXG4tLS0rXFxuLywgZnVuY3Rpb24gKHdob2xlbWF0Y2gsIGZvcm1hdCwgY29udGVudCkge1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIGdsb2JhbHMubWV0YWRhdGEuZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cbiAgICBwYXJzZU1ldGFkYXRhQ29udGVudHMoY29udGVudCk7XG4gICAgcmV0dXJuICfCqE0nO1xuICB9KTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqE0vZywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ21ldGFkYXRhLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIFJlbW92ZSBvbmUgbGV2ZWwgb2YgbGluZS1sZWFkaW5nIHRhYnMgb3Igc3BhY2VzXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnb3V0ZGVudC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBhdHRhY2tsYWI6IGhhY2sgYXJvdW5kIEtvbnF1ZXJvciAzLjUuNCBidWc6XG4gIC8vIFwiLS0tLS0tLS0tLWJ1Z1wiLnJlcGxhY2UoL14tL2csXCJcIikgPT0gXCJidWdcIlxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eKFxcdHxbIF17MSw0fSkvZ20sICfCqDAnKTsgLy8gYXR0YWNrbGFiOiBnX3RhYl93aWR0aFxuXG4gIC8vIGF0dGFja2xhYjogY2xlYW4gdXAgaGFja1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ291dGRlbnQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsIi8qKlxuICpcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdwYXJhZ3JhcGhzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3BhcmFncmFwaHMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIC8vIFN0cmlwIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGxpbmVzOlxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eXFxuKy9nLCAnJyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcbiskL2csICcnKTtcblxuICB2YXIgZ3JhZnMgPSB0ZXh0LnNwbGl0KC9cXG57Mix9L2cpLFxuICAgICAgZ3JhZnNPdXQgPSBbXSxcbiAgICAgIGVuZCA9IGdyYWZzLmxlbmd0aDsgLy8gV3JhcCA8cD4gdGFnc1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcbiAgICB2YXIgc3RyID0gZ3JhZnNbaV07XG4gICAgLy8gaWYgdGhpcyBpcyBhbiBIVE1MIG1hcmtlciwgY29weSBpdFxuICAgIGlmIChzdHIuc2VhcmNoKC/CqChLfEcpKFxcZCspXFwxL2cpID49IDApIHtcbiAgICAgIGdyYWZzT3V0LnB1c2goc3RyKTtcblxuICAgIC8vIHRlc3QgZm9yIHByZXNlbmNlIG9mIGNoYXJhY3RlcnMgdG8gcHJldmVudCBlbXB0eSBsaW5lcyBiZWluZyBwYXJzZWRcbiAgICAvLyBhcyBwYXJhZ3JhcGhzIChyZXN1bHRpbmcgaW4gdW5kZXNpcmVkIGV4dHJhIGVtcHR5IHBhcmFncmFwaHMpXG4gICAgfSBlbHNlIGlmIChzdHIuc2VhcmNoKC9cXFMvKSA+PSAwKSB7XG4gICAgICBzdHIgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKHN0ciwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXihbIFxcdF0qKS9nLCAnPHA+Jyk7XG4gICAgICBzdHIgKz0gJzwvcD4nO1xuICAgICAgZ3JhZnNPdXQucHVzaChzdHIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBVbmhhc2hpZnkgSFRNTCBibG9ja3MgKi9cbiAgZW5kID0gZ3JhZnNPdXQubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcbiAgICB2YXIgYmxvY2tUZXh0ID0gJycsXG4gICAgICAgIGdyYWZzT3V0SXQgPSBncmFmc091dFtpXSxcbiAgICAgICAgY29kZUZsYWcgPSBmYWxzZTtcbiAgICAvLyBpZiB0aGlzIGlzIGEgbWFya2VyIGZvciBhbiBodG1sIGJsb2NrLi4uXG4gICAgLy8gdXNlIFJlZ0V4cC50ZXN0IGluc3RlYWQgb2Ygc3RyaW5nLnNlYXJjaCBiZWNhdXNlIG9mIFFNTCBidWdcbiAgICB3aGlsZSAoL8KoKEt8RykoXFxkKylcXDEvLnRlc3QoZ3JhZnNPdXRJdCkpIHtcbiAgICAgIHZhciBkZWxpbSA9IFJlZ0V4cC4kMSxcbiAgICAgICAgICBudW0gICA9IFJlZ0V4cC4kMjtcblxuICAgICAgaWYgKGRlbGltID09PSAnSycpIHtcbiAgICAgICAgYmxvY2tUZXh0ID0gZ2xvYmFscy5nSHRtbEJsb2Nrc1tudW1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gd2UgbmVlZCB0byBjaGVjayBpZiBnaEJsb2NrIGlzIGEgZmFsc2UgcG9zaXRpdmVcbiAgICAgICAgaWYgKGNvZGVGbGFnKSB7XG4gICAgICAgICAgLy8gdXNlIGVuY29kZWQgdmVyc2lvbiBvZiBhbGwgdGV4dFxuICAgICAgICAgIGJsb2NrVGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQ29kZScpKGdsb2JhbHMuZ2hDb2RlQmxvY2tzW251bV0udGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmxvY2tUZXh0ID0gZ2xvYmFscy5naENvZGVCbG9ja3NbbnVtXS5jb2RlYmxvY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJsb2NrVGV4dCA9IGJsb2NrVGV4dC5yZXBsYWNlKC9cXCQvZywgJyQkJCQnKTsgLy8gRXNjYXBlIGFueSBkb2xsYXIgc2lnbnNcblxuICAgICAgZ3JhZnNPdXRJdCA9IGdyYWZzT3V0SXQucmVwbGFjZSgvKFxcblxcbik/wqgoS3xHKVxcZCtcXDIoXFxuXFxuKT8vLCBibG9ja1RleHQpO1xuICAgICAgLy8gQ2hlY2sgaWYgZ3JhZnNPdXRJdCBpcyBhIHByZS0+Y29kZVxuICAgICAgaWYgKC9ePHByZVxcYltePl0qPlxccyo8Y29kZVxcYltePl0qPi8udGVzdChncmFmc091dEl0KSkge1xuICAgICAgICBjb2RlRmxhZyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGdyYWZzT3V0W2ldID0gZ3JhZnNPdXRJdDtcbiAgfVxuICB0ZXh0ID0gZ3JhZnNPdXQuam9pbignXFxuJyk7XG4gIC8vIFN0cmlwIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGxpbmVzOlxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eXFxuKy9nLCAnJyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcbiskL2csICcnKTtcbiAgcmV0dXJuIGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgncGFyYWdyYXBocy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xufSk7XG4iLCIvKipcbiAqIFJ1biBleHRlbnNpb25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nLCBmdW5jdGlvbiAoZXh0LCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoZXh0LmZpbHRlcikge1xuICAgIHRleHQgPSBleHQuZmlsdGVyKHRleHQsIGdsb2JhbHMuY29udmVydGVyLCBvcHRpb25zKTtcblxuICB9IGVsc2UgaWYgKGV4dC5yZWdleCkge1xuICAgIC8vIFRPRE8gcmVtb3ZlIHRoaXMgd2hlbiBvbGQgZXh0ZW5zaW9uIGxvYWRpbmcgbWVjaGFuaXNtIGlzIGRlcHJlY2F0ZWRcbiAgICB2YXIgcmUgPSBleHQucmVnZXg7XG4gICAgaWYgKCEocmUgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICByZSA9IG5ldyBSZWdFeHAocmUsICdnJyk7XG4gICAgfVxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocmUsIGV4dC5yZXBsYWNlKTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCIvKipcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHRyYW5zZm9ybWF0aW9ucyB0aGF0IG9jY3VyICp3aXRoaW4qIGJsb2NrLWxldmVsXG4gKiB0YWdzIGxpa2UgcGFyYWdyYXBocywgaGVhZGVycywgYW5kIGxpc3QgaXRlbXMuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3NwYW5HYW11dC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignY29kZVNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQmFja3NsYXNoRXNjYXBlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIFByb2Nlc3MgYW5jaG9yIGFuZCBpbWFnZSB0YWdzLiBJbWFnZXMgbXVzdCBjb21lIGZpcnN0LFxuICAvLyBiZWNhdXNlICFbZm9vXVtmXSBsb29rcyBsaWtlIGFuIGFuY2hvci5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaW1hZ2VzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2FuY2hvcnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBNYWtlIGxpbmtzIG91dCBvZiB0aGluZ3MgbGlrZSBgPGh0dHA6Ly9leGFtcGxlLmNvbS8+YFxuICAvLyBNdXN0IGNvbWUgYWZ0ZXIgYW5jaG9ycywgYmVjYXVzZSB5b3UgY2FuIHVzZSA8IGFuZCA+XG4gIC8vIGRlbGltaXRlcnMgaW4gaW5saW5lIGxpbmtzIGxpa2UgW3RoaXNdKDx1cmw+KS5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignYXV0b0xpbmtzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NpbXBsaWZpZWRBdXRvTGlua3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW1vamknKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5kZXJsaW5lJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2l0YWxpY3NBbmRCb2xkJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlrZXRocm91Z2gnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZWxsaXBzaXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyB3ZSBuZWVkIHRvIGhhc2ggSFRNTCB0YWdzIGluc2lkZSBzcGFuc1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTFNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gbm93IHdlIGVuY29kZSBhbXBzIGFuZCBhbmdsZXNcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQW1wc0FuZEFuZ2xlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIERvIGhhcmQgYnJlYWtzXG4gIGlmIChvcHRpb25zLnNpbXBsZUxpbmVCcmVha3MpIHtcbiAgICAvLyBHRk0gc3R5bGUgaGFyZCBicmVha3NcbiAgICAvLyBvbmx5IGFkZCBsaW5lIGJyZWFrcyBpZiB0aGUgdGV4dCBkb2VzIG5vdCBjb250YWluIGEgYmxvY2sgKHNwZWNpYWwgY2FzZSBmb3IgbGlzdHMpXG4gICAgaWYgKCEvXFxuXFxuwqhLLy50ZXN0KHRleHQpKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rL2csICc8YnIgLz5cXG4nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVmFuaWxsYSBoYXJkIGJyZWFrc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyAgK1xcbi9nLCAnPGJyIC8+XFxuJyk7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzcGFuR2FtdXQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignc3RyaWtldGhyb3VnaCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBwYXJzZUluc2lkZSAodHh0KSB7XG4gICAgaWYgKG9wdGlvbnMuc2ltcGxpZmllZEF1dG9MaW5rKSB7XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NpbXBsaWZpZWRBdXRvTGlua3MnKSh0eHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH1cbiAgICByZXR1cm4gJzxkZWw+JyArIHR4dCArICc8L2RlbD4nO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuc3RyaWtldGhyb3VnaCkge1xuICAgIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3N0cmlrZXRocm91Z2guYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKD86fil7Mn0oW1xcc1xcU10rPykoPzp+KXsyfS9nLCBmdW5jdGlvbiAod20sIHR4dCkgeyByZXR1cm4gcGFyc2VJbnNpZGUodHh0KTsgfSk7XG4gICAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnc3RyaWtldGhyb3VnaC5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB9XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsIi8qKlxuICogU3RyaXBzIGxpbmsgZGVmaW5pdGlvbnMgZnJvbSB0ZXh0LCBzdG9yZXMgdGhlIFVSTHMgYW5kIHRpdGxlcyBpblxuICogaGFzaCByZWZlcmVuY2VzLlxuICogTGluayBkZWZzIGFyZSBpbiB0aGUgZm9ybTogXltpZF06IHVybCBcIm9wdGlvbmFsIHRpdGxlXCJcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdzdHJpcExpbmtEZWZpbml0aW9ucycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgcmVnZXggICAgICAgPSAvXiB7MCwzfVxcWyhbXlxcXV0rKV06WyBcXHRdKlxcbj9bIFxcdF0qPD8oW14+XFxzXSspPj8oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qXFxuP1sgXFx0XSooPzooXFxuKilbXCJ8JyhdKC4rPylbXCJ8JyldWyBcXHRdKik/KD86XFxuK3woPz3CqDApKS9nbSxcbiAgICAgIGJhc2U2NFJlZ2V4ID0gL14gezAsM31cXFsoW15cXF1dKyldOlsgXFx0XSpcXG4/WyBcXHRdKjw/KGRhdGE6Lis/XFwvLis/O2Jhc2U2NCxbQS1aYS16MC05Ky89XFxuXSs/KT4/KD86ID0oWypcXGRdK1tBLVphLXolXXswLDR9KXgoWypcXGRdK1tBLVphLXolXXswLDR9KSk/WyBcXHRdKlxcbj9bIFxcdF0qKD86KFxcbiopW1wifCcoXSguKz8pW1wifCcpXVsgXFx0XSopPyg/OlxcblxcbnwoPz3CqDApfCg/PVxcblxcWykpL2dtO1xuXG4gIC8vIGF0dGFja2xhYjogc2VudGluZWwgd29ya2Fyb3VuZHMgZm9yIGxhY2sgb2YgXFxBIGFuZCBcXFosIHNhZmFyaVxca2h0bWwgYnVnXG4gIHRleHQgKz0gJ8KoMCc7XG5cbiAgdmFyIHJlcGxhY2VGdW5jID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGxpbmtJZCwgdXJsLCB3aWR0aCwgaGVpZ2h0LCBibGFua0xpbmVzLCB0aXRsZSkge1xuXG4gICAgLy8gaWYgdGhlcmUgYXJlbid0IHR3byBpbnN0YW5jZXMgb2YgbGlua0lkIGl0IG11c3Qgbm90IGJlIGEgcmVmZXJlbmNlIGxpbmsgc28gYmFjayBvdXRcbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAodGV4dC50b0xvd2VyQ2FzZSgpLnNwbGl0KGxpbmtJZCkubGVuZ3RoIC0gMSA8IDIpIHtcbiAgICAgIHJldHVybiB3aG9sZU1hdGNoO1xuICAgIH1cbiAgICBpZiAodXJsLm1hdGNoKC9eZGF0YTouKz9cXC8uKz87YmFzZTY0LC8pKSB7XG4gICAgICAvLyByZW1vdmUgbmV3bGluZXNcbiAgICAgIGdsb2JhbHMuZ1VybHNbbGlua0lkXSA9IHVybC5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbG9iYWxzLmdVcmxzW2xpbmtJZF0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUFtcHNBbmRBbmdsZXMnKSh1cmwsIG9wdGlvbnMsIGdsb2JhbHMpOyAgLy8gTGluayBJRHMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcbiAgICB9XG5cbiAgICBpZiAoYmxhbmtMaW5lcykge1xuICAgICAgLy8gT29wcywgZm91bmQgYmxhbmsgbGluZXMsIHNvIGl0J3Mgbm90IGEgdGl0bGUuXG4gICAgICAvLyBQdXQgYmFjayB0aGUgcGFyZW50aGV0aWNhbCBzdGF0ZW1lbnQgd2Ugc3RvbGUuXG4gICAgICByZXR1cm4gYmxhbmtMaW5lcyArIHRpdGxlO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBnbG9iYWxzLmdUaXRsZXNbbGlua0lkXSA9IHRpdGxlLnJlcGxhY2UoL1wifCcvZywgJyZxdW90OycpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMucGFyc2VJbWdEaW1lbnNpb25zICYmIHdpZHRoICYmIGhlaWdodCkge1xuICAgICAgICBnbG9iYWxzLmdEaW1lbnNpb25zW2xpbmtJZF0gPSB7XG4gICAgICAgICAgd2lkdGg6ICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBDb21wbGV0ZWx5IHJlbW92ZSB0aGUgZGVmaW5pdGlvbiBmcm9tIHRoZSB0ZXh0XG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIC8vIGZpcnN0IHdlIHRyeSB0byBmaW5kIGJhc2U2NCBsaW5rIHJlZmVyZW5jZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZShiYXNlNjRSZWdleCwgcmVwbGFjZUZ1bmMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsIHJlcGxhY2VGdW5jKTtcblxuICAvLyBhdHRhY2tsYWI6IHN0cmlwIHNlbnRpbmVsXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoMC8sICcnKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCd0YWJsZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLnRhYmxlcykge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdmFyIHRhYmxlUmd4ICAgICAgID0gL14gezAsM31cXHw/LitcXHwuK1xcbiB7MCwzfVxcfD9bIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9WyBcXHRdKjo/WyBcXHRdKlxcfFsgXFx0XSo6P1sgXFx0XSooPzpbLT1dKXsyLH1bXFxzXFxTXSs/KD86XFxuXFxufMKoMCkvZ20sXG4gICAgICAvL3NpbmdlQ29sVGJsUmd4ID0gL14gezAsM31cXHwuK1xcfFxcbiB7MCwzfVxcfFsgXFx0XSo6P1sgXFx0XSooPzpbLT1dKXsyLH1bIFxcdF0qOj9bIFxcdF0qXFx8WyBcXHRdKlxcbig/OiB7MCwzfVxcfC4rXFx8XFxuKSsoPzpcXG5cXG58wqgwKS9nbTtcbiAgICAgIHNpbmdlQ29sVGJsUmd4ID0gL14gezAsM31cXHwuK1xcfFsgXFx0XSpcXG4gezAsM31cXHxbIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9WyBcXHRdKjo/WyBcXHRdKlxcfFsgXFx0XSpcXG4oIHswLDN9XFx8LitcXHxbIFxcdF0qXFxuKSooPzpcXG58wqgwKS9nbTtcblxuICBmdW5jdGlvbiBwYXJzZVN0eWxlcyAoc0xpbmUpIHtcbiAgICBpZiAoL146WyBcXHRdKi0tKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246bGVmdDtcIic7XG4gICAgfSBlbHNlIGlmICgvXi0tKlsgXFx0XSo6WyBcXHRdKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246cmlnaHQ7XCInO1xuICAgIH0gZWxzZSBpZiAoL146WyBcXHRdKi0tKlsgXFx0XSo6JC8udGVzdChzTGluZSkpIHtcbiAgICAgIHJldHVybiAnIHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7XCInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzIChoZWFkZXIsIHN0eWxlKSB7XG4gICAgdmFyIGlkID0gJyc7XG4gICAgaGVhZGVyID0gaGVhZGVyLnRyaW0oKTtcbiAgICAvLyBzdXBwb3J0IGJvdGggdGFibGVzSGVhZGVySWQgYW5kIHRhYmxlSGVhZGVySWQgZHVlIHRvIGVycm9yIGluIGRvY3VtZW50YXRpb24gc28gd2UgZG9uJ3QgYnJlYWsgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBpZiAob3B0aW9ucy50YWJsZXNIZWFkZXJJZCB8fCBvcHRpb25zLnRhYmxlSGVhZGVySWQpIHtcbiAgICAgIGlkID0gJyBpZD1cIicgKyBoZWFkZXIucmVwbGFjZSgvIC9nLCAnXycpLnRvTG93ZXJDYXNlKCkgKyAnXCInO1xuICAgIH1cbiAgICBoZWFkZXIgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGhlYWRlciwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICByZXR1cm4gJzx0aCcgKyBpZCArIHN0eWxlICsgJz4nICsgaGVhZGVyICsgJzwvdGg+XFxuJztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQ2VsbHMgKGNlbGwsIHN0eWxlKSB7XG4gICAgdmFyIHN1YlRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGNlbGwsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHJldHVybiAnPHRkJyArIHN0eWxlICsgJz4nICsgc3ViVGV4dCArICc8L3RkPlxcbic7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFRhYmxlIChoZWFkZXJzLCBjZWxscykge1xuICAgIHZhciB0YiA9ICc8dGFibGU+XFxuPHRoZWFkPlxcbjx0cj5cXG4nLFxuICAgICAgICB0YmxMZ24gPSBoZWFkZXJzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGJsTGduOyArK2kpIHtcbiAgICAgIHRiICs9IGhlYWRlcnNbaV07XG4gICAgfVxuICAgIHRiICs9ICc8L3RyPlxcbjwvdGhlYWQ+XFxuPHRib2R5Plxcbic7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRiICs9ICc8dHI+XFxuJztcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0YmxMZ247ICsraWkpIHtcbiAgICAgICAgdGIgKz0gY2VsbHNbaV1baWldO1xuICAgICAgfVxuICAgICAgdGIgKz0gJzwvdHI+XFxuJztcbiAgICB9XG4gICAgdGIgKz0gJzwvdGJvZHk+XFxuPC90YWJsZT5cXG4nO1xuICAgIHJldHVybiB0YjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVGFibGUgKHJhd1RhYmxlKSB7XG4gICAgdmFyIGksIHRhYmxlTGluZXMgPSByYXdUYWJsZS5zcGxpdCgnXFxuJyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGVMaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgLy8gc3RyaXAgd3JvbmcgZmlyc3QgYW5kIGxhc3QgY29sdW1uIGlmIHdyYXBwZWQgdGFibGVzIGFyZSB1c2VkXG4gICAgICBpZiAoL14gezAsM31cXHwvLnRlc3QodGFibGVMaW5lc1tpXSkpIHtcbiAgICAgICAgdGFibGVMaW5lc1tpXSA9IHRhYmxlTGluZXNbaV0ucmVwbGFjZSgvXiB7MCwzfVxcfC8sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICgvXFx8WyBcXHRdKiQvLnRlc3QodGFibGVMaW5lc1tpXSkpIHtcbiAgICAgICAgdGFibGVMaW5lc1tpXSA9IHRhYmxlTGluZXNbaV0ucmVwbGFjZSgvXFx8WyBcXHRdKiQvLCAnJyk7XG4gICAgICB9XG4gICAgICAvLyBwYXJzZSBjb2RlIHNwYW5zIGZpcnN0LCBidXQgd2Ugb25seSBzdXBwb3J0IG9uZSBsaW5lIGNvZGUgc3BhbnNcbiAgICAgIHRhYmxlTGluZXNbaV0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVTcGFucycpKHRhYmxlTGluZXNbaV0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH1cblxuICAgIHZhciByYXdIZWFkZXJzID0gdGFibGVMaW5lc1swXS5zcGxpdCgnfCcpLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy50cmltKCk7fSksXG4gICAgICAgIHJhd1N0eWxlcyA9IHRhYmxlTGluZXNbMV0uc3BsaXQoJ3wnKS5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudHJpbSgpO30pLFxuICAgICAgICByYXdDZWxscyA9IFtdLFxuICAgICAgICBoZWFkZXJzID0gW10sXG4gICAgICAgIHN0eWxlcyA9IFtdLFxuICAgICAgICBjZWxscyA9IFtdO1xuXG4gICAgdGFibGVMaW5lcy5zaGlmdCgpO1xuICAgIHRhYmxlTGluZXMuc2hpZnQoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YWJsZUxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAodGFibGVMaW5lc1tpXS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmF3Q2VsbHMucHVzaChcbiAgICAgICAgdGFibGVMaW5lc1tpXVxuICAgICAgICAgIC5zcGxpdCgnfCcpXG4gICAgICAgICAgLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHMudHJpbSgpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChyYXdIZWFkZXJzLmxlbmd0aCA8IHJhd1N0eWxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByYXdUYWJsZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3U3R5bGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBzdHlsZXMucHVzaChwYXJzZVN0eWxlcyhyYXdTdHlsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3SGVhZGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChzdHlsZXNbaV0pKSB7XG4gICAgICAgIHN0eWxlc1tpXSA9ICcnO1xuICAgICAgfVxuICAgICAgaGVhZGVycy5wdXNoKHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzW2ldLCBzdHlsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3Q2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBoZWFkZXJzLmxlbmd0aDsgKytpaSkge1xuICAgICAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKHJhd0NlbGxzW2ldW2lpXSkpIHtcblxuICAgICAgICB9XG4gICAgICAgIHJvdy5wdXNoKHBhcnNlQ2VsbHMocmF3Q2VsbHNbaV1baWldLCBzdHlsZXNbaWldKSk7XG4gICAgICB9XG4gICAgICBjZWxscy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkVGFibGUoaGVhZGVycywgY2VsbHMpO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndGFibGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIGZpbmQgZXNjYXBlZCBwaXBlIGNoYXJhY3RlcnNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXChcXHwpL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIC8vIHBhcnNlIG11bHRpIGNvbHVtbiB0YWJsZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSh0YWJsZVJneCwgcGFyc2VUYWJsZSk7XG5cbiAgLy8gcGFyc2Ugb25lIGNvbHVtbiB0YWJsZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZShzaW5nZUNvbFRibFJneCwgcGFyc2VUYWJsZSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndGFibGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcigndW5kZXJsaW5lJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy51bmRlcmxpbmUpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuZGVybGluZS5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBpZiAob3B0aW9ucy5saXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxiX19fKFxcU1tcXHNcXFNdKj8pX19fXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gJzx1PicgKyB0eHQgKyAnPC91Pic7XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxiX18oXFxTW1xcc1xcU10qPylfX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuICc8dT4nICsgdHh0ICsgJzwvdT4nO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL19fXyhcXFNbXFxzXFxTXSo/KV9fXy9nLCBmdW5jdGlvbiAod20sIG0pIHtcbiAgICAgIHJldHVybiAoL1xcUyQvLnRlc3QobSkpID8gJzx1PicgKyBtICsgJzwvdT4nIDogd207XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvX18oXFxTW1xcc1xcU10qPylfXy9nLCBmdW5jdGlvbiAod20sIG0pIHtcbiAgICAgIHJldHVybiAoL1xcUyQvLnRlc3QobSkpID8gJzx1PicgKyBtICsgJzwvdT4nIDogd207XG4gICAgfSk7XG4gIH1cblxuICAvLyBlc2NhcGUgcmVtYWluaW5nIHVuZGVyc2NvcmVzIHRvIHByZXZlbnQgdGhlbSBiZWluZyBwYXJzZWQgYnkgaXRhbGljIGFuZCBib2xkXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhfKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmRlcmxpbmUuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuIiwiLyoqXG4gKiBTd2FwIGJhY2sgaW4gYWxsIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgd2UndmUgaGlkZGVuLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3VuZXNjYXBlU3BlY2lhbENoYXJzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmVzY2FwZVNwZWNpYWxDaGFycy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEUoXFxkKylFL2csIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuICAgIHZhciBjaGFyQ29kZVRvUmVwbGFjZSA9IHBhcnNlSW50KG0xKTtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZVRvUmVwbGFjZSk7XG4gIH0pO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuZXNjYXBlU3BlY2lhbENoYXJzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4iLCJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ibG9ja3F1b3RlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGlubmVyVHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcblxuICAgICAgaWYgKGlubmVyVHh0ID09PSAnJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHR4dCArPSBpbm5lclR4dDtcbiAgICB9XG4gIH1cbiAgLy8gY2xlYW51cFxuICB0eHQgPSB0eHQudHJpbSgpO1xuICB0eHQgPSAnPiAnICsgdHh0LnNwbGl0KCdcXG4nKS5qb2luKCdcXG4+ICcpO1xuICByZXR1cm4gdHh0O1xufSk7XG4iLCJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5jb2RlQmxvY2snLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGxhbmcgPSBub2RlLmdldEF0dHJpYnV0ZSgnbGFuZ3VhZ2UnKSxcbiAgICAgIG51bSAgPSBub2RlLmdldEF0dHJpYnV0ZSgncHJlY29kZW51bScpO1xuICByZXR1cm4gJ2BgYCcgKyBsYW5nICsgJ1xcbicgKyBnbG9iYWxzLnByZUxpc3RbbnVtXSArICdcXG5gYGAnO1xufSk7XG4iLCJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5jb2RlU3BhbicsIGZ1bmN0aW9uIChub2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gJ2AnICsgbm9kZS5pbm5lckhUTUwgKyAnYCc7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmVtcGhhc2lzJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ICs9ICcqJztcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICAgIHR4dCArPSAnKic7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaGVhZGVyJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMsIGhlYWRlckxldmVsKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgaGVhZGVyTWFyayA9IG5ldyBBcnJheShoZWFkZXJMZXZlbCArIDEpLmpvaW4oJyMnKSxcbiAgICAgIHR4dCA9ICcnO1xuXG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHR4dCA9IGhlYWRlck1hcmsgKyAnICc7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0eHQ7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhyJywgZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuICctLS0nO1xufSk7XG4iLCJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5pbWFnZScsIGZ1bmN0aW9uIChub2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICB0eHQgKz0gJyFbJyArIG5vZGUuZ2V0QXR0cmlidXRlKCdhbHQnKSArICddKCc7XG4gICAgdHh0ICs9ICc8JyArIG5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKSArICc+JztcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3dpZHRoJykgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoJ2hlaWdodCcpKSB7XG4gICAgICB0eHQgKz0gJyA9JyArIG5vZGUuZ2V0QXR0cmlidXRlKCd3aWR0aCcpICsgJ3gnICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgIH1cblxuICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgdHh0ICs9ICcgXCInICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgKyAnXCInO1xuICAgIH1cbiAgICB0eHQgKz0gJyknO1xuICB9XG4gIHJldHVybiB0eHQ7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpbmtzJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpICYmIG5vZGUuaGFzQXR0cmlidXRlKCdocmVmJykpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHR4dCA9ICdbJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgICB0eHQgKz0gJ10oJztcbiAgICB0eHQgKz0gJzwnICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSArICc+JztcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3RpdGxlJykpIHtcbiAgICAgIHR4dCArPSAnIFwiJyArIG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpICsgJ1wiJztcbiAgICB9XG4gICAgdHh0ICs9ICcpJztcbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG4iLCJzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0JywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMsIHR5cGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKCFub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgbGlzdEl0ZW1zICAgICAgID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgbGlzdEl0ZW1zTGVuZ2h0ID0gbGlzdEl0ZW1zLmxlbmd0aCxcbiAgICAgIGxpc3ROdW0gPSBub2RlLmdldEF0dHJpYnV0ZSgnc3RhcnQnKSB8fCAxO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdEl0ZW1zTGVuZ2h0OyArK2kpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RJdGVtc1tpXS50YWdOYW1lID09PSAndW5kZWZpbmVkJyB8fCBsaXN0SXRlbXNbaV0udGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnbGknKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBkZWZpbmUgdGhlIGJ1bGxldCB0byB1c2UgaW4gbGlzdFxuICAgIHZhciBidWxsZXQgPSAnJztcbiAgICBpZiAodHlwZSA9PT0gJ29sJykge1xuICAgICAgYnVsbGV0ID0gbGlzdE51bS50b1N0cmluZygpICsgJy4gJztcbiAgICB9IGVsc2Uge1xuICAgICAgYnVsbGV0ID0gJy0gJztcbiAgICB9XG5cbiAgICAvLyBwYXJzZSBsaXN0IGl0ZW1cbiAgICB0eHQgKz0gYnVsbGV0ICsgc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlzdEl0ZW0nKShsaXN0SXRlbXNbaV0sIGdsb2JhbHMpO1xuICAgICsrbGlzdE51bTtcbiAgfVxuXG4gIC8vIGFkZCBjb21tZW50IGF0IHRoZSBlbmQgdG8gcHJldmVudCBjb25zZWN1dGl2ZSBsaXN0cyB0byBiZSBwYXJzZWQgYXMgb25lXG4gIHR4dCArPSAnXFxuPCEtLSAtLT5cXG4nO1xuICByZXR1cm4gdHh0LnRyaW0oKTtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlzdEl0ZW0nLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGxpc3RJdGVtVHh0ID0gJyc7XG5cbiAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgY2hpbGRyZW5MZW5naHQgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmdodDsgKytpKSB7XG4gICAgbGlzdEl0ZW1UeHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgfVxuICAvLyBpZiBpdCdzIG9ubHkgb25lIGxpbmVyLCB3ZSBuZWVkIHRvIGFkZCBhIG5ld2xpbmUgYXQgdGhlIGVuZFxuICBpZiAoIS9cXG4kLy50ZXN0KGxpc3RJdGVtVHh0KSkge1xuICAgIGxpc3RJdGVtVHh0ICs9ICdcXG4nO1xuICB9IGVsc2Uge1xuICAgIC8vIGl0J3MgbXVsdGlwYXJhZ3JhcGgsIHNvIHdlIG5lZWQgdG8gaW5kZW50XG4gICAgbGlzdEl0ZW1UeHQgPSBsaXN0SXRlbVR4dFxuICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgLmpvaW4oJ1xcbiAgICAnKVxuICAgICAgLnJlcGxhY2UoL14gezR9JC9nbSwgJycpXG4gICAgICAucmVwbGFjZSgvXFxuXFxuKy9nLCAnXFxuXFxuJyk7XG4gIH1cblxuICByZXR1cm4gbGlzdEl0ZW1UeHQ7XG59KTtcbiIsIlxuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMsIHNwYW5zT25seSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgc3BhbnNPbmx5ID0gc3BhbnNPbmx5IHx8IGZhbHNlO1xuXG4gIHZhciB0eHQgPSAnJztcblxuICAvLyBlZGdlIGNhc2Ugb2YgdGV4dCB3aXRob3V0IHdyYXBwZXIgcGFyYWdyYXBoXG4gIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnR4dCcpKG5vZGUsIGdsb2JhbHMpO1xuICB9XG5cbiAgLy8gSFRNTCBjb21tZW50XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA4KSB7XG4gICAgcmV0dXJuICc8IS0tJyArIG5vZGUuZGF0YSArICctLT5cXG5cXG4nO1xuICB9XG5cbiAgLy8gcHJvY2VzcyBvbmx5IG5vZGUgZWxlbWVudHNcbiAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgdGFnTmFtZSA9IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIHN3aXRjaCAodGFnTmFtZSkge1xuXG4gICAgLy9cbiAgICAvLyBCTE9DS1NcbiAgICAvL1xuICAgIGNhc2UgJ2gxJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicpKG5vZGUsIGdsb2JhbHMsIDEpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2gyJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicpKG5vZGUsIGdsb2JhbHMsIDIpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2gzJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicpKG5vZGUsIGdsb2JhbHMsIDMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2g0JzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicpKG5vZGUsIGdsb2JhbHMsIDQpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2g1JzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicpKG5vZGUsIGdsb2JhbHMsIDUpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2g2JzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicpKG5vZGUsIGdsb2JhbHMsIDYpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncCc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5wYXJhZ3JhcGgnKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uYmxvY2txdW90ZScpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaHInOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaHInKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ29sJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpc3QnKShub2RlLCBnbG9iYWxzLCAnb2wnKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3VsJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpc3QnKShub2RlLCBnbG9iYWxzLCAndWwnKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3ByZWNvZGUnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uY29kZUJsb2NrJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwcmUnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucHJlJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0YWJsZSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi50YWJsZScpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgLy9cbiAgICAvLyBTUEFOU1xuICAgIC8vXG4gICAgY2FzZSAnY29kZSc6XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5jb2RlU3BhbicpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdlbSc6XG4gICAgY2FzZSAnaSc6XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5lbXBoYXNpcycpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdzdHJvbmcnOlxuICAgIGNhc2UgJ2InOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uc3Ryb25nJykobm9kZSwgZ2xvYmFscyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2RlbCc6XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5zdHJpa2V0aHJvdWdoJykobm9kZSwgZ2xvYmFscyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2EnOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlua3MnKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW1nJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmltYWdlJykobm9kZSwgZ2xvYmFscyk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0eHQgPSBub2RlLm91dGVySFRNTCArICdcXG5cXG4nO1xuICB9XG5cbiAgLy8gY29tbW9uIG5vcm1hbGl6YXRpb25cbiAgLy8gVE9ETyBldmVudHVhbGx5XG5cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucGFyYWdyYXBoJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNvbWUgdGV4dCBub3JtYWxpemF0aW9uXG4gIHR4dCA9IHR4dC50cmltKCk7XG5cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucHJlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBudW0gID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ByZW51bScpO1xuICByZXR1cm4gJzxwcmU+JyArIGdsb2JhbHMucHJlTGlzdFtudW1dICsgJzwvcHJlPic7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnN0cmlrZXRocm91Z2gnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICB0eHQgKz0gJ35+JztcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICAgIHR4dCArPSAnfn4nO1xuICB9XG4gIHJldHVybiB0eHQ7XG59KTtcbiIsInNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnN0cm9uZycsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHR4dCArPSAnKionO1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgICB0eHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgdHh0ICs9ICcqKic7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGUnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnLFxuICAgICAgdGFibGVBcnJheSA9IFtbXSwgW11dLFxuICAgICAgaGVhZGluZ3MgICA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgndGhlYWQ+dHI+dGgnKSxcbiAgICAgIHJvd3MgICAgICAgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5PnRyJyksXG4gICAgICBpLCBpaTtcbiAgZm9yIChpID0gMDsgaSA8IGhlYWRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGhlYWRDb250ZW50ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGVDZWxsJykoaGVhZGluZ3NbaV0sIGdsb2JhbHMpLFxuICAgICAgICBhbGxpZ24gPSAnLS0tJztcblxuICAgIGlmIChoZWFkaW5nc1tpXS5oYXNBdHRyaWJ1dGUoJ3N0eWxlJykpIHtcbiAgICAgIHZhciBzdHlsZSA9IGhlYWRpbmdzW2ldLmdldEF0dHJpYnV0ZSgnc3R5bGUnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICAgIGNhc2UgJ3RleHQtYWxpZ246bGVmdDsnOlxuICAgICAgICAgIGFsbGlnbiA9ICc6LS0tJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGV4dC1hbGlnbjpyaWdodDsnOlxuICAgICAgICAgIGFsbGlnbiA9ICctLS06JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGV4dC1hbGlnbjpjZW50ZXI7JzpcbiAgICAgICAgICBhbGxpZ24gPSAnOi0tLTonO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0YWJsZUFycmF5WzBdW2ldID0gaGVhZENvbnRlbnQudHJpbSgpO1xuICAgIHRhYmxlQXJyYXlbMV1baV0gPSBhbGxpZ247XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciByID0gdGFibGVBcnJheS5wdXNoKFtdKSAtIDEsXG4gICAgICAgIGNvbHMgPSByb3dzW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpO1xuXG4gICAgZm9yIChpaSA9IDA7IGlpIDwgaGVhZGluZ3MubGVuZ3RoOyArK2lpKSB7XG4gICAgICB2YXIgY2VsbENvbnRlbnQgPSAnICc7XG4gICAgICBpZiAodHlwZW9mIGNvbHNbaWldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjZWxsQ29udGVudCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlQ2VsbCcpKGNvbHNbaWldLCBnbG9iYWxzKTtcbiAgICAgIH1cbiAgICAgIHRhYmxlQXJyYXlbcl0ucHVzaChjZWxsQ29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNlbGxTcGFjZXNDb3VudCA9IDM7XG4gIGZvciAoaSA9IDA7IGkgPCB0YWJsZUFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgZm9yIChpaSA9IDA7IGlpIDwgdGFibGVBcnJheVtpXS5sZW5ndGg7ICsraWkpIHtcbiAgICAgIHZhciBzdHJMZW4gPSB0YWJsZUFycmF5W2ldW2lpXS5sZW5ndGg7XG4gICAgICBpZiAoc3RyTGVuID4gY2VsbFNwYWNlc0NvdW50KSB7XG4gICAgICAgIGNlbGxTcGFjZXNDb3VudCA9IHN0ckxlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgdGFibGVBcnJheS5sZW5ndGg7ICsraSkge1xuICAgIGZvciAoaWkgPSAwOyBpaSA8IHRhYmxlQXJyYXlbaV0ubGVuZ3RoOyArK2lpKSB7XG4gICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICBpZiAodGFibGVBcnJheVtpXVtpaV0uc2xpY2UoLTEpID09PSAnOicpIHtcbiAgICAgICAgICB0YWJsZUFycmF5W2ldW2lpXSA9IHNob3dkb3duLmhlbHBlci5wYWRFbmQodGFibGVBcnJheVtpXVtpaV0uc2xpY2UoLTEpLCBjZWxsU3BhY2VzQ291bnQgLSAxLCAnLScpICsgJzonO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhYmxlQXJyYXlbaV1baWldID0gc2hvd2Rvd24uaGVscGVyLnBhZEVuZCh0YWJsZUFycmF5W2ldW2lpXSwgY2VsbFNwYWNlc0NvdW50LCAnLScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWJsZUFycmF5W2ldW2lpXSA9IHNob3dkb3duLmhlbHBlci5wYWRFbmQodGFibGVBcnJheVtpXVtpaV0sIGNlbGxTcGFjZXNDb3VudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHR4dCArPSAnfCAnICsgdGFibGVBcnJheVtpXS5qb2luKCcgfCAnKSArICcgfFxcbic7XG4gIH1cblxuICByZXR1cm4gdHh0LnRyaW0oKTtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGVDZWxsJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKCFub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICB0eHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzLCB0cnVlKTtcbiAgfVxuICByZXR1cm4gdHh0LnRyaW0oKTtcbn0pO1xuIiwic2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udHh0JywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSBub2RlLm5vZGVWYWx1ZTtcblxuICAvLyBtdWx0aXBsZSBzcGFjZXMgYXJlIGNvbGxhcHNlZFxuICB0eHQgPSB0eHQucmVwbGFjZSgvICsvZywgJyAnKTtcblxuICAvLyByZXBsYWNlIHRoZSBjdXN0b20gwqhOQlNQOyB3aXRoIGEgc3BhY2VcbiAgdHh0ID0gdHh0LnJlcGxhY2UoL8KoTkJTUDsvZywgJyAnKTtcblxuICAvLyBcIiwgPCwgPiBhbmQgJiBzaG91bGQgcmVwbGFjZSBlc2NhcGVkIGh0bWwgZW50aXRpZXNcbiAgdHh0ID0gc2hvd2Rvd24uaGVscGVyLnVuZXNjYXBlSFRNTEVudGl0aWVzKHR4dCk7XG5cbiAgLy8gZXNjYXBlIG1hcmtkb3duIG1hZ2ljIGNoYXJhY3RlcnNcbiAgLy8gZW1waGFzaXMsIHN0cm9uZyBhbmQgc3RyaWtldGhyb3VnaCAtIGNhbiBhcHBlYXIgZXZlcnl3aGVyZVxuICAvLyB3ZSBhbHNvIGVzY2FwZSBwaXBlICh8KSBiZWNhdXNlIG9mIHRhYmxlc1xuICAvLyBhbmQgZXNjYXBlIGAgYmVjYXVzZSBvZiBjb2RlIGJsb2NrcyBhbmQgc3BhbnNcbiAgdHh0ID0gdHh0LnJlcGxhY2UoLyhbKl9+fGBdKS9nLCAnXFxcXCQxJyk7XG5cbiAgLy8gZXNjYXBlID4gYmVjYXVzZSBvZiBibG9ja3F1b3Rlc1xuICB0eHQgPSB0eHQucmVwbGFjZSgvXihcXHMqKT4vZywgJ1xcXFwkMT4nKTtcblxuICAvLyBoYXNoIGNoYXJhY3Rlciwgb25seSB0cm91Ymxlc29tZSBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgbGluZSBiZWNhdXNlIG9mIGhlYWRlcnNcbiAgdHh0ID0gdHh0LnJlcGxhY2UoL14jL2dtLCAnXFxcXCMnKTtcblxuICAvLyBob3Jpem9udGFsIHJ1bGVzXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKFxccyopKFstPV17Myx9KShcXHMqKSQvLCAnJDFcXFxcJDIkMycpO1xuXG4gIC8vIGRvdCwgYmVjYXVzZSBvZiBvcmRlcmVkIGxpc3RzLCBvbmx5IHRyb3VibGVzb21lIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBsaW5lIHdoZW4gcHJlY2VkZWQgYnkgYW4gaW50ZWdlclxuICB0eHQgPSB0eHQucmVwbGFjZSgvXiggezAsM31cXGQrKVxcLi9nbSwgJyQxXFxcXC4nKTtcblxuICAvLyArLCAqIGFuZCAtLCBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgbGluZSBiZWNvbWVzIGEgbGlzdCwgc28gd2UgbmVlZCB0byBlc2NhcGUgdGhlbSBhbHNvIChhc3RlcmlzayB3YXMgYWxyZWFkeSBlc2NhcGVkKVxuICB0eHQgPSB0eHQucmVwbGFjZSgvXiggezAsM30pKFsrLV0pL2dtLCAnJDFcXFxcJDInKTtcblxuICAvLyBpbWFnZXMgYW5kIGxpbmtzLCBdIGZvbGxvd2VkIGJ5ICggaXMgcHJvYmxlbWF0aWMsIHNvIHdlIGVzY2FwZSBpdFxuICB0eHQgPSB0eHQucmVwbGFjZSgvXShbXFxzXSopXFwoL2csICdcXFxcXSQxXFxcXCgnKTtcblxuICAvLyByZWZlcmVuY2UgVVJJcyBtdXN0IGFsc28gYmUgZXNjYXBlZFxuICB0eHQgPSB0eHQucmVwbGFjZSgvXiB7MCwzfVxcWyhbXFxTIFxcdF0qPyldOi9nbSwgJ1xcXFxbJDFdOicpO1xuXG4gIHJldHVybiB0eHQ7XG59KTtcbiIsInZhciByb290ID0gdGhpcztcblxuLy8gQU1EIExvYWRlclxuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gc2hvd2Rvd247XG4gIH0pO1xuXG4vLyBDb21tb25KUy9ub2RlSlMgTG9hZGVyXG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gc2hvd2Rvd247XG5cbi8vIFJlZ3VsYXIgQnJvd3NlciBsb2FkZXJcbn0gZWxzZSB7XG4gIHJvb3Quc2hvd2Rvd24gPSBzaG93ZG93bjtcbn1cbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9MQU5HIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcclxuICAgIH1cclxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICh3aW5kb3csIG5vR2xvYmFsKSB7XHJcbiAgICBjb25zdCBsYW5nID0ge1xyXG4gICAgICAgIGNvZGU6ICdlbicsXHJcbiAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiAnRGVmYXVsdCcsXHJcbiAgICAgICAgICAgIHNhdmU6ICdTYXZlJyxcclxuICAgICAgICAgICAgZm9udDogJ0ZvbnQnLFxyXG4gICAgICAgICAgICBmb3JtYXRzOiAnRm9ybWF0cycsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnU2l6ZScsXHJcbiAgICAgICAgICAgIGJvbGQ6ICdCb2xkJyxcclxuICAgICAgICAgICAgdW5kZXJsaW5lOiAnVW5kZXJsaW5lJyxcclxuICAgICAgICAgICAgaXRhbGljOiAnSXRhbGljJyxcclxuICAgICAgICAgICAgc3RyaWtlOiAnU3RyaWtlJyxcclxuICAgICAgICAgICAgc3Vic2NyaXB0OiAnU3Vic2NyaXB0JyxcclxuICAgICAgICAgICAgc3VwZXJzY3JpcHQ6ICdTdXBlcnNjcmlwdCcsXHJcbiAgICAgICAgICAgIHJlbW92ZUZvcm1hdDogJ1JlbW92ZSBGb3JtYXQnLFxyXG4gICAgICAgICAgICBmb250Q29sb3I6ICdGb250IENvbG9yJyxcclxuICAgICAgICAgICAgaGlsaXRlQ29sb3I6ICdIaWdobGlnaHQgQ29sb3InLFxyXG4gICAgICAgICAgICBpbmRlbnQ6ICdJbmRlbnQnLFxyXG4gICAgICAgICAgICBvdXRkZW50OiAnT3V0ZGVudCcsXHJcbiAgICAgICAgICAgIGFsaWduOiAnQWxpZ24nLFxyXG4gICAgICAgICAgICBhbGlnbkxlZnQ6ICdBbGlnbiBsZWZ0JyxcclxuICAgICAgICAgICAgYWxpZ25SaWdodDogJ0FsaWduIHJpZ2h0JyxcclxuICAgICAgICAgICAgYWxpZ25DZW50ZXI6ICdBbGlnbiBjZW50ZXInLFxyXG4gICAgICAgICAgICBhbGlnbkp1c3RpZnk6ICdBbGlnbiBqdXN0aWZ5JyxcclxuICAgICAgICAgICAgbGlzdDogJ0xpc3QnLFxyXG4gICAgICAgICAgICBvcmRlckxpc3Q6ICdPcmRlcmVkIGxpc3QnLFxyXG4gICAgICAgICAgICB1bm9yZGVyTGlzdDogJ1Vub3JkZXJlZCBsaXN0JyxcclxuICAgICAgICAgICAgaG9yaXpvbnRhbFJ1bGU6ICdIb3Jpem9udGFsIGxpbmUnLFxyXG4gICAgICAgICAgICBocl9zb2xpZDogJ1NvbGlkJyxcclxuICAgICAgICAgICAgaHJfZG90dGVkOiAnRG90dGVkJyxcclxuICAgICAgICAgICAgaHJfZGFzaGVkOiAnRGFzaGVkJyxcclxuICAgICAgICAgICAgdGFibGU6ICdUYWJsZScsXHJcbiAgICAgICAgICAgIGxpbms6ICdMaW5rJyxcclxuICAgICAgICAgICAgbWF0aDogJ01hdGgnLFxyXG4gICAgICAgICAgICBpbWFnZTogJ0ltYWdlJyxcclxuICAgICAgICAgICAgdmlkZW86ICdWaWRlbycsXHJcbiAgICAgICAgICAgIGF1ZGlvOiAnQXVkaW8nLFxyXG4gICAgICAgICAgICBmdWxsU2NyZWVuOiAnRnVsbCBzY3JlZW4nLFxyXG4gICAgICAgICAgICBzaG93QmxvY2tzOiAnU2hvdyBibG9ja3MnLFxyXG4gICAgICAgICAgICBjb2RlVmlldzogJ0NvZGUgdmlldycsXHJcbiAgICAgICAgICAgIHVuZG86ICdVbmRvJyxcclxuICAgICAgICAgICAgcmVkbzogJ1JlZG8nLFxyXG4gICAgICAgICAgICBwcmV2aWV3OiAnUHJldmlldycsXHJcbiAgICAgICAgICAgIHByaW50OiAncHJpbnQnLFxyXG4gICAgICAgICAgICB0YWdfcDogJ1BhcmFncmFwaCcsXHJcbiAgICAgICAgICAgIHRhZ19kaXY6ICdOb3JtYWwgKERJViknLFxyXG4gICAgICAgICAgICB0YWdfaDogJ0hlYWRlcicsXHJcbiAgICAgICAgICAgIHRhZ19ibG9ja3F1b3RlOiAnUXVvdGUnLFxyXG4gICAgICAgICAgICB0YWdfcHJlOiAnQ29kZScsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnVGVtcGxhdGUnLFxyXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAnTGluZSBoZWlnaHQnLFxyXG4gICAgICAgICAgICBwYXJhZ3JhcGhTdHlsZTogJ1BhcmFncmFwaCBzdHlsZScsXHJcbiAgICAgICAgICAgIHRleHRTdHlsZTogJ1RleHQgc3R5bGUnLFxyXG4gICAgICAgICAgICBpbWFnZUdhbGxlcnk6ICdJbWFnZSBnYWxsZXJ5JyxcclxuICAgICAgICAgICAgZGlyX2x0cjogJ0xlZnQgdG8gcmlnaHQnLFxyXG4gICAgICAgICAgICBkaXJfcnRsOiAnUmlnaHQgdG8gbGVmdCcsXHJcbiAgICAgICAgICAgIG1lbnRpb246ICdNZW50aW9uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlhbG9nQm94OiB7XHJcbiAgICAgICAgICAgIGxpbmtCb3g6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJ0IExpbmsnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnVVJMIHRvIGxpbmsnLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJ1RleHQgdG8gZGlzcGxheScsXHJcbiAgICAgICAgICAgICAgICBuZXdXaW5kb3dDaGVjazogJ09wZW4gaW4gbmV3IHdpbmRvdycsXHJcbiAgICAgICAgICAgICAgICBkb3dubG9hZExpbmtDaGVjazogJ0Rvd25sb2FkIGxpbmsnLFxyXG4gICAgICAgICAgICAgICAgYm9va21hcms6ICdCb29rbWFyaydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWF0aEJveDoge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdNYXRoJyxcclxuICAgICAgICAgICAgICAgIGlucHV0TGFiZWw6ICdNYXRoZW1hdGljYWwgTm90YXRpb24nLFxyXG4gICAgICAgICAgICAgICAgZm9udFNpemVMYWJlbDogJ0ZvbnQgU2l6ZScsXHJcbiAgICAgICAgICAgICAgICBwcmV2aWV3TGFiZWw6ICdQcmV2aWV3J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbWFnZUJveDoge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdJbnNlcnQgaW1hZ2UnLFxyXG4gICAgICAgICAgICAgICAgZmlsZTogJ1NlbGVjdCBmcm9tIGZpbGVzJyxcclxuICAgICAgICAgICAgICAgIHVybDogJ0ltYWdlIFVSTCcsXHJcbiAgICAgICAgICAgICAgICBhbHRUZXh0OiAnQWx0ZXJuYXRpdmUgdGV4dCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdmlkZW9Cb3g6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJ0IFZpZGVvJyxcclxuICAgICAgICAgICAgICAgIGZpbGU6ICdTZWxlY3QgZnJvbSBmaWxlcycsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICdNZWRpYSBlbWJlZCBVUkwsIFlvdVR1YmUvVmltZW8nXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGF1ZGlvQm94OiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0luc2VydCBBdWRpbycsXHJcbiAgICAgICAgICAgICAgICBmaWxlOiAnU2VsZWN0IGZyb20gZmlsZXMnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnQXVkaW8gVVJMJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBicm93c2VyOiB7XHJcbiAgICAgICAgICAgICAgICB0YWdzOiAnVGFncycsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2g6ICdTZWFyY2gnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjYXB0aW9uOiAnSW5zZXJ0IGRlc2NyaXB0aW9uJyxcclxuICAgICAgICAgICAgY2xvc2U6ICdDbG9zZScsXHJcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbjogJ1N1Ym1pdCcsXHJcbiAgICAgICAgICAgIHJldmVydEJ1dHRvbjogJ1JldmVydCcsXHJcbiAgICAgICAgICAgIHByb3BvcnRpb246ICdDb25zdHJhaW4gcHJvcG9ydGlvbnMnLFxyXG4gICAgICAgICAgICBiYXNpYzogJ0Jhc2ljJyxcclxuICAgICAgICAgICAgbGVmdDogJ0xlZnQnLFxyXG4gICAgICAgICAgICByaWdodDogJ1JpZ2h0JyxcclxuICAgICAgICAgICAgY2VudGVyOiAnQ2VudGVyJyxcclxuICAgICAgICAgICAgd2lkdGg6ICdXaWR0aCcsXHJcbiAgICAgICAgICAgIGhlaWdodDogJ0hlaWdodCcsXHJcbiAgICAgICAgICAgIHNpemU6ICdTaXplJyxcclxuICAgICAgICAgICAgcmF0aW86ICdSYXRpbydcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IHtcclxuICAgICAgICAgICAgZWRpdDogJ0VkaXQnLFxyXG4gICAgICAgICAgICB1bmxpbms6ICdVbmxpbmsnLFxyXG4gICAgICAgICAgICByZW1vdmU6ICdSZW1vdmUnLFxyXG4gICAgICAgICAgICBpbnNlcnRSb3dBYm92ZTogJ0luc2VydCByb3cgYWJvdmUnLFxyXG4gICAgICAgICAgICBpbnNlcnRSb3dCZWxvdzogJ0luc2VydCByb3cgYmVsb3cnLFxyXG4gICAgICAgICAgICBkZWxldGVSb3c6ICdEZWxldGUgcm93JyxcclxuICAgICAgICAgICAgaW5zZXJ0Q29sdW1uQmVmb3JlOiAnSW5zZXJ0IGNvbHVtbiBiZWZvcmUnLFxyXG4gICAgICAgICAgICBpbnNlcnRDb2x1bW5BZnRlcjogJ0luc2VydCBjb2x1bW4gYWZ0ZXInLFxyXG4gICAgICAgICAgICBkZWxldGVDb2x1bW46ICdEZWxldGUgY29sdW1uJyxcclxuICAgICAgICAgICAgZml4ZWRDb2x1bW5XaWR0aDogJ0ZpeGVkIGNvbHVtbiB3aWR0aCcsXHJcbiAgICAgICAgICAgIHJlc2l6ZTEwMDogJ1Jlc2l6ZSAxMDAlJyxcclxuICAgICAgICAgICAgcmVzaXplNzU6ICdSZXNpemUgNzUlJyxcclxuICAgICAgICAgICAgcmVzaXplNTA6ICdSZXNpemUgNTAlJyxcclxuICAgICAgICAgICAgcmVzaXplMjU6ICdSZXNpemUgMjUlJyxcclxuICAgICAgICAgICAgYXV0b1NpemU6ICdBdXRvIHNpemUnLFxyXG4gICAgICAgICAgICBtaXJyb3JIb3Jpem9udGFsOiAnTWlycm9yLCBIb3Jpem9udGFsJyxcclxuICAgICAgICAgICAgbWlycm9yVmVydGljYWw6ICdNaXJyb3IsIFZlcnRpY2FsJyxcclxuICAgICAgICAgICAgcm90YXRlTGVmdDogJ1JvdGF0ZSBsZWZ0JyxcclxuICAgICAgICAgICAgcm90YXRlUmlnaHQ6ICdSb3RhdGUgcmlnaHQnLFxyXG4gICAgICAgICAgICBtYXhTaXplOiAnTWF4IHNpemUnLFxyXG4gICAgICAgICAgICBtaW5TaXplOiAnTWluIHNpemUnLFxyXG4gICAgICAgICAgICB0YWJsZUhlYWRlcjogJ1RhYmxlIGhlYWRlcicsXHJcbiAgICAgICAgICAgIG1lcmdlQ2VsbHM6ICdNZXJnZSBjZWxscycsXHJcbiAgICAgICAgICAgIHNwbGl0Q2VsbHM6ICdTcGxpdCBDZWxscycsXHJcbiAgICAgICAgICAgIEhvcml6b250YWxTcGxpdDogJ0hvcml6b250YWwgc3BsaXQnLFxyXG4gICAgICAgICAgICBWZXJ0aWNhbFNwbGl0OiAnVmVydGljYWwgc3BsaXQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZW51OiB7XHJcbiAgICAgICAgICAgIHNwYWNlZDogJ1NwYWNlZCcsXHJcbiAgICAgICAgICAgIGJvcmRlcmVkOiAnQm9yZGVyZWQnLFxyXG4gICAgICAgICAgICBuZW9uOiAnTmVvbicsXHJcbiAgICAgICAgICAgIHRyYW5zbHVjZW50OiAnVHJhbnNsdWNlbnQnLFxyXG4gICAgICAgICAgICBzaGFkb3c6ICdTaGFkb3cnLFxyXG4gICAgICAgICAgICBjb2RlOiAnQ29kZSdcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0eXBlb2Ygbm9HbG9iYWwgPT09IHR5cGVvZiB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5TVU5FRElUT1JfTEFORykge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnU1VORURJVE9SX0xBTkcnLCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1VORURJVE9SX0xBTkcsICdlbicsIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWU6IGxhbmdcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbGFuZztcclxufSkpOyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTggSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnY29sb3JQaWNrZXInLFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICovXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0LmNvbG9yUGlja2VyID0ge1xyXG4gICAgICAgICAgICBjb2xvckxpc3RIVE1MOiAnJyxcclxuICAgICAgICAgICAgX2NvbG9ySW5wdXQ6ICcnLFxyXG4gICAgICAgICAgICBfZGVmYXVsdENvbG9yOiAnIzAwMCcsXHJcbiAgICAgICAgICAgIF9zdHlsZVByb3BlcnR5OiAnY29sb3InLFxyXG4gICAgICAgICAgICBfY3VycmVudENvbG9yOiAnJyxcclxuICAgICAgICAgICAgX2NvbG9yTGlzdDogW11cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBjb250ZXh0LmNvbG9yUGlja2VyLmNvbG9yTGlzdEhUTUwgPSB0aGlzLmNyZWF0ZUNvbG9yTGlzdChjb3JlLCB0aGlzLl9tYWtlQ29sb3JMaXN0KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIGNvbG9yIGxpc3RcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWFrZUNvbG9yIHRoaXMuX21ha2VDb2xvckxpc3RcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IEhUTUwgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUNvbG9yTGlzdDogZnVuY3Rpb24gKGNvcmUsIG1ha2VDb2xvcikge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yTGlzdCA9ICFvcHRpb24uY29sb3JMaXN0IHx8IG9wdGlvbi5jb2xvckxpc3QubGVuZ3RoID09PSAwID9cclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgJyNmZjAwMDAnLCAnI2ZmNWUwMCcsICcjZmZlNDAwJywgJyNhYmYyMDAnLCAnIzAwZDhmZicsICcjMDA1NWZmJywgJyM2NjAwZmYnLCAnI2ZmMDBkZCcsICcjMDAwMDAwJyxcclxuICAgICAgICAgICAgICAgICcjZmZkOGQ4JywgJyNmYWUwZDQnLCAnI2ZhZjRjMCcsICcjZTRmN2JhJywgJyNkNGY0ZmEnLCAnI2Q5ZTVmZicsICcjZThkOWZmJywgJyNmZmQ5ZmEnLCAnI2YxZjFmMScsXHJcbiAgICAgICAgICAgICAgICAnI2ZmYTdhNycsICcjZmZjMTllJywgJyNmYWVkN2QnLCAnI2NlZjI3OScsICcjYjJlYmY0JywgJyNiMmNjZmYnLCAnI2QxYjJmZicsICcjZmZiMmY1JywgJyNiZGJkYmQnLFxyXG4gICAgICAgICAgICAgICAgJyNmMTVmNWYnLCAnI2YyOTY2MScsICcjZTVkODVjJywgJyNiY2U1NWMnLCAnIzVjZDFlNScsICcjNjY5OWZmJywgJyNhMzY2ZmYnLCAnI2YyNjFkZicsICcjOGM4YzhjJyxcclxuICAgICAgICAgICAgICAgICcjOTgwMDAwJywgJyM5OTM4MDAnLCAnIzk5OGEwMCcsICcjNmI5OTAwJywgJyMwMDgyOTknLCAnIzAwMzM5OScsICcjM2QwMDk5JywgJyM5OTAwODUnLCAnIzM1MzUzNScsXHJcbiAgICAgICAgICAgICAgICAnIzY3MDAwMCcsICcjNjYyNTAwJywgJyM2NjVjMDAnLCAnIzQ3NjYwMCcsICcjMDA1NzY2JywgJyMwMDIyNjYnLCAnIzI5MDA2NicsICcjNjYwMDU4JywgJyMyMjIyMjInXHJcbiAgICAgICAgICAgIF0gOiBvcHRpb24uY29sb3JMaXN0O1xyXG5cclxuICAgICAgICBsZXQgY29sb3JBcnIgPSBbXTtcclxuICAgICAgICBsZXQgbGlzdCA9ICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1pbm5lclwiPic7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjb2xvckxpc3QubGVuZ3RoLCBjb2xvcjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIGlmICghY29sb3IpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQXJyLnB1c2goY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgbGVuIC0gMSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sb3JBcnIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgKz0gJzxkaXYgY2xhc3M9XCJzZS1zZWxlY3Rvci1jb2xvclwiPicgKyBtYWtlQ29sb3IoY29sb3JBcnIpICsgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdCArPSAnPGRpdiBjbGFzcz1cInNlLXNlbGVjdG9yLWNvbG9yXCI+JyArIG1ha2VDb2xvcihjb2xvcikgKyAnPC9kaXY+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsaXN0ICs9ICcnICtcclxuICAgICAgICAgICAgJzxmb3JtIGNsYXNzPVwic2UtZm9ybS1ncm91cFwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIG1heGxlbmd0aD1cIjlcIiBjbGFzcz1cIl9zZV9jb2xvcl9waWNrZXJfaW5wdXQgc2UtY29sb3ItaW5wdXRcIi8+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJzZS1idG4tcHJpbWFyeSBfc2VfY29sb3JfcGlja2VyX3N1Ym1pdFwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmljb25zLmNoZWNrZWQgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuIF9zZV9jb2xvcl9waWNrZXJfcmVtb3ZlXCIgdGl0bGU9XCInICsgbGFuZy50b29sYmFyLnJlbW92ZUZvcm1hdCArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcudG9vbGJhci5yZW1vdmVGb3JtYXQgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5lcmFzZSArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICc8L2Zvcm0+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBieSB0aGlzLmNyZWF0ZUNvbG9yTGlzdFxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29sb3JMaXN0IENvbG9yIGxpc3RcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9tYWtlQ29sb3JMaXN0OiBmdW5jdGlvbiAoY29sb3JMaXN0KSB7XHJcbiAgICAgICAgbGV0IGxpc3QgPSAnJztcclxuXHJcbiAgICAgICAgbGlzdCArPSAnPHVsIGNsYXNzPVwic2UtY29sb3ItcGFsbGV0XCI+JztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY29sb3JMaXN0Lmxlbmd0aCwgY29sb3I7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBjb2xvciA9IGNvbG9yTGlzdFtpXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGxpc3QgKz0gJzxsaT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXZhbHVlPVwiJyArIGNvbG9yICsgJ1wiIHRpdGxlPVwiJyArIGNvbG9yICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgY29sb3IgKyAnXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicgKyBjb2xvciArICc7XCI+PC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2xpPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdCArPSAnPC91bD4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIERpc3BsYXlzIG9yIHJlc2V0cyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGNvbG9yIGF0IGNvbG9yIGxpc3QuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgQ3VycmVudCBTZWxlY3RlZCBub2RlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBjb2xvciBDb2xvciB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAobm9kZSwgY29sb3IpIHtcclxuICAgICAgICBjb25zdCBjb2xvclBpY2tlciA9IHRoaXMucGx1Z2lucy5jb2xvclBpY2tlcjtcclxuICAgICAgICBsZXQgZmlsbENvbG9yID0gY29sb3IgPyBjb2xvciA6IGNvbG9yUGlja2VyLmdldENvbG9ySW5Ob2RlLmNhbGwodGhpcywgbm9kZSkgfHwgdGhpcy5jb250ZXh0LmNvbG9yUGlja2VyLl9kZWZhdWx0Q29sb3I7XHJcbiAgICAgICAgZmlsbENvbG9yID0gY29sb3JQaWNrZXIuaXNIZXhDb2xvcihmaWxsQ29sb3IpID8gZmlsbENvbG9yIDogY29sb3JQaWNrZXIucmdiMmhleChmaWxsQ29sb3IpIHx8IGZpbGxDb2xvcjtcclxuXHJcbiAgICAgICAgY29uc3QgY29sb3JMaXN0ID0gdGhpcy5jb250ZXh0LmNvbG9yUGlja2VyLl9jb2xvckxpc3Q7XHJcbiAgICAgICAgaWYgKGNvbG9yTGlzdCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY29sb3JMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsbENvbG9yLnRvTG93ZXJDYXNlKCkgPT09IGNvbG9yTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNvbG9yTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY29sb3JMaXN0W2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbG9yUGlja2VyLnNldElucHV0VGV4dC5jYWxsKHRoaXMsIGNvbG9yUGlja2VyLmNvbG9yTmFtZTJoZXguY2FsbCh0aGlzLCBmaWxsQ29sb3IpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU3RvcmUgY29sb3IgdmFsdWVzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaGV4Q29sb3JTdHIgSGF4IGNvbG9yIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldEN1cnJlbnRDb2xvcjogZnVuY3Rpb24gKGhleENvbG9yU3RyKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmNvbG9yUGlja2VyLl9jdXJyZW50Q29sb3IgPSBoZXhDb2xvclN0cjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY29sb3JQaWNrZXIuX2NvbG9ySW5wdXQuc3R5bGUuYm9yZGVyQ29sb3IgPSBoZXhDb2xvclN0cjtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU2V0IGNvbG9yIGF0IGlucHV0IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBoZXhDb2xvclN0ciBIYXggY29sb3IgdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0SW5wdXRUZXh0OiBmdW5jdGlvbiAoaGV4Q29sb3JTdHIpIHtcclxuICAgICAgICBoZXhDb2xvclN0ciA9IC9eIy8udGVzdChoZXhDb2xvclN0cikgPyBoZXhDb2xvclN0ciA6ICcjJyArIGhleENvbG9yU3RyO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5jb2xvclBpY2tlci5fY29sb3JJbnB1dC52YWx1ZSA9IGhleENvbG9yU3RyO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5jb2xvclBpY2tlci5zZXRDdXJyZW50Q29sb3IuY2FsbCh0aGlzLCBoZXhDb2xvclN0cik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldHMgY29sb3IgdmFsdWUgYXQgY29sb3IgcHJvcGVydHkgb2Ygbm9kZVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIFNlbGVjdGVkIG5vZGUgXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRDb2xvckluTm9kZTogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICBsZXQgZmluZENvbG9yID0gJyc7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVQcm9wZXJ0eSA9IHRoaXMuY29udGV4dC5jb2xvclBpY2tlci5fc3R5bGVQcm9wZXJ0eTtcclxuXHJcbiAgICAgICAgd2hpbGUgKG5vZGUgJiYgIXRoaXMudXRpbC5pc1d5c2l3eWdEaXYobm9kZSkgJiYgZmluZENvbG9yLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLnN0eWxlW3N0eWxlUHJvcGVydHldKSBmaW5kQ29sb3IgPSBub2RlLnN0eWxlW3N0eWxlUHJvcGVydHldO1xyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbmRDb2xvcjtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gdG8gY2hlY2sgaGV4IGZvcm1hdCBjb2xvclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0ciBDb2xvciB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBpc0hleENvbG9yOiBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIC9eI1swLTlhLWZdezN9KD86WzAtOWEtZl17M30pPyQvaS50ZXN0KHN0cik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRvIGNvbnZlcnQgaGV4IGZvcm1hdCB0byBhIHJnYiBjb2xvclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHJnYiBSR0IgY29sb3IgZm9ybWF0XHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZ2IyaGV4OiBmdW5jdGlvbiAocmdiKSB7XHJcbiAgICAgICAgY29uc3QgcmdiTWF0Y2ggPSByZ2IubWF0Y2goL15yZ2JhP1tcXHMrXT9cXChbXFxzK10/KFxcZCspW1xccytdPyxbXFxzK10/KFxcZCspW1xccytdPyxbXFxzK10/KFxcZCspW1xccytdPy9pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChyZ2JNYXRjaCAmJiByZ2JNYXRjaC5sZW5ndGggPT09IDQpID8gXCIjXCIgK1xyXG4gICAgICAgICAgICAoXCIwXCIgKyBwYXJzZUludChyZ2JNYXRjaFsxXSwxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgK1xyXG4gICAgICAgICAgICAoXCIwXCIgKyBwYXJzZUludChyZ2JNYXRjaFsyXSwxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgK1xyXG4gICAgICAgICAgICAoXCIwXCIgKyBwYXJzZUludChyZ2JNYXRjaFszXSwxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgOiAnJztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydHMgY29sb3IgdmFsdWVzIG9mIG90aGVyIGZvcm1hdHMgdG8gaGV4IGNvbG9yIHZhbHVlcyBhbmQgcmV0dXJucy5cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvck5hbWUgQ29sb3IgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbG9yTmFtZTJoZXg6IGZ1bmN0aW9uIChjb2xvck5hbWUpIHtcclxuICAgICAgICBpZiAoL14jLy50ZXN0KGNvbG9yTmFtZSkpIHJldHVybiBjb2xvck5hbWU7XHJcbiAgICAgICAgdmFyIHRlbXAgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGVtcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRlbXAuc3R5bGUuY29sb3IgPSBjb2xvck5hbWU7XHJcbiAgICAgICAgdmFyIGNvbG9ycyA9IHRoaXMuX3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl9kLmJvZHkuYXBwZW5kQ2hpbGQodGVtcCkpLmNvbG9yLm1hdGNoKC9cXGQrL2cpLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gcGFyc2VJbnQoYSwxMCk7IH0pO1xyXG4gICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKHRlbXApO1xyXG4gICAgICAgIHJldHVybiAoY29sb3JzLmxlbmd0aCA+PSAzKSA/ICcjJyArICgoKDEgPDwgMjQpICsgKGNvbG9yc1swXSA8PCAxNikgKyAoY29sb3JzWzFdIDw8IDgpICsgY29sb3JzWzJdKS50b1N0cmluZygxNikuc3Vic3RyKDEpKSA6IGZhbHNlO1xyXG4gICAgfVxyXG59OyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgY29sb3JQaWNrZXIgZnJvbSAnLi4vbW9kdWxlcy9fY29sb3JQaWNrZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2ZvbnRDb2xvcicsXHJcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29yZS5hZGRNb2R1bGUoW2NvbG9yUGlja2VyXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5mb250Q29sb3IgPSB7XHJcbiAgICAgICAgICAgIHByZXZpZXdFbDogbnVsbCxcclxuICAgICAgICAgICAgY29sb3JJbnB1dDogbnVsbCxcclxuICAgICAgICAgICAgY29sb3JMaXN0OiBudWxsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcbiAgICAgICAgY29udGV4dC5mb250Q29sb3IuY29sb3JJbnB1dCA9IGxpc3REaXYucXVlcnlTZWxlY3RvcignLl9zZV9jb2xvcl9waWNrZXJfaW5wdXQnKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBjb250ZXh0LmZvbnRDb2xvci5jb2xvcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5vbkNoYW5nZUlucHV0LmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGxpc3REaXYucXVlcnlTZWxlY3RvcignLl9zZV9jb2xvcl9waWNrZXJfc3VibWl0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnN1Ym1pdC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJy5fc2VfY29sb3JfcGlja2VyX3JlbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5yZW1vdmUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgbGlzdERpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGNvbnRleHQuZm9udENvbG9yLmNvbG9yTGlzdCA9IGxpc3REaXYucXVlcnlTZWxlY3RvckFsbCgnbGkgYnV0dG9uJyk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgdGFyZ2V0IGJ1dHRvbiBtZW51ICovXHJcbiAgICAgICAgY29yZS5pbml0TWVudVRhcmdldCh0aGlzLm5hbWUsIHRhcmdldEVsZW1lbnQsIGxpc3REaXYpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgbGlzdERpdiA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgY29sb3JBcmVhID0gY29yZS5jb250ZXh0LmNvbG9yUGlja2VyLmNvbG9yTGlzdEhUTUw7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2Utc3VibWVudSBzZS1saXN0LWxheWVyJztcclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGNvbG9yQXJlYTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBzdWJtZW51XHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFBpY2tlciA9IHRoaXMuY29udGV4dC5jb2xvclBpY2tlcjtcclxuICAgICAgICBjb25zdCBjb250ZXh0Rm9udENvbG9yID0gdGhpcy5jb250ZXh0LmZvbnRDb2xvcjtcclxuXHJcbiAgICAgICAgY29udGV4dFBpY2tlci5fY29sb3JJbnB1dCA9IGNvbnRleHRGb250Q29sb3IuY29sb3JJbnB1dDtcclxuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMud3dDb21wdXRlZFN0eWxlLmNvbG9yO1xyXG4gICAgICAgIGNvbnRleHRQaWNrZXIuX2RlZmF1bHRDb2xvciA9IGNvbG9yID8gdGhpcy5wbHVnaW5zLmNvbG9yUGlja2VyLmlzSGV4Q29sb3IoY29sb3IpID8gY29sb3IgOiB0aGlzLnBsdWdpbnMuY29sb3JQaWNrZXIucmdiMmhleChjb2xvcikgOiBcIiMzMzMzMzNcIjtcclxuICAgICAgICBjb250ZXh0UGlja2VyLl9zdHlsZVByb3BlcnR5ID0gJ2NvbG9yJztcclxuICAgICAgICBjb250ZXh0UGlja2VyLl9jb2xvckxpc3QgPSBjb250ZXh0Rm9udENvbG9yLmNvbG9yTGlzdDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnBsdWdpbnMuY29sb3JQaWNrZXIuaW5pdC5jYWxsKHRoaXMsIHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLCBudWxsKTtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIF9jb2xvclBpY2tlclxyXG4gICAgICovXHJcbiAgICBvbkNoYW5nZUlucHV0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5jb2xvclBpY2tlci5zZXRDdXJyZW50Q29sb3IuY2FsbCh0aGlzLCBlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN1Ym1pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5mb250Q29sb3IuYXBwbHlDb2xvci5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5jb2xvclBpY2tlci5fY3VycmVudENvbG9yKTtcclxuICAgIH0sXHJcblxyXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMuZm9udENvbG9yLmFwcGx5Q29sb3IuY2FsbCh0aGlzLCBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubm9kZUNoYW5nZShudWxsLCBbJ2NvbG9yJ10sIFsnc3BhbiddLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXBwbHlDb2xvcjogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICAgICAgaWYgKCFjb2xvcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdOb2RlID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICBuZXdOb2RlLnN0eWxlLmNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG5ld05vZGUsIFsnY29sb3InXSwgbnVsbCwgbnVsbCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IGNvbG9yUGlja2VyIGZyb20gJy4uL21vZHVsZXMvX2NvbG9yUGlja2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdoaWxpdGVDb2xvcicsXHJcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29yZS5hZGRNb2R1bGUoW2NvbG9yUGlja2VyXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5oaWxpdGVDb2xvciA9IHtcclxuICAgICAgICAgICAgcHJldmlld0VsOiBudWxsLFxyXG4gICAgICAgICAgICBjb2xvcklucHV0OiBudWxsLFxyXG4gICAgICAgICAgICBjb2xvckxpc3Q6IG51bGxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuICAgICAgICBjb250ZXh0LmhpbGl0ZUNvbG9yLmNvbG9ySW5wdXQgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJy5fc2VfY29sb3JfcGlja2VyX2lucHV0Jyk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgY29udGV4dC5oaWxpdGVDb2xvci5jb2xvcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5vbkNoYW5nZUlucHV0LmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGxpc3REaXYucXVlcnlTZWxlY3RvcignLl9zZV9jb2xvcl9waWNrZXJfc3VibWl0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnN1Ym1pdC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJy5fc2VfY29sb3JfcGlja2VyX3JlbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5yZW1vdmUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgbGlzdERpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICBjb250ZXh0LmhpbGl0ZUNvbG9yLmNvbG9yTGlzdCA9IGxpc3REaXYucXVlcnlTZWxlY3RvckFsbCgnbGkgYnV0dG9uJyk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgdGFyZ2V0IGJ1dHRvbiBtZW51ICovXHJcbiAgICAgICAgY29yZS5pbml0TWVudVRhcmdldCh0aGlzLm5hbWUsIHRhcmdldEVsZW1lbnQsIGxpc3REaXYpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgbGlzdERpdiA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgY29sb3JBcmVhID0gY29yZS5jb250ZXh0LmNvbG9yUGlja2VyLmNvbG9yTGlzdEhUTUw7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2Utc3VibWVudSBzZS1saXN0LWxheWVyJztcclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGNvbG9yQXJlYTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBzdWJtZW51XHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFBpY2tlciA9IHRoaXMuY29udGV4dC5jb2xvclBpY2tlcjtcclxuICAgICAgICBjb25zdCBjb250ZXh0SGlsaXRlQ29sb3IgPSB0aGlzLmNvbnRleHQuaGlsaXRlQ29sb3I7XHJcblxyXG4gICAgICAgIGNvbnRleHRQaWNrZXIuX2NvbG9ySW5wdXQgPSBjb250ZXh0SGlsaXRlQ29sb3IuY29sb3JJbnB1dDtcclxuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMud3dDb21wdXRlZFN0eWxlLmJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICBjb250ZXh0UGlja2VyLl9kZWZhdWx0Q29sb3IgPSBjb2xvciA/IHRoaXMucGx1Z2lucy5jb2xvclBpY2tlci5pc0hleENvbG9yKGNvbG9yKSA/IGNvbG9yIDogdGhpcy5wbHVnaW5zLmNvbG9yUGlja2VyLnJnYjJoZXgoY29sb3IpIDogXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgY29udGV4dFBpY2tlci5fc3R5bGVQcm9wZXJ0eSA9ICdiYWNrZ3JvdW5kQ29sb3InO1xyXG4gICAgICAgIGNvbnRleHRQaWNrZXIuX2NvbG9yTGlzdCA9IGNvbnRleHRIaWxpdGVDb2xvci5jb2xvckxpc3Q7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmNvbG9yUGlja2VyLmluaXQuY2FsbCh0aGlzLCB0aGlzLmdldFNlbGVjdGlvbk5vZGUoKSwgbnVsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBfY29sb3JQaWNrZXJcclxuICAgICAqL1xyXG4gICAgb25DaGFuZ2VJbnB1dDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuY29sb3JQaWNrZXIuc2V0Q3VycmVudENvbG9yLmNhbGwodGhpcywgZS50YXJnZXQudmFsdWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzdWJtaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuaGlsaXRlQ29sb3IuYXBwbHlDb2xvci5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5jb2xvclBpY2tlci5fY3VycmVudENvbG9yKTtcclxuICAgIH0sXHJcblxyXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMuaGlsaXRlQ29sb3IuYXBwbHlDb2xvci5jYWxsKHRoaXMsIGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKTtcclxuICAgIH0sXHJcblxyXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG51bGwsIFsnYmFja2dyb3VuZC1jb2xvciddLCBbJ3NwYW4nXSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFwcGx5Q29sb3I6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgICAgIGlmICghY29sb3IpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBuZXdOb2RlID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICBuZXdOb2RlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMubm9kZUNoYW5nZShuZXdOb2RlLCBbJ2JhY2tncm91bmQtY29sb3InXSwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAndGVtcGxhdGUnLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC50ZW1wbGF0ZSA9IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogLTFcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgdGVtcGxhdGVEaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgdGVtcGxhdGVEaXYucXVlcnlTZWxlY3RvcigndWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCB0ZW1wbGF0ZURpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICB0ZW1wbGF0ZURpdiA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGVMaXN0ID0gY29yZS5vcHRpb25zLnRlbXBsYXRlcztcclxuICAgICAgICBpZiAoIXRlbXBsYXRlTGlzdCB8fCB0ZW1wbGF0ZUxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLnBsdWdpbnMudGVtcGxhdGUuZmFpbF0gVG8gdXNlIHRoZSBcInRlbXBsYXRlXCIgcGx1Z2luLCBwbGVhc2UgZGVmaW5lIHRoZSBcInRlbXBsYXRlc1wiIG9wdGlvbi4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2UtbGlzdC1sYXllcic7XHJcblxyXG4gICAgICAgIGxldCBsaXN0ID0gJzxkaXYgY2xhc3M9XCJzZS1zdWJtZW51IHNlLWxpc3QtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGVtcGxhdGVMaXN0Lmxlbmd0aCwgdDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHQgPSB0ZW1wbGF0ZUxpc3RbaV07XHJcbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0XCIgZGF0YS12YWx1ZT1cIicgKyBpICsgJ1wiIHRpdGxlPVwiJyArIHQubmFtZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIHQubmFtZSArICdcIj4nICsgdC5uYW1lICsgJzwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdCArPSAnPC91bD48L2Rpdj4nO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICBwaWNrdXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKCEvXkJVVFRPTiQvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQudGVtcGxhdGUuc2VsZWN0ZWRJbmRleCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpICogMTtcclxuICAgICAgICBjb25zdCB0ZW1wID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlc1t0aGlzLmNvbnRleHQudGVtcGxhdGUuc2VsZWN0ZWRJbmRleF07XHJcblxyXG4gICAgICAgIGlmICh0ZW1wLmh0bWwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRDb250ZW50cyh0ZW1wLmh0bWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi50ZW1wbGF0ZS5mYWlsXSBjYXVzZSA6IFwidGVtcGxhdGVzW2ldLmh0bWwgbm90IGZvdW5kXCInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICB9XHJcbn07IiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxOCBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdzZWxlY3RNZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb3JlLmNvbnRleHQuc2VsZWN0TWVudSA9IHtcclxuICAgICAgICAgICAgY2FsbGVyOiB7fSxcclxuICAgICAgICAgICAgY2FsbGVyQ29udGV4dDogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIHNldEZvcm06IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJzZS1zZWxlY3QtbGlzdFwiPjwvZGl2Pic7XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZUxpc3Q6IGZ1bmN0aW9uIChsaXN0Q29udGV4dCwgaXRlbXMsIGh0bWwpIHtcclxuICAgICAgICBsaXN0Q29udGV4dC5mb3JtLmlubmVySFRNTCA9ICc8dWw+JyArIGh0bWwgKyAnPC91bD4nO1xyXG4gICAgICAgIGxpc3RDb250ZXh0Lml0ZW1zID0gaXRlbXM7XHJcbiAgICAgICAgbGlzdENvbnRleHQubWVudXMgPSBsaXN0Q29udGV4dC5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRFdmVudDogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIGZvcm1zKSB7XHJcbiAgICAgICAgY29uc3QgZm9ybSA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5zZS1zZWxlY3QtbGlzdCcpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJbcGx1Z2luTmFtZV0gPSB7XHJcbiAgICAgICAgICAgIGZvcm06IGZvcm0sXHJcbiAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgbWVudXM6IFtdLFxyXG4gICAgICAgICAgICBpbmRleDogLTEsXHJcbiAgICAgICAgICAgIGl0ZW06IG51bGwsXHJcbiAgICAgICAgICAgIGNsaWNrTWV0aG9kOiBudWxsLFxyXG4gICAgICAgICAgICBjYWxsZXJOYW1lOiBwbHVnaW5OYW1lXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5vbk1vdXNlZG93bl9saXN0KTtcclxuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51Lm9uTW91c2VNb3ZlX2xpc3QuYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51Lm9uQ2xpY2tfbGlzdC5iaW5kKHRoaXMsIGNvbnRleHQpKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25Nb3VzZWRvd25fbGlzdDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25Nb3VzZU1vdmVfbGlzdDogZnVuY3Rpb24gKGNvbnRleHQsIGUpIHtcclxuICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dC5mb3JtLCAnX19zZV9zZWxlY3QtbWVudS1tb3VzZS1tb3ZlJyk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcclxuICAgICAgICBpZiAoIWluZGV4KSByZXR1cm47XHJcbiAgICAgICAgY29udGV4dC5pbmRleCA9IGluZGV4ICogMTtcclxuICAgIH0sXHJcblxyXG4gICAgb25DbGlja19saXN0OiBmdW5jdGlvbiAoY29udGV4dCwgZSkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XHJcbiAgICAgICAgaWYgKCFpbmRleCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnRleHQuY2xpY2tNZXRob2QuY2FsbCh0aGlzLCBjb250ZXh0Lml0ZW1zW2luZGV4XSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG1vdmVJdGVtOiBmdW5jdGlvbiAobGlzdENvbnRleHQsIG51bSkge1xyXG4gICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhsaXN0Q29udGV4dC5mb3JtLCAnX19zZV9zZWxlY3QtbWVudS1tb3VzZS1tb3ZlJyk7XHJcbiAgICAgICAgbnVtID0gbGlzdENvbnRleHQuaW5kZXggKyBudW07XHJcbiAgICAgICAgY29uc3QgbWVudXMgPSBsaXN0Q29udGV4dC5tZW51cztcclxuICAgICAgICBjb25zdCBsZW4gPSBtZW51cy5sZW5ndGg7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0SW5kZXggPSBsaXN0Q29udGV4dC5pbmRleCA9IG51bSA+PSBsZW4gPyAwIDogbnVtIDwgMCA/IGxlbiAtIDEgOiBudW07XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gc2VsZWN0SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhtZW51c1tpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKG1lbnVzW2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpc3RDb250ZXh0Lml0ZW0gPSBsaXN0Q29udGV4dC5pdGVtc1tzZWxlY3RJbmRleF07XHJcbiAgICB9LFxyXG5cclxuICAgIGdldEl0ZW06IGZ1bmN0aW9uIChsaXN0Q29udGV4dCwgaW5kZXgpIHtcclxuICAgICAgICBpbmRleCA9ICghaW5kZXggfHwgaW5kZXggPCAwKSA/IGxpc3RDb250ZXh0LmluZGV4IDogaW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIGxpc3RDb250ZXh0Lml0ZW1zW2luZGV4XTtcclxuICAgIH0sXHJcblxyXG4gICAgb246IGZ1bmN0aW9uIChjYWxsZXJOYW1lLCBjbGlja01ldGhvZCkge1xyXG4gICAgICAgIGNvbnN0IGxpc3RDb250ZXh0ID0gdGhpcy5jb250ZXh0LnNlbGVjdE1lbnUuY2FsbGVyW2NhbGxlck5hbWVdO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5zZWxlY3RNZW51LmNhbGxlckNvbnRleHQgPSBsaXN0Q29udGV4dDtcclxuICAgICAgICBsaXN0Q29udGV4dC5jbGlja01ldGhvZCA9IGNsaWNrTWV0aG9kO1xyXG4gICAgICAgIGxpc3RDb250ZXh0LmNhbGxlck5hbWUgPSBjYWxsZXJOYW1lO1xyXG4gICAgfSxcclxuXHJcbiAgICBvcGVuOiBmdW5jdGlvbiAobGlzdENvbnRleHQsIHBvc2l0aW9uSGFuZGxlcikge1xyXG4gICAgICAgIGNvbnN0IGZvcm0gPSBsaXN0Q29udGV4dC5mb3JtO1xyXG4gICAgICAgIGZvcm0uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgcG9zaXRpb25IYW5kbGVyKGZvcm0pO1xyXG4gICAgICAgIGZvcm0uc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgfSxcclxuXHJcbiAgICBjbG9zZTogZnVuY3Rpb24gKGxpc3RDb250ZXh0KSB7XHJcbiAgICAgICAgbGlzdENvbnRleHQuZm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIGxpc3RDb250ZXh0Lml0ZW1zID0gW107XHJcbiAgICAgICAgbGlzdENvbnRleHQubWVudXMgPSBbXTtcclxuICAgICAgICBsaXN0Q29udGV4dC5pbmRleCA9IC0xO1xyXG4gICAgICAgIGxpc3RDb250ZXh0Lml0ZW0gPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAobGlzdENvbnRleHQpIHtcclxuICAgICAgICBpZiAoIWxpc3RDb250ZXh0KSByZXR1cm47XHJcbiAgICAgICAgbGlzdENvbnRleHQuaXRlbXMgPSBbXTtcclxuICAgICAgICBsaXN0Q29udGV4dC5tZW51cyA9IFtdO1xyXG4gICAgICAgIGxpc3RDb250ZXh0LmluZGV4ID0gLTE7XHJcbiAgICAgICAgbGlzdENvbnRleHQuaXRlbSA9IG51bGw7XHJcbiAgICAgICAgbGlzdENvbnRleHQuY2FsbGVyTmFtZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5zZWxlY3RNZW51LmNhbGxlckNvbnRleHQgPSBudWxsO1xyXG4gICAgfVxyXG59OyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgc2VsZWN0TWVudSBmcm9tICcuL19zZWxlY3RNZW51JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdhbmNob3InLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvcmUuYWRkTW9kdWxlKFtzZWxlY3RNZW51XSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29yZS5jb250ZXh0LmFuY2hvciA9IHtcclxuICAgICAgICAgICAgY2FsbGVyOiB7fSxcclxuICAgICAgICAgICAgZm9ybXM6IHRoaXMuc2V0RGlhbG9nRm9ybShjb3JlKSxcclxuICAgICAgICAgICAgaG9zdDogKGNvcmUuX3cubG9jYXRpb24ub3JpZ2luICsgY29yZS5fdy5sb2NhdGlvbi5wYXRobmFtZSkucmVwbGFjZSgvXFwvJC8sICcnKSxcclxuICAgICAgICAgICAgY2FsbGVyQ29udGV4dDogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKiBkaWFsb2cgKi9cclxuICAgIHNldERpYWxvZ0Zvcm06IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCByZWxMaXN0ID0gY29yZS5vcHRpb25zLmxpbmtSZWw7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFJlbCA9IChjb3JlLm9wdGlvbnMubGlua1JlbERlZmF1bHQuZGVmYXVsdCB8fCAnJykuc3BsaXQoJyAnKTtcclxuICAgICAgICBjb25zdCBpY29ucyA9IGNvcmUuaWNvbnM7XHJcbiAgICAgICAgY29uc3QgZm9ybXMgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxldCBodG1sID0gJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctYm9keVwiPicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC5saW5rQm94LnVybCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybS1maWxlc1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZS1pbnB1dC1mb3JtIHNlLWlucHV0LXVybFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCInICsgKGNvcmUub3B0aW9ucy5wcm90b2NvbCB8fCAnJykgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWZpbGVzLWVkZ2UtYnV0dG9uIF9zZV9ib29rbWFya19idXR0b25cIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5saW5rQm94LmJvb2ttYXJrICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3gubGlua0JveC5ib29rbWFyayArICdcIj4nICsgaWNvbnMuYm9va21hcmsgKyAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5wbHVnaW5zLnNlbGVjdE1lbnUuc2V0Rm9ybSgpICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYW5jaG9yLXByZXZpZXctZm9ybVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXN2ZyBzZS1hbmNob3ItcHJldmlldy1pY29uIF9zZV9hbmNob3JfYm9va21hcmtfaWNvblwiPicgKyBpY29ucy5ib29rbWFyayArICc8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2Utc3ZnIHNlLWFuY2hvci1wcmV2aWV3LWljb24gX3NlX2FuY2hvcl9kb3dubG9hZF9pY29uXCI+JyArIGljb25zLmRvd25sb2FkICsgJzwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHByZSBjbGFzcz1cInNlLWxpbmstcHJldmlld1wiPjwvcHJlPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICc8bGFiZWw+JyArIGxhbmcuZGlhbG9nQm94LmxpbmtCb3gudGV4dCArICc8L2xhYmVsPjxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWZvcm0gX3NlX2FuY2hvcl90ZXh0XCIgdHlwZT1cInRleHRcIiAvPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm0tZm9vdGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tY2hlY2sgX3NlX2FuY2hvcl9jaGVja1wiIC8+Jm5ic3A7JyArIGxhbmcuZGlhbG9nQm94LmxpbmtCb3gubmV3V2luZG93Q2hlY2sgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1jaGVjayBfc2VfYW5jaG9yX2Rvd25sb2FkXCIgLz4mbmJzcDsnICsgbGFuZy5kaWFsb2dCb3gubGlua0JveC5kb3dubG9hZExpbmtDaGVjayArICc8L2xhYmVsPic7XHJcbiAgICAgICAgICAgIGlmIChyZWxMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJzZS1hbmNob3ItcmVsXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4gc2UtYnRuLXNlbGVjdCBzZS1hbmNob3ItcmVsLWJ0blwiPiZsdDtyZWwmZ3Q7PC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1hbmNob3ItcmVsLXdyYXBwZXJcIj48cHJlIGNsYXNzPVwic2UtbGluay1wcmV2aWV3IHNlLWFuY2hvci1yZWwtcHJldmlld1wiPjwvcHJlPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1sYXllclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljIHNlLWxpc3QtY2hlY2tlZFwiPic7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmVsTGlzdC5sZW5ndGgsIHJlbDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVsID0gcmVsTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCcgKyAoZGVmYXVsdFJlbC5pbmRleE9mKHJlbCkgPiAtMSA/ICcgc2UtY2hlY2tlZCcgOiAnJykgKyAnXCIgZGF0YS1jb21tYW5kPVwiJyArIHJlbCArICdcIiB0aXRsZT1cIicgKyByZWwgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyByZWwgKyAnXCI+PHNwYW4gY2xhc3M9XCJzZS1zdmdcIj4nICsgaWNvbnMuY2hlY2tlZCArICc8L3NwYW4+JyArIHJlbCArICc8L2J1dHRvbj48L2xpPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8L3VsPjwvZGl2PjwvZGl2PjwvZGl2Pic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgaHRtbCArPSAnPC9kaXY+PC9kaXY+JztcclxuXHJcbiAgICAgICAgZm9ybXMuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgICByZXR1cm4gZm9ybXM7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRFdmVudDogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIGZvcm1zKSB7XHJcbiAgICAgICAgY29uc3QgYW5jaG9yUGx1Z2luID0gdGhpcy5wbHVnaW5zLmFuY2hvcjtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0LmFuY2hvci5jYWxsZXJbcGx1Z2luTmFtZV0gPSB7XHJcbiAgICAgICAgICAgIG1vZGFsOiBmb3JtcyxcclxuICAgICAgICAgICAgdXJsSW5wdXQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxpbmtEZWZhdWx0UmVsOiB0aGlzLm9wdGlvbnMubGlua1JlbERlZmF1bHQsXHJcbiAgICAgICAgICAgIGRlZmF1bHRSZWw6IHRoaXMub3B0aW9ucy5saW5rUmVsRGVmYXVsdC5kZWZhdWx0IHx8ICcnLFxyXG4gICAgICAgICAgICBjdXJyZW50UmVsOiBbXSxcclxuICAgICAgICAgICAgbGlua0FuY2hvcjogbnVsbCxcclxuICAgICAgICAgICAgbGlua1ZhbHVlOiAnJyxcclxuICAgICAgICAgICAgX2NoYW5nZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNhbGxlck5hbWU6IHBsdWdpbk5hbWVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQubGlua0RlZmF1bHRSZWwuZGVmYXVsdCA9PT0gJ3N0cmluZycpIGNvbnRleHQubGlua0RlZmF1bHRSZWwuZGVmYXVsdCA9IGNvbnRleHQubGlua0RlZmF1bHRSZWwuZGVmYXVsdC50cmltKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmNoZWNrX25ld193aW5kb3cgPT09ICdzdHJpbmcnKSBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmNoZWNrX25ld193aW5kb3cgPSBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmNoZWNrX25ld193aW5kb3cudHJpbSgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5saW5rRGVmYXVsdFJlbC5jaGVja19ib29rbWFyayA9PT0gJ3N0cmluZycpIGNvbnRleHQubGlua0RlZmF1bHRSZWwuY2hlY2tfYm9va21hcmsgPSBjb250ZXh0LmxpbmtEZWZhdWx0UmVsLmNoZWNrX2Jvb2ttYXJrLnRyaW0oKTtcclxuXHJcbiAgICAgICAgY29udGV4dC51cmxJbnB1dCA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5zZS1pbnB1dC11cmwnKTtcclxuICAgICAgICBjb250ZXh0LmFuY2hvclRleHQgPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuX3NlX2FuY2hvcl90ZXh0Jyk7XHJcbiAgICAgICAgY29udGV4dC5uZXdXaW5kb3dDaGVjayA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfYW5jaG9yX2NoZWNrJyk7XHJcbiAgICAgICAgY29udGV4dC5kb3dubG9hZENoZWNrID0gZm9ybXMucXVlcnlTZWxlY3RvcignLl9zZV9hbmNob3JfZG93bmxvYWQnKTtcclxuICAgICAgICBjb250ZXh0LmRvd25sb2FkID0gZm9ybXMucXVlcnlTZWxlY3RvcignLl9zZV9hbmNob3JfZG93bmxvYWRfaWNvbicpO1xyXG4gICAgICAgIGNvbnRleHQucHJldmlldyA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5zZS1saW5rLXByZXZpZXcnKTtcclxuICAgICAgICBjb250ZXh0LmJvb2ttYXJrID0gZm9ybXMucXVlcnlTZWxlY3RvcignLl9zZV9hbmNob3JfYm9va21hcmtfaWNvbicpO1xyXG4gICAgICAgIGNvbnRleHQuYm9va21hcmtCdXR0b24gPSBmb3Jtcy5xdWVyeVNlbGVjdG9yKCcuX3NlX2Jvb2ttYXJrX2J1dHRvbicpO1xyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5pbml0RXZlbnQuY2FsbCh0aGlzLCBwbHVnaW5OYW1lLCBmb3Jtcyk7XHJcbiAgICAgICAgY29uc3QgbGlzdENvbnRleHQgPSB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJbcGx1Z2luTmFtZV07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqIHJlbCAqL1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGlua1JlbC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVsQnV0dG9uID0gZm9ybXMucXVlcnlTZWxlY3RvcignLnNlLWFuY2hvci1yZWwtYnRuJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVsTGlzdCA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5zZS1saXN0LWxheWVyJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVsUHJldmlldyA9IGZvcm1zLnF1ZXJ5U2VsZWN0b3IoJy5zZS1hbmNob3ItcmVsLXByZXZpZXcnKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhbmNob3JQbHVnaW4ub25DbGlja19yZWxCdXR0b24uYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVsTGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFuY2hvclBsdWdpbi5vbkNsaWNrX3JlbExpc3QuYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0Lm5ld1dpbmRvd0NoZWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGFuY2hvclBsdWdpbi5vbkNoYW5nZV9uZXdXaW5kb3dDaGVjay5iaW5kKHRoaXMsIGNvbnRleHQpKTtcclxuICAgICAgICBjb250ZXh0LmRvd25sb2FkQ2hlY2suYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgYW5jaG9yUGx1Z2luLm9uQ2hhbmdlX2Rvd25sb2FkQ2hlY2suYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY29udGV4dC5hbmNob3JUZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYW5jaG9yUGx1Z2luLm9uQ2hhbmdlQW5jaG9yVGV4dC5iaW5kKHRoaXMsIGNvbnRleHQpKTtcclxuICAgICAgICBjb250ZXh0LnVybElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYW5jaG9yUGx1Z2luLm9uQ2hhbmdlVXJsSW5wdXQuYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY29udGV4dC51cmxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYW5jaG9yUGx1Z2luLm9uS2V5RG93blVybElucHV0LmJpbmQodGhpcywgbGlzdENvbnRleHQpKTtcclxuICAgICAgICBjb250ZXh0LnVybElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgYW5jaG9yUGx1Z2luLm9uRm9jdXNVcmxJbnB1dC5iaW5kKHRoaXMsIGNvbnRleHQsIGxpc3RDb250ZXh0KSk7XHJcbiAgICAgICAgY29udGV4dC51cmxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgYW5jaG9yUGx1Z2luLm9uQmx1clVybElucHV0LmJpbmQodGhpcywgbGlzdENvbnRleHQpKTtcclxuICAgICAgICBjb250ZXh0LmJvb2ttYXJrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYW5jaG9yUGx1Z2luLm9uQ2xpY2tfYm9va21hcmtCdXR0b24uYmluZCh0aGlzLCBjb250ZXh0KSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgdXBkYXRlKSB7XHJcbiAgICAgICAgY29uc3QgYW5jaG9yUGx1Z2luID0gdGhpcy5wbHVnaW5zLmFuY2hvcjtcclxuXHJcbiAgICAgICAgaWYgKCF1cGRhdGUpIHtcclxuICAgICAgICAgICAgYW5jaG9yUGx1Z2luLmluaXQuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yKTtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5hbmNob3JUZXh0LnZhbHVlID0gdGhpcy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5uZXdXaW5kb3dDaGVjay5jaGVja2VkID0gdGhpcy5vcHRpb25zLmxpbmtUYXJnZXROZXdXaW5kb3c7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0QW5jaG9yLmxpbmtBbmNob3IpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSBjb250ZXh0QW5jaG9yLmxpbmtBbmNob3IuZ2V0QXR0cmlidXRlKCdocmVmJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IubGlua1ZhbHVlID0gY29udGV4dEFuY2hvci5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dEFuY2hvci51cmxJbnB1dC52YWx1ZSA9IGFuY2hvclBsdWdpbi5zZWxmUGF0aEJvb2ttYXJrLmNhbGwodGhpcywgaHJlZikgPyBocmVmLnN1YnN0cihocmVmLmxhc3RJbmRleE9mKCcjJykpIDogaHJlZjtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5hbmNob3JUZXh0LnZhbHVlID0gY29udGV4dEFuY2hvci5saW5rQW5jaG9yLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLm5ld1dpbmRvd0NoZWNrLmNoZWNrZWQgPSAoL19ibGFuay9pLnRlc3QoY29udGV4dEFuY2hvci5saW5rQW5jaG9yLnRhcmdldCkgPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLmRvd25sb2FkQ2hlY2suY2hlY2tlZCA9IGNvbnRleHRBbmNob3IubGlua0FuY2hvci5kb3dubG9hZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyQ29udGV4dCA9IGNvbnRleHRBbmNob3I7XHJcbiAgICAgICAgYW5jaG9yUGx1Z2luLnNldFJlbC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsICh1cGRhdGUgJiYgY29udGV4dEFuY2hvci5saW5rQW5jaG9yKSA/IGNvbnRleHRBbmNob3IubGlua0FuY2hvci5yZWwgOiBjb250ZXh0QW5jaG9yLmRlZmF1bHRSZWwpO1xyXG4gICAgICAgIGFuY2hvclBsdWdpbi5zZXRMaW5rUHJldmlldy5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIGNvbnRleHRBbmNob3IubGlua1ZhbHVlKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5vbi5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IuY2FsbGVyTmFtZSwgdGhpcy5wbHVnaW5zLmFuY2hvci5zZXRIZWFkZXJCb29rbWFyayk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNlbGZQYXRoQm9va21hcms6IGZ1bmN0aW9uKHBhdGgpIHtcclxuICAgICAgICBjb25zdCBocmVmID0gdGhpcy5fdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoL1xcLyQvLCAnJyk7XHJcbiAgICAgICAgcmV0dXJuIHBhdGguaW5kZXhPZignIycpID09PSAwIHx8IChwYXRoLmluZGV4T2YoaHJlZikgPT09IDAgJiYgcGF0aC5pbmRleE9mKCcjJykgPT09IChocmVmLmluZGV4T2YoXCIjXCIpID09PSAtMSA/IGhyZWYubGVuZ3RoIDogaHJlZi5zdWJzdHIoMCwgaHJlZi5pbmRleE9mKFwiI1wiKSkubGVuZ3RoKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9jbG9zZVJlbE1lbnU6IG51bGwsXHJcbiAgICB0b2dnbGVSZWxMaXN0OiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgc2hvdykge1xyXG4gICAgICAgIGlmICghc2hvdykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zLmFuY2hvci5fY2xvc2VSZWxNZW51KSB0aGlzLnBsdWdpbnMuYW5jaG9yLl9jbG9zZVJlbE1lbnUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBjb250ZXh0QW5jaG9yLnJlbEJ1dHRvbjtcclxuICAgICAgICAgICAgY29uc3QgcmVsTGlzdCA9IGNvbnRleHRBbmNob3IucmVsTGlzdDtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHRhcmdldCwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICByZWxMaXN0LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgcmVsTGlzdC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucnRsKSByZWxMaXN0LnN0eWxlLmxlZnQgPSAodGFyZ2V0Lm9mZnNldExlZnQgKyB0YXJnZXQub2Zmc2V0V2lkdGggKyAxKSArICdweCc7XHJcbiAgICAgICAgICAgIGVsc2UgcmVsTGlzdC5zdHlsZS5sZWZ0ID0gKHRhcmdldC5vZmZzZXRMZWZ0IC0gcmVsTGlzdC5vZmZzZXRXaWR0aCAtIDEpICsgJ3B4JztcclxuICAgICAgICAgICAgcmVsTGlzdC5zdHlsZS50b3AgPSAodGFyZ2V0Lm9mZnNldFRvcCArICh0YXJnZXQub2Zmc2V0SGVpZ2h0IC8gMikgLSAocmVsTGlzdC5vZmZzZXRIZWlnaHQgLyAyKSkgKyAncHgnO1xyXG4gICAgICAgICAgICByZWxMaXN0LnN0eWxlLnZpc2liaWxpdHkgPSAnJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3IuX2Nsb3NlUmVsTWVudSA9IGZ1bmN0aW9uIChjb250ZXh0LCB0YXJnZXQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlICYmIChjb250ZXh0LnJlbEJ1dHRvbi5jb250YWlucyhlLnRhcmdldCkgfHwgY29udGV4dC5yZWxMaXN0LmNvbnRhaW5zKGUudGFyZ2V0KSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0YXJnZXQsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVsTGlzdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbEZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBsdWdpbnMuYW5jaG9yLl9jbG9zZVJlbE1lbnUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5fY2xvc2VSZWxNZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMsIGNvbnRleHRBbmNob3IsIHRhcmdldCk7XHJcbiAgICBcclxuICAgICAgICAgICAgdGhpcy5tb2RhbEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBsdWdpbnMuYW5jaG9yLl9jbG9zZVJlbE1lbnUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgb25DbGlja19yZWxCdXR0b246IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yLCBlKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci50b2dnbGVSZWxMaXN0LmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgIXRoaXMudXRpbC5oYXNDbGFzcyhlLnRhcmdldCwgJ2FjdGl2ZScpKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25DbGlja19yZWxMaXN0OiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgZSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGNvbnN0IGNtZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgIGlmICghY21kKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGNvbnRleHRBbmNob3IuY3VycmVudFJlbDtcclxuICAgICAgICBjb25zdCBjaGVja2VkID0gdGhpcy51dGlsLnRvZ2dsZUNsYXNzKHRhcmdldCwgJ3NlLWNoZWNrZWQnKTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGN1cnJlbnQuaW5kZXhPZihjbWQpO1xyXG4gICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIGN1cnJlbnQucHVzaChjbWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSBjdXJyZW50LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0QW5jaG9yLnJlbFByZXZpZXcudGl0bGUgPSBjb250ZXh0QW5jaG9yLnJlbFByZXZpZXcudGV4dENvbnRlbnQgPSBjdXJyZW50LmpvaW4oJyAnKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0UmVsOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgcmVsQXR0cikge1xyXG4gICAgICAgIGNvbnN0IHJlbExpc3RFbCA9IGNvbnRleHRBbmNob3IucmVsTGlzdDtcclxuICAgICAgICBjb25zdCByZWxzID0gY29udGV4dEFuY2hvci5jdXJyZW50UmVsID0gIXJlbEF0dHIgPyBbXSA6IHJlbEF0dHIuc3BsaXQoJyAnKTtcclxuICAgICAgICBpZiAoIXJlbExpc3RFbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBjaGVja2VkUmVsID0gcmVsTGlzdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGVja2VkUmVsLmxlbmd0aCwgY21kOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY21kID0gY2hlY2tlZFJlbFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICBpZiAocmVscy5pbmRleE9mKGNtZCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNoZWNrZWRSZWxbaV0sICdzZS1jaGVja2VkJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY2hlY2tlZFJlbFtpXSwgJ3NlLWNoZWNrZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dEFuY2hvci5yZWxQcmV2aWV3LnRpdGxlID0gY29udGV4dEFuY2hvci5yZWxQcmV2aWV3LnRleHRDb250ZW50ID0gcmVscy5qb2luKCcgJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZUhlYWRlckxpc3Q6IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yLCBjb250ZXh0TGlzdCwgdXJsVmFsdWUpIHtcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy51dGlsLmdldExpc3RDaGlsZHJlbih0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnLCBmdW5jdGlvbihjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAvaFsxLTZdL2kudGVzdChjdXJyZW50Lm5vZGVOYW1lKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoaGVhZGVycy5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWVSZWdFeHAgPSBuZXcgdGhpcy5fdy5SZWdFeHAoJ14nICsgdXJsVmFsdWUucmVwbGFjZSgvXiMvLCAnJyksICdpJyk7XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IFtdO1xyXG4gICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbGVuID0gaGVhZGVycy5sZW5ndGgsIGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBoID0gaGVhZGVyc1tpXTtcclxuICAgICAgICAgICAgaWYgKCF2YWx1ZVJlZ0V4cC50ZXN0KGgudGV4dENvbnRlbnQpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgbGlzdC5wdXNoKGgpO1xyXG4gICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCJzZS1zZWxlY3QtaXRlbVwiIGRhdGEtaW5kZXg9XCInICsgaSArICdcIj4nICsgaC50ZXh0Q29udGVudCArICc8L2xpPic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUuY2xvc2UuY2FsbCh0aGlzLCBjb250ZXh0TGlzdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUuY3JlYXRlTGlzdChjb250ZXh0TGlzdCwgbGlzdCwgaHRtbCk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51Lm9wZW4uY2FsbCh0aGlzLCBjb250ZXh0TGlzdCwgdGhpcy5wbHVnaW5zLmFuY2hvci5fc2V0TWVudUxpc3RQb3NpdGlvbi5iaW5kKHRoaXMsIGNvbnRleHRBbmNob3IpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRNZW51TGlzdFBvc2l0aW9uOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgbGlzdCkge1xyXG4gICAgICAgIGxpc3Quc3R5bGUudG9wID0gKGNvbnRleHRBbmNob3IudXJsSW5wdXQub2Zmc2V0SGVpZ2h0ICsgMSkgKyAncHgnO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbktleURvd25VcmxJbnB1dDogZnVuY3Rpb24gKGNvbnRleHRMaXN0LCBlKSB7XHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAzODogLy8gdXBcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5tb3ZlSXRlbS5jYWxsKHRoaXMsIGNvbnRleHRMaXN0LCAtMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0MDogLy8gZG93blxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51Lm1vdmVJdGVtLmNhbGwodGhpcywgY29udGV4dExpc3QsIDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTM6IC8vIGVudGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dExpc3QuaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0SGVhZGVyQm9va21hcmsuY2FsbCh0aGlzLCB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5nZXRJdGVtKGNvbnRleHRMaXN0LCBudWxsKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNldEhlYWRlckJvb2ttYXJrOiBmdW5jdGlvbiAoaGVhZGVyKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEFuY2hvciA9IHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyQ29udGV4dDtcclxuICAgICAgICBjb25zdCBpZCA9IGhlYWRlci5pZCB8fCAnaF8nICsgdGhpcy5fdy5NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkucmVwbGFjZSgvLitcXC4vLCAnJyk7XHJcbiAgICAgICAgaGVhZGVyLmlkID0gaWQ7XHJcbiAgICAgICAgY29udGV4dEFuY2hvci51cmxJbnB1dC52YWx1ZSA9ICcjJyArIGlkO1xyXG5cclxuICAgICAgICBpZiAoIWNvbnRleHRBbmNob3IuYW5jaG9yVGV4dC52YWx1ZS50cmltKCkgfHwgIWNvbnRleHRBbmNob3IuX2NoYW5nZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLmFuY2hvclRleHQudmFsdWUgPSBoZWFkZXIudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0TGlua1ByZXZpZXcuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCBjb250ZXh0QW5jaG9yLnVybElucHV0LnZhbHVlKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5jbG9zZS5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5zZWxlY3RNZW51LmNhbGxlckNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyQ29udGV4dC51cmxJbnB1dC5mb2N1cygpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNoYW5nZUFuY2hvclRleHQ6IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yLCBlKSB7XHJcbiAgICAgICAgY29udGV4dEFuY2hvci5fY2hhbmdlID0gISFlLnRhcmdldC52YWx1ZS50cmltKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2hhbmdlVXJsSW5wdXQ6IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yLCBlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5zZXRMaW5rUHJldmlldy5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIHZhbHVlKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2lucy5hbmNob3Iuc2VsZlBhdGhCb29rbWFyay5jYWxsKHRoaXMsIHZhbHVlKSkgdGhpcy5wbHVnaW5zLmFuY2hvci5jcmVhdGVIZWFkZXJMaXN0LmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgdGhpcy5jb250ZXh0LnNlbGVjdE1lbnUuY2FsbGVyQ29udGV4dCwgdmFsdWUpO1xyXG4gICAgICAgIGVsc2UgdGhpcy5wbHVnaW5zLnNlbGVjdE1lbnUuY2xvc2UuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJDb250ZXh0KTtcclxuICAgIH0sXHJcblxyXG4gICAgb25Gb2N1c1VybElucHV0OiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgY29udGV4dExpbmspIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2lucy5hbmNob3Iuc2VsZlBhdGhCb29rbWFyay5jYWxsKHRoaXMsIHZhbHVlKSkgdGhpcy5wbHVnaW5zLmFuY2hvci5jcmVhdGVIZWFkZXJMaXN0LmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgY29udGV4dExpbmssIHZhbHVlKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25CbHVyVXJsSW5wdXQ6IGZ1bmN0aW9uIChjb250ZXh0TGlzdCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51LmNsb3NlLmNhbGwodGhpcywgY29udGV4dExpc3QpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRMaW5rUHJldmlldzogZnVuY3Rpb24gKGNvbnRleHQsIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgcHJldmlldyA9IGNvbnRleHQucHJldmlldztcclxuICAgICAgICBjb25zdCBwcm90b2NvbCA9IHRoaXMub3B0aW9ucy5saW5rUHJvdG9jb2w7XHJcbiAgICAgICAgY29uc3Qgbm9QcmVmaXggPSB0aGlzLm9wdGlvbnMubGlua05vUHJlZml4O1xyXG4gICAgICAgIGNvbnN0IHJlc2VydmVkUHJvdG9jb2wgID0gL14obWFpbHRvXFw6fHRlbFxcOnxzbXNcXDp8aHR0cHMqXFw6XFwvXFwvfCMpLy50ZXN0KHZhbHVlKSB8fCB2YWx1ZS5pbmRleE9mKHByb3RvY29sKSA9PT0gMDtcclxuICAgICAgICBjb25zdCBzYW1lUHJvdG9jb2wgPSAhcHJvdG9jb2wgPyBmYWxzZSA6IHRoaXMuX3cuUmVnRXhwKCdeJyArIHRoaXMudXRpbC5lc2NhcGVTdHJpbmdSZWdleHAodmFsdWUuc3Vic3RyKDAsIHByb3RvY29sLmxlbmd0aCkpKS50ZXN0KHByb3RvY29sKTtcclxuICAgICAgICB2YWx1ZSA9IGNvbnRleHQubGlua1ZhbHVlID0gcHJldmlldy50ZXh0Q29udGVudCA9ICF2YWx1ZSA/ICcnIDogbm9QcmVmaXggPyB2YWx1ZSA6IChwcm90b2NvbCAmJiAhcmVzZXJ2ZWRQcm90b2NvbCAmJiAhc2FtZVByb3RvY29sKSA/IHByb3RvY29sICsgdmFsdWUgOiByZXNlcnZlZFByb3RvY29sID8gdmFsdWUgOiAvXnd3d1xcLi8udGVzdCh2YWx1ZSkgPyAnaHR0cDovLycgKyB2YWx1ZSA6IHRoaXMuY29udGV4dC5hbmNob3IuaG9zdCArICgvXlxcLy8udGVzdCh2YWx1ZSkgPyAnJyA6ICcvJykgKyB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2lucy5hbmNob3Iuc2VsZlBhdGhCb29rbWFyay5jYWxsKHRoaXMsIHZhbHVlKSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmJvb2ttYXJrLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dC5ib29rbWFya0J1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYm9va21hcmsuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGNvbnRleHQuYm9va21hcmtCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5wbHVnaW5zLmFuY2hvci5zZWxmUGF0aEJvb2ttYXJrLmNhbGwodGhpcywgdmFsdWUpICYmIGNvbnRleHQuZG93bmxvYWRDaGVjay5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZG93bmxvYWQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dC5kb3dubG9hZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2V0Q3R4OiBmdW5jdGlvbiAoYW5jaG9yLCBjb250ZXh0QW5jaG9yKSB7XHJcbiAgICAgICAgaWYgKCFhbmNob3IpIHJldHVybjtcclxuICAgICAgICBjb250ZXh0QW5jaG9yLmxpbmtBbmNob3IgPSBhbmNob3I7XHJcbiAgICAgICAgY29udGV4dEFuY2hvci5saW5rVmFsdWUgPSBhbmNob3IuaHJlZjtcclxuICAgICAgICBjb250ZXh0QW5jaG9yLmN1cnJlbnRSZWwgPSBhbmNob3IucmVsLnNwbGl0KFwiIFwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlQW5jaG9yOiBmdW5jdGlvbiAoYW5jaG9yLCB1cmwsIGRpc3BsYXlUZXh0LCBjb250ZXh0QW5jaG9yLCBub3RUZXh0KSB7XHJcbiAgICAgICAgLy8gZG93bmxvYWRcclxuICAgICAgICBpZiAoIXRoaXMucGx1Z2lucy5hbmNob3Iuc2VsZlBhdGhCb29rbWFyay5jYWxsKHRoaXMsIHVybCkgJiYgY29udGV4dEFuY2hvci5kb3dubG9hZENoZWNrLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgYW5jaG9yLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBkaXNwbGF5VGV4dCB8fCB1cmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFuY2hvci5yZW1vdmVBdHRyaWJ1dGUoJ2Rvd25sb2FkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBuZXcgd2luZG93XHJcbiAgICAgICAgaWYgKGNvbnRleHRBbmNob3IubmV3V2luZG93Q2hlY2suY2hlY2tlZCkgYW5jaG9yLnRhcmdldCA9ICdfYmxhbmsnO1xyXG4gICAgICAgIGVsc2UgYW5jaG9yLnJlbW92ZUF0dHJpYnV0ZSgndGFyZ2V0Jyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gcmVsXHJcbiAgICAgICAgY29uc3QgcmVsID0gY29udGV4dEFuY2hvci5jdXJyZW50UmVsLmpvaW4oJyAnKTtcclxuICAgICAgICBpZiAoIXJlbCkgYW5jaG9yLnJlbW92ZUF0dHJpYnV0ZSgncmVsJyk7XHJcbiAgICAgICAgZWxzZSBhbmNob3IucmVsID0gcmVsO1xyXG5cclxuICAgICAgICAvLyBzZXQgdXJsXHJcbiAgICAgICAgYW5jaG9yLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgaWYgKG5vdFRleHQpIHtcclxuICAgICAgICAgICAgaWYgKGFuY2hvci5jaGlsZHJlbi5sZW5ndGggPT09IDApIGFuY2hvci50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFuY2hvci50ZXh0Q29udGVudCA9IGRpc3BsYXlUZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlQW5jaG9yOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgbm90VGV4dCkge1xyXG4gICAgICAgIGlmIChjb250ZXh0QW5jaG9yLmxpbmtWYWx1ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHVybCA9IGNvbnRleHRBbmNob3IubGlua1ZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGFuY2hvciA9IGNvbnRleHRBbmNob3IuYW5jaG9yVGV4dDtcclxuICAgICAgICBjb25zdCBkaXNwbGF5VGV4dCA9IGFuY2hvci52YWx1ZS5sZW5ndGggPT09IDAgPyB1cmwgOiBhbmNob3IudmFsdWU7XHJcblxyXG4gICAgICAgIGNvbnN0IG9BID0gY29udGV4dEFuY2hvci5saW5rQW5jaG9yIHx8IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdBJyk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci51cGRhdGVBbmNob3IuY2FsbCh0aGlzLCBvQSwgdXJsLCBkaXNwbGF5VGV4dCwgY29udGV4dEFuY2hvciwgbm90VGV4dCk7XHJcblxyXG4gICAgICAgIGNvbnRleHRBbmNob3IubGlua1ZhbHVlID0gY29udGV4dEFuY2hvci5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dEFuY2hvci51cmxJbnB1dC52YWx1ZSA9IGNvbnRleHRBbmNob3IuYW5jaG9yVGV4dC52YWx1ZSA9ICcnO1xyXG5cclxuICAgICAgICByZXR1cm4gb0E7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tfYm9va21hcmtCdXR0b246IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yKSB7XHJcbiAgICAgICAgbGV0IHVybCA9IGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2lucy5hbmNob3Iuc2VsZlBhdGhCb29rbWFyay5jYWxsKHRoaXMsIHVybCkpIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsLnN1YnN0cigxKTtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5ib29rbWFyay5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY29udGV4dEFuY2hvci5ib29rbWFya0J1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuc2VsZWN0TWVudS5jbG9zZS5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC5zZWxlY3RNZW51LmNhbGxlckNvbnRleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVybCA9ICcjJyArIHVybDtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5ib29rbWFyay5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNvbnRleHRBbmNob3IuYm9va21hcmtCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5kb3dubG9hZENoZWNrLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5kb3dubG9hZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLmNyZWF0ZUhlYWRlckxpc3QuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJDb250ZXh0LCB1cmwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dEFuY2hvci51cmxJbnB1dC52YWx1ZSA9IHVybDtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldExpbmtQcmV2aWV3LmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgdXJsKTtcclxuICAgICAgICBjb250ZXh0QW5jaG9yLnVybElucHV0LmZvY3VzKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2hhbmdlX25ld1dpbmRvd0NoZWNrOiBmdW5jdGlvbiAoY29udGV4dEFuY2hvciwgZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGV4dEFuY2hvci5saW5rRGVmYXVsdFJlbC5jaGVja19uZXdfd2luZG93ICE9PSAnc3RyaW5nJykgcmV0dXJuO1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0UmVsLmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgdGhpcy5wbHVnaW5zLmFuY2hvci5fcmVsTWVyZ2UuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCBjb250ZXh0QW5jaG9yLmxpbmtEZWZhdWx0UmVsLmNoZWNrX25ld193aW5kb3cpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLnNldFJlbC5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIHRoaXMucGx1Z2lucy5hbmNob3IuX3JlbERlbGV0ZS5jYWxsKHRoaXMsIGNvbnRleHRBbmNob3IsIGNvbnRleHRBbmNob3IubGlua0RlZmF1bHRSZWwuY2hlY2tfbmV3X3dpbmRvdykpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgb25DaGFuZ2VfZG93bmxvYWRDaGVjazogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IsIGUpIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLmRvd25sb2FkLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLmJvb2ttYXJrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0QW5jaG9yLmJvb2ttYXJrQnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRBbmNob3IubGlua1ZhbHVlID0gY29udGV4dEFuY2hvci5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dEFuY2hvci51cmxJbnB1dC52YWx1ZSA9IGNvbnRleHRBbmNob3IudXJsSW5wdXQudmFsdWUucmVwbGFjZSgvXlxcIysvLCAnJyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dEFuY2hvci5saW5rRGVmYXVsdFJlbC5jaGVja19ib29rbWFyayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0UmVsLmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgdGhpcy5wbHVnaW5zLmFuY2hvci5fcmVsTWVyZ2UuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCBjb250ZXh0QW5jaG9yLmxpbmtEZWZhdWx0UmVsLmNoZWNrX2Jvb2ttYXJrKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZXh0QW5jaG9yLmRvd25sb2FkLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dEFuY2hvci5saW5rRGVmYXVsdFJlbC5jaGVja19ib29rbWFyayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iuc2V0UmVsLmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgdGhpcy5wbHVnaW5zLmFuY2hvci5fcmVsRGVsZXRlLmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgY29udGV4dEFuY2hvci5saW5rRGVmYXVsdFJlbC5jaGVja19ib29rbWFyaykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfcmVsTWVyZ2U6IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yLCByZWxBdHRyKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGNvbnRleHRBbmNob3IuY3VycmVudFJlbDtcclxuICAgICAgICBpZiAoIXJlbEF0dHIpIHJldHVybiBjdXJyZW50LmpvaW4oJyAnKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoL15vbmx5XFw6Ly50ZXN0KHJlbEF0dHIpKSB7XHJcbiAgICAgICAgICAgIHJlbEF0dHIgPSByZWxBdHRyLnJlcGxhY2UoL15vbmx5XFw6LywgJycpLnRyaW0oKTtcclxuICAgICAgICAgICAgY29udGV4dEFuY2hvci5jdXJyZW50UmVsID0gcmVsQXR0ci5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVsQXR0cjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbHMgPSByZWxBdHRyLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlbHMubGVuZ3RoLCBpbmRleDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gY3VycmVudC5pbmRleE9mKHJlbHNbaV0pO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSBjdXJyZW50LnB1c2gocmVsc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY3VycmVudC5qb2luKCcgJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9yZWxEZWxldGU6IGZ1bmN0aW9uIChjb250ZXh0QW5jaG9yLCByZWxBdHRyKSB7XHJcbiAgICAgICAgaWYgKCFyZWxBdHRyKSByZXR1cm4gY29udGV4dEFuY2hvci5jdXJyZW50UmVsLmpvaW4oJyAnKTtcclxuICAgICAgICBpZiAoL15vbmx5XFw6Ly50ZXN0KHJlbEF0dHIpKSByZWxBdHRyID0gcmVsQXR0ci5yZXBsYWNlKC9eb25seVxcOi8sICcnKS50cmltKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbHMgPSBjb250ZXh0QW5jaG9yLmN1cnJlbnRSZWwuam9pbignICcpLnJlcGxhY2UodGhpcy5fdy5SZWdFeHAocmVsQXR0ciArICdcXFxccyonKSwgJycpO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IuY3VycmVudFJlbCA9IHJlbHMuc3BsaXQoJyAnKTtcclxuICAgICAgICByZXR1cm4gcmVscztcclxuICAgIH0sXHJcblxyXG4gICAgaW5pdDogZnVuY3Rpb24gKGNvbnRleHRBbmNob3IpIHtcclxuICAgICAgICBjb250ZXh0QW5jaG9yLmxpbmtBbmNob3IgPSBudWxsO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IubGlua1ZhbHVlID0gY29udGV4dEFuY2hvci5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dEFuY2hvci51cmxJbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IuYW5jaG9yVGV4dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IubmV3V2luZG93Q2hlY2suY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnRleHRBbmNob3IuZG93bmxvYWRDaGVjay5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgY29udGV4dEFuY2hvci5fY2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5zZXRSZWwuY2FsbCh0aGlzLCBjb250ZXh0QW5jaG9yLCBjb250ZXh0QW5jaG9yLmRlZmF1bHRSZWwpO1xyXG4gICAgICAgIGlmIChjb250ZXh0QW5jaG9yLnJlbExpc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci50b2dnbGVSZWxMaXN0LmNhbGwodGhpcywgY29udGV4dEFuY2hvciwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlckNvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5zZWxlY3RNZW51LmluaXQuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuc2VsZWN0TWVudS5jYWxsZXJDb250ZXh0KTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBkaWFsb2cgZnJvbSAnLi4vbW9kdWxlcy9kaWFsb2cnO1xyXG5pbXBvcnQgYW5jaG9yIGZyb20gJy4uL21vZHVsZXMvX2FuY2hvcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnbGluaycsXHJcbiAgICBkaXNwbGF5OiAnZGlhbG9nJyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb3JlLmFkZE1vZHVsZShbZGlhbG9nLCBhbmNob3JdKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb25zdCBjb250ZXh0TGluayA9IGNvbnRleHQubGluayA9IHtcclxuICAgICAgICAgICAgZm9jdXNFbGVtZW50OiBudWxsLCAvLyBAT3ZlcnJpZGUgZGlhbG9nIC8vIFRoaXMgZWxlbWVudCBoYXMgZm9jdXMgd2hlbiB0aGUgZGlhbG9nIGlzIG9wZW5lZC5cclxuICAgICAgICAgICAgX2xpbmtBbmNob3I6IG51bGwsXHJcbiAgICAgICAgICAgIGFuY2hvckN0eDogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBsaW5rIGRpYWxvZyAqL1xyXG4gICAgICAgIGxldCBsaW5rX2RpYWxvZyA9IHRoaXMuc2V0RGlhbG9nKGNvcmUpO1xyXG4gICAgICAgIGNvbnRleHRMaW5rLm1vZGFsID0gbGlua19kaWFsb2c7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqIGxpbmsgY29udHJvbGxlciAqL1xyXG4gICAgICAgIGxldCBsaW5rX2NvbnRyb2xsZXIgPSB0aGlzLnNldENvbnRyb2xsZXJfTGlua0J1dHRvbihjb3JlKTtcclxuICAgICAgICBjb250ZXh0TGluay5saW5rQ29udHJvbGxlciA9IGxpbmtfY29udHJvbGxlcjtcclxuXHJcbiAgICAgICAgbGlua19kaWFsb2cucXVlcnlTZWxlY3RvcignZm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuc3VibWl0LmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGxpbmtfY29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja19saW5rQ29udHJvbGxlci5iaW5kKGNvcmUpKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXHJcbiAgICAgICAgY29udGV4dC5kaWFsb2cubW9kYWwuYXBwZW5kQ2hpbGQobGlua19kaWFsb2cpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIGNvbnRyb2xsZXIgKi9cclxuICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVsYXRpdmUuYXBwZW5kQ2hpbGQobGlua19jb250cm9sbGVyKTtcclxuXHJcbiAgICAgICAgLyoqIGxpbmsgZXZlbnQgKi9cclxuICAgICAgICBjb3JlLnBsdWdpbnMuYW5jaG9yLmluaXRFdmVudC5jYWxsKGNvcmUsICdsaW5rJywgbGlua19kaWFsb2cpO1xyXG4gICAgICAgIGNvbnRleHRMaW5rLmZvY3VzRWxlbWVudCA9IGNvbnRleHQuYW5jaG9yLmNhbGxlci5saW5rLnVybElucHV0O1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgbGlua19kaWFsb2cgPSBudWxsLCBsaW5rX2NvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKiogZGlhbG9nICovXHJcbiAgICBzZXREaWFsb2c6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBkaWFsb2cgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG5cclxuICAgICAgICBkaWFsb2cuY2xhc3NOYW1lID0gJ3NlLWRpYWxvZy1jb250ZW50JztcclxuICAgICAgICBkaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBsZXQgaHRtbCA9ICcnICtcclxuICAgICAgICAgICAgJzxmb3JtPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctaGVhZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImNsb3NlXCIgY2xhc3M9XCJzZS1idG4gc2UtZGlhbG9nLWNsb3NlXCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5jbG9zZSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMuY2FuY2VsICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtbW9kYWwtdGl0bGVcIj4nICsgbGFuZy5kaWFsb2dCb3gubGlua0JveC50aXRsZSArICc8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICBjb3JlLmNvbnRleHQuYW5jaG9yLmZvcm1zLmlubmVySFRNTCArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb290ZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJzZS1idG4tcHJpbWFyeVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIj48c3Bhbj4nICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJzwvc3Bhbj48L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZm9ybT4nO1xyXG5cclxuICAgICAgICBkaWFsb2cuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgICByZXR1cm4gZGlhbG9nO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKiogbW9kaWZ5IGNvbnRyb2xsZXIgYnV0dG9uICovXHJcbiAgICBzZXRDb250cm9sbGVyX0xpbmtCdXR0b246IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBpY29ucyA9IGNvcmUuaWNvbnM7XHJcbiAgICAgICAgY29uc3QgbGlua19idG4gPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpbmtfYnRuLmNsYXNzTmFtZSA9ICdzZS1jb250cm9sbGVyIHNlLWNvbnRyb2xsZXItbGluayc7XHJcbiAgICAgICAgbGlua19idG4uaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWFycm93IHNlLWFycm93LXVwXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibGluay1jb250ZW50XCI+PHNwYW4+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIlwiPjwvYT4mbmJzcDs8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWJ0bi1ncm91cFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJ1cGRhdGVcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5lZGl0ICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5lZGl0ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJ1bmxpbmtcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29ucy51bmxpbmsgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnVubGluayArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiZGVsZXRlXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMuZGVsZXRlICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlua19idG47XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5vcGVuLmNhbGwodGhpcywgJ2xpbmsnLCAnbGluaycgPT09IHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgc3VibWl0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9BID0gdGhpcy5wbHVnaW5zLmFuY2hvci5jcmVhdGVBbmNob3IuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlci5saW5rLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChvQSA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRGb3JtYXRzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvRm9ybWF0ID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzWzBdLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBvRm9ybWF0LmFwcGVuZENoaWxkKG9BKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5zZXJ0Tm9kZShvRm9ybWF0LCBudWxsLCB0cnVlKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5zZXJ0Tm9kZShvQSwgbnVsbCwgdHJ1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShvQS5jaGlsZE5vZGVzWzBdLCAwLCBvQS5jaGlsZE5vZGVzWzBdLCBvQS50ZXh0Q29udGVudC5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IHJhbmdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHRoaXMuY29udGV4dC5saW5rLl9saW5rQW5jaG9yLmNoaWxkTm9kZXNbMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKHRleHROb2RlLCAwLCB0ZXh0Tm9kZSwgdGV4dE5vZGUudGV4dENvbnRlbnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGNvcmVcclxuICAgICAqL1xyXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyQXJyYXkuaW5kZXhPZih0aGlzLmNvbnRleHQubGluay5saW5rQ29udHJvbGxlcikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnV0aWwuaXNBbmNob3IoZWxlbWVudCkgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW1hZ2UtbGluaycpID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXJBcnJheS5pbmRleE9mKHRoaXMuY29udGV4dC5saW5rLmxpbmtDb250cm9sbGVyKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5saW5rLmNhbGxfY29udHJvbGxlci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgb246IGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLm9uLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LmFuY2hvci5jYWxsZXIubGluaywgdXBkYXRlKTtcclxuICAgIH0sXHJcblxyXG4gICAgY2FsbF9jb250cm9sbGVyOiBmdW5jdGlvbiAoc2VsZWN0aW9uQVRhZykge1xyXG4gICAgICAgIHRoaXMuZWRpdExpbmsgPSB0aGlzLmNvbnRleHQubGluay5fbGlua0FuY2hvciA9IHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyLmxpbmsubGlua0FuY2hvciA9IHNlbGVjdGlvbkFUYWc7XHJcbiAgICAgICAgY29uc3QgbGlua0J0biA9IHRoaXMuY29udGV4dC5saW5rLmxpbmtDb250cm9sbGVyO1xyXG4gICAgICAgIGNvbnN0IGxpbmsgPSBsaW5rQnRuLnF1ZXJ5U2VsZWN0b3IoJ2EnKTtcclxuXHJcbiAgICAgICAgbGluay5ocmVmID0gc2VsZWN0aW9uQVRhZy5ocmVmO1xyXG4gICAgICAgIGxpbmsudGl0bGUgPSBzZWxlY3Rpb25BVGFnLnRleHRDb250ZW50O1xyXG4gICAgICAgIGxpbmsudGV4dENvbnRlbnQgPSBzZWxlY3Rpb25BVGFnLnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3Moc2VsZWN0aW9uQVRhZywgJ29uJyk7XHJcbiAgICAgICAgdGhpcy5zZXRDb250cm9sbGVyUG9zaXRpb24obGlua0J0biwgc2VsZWN0aW9uQVRhZywgJ2JvdHRvbScsIHtsZWZ0OiAwLCB0b3A6IDB9KTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT24obGlua0J0biwgc2VsZWN0aW9uQVRhZywgJ2xpbmsnLCB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MuYmluZCh0aGlzLnV0aWwsIHRoaXMuY29udGV4dC5saW5rLl9saW5rQW5jaG9yLCAnb24nKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tfbGlua0NvbnRyb2xsZXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykgfHwgZS50YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgIGlmICghY29tbWFuZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIGlmICgvdXBkYXRlLy50ZXN0KGNvbW1hbmQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cub3Blbi5jYWxsKHRoaXMsICdsaW5rJywgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICgvdW5saW5rLy50ZXN0KGNvbW1hbmQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjID0gdGhpcy51dGlsLmdldENoaWxkRWxlbWVudCh0aGlzLmNvbnRleHQubGluay5fbGlua0FuY2hvciwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHwgY3VycmVudC5ub2RlVHlwZSA9PT0gMzsgfSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBlYyA9IHRoaXMudXRpbC5nZXRDaGlsZEVsZW1lbnQodGhpcy5jb250ZXh0LmxpbmsuX2xpbmtBbmNob3IsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKHNjLCAwLCBlYywgZWMudGV4dENvbnRlbnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG51bGwsIG51bGwsIFsnQSddLCBmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLyoqIGRlbGV0ZSAqL1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbSh0aGlzLmNvbnRleHQubGluay5fbGlua0FuY2hvcik7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbmNob3IuY2FsbGVyLmxpbmsubGlua0FuY2hvciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5saW5rLmxpbmtDb250cm9sbGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5pbml0LmNhbGwodGhpcywgdGhpcy5jb250ZXh0LmFuY2hvci5jYWxsZXIubGluayk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgZGlhbG9nIGZyb20gJy4uL21vZHVsZXMvZGlhbG9nJztcclxuaW1wb3J0IGFuY2hvciBmcm9tICcuLi9tb2R1bGVzL19hbmNob3InO1xyXG5pbXBvcnQgY29tcG9uZW50IGZyb20gJy4uL21vZHVsZXMvY29tcG9uZW50JztcclxuaW1wb3J0IHJlc2l6aW5nIGZyb20gJy4uL21vZHVsZXMvcmVzaXppbmcnO1xyXG5pbXBvcnQgZmlsZU1hbmFnZXIgZnJvbSAnLi4vbW9kdWxlcy9maWxlTWFuYWdlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnaW1hZ2UnLFxyXG4gICAgZGlzcGxheTogJ2RpYWxvZycsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29yZS5hZGRNb2R1bGUoW2RpYWxvZywgYW5jaG9yLCBjb21wb25lbnQsIHJlc2l6aW5nLCBmaWxlTWFuYWdlcl0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSBjb250ZXh0LmltYWdlID0ge1xyXG4gICAgICAgICAgICBfaW5mb0xpc3Q6IFtdLCAvLyBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAgICAgICAgX2luZm9JbmRleDogMCwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIF91cGxvYWRGaWxlTGVuZ3RoOiAwLCAvLyBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAgICAgICAgZm9jdXNFbGVtZW50OiBudWxsLCAvLyBAT3ZlcnJpZGUgZGlhbG9nIC8vIFRoaXMgZWxlbWVudCBoYXMgZm9jdXMgd2hlbiB0aGUgZGlhbG9nIGlzIG9wZW5lZC5cclxuICAgICAgICAgICAgc2l6ZVVuaXQ6IG9wdGlvbnMuX2ltYWdlU2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIF9saW5rRWxlbWVudDogJycsXHJcbiAgICAgICAgICAgIF9hbHRUZXh0OiAnJyxcclxuICAgICAgICAgICAgX2FsaWduOiAnbm9uZScsXHJcbiAgICAgICAgICAgIF9mbG9hdENsYXNzUmVnRXhwOiAnX19zZV9fZmxvYXRcXFxcLVthLXpdKycsXHJcbiAgICAgICAgICAgIF92X3NyYzoge19saW5rVmFsdWU6ICcnfSxcclxuICAgICAgICAgICAgc3ZnRGVmYXVsdFNpemU6ICczMCUnLFxyXG4gICAgICAgICAgICBiYXNlNjRSZW5kZXJJbmRleDogMCxcclxuICAgICAgICAgICAgLy8gQHJlcXVpcmUgQE92ZXJyaWRlIGNvbXBvbmVudFxyXG4gICAgICAgICAgICBfZWxlbWVudDogbnVsbCxcclxuICAgICAgICAgICAgX2NvdmVyOiBudWxsLFxyXG4gICAgICAgICAgICBfY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICAvLyBAT3ZlcnJpZGUgcmVzaXppbmcgcHJvcGVydGllc1xyXG4gICAgICAgICAgICBpbnB1dFg6IG51bGwsXHJcbiAgICAgICAgICAgIGlucHV0WTogbnVsbCxcclxuICAgICAgICAgICAgX2VsZW1lbnRfdzogMSxcclxuICAgICAgICAgICAgX2VsZW1lbnRfaDogMSxcclxuICAgICAgICAgICAgX2VsZW1lbnRfbDogMCxcclxuICAgICAgICAgICAgX2VsZW1lbnRfdDogMCxcclxuICAgICAgICAgICAgX2RlZmF1bHRTaXplWDogJ2F1dG8nLFxyXG4gICAgICAgICAgICBfZGVmYXVsdFNpemVZOiAnYXV0bycsXHJcbiAgICAgICAgICAgIF9vcmlnaW5fdzogb3B0aW9ucy5pbWFnZVdpZHRoID09PSAnYXV0bycgPyAnJyA6IG9wdGlvbnMuaW1hZ2VXaWR0aCxcclxuICAgICAgICAgICAgX29yaWdpbl9oOiBvcHRpb25zLmltYWdlSGVpZ2h0ID09PSAnYXV0bycgPyAnJyA6IG9wdGlvbnMuaW1hZ2VIZWlnaHQsXHJcbiAgICAgICAgICAgIF9wcm9wb3J0aW9uQ2hlY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgX3Jlc2l6aW5nOiBvcHRpb25zLmltYWdlUmVzaXppbmcsXHJcbiAgICAgICAgICAgIF9yZXNpemVEb3RIaWRlOiAhb3B0aW9ucy5pbWFnZUhlaWdodFNob3csXHJcbiAgICAgICAgICAgIF9yb3RhdGlvbjogb3B0aW9ucy5pbWFnZVJvdGF0aW9uLFxyXG4gICAgICAgICAgICBfYWxpZ25IaWRlOiAhb3B0aW9ucy5pbWFnZUFsaWduU2hvdyxcclxuICAgICAgICAgICAgX29ubHlQZXJjZW50YWdlOiBvcHRpb25zLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlLFxyXG4gICAgICAgICAgICBfcmF0aW86IGZhbHNlLFxyXG4gICAgICAgICAgICBfcmF0aW9YOiAxLFxyXG4gICAgICAgICAgICBfcmF0aW9ZOiAxLFxyXG4gICAgICAgICAgICBfY2FwdGlvblNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIF9jYXB0aW9uQ2hlY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIF9jYXB0aW9uOiBudWxsLFxyXG4gICAgICAgICAgICBjYXB0aW9uQ2hlY2tFbDogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBpbWFnZSBkaWFsb2cgKi9cclxuICAgICAgICBsZXQgaW1hZ2VfZGlhbG9nID0gdGhpcy5zZXREaWFsb2coY29yZSk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLm1vZGFsID0gaW1hZ2VfZGlhbG9nO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUgPSBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV9pbWFnZV9maWxlJyk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLmltZ1VybEZpbGUgPSBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV9pbWFnZV91cmwnKTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuZm9jdXNFbGVtZW50ID0gY29udGV4dEltYWdlLmltZ0lucHV0RmlsZSB8fCBjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuYWx0VGV4dCA9IGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX2ltYWdlX2FsdCcpO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5jYXB0aW9uQ2hlY2tFbCA9IGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX2ltYWdlX2NoZWNrX2NhcHRpb24nKTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UucHJldmlld1NyYyA9IGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYl9jb250ZW50X2ltYWdlIC5zZS1saW5rLXByZXZpZXcnKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWRpYWxvZy10YWJzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5UYWIuYmluZChjb3JlKSk7XHJcbiAgICAgICAgaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnN1Ym1pdC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLmltZ0lucHV0RmlsZSkgaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5zZS1maWxlLXJlbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fcmVtb3ZlU2VsZWN0ZWRGaWxlcy5iaW5kKGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUsIGNvbnRleHRJbWFnZS5pbWdVcmxGaWxlLCBjb250ZXh0SW1hZ2UucHJldmlld1NyYykpO1xyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZSkgY29udGV4dEltYWdlLmltZ1VybEZpbGUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbkxpbmtQcmV2aWV3LmJpbmQoY29udGV4dEltYWdlLnByZXZpZXdTcmMsIGNvbnRleHRJbWFnZS5fdl9zcmMsIG9wdGlvbnMubGlua1Byb3RvY29sKSk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUgJiYgY29udGV4dEltYWdlLmltZ1VybEZpbGUpIGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fZmlsZUlucHV0Q2hhbmdlLmJpbmQoY29udGV4dEltYWdlKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGltYWdlR2FsbGVyeUJ1dHRvbiA9IGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX19zZV9fZ2FsbGVyeScpO1xyXG4gICAgICAgIGlmIChpbWFnZUdhbGxlcnlCdXR0b24pIGltYWdlR2FsbGVyeUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29wZW5HYWxsZXJ5LmJpbmQoY29yZSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5wcm9wb3J0aW9uID0ge307XHJcbiAgICAgICAgY29udGV4dEltYWdlLmlucHV0WCA9IHt9O1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFkgPSB7fTtcclxuICAgICAgICBpZiAob3B0aW9ucy5pbWFnZVJlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5wcm9wb3J0aW9uID0gaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfaW1hZ2VfY2hlY2tfcHJvcG9ydGlvbicpO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRYID0gaW1hZ2VfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfaW1hZ2Vfc2l6ZV94Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFkgPSBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV9pbWFnZV9zaXplX3knKTtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WC52YWx1ZSA9IG9wdGlvbnMuaW1hZ2VXaWR0aDtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSA9IG9wdGlvbnMuaW1hZ2VIZWlnaHQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRYLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5zZXRJbnB1dFNpemUuYmluZChjb3JlLCAneCcpKTtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuc2V0SW5wdXRTaXplLmJpbmQoY29yZSwgJ3knKSk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRYLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuc2V0UmF0aW8uYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5zZXRSYXRpby5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLnByb3BvcnRpb24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5zZXRSYXRpby5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGltYWdlX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtZGlhbG9nLWJ0bi1yZXZlcnQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2l6ZVJldmVydC5iaW5kKGNvcmUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xyXG4gICAgICAgIGNvbnRleHQuZGlhbG9nLm1vZGFsLmFwcGVuZENoaWxkKGltYWdlX2RpYWxvZyk7XHJcblxyXG4gICAgICAgIC8qKiBsaW5rIGV2ZW50ICovXHJcbiAgICAgICAgY29yZS5wbHVnaW5zLmFuY2hvci5pbml0RXZlbnQuY2FsbChjb3JlLCAnaW1hZ2UnLCBpbWFnZV9kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV90YWJfY29udGVudF91cmwnKSk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLmFuY2hvckN0eCA9IGNvcmUuY29udGV4dC5hbmNob3IuY2FsbGVyLmltYWdlO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgaW1hZ2VfZGlhbG9nID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIGRpYWxvZyAqL1xyXG4gICAgc2V0RGlhbG9nOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZyA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgZGlhbG9nLmNsYXNzTmFtZSA9ICdzZS1kaWFsb2ctY29udGVudCBzZS1kaWFsb2ctaW1hZ2UnO1xyXG4gICAgICAgIGRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICBsZXQgaHRtbCA9ICcnICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctaGVhZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiY2xvc2VcIiBjbGFzcz1cInNlLWJ0biBzZS1kaWFsb2ctY2xvc2VcIiBjbGFzcz1cImNsb3NlXCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5jbG9zZSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmljb25zLmNhbmNlbCArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS1tb2RhbC10aXRsZVwiPicgKyBsYW5nLmRpYWxvZ0JveC5pbWFnZUJveC50aXRsZSArICc8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctdGFic1wiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiX3NlX3RhYl9saW5rIGFjdGl2ZVwiIGRhdGEtdGFiLWxpbms9XCJpbWFnZVwiPicgKyBsYW5nLnRvb2xiYXIuaW1hZ2UgKyAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJfc2VfdGFiX2xpbmtcIiBkYXRhLXRhYi1saW5rPVwidXJsXCI+JyArIGxhbmcudG9vbGJhci5saW5rICsgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8Zm9ybSBtZXRob2Q9XCJwb3N0XCIgZW5jdHlwZT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiX3NlX3RhYl9jb250ZW50IF9zZV90YWJfY29udGVudF9pbWFnZVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWJvZHlcIj48ZGl2IHN0eWxlPVwiYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjY2NjO1wiPic7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pbWFnZUZpbGVJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC5pbWFnZUJveC5maWxlICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybS1maWxlc1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtZm9ybSBfc2VfaW1hZ2VfZmlsZVwiIHR5cGU9XCJmaWxlXCIgYWNjZXB0PVwiJyArIG9wdGlvbi5pbWFnZUFjY2VwdCArICdcIicgKyAob3B0aW9uLmltYWdlTXVsdGlwbGVGaWxlID8gJyBtdWx0aXBsZT1cIm11bHRpcGxlXCInIDogJycpICsgJy8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0biBzZS1kaWFsb2ctZmlsZXMtZWRnZS1idXR0b24gc2UtZmlsZS1yZW1vdmVcIiB0aXRsZT1cIicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5jb250cm9sbGVyLnJlbW92ZSArICdcIj4nICsgY29yZS5pY29ucy5jYW5jZWwgKyAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmltYWdlVXJsSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3guaW1hZ2VCb3gudXJsICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybS1maWxlc1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtZm9ybSBzZS1pbnB1dC11cmwgX3NlX2ltYWdlX3VybFwiIHR5cGU9XCJ0ZXh0XCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChvcHRpb24uaW1hZ2VHYWxsZXJ5VXJsICYmIGNvcmUucGx1Z2lucy5pbWFnZUdhbGxlcnkpID8gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1maWxlcy1lZGdlLWJ1dHRvbiBfX3NlX19nYWxsZXJ5XCIgdGl0bGU9XCInICsgbGFuZy50b29sYmFyLmltYWdlR2FsbGVyeSArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcudG9vbGJhci5pbWFnZUdhbGxlcnkgKyAnXCI+JyArIGNvcmUuaWNvbnMuaW1hZ2VfZ2FsbGVyeSArICc8L2J1dHRvbj4nIDogJycpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwcmUgY2xhc3M9XCJzZS1saW5rLXByZXZpZXdcIj48L3ByZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3guaW1hZ2VCb3guYWx0VGV4dCArICc8L2xhYmVsPjxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWZvcm0gX3NlX2ltYWdlX2FsdFwiIHR5cGU9XCJ0ZXh0XCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9uLmltYWdlUmVzaXppbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlQZXJjZW50YWdlID0gb3B0aW9uLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb25seVBlcmNlbnREaXNwbGF5ID0gb25seVBlcmNlbnRhZ2UgPyAnIHN0eWxlPVwiZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1wiJyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0RGlzcGxheSA9ICFvcHRpb24uaW1hZ2VIZWlnaHRTaG93ID8gJyBzdHlsZT1cImRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcIicgOiAnJztcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybVwiPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmx5UGVyY2VudGFnZSB8fCAhb3B0aW9uLmltYWdlSGVpZ2h0U2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1zaXplLXRleHRcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2l6ZS13XCI+JyArIGxhbmcuZGlhbG9nQm94LnNpemUgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1zaXplLXRleHRcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwic2l6ZS13XCI+JyArIGxhbmcuZGlhbG9nQm94LndpZHRoICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNlLWRpYWxvZy1zaXplLXhcIj4mbmJzcDs8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWwgY2xhc3M9XCJzaXplLWhcIj4nICsgbGFuZy5kaWFsb2dCb3guaGVpZ2h0ICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZS1pbnB1dC1jb250cm9sIF9zZV9pbWFnZV9zaXplX3hcIiBwbGFjZWhvbGRlcj1cImF1dG9cIicgKyAob25seVBlcmNlbnRhZ2UgPyAnIHR5cGU9XCJudW1iZXJcIiBtaW49XCIxXCInIDogJ3R5cGU9XCJ0ZXh0XCInKSArIChvbmx5UGVyY2VudGFnZSA/ICcgbWF4PVwiMTAwXCInIDogJycpICsgJyAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNlLWRpYWxvZy1zaXplLXhcIicgKyBoZWlnaHREaXNwbGF5ICsgJz4nICsgKG9ubHlQZXJjZW50YWdlID8gJyUnIDogJ3gnKSArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwic2UtaW5wdXQtY29udHJvbCBfc2VfaW1hZ2Vfc2l6ZV95XCIgcGxhY2Vob2xkZXI9XCJhdXRvXCInICsgb25seVBlcmNlbnREaXNwbGF5ICsgKG9ubHlQZXJjZW50YWdlID8gJyBtYXg9XCIxMDBcIicgOiAnJykgKyBoZWlnaHREaXNwbGF5ICsgJy8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsJyArIG9ubHlQZXJjZW50RGlzcGxheSArIGhlaWdodERpc3BsYXkgKyAnPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tY2hlY2sgX3NlX2ltYWdlX2NoZWNrX3Byb3BvcnRpb25cIiBjaGVja2VkLz4mbmJzcDsnICsgbGFuZy5kaWFsb2dCb3gucHJvcG9ydGlvbiArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LnJldmVydEJ1dHRvbiArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LnJldmVydEJ1dHRvbiArICdcIiBjbGFzcz1cInNlLWJ0biBzZS1kaWFsb2ctYnRuLXJldmVydFwiIHN0eWxlPVwiZmxvYXQ6IHJpZ2h0O1wiPicgKyBjb3JlLmljb25zLnJldmVydCArICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybSBzZS1kaWFsb2ctZm9ybS1mb290ZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1jaGVjayBfc2VfaW1hZ2VfY2hlY2tfY2FwdGlvblwiIC8+Jm5ic3A7JyArIGxhbmcuZGlhbG9nQm94LmNhcHRpb24gKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiX3NlX3RhYl9jb250ZW50IF9zZV90YWJfY29udGVudF91cmxcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmNvbnRleHQuYW5jaG9yLmZvcm1zLmlubmVySFRNTCArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb290ZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdicgKyAob3B0aW9uLmltYWdlQWxpZ25TaG93ID8gJycgOiAnIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiJykgKyAnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwic3VuZWRpdG9yX2ltYWdlX3JhZGlvXCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLXJhZGlvXCIgdmFsdWU9XCJub25lXCIgY2hlY2tlZD4nICsgbGFuZy5kaWFsb2dCb3guYmFzaWMgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInN1bmVkaXRvcl9pbWFnZV9yYWRpb1wiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1yYWRpb1wiIHZhbHVlPVwibGVmdFwiPicgKyBsYW5nLmRpYWxvZ0JveC5sZWZ0ICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJzdW5lZGl0b3JfaW1hZ2VfcmFkaW9cIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tcmFkaW9cIiB2YWx1ZT1cImNlbnRlclwiPicgKyBsYW5nLmRpYWxvZ0JveC5jZW50ZXIgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInN1bmVkaXRvcl9pbWFnZV9yYWRpb1wiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1yYWRpb1wiIHZhbHVlPVwicmlnaHRcIj4nICsgbGFuZy5kaWFsb2dCb3gucmlnaHQgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwic2UtYnRuLXByaW1hcnlcIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCI+PHNwYW4+JyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICc8L3NwYW4+PC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Zvcm0+JztcclxuXHJcbiAgICAgICAgZGlhbG9nLmlubmVySFRNTCA9IGh0bWw7XHJcblxyXG4gICAgICAgIHJldHVybiBkaWFsb2c7XHJcbiAgICB9LFxyXG5cclxuICAgIF9maWxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaW1nSW5wdXRGaWxlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1nVXJsRmlsZS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlld1NyYy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1nVXJsRmlsZS5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlld1NyYy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICdsaW5lLXRocm91Z2gnO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3JlbW92ZVNlbGVjdGVkRmlsZXM6IGZ1bmN0aW9uICh1cmxJbnB1dCwgcHJldmlld1NyYykge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSAnJztcclxuICAgICAgICBpZiAodXJsSW5wdXQpIHtcclxuICAgICAgICAgICAgdXJsSW5wdXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICBwcmV2aWV3U3JjLnN0eWxlLnRleHREZWNvcmF0aW9uID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfb3BlbkdhbGxlcnk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNhbGxQbHVnaW4oJ2ltYWdlR2FsbGVyeScsIHRoaXMucGx1Z2lucy5pbWFnZUdhbGxlcnkub3Blbi5iaW5kKHRoaXMsIHRoaXMucGx1Z2lucy5pbWFnZS5fc2V0VXJsSW5wdXQuYmluZCh0aGlzLmNvbnRleHQuaW1hZ2UpKSwgbnVsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRVcmxJbnB1dDogZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIHRoaXMuYWx0VGV4dC52YWx1ZSA9IHRhcmdldC5hbHQ7XHJcbiAgICAgICAgdGhpcy5fdl9zcmMuX2xpbmtWYWx1ZSA9IHRoaXMucHJldmlld1NyYy50ZXh0Q29udGVudCA9IHRoaXMuaW1nVXJsRmlsZS52YWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCB0YXJnZXQuc3JjO1xyXG4gICAgICAgIHRoaXMuaW1nVXJsRmlsZS5mb2N1cygpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfb25MaW5rUHJldmlldzogZnVuY3Rpb24gKGNvbnRleHQsIHByb3RvY29sLCBlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgY29udGV4dC5fbGlua1ZhbHVlID0gdGhpcy50ZXh0Q29udGVudCA9ICF2YWx1ZSA/ICcnIDogKHByb3RvY29sICYmIHZhbHVlLmluZGV4T2YoJzovLycpID09PSAtMSAmJiB2YWx1ZS5pbmRleE9mKCcjJykgIT09IDApID8gcHJvdG9jb2wgKyB2YWx1ZSA6IHZhbHVlLmluZGV4T2YoJzovLycpID09PSAtMSA/ICcvJyArIHZhbHVlIDogdmFsdWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIEBSZXF1aXJlZCBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBmaWxlVGFnczogWydpbWcnXSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlLCBmaWxlTWFuYWdlciwgcmVzaXppbmdcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBjYWxsZWQgZnJvbSBjb3JlLnNlbGVjdENvbXBvbmVudC5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBzZWxlY3Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLm9uTW9kaWZ5TW9kZS5jYWxsKHRoaXMsIGVsZW1lbnQsIHRoaXMucGx1Z2lucy5yZXNpemluZy5jYWxsX2NvbnRyb2xsZXJfcmVzaXplLmNhbGwodGhpcywgZWxlbWVudCwgJ2ltYWdlJykpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlciwgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBpbWFnZUVsID0gZWxlbWVudCB8fCB0aGlzLmNvbnRleHQuaW1hZ2UuX2VsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VDb250YWluZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChpbWFnZUVsLCB0aGlzLnV0aWwuaXNNZWRpYUNvbXBvbmVudCkgfHwgaW1hZ2VFbDtcclxuICAgICAgICBjb25zdCBkYXRhSW5kZXggPSBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpICogMTtcclxuXHJcbiAgICAgICAgLy8gZXZlbnRcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VEZWxldGVCZWZvcmUgPT09ICdmdW5jdGlvbicgJiYgKHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VEZWxldGVCZWZvcmUoaW1hZ2VFbCwgaW1hZ2VDb250YWluZXIsIGRhdGFJbmRleCwgdGhpcykgPT09IGZhbHNlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgZm9jdXNFbCA9IChpbWFnZUNvbnRhaW5lci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IGltYWdlQ29udGFpbmVyLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZW1wdHlEaXYgPSBpbWFnZUNvbnRhaW5lci5wYXJlbnROb2RlO1xyXG4gICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGltYWdlQ29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UuaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgaWYgKGVtcHR5RGl2ICE9PSB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnKSB0aGlzLnV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMoZW1wdHlEaXYsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwOyB9LCBudWxsKTtcclxuXHJcbiAgICAgICAgLy8gZm9jdXNcclxuICAgICAgICB0aGlzLmZvY3VzRWRnZShmb2N1c0VsKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBldmVudFxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5kZWxldGVJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgZGF0YUluZGV4LCB0aGlzLmZ1bmN0aW9ucy5vbkltYWdlVXBsb2FkKTtcclxuXHJcbiAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKHVwZGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXVwZGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlID0gY29udGV4dEltYWdlLl9vcmlnaW5fdyA9IHRoaXMub3B0aW9ucy5pbWFnZVdpZHRoID09PSBjb250ZXh0SW1hZ2UuX2RlZmF1bHRTaXplWCA/ICcnIDogdGhpcy5vcHRpb25zLmltYWdlV2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFkudmFsdWUgPSBjb250ZXh0SW1hZ2UuX29yaWdpbl9oID0gdGhpcy5vcHRpb25zLmltYWdlSGVpZ2h0ID09PSBjb250ZXh0SW1hZ2UuX2RlZmF1bHRTaXplWSA/ICcnIDogdGhpcy5vcHRpb25zLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEltYWdlLmltZ0lucHV0RmlsZSAmJiB0aGlzLm9wdGlvbnMuaW1hZ2VNdWx0aXBsZUZpbGUpIGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUuc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlICYmIHRoaXMub3B0aW9ucy5pbWFnZU11bHRpcGxlRmlsZSkgY29udGV4dEltYWdlLmltZ0lucHV0RmlsZS5yZW1vdmVBdHRyaWJ1dGUoJ211bHRpcGxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hbmNob3Iub24uY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UuYW5jaG9yQ3R4LCB1cGRhdGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIG9wZW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLm9wZW4uY2FsbCh0aGlzLCAnaW1hZ2UnLCAnaW1hZ2UnID09PSB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9wZW5UYWI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY29uc3QgbW9kYWwgPSB0aGlzLmNvbnRleHQuaW1hZ2UubW9kYWw7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IChlID09PSAnaW5pdCcgPyBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYl9saW5rJykgOiBlLnRhcmdldCk7XHJcblxyXG4gICAgICAgIGlmICghL15CVVRUT04kL2kudGVzdCh0YXJnZXRFbGVtZW50LnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERlY2xhcmUgYWxsIHZhcmlhYmxlc1xyXG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YXJnZXRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YWItbGluaycpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRDbGFzc05hbWUgPSAnX3NlX3RhYl9jb250ZW50JztcclxuICAgICAgICBsZXQgaSwgdGFiQ29udGVudCwgdGFiTGlua3M7XHJcblxyXG4gICAgICAgIC8vIEdldCBhbGwgZWxlbWVudHMgd2l0aCBjbGFzcz1cInRhYmNvbnRlbnRcIiBhbmQgaGlkZSB0aGVtXHJcbiAgICAgICAgdGFiQ29udGVudCA9IG1vZGFsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY29udGVudENsYXNzTmFtZSk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYkNvbnRlbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGFiQ29udGVudFtpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gR2V0IGFsbCBlbGVtZW50cyB3aXRoIGNsYXNzPVwidGFibGlua3NcIiBhbmQgcmVtb3ZlIHRoZSBjbGFzcyBcImFjdGl2ZVwiXHJcbiAgICAgICAgdGFiTGlua3MgPSBtb2RhbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdfc2VfdGFiX2xpbmsnKTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFiTGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHRhYkxpbmtzW2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaG93IHRoZSBjdXJyZW50IHRhYiwgYW5kIGFkZCBhbiBcImFjdGl2ZVwiIGNsYXNzIHRvIHRoZSBidXR0b24gdGhhdCBvcGVuZWQgdGhlIHRhYlxyXG4gICAgICAgIG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29udGVudENsYXNzTmFtZSArICdfJyArIHRhYk5hbWUpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0YXJnZXRFbGVtZW50LCAnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgIC8vIGZvY3VzXHJcbiAgICAgICAgaWYgKHRhYk5hbWUgPT09ICdpbWFnZScgJiYgdGhpcy5jb250ZXh0LmltYWdlLmZvY3VzRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuaW1hZ2UuZm9jdXNFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YWJOYW1lID09PSAndXJsJykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuYW5jaG9yLmNhbGxlci5pbWFnZS51cmxJbnB1dC5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICBzdWJtaXQ6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGNvbnN0IGltYWdlUGx1Z2luID0gdGhpcy5wbHVnaW5zLmltYWdlO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29udGV4dEltYWdlLl9hbHRUZXh0ID0gY29udGV4dEltYWdlLmFsdFRleHQudmFsdWU7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9hbGlnbiA9IGNvbnRleHRJbWFnZS5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX2ltYWdlX3JhZGlvXCJdOmNoZWNrZWQnKS52YWx1ZTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2NhcHRpb25DaGVja2VkID0gY29udGV4dEltYWdlLmNhcHRpb25DaGVja0VsLmNoZWNrZWQ7XHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fcmVzaXppbmcpIGNvbnRleHRJbWFnZS5fcHJvcG9ydGlvbkNoZWNrZWQgPSBjb250ZXh0SW1hZ2UucHJvcG9ydGlvbi5jaGVja2VkO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VQbHVnaW4udXBkYXRlX2ltYWdlLmNhbGwodGhpcywgZmFsc2UsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUgJiYgY29udGV4dEltYWdlLmltZ0lucHV0RmlsZS5maWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZVBsdWdpbi5zdWJtaXRBY3Rpb24uY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuaW1hZ2UuaW1nSW5wdXRGaWxlLmZpbGVzKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZSAmJiBjb250ZXh0SW1hZ2UuX3Zfc3JjLl9saW5rVmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VQbHVnaW4ub25SZW5kZXJfaW1nVXJsLmNhbGwodGhpcywgY29udGV4dEltYWdlLl92X3NyYy5fbGlua1ZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmltYWdlLnN1Ym1pdC5mYWlsXSBjYXVzZSA6IFwiJyArIGVycm9yLm1lc3NhZ2UgKyAnXCInKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIHN1Ym1pdEFjdGlvbjogZnVuY3Rpb24gKGZpbGVMaXN0KSB7XHJcbiAgICAgICAgaWYgKGZpbGVMaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgZmlsZVNpemUgPSAwO1xyXG4gICAgICAgIGxldCBmaWxlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmaWxlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoL2ltYWdlL2kudGVzdChmaWxlTGlzdFtpXS50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZXMucHVzaChmaWxlTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICBmaWxlU2l6ZSArPSBmaWxlTGlzdFtpXS5zaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsaW1pdFNpemUgPSB0aGlzLm9wdGlvbnMuaW1hZ2VVcGxvYWRTaXplTGltaXQ7XHJcbiAgICAgICAgaWYgKGxpbWl0U2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGluZm9TaXplID0gMDtcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2VzSW5mbyA9IHRoaXMuY29udGV4dC5pbWFnZS5faW5mb0xpc3Q7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbWFnZXNJbmZvLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvU2l6ZSArPSBpbWFnZXNJbmZvW2ldLnNpemUgKiAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKGZpbGVTaXplICsgaW5mb1NpemUpID4gbGltaXRTaXplKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gJ1tTVU5FRElUT1IuaW1hZ2VVcGxvYWQuZmFpbF0gU2l6ZSBvZiB1cGxvYWRhYmxlIHRvdGFsIGltYWdlczogJyArIChsaW1pdFNpemUvMTAwMCkgKyAnS0InO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkltYWdlVXBsb2FkRXJyb3IgIT09ICdmdW5jdGlvbicgfHwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZEVycm9yKGVyciwgeyAnbGltaXRTaXplJzogbGltaXRTaXplLCAnY3VycmVudFNpemUnOiBpbmZvU2l6ZSwgJ3VwbG9hZFNpemUnOiBmaWxlU2l6ZSB9LCB0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25zLm5vdGljZU9wZW4oZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fdXBsb2FkRmlsZUxlbmd0aCA9IGZpbGVzLmxlbmd0aDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBhbmNob3IgPSB0aGlzLnBsdWdpbnMuYW5jaG9yLmNyZWF0ZUFuY2hvci5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZS5hbmNob3JDdHgsIHRydWUpO1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSB7XHJcbiAgICAgICAgICAgIGFuY2hvcjogYW5jaG9yLFxyXG4gICAgICAgICAgICBpbnB1dFdpZHRoOiBjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlLFxyXG4gICAgICAgICAgICBpbnB1dEhlaWdodDogY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSxcclxuICAgICAgICAgICAgYWxpZ246IGNvbnRleHRJbWFnZS5fYWxpZ24sXHJcbiAgICAgICAgICAgIGlzVXBkYXRlOiB0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsLFxyXG4gICAgICAgICAgICBhbHQ6IGNvbnRleHRJbWFnZS5fYWx0VGV4dCxcclxuICAgICAgICAgICAgZWxlbWVudDogY29udGV4dEltYWdlLl9lbGVtZW50XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkltYWdlVXBsb2FkQmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWRCZWZvcmUoZmlsZXMsIGluZm8sIHRoaXMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiB0aGlzLl93LkFycmF5LmlzQXJyYXkoZGF0YS5yZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLnJlZ2lzdGVyLmNhbGwodGhpcywgaW5mbywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS51cGxvYWQuY2FsbCh0aGlzLCBpbmZvLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdy5BcnJheS5pc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIGZpbGVzID0gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLnVwbG9hZC5jYWxsKHRoaXMsIGluZm8sIGZpbGVzKTtcclxuICAgIH0sXHJcblxyXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChtZXNzYWdlLCByZXNwb25zZSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkltYWdlVXBsb2FkRXJyb3IgIT09ICdmdW5jdGlvbicgfHwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZEVycm9yKG1lc3NhZ2UsIHJlc3BvbnNlLCB0aGlzKSkge1xyXG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5ub3RpY2VPcGVuKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5wbHVnaW4uaW1hZ2UuZXJyb3JdIHJlc3BvbnNlOiAnICsgbWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGxvYWQ6IGZ1bmN0aW9uIChpbmZvLCBmaWxlcykge1xyXG4gICAgICAgIGlmICghZmlsZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGZpbGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UuZXJyb3IuY2FsbCh0aGlzLCBmaWxlcywgbnVsbCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGltYWdlVXBsb2FkVXJsID0gdGhpcy5vcHRpb25zLmltYWdlVXBsb2FkVXJsO1xyXG4gICAgICAgIGNvbnN0IGZpbGVzTGVuID0gdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCA/IDEgOiBmaWxlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIHNlcnZlciB1cGxvYWRcclxuICAgICAgICBpZiAodHlwZW9mIGltYWdlVXBsb2FkVXJsID09PSAnc3RyaW5nJyAmJiBpbWFnZVVwbG9hZFVybC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXNMZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlLScgKyBpLCBmaWxlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnVwbG9hZC5jYWxsKHRoaXMsIGltYWdlVXBsb2FkVXJsLCB0aGlzLm9wdGlvbnMuaW1hZ2VVcGxvYWRIZWFkZXIsIGZvcm1EYXRhLCB0aGlzLnBsdWdpbnMuaW1hZ2UuY2FsbEJhY2tfaW1nVXBsb2FkLmJpbmQodGhpcywgaW5mbyksIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWRFcnJvcik7XHJcbiAgICAgICAgfSBlbHNlIHsgLy8gYmFzZTY0XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5zZXR1cF9yZWFkZXIuY2FsbCh0aGlzLCBmaWxlcywgaW5mby5hbmNob3IsIGluZm8uaW5wdXRXaWR0aCwgaW5mby5pbnB1dEhlaWdodCwgaW5mby5hbGlnbiwgaW5mby5hbHQsIGZpbGVzTGVuLCBpbmZvLmlzVXBkYXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNhbGxCYWNrX2ltZ1VwbG9hZDogZnVuY3Rpb24gKGluZm8sIHhtbEh0dHApIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZnVuY3Rpb25zLmltYWdlVXBsb2FkSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5pbWFnZVVwbG9hZEhhbmRsZXIoeG1sSHR0cCwgaW5mbywgdGhpcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmVycm9yLmNhbGwodGhpcywgcmVzcG9uc2UuZXJyb3JNZXNzYWdlLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UucmVnaXN0ZXIuY2FsbCh0aGlzLCBpbmZvLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAoaW5mbywgcmVzcG9uc2UpIHtcclxuICAgICAgICBjb25zdCBmaWxlTGlzdCA9IHJlc3BvbnNlLnJlc3VsdDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZpbGVMaXN0Lmxlbmd0aCwgZmlsZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZpbGUgPSB7IG5hbWU6IGZpbGVMaXN0W2ldLm5hbWUsIHNpemU6IGZpbGVMaXN0W2ldLnNpemUgfTtcclxuICAgICAgICAgICAgaWYgKGluZm8uaXNVcGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS51cGRhdGVfc3JjLmNhbGwodGhpcywgZmlsZUxpc3RbaV0udXJsLCBpbmZvLmVsZW1lbnQsIGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UuY3JlYXRlX2ltYWdlLmNhbGwodGhpcywgZmlsZUxpc3RbaV0udXJsLCBpbmZvLmFuY2hvciwgaW5mby5pbnB1dFdpZHRoLCBpbmZvLmlucHV0SGVpZ2h0LCBpbmZvLmFsaWduLCBmaWxlLCBpbmZvLmFsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0dXBfcmVhZGVyOiBmdW5jdGlvbiAoZmlsZXMsIGFuY2hvciwgd2lkdGgsIGhlaWdodCwgYWxpZ24sIGFsdCwgZmlsZXNMZW4sIGlzVXBkYXRlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGZpbGVzTGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbU1VORURJVE9SLmltYWdlLmJhc2U2NC5mYWlsXSBjYXVzZSA6IE5vIGFwcGxpY2FibGUgZmlsZXMnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmltYWdlLmJhc2U2NFJlbmRlckluZGV4ID0gZmlsZXNMZW47XHJcbiAgICAgICAgICAgIGNvbnN0IHdGaWxlUmVhZGVyID0gdGhpcy5fdy5GaWxlUmVhZGVyO1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlc1N0YWNrID0gW2ZpbGVzTGVuXTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmltYWdlLmlucHV0WC52YWx1ZSA9IHdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuaW1hZ2UuaW5wdXRZLnZhbHVlID0gaGVpZ2h0O1xyXG4gICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCByZWFkZXIsIGZpbGU7IGkgPCBmaWxlc0xlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgd0ZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgIGZpbGUgPSBmaWxlc1tpXTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChyZWFkZXIsIHVwZGF0ZSwgdXBkYXRlRWxlbWVudCwgZmlsZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlc1N0YWNrW2luZGV4XSA9IHsgcmVzdWx0OiByZWFkZXIucmVzdWx0LCBmaWxlOiBmaWxlIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgtLXRoaXMuY29udGV4dC5pbWFnZS5iYXNlNjRSZW5kZXJJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uub25SZW5kZXJfaW1nQmFzZTY0LmNhbGwodGhpcywgdXBkYXRlLCBmaWxlc1N0YWNrLCB1cGRhdGVFbGVtZW50LCBhbmNob3IsIHdpZHRoLCBoZWlnaHQsIGFsaWduLCBhbHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzLCByZWFkZXIsIGlzVXBkYXRlLCB0aGlzLmNvbnRleHQuaW1hZ2UuX2VsZW1lbnQsIGZpbGUsIGkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5pbWFnZS5zZXR1cF9yZWFkZXIuZmFpbF0gY2F1c2UgOiBcIicgKyBlLm1lc3NhZ2UgKyAnXCInKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG9uUmVuZGVyX2ltZ0Jhc2U2NDogZnVuY3Rpb24gKHVwZGF0ZSwgZmlsZXNTdGFjaywgdXBkYXRlRWxlbWVudCwgYW5jaG9yLCB3aWR0aCwgaGVpZ2h0LCBhbGlnbiwgYWx0KSB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlTWV0aG9kID0gdGhpcy5wbHVnaW5zLmltYWdlLnVwZGF0ZV9zcmM7XHJcbiAgICAgICAgY29uc3QgY3JlYXRlTWV0aG9kID0gdGhpcy5wbHVnaW5zLmltYWdlLmNyZWF0ZV9pbWFnZTtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZmlsZXNTdGFjay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaW1hZ2UuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtbmFtZScsIGZpbGVzU3RhY2tbaV0uZmlsZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbWFnZS5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsZS1zaXplJywgZmlsZXNTdGFja1tpXS5maWxlLnNpemUpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlTWV0aG9kLmNhbGwodGhpcywgZmlsZXNTdGFja1tpXS5yZXN1bHQsIHVwZGF0ZUVsZW1lbnQsIGZpbGVzU3RhY2tbaV0uZmlsZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVNZXRob2QuY2FsbCh0aGlzLCBmaWxlc1N0YWNrW2ldLnJlc3VsdCwgYW5jaG9yLCB3aWR0aCwgaGVpZ2h0LCBhbGlnbiwgZmlsZXNTdGFja1tpXS5maWxlLCBhbHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBvblJlbmRlcl9pbWdVcmw6IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICBpZiAoIXVybCkgdXJsID0gdGhpcy5jb250ZXh0LmltYWdlLl92X3NyYy5fbGlua1ZhbHVlO1xyXG4gICAgICAgIGlmICghdXJsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0ge25hbWU6IHVybC5zcGxpdCgnLycpLnBvcCgpLCBzaXplOiAwfTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwpIHRoaXMucGx1Z2lucy5pbWFnZS51cGRhdGVfc3JjLmNhbGwodGhpcywgdXJsLCBjb250ZXh0SW1hZ2UuX2VsZW1lbnQsIGZpbGUpO1xyXG4gICAgICAgICAgICBlbHNlIHRoaXMucGx1Z2lucy5pbWFnZS5jcmVhdGVfaW1hZ2UuY2FsbCh0aGlzLCB1cmwsIHRoaXMucGx1Z2lucy5hbmNob3IuY3JlYXRlQW5jaG9yLmNhbGwodGhpcywgY29udGV4dEltYWdlLmFuY2hvckN0eCwgdHJ1ZSksIGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUsIGNvbnRleHRJbWFnZS5pbnB1dFkudmFsdWUsIGNvbnRleHRJbWFnZS5fYWxpZ24sIGZpbGUsIGNvbnRleHRJbWFnZS5fYWx0VGV4dCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5pbWFnZS5VUkxSZW5kZXJpbmcuZmFpbF0gY2F1c2UgOiBcIicgKyBlLm1lc3NhZ2UgKyAnXCInKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgb25SZW5kZXJfbGluazogZnVuY3Rpb24gKGltZ1RhZywgYW5jaG9yKSB7XHJcbiAgICAgICAgaWYgKGFuY2hvcikge1xyXG4gICAgICAgICAgICBhbmNob3Iuc2V0QXR0cmlidXRlKCdkYXRhLWltYWdlLWxpbmsnLCAnaW1hZ2UnKTtcclxuICAgICAgICAgICAgaW1nVGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1pbWFnZS1saW5rJywgYW5jaG9yLmhyZWYpO1xyXG4gICAgICAgICAgICBhbmNob3IuYXBwZW5kQ2hpbGQoaW1nVGFnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFuY2hvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbWdUYWc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30geHkgJ3gnOiB3aWR0aCwgJ3knOiBoZWlnaHRcclxuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZSBFdmVudCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgc2V0SW5wdXRTaXplOiBmdW5jdGlvbiAoeHksIGUpIHtcclxuICAgICAgICBpZiAoZSAmJiBlLmtleUNvZGUgPT09IDMyKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2V0SW5wdXRTaXplLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LmltYWdlLCB4eSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldFJhdGlvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2V0UmF0aW8uY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuaW1hZ2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBjaGVja0ZpbGVJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VQbHVnaW4gPSB0aGlzLnBsdWdpbnMuaW1hZ2U7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG5cclxuICAgICAgICBjb25zdCBtb2RpZnlIYW5kbGVyID0gZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgICAgICBpbWFnZVBsdWdpbi5vbk1vZGlmeU1vZGUuY2FsbCh0aGlzLCB0YWcsIG51bGwpO1xyXG4gICAgICAgICAgICBpbWFnZVBsdWdpbi5vcGVuTW9kaWZ5LmNhbGwodGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIC8vIGdldCBzaXplXHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUgPSBjb250ZXh0SW1hZ2UuX29yaWdpbl93O1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlID0gY29udGV4dEltYWdlLl9vcmlnaW5faDtcclxuICAgICAgICAgICAgLy8gZ2V0IGFsaWduXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IHRoaXMudXRpbC5nZXRGb3JtYXRFbGVtZW50KHRhZyk7XHJcbiAgICAgICAgICAgIGlmIChmb3JtYXQpIGNvbnRleHRJbWFnZS5fYWxpZ24gPSBmb3JtYXQuc3R5bGUudGV4dEFsaWduIHx8IGZvcm1hdC5zdHlsZS5mbG9hdDtcclxuICAgICAgICAgICAgLy8gbGlua1xyXG4gICAgICAgICAgICBpZiAodGhpcy51dGlsLmlzQW5jaG9yKHRhZy5wYXJlbnROb2RlKSAmJiAhY29udGV4dEltYWdlLmFuY2hvckN0eC5saW5rVmFsdWUpIGNvbnRleHRJbWFnZS5hbmNob3JDdHgubGlua1ZhbHVlID0gJyAnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaW1hZ2VQbHVnaW4udXBkYXRlX2ltYWdlLmNhbGwodGhpcywgdHJ1ZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICBpbWFnZVBsdWdpbi5pbml0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuY2hlY2tJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgWydpbWcnXSwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgbW9kaWZ5SGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIHJlc2V0RmlsZUluZm86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIucmVzZXRJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZV9pbWFnZTogZnVuY3Rpb24gKHNyYywgYW5jaG9yLCB3aWR0aCwgaGVpZ2h0LCBhbGlnbiwgZmlsZSwgYWx0KSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VQbHVnaW4gPSB0aGlzLnBsdWdpbnMuaW1hZ2U7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9ICdpbWFnZSc7XHJcblxyXG4gICAgICAgIGxldCBvSW1nID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0lNRycpO1xyXG4gICAgICAgIG9JbWcuc3JjID0gc3JjO1xyXG4gICAgICAgIG9JbWcuYWx0ID0gYWx0O1xyXG4gICAgICAgIG9JbWcuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZScsICcwJyk7XHJcbiAgICAgICAgYW5jaG9yID0gaW1hZ2VQbHVnaW4ub25SZW5kZXJfbGluay5jYWxsKHRoaXMsIG9JbWcsIGFuY2hvciA/ICBhbmNob3IuY2xvbmVOb2RlKGZhbHNlKSA6IG51bGwpO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLl9yZXNpemluZykge1xyXG4gICAgICAgICAgICBvSW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9wb3J0aW9uJywgY29udGV4dEltYWdlLl9wcm9wb3J0aW9uQ2hlY2tlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjb3ZlciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvdmVyLmNhbGwodGhpcywgYW5jaG9yKTtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb250YWluZXIuY2FsbCh0aGlzLCBjb3ZlciwgJ3NlLWltYWdlLWNvbnRhaW5lcicpO1xyXG5cclxuICAgICAgICAvLyBjYXB0aW9uXHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fY2FwdGlvbkNoZWNrZWQpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jYXB0aW9uID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5jcmVhdGVfY2FwdGlvbi5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBjb3Zlci5hcHBlbmRDaGlsZChjb250ZXh0SW1hZ2UuX2NhcHRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50ID0gb0ltZztcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2NvdmVyID0gY292ZXI7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9jb250YWluZXIgPSBjb250YWluZXI7XHJcblxyXG4gICAgICAgIC8vIHNldCBzaXplXHJcbiAgICAgICAgaW1hZ2VQbHVnaW4uYXBwbHlTaXplLmNhbGwodGhpcywgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIGFsaWduXHJcbiAgICAgICAgaW1hZ2VQbHVnaW4uc2V0QWxpZ24uY2FsbCh0aGlzLCBhbGlnbiwgb0ltZywgY292ZXIsIGNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIG9JbWcub25sb2FkID0gaW1hZ2VQbHVnaW4uX2ltYWdlX2NyZWF0ZV9vbmxvYWQuYmluZCh0aGlzLCBvSW1nLCBjb250ZXh0SW1hZ2Uuc3ZnRGVmYXVsdFNpemUsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zZXJ0Q29tcG9uZW50KGNvbnRhaW5lciwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSkpIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgb0ltZywgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgZmlsZSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luID0gJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIF9pbWFnZV9jcmVhdGVfb25sb2FkOiBmdW5jdGlvbiAob0ltZywgc3ZnRGVmYXVsdFNpemUsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIC8vIHN2ZyBleGNlcHRpb24gaGFuZGxpbmdcclxuICAgICAgICBpZiAob0ltZy5vZmZzZXRXaWR0aCA9PT0gMCkgdGhpcy5wbHVnaW5zLmltYWdlLmFwcGx5U2l6ZS5jYWxsKHRoaXMsIHN2Z0RlZmF1bHRTaXplLCAnJyk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tZWRpYUF1dG9TZWxlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQob0ltZywgJ2ltYWdlJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuYXBwZW5kRm9ybWF0VGFnKGNvbnRhaW5lciwgbnVsbCk7XHJcbiAgICAgICAgICAgIGlmIChsaW5lKSB0aGlzLnNldFJhbmdlKGxpbmUsIDAsIGxpbmUsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlX2ltYWdlOiBmdW5jdGlvbiAoaW5pdCwgb3BlbkNvbnRyb2xsZXIsIG5vdEhpc3RvcnlQdXNoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGxldCBpbWFnZUVsID0gY29udGV4dEltYWdlLl9lbGVtZW50O1xyXG4gICAgICAgIGxldCBjb3ZlciA9IGNvbnRleHRJbWFnZS5fY292ZXI7XHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvbnRleHRJbWFnZS5fY29udGFpbmVyO1xyXG4gICAgICAgIGxldCBpc05ld0NvbnRhaW5lciA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoY292ZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaXNOZXdDb250YWluZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICBpbWFnZUVsID0gY29udGV4dEltYWdlLl9lbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgY292ZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb3Zlci5jYWxsKHRoaXMsIGltYWdlRWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRhaW5lciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb3ZlciA9IGNvdmVyLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgaW1hZ2VFbCA9IGNvdmVyLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xyXG4gICAgICAgICAgICBpc05ld0NvbnRhaW5lciA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvbnRhaW5lci5jYWxsKHRoaXMsIGNvdmVyLCAnc2UtaW1hZ2UtY29udGFpbmVyJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc05ld0NvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb3Zlcik7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY292ZXIgPSBjb3ZlcjtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50ID0gaW1hZ2VFbDtcclxuICAgICAgICAgICAgaXNOZXdDb250YWluZXIgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIHNpemVcclxuICAgICAgICBsZXQgY2hhbmdlU2l6ZTtcclxuICAgICAgICBjb25zdCB4ID0gdGhpcy51dGlsLmlzTnVtYmVyKGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUpID8gY29udGV4dEltYWdlLmlucHV0WC52YWx1ZSArIGNvbnRleHRJbWFnZS5zaXplVW5pdCA6IGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWU7XHJcbiAgICAgICAgY29uc3QgeSA9IHRoaXMudXRpbC5pc051bWJlcihjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlKSA/IGNvbnRleHRJbWFnZS5pbnB1dFkudmFsdWUgKyBjb250ZXh0SW1hZ2Uuc2l6ZVVuaXQgOiBjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlO1xyXG4gICAgICAgIGlmICgvJSQvLnRlc3QoaW1hZ2VFbC5zdHlsZS53aWR0aCkpIHtcclxuICAgICAgICAgICAgY2hhbmdlU2l6ZSA9IHggIT09IGNvbnRhaW5lci5zdHlsZS53aWR0aCB8fCB5ICE9PSBjb250YWluZXIuc3R5bGUuaGVpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoYW5nZVNpemUgPSB4ICE9PSBpbWFnZUVsLnN0eWxlLndpZHRoIHx8IHkgIT09IGltYWdlRWwuc3R5bGUuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWx0XHJcbiAgICAgICAgaW1hZ2VFbC5hbHQgPSBjb250ZXh0SW1hZ2UuX2FsdFRleHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gY2FwdGlvblxyXG4gICAgICAgIGxldCBtb2RpZmllZENhcHRpb24gPSBmYWxzZTtcclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLl9jYXB0aW9uQ2hlY2tlZCkge1xyXG4gICAgICAgICAgICBpZiAoIWNvbnRleHRJbWFnZS5fY2FwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dEltYWdlLl9jYXB0aW9uID0gdGhpcy5wbHVnaW5zLmNvbXBvbmVudC5jcmVhdGVfY2FwdGlvbi5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgY292ZXIuYXBwZW5kQ2hpbGQoY29udGV4dEltYWdlLl9jYXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQ2FwdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEltYWdlLl9jYXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShjb250ZXh0SW1hZ2UuX2NhcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dEltYWdlLl9jYXB0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQ2FwdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxpbmtcclxuICAgICAgICBsZXQgaXNOZXdBbmNob3IgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGFuY2hvciA9IHRoaXMucGx1Z2lucy5hbmNob3IuY3JlYXRlQW5jaG9yLmNhbGwodGhpcywgY29udGV4dEltYWdlLmFuY2hvckN0eCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKGFuY2hvcikge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEltYWdlLl9saW5rRWxlbWVudCAhPT0gYW5jaG9yIHx8IChpc05ld0NvbnRhaW5lciAmJiAhY29udGFpbmVyLmNvbnRhaW5zKGFuY2hvcikpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2xpbmtFbGVtZW50ID0gYW5jaG9yLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjb3Zlci5pbnNlcnRCZWZvcmUodGhpcy5wbHVnaW5zLmltYWdlLm9uUmVuZGVyX2xpbmsuY2FsbCh0aGlzLCBpbWFnZUVsLCBjb250ZXh0SW1hZ2UuX2xpbmtFbGVtZW50KSwgY29udGV4dEltYWdlLl9jYXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIGlzTmV3QW5jaG9yID0gY29udGV4dEltYWdlLl9lbGVtZW50O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dEltYWdlLl9saW5rRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW1hZ2UtbGluaycsICdpbWFnZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0SW1hZ2UuX2xpbmtFbGVtZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGltYWdlRWxlbWVudCA9IGltYWdlRWw7XHJcbiAgICAgICAgICAgIGltYWdlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW1hZ2UtbGluaycsICcnKTtcclxuICAgICAgICAgICAgaWYgKGNvdmVyLmNvbnRhaW5zKGNvbnRleHRJbWFnZS5fbGlua0VsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbCA9IGltYWdlRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb3Zlci5yZW1vdmVDaGlsZChjb250ZXh0SW1hZ2UuX2xpbmtFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGNvdmVyLmluc2VydEJlZm9yZShuZXdFbCwgY29udGV4dEltYWdlLl9jYXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudCA9IGltYWdlRWwgPSBuZXdFbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGV4aXN0RWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGlzTmV3Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGV4aXN0RWxlbWVudCA9ICh0aGlzLnV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoY29udGV4dEltYWdlLl9lbGVtZW50LnBhcmVudE5vZGUpIHx8IHRoaXMudXRpbC5pc1d5c2l3eWdEaXYoY29udGV4dEltYWdlLl9lbGVtZW50LnBhcmVudE5vZGUpKSA/IFxyXG4gICAgICAgICAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50IDogXHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuaXNBbmNob3IoY29udGV4dEltYWdlLl9lbGVtZW50LnBhcmVudE5vZGUpID8gY29udGV4dEltYWdlLl9lbGVtZW50LnBhcmVudE5vZGUgOiB0aGlzLnV0aWwuZ2V0Rm9ybWF0RWxlbWVudChjb250ZXh0SW1hZ2UuX2VsZW1lbnQpIHx8IGNvbnRleHRJbWFnZS5fZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoY29udGV4dEltYWdlLl9lbGVtZW50LCB0aGlzLnV0aWwuaXNOb3RDaGVja2luZ05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQgPSBpc05ld0FuY2hvciA/IGFuY2hvciA6IGNvbnRleHRJbWFnZS5fZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjb250YWluZXIsIGV4aXN0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy51dGlsLmlzTGlzdENlbGwoZXhpc3RFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChjb250ZXh0SW1hZ2UuX2VsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IGV4aXN0RWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgcmVmZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oY29udGV4dEltYWdlLl9lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVFbXB0eU5vZGUocmVmZXIsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudXRpbC5pc0Zvcm1hdEVsZW1lbnQoZXhpc3RFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChjb250ZXh0SW1hZ2UuX2VsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IGV4aXN0RWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQgPSB0aGlzLnV0aWwuc3BsaXRFbGVtZW50KGV4aXN0RWxlbWVudCwgcmVmZXIpO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZXhpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGNvbnRleHRJbWFnZS5fZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlRW1wdHlOb2RlKGV4aXN0RWxlbWVudCwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgZXhpc3RFbGVtZW50LmlubmVySFRNTCA9IHRoaXMudXRpbC5odG1sUmVtb3ZlV2hpdGVTcGFjZShleGlzdEVsZW1lbnQuaW5uZXJIVE1MKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuaXNGb3JtYXRFbGVtZW50KGV4aXN0RWxlbWVudC5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHMgPSBleGlzdEVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZXhpc3RFbGVtZW50LnByZXZpb3VzU2libGluZyA/IGZvcm1hdHMubmV4dEVsZW1lbnRTaWJsaW5nIDogZm9ybWF0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fX3VwZGF0ZVRhZ3MubWFwKGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBleGlzdEVsZW1lbnQuY29udGFpbnMoY3VycmVudCk7IH0pLmxlbmd0aCA9PT0gMCkgdGhpcy51dGlsLnJlbW92ZUl0ZW0oZXhpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50ID0gdGhpcy51dGlsLmlzRmlndXJlcyhleGlzdEVsZW1lbnQucGFyZW50Tm9kZSkgPyBleGlzdEVsZW1lbnQucGFyZW50Tm9kZSA6IGV4aXN0RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoY29udGFpbmVyLCBleGlzdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbWFnZUVsID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50ID0gaW1hZ2VFbDtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb3ZlciA9IGNvdmVyO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc05ld0FuY2hvcikge1xyXG4gICAgICAgICAgICBpZiAoIWlzTmV3Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShhbmNob3IpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oaXNOZXdBbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXRpbC5nZXRMaXN0Q2hpbGRyZW4oYW5jaG9yLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gL0lNRy9pLnRlc3QoY3VycmVudC50YWdOYW1lKTsgfSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0oYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdHJhbnNmb3JtXHJcbiAgICAgICAgaWYgKG1vZGlmaWVkQ2FwdGlvbiB8fCAoIWNvbnRleHRJbWFnZS5fb25seVBlcmNlbnRhZ2UgJiYgY2hhbmdlU2l6ZSkpIHtcclxuICAgICAgICAgICAgaWYgKCFpbml0ICYmICgvXFxkKy8udGVzdChpbWFnZUVsLnN0eWxlLmhlaWdodCkgfHwgKHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWwgJiYgY29udGV4dEltYWdlLl9jYXB0aW9uQ2hlY2tlZCkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoLyUkLy50ZXN0KGNvbnRleHRJbWFnZS5pbnB1dFgudmFsdWUpIHx8IC8lJC8udGVzdChjb250ZXh0SW1hZ2UuaW5wdXRZLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5yZXNldFRyYW5zZm9ybS5jYWxsKHRoaXMsIGltYWdlRWwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuc2V0VHJhbnNmb3JtU2l6ZS5jYWxsKHRoaXMsIGltYWdlRWwsIHRoaXMudXRpbC5nZXROdW1iZXIoY29udGV4dEltYWdlLmlucHV0WC52YWx1ZSwgMCksIHRoaXMudXRpbC5nZXROdW1iZXIoY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSwgMCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzaXplXHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgaW1hZ2VFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvcG9ydGlvbicsIGNvbnRleHRJbWFnZS5fcHJvcG9ydGlvbkNoZWNrZWQpO1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmFwcGx5U2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhbGlnblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRBbGlnbi5jYWxsKHRoaXMsIG51bGwsIGltYWdlRWwsIG51bGwsIG51bGwpO1xyXG5cclxuICAgICAgICAvLyBzZXQgaW1hZ2VzSW5mb1xyXG4gICAgICAgIGlmIChpbml0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgaW1hZ2VFbCwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3BlbkNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoaW1hZ2VFbCwgJ2ltYWdlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgaWYgKCFub3RIaXN0b3J5UHVzaCkgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVfc3JjOiBmdW5jdGlvbiAoc3JjLCBlbGVtZW50LCBmaWxlKSB7XHJcbiAgICAgICAgZWxlbWVudC5zcmMgPSBzcmM7XHJcbiAgICAgICAgdGhpcy5fdy5zZXRUaW1lb3V0KHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmJpbmQodGhpcywgJ2ltYWdlJywgZWxlbWVudCwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgZmlsZSwgdHJ1ZSkpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGVsZW1lbnQsICdpbWFnZScpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIG9uTW9kaWZ5TW9kZTogZnVuY3Rpb24gKGVsZW1lbnQsIHNpemUpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSB0aGlzLmNvbnRleHQuaW1hZ2U7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9saW5rRWxlbWVudCA9IGNvbnRleHRJbWFnZS5hbmNob3JDdHgubGlua0FuY2hvciA9IHRoaXMudXRpbC5pc0FuY2hvcihlbGVtZW50LnBhcmVudE5vZGUpID8gZWxlbWVudC5wYXJlbnROb2RlIDogbnVsbDtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fY292ZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCAnRklHVVJFJyk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9jb250YWluZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLnV0aWwuaXNNZWRpYUNvbXBvbmVudCk7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9jYXB0aW9uID0gdGhpcy51dGlsLmdldENoaWxkRWxlbWVudChjb250ZXh0SW1hZ2UuX2NvdmVyLCAnRklHQ0FQVElPTicpO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fYWxpZ24gPSAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWxpZ24nKSB8fCBlbGVtZW50LnN0eWxlLmZsb2F0IHx8ICdub25lJztcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmZsb2F0ID0gJyc7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmFuY2hvci5zZXRDdHgoY29udGV4dEltYWdlLl9saW5rRWxlbWVudCwgY29udGV4dEltYWdlLmFuY2hvckN0eCk7XHJcblxyXG4gICAgICAgIGlmIChzaXplKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudF93ID0gc2l6ZS53O1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnRfaCA9IHNpemUuaDtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50X3QgPSBzaXplLnQ7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudF9sID0gc2l6ZS5sO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHVzZXJTaXplID0gY29udGV4dEltYWdlLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykgfHwgY29udGV4dEltYWdlLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW4nKTtcclxuICAgICAgICBsZXQgdywgaDtcclxuICAgICAgICBpZiAodXNlclNpemUpIHtcclxuICAgICAgICAgICAgdXNlclNpemUgPSB1c2VyU2l6ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB3ID0gdXNlclNpemVbMF07XHJcbiAgICAgICAgICAgIGggPSB1c2VyU2l6ZVsxXTtcclxuICAgICAgICB9IGVsc2UgaWYgKHNpemUpIHtcclxuICAgICAgICAgICAgdyA9IHNpemUudztcclxuICAgICAgICAgICAgaCA9IHNpemUuaDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fb3JpZ2luX3cgPSB3IHx8IGVsZW1lbnQuc3R5bGUud2lkdGggfHwgZWxlbWVudC53aWR0aCB8fCAnJztcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX29yaWdpbl9oID0gaCB8fCBlbGVtZW50LnN0eWxlLmhlaWdodCB8fCBlbGVtZW50LmhlaWdodCB8fCAnJztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVNYW5hZ2VyLCByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBvcGVuTW9kaWZ5OiBmdW5jdGlvbiAobm90T3Blbikge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLmltZ1VybEZpbGUpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl92X3NyYy5fbGlua1ZhbHVlID0gY29udGV4dEltYWdlLnByZXZpZXdTcmMudGV4dENvbnRlbnQgPSBjb250ZXh0SW1hZ2UuaW1nVXJsRmlsZS52YWx1ZSA9IGNvbnRleHRJbWFnZS5fZWxlbWVudC5zcmM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fYWx0VGV4dCA9IGNvbnRleHRJbWFnZS5hbHRUZXh0LnZhbHVlID0gY29udGV4dEltYWdlLl9lbGVtZW50LmFsdDtcclxuICAgICAgICAoY29udGV4dEltYWdlLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJzdW5lZGl0b3JfaW1hZ2VfcmFkaW9cIl1bdmFsdWU9XCInICsgY29udGV4dEltYWdlLl9hbGlnbiArICdcIl0nKSB8fCBjb250ZXh0SW1hZ2UubW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN1bmVkaXRvcl9pbWFnZV9yYWRpb1wiXVt2YWx1ZT1cIm5vbmVcIl0nKSkuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9hbGlnbiA9IGNvbnRleHRJbWFnZS5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX2ltYWdlX3JhZGlvXCJdOmNoZWNrZWQnKS52YWx1ZTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2NhcHRpb25DaGVja2VkID0gY29udGV4dEltYWdlLmNhcHRpb25DaGVja0VsLmNoZWNrZWQgPSAhIWNvbnRleHRJbWFnZS5fY2FwdGlvbjtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLl9yZXNpemluZykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zZXRNb2RpZnlJbnB1dFNpemUuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UsIHRoaXMucGx1Z2lucy5pbWFnZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW5vdE9wZW4pIHRoaXMucGx1Z2lucy5kaWFsb2cub3Blbi5jYWxsKHRoaXMsICdpbWFnZScsIHRydWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBhcHBseVNpemU6IGZ1bmN0aW9uICh3LCBoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG5cclxuICAgICAgICBpZiAoIXcpIHcgPSBjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlIHx8IHRoaXMub3B0aW9ucy5pbWFnZVdpZHRoO1xyXG4gICAgICAgIGlmICghaCkgaCA9IGNvbnRleHRJbWFnZS5pbnB1dFkudmFsdWUgfHwgdGhpcy5vcHRpb25zLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICgoY29udGV4dEltYWdlLl9vbmx5UGVyY2VudGFnZSAmJiAhIXcpIHx8IC8lJC8udGVzdCh3KSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0UGVyY2VudFNpemUuY2FsbCh0aGlzLCB3LCBoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoIXcgfHwgdyA9PT0gJ2F1dG8nKSAmJiAoIWggfHwgaCA9PT0gJ2F1dG8nKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0QXV0b1NpemUuY2FsbCh0aGlzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0U2l6ZS5jYWxsKHRoaXMsIHcsIGgsIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgc2l6ZVJldmVydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NpemVSZXZlcnQuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQuaW1hZ2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRTaXplOiBmdW5jdGlvbiAodywgaCwgbm90UmVzZXRQZXJjZW50YWdlLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0SW1hZ2UgPSB0aGlzLmNvbnRleHQuaW1hZ2U7XHJcbiAgICAgICAgY29uc3Qgb25seVcgPSAvXihyd3xsdykkLy50ZXN0KGRpcmVjdGlvbikgJiYgL1xcZCsvLnRlc3QoY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLmhlaWdodCk7XHJcbiAgICAgICAgY29uc3Qgb25seUggPSAvXih0aHxiaCkkLy50ZXN0KGRpcmVjdGlvbikgJiYgL1xcZCsvLnRlc3QoY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLndpZHRoKTtcclxuXHJcbiAgICAgICAgaWYgKCFvbmx5SCkge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLnV0aWwuaXNOdW1iZXIodykgPyB3ICsgY29udGV4dEltYWdlLnNpemVVbml0IDogdztcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmNhbmNlbFBlcmNlbnRBdHRyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghb25seVcpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMudXRpbC5pc051bWJlcihoKSA/IGggKyBjb250ZXh0SW1hZ2Uuc2l6ZVVuaXQgOiAvJSQvLnRlc3QoaCkgPyAnJyA6IGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLl9hbGlnbiA9PT0gJ2NlbnRlcicpIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRBbGlnbi5jYWxsKHRoaXMsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIGlmICghbm90UmVzZXRQZXJjZW50YWdlKSBjb250ZXh0SW1hZ2UuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXBlcmNlbnRhZ2UnKTtcclxuXHJcbiAgICAgICAgLy8gc2F2ZSBjdXJyZW50IHNpemVcclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zYXZlQ3VycmVudFNpemUuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRBdXRvU2l6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5fY2FwdGlvbikgY29udGV4dEltYWdlLl9jYXB0aW9uLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5yZXNldFRyYW5zZm9ybS5jYWxsKHRoaXMsIGNvbnRleHRJbWFnZS5fZWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLmNhbmNlbFBlcmNlbnRBdHRyLmNhbGwodGhpcyk7XHJcblxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9ICcnO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICBpZihjb250ZXh0SW1hZ2UuX2NvdmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY292ZXIuc3R5bGUud2lkdGggPSAnJztcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb3Zlci5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRBbGlnbi5jYWxsKHRoaXMsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScsICdhdXRvLGF1dG8nKTtcclxuXHJcbiAgICAgICAgLy8gc2F2ZSBjdXJyZW50IHNpemVcclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zYXZlQ3VycmVudFNpemUuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgc2V0T3JpZ2luU2l6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXBlcmNlbnRhZ2UnKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnJlc2V0VHJhbnNmb3JtLmNhbGwodGhpcywgY29udGV4dEltYWdlLl9lbGVtZW50KTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2UuY2FuY2VsUGVyY2VudEF0dHIuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3JpZ2luU2l6ZSA9IChjb250ZXh0SW1hZ2UuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicpIHx8ICcnKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgIGNvbnN0IHcgPSBvcmlnaW5TaXplWzBdO1xyXG4gICAgICAgIGNvbnN0IGggPSBvcmlnaW5TaXplWzFdO1xyXG5cclxuICAgICAgICBpZiAob3JpZ2luU2l6ZSkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEltYWdlLl9vbmx5UGVyY2VudGFnZSB8fCAoLyUkLy50ZXN0KHcpICYmICgvJSQvLnRlc3QoaCkgfHwgIS9cXGQvLnRlc3QoaCkpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLnNldFBlcmNlbnRTaXplLmNhbGwodGhpcywgdywgaCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuaW1hZ2Uuc2V0U2l6ZS5jYWxsKHRoaXMsIHcsIGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzYXZlIGN1cnJlbnQgc2l6ZVxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zYXZlQ3VycmVudFNpemUuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgc2V0UGVyY2VudFNpemU6IGZ1bmN0aW9uICh3LCBoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGggPSAhIWggJiYgIS8lJC8udGVzdChoKSAmJiAhdGhpcy51dGlsLmdldE51bWJlcihoLCAwKSA/IHRoaXMudXRpbC5pc051bWJlcihoKSA/IGggKyAnJScgOiBoIDogdGhpcy51dGlsLmlzTnVtYmVyKGgpID8gaCArIGNvbnRleHRJbWFnZS5zaXplVW5pdCA6IChoIHx8ICcnKTtcclxuICAgICAgICBjb25zdCBoZWlnaHRQZXJjZW50YWdlID0gLyUkLy50ZXN0KGgpO1xyXG5cclxuICAgICAgICBpZihjb250ZXh0SW1hZ2UuX2NvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lci5zdHlsZS53aWR0aCA9IHRoaXMudXRpbC5pc051bWJlcih3KSA/IHcgKyAnJScgOiB3O1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoY29udGV4dEltYWdlLl9jb3Zlcikge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvdmVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX2NvdmVyLnN0eWxlLmhlaWdodCA9ICFoZWlnaHRQZXJjZW50YWdlID8gJycgOiBoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb250ZXh0SW1hZ2UuX2VsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodFBlcmNlbnRhZ2UgPyAnJyA6IGg7XHJcbiAgICAgICAgY29udGV4dEltYWdlLl9lbGVtZW50LnN0eWxlLm1heFdpZHRoID0gJyc7XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuX2FsaWduID09PSAnY2VudGVyJykgdGhpcy5wbHVnaW5zLmltYWdlLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcblxyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScsIHcgKyAnLCcgKyBoKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuc2V0Q2FwdGlvblBvc2l0aW9uLmNhbGwodGhpcywgY29udGV4dEltYWdlLl9lbGVtZW50KTtcclxuXHJcbiAgICAgICAgLy8gc2F2ZSBjdXJyZW50IHNpemVcclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zYXZlQ3VycmVudFNpemUuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBjYW5jZWxQZXJjZW50QXR0cjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRJbWFnZSA9IHRoaXMuY29udGV4dC5pbWFnZTtcclxuICAgICAgICBcclxuICAgICAgICBpZihjb250ZXh0SW1hZ2UuX2NvdmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fY292ZXIuc3R5bGUud2lkdGggPSAnJztcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb3Zlci5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoY29udGV4dEltYWdlLl9jb250YWluZXIpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb250YWluZXIuc3R5bGUud2lkdGggPSAnJztcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY29udGV4dEltYWdlLl9jb250YWluZXIsIHRoaXMuY29udGV4dC5pbWFnZS5fZmxvYXRDbGFzc1JlZ0V4cCk7XHJcbiAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNvbnRleHRJbWFnZS5fY29udGFpbmVyLCAnX19zZV9fZmxvYXQtJyArIGNvbnRleHRJbWFnZS5fYWxpZ24pO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLl9hbGlnbiA9PT0gJ2NlbnRlcicpIHRoaXMucGx1Z2lucy5pbWFnZS5zZXRBbGlnbi5jYWxsKHRoaXMsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRBbGlnbjogZnVuY3Rpb24gKGFsaWduLCBlbGVtZW50LCBjb3ZlciwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghYWxpZ24pIGFsaWduID0gY29udGV4dEltYWdlLl9hbGlnbjtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIGVsZW1lbnQgPSBjb250ZXh0SW1hZ2UuX2VsZW1lbnQ7XHJcbiAgICAgICAgaWYgKCFjb3ZlcikgY292ZXIgPSBjb250ZXh0SW1hZ2UuX2NvdmVyO1xyXG4gICAgICAgIGlmICghY29udGFpbmVyKSBjb250YWluZXIgPSBjb250ZXh0SW1hZ2UuX2NvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgaWYgKC8lJC8udGVzdChlbGVtZW50LnN0eWxlLndpZHRoKSAmJiBhbGlnbiA9PT0gJ2NlbnRlcicpIHtcclxuICAgICAgICAgICAgaWYoY29udGFpbmVyKSBjb250YWluZXIuc3R5bGUubWluV2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIGlmKGNvdmVyKSBjb3Zlci5zdHlsZS53aWR0aCA9IGNvbnRhaW5lci5zdHlsZS53aWR0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZihjb250YWluZXIpIGNvbnRhaW5lci5zdHlsZS5taW5XaWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBpZihjb3ZlcikgY292ZXIuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRleHQucmVzaXppbmcuX3JvdGF0ZVZlcnRpY2FsID8gKGVsZW1lbnQuc3R5bGUuaGVpZ2h0IHx8IGVsZW1lbnQub2Zmc2V0SGVpZ2h0KSA6ICgoIWVsZW1lbnQuc3R5bGUud2lkdGggfHwgZWxlbWVudC5zdHlsZS53aWR0aCA9PT0gJ2F1dG8nKSA/ICcnIDogZWxlbWVudC5zdHlsZS53aWR0aCB8fCAnMTAwJScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnV0aWwuaGFzQ2xhc3MoY29udGFpbmVyLCAnX19zZV9fZmxvYXQtJyArIGFsaWduKSkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY29udGFpbmVyLCBjb250ZXh0SW1hZ2UuX2Zsb2F0Q2xhc3NSZWdFeHApO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGFpbmVyLCAnX19zZV9fZmxvYXQtJyArIGFsaWduKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYWxpZ24nLCBhbGlnbik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEltYWdlID0gdGhpcy5jb250ZXh0LmltYWdlO1xyXG4gICAgICAgIGlmIChjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlKSBjb250ZXh0SW1hZ2UuaW1nSW5wdXRGaWxlLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5pbWdVcmxGaWxlKSBjb250ZXh0SW1hZ2UuX3Zfc3JjLl9saW5rVmFsdWUgPSBjb250ZXh0SW1hZ2UucHJldmlld1NyYy50ZXh0Q29udGVudCA9IGNvbnRleHRJbWFnZS5pbWdVcmxGaWxlLnZhbHVlID0gJyc7XHJcbiAgICAgICAgaWYgKGNvbnRleHRJbWFnZS5pbWdJbnB1dEZpbGUgJiYgY29udGV4dEltYWdlLmltZ1VybEZpbGUpIHtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmltZ1VybEZpbGUucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UucHJldmlld1NyYy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dEltYWdlLmFsdFRleHQudmFsdWUgPSAnJztcclxuICAgICAgICBjb250ZXh0SW1hZ2UubW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN1bmVkaXRvcl9pbWFnZV9yYWRpb1wiXVt2YWx1ZT1cIm5vbmVcIl0nKS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBjb250ZXh0SW1hZ2UuY2FwdGlvbkNoZWNrRWwuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnRleHRJbWFnZS5fZWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmltYWdlLm9wZW5UYWIuY2FsbCh0aGlzLCAnaW5pdCcpO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dEltYWdlLl9yZXNpemluZykge1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuaW5wdXRYLnZhbHVlID0gdGhpcy5vcHRpb25zLmltYWdlV2lkdGggPT09IGNvbnRleHRJbWFnZS5fZGVmYXVsdFNpemVYID8gJycgOiB0aGlzLm9wdGlvbnMuaW1hZ2VXaWR0aDtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLmlucHV0WS52YWx1ZSA9IHRoaXMub3B0aW9ucy5pbWFnZUhlaWdodCA9PT0gY29udGV4dEltYWdlLl9kZWZhdWx0U2l6ZVkgPyAnJyA6IHRoaXMub3B0aW9ucy5pbWFnZUhlaWdodDtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLnByb3BvcnRpb24uY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnRleHRJbWFnZS5fcmF0aW8gPSBmYWxzZTtcclxuICAgICAgICAgICAgY29udGV4dEltYWdlLl9yYXRpb1ggPSAxO1xyXG4gICAgICAgICAgICBjb250ZXh0SW1hZ2UuX3JhdGlvWSA9IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMuYW5jaG9yLmluaXQuY2FsbCh0aGlzLCBjb250ZXh0SW1hZ2UuYW5jaG9yQ3R4KTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBkaWFsb2cgZnJvbSAnLi4vbW9kdWxlcy9kaWFsb2cnO1xyXG5pbXBvcnQgY29tcG9uZW50IGZyb20gJy4uL21vZHVsZXMvY29tcG9uZW50JztcclxuaW1wb3J0IHJlc2l6aW5nIGZyb20gJy4uL21vZHVsZXMvcmVzaXppbmcnO1xyXG5pbXBvcnQgZmlsZU1hbmFnZXIgZnJvbSAnLi4vbW9kdWxlcy9maWxlTWFuYWdlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAndmlkZW8nLFxyXG4gICAgZGlzcGxheTogJ2RpYWxvZycsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29yZS5hZGRNb2R1bGUoW2RpYWxvZywgY29tcG9uZW50LCByZXNpemluZywgZmlsZU1hbmFnZXJdKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IGNvbnRleHQudmlkZW8gPSB7XHJcbiAgICAgICAgICAgIF9pbmZvTGlzdDogW10sIC8vIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICAgICAgICBfaW5mb0luZGV4OiAwLCAvLyBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAgICAgICAgX3VwbG9hZEZpbGVMZW5ndGg6IDAsIC8vIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICAgICAgICBmb2N1c0VsZW1lbnQ6IG51bGwsIC8vIEBPdmVycmlkZSBkaWFsb2cgLy8gVGhpcyBlbGVtZW50IGhhcyBmb2N1cyB3aGVuIHRoZSBkaWFsb2cgaXMgb3BlbmVkLlxyXG4gICAgICAgICAgICBzaXplVW5pdDogb3B0aW9ucy5fdmlkZW9TaXplVW5pdCxcclxuICAgICAgICAgICAgX2FsaWduOiAnbm9uZScsXHJcbiAgICAgICAgICAgIF9mbG9hdENsYXNzUmVnRXhwOiAnX19zZV9fZmxvYXRcXFxcLVthLXpdKycsXHJcbiAgICAgICAgICAgIF95b3V0dWJlUXVlcnk6IG9wdGlvbnMueW91dHViZVF1ZXJ5LFxyXG4gICAgICAgICAgICBfdmlkZW9SYXRpbzogKG9wdGlvbnMudmlkZW9SYXRpbyAqIDEwMCkgKyAnJScsXHJcbiAgICAgICAgICAgIF9kZWZhdWx0UmF0aW86IChvcHRpb25zLnZpZGVvUmF0aW8gKiAxMDApICsgJyUnLFxyXG4gICAgICAgICAgICBfbGlua1ZhbHVlOiAnJyxcclxuICAgICAgICAgICAgLy8gQHJlcXVpcmUgQE92ZXJyaWRlIGNvbXBvbmVudFxyXG4gICAgICAgICAgICBfZWxlbWVudDogbnVsbCxcclxuICAgICAgICAgICAgX2NvdmVyOiBudWxsLFxyXG4gICAgICAgICAgICBfY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICAvLyBAT3ZlcnJpZGUgcmVzaXppbmcgcHJvcGVydGllc1xyXG4gICAgICAgICAgICBpbnB1dFg6IG51bGwsXHJcbiAgICAgICAgICAgIGlucHV0WTogbnVsbCxcclxuICAgICAgICAgICAgX2VsZW1lbnRfdzogMSxcclxuICAgICAgICAgICAgX2VsZW1lbnRfaDogMSxcclxuICAgICAgICAgICAgX2VsZW1lbnRfbDogMCxcclxuICAgICAgICAgICAgX2VsZW1lbnRfdDogMCxcclxuICAgICAgICAgICAgX2RlZmF1bHRTaXplWDogJzEwMCUnLFxyXG4gICAgICAgICAgICBfZGVmYXVsdFNpemVZOiAob3B0aW9ucy52aWRlb1JhdGlvICogMTAwKSArICclJyxcclxuICAgICAgICAgICAgX29yaWdpbl93OiBvcHRpb25zLnZpZGVvV2lkdGggPT09ICcxMDAlJyA/ICcnIDogb3B0aW9ucy52aWRlb1dpZHRoLFxyXG4gICAgICAgICAgICBfb3JpZ2luX2g6IG9wdGlvbnMudmlkZW9IZWlnaHQgPT09ICc1Ni4yNSUnID8gJycgOiBvcHRpb25zLnZpZGVvSGVpZ2h0LFxyXG4gICAgICAgICAgICBfcHJvcG9ydGlvbkNoZWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIF9yZXNpemluZzogb3B0aW9ucy52aWRlb1Jlc2l6aW5nLFxyXG4gICAgICAgICAgICBfcmVzaXplRG90SGlkZTogIW9wdGlvbnMudmlkZW9IZWlnaHRTaG93LFxyXG4gICAgICAgICAgICBfcm90YXRpb246IG9wdGlvbnMudmlkZW9Sb3RhdGlvbixcclxuICAgICAgICAgICAgX2FsaWduSGlkZTogIW9wdGlvbnMudmlkZW9BbGlnblNob3csXHJcbiAgICAgICAgICAgIF9vbmx5UGVyY2VudGFnZTogb3B0aW9ucy52aWRlb1NpemVPbmx5UGVyY2VudGFnZSxcclxuICAgICAgICAgICAgX3JhdGlvOiBmYWxzZSxcclxuICAgICAgICAgICAgX3JhdGlvWDogMSxcclxuICAgICAgICAgICAgX3JhdGlvWTogMSxcclxuICAgICAgICAgICAgX2NhcHRpb25TaG93OiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiB2aWRlbyBkaWFsb2cgKi9cclxuICAgICAgICBsZXQgdmlkZW9fZGlhbG9nID0gdGhpcy5zZXREaWFsb2coY29yZSk7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLm1vZGFsID0gdmlkZW9fZGlhbG9nO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZSA9IHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX3ZpZGVvX2ZpbGUnKTtcclxuICAgICAgICBjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlID0gdmlkZW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5zZS1pbnB1dC11cmwnKTtcclxuICAgICAgICBjb250ZXh0VmlkZW8uZm9jdXNFbGVtZW50ID0gY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZSB8fCBjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGU7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLnByZXZpZXcgPSB2aWRlb19kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWxpbmstcHJldmlldycpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCdmb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5zdWJtaXQuYmluZChjb3JlKSk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZSkgdmlkZW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5zZS1kaWFsb2ctZmlsZXMtZWRnZS1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX3JlbW92ZVNlbGVjdGVkRmlsZXMuYmluZChjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUsIGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUsIGNvbnRleHRWaWRlby5wcmV2aWV3KSk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZSAmJiBjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlKSBjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fZmlsZUlucHV0Q2hhbmdlLmJpbmQoY29udGV4dFZpZGVvKSk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUpIGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbkxpbmtQcmV2aWV3LmJpbmQoY29udGV4dFZpZGVvLnByZXZpZXcsIGNvbnRleHRWaWRlbywgb3B0aW9ucy5saW5rUHJvdG9jb2wpKTtcclxuXHJcbiAgICAgICAgY29udGV4dFZpZGVvLnByb3BvcnRpb24gPSB7fTtcclxuICAgICAgICBjb250ZXh0VmlkZW8udmlkZW9SYXRpb09wdGlvbiA9IHt9O1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFggPSB7fTtcclxuICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZID0ge307XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudmlkZW9SZXNpemluZykge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8ucHJvcG9ydGlvbiA9IHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX3ZpZGVvX2NoZWNrX3Byb3BvcnRpb24nKTtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLnZpZGVvUmF0aW9PcHRpb24gPSB2aWRlb19kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLXZpZGVvLXJhdGlvJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFggPSB2aWRlb19kaWFsb2cucXVlcnlTZWxlY3RvcignLl9zZV92aWRlb19zaXplX3gnKTtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WSA9IHZpZGVvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuX3NlX3ZpZGVvX3NpemVfeScpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRYLnZhbHVlID0gb3B0aW9ucy52aWRlb1dpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLnZhbHVlID0gb3B0aW9ucy52aWRlb0hlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFguYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLnNldElucHV0U2l6ZS5iaW5kKGNvcmUsICd4JykpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5zZXRJbnB1dFNpemUuYmluZChjb3JlLCAneScpKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFguYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5zZXRSYXRpby5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnNldFJhdGlvLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8ucHJvcG9ydGlvbi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnNldFJhdGlvLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8udmlkZW9SYXRpb09wdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnNldFZpZGVvUmF0aW8uYmluZChjb3JlKSk7XHJcblxyXG4gICAgICAgICAgICB2aWRlb19kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWRpYWxvZy1idG4tcmV2ZXJ0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnNpemVSZXZlcnQuYmluZChjb3JlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiogYXBwZW5kIGh0bWwgKi9cclxuICAgICAgICBjb250ZXh0LmRpYWxvZy5tb2RhbC5hcHBlbmRDaGlsZCh2aWRlb19kaWFsb2cpO1xyXG5cclxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXHJcbiAgICAgICAgdmlkZW9fZGlhbG9nID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIGRpYWxvZyAqL1xyXG4gICAgc2V0RGlhbG9nOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZyA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgZGlhbG9nLmNsYXNzTmFtZSA9ICdzZS1kaWFsb2ctY29udGVudCc7XHJcbiAgICAgICAgZGlhbG9nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgbGV0IGh0bWwgPSAnJyArXHJcbiAgICAgICAgICAgICc8Zm9ybSBtZXRob2Q9XCJwb3N0XCIgZW5jdHlwZT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWhlYWRlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJjbG9zZVwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1jbG9zZVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMuY2FuY2VsICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtbW9kYWwtdGl0bGVcIj4nICsgbGFuZy5kaWFsb2dCb3gudmlkZW9Cb3gudGl0bGUgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctYm9keVwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi52aWRlb0ZpbGVJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC52aWRlb0JveC5maWxlICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtLWZpbGVzXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWZvcm0gX3NlX3ZpZGVvX2ZpbGVcIiB0eXBlPVwiZmlsZVwiIGFjY2VwdD1cIicgKyBvcHRpb24udmlkZW9BY2NlcHQgKyAnXCInICsgKG9wdGlvbi52aWRlb011bHRpcGxlRmlsZSA/ICcgbXVsdGlwbGU9XCJtdWx0aXBsZVwiJyA6ICcnKSArICcvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJmaWxlc1JlbW92ZVwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1maWxlcy1lZGdlLWJ1dHRvbiBzZS1maWxlLXJlbW92ZVwiIHRpdGxlPVwiJyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJ1wiPicgKyBjb3JlLmljb25zLmNhbmNlbCArICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnZpZGVvVXJsSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3gudmlkZW9Cb3gudXJsICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtZm9ybSBzZS1pbnB1dC11cmxcIiB0eXBlPVwidGV4dFwiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHByZSBjbGFzcz1cInNlLWxpbmstcHJldmlld1wiPjwvcHJlPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb24udmlkZW9SZXNpemluZykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmF0aW9MaXN0ID0gb3B0aW9uLnZpZGVvUmF0aW9MaXN0IHx8IFt7bmFtZTogJzE2OjknLCB2YWx1ZTogMC41NjI1fSwge25hbWU6ICc0OjMnLCB2YWx1ZTogMC43NX0sIHtuYW1lOiAnMjE6OScsIHZhbHVlOiAwLjQyODV9XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gb3B0aW9uLnZpZGVvUmF0aW87XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbmx5UGVyY2VudGFnZSA9IG9wdGlvbi52aWRlb1NpemVPbmx5UGVyY2VudGFnZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlQZXJjZW50RGlzcGxheSA9IG9ubHlQZXJjZW50YWdlID8gJyBzdHlsZT1cImRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcIicgOiAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodERpc3BsYXkgPSAhb3B0aW9uLnZpZGVvSGVpZ2h0U2hvdyA/ICcgc3R5bGU9XCJkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XCInIDogJyc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYXRpb0Rpc3BsYXkgPSAhb3B0aW9uLnZpZGVvUmF0aW9TaG93ID8gJyBzdHlsZT1cImRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcIicgOiAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlXaWR0aERpc3BsYXkgPSAhb25seVBlcmNlbnRhZ2UgJiYgIW9wdGlvbi52aWRlb0hlaWdodFNob3cgJiYgIW9wdGlvbi52aWRlb1JhdGlvU2hvdyA/ICcgc3R5bGU9XCJkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XCInIDogJyc7XHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLXNpemUtdGV4dFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNpemUtd1wiPicgKyBsYW5nLmRpYWxvZ0JveC53aWR0aCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNlLWRpYWxvZy1zaXplLXhcIj4mbmJzcDs8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNpemUtaFwiJyArIGhlaWdodERpc3BsYXkgKyAnPicgKyBsYW5nLmRpYWxvZ0JveC5oZWlnaHQgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWwgY2xhc3M9XCJzaXplLWhcIicgKyByYXRpb0Rpc3BsYXkgKyAnPignICsgbGFuZy5kaWFsb2dCb3gucmF0aW8gKyAnKTwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWNvbnRyb2wgX3NlX3ZpZGVvX3NpemVfeFwiIHBsYWNlaG9sZGVyPVwiMTAwJVwiJyArIChvbmx5UGVyY2VudGFnZSA/ICcgdHlwZT1cIm51bWJlclwiIG1pbj1cIjFcIicgOiAndHlwZT1cInRleHRcIicpICsgKG9ubHlQZXJjZW50YWdlID8gJyBtYXg9XCIxMDBcIicgOiAnJykgKyAnLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInNlLWRpYWxvZy1zaXplLXhcIicgKyBvbmx5V2lkdGhEaXNwbGF5ICsgJz4nICsgKG9ubHlQZXJjZW50YWdlID8gJyUnIDogJ3gnKSArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwic2UtaW5wdXQtY29udHJvbCBfc2VfdmlkZW9fc2l6ZV95XCIgcGxhY2Vob2xkZXI9XCInICsgKG9wdGlvbi52aWRlb1JhdGlvICogMTAwKSArICclXCInICsgKG9ubHlQZXJjZW50YWdlID8gJyB0eXBlPVwibnVtYmVyXCIgbWluPVwiMVwiJyA6ICd0eXBlPVwidGV4dFwiJykgKyAob25seVBlcmNlbnRhZ2UgPyAnIG1heD1cIjEwMFwiJyA6ICcnKSArIGhlaWdodERpc3BsYXkgKyAnLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzZWxlY3QgY2xhc3M9XCJzZS1pbnB1dC1zZWxlY3Qgc2UtdmlkZW8tcmF0aW9cIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5yYXRpbyArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LnJhdGlvICsgJ1wiJyArIHJhdGlvRGlzcGxheSArICc+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGVpZ2h0RGlzcGxheSkgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIlwiPiAtIDwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmF0aW9MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT1cIicgKyByYXRpb0xpc3RbaV0udmFsdWUgKyAnXCInICsgKHJhdGlvLnRvU3RyaW5nKCkgPT09IHJhdGlvTGlzdFtpXS52YWx1ZS50b1N0cmluZygpID8gJyBzZWxlY3RlZCcgOiAnJykgKyAnPicgKyByYXRpb0xpc3RbaV0ubmFtZSArICc8L29wdGlvbj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8L3NlbGVjdD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LnJldmVydEJ1dHRvbiArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LnJldmVydEJ1dHRvbiArICdcIiBjbGFzcz1cInNlLWJ0biBzZS1kaWFsb2ctYnRuLXJldmVydFwiIHN0eWxlPVwiZmxvYXQ6IHJpZ2h0O1wiPicgKyBjb3JlLmljb25zLnJldmVydCArICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9ybSBzZS1kaWFsb2ctZm9ybS1mb290ZXJcIicgKyBvbmx5UGVyY2VudERpc3BsYXkgKyBvbmx5V2lkdGhEaXNwbGF5ICsgJz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLWNoZWNrIF9zZV92aWRlb19jaGVja19wcm9wb3J0aW9uXCIgY2hlY2tlZC8+Jm5ic3A7JyArIGxhbmcuZGlhbG9nQm94LnByb3BvcnRpb24gKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb290ZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdicgKyAob3B0aW9uLnZpZGVvQWxpZ25TaG93ID8gJycgOiAnIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiJykgKyAnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwic3VuZWRpdG9yX3ZpZGVvX3JhZGlvXCIgY2xhc3M9XCJzZS1kaWFsb2ctYnRuLXJhZGlvXCIgdmFsdWU9XCJub25lXCIgY2hlY2tlZD4nICsgbGFuZy5kaWFsb2dCb3guYmFzaWMgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInN1bmVkaXRvcl92aWRlb19yYWRpb1wiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1yYWRpb1wiIHZhbHVlPVwibGVmdFwiPicgKyBsYW5nLmRpYWxvZ0JveC5sZWZ0ICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJzdW5lZGl0b3JfdmlkZW9fcmFkaW9cIiBjbGFzcz1cInNlLWRpYWxvZy1idG4tcmFkaW9cIiB2YWx1ZT1cImNlbnRlclwiPicgKyBsYW5nLmRpYWxvZ0JveC5jZW50ZXIgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInN1bmVkaXRvcl92aWRlb19yYWRpb1wiIGNsYXNzPVwic2UtZGlhbG9nLWJ0bi1yYWRpb1wiIHZhbHVlPVwicmlnaHRcIj4nICsgbGFuZy5kaWFsb2dCb3gucmlnaHQgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwic2UtYnRuLXByaW1hcnlcIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnXCI+PHNwYW4+JyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICc8L3NwYW4+PC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Zvcm0+JztcclxuXHJcbiAgICAgICAgZGlhbG9nLmlubmVySFRNTCA9IGh0bWw7XHJcblxyXG4gICAgICAgIHJldHVybiBkaWFsb2c7XHJcbiAgICB9LFxyXG5cclxuICAgIF9maWxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9JbnB1dEZpbGUudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy52aWRlb1VybEZpbGUucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXcuc3R5bGUudGV4dERlY29yYXRpb24gPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvVXJsRmlsZS5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlldy5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICdsaW5lLXRocm91Z2gnO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3JlbW92ZVNlbGVjdGVkRmlsZXM6IGZ1bmN0aW9uICh1cmxJbnB1dCwgcHJldmlldykge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSAnJztcclxuICAgICAgICBpZiAodXJsSW5wdXQpIHtcclxuICAgICAgICAgICAgdXJsSW5wdXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICBwcmV2aWV3LnN0eWxlLnRleHREZWNvcmF0aW9uID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfb25MaW5rUHJldmlldzogZnVuY3Rpb24gKGNvbnRleHQsIHByb3RvY29sLCBlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgaWYgKC9ePGlmcmFtZS4qXFwvaWZyYW1lPiQvLnRlc3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuX2xpbmtWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gJzxJRnJhbWUgOnNyYz1cIi4uXCI+PC9JRnJhbWU+JztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZXh0Ll9saW5rVmFsdWUgPSB0aGlzLnRleHRDb250ZW50ID0gIXZhbHVlID8gJycgOiAocHJvdG9jb2wgJiYgdmFsdWUuaW5kZXhPZignOi8vJykgPT09IC0xICYmIHZhbHVlLmluZGV4T2YoJyMnKSAhPT0gMCkgPyBwcm90b2NvbCArIHZhbHVlIDogdmFsdWUuaW5kZXhPZignOi8vJykgPT09IC0xID8gJy8nICsgdmFsdWUgOiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRUYWdBdHRyczogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY29udHJvbHMnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXR0cnMgPSB0aGlzLm9wdGlvbnMudmlkZW9UYWdBdHRycztcclxuICAgICAgICBpZiAoIWF0dHJzKSByZXR1cm47XHJcblxyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBhdHRycykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudXRpbC5oYXNPd24oYXR0cnMsIGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlVmlkZW9UYWc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCB2aWRlb1RhZyA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdWSURFTycpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5fc2V0VGFnQXR0cnMuY2FsbCh0aGlzLCB2aWRlb1RhZyk7XHJcbiAgICAgICAgcmV0dXJuIHZpZGVvVGFnO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0SWZyYW1lQXR0cnM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5mcmFtZUJvcmRlciA9ICcwJztcclxuICAgICAgICBlbGVtZW50LmFsbG93RnVsbHNjcmVlbiA9IHRydWU7XHJcblxyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gdGhpcy5vcHRpb25zLnZpZGVvSWZyYW1lQXR0cnM7XHJcbiAgICAgICAgaWYgKCFhdHRycykgcmV0dXJuO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnV0aWwuaGFzT3duKGF0dHJzLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZUlmcmFtZVRhZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGlmcmFtZVRhZyA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdJRlJBTUUnKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uX3NldElmcmFtZUF0dHJzLmNhbGwodGhpcywgaWZyYW1lVGFnKTtcclxuICAgICAgICByZXR1cm4gaWZyYW1lVGFnO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBAUmVxdWlyZWQgZmlsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgZmlsZVRhZ3M6IFsnaWZyYW1lJywgJ3ZpZGVvJ10sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZSwgcmVzaXppbmcsIGZpbGVNYW5hZ2VyXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMgY2FsbGVkIGZyb20gY29yZS5zZWxlY3RDb21wb25lbnQuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgc2VsZWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5vbk1vZGlmeU1vZGUuY2FsbCh0aGlzLCBlbGVtZW50LCB0aGlzLnBsdWdpbnMucmVzaXppbmcuY2FsbF9jb250cm9sbGVyX3Jlc2l6ZS5jYWxsKHRoaXMsIGVsZW1lbnQsICd2aWRlbycpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgZnJhbWUgPSBlbGVtZW50IHx8IHRoaXMuY29udGV4dC52aWRlby5fZWxlbWVudDtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRleHQudmlkZW8uX2NvbnRhaW5lcjtcclxuICAgICAgICBjb25zdCBkYXRhSW5kZXggPSBmcmFtZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSAqIDE7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25WaWRlb0RlbGV0ZUJlZm9yZSA9PT0gJ2Z1bmN0aW9uJyAmJiAodGhpcy5mdW5jdGlvbnMub25WaWRlb0RlbGV0ZUJlZm9yZShmcmFtZSwgY29udGFpbmVyLCBkYXRhSW5kZXgsIHRoaXMpID09PSBmYWxzZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGZvY3VzRWwgPSAoY29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgY29udGFpbmVyLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgY29uc3QgZW1wdHlEaXYgPSBjb250YWluZXIucGFyZW50Tm9kZTtcclxuICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5pbml0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICBpZiAoZW1wdHlEaXYgIT09IHRoaXMuY29udGV4dC5lbGVtZW50Lnd5c2l3eWcpIHRoaXMudXRpbC5yZW1vdmVJdGVtQWxsUGFyZW50cyhlbXB0eURpdiwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDA7IH0sIG51bGwpO1xyXG5cclxuICAgICAgICAvLyBmb2N1c1xyXG4gICAgICAgIHRoaXMuZm9jdXNFZGdlKGZvY3VzRWwpO1xyXG5cclxuICAgICAgICAvLyBldmVudFxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5kZWxldGVJbmZvLmNhbGwodGhpcywgJ3ZpZGVvJywgZGF0YUluZGV4LCB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkKTtcclxuXHJcbiAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKHVwZGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuXHJcbiAgICAgICAgaWYgKCF1cGRhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WC52YWx1ZSA9IGNvbnRleHRWaWRlby5fb3JpZ2luX3cgPSB0aGlzLm9wdGlvbnMudmlkZW9XaWR0aCA9PT0gY29udGV4dFZpZGVvLl9kZWZhdWx0U2l6ZVggPyAnJyA6IHRoaXMub3B0aW9ucy52aWRlb1dpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLnZhbHVlID0gY29udGV4dFZpZGVvLl9vcmlnaW5faCA9IHRoaXMub3B0aW9ucy52aWRlb0hlaWdodCA9PT0gY29udGV4dFZpZGVvLl9kZWZhdWx0U2l6ZVkgPyAnJyA6IHRoaXMub3B0aW9ucy52aWRlb0hlaWdodDtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLnByb3BvcnRpb24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlICYmIHRoaXMub3B0aW9ucy52aWRlb011bHRpcGxlRmlsZSkgY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlICYmIHRoaXMub3B0aW9ucy52aWRlb011bHRpcGxlRmlsZSkgY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlLnJlbW92ZUF0dHJpYnV0ZSgnbXVsdGlwbGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8uX3Jlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRWaWRlb1JhdGlvU2VsZWN0LmNhbGwodGhpcywgY29udGV4dFZpZGVvLl9vcmlnaW5faCB8fCBjb250ZXh0VmlkZW8uX2RlZmF1bHRSYXRpbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIG9wZW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLm9wZW4uY2FsbCh0aGlzLCAndmlkZW8nLCAndmlkZW8nID09PSB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRWaWRlb1JhdGlvOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWU7XHJcblxyXG4gICAgICAgIGNvbnRleHRWaWRlby5fZGVmYXVsdFNpemVZID0gY29udGV4dFZpZGVvLl92aWRlb1JhdGlvID0gIXZhbHVlID8gY29udGV4dFZpZGVvLl9kZWZhdWx0U2l6ZVkgOiAodmFsdWUgKiAxMDApICsgJyUnO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFkucGxhY2Vob2xkZXIgPSAhdmFsdWUgPyAnJyA6ICh2YWx1ZSAqIDEwMCkgKyAnJSc7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLmlucHV0WS52YWx1ZSA9ICcnO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHh5ICd4Jzogd2lkdGgsICd5JzogaGVpZ2h0XHJcbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGUgRXZlbnQgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHNldElucHV0U2l6ZTogZnVuY3Rpb24gKHh5LCBlKSB7XHJcbiAgICAgICAgaWYgKGUgJiYgZS5rZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zZXRJbnB1dFNpemUuY2FsbCh0aGlzLCBjb250ZXh0VmlkZW8sIHh5KTtcclxuXHJcbiAgICAgICAgaWYgKHh5ID09PSAneScpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnNldFZpZGVvUmF0aW9TZWxlY3QuY2FsbCh0aGlzLCBlLnRhcmdldC52YWx1ZSB8fCBjb250ZXh0VmlkZW8uX2RlZmF1bHRSYXRpbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRSYXRpbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NldFJhdGlvLmNhbGwodGhpcywgdGhpcy5jb250ZXh0LnZpZGVvKTtcclxuICAgIH0sXHJcblxyXG4gICAgc3VibWl0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBjb25zdCB2aWRlb1BsdWdpbiA9IHRoaXMucGx1Z2lucy52aWRlbztcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnRleHRWaWRlby5fYWxpZ24gPSBjb250ZXh0VmlkZW8ubW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN1bmVkaXRvcl92aWRlb19yYWRpb1wiXTpjaGVja2VkJykudmFsdWU7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUgJiYgY29udGV4dFZpZGVvLnZpZGVvSW5wdXRGaWxlLmZpbGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHZpZGVvUGx1Z2luLnN1Ym1pdEFjdGlvbi5jYWxsKHRoaXMsIHRoaXMuY29udGV4dC52aWRlby52aWRlb0lucHV0RmlsZS5maWxlcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZSAmJiBjb250ZXh0VmlkZW8uX2xpbmtWYWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB2aWRlb1BsdWdpbi5zZXR1cF91cmwuY2FsbCh0aGlzLCBjb250ZXh0VmlkZW8uX2xpbmtWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi52aWRlby5zdWJtaXQuZmFpbF0gY2F1c2UgOiBcIicgKyBlcnJvci5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5jbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICBzdWJtaXRBY3Rpb246IGZ1bmN0aW9uIChmaWxlTGlzdCkge1xyXG4gICAgICAgIGlmIChmaWxlTGlzdC5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGZpbGVTaXplID0gMDtcclxuICAgICAgICBsZXQgZmlsZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZmlsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKC92aWRlby9pLnRlc3QoZmlsZUxpc3RbaV0udHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgZmlsZVNpemUgKz0gZmlsZUxpc3RbaV0uc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbGltaXRTaXplID0gdGhpcy5vcHRpb25zLnZpZGVvVXBsb2FkU2l6ZUxpbWl0O1xyXG4gICAgICAgIGlmIChsaW1pdFNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmZvU2l6ZSA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvc0luZm8gPSB0aGlzLmNvbnRleHQudmlkZW8uX2luZm9MaXN0O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmlkZW9zSW5mby5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaW5mb1NpemUgKz0gdmlkZW9zSW5mb1tpXS5zaXplICogMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKChmaWxlU2l6ZSArIGluZm9TaXplKSA+IGxpbWl0U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9ICdbU1VORURJVE9SLnZpZGVvVXBsb2FkLmZhaWxdIFNpemUgb2YgdXBsb2FkYWJsZSB0b3RhbCB2aWRlb3M6ICcgKyAobGltaXRTaXplLzEwMDApICsgJ0tCJztcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZEVycm9yICE9PSAnZnVuY3Rpb24nIHx8IHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWRFcnJvcihlcnIsIHsgJ2xpbWl0U2l6ZSc6IGxpbWl0U2l6ZSwgJ2N1cnJlbnRTaXplJzogaW5mb1NpemUsICd1cGxvYWRTaXplJzogZmlsZVNpemUgfSwgdGhpcykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5ub3RpY2VPcGVuKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBjb250ZXh0VmlkZW8uX3VwbG9hZEZpbGVMZW5ndGggPSBmaWxlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIGNvbnN0IGluZm8gPSB7XHJcbiAgICAgICAgICAgIGlucHV0V2lkdGg6IGNvbnRleHRWaWRlby5pbnB1dFgudmFsdWUsXHJcbiAgICAgICAgICAgIGlucHV0SGVpZ2h0OiBjb250ZXh0VmlkZW8uaW5wdXRZLnZhbHVlLFxyXG4gICAgICAgICAgICBhbGlnbjogY29udGV4dFZpZGVvLl9hbGlnbixcclxuICAgICAgICAgICAgaXNVcGRhdGU6IHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwsXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGNvbnRleHRWaWRlby5fZWxlbWVudFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkQmVmb3JlKGZpbGVzLCBpbmZvLCB0aGlzLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgdGhpcy5fdy5BcnJheS5pc0FycmF5KGRhdGEucmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5yZWdpc3Rlci5jYWxsKHRoaXMsIGluZm8sIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8udXBsb2FkLmNhbGwodGhpcywgaW5mbywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmIHJlc3VsdC5sZW5ndGggPiAwKSBmaWxlcyA9IHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy52aWRlby51cGxvYWQuY2FsbCh0aGlzLCBpbmZvLCBmaWxlcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGVycm9yOiBmdW5jdGlvbiAobWVzc2FnZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZEVycm9yICE9PSAnZnVuY3Rpb24nIHx8IHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWRFcnJvcihtZXNzYWdlLCByZXNwb25zZSwgdGhpcykpIHtcclxuICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnMubm90aWNlT3BlbihtZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IucGx1Z2luLnZpZGVvLmVycm9yXSByZXNwb25zZTogJyArIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgdXBsb2FkOiBmdW5jdGlvbiAoaW5mbywgZmlsZXMpIHtcclxuICAgICAgICBpZiAoIWZpbGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLmVycm9yLmNhbGwodGhpcywgZmlsZXMsIG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB2aWRlb1VwbG9hZFVybCA9IHRoaXMub3B0aW9ucy52aWRlb1VwbG9hZFVybDtcclxuICAgICAgICBjb25zdCBmaWxlc0xlbiA9IHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwgPyAxIDogZmlsZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyBzZXJ2ZXIgdXBsb2FkXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2aWRlb1VwbG9hZFVybCA9PT0gJ3N0cmluZycgJiYgdmlkZW9VcGxvYWRVcmwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzTGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZS0nICsgaSwgZmlsZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci51cGxvYWQuY2FsbCh0aGlzLCB2aWRlb1VwbG9hZFVybCwgdGhpcy5vcHRpb25zLnZpZGVvVXBsb2FkSGVhZGVyLCBmb3JtRGF0YSwgdGhpcy5wbHVnaW5zLnZpZGVvLmNhbGxCYWNrX3ZpZGVvVXBsb2FkLmJpbmQodGhpcywgaW5mbyksIHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWRFcnJvcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IudmlkZW9VcGxvYWQuZmFpbF0gY2F1c2UgOiBUaGVyZSBpcyBubyBcInZpZGVvVXBsb2FkVXJsXCIgb3B0aW9uLicpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY2FsbEJhY2tfdmlkZW9VcGxvYWQ6IGZ1bmN0aW9uIChpbmZvLCB4bWxIdHRwKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy52aWRlb1VwbG9hZEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnMudmlkZW9VcGxvYWRIYW5kbGVyKHhtbEh0dHAsIGluZm8sIHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4bWxIdHRwLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5lcnJvci5jYWxsKHRoaXMsIHJlc3BvbnNlLmVycm9yTWVzc2FnZSwgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnJlZ2lzdGVyLmNhbGwodGhpcywgaW5mbywgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICByZWdpc3RlcjogZnVuY3Rpb24gKGluZm8sIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZUxpc3QgPSByZXNwb25zZS5yZXN1bHQ7XHJcbiAgICAgICAgY29uc3QgdmlkZW9UYWcgPSB0aGlzLnBsdWdpbnMudmlkZW8uY3JlYXRlVmlkZW9UYWcuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZpbGVMaXN0Lmxlbmd0aCwgZmlsZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZpbGUgPSB7IG5hbWU6IGZpbGVMaXN0W2ldLm5hbWUsIHNpemU6IGZpbGVMaXN0W2ldLnNpemUgfTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLmNyZWF0ZV92aWRlby5jYWxsKHRoaXMsIChpbmZvLmlzVXBkYXRlID8gaW5mby5lbGVtZW50IDogdmlkZW9UYWcuY2xvbmVOb2RlKGZhbHNlKSksIGZpbGVMaXN0W2ldLnVybCwgaW5mby5pbnB1dFdpZHRoLCBpbmZvLmlucHV0SGVpZ2h0LCBpbmZvLmFsaWduLCBmaWxlLCBpbmZvLmlzVXBkYXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldHVwX3VybDogZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICAgICAgaWYgKCF1cmwpIHVybCA9IGNvbnRleHRWaWRlby5fbGlua1ZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoIXVybCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLyoqIGlmcmFtZSBzb3VyY2UgKi9cclxuICAgICAgICAgICAgaWYgKC9ePGlmcmFtZS4qXFwvaWZyYW1lPiQvLnRlc3QodXJsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb0lmcmFtZSA9IChuZXcgdGhpcy5fdy5ET01QYXJzZXIoKSkucGFyc2VGcm9tU3RyaW5nKHVybCwgJ3RleHQvaHRtbCcpLnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xyXG4gICAgICAgICAgICAgICAgdXJsID0gb0lmcmFtZS5zcmM7XHJcbiAgICAgICAgICAgICAgICBpZiAodXJsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvKiogeW91dHViZSAqL1xyXG4gICAgICAgICAgICBpZiAoL3lvdXR1XFwuP2JlLy50ZXN0KHVybCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghL15odHRwLy50ZXN0KHVybCkpIHVybCA9ICdodHRwczovLycgKyB1cmw7XHJcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnd2F0Y2g/dj0nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIS9eXFwvXFwvLitcXC9lbWJlZFxcLy8udGVzdCh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UodXJsLm1hdGNoKC9cXC9cXC8uK1xcLy8pWzBdLCAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJykucmVwbGFjZSgnJicsICc/JicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0VmlkZW8uX3lvdXR1YmVRdWVyeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9cXD8vLnRlc3QodXJsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFVybCA9IHVybC5zcGxpdCgnPycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBzcGxpdFVybFswXSArICc/JyArIGNvbnRleHRWaWRlby5feW91dHViZVF1ZXJ5ICsgJyYnICsgc3BsaXRVcmxbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIGNvbnRleHRWaWRlby5feW91dHViZVF1ZXJ5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICgvdmltZW9cXC5jb20vLnRlc3QodXJsKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVybC5lbmRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovL3BsYXllci52aW1lby5jb20vdmlkZW8vJyArIHVybC5zbGljZSh1cmwubGFzdEluZGV4T2YoJy8nKSArIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uY3JlYXRlX3ZpZGVvLmNhbGwodGhpcywgdGhpcy5wbHVnaW5zLnZpZGVvWyghL2VtYmVkfGlmcmFtZXxwbGF5ZXJ8XFwvZVxcL3xcXC5waHB8XFwuaHRtbD8vLnRlc3QodXJsKSAmJiAhL3ZpbWVvXFwuY29tLy50ZXN0KHVybCkgPyBcImNyZWF0ZVZpZGVvVGFnXCIgOiBcImNyZWF0ZUlmcmFtZVRhZ1wiKV0uY2FsbCh0aGlzKSwgdXJsLCBjb250ZXh0VmlkZW8uaW5wdXRYLnZhbHVlLCBjb250ZXh0VmlkZW8uaW5wdXRZLnZhbHVlLCBjb250ZXh0VmlkZW8uX2FsaWduLCBudWxsLCB0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi52aWRlby51cGxvYWQuZmFpbF0gY2F1c2UgOiBcIicgKyBlcnJvci5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZV92aWRlbzogZnVuY3Rpb24gKG9GcmFtZSwgc3JjLCB3aWR0aCwgaGVpZ2h0LCBhbGlnbiwgZmlsZSwgaXNVcGRhdGUpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW4gPSAndmlkZW8nO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBcclxuICAgICAgICBsZXQgY292ZXIgPSBudWxsO1xyXG4gICAgICAgIGxldCBjb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgIGxldCBpbml0ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8qKiB1cGRhdGUgKi9cclxuICAgICAgICBpZiAoaXNVcGRhdGUpIHtcclxuICAgICAgICAgICAgb0ZyYW1lID0gY29udGV4dFZpZGVvLl9lbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAob0ZyYW1lLnNyYyAhPT0gc3JjKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzWW91dHViZSA9IC95b3V0dVxcLj9iZS8udGVzdChzcmMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNWaW1lbyA9IC92aW1lb1xcLmNvbS8udGVzdChzcmMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChpc1lvdXR1YmUgfHwgaXNWaW1lbykgJiYgIS9eaWZyYW1lJC9pLnRlc3Qob0ZyYW1lLm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RhZyA9IHRoaXMucGx1Z2lucy52aWRlby5jcmVhdGVJZnJhbWVUYWcuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdUYWcuc3JjID0gc3JjO1xyXG4gICAgICAgICAgICAgICAgICAgIG9GcmFtZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdUYWcsIG9GcmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50ID0gb0ZyYW1lID0gbmV3VGFnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNZb3V0dWJlICYmICFpc1ZpbWVvICYmICEvXnZpZGVvJC9pLnRlc3Qob0ZyYW1lLm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RhZyA9IHRoaXMucGx1Z2lucy52aWRlby5jcmVhdGVWaWRlb1RhZy5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1RhZy5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgICAgICAgICAgb0ZyYW1lLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld1RhZywgb0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQgPSBvRnJhbWUgPSBuZXdUYWc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9GcmFtZS5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGFpbmVyID0gY29udGV4dFZpZGVvLl9jb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvdmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQob0ZyYW1lLCAnRklHVVJFJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBjcmVhdGUgKi9cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW5pdCA9IHRydWU7XHJcbiAgICAgICAgICAgIG9GcmFtZS5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudCA9IG9GcmFtZTtcclxuICAgICAgICAgICAgY292ZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb3Zlci5jYWxsKHRoaXMsIG9GcmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvbnRhaW5lci5jYWxsKHRoaXMsIGNvdmVyLCAnc2UtdmlkZW8tY29udGFpbmVyJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiogcmVuZGVyaW5nICovXHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9jb3ZlciA9IGNvdmVyO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fY29udGFpbmVyID0gY29udGFpbmVyO1xyXG5cclxuICAgICAgICBjb25zdCBpbnB1dFVwZGF0ZSA9ICh0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWC5jYWxsKHRoaXMsIGNvbnRleHRWaWRlbykgIT09ICh3aWR0aCB8fCBjb250ZXh0VmlkZW8uX2RlZmF1bHRTaXplWCkpIHx8ICh0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGNvbnRleHRWaWRlbykgIT09IChoZWlnaHQgfHwgY29udGV4dFZpZGVvLl92aWRlb1JhdGlvKSk7XHJcbiAgICAgICAgY29uc3QgY2hhbmdlU2l6ZSA9ICFpc1VwZGF0ZSB8fCBpbnB1dFVwZGF0ZTtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby5fcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnZpZGVvLl9wcm9wb3J0aW9uQ2hlY2tlZCA9IGNvbnRleHRWaWRlby5wcm9wb3J0aW9uLmNoZWNrZWQ7XHJcbiAgICAgICAgICAgIG9GcmFtZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvcG9ydGlvbicsIGNvbnRleHRWaWRlby5fcHJvcG9ydGlvbkNoZWNrZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2l6ZVxyXG4gICAgICAgIGxldCBpc1BlcmNlbnQgPSBmYWxzZTtcclxuICAgICAgICBpZiAoY2hhbmdlU2l6ZSkge1xyXG4gICAgICAgICAgICBpc1BlcmNlbnQgPSB0aGlzLnBsdWdpbnMudmlkZW8uYXBwbHlTaXplLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhbGlnblxyXG4gICAgICAgIGlmICghKGlzUGVyY2VudCAmJiBhbGlnbiA9PT0gJ2NlbnRlcicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRBbGlnbi5jYWxsKHRoaXMsIG51bGwsIG9GcmFtZSwgY292ZXIsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKCFpc1VwZGF0ZSkge1xyXG4gICAgICAgICAgICBjaGFuZ2VkID0gdGhpcy5pbnNlcnRDb21wb25lbnQoY29udGFpbmVyLCBmYWxzZSwgdHJ1ZSwgIXRoaXMub3B0aW9ucy5tZWRpYUF1dG9TZWxlY3QpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5tZWRpYUF1dG9TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmFwcGVuZEZvcm1hdFRhZyhjb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUpIHRoaXMuc2V0UmFuZ2UobGluZSwgMCwgbGluZSwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHRWaWRlby5fcmVzaXppbmcgJiYgdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCAmJiBjaGFuZ2VTaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5zZXRUcmFuc2Zvcm1TaXplLmNhbGwodGhpcywgb0ZyYW1lLCBudWxsLCBudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIGlmIChpbml0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuc2V0SW5mby5jYWxsKHRoaXMsICd2aWRlbycsIG9GcmFtZSwgdGhpcy5mdW5jdGlvbnMub25WaWRlb1VwbG9hZCwgZmlsZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudChvRnJhbWUsICd2aWRlbycpO1xyXG4gICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW4gPSAnJztcclxuICAgIH0sXHJcblxyXG4gICAgX3VwZGF0ZV92aWRlb0NvdmVyOiBmdW5jdGlvbiAob0ZyYW1lKSB7XHJcbiAgICAgICAgaWYgKCFvRnJhbWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICgvXnZpZGVvJC9pLnRlc3Qob0ZyYW1lLm5vZGVOYW1lKSkgdGhpcy5wbHVnaW5zLnZpZGVvLl9zZXRUYWdBdHRycy5jYWxsKHRoaXMsIG9GcmFtZSk7XHJcbiAgICAgICAgZWxzZSB0aGlzLnBsdWdpbnMudmlkZW8uX3NldElmcmFtZUF0dHJzLmNhbGwodGhpcywgb0ZyYW1lKTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZXhpc3RFbGVtZW50ID0gKHRoaXMudXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChvRnJhbWUucGFyZW50Tm9kZSkgfHwgdGhpcy51dGlsLmlzV3lzaXd5Z0RpdihvRnJhbWUucGFyZW50Tm9kZSkpID8gXHJcbiAgICAgICAgICAgIG9GcmFtZSA6IHRoaXMudXRpbC5nZXRGb3JtYXRFbGVtZW50KG9GcmFtZSkgfHwgb0ZyYW1lO1xyXG5cclxuICAgICAgICBjb25zdCBwcmV2RnJhbWUgPSBvRnJhbWU7XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50ID0gb0ZyYW1lID0gb0ZyYW1lLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICBjb25zdCBjb3ZlciA9IGNvbnRleHRWaWRlby5fY292ZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb3Zlci5jYWxsKHRoaXMsIG9GcmFtZSk7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gY29udGV4dFZpZGVvLl9jb250YWluZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb250YWluZXIuY2FsbCh0aGlzLCBjb3ZlciwgJ3NlLXZpZGVvLWNvbnRhaW5lcicpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWdjYXB0aW9uID0gZXhpc3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2ZpZ2NhcHRpb24nKTtcclxuICAgICAgICAgICAgbGV0IGNhcHRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoISFmaWdjYXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICAgICAgY2FwdGlvbi5pbm5lckhUTUwgPSBmaWdjYXB0aW9uLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGZpZ2NhcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzaXplXHJcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSAob0ZyYW1lLmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykgfHwgb0ZyYW1lLmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW4nKSB8fCAnJykuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLmFwcGx5U2l6ZS5jYWxsKHRoaXMsIChzaXplWzBdIHx8IHByZXZGcmFtZS5zdHlsZS53aWR0aCB8fCBwcmV2RnJhbWUud2lkdGggfHwgJycpLCAoc2l6ZVsxXSB8fCBwcmV2RnJhbWUuc3R5bGUuaGVpZ2h0IHx8IHByZXZGcmFtZS5oZWlnaHQgfHwgJycpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFsaWduXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IHRoaXMudXRpbC5nZXRGb3JtYXRFbGVtZW50KHByZXZGcmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChmb3JtYXQpIGNvbnRleHRWaWRlby5fYWxpZ24gPSBmb3JtYXQuc3R5bGUudGV4dEFsaWduIHx8IGZvcm1hdC5zdHlsZS5mbG9hdDtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnNldEFsaWduLmNhbGwodGhpcywgbnVsbCwgb0ZyYW1lLCBjb3ZlciwgY29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChwcmV2RnJhbWUsIHRoaXMudXRpbC5pc05vdENoZWNraW5nTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIHByZXZGcmFtZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjb250YWluZXIsIHByZXZGcmFtZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy51dGlsLmlzTGlzdENlbGwoZXhpc3RFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChwcmV2RnJhbWUsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IGV4aXN0RWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgcmVmZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUl0ZW0ocHJldkZyYW1lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVFbXB0eU5vZGUocmVmZXIsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudXRpbC5pc0Zvcm1hdEVsZW1lbnQoZXhpc3RFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChwcmV2RnJhbWUsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IGV4aXN0RWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQgPSB0aGlzLnV0aWwuc3BsaXRFbGVtZW50KGV4aXN0RWxlbWVudCwgcmVmZXIpO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZXhpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKHByZXZGcmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlRW1wdHlOb2RlKGV4aXN0RWxlbWVudCwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgZXhpc3RFbGVtZW50LmlubmVySFRNTCA9IHRoaXMudXRpbC5odG1sUmVtb3ZlV2hpdGVTcGFjZShleGlzdEVsZW1lbnQuaW5uZXJIVE1MKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjb250YWluZXIsIGV4aXN0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghIWNhcHRpb24pIGV4aXN0RWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjYXB0aW9uLCBjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IudmlkZW8uZXJyb3JdIE1heWJlIHRoZSB2aWRlbyB0YWcgaXMgbmVzdGVkLicsIGVycm9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmNhbGwodGhpcywgJ3ZpZGVvJywgb0ZyYW1lLCB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkLCBudWxsLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIG9uTW9kaWZ5TW9kZTogZnVuY3Rpb24gKGVsZW1lbnQsIHNpemUpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICBjb250ZXh0VmlkZW8uX2NvdmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgJ0ZJR1VSRScpO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fY29udGFpbmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdGhpcy51dGlsLmlzTWVkaWFDb21wb25lbnQpO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fYWxpZ24gPSBlbGVtZW50LnN0eWxlLmZsb2F0IHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFsaWduJykgfHwgJ25vbmUnO1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZmxvYXQgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKHNpemUpIHtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50X3cgPSBzaXplLnc7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudF9oID0gc2l6ZS5oO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnRfdCA9IHNpemUudDtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50X2wgPSBzaXplLmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgb3JpZ2luID0gY29udGV4dFZpZGVvLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykgfHwgY29udGV4dFZpZGVvLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW4nKTtcclxuICAgICAgICBsZXQgdywgaDtcclxuICAgICAgICBpZiAob3JpZ2luKSB7XHJcbiAgICAgICAgICAgIG9yaWdpbiA9IG9yaWdpbi5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB3ID0gb3JpZ2luWzBdO1xyXG4gICAgICAgICAgICBoID0gb3JpZ2luWzFdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2l6ZSkge1xyXG4gICAgICAgICAgICB3ID0gc2l6ZS53O1xyXG4gICAgICAgICAgICBoID0gc2l6ZS5oO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dFZpZGVvLl9vcmlnaW5fdyA9IHcgfHwgZWxlbWVudC5zdHlsZS53aWR0aCB8fCBlbGVtZW50LndpZHRoIHx8ICcnO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fb3JpZ2luX2ggPSBoIHx8IGVsZW1lbnQuc3R5bGUuaGVpZ2h0IHx8IGVsZW1lbnQuaGVpZ2h0IHx8ICcnO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIG9wZW5Nb2RpZnk6IGZ1bmN0aW9uIChub3RPcGVuKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZSkgY29udGV4dFZpZGVvLl9saW5rVmFsdWUgPSBjb250ZXh0VmlkZW8ucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRWaWRlby52aWRlb1VybEZpbGUudmFsdWUgPSAoY29udGV4dFZpZGVvLl9lbGVtZW50LnNyYyB8fCAoY29udGV4dFZpZGVvLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NvdXJjZScpIHx8ICcnKS5zcmMgfHwgJycpO1xyXG4gICAgICAgIChjb250ZXh0VmlkZW8ubW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN1bmVkaXRvcl92aWRlb19yYWRpb1wiXVt2YWx1ZT1cIicgKyBjb250ZXh0VmlkZW8uX2FsaWduICsgJ1wiXScpIHx8IGNvbnRleHRWaWRlby5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX3ZpZGVvX3JhZGlvXCJdW3ZhbHVlPVwibm9uZVwiXScpKS5jaGVja2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHRWaWRlby5fcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfc2V0TW9kaWZ5SW5wdXRTaXplLmNhbGwodGhpcywgY29udGV4dFZpZGVvLCB0aGlzLnBsdWdpbnMudmlkZW8pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgeSA9IGNvbnRleHRWaWRlby5fdmlkZW9SYXRpbyA9IHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVZLmNhbGwodGhpcywgY29udGV4dFZpZGVvKTtcclxuICAgICAgICAgICAgY29uc3QgcmF0aW9TZWxlY3RlZCA9IHRoaXMucGx1Z2lucy52aWRlby5zZXRWaWRlb1JhdGlvU2VsZWN0LmNhbGwodGhpcywgeSk7XHJcbiAgICAgICAgICAgIGlmICghcmF0aW9TZWxlY3RlZCkgY29udGV4dFZpZGVvLmlucHV0WS52YWx1ZSA9IGNvbnRleHRWaWRlby5fb25seVBlcmNlbnRhZ2UgPyB0aGlzLnV0aWwuZ2V0TnVtYmVyKHksIDIpIDogeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghbm90T3BlbikgdGhpcy5wbHVnaW5zLmRpYWxvZy5vcGVuLmNhbGwodGhpcywgJ3ZpZGVvJywgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRWaWRlb1JhdGlvU2VsZWN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBsZXQgcmF0aW9TZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBjb25zdCByYXRpb09wdGlvbnMgPSBjb250ZXh0VmlkZW8udmlkZW9SYXRpb09wdGlvbi5vcHRpb25zO1xyXG5cclxuICAgICAgICBpZiAoLyUkLy50ZXN0KHZhbHVlKSB8fCBjb250ZXh0VmlkZW8uX29ubHlQZXJjZW50YWdlKSB2YWx1ZSA9ICh0aGlzLnV0aWwuZ2V0TnVtYmVyKHZhbHVlLCAyKSAvIDEwMCkgKyAnJztcclxuICAgICAgICBlbHNlIGlmICghdGhpcy51dGlsLmlzTnVtYmVyKHZhbHVlKSB8fCAodmFsdWUgKiAxKSA+PSAxKSB2YWx1ZSA9ICcnO1xyXG5cclxuICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLnBsYWNlaG9sZGVyID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJhdGlvT3B0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocmF0aW9PcHRpb25zW2ldLnZhbHVlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmF0aW9TZWxlY3RlZCA9IHJhdGlvT3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLnBsYWNlaG9sZGVyID0gIXZhbHVlID8gJycgOiAodmFsdWUgKiAxMDApICsgJyUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgcmF0aW9PcHRpb25zW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmF0aW9TZWxlY3RlZDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgY2hlY2tGaWxlSW5mbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5jaGVja0luZm8uY2FsbCh0aGlzLCAndmlkZW8nLCBbJ2lmcmFtZScsICd2aWRlbyddLCB0aGlzLmZ1bmN0aW9ucy5vblZpZGVvVXBsb2FkLCB0aGlzLnBsdWdpbnMudmlkZW8uX3VwZGF0ZV92aWRlb0NvdmVyLmJpbmQodGhpcyksIHRydWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICByZXNldEZpbGVJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnJlc2V0SW5mby5jYWxsKHRoaXMsICd2aWRlbycsIHRoaXMuZnVuY3Rpb25zLm9uVmlkZW9VcGxvYWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBhcHBseVNpemU6IGZ1bmN0aW9uICh3LCBoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG5cclxuICAgICAgICBpZiAoIXcpIHcgPSBjb250ZXh0VmlkZW8uaW5wdXRYLnZhbHVlIHx8IHRoaXMub3B0aW9ucy52aWRlb1dpZHRoO1xyXG4gICAgICAgIGlmICghaCkgaCA9IGNvbnRleHRWaWRlby5pbnB1dFkudmFsdWUgfHwgdGhpcy5vcHRpb25zLnZpZGVvSGVpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8uX29ubHlQZXJjZW50YWdlIHx8IC8lJC8udGVzdCh3KSB8fCAhdykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0UGVyY2VudFNpemUuY2FsbCh0aGlzLCAodyB8fCAnMTAwJScpLCAoaCB8fCAoLyUkLy50ZXN0KGNvbnRleHRWaWRlby5fdmlkZW9SYXRpbykgPyBjb250ZXh0VmlkZW8uX3ZpZGVvUmF0aW8gOiBjb250ZXh0VmlkZW8uX2RlZmF1bHRSYXRpbykpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoIXcgfHwgdyA9PT0gJ2F1dG8nKSAmJiAoIWggfHwgaCA9PT0gJ2F1dG8nKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0QXV0b1NpemUuY2FsbCh0aGlzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0U2l6ZS5jYWxsKHRoaXMsIHcsIChoIHx8IGNvbnRleHRWaWRlby5fdmlkZW9SYXRpbyB8fCBjb250ZXh0VmlkZW8uX2RlZmF1bHRSYXRpbyksIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgcmVzaXppbmdcclxuICAgICAqL1xyXG4gICAgc2l6ZVJldmVydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NpemVSZXZlcnQuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQudmlkZW8pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRTaXplOiBmdW5jdGlvbiAodywgaCwgbm90UmVzZXRQZXJjZW50YWdlLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcbiAgICAgICAgY29uc3Qgb25seVcgPSAvXihyd3xsdykkLy50ZXN0KGRpcmVjdGlvbik7XHJcbiAgICAgICAgY29uc3Qgb25seUggPSAvXih0aHxiaCkkLy50ZXN0KGRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgIGlmICghb25seUgpIHcgPSB0aGlzLnV0aWwuZ2V0TnVtYmVyKHcsIDApO1xyXG4gICAgICAgIGlmICghb25seVcpIGggPSB0aGlzLnV0aWwuaXNOdW1iZXIoaCkgPyBoICsgY29udGV4dFZpZGVvLnNpemVVbml0IDogIWggPyAnJyA6IGg7XHJcbiAgICAgICAgdyA9IHcgPyB3ICsgY29udGV4dFZpZGVvLnNpemVVbml0IDogJyc7XHJcblxyXG4gICAgICAgIGlmICghb25seUgpIGNvbnRleHRWaWRlby5fZWxlbWVudC5zdHlsZS53aWR0aCA9IHc7XHJcbiAgICAgICAgaWYgKCFvbmx5VyAmJiBjb250ZXh0VmlkZW8uX2NvdmVyKSBjb250ZXh0VmlkZW8uX2NvdmVyLnN0eWxlLnBhZGRpbmdCb3R0b20gPSBjb250ZXh0VmlkZW8uX2NvdmVyLnN0eWxlLmhlaWdodCA9IGg7XHJcblxyXG4gICAgICAgIGlmICghb25seUggJiYgIS8lJC8udGVzdCh3KSkge1xyXG4gICAgICAgICAgICBpZihjb250ZXh0VmlkZW8uX2NvdmVyKSBjb250ZXh0VmlkZW8uX2NvdmVyLnN0eWxlLndpZHRoID0gdztcclxuICAgICAgICAgICAgaWYoY29udGV4dFZpZGVvLl9jb250YWluZXIpIGNvbnRleHRWaWRlby5fY29udGFpbmVyLnN0eWxlLndpZHRoID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW9ubHlXICYmICEvJSQvLnRlc3QoaCkpIHtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9IGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFub3RSZXNldFBlcmNlbnRhZ2UpIGNvbnRleHRWaWRlby5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScpO1xyXG5cclxuICAgICAgICAvLyBzYXZlIGN1cnJlbnQgc2l6ZVxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NhdmVDdXJyZW50U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRWaWRlbyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldEF1dG9TaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnZpZGVvLnNldFBlcmNlbnRTaXplLmNhbGwodGhpcywgMTAwLCB0aGlzLmNvbnRleHQudmlkZW8uX2RlZmF1bHRSYXRpbyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHJlc2l6aW5nXHJcbiAgICAgKi9cclxuICAgIHNldE9yaWdpblNpemU6IGZ1bmN0aW9uIChkYXRhU2l6ZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXBlcmNlbnRhZ2UnKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnJlc2V0VHJhbnNmb3JtLmNhbGwodGhpcywgY29udGV4dFZpZGVvLl9lbGVtZW50KTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uY2FuY2VsUGVyY2VudEF0dHIuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3JpZ2luU2l6ZSA9ICgoZGF0YVNpemUgPyBjb250ZXh0VmlkZW8uX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSA6ICcnKSB8fCBjb250ZXh0VmlkZW8uX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicpIHx8ICcnKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChvcmlnaW5TaXplKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHcgPSBvcmlnaW5TaXplWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBoID0gb3JpZ2luU2l6ZVsxXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0VmlkZW8uX29ubHlQZXJjZW50YWdlIHx8ICgvJSQvLnRlc3QodykgJiYgKC8lJC8udGVzdChoKSB8fCAhL1xcZC8udGVzdChoKSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0UGVyY2VudFNpemUuY2FsbCh0aGlzLCB3LCBoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy52aWRlby5zZXRTaXplLmNhbGwodGhpcywgdywgaCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNhdmUgY3VycmVudCBzaXplXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX3NhdmVDdXJyZW50U2l6ZS5jYWxsKHRoaXMsIGNvbnRleHRWaWRlbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRQZXJjZW50U2l6ZTogZnVuY3Rpb24gKHcsIGgpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VmlkZW8gPSB0aGlzLmNvbnRleHQudmlkZW87XHJcbiAgICAgICAgaCA9ICEhaCAmJiAhLyUkLy50ZXN0KGgpICYmICF0aGlzLnV0aWwuZ2V0TnVtYmVyKGgsIDApID8gdGhpcy51dGlsLmlzTnVtYmVyKGgpID8gaCArICclJyA6IGggOiB0aGlzLnV0aWwuaXNOdW1iZXIoaCkgPyBoICsgY29udGV4dFZpZGVvLnNpemVVbml0IDogKGggfHwgY29udGV4dFZpZGVvLl9kZWZhdWx0UmF0aW8pO1xyXG5cclxuICAgICAgICBpZihjb250ZXh0VmlkZW8uX2NvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2NvbnRhaW5lci5zdHlsZS53aWR0aCA9IHRoaXMudXRpbC5pc051bWJlcih3KSA/IHcgKyAnJScgOiB3O1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoY29udGV4dFZpZGVvLl9jb3Zlcikge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2NvdmVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uX2NvdmVyLnN0eWxlLmhlaWdodCA9IGg7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY292ZXIuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICBjb250ZXh0VmlkZW8uX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9ICcnO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLl9hbGlnbiA9PT0gJ2NlbnRlcicpIHRoaXMucGx1Z2lucy52aWRlby5zZXRBbGlnbi5jYWxsKHRoaXMsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScsIHcgKyAnLCcgKyBoKTtcclxuXHJcbiAgICAgICAgLy8gc2F2ZSBjdXJyZW50IHNpemVcclxuICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9zYXZlQ3VycmVudFNpemUuY2FsbCh0aGlzLCBjb250ZXh0VmlkZW8pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBjYW5jZWxQZXJjZW50QXR0cjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRWaWRlbyA9IHRoaXMuY29udGV4dC52aWRlbztcclxuICAgICAgICBcclxuICAgICAgICBpZihjb250ZXh0VmlkZW8uX2NvdmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY292ZXIuc3R5bGUud2lkdGggPSAnJztcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9jb3Zlci5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLl9jb3Zlci5zdHlsZS5wYWRkaW5nQm90dG9tID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNvbnRleHRWaWRlby5fY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY29udGFpbmVyLnN0eWxlLndpZHRoID0gJyc7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5fY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY29udGV4dFZpZGVvLl9jb250YWluZXIsIHRoaXMuY29udGV4dC52aWRlby5fZmxvYXRDbGFzc1JlZ0V4cCk7XHJcbiAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNvbnRleHRWaWRlby5fY29udGFpbmVyLCAnX19zZV9fZmxvYXQtJyArIGNvbnRleHRWaWRlby5fYWxpZ24pO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dFZpZGVvLl9hbGlnbiA9PT0gJ2NlbnRlcicpIHRoaXMucGx1Z2lucy52aWRlby5zZXRBbGlnbi5jYWxsKHRoaXMsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBzZXRBbGlnbjogZnVuY3Rpb24gKGFsaWduLCBlbGVtZW50LCBjb3ZlciwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghYWxpZ24pIGFsaWduID0gY29udGV4dFZpZGVvLl9hbGlnbjtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIGVsZW1lbnQgPSBjb250ZXh0VmlkZW8uX2VsZW1lbnQ7XHJcbiAgICAgICAgaWYgKCFjb3ZlcikgY292ZXIgPSBjb250ZXh0VmlkZW8uX2NvdmVyO1xyXG4gICAgICAgIGlmICghY29udGFpbmVyKSBjb250YWluZXIgPSBjb250ZXh0VmlkZW8uX2NvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgaWYgKC8lJC8udGVzdChlbGVtZW50LnN0eWxlLndpZHRoKSAmJiBhbGlnbiA9PT0gJ2NlbnRlcicpIHtcclxuICAgICAgICAgICAgaWYoY29udGFpbmVyKSBjb250YWluZXIuc3R5bGUubWluV2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIGlmKGNvdmVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb3Zlci5zdHlsZS53aWR0aCA9IGNvbnRhaW5lci5zdHlsZS53aWR0aDtcclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLmhlaWdodCA9IGNvdmVyLnN0eWxlLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAhLyUkLy50ZXN0KGNvdmVyLnN0eWxlLmhlaWdodCkgPyBjb3Zlci5zdHlsZS5oZWlnaHQgOiB0aGlzLnV0aWwuZ2V0TnVtYmVyKCh0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvdmVyLnN0eWxlLmhlaWdodCwgMikgLyAxMDApICogdGhpcy51dGlsLmdldE51bWJlcihjb3Zlci5zdHlsZS53aWR0aCwgMiksIDIpICsgJyUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYoY29udGFpbmVyKSBjb250YWluZXIuc3R5bGUubWluV2lkdGggPSAnJztcclxuICAgICAgICAgICAgaWYoY292ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLndpZHRoID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCA/IChlbGVtZW50LnN0eWxlLmhlaWdodCB8fCBlbGVtZW50Lm9mZnNldEhlaWdodCkgOiAoZWxlbWVudC5zdHlsZS53aWR0aCB8fCAnMTAwJScpO1xyXG4gICAgICAgICAgICAgICAgY292ZXIuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGNvdmVyLnN0eWxlLmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnV0aWwuaGFzQ2xhc3MoY29udGFpbmVyLCAnX19zZV9fZmxvYXQtJyArIGFsaWduKSkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoY29udGFpbmVyLCBjb250ZXh0VmlkZW8uX2Zsb2F0Q2xhc3NSZWdFeHApO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGFpbmVyLCAnX19zZV9fZmxvYXQtJyArIGFsaWduKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYWxpZ24nLCBhbGlnbik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFZpZGVvID0gdGhpcy5jb250ZXh0LnZpZGVvO1xyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUpIGNvbnRleHRWaWRlby52aWRlb0lucHV0RmlsZS52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlKSBjb250ZXh0VmlkZW8uX2xpbmtWYWx1ZSA9IGNvbnRleHRWaWRlby5wcmV2aWV3LnRleHRDb250ZW50ID0gY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZS52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8udmlkZW9JbnB1dEZpbGUgJiYgY29udGV4dFZpZGVvLnZpZGVvVXJsRmlsZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8udmlkZW9VcmxGaWxlLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLnByZXZpZXcuc3R5bGUudGV4dERlY29yYXRpb24gPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHRWaWRlby5fb3JpZ2luX3cgPSB0aGlzLm9wdGlvbnMudmlkZW9XaWR0aDtcclxuICAgICAgICBjb250ZXh0VmlkZW8uX29yaWdpbl9oID0gdGhpcy5vcHRpb25zLnZpZGVvSGVpZ2h0O1xyXG4gICAgICAgIGNvbnRleHRWaWRlby5tb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3VuZWRpdG9yX3ZpZGVvX3JhZGlvXCJdW3ZhbHVlPVwibm9uZVwiXScpLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjb250ZXh0VmlkZW8uX3Jlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRWaWRlby5pbnB1dFgudmFsdWUgPSB0aGlzLm9wdGlvbnMudmlkZW9XaWR0aCA9PT0gY29udGV4dFZpZGVvLl9kZWZhdWx0U2l6ZVggPyAnJyA6IHRoaXMub3B0aW9ucy52aWRlb1dpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8uaW5wdXRZLnZhbHVlID0gdGhpcy5vcHRpb25zLnZpZGVvSGVpZ2h0ID09PSBjb250ZXh0VmlkZW8uX2RlZmF1bHRTaXplWSA/ICcnIDogdGhpcy5vcHRpb25zLnZpZGVvSGVpZ2h0O1xyXG4gICAgICAgICAgICBjb250ZXh0VmlkZW8ucHJvcG9ydGlvbi5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29udGV4dFZpZGVvLnByb3BvcnRpb24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMudmlkZW8uc2V0VmlkZW9SYXRpb1NlbGVjdC5jYWxsKHRoaXMsIGNvbnRleHRWaWRlby5fZGVmYXVsdFJhdGlvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgZGlhbG9nIGZyb20gJy4uL21vZHVsZXMvZGlhbG9nJztcclxuaW1wb3J0IGNvbXBvbmVudCBmcm9tICcuLi9tb2R1bGVzL2NvbXBvbmVudCc7XHJcbmltcG9ydCBmaWxlTWFuYWdlciBmcm9tICcuLi9tb2R1bGVzL2ZpbGVNYW5hZ2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdhdWRpbycsXHJcbiAgICBkaXNwbGF5OiAnZGlhbG9nJyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb3JlLmFkZE1vZHVsZShbZGlhbG9nLCBjb21wb25lbnQsIGZpbGVNYW5hZ2VyXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEF1ZGlvID0gY29udGV4dC5hdWRpbyA9IHtcclxuICAgICAgICAgICAgX2luZm9MaXN0OiBbXSwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIF9pbmZvSW5kZXg6IDAsIC8vIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICAgICAgICBfdXBsb2FkRmlsZUxlbmd0aDogMCwgLy8gQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgICAgIGZvY3VzRWxlbWVudDogbnVsbCwgLy8gQE92ZXJyaWRlIGRpYWxvZyAvLyBUaGlzIGVsZW1lbnQgaGFzIGZvY3VzIHdoZW4gdGhlIGRpYWxvZyBpcyBvcGVuZWQuXHJcbiAgICAgICAgICAgIHRhcmdldFNlbGVjdDogbnVsbCxcclxuICAgICAgICAgICAgX29yaWdpbl93OiBjb3JlLm9wdGlvbnMuYXVkaW9XaWR0aCxcclxuICAgICAgICAgICAgX29yaWdpbl9oOiBjb3JlLm9wdGlvbnMuYXVkaW9IZWlnaHQsXHJcbiAgICAgICAgICAgIF9saW5rVmFsdWU6ICcnLFxyXG4gICAgICAgICAgICAvLyBAcmVxdWlyZSBAT3ZlcnJpZGUgY29tcG9uZW50XHJcbiAgICAgICAgICAgIF9lbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBfY292ZXI6IG51bGwsXHJcbiAgICAgICAgICAgIF9jb250YWluZXI6IG51bGwsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIGRpYWxvZyAqL1xyXG4gICAgICAgIGxldCBhdWRpb19kaWFsb2cgPSB0aGlzLnNldERpYWxvZyhjb3JlKTtcclxuICAgICAgICBjb250ZXh0QXVkaW8ubW9kYWwgPSBhdWRpb19kaWFsb2c7XHJcbiAgICAgICAgY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlID0gYXVkaW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfYXVkaW9fZmlsZXMnKTtcclxuICAgICAgICBjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlID0gYXVkaW9fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJy5zZS1pbnB1dC11cmwnKTtcclxuICAgICAgICBjb250ZXh0QXVkaW8uZm9jdXNFbGVtZW50ID0gY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlIHx8IGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGU7XHJcbiAgICAgICAgY29udGV4dEF1ZGlvLnByZXZpZXcgPSBhdWRpb19kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLWxpbmstcHJldmlldycpO1xyXG5cclxuICAgICAgICAvKiogY29udHJvbGxlciAqL1xyXG4gICAgICAgIGxldCBhdWRpb19jb250cm9sbGVyID0gdGhpcy5zZXRDb250cm9sbGVyKGNvcmUpO1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5jb250cm9sbGVyID0gYXVkaW9fY29udHJvbGxlcjtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBhdWRpb19kaWFsb2cucXVlcnlTZWxlY3RvcignZm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuc3VibWl0LmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGlmIChjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUpIGF1ZGlvX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtZGlhbG9nLWZpbGVzLWVkZ2UtYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9yZW1vdmVTZWxlY3RlZEZpbGVzLmJpbmQoY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlLCBjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlLCBjb250ZXh0QXVkaW8ucHJldmlldykpO1xyXG4gICAgICAgIGlmIChjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUgJiYgY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZSkgY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX2ZpbGVJbnB1dENoYW5nZS5iaW5kKGNvbnRleHRBdWRpbykpO1xyXG4gICAgICAgIGF1ZGlvX2NvbnRyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tfY29udHJvbGxlci5iaW5kKGNvcmUpKTtcclxuICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZSkgY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuX29uTGlua1ByZXZpZXcuYmluZChjb250ZXh0QXVkaW8ucHJldmlldywgY29udGV4dEF1ZGlvLCBjb3JlLm9wdGlvbnMubGlua1Byb3RvY29sKSk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xyXG4gICAgICAgIGNvbnRleHQuZGlhbG9nLm1vZGFsLmFwcGVuZENoaWxkKGF1ZGlvX2RpYWxvZyk7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgY29udHJvbGxlciAqL1xyXG4gICAgICAgIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5hcHBlbmRDaGlsZChhdWRpb19jb250cm9sbGVyKTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGF1ZGlvX2RpYWxvZyA9IG51bGwsIGF1ZGlvX2NvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKiogSFRNTCAtIGRpYWxvZyAqL1xyXG4gICAgc2V0RGlhbG9nOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZyA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgZGlhbG9nLmNsYXNzTmFtZSA9ICdzZS1kaWFsb2ctY29udGVudCc7XHJcbiAgICAgICAgZGlhbG9nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgbGV0IGh0bWwgPSAnJyArXHJcbiAgICAgICAgICAgICc8Zm9ybSBtZXRob2Q9XCJwb3N0XCIgZW5jdHlwZT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWhlYWRlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJjbG9zZVwiIGNsYXNzPVwic2UtYnRuIHNlLWRpYWxvZy1jbG9zZVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guY2xvc2UgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMuY2FuY2VsICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtbW9kYWwtdGl0bGVcIj4nICsgbGFuZy5kaWFsb2dCb3guYXVkaW9Cb3gudGl0bGUgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctYm9keVwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5hdWRpb0ZpbGVJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC5hdWRpb0JveC5maWxlICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtLWZpbGVzXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWZvcm0gX3NlX2F1ZGlvX2ZpbGVzXCIgdHlwZT1cImZpbGVcIiBhY2NlcHQ9XCInICsgb3B0aW9uLmF1ZGlvQWNjZXB0ICsgJ1wiJyArIChvcHRpb24uYXVkaW9NdWx0aXBsZUZpbGUgPyAnIG11bHRpcGxlPVwibXVsdGlwbGVcIicgOiAnJykgKyAnLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiZmlsZXNSZW1vdmVcIiBjbGFzcz1cInNlLWJ0biBzZS1kaWFsb2ctZmlsZXMtZWRnZS1idXR0b24gc2UtZmlsZS1yZW1vdmVcIiB0aXRsZT1cIicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5jb250cm9sbGVyLnJlbW92ZSArICdcIj4nICsgY29yZS5pY29ucy5jYW5jZWwgKyAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5hdWRpb1VybElucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+JyArIGxhbmcuZGlhbG9nQm94LmF1ZGlvQm94LnVybCArICc8L2xhYmVsPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cInNlLWlucHV0LWZvcm0gc2UtaW5wdXQtdXJsXCIgdHlwZT1cInRleHRcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwcmUgY2xhc3M9XCJzZS1saW5rLXByZXZpZXdcIj48L3ByZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICcnICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvb3RlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cInNlLWJ0bi1wcmltYXJ5XCIgdGl0bGU9XCInICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJ1wiPjxzcGFuPicgKyBsYW5nLmRpYWxvZ0JveC5zdWJtaXRCdXR0b24gKyAnPC9zcGFuPjwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9mb3JtPic7XHJcblxyXG4gICAgICAgIGRpYWxvZy5pbm5lckhUTUwgPSBodG1sO1xyXG5cclxuICAgICAgICByZXR1cm4gZGlhbG9nO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKiogSFRNTCAtIGNvbnRyb2xsZXIgKi9cclxuICAgIHNldENvbnRyb2xsZXI6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBpY29ucyA9IGNvcmUuaWNvbnM7XHJcbiAgICAgICAgY29uc3QgbGlua19idG4gPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpbmtfYnRuLmNsYXNzTmFtZSA9ICdzZS1jb250cm9sbGVyIHNlLWNvbnRyb2xsZXItbGluayc7XHJcbiAgICAgICAgbGlua19idG4uaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWFycm93IHNlLWFycm93LXVwXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibGluay1jb250ZW50XCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWJ0bi1ncm91cFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJ1cGRhdGVcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCJzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zLmVkaXQgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLmVkaXQgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImRlbGV0ZVwiIHRhYmluZGV4PVwiLTFcIiBjbGFzcz1cInNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMuZGVsZXRlICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlua19idG47XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIERpc2FibGUgdXJsIGlucHV0IHdoZW4gdXBsb2FkaW5nIGZpbGVzXHJcbiAgICBfZmlsZUlucHV0Q2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmF1ZGlvSW5wdXRGaWxlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9VcmxGaWxlLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aWV3LnN0eWxlLnRleHREZWNvcmF0aW9uID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1VybEZpbGUuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXcuc3R5bGUudGV4dERlY29yYXRpb24gPSAnbGluZS10aHJvdWdoJztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIERpc2FibGUgdXJsIGlucHV0IHdoZW4gdXBsb2FkaW5nIGZpbGVzXHJcbiAgICBfcmVtb3ZlU2VsZWN0ZWRGaWxlczogZnVuY3Rpb24gKHVybElucHV0LCBwcmV2aWV3KSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmICh1cmxJbnB1dCkge1xyXG4gICAgICAgICAgICB1cmxJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIHByZXZpZXcuc3R5bGUudGV4dERlY29yYXRpb24gPSAnJztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNyZWF0ZSBuZXcgYXVkaW8gdGFnXHJcbiAgICBfY3JlYXRlQXVkaW9UYWc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBvQXVkaW8gPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnQVVESU8nKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8uX3NldFRhZ0F0dHJzLmNhbGwodGhpcywgb0F1ZGlvKTtcclxuXHJcbiAgICAgICAgY29uc3QgdyA9IHRoaXMuY29udGV4dC5hdWRpby5fb3JpZ2luX3c7XHJcbiAgICAgICAgY29uc3QgaCA9IHRoaXMuY29udGV4dC5hdWRpby5fb3JpZ2luX2g7XHJcbiAgICAgICAgb0F1ZGlvLnNldEF0dHJpYnV0ZSgnb3JpZ2luLXNpemUnLCB3ICsgJywnICsgaCk7XHJcbiAgICAgICAgb0F1ZGlvLnN0eWxlLmNzc1RleHQgPSAodyA/ICgnd2lkdGg6JyArIHcgKyAnOyAnKSA6ICcnKSArIChoID8gKCdoZWlnaHQ6JyArIGggKyAnOycpIDogJycpO1xyXG5cclxuICAgICAgICByZXR1cm4gb0F1ZGlvO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0VGFnQXR0cnM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gdGhpcy5vcHRpb25zLmF1ZGlvVGFnQXR0cnM7XHJcbiAgICAgICAgaWYgKCFhdHRycykgcmV0dXJuO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnV0aWwuaGFzT3duKGF0dHJzLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9vbkxpbmtQcmV2aWV3OiBmdW5jdGlvbiAoY29udGV4dCwgcHJvdG9jb2wsIGUpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKTtcclxuICAgICAgICBjb250ZXh0Ll9saW5rVmFsdWUgPSB0aGlzLnRleHRDb250ZW50ID0gIXZhbHVlID8gJycgOiAocHJvdG9jb2wgJiYgdmFsdWUuaW5kZXhPZignOi8vJykgPT09IC0xICYmIHZhbHVlLmluZGV4T2YoJyMnKSAhPT0gMCkgPyBwcm90b2NvbCArIHZhbHVlIDogdmFsdWUuaW5kZXhPZignOi8vJykgPT09IC0xID8gJy8nICsgdmFsdWUgOiB2YWx1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIGZpbGVUYWdzOiBbJ2F1ZGlvJ10sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZSwgZmlsZU1hbmFnZXIsIHJlc2l6aW5nXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMgY2FsbGVkIGZyb20gY29yZS5zZWxlY3RDb21wb25lbnQuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgc2VsZWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5vbk1vZGlmeU1vZGUuY2FsbCh0aGlzLCBlbGVtZW50KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZmlsZU1hbmFnZXIsIHJlc2l6aW5nIFxyXG4gICAgICovXHJcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50IHx8IHRoaXMuY29udGV4dC5hdWRpby5fZWxlbWVudDtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLnV0aWwuaXNDb21wb25lbnQpIHx8IGVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgZGF0YUluZGV4ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSAqIDE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvRGVsZXRlQmVmb3JlID09PSAnZnVuY3Rpb24nICYmICh0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvRGVsZXRlQmVmb3JlKGVsZW1lbnQsIGNvbnRhaW5lciwgZGF0YUluZGV4LCB0aGlzKSA9PT0gZmFsc2UpKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZm9jdXNFbCA9IChjb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZyB8fCBjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICBjb25zdCBlbXB0eURpdiA9IGNvbnRhaW5lci5wYXJlbnROb2RlO1xyXG4gICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmluaXQuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgIGlmIChlbXB0eURpdiAhPT0gdGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5ZykgdGhpcy51dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKGVtcHR5RGl2LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMDsgfSwgbnVsbCk7XHJcblxyXG4gICAgICAgIC8vIGZvY3VzXHJcbiAgICAgICAgdGhpcy5mb2N1c0VkZ2UoZm9jdXNFbCk7XHJcblxyXG4gICAgICAgIC8vIGZpbGVNYW5hZ2VyIGV2ZW50XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLmRlbGV0ZUluZm8uY2FsbCh0aGlzLCAnYXVkaW8nLCBkYXRhSW5kZXgsIHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWQpO1xyXG5cclxuICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBmaWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBjaGVja0ZpbGVJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLmNoZWNrSW5mby5jYWxsKHRoaXMsICdhdWRpbycsIFsnYXVkaW8nXSwgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZCwgdGhpcy5wbHVnaW5zLmF1ZGlvLnVwZGF0ZUNvdmVyLmJpbmQodGhpcyksIGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgZmlsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgcmVzZXRGaWxlSW5mbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5yZXNldEluZm8uY2FsbCh0aGlzLCAnYXVkaW8nLCB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKHVwZGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRBdWRpbyA9IHRoaXMuY29udGV4dC5hdWRpbztcclxuXHJcbiAgICAgICAgaWYgKCF1cGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmluaXQuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZSAmJiB0aGlzLm9wdGlvbnMuYXVkaW9NdWx0aXBsZUZpbGUpIGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0QXVkaW8uX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnRleHRBdWRpby5fbGlua1ZhbHVlID0gY29udGV4dEF1ZGlvLnByZXZpZXcudGV4dENvbnRlbnQgPSBjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlLnZhbHVlID0gY29udGV4dEF1ZGlvLl9lbGVtZW50LnNyYztcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZSAmJiB0aGlzLm9wdGlvbnMuYXVkaW9NdWx0aXBsZUZpbGUpIGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZS5yZW1vdmVBdHRyaWJ1dGUoJ211bHRpcGxlJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZSAmJiB0aGlzLm9wdGlvbnMuYXVkaW9NdWx0aXBsZUZpbGUpIGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZS5yZW1vdmVBdHRyaWJ1dGUoJ211bHRpcGxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIG9wZW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLm9wZW4uY2FsbCh0aGlzLCAnYXVkaW8nLCAnYXVkaW8nID09PSB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN1Ym1pdDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0QXVkaW8gPSB0aGlzLmNvbnRleHQuYXVkaW87XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlICYmIGNvbnRleHRBdWRpby5hdWRpb0lucHV0RmlsZS5maWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8uc3VibWl0QWN0aW9uLmNhbGwodGhpcywgY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlLmZpbGVzKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0QXVkaW8uYXVkaW9VcmxGaWxlICYmIGNvbnRleHRBdWRpby5fbGlua1ZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5zZXR1cFVybC5jYWxsKHRoaXMsIGNvbnRleHRBdWRpby5fbGlua1ZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmF1ZGlvLnN1Ym1pdC5mYWlsXSBjYXVzZSA6IFwiJyArIGVycm9yLm1lc3NhZ2UgKyAnXCInKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIHN1Ym1pdEFjdGlvbjogZnVuY3Rpb24gKGZpbGVMaXN0KSB7XHJcbiAgICAgICAgaWYgKGZpbGVMaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgZmlsZVNpemUgPSAwO1xyXG4gICAgICAgIGxldCBmaWxlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmaWxlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoL2F1ZGlvL2kudGVzdChmaWxlTGlzdFtpXS50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZXMucHVzaChmaWxlTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICBmaWxlU2l6ZSArPSBmaWxlTGlzdFtpXS5zaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsaW1pdFNpemUgPSB0aGlzLm9wdGlvbnMuYXVkaW9VcGxvYWRTaXplTGltaXQ7XHJcbiAgICAgICAgaWYgKGxpbWl0U2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGluZm9TaXplID0gMDtcclxuICAgICAgICAgICAgY29uc3QgYXVkaW9zSW5mbyA9IHRoaXMuY29udGV4dC5hdWRpby5faW5mb0xpc3Q7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhdWRpb3NJbmZvLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvU2l6ZSArPSBhdWRpb3NJbmZvW2ldLnNpemUgKiAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKGZpbGVTaXplICsgaW5mb1NpemUpID4gbGltaXRTaXplKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gJ1tTVU5FRElUT1IuYXVkaW9VcGxvYWQuZmFpbF0gU2l6ZSBvZiB1cGxvYWRhYmxlIHRvdGFsIGF1ZGlvczogJyArIChsaW1pdFNpemUvMTAwMCkgKyAnS0InO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkRXJyb3IgIT09ICdmdW5jdGlvbicgfHwgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZEVycm9yKGVyciwgeyAnbGltaXRTaXplJzogbGltaXRTaXplLCAnY3VycmVudFNpemUnOiBpbmZvU2l6ZSwgJ3VwbG9hZFNpemUnOiBmaWxlU2l6ZSB9LCB0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25zLm5vdGljZU9wZW4oZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dEF1ZGlvID0gdGhpcy5jb250ZXh0LmF1ZGlvO1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5fdXBsb2FkRmlsZUxlbmd0aCA9IGZpbGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgICAgICAgaXNVcGRhdGU6IHRoaXMuY29udGV4dC5kaWFsb2cudXBkYXRlTW9kYWwsXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGNvbnRleHRBdWRpby5fZWxlbWVudFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkQmVmb3JlKGZpbGVzLCBpbmZvLCB0aGlzLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgdGhpcy5fdy5BcnJheS5pc0FycmF5KGRhdGEucmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5yZWdpc3Rlci5jYWxsKHRoaXMsIGluZm8sIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8udXBsb2FkLmNhbGwodGhpcywgaW5mbywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmIHJlc3VsdC5sZW5ndGggPiAwKSBmaWxlcyA9IHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby51cGxvYWQuY2FsbCh0aGlzLCBpbmZvLCBmaWxlcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGVycm9yOiBmdW5jdGlvbiAobWVzc2FnZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mdW5jdGlvbnMub25BdWRpb1VwbG9hZEVycm9yICE9PSAnZnVuY3Rpb24nIHx8IHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWRFcnJvcihtZXNzYWdlLCByZXNwb25zZSwgdGhpcykpIHtcclxuICAgICAgICAgICAgdGhpcy5mdW5jdGlvbnMubm90aWNlT3BlbihtZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IucGx1Z2luLmF1ZGlvLmV4Y2VwdGlvbl0gcmVzcG9uc2U6ICcgKyBtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHVwbG9hZDogZnVuY3Rpb24gKGluZm8sIGZpbGVzKSB7XHJcbiAgICAgICAgaWYgKCFmaWxlcykge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZmlsZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5lcnJvci5jYWxsKHRoaXMsIGZpbGVzLCBudWxsKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYXVkaW9VcGxvYWRVcmwgPSB0aGlzLm9wdGlvbnMuYXVkaW9VcGxvYWRVcmw7XHJcbiAgICAgICAgY29uc3QgZmlsZXNMZW4gPSB0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsID8gMSA6IGZpbGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gY3JlYXRlIGZvcm1EYXRhXHJcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzTGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlLScgKyBpLCBmaWxlc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXJ2ZXIgdXBsb2FkXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnVwbG9hZC5jYWxsKHRoaXMsIGF1ZGlvVXBsb2FkVXJsLCB0aGlzLm9wdGlvbnMuYXVkaW9VcGxvYWRIZWFkZXIsIGZvcm1EYXRhLCB0aGlzLnBsdWdpbnMuYXVkaW8uY2FsbEJhY2tfdXBsb2FkLmJpbmQodGhpcywgaW5mbyksIHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWRFcnJvcik7XHJcbiAgICB9LFxyXG5cclxuICAgIGNhbGxCYWNrX3VwbG9hZDogZnVuY3Rpb24gKGluZm8sIHhtbEh0dHApIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZnVuY3Rpb25zLmF1ZGlvVXBsb2FkSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5hdWRpb1VwbG9hZEhhbmRsZXIoeG1sSHR0cCwgaW5mbywgdGhpcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmVycm9yLmNhbGwodGhpcywgcmVzcG9uc2UuZXJyb3JNZXNzYWdlLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuYXVkaW8ucmVnaXN0ZXIuY2FsbCh0aGlzLCBpbmZvLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAoaW5mbywgcmVzcG9uc2UpIHtcclxuICAgICAgICBjb25zdCBmaWxlTGlzdCA9IHJlc3BvbnNlLnJlc3VsdDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZpbGVMaXN0Lmxlbmd0aCwgZmlsZSwgb0F1ZGlvOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGluZm8uaXNVcGRhdGUpIG9BdWRpbyA9IGluZm8uZWxlbWVudDtcclxuICAgICAgICAgICAgZWxzZSBvQXVkaW8gPSB0aGlzLnBsdWdpbnMuYXVkaW8uX2NyZWF0ZUF1ZGlvVGFnLmNhbGwodGhpcyk7XHJcblxyXG4gICAgICAgICAgICBmaWxlID0geyBuYW1lOiBmaWxlTGlzdFtpXS5uYW1lLCBzaXplOiBmaWxlTGlzdFtpXS5zaXplIH07XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5jcmVhdGVfYXVkaW8uY2FsbCh0aGlzLCBvQXVkaW8sIGZpbGVMaXN0W2ldLnVybCwgZmlsZSwgaW5mby5pc1VwZGF0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXR1cFVybDogZnVuY3Rpb24gKHNyYykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChzcmMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5jcmVhdGVfYXVkaW8uY2FsbCh0aGlzLCB0aGlzLnBsdWdpbnMuYXVkaW8uX2NyZWF0ZUF1ZGlvVGFnLmNhbGwodGhpcyksIHNyYywgbnVsbCwgdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuYXVkaW8uYXVkaW8uZmFpbF0gY2F1c2UgOiBcIicgKyBlcnJvci5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZV9hdWRpbzogZnVuY3Rpb24gKGVsZW1lbnQsIHNyYywgZmlsZSwgaXNVcGRhdGUpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0QXVkaW8gPSB0aGlzLmNvbnRleHQuYXVkaW87XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gY3JlYXRlIG5ldyB0YWdcclxuICAgICAgICBpZiAoIWlzVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc3JjID0gc3JjO1xyXG4gICAgICAgICAgICBjb25zdCBjb3ZlciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvdmVyLmNhbGwodGhpcywgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvbnRhaW5lci5jYWxsKHRoaXMsIGNvdmVyLCAnJyk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnNlcnRDb21wb25lbnQoY29udGFpbmVyLCBmYWxzZSwgdHJ1ZSwgIXRoaXMub3B0aW9ucy5tZWRpYUF1dG9TZWxlY3QpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubWVkaWFBdXRvU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5hcHBlbmRGb3JtYXRUYWcoY29udGFpbmVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGlmIChsaW5lKSB0aGlzLnNldFJhbmdlKGxpbmUsIDAsIGxpbmUsIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAvLyB1cGRhdGVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHRBdWRpby5fZWxlbWVudCkgZWxlbWVudCA9IGNvbnRleHRBdWRpby5fZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5zcmMgIT09IHNyYykge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudChlbGVtZW50LCAnYXVkaW8nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGVsZW1lbnQsICdhdWRpbycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuc2V0SW5mby5jYWxsKHRoaXMsICdhdWRpbycsIGVsZW1lbnQsIHRoaXMuZnVuY3Rpb25zLm9uQXVkaW9VcGxvYWQsIGZpbGUsIGZhbHNlKTtcclxuICAgICAgICBpZiAoaXNVcGRhdGUpIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgdXBkYXRlQ292ZXI6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dEF1ZGlvID0gdGhpcy5jb250ZXh0LmF1ZGlvO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5fc2V0VGFnQXR0cnMuY2FsbCh0aGlzLCBlbGVtZW50KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBmaW5kIGNvbXBvbmVudCBlbGVtZW50XHJcbiAgICAgICAgbGV0IGV4aXN0RWxlbWVudCA9ICh0aGlzLnV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoZWxlbWVudC5wYXJlbnROb2RlKSB8fCB0aGlzLnV0aWwuaXNXeXNpd3lnRGl2KGVsZW1lbnQucGFyZW50Tm9kZSkpID8gXHJcbiAgICAgICAgICAgIGVsZW1lbnQgOiB0aGlzLnV0aWwuZ2V0Rm9ybWF0RWxlbWVudChlbGVtZW50KSB8fCBlbGVtZW50O1xyXG5cclxuICAgICAgICAvLyBjbG9uZSBlbGVtZW50XHJcbiAgICAgICAgY29uc3QgcHJldkVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5fZWxlbWVudCA9IGVsZW1lbnQgPSBlbGVtZW50LmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgY29uc3QgY292ZXIgPSB0aGlzLnBsdWdpbnMuY29tcG9uZW50LnNldF9jb3Zlci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMucGx1Z2lucy5jb21wb25lbnQuc2V0X2NvbnRhaW5lci5jYWxsKHRoaXMsIGNvdmVyLCAnc2UtYXVkaW8tY29udGFpbmVyJyk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChwcmV2RWxlbWVudCwgdGhpcy51dGlsLmlzTm90Q2hlY2tpbmdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgcHJldkVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoY29udGFpbmVyLCBwcmV2RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy51dGlsLmlzTGlzdENlbGwoZXhpc3RFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChwcmV2RWxlbWVudCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQucGFyZW50Tm9kZSA9PT0gZXhpc3RFbGVtZW50OyB9KTtcclxuICAgICAgICAgICAgICAgIGV4aXN0RWxlbWVudC5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCByZWZlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShwcmV2RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlRW1wdHlOb2RlKHJlZmVyLCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnV0aWwuaXNGb3JtYXRFbGVtZW50KGV4aXN0RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQocHJldkVsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IGV4aXN0RWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgICAgICBleGlzdEVsZW1lbnQgPSB0aGlzLnV0aWwuc3BsaXRFbGVtZW50KGV4aXN0RWxlbWVudCwgcmVmZXIpO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZXhpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKHByZXZFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVFbXB0eU5vZGUoZXhpc3RFbGVtZW50LCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChleGlzdEVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSBleGlzdEVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy51dGlsLmh0bWxSZW1vdmVXaGl0ZVNwYWNlKGV4aXN0RWxlbWVudC5pbm5lckhUTUwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhpc3RFbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbnRhaW5lciwgZXhpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW1NVTkVESVRPUi5hdWRpby5lcnJvcl0gTWF5YmUgdGhlIGF1ZGlvIHRhZyBpcyBuZXN0ZWQuJywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnNldEluZm8uY2FsbCh0aGlzLCAnYXVkaW8nLCBlbGVtZW50LCB0aGlzLmZ1bmN0aW9ucy5vbkF1ZGlvVXBsb2FkLCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLmluaXQuY2FsbCh0aGlzKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVNYW5hZ2VyLCByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBvbk1vZGlmeU1vZGU6IGZ1bmN0aW9uIChzZWxlY3Rpb25UYWcpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0QXVkaW8gPSB0aGlzLmNvbnRleHQuYXVkaW87XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zZXRDb250cm9sbGVyUG9zaXRpb24oY29udGV4dEF1ZGlvLmNvbnRyb2xsZXIsIHNlbGVjdGlvblRhZywgJ2JvdHRvbScsIHtsZWZ0OiAwLCB0b3A6IDB9KTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT24oY29udGV4dEF1ZGlvLmNvbnRyb2xsZXIsIHNlbGVjdGlvblRhZywgdGhpcy5wbHVnaW5zLmF1ZGlvLm9uQ29udHJvbGxlck9mZi5iaW5kKHRoaXMsIHNlbGVjdGlvblRhZyksICdhdWRpbycpO1xyXG5cclxuICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3Moc2VsZWN0aW9uVGFnLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgY29udGV4dEF1ZGlvLl9lbGVtZW50ID0gc2VsZWN0aW9uVGFnO1xyXG4gICAgICAgIGNvbnRleHRBdWRpby5fY292ZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3Rpb25UYWcsICdGSUdVUkUnKTtcclxuICAgICAgICBjb250ZXh0QXVkaW8uX2NvbnRhaW5lciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGlvblRhZywgdGhpcy51dGlsLmlzQ29tcG9uZW50KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVNYW5hZ2VyLCByZXNpemluZ1xyXG4gICAgICovXHJcbiAgICBvcGVuTW9kaWZ5OiBmdW5jdGlvbiAobm90T3Blbikge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQuYXVkaW8uYXVkaW9VcmxGaWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRBdWRpbyA9IHRoaXMuY29udGV4dC5hdWRpbztcclxuICAgICAgICAgICAgY29udGV4dEF1ZGlvLl9saW5rVmFsdWUgPSBjb250ZXh0QXVkaW8ucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGUudmFsdWUgPSBjb250ZXh0QXVkaW8uX2VsZW1lbnQuc3JjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW5vdE9wZW4pIHRoaXMucGx1Z2lucy5kaWFsb2cub3Blbi5jYWxsKHRoaXMsICdhdWRpbycsIHRydWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNsaWNrX2NvbnRyb2xsZXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgaWYgKC91cGRhdGUvLnRlc3QoY29tbWFuZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmF1ZGlvLm9wZW5Nb2RpZnkuY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgeyAvKiogZGVsZXRlICovXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5hdWRpby5kZXN0cm95LmNhbGwodGhpcywgdGhpcy5jb250ZXh0LmF1ZGlvLl9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25Db250cm9sbGVyT2ZmOiBmdW5jdGlvbiAoc2VsZWN0aW9uVGFnKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHNlbGVjdGlvblRhZywgJ2FjdGl2ZScpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5hdWRpby5jb250cm9sbGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgY29udGV4dEF1ZGlvID0gdGhpcy5jb250ZXh0LmF1ZGlvO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlKSBjb250ZXh0QXVkaW8uYXVkaW9JbnB1dEZpbGUudmFsdWUgPSAnJztcclxuICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZSkgY29udGV4dEF1ZGlvLl9saW5rVmFsdWUgPSBjb250ZXh0QXVkaW8ucHJldmlldy50ZXh0Q29udGVudCA9IGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGUudmFsdWUgPSAnJztcclxuICAgICAgICBpZiAoY29udGV4dEF1ZGlvLmF1ZGlvSW5wdXRGaWxlICYmIGNvbnRleHRBdWRpby5hdWRpb1VybEZpbGUpIHtcclxuICAgICAgICAgICAgY29udGV4dEF1ZGlvLmF1ZGlvVXJsRmlsZS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRBdWRpby5wcmV2aWV3LnN0eWxlLnRleHREZWNvcmF0aW9uID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0QXVkaW8uX2VsZW1lbnQgPSBudWxsO1xyXG4gICAgfVxyXG59OyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBkaWFsb2cgZnJvbSAnLi4vbW9kdWxlcy9kaWFsb2cnO1xyXG5cclxuY29uc3QgS0FURVhfV0VCU0lURSA9IFwiaHR0cHM6Ly9rYXRleC5vcmcvZG9jcy9zdXBwb3J0ZWQuaHRtbFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ21hdGgnLFxyXG4gICAgZGlzcGxheTogJ2RpYWxvZycsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29yZS5hZGRNb2R1bGUoW2RpYWxvZ10pO1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQubWF0aCA9IHtcclxuICAgICAgICAgICAgZm9jdXNFbGVtZW50OiBudWxsLCAvLyBAT3ZlcnJpZGUgZGlhbG9nIC8vIFRoaXMgZWxlbWVudCBoYXMgZm9jdXMgd2hlbiB0aGUgZGlhbG9nIGlzIG9wZW5lZC5cclxuICAgICAgICAgICAgcHJldmlld0VsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGZvbnRTaXplRWxlbWVudDogbnVsbCxcclxuICAgICAgICAgICAgZGVmYXVsdEZvbnRTaXplOiAnJyxcclxuICAgICAgICAgICAgX21hdGhFeHA6IG51bGxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogbWF0aCBkaWFsb2cgKi9cclxuICAgICAgICBsZXQgbWF0aF9kaWFsb2cgPSB0aGlzLnNldERpYWxvZyhjb3JlKTtcclxuICAgICAgICBjb250ZXh0Lm1hdGgubW9kYWwgPSBtYXRoX2RpYWxvZztcclxuICAgICAgICBjb250ZXh0Lm1hdGguZm9jdXNFbGVtZW50ID0gbWF0aF9kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLW1hdGgtZXhwJyk7XHJcbiAgICAgICAgY29udGV4dC5tYXRoLnByZXZpZXdFbGVtZW50ID0gbWF0aF9kaWFsb2cucXVlcnlTZWxlY3RvcignLnNlLW1hdGgtcHJldmlldycpO1xyXG4gICAgICAgIGNvbnRleHQubWF0aC5mb250U2l6ZUVsZW1lbnQgPSBtYXRoX2RpYWxvZy5xdWVyeVNlbGVjdG9yKCcuc2UtbWF0aC1zaXplJyk7XHJcbiAgICAgICAgY29udGV4dC5tYXRoLmZvY3VzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGNvcmUudXRpbC5pc0lFID8gJ3RleHRpbnB1dCcgOiAnaW5wdXQnLCB0aGlzLl9yZW5kZXJNYXRoRXhwLmJpbmQoY29yZSwgY29udGV4dC5tYXRoKSwgZmFsc2UpO1xyXG4gICAgICAgIGNvbnRleHQubWF0aC5mb250U2l6ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHsgdGhpcy5mb250U2l6ZSA9IGUudGFyZ2V0LnZhbHVlOyB9LmJpbmQoY29udGV4dC5tYXRoLnByZXZpZXdFbGVtZW50LnN0eWxlKSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvKiogbWF0aCBjb250cm9sbGVyICovXHJcbiAgICAgICAgbGV0IG1hdGhfY29udHJvbGxlciA9IHRoaXMuc2V0Q29udHJvbGxlcl9NYXRoQnV0dG9uKGNvcmUpO1xyXG4gICAgICAgIGNvbnRleHQubWF0aC5tYXRoQ29udHJvbGxlciA9IG1hdGhfY29udHJvbGxlcjtcclxuICAgICAgICBjb250ZXh0Lm1hdGguX21hdGhFeHAgPSBudWxsO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIG1hdGhfZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnN1Ym1pdC5iaW5kKGNvcmUpLCBmYWxzZSk7XHJcbiAgICAgICAgbWF0aF9jb250cm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrX21hdGhDb250cm9sbGVyLmJpbmQoY29yZSkpO1xyXG4gICAgICAgIGNvbnRleHQubWF0aC5wcmV2aWV3RWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IGNvbnRleHQubWF0aC5kZWZhdWx0Rm9udFNpemU7XHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xyXG4gICAgICAgIGNvbnRleHQuZGlhbG9nLm1vZGFsLmFwcGVuZENoaWxkKG1hdGhfZGlhbG9nKTtcclxuICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVsYXRpdmUuYXBwZW5kQ2hpbGQobWF0aF9jb250cm9sbGVyKTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIG1hdGhfZGlhbG9nID0gbnVsbCwgbWF0aF9jb250cm9sbGVyID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIGRpYWxvZyAqL1xyXG4gICAgc2V0RGlhbG9nOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgZGlhbG9nID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gY29yZS5vcHRpb25zLm1hdGhGb250U2l6ZTtcclxuICAgICAgICBsZXQgZGVmYXVsdEZvbnRTaXplID0gZm9udFNpemVbMF0udmFsdWU7XHJcblxyXG4gICAgICAgIGRpYWxvZy5jbGFzc05hbWUgPSAnc2UtZGlhbG9nLWNvbnRlbnQnO1xyXG4gICAgICAgIGRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIGxldCBodG1sID0gJycgK1xyXG4gICAgICAgICc8Zm9ybT4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctaGVhZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiY2xvc2VcIiBjbGFzcz1cInNlLWJ0biBzZS1kaWFsb2ctY2xvc2VcIiB0aXRsZT1cIicgKyBsYW5nLmRpYWxvZ0JveC5jbG9zZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LmNsb3NlICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMuY2FuY2VsICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLW1vZGFsLXRpdGxlXCI+JyArIGxhbmcuZGlhbG9nQm94Lm1hdGhCb3gudGl0bGUgKyAnPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWJvZHlcIj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtZGlhbG9nLWZvcm1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGxhYmVsPicgKyBsYW5nLmRpYWxvZ0JveC5tYXRoQm94LmlucHV0TGFiZWwgKyAnICg8YSBocmVmPVwiJyArIEtBVEVYX1dFQlNJVEUgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+S2FUZVg8L2E+KTwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0ZXh0YXJlYSBjbGFzcz1cInNlLWlucHV0LWZvcm0gc2UtbWF0aC1leHBcIiB0eXBlPVwidGV4dFwiPjwvdGV4dGFyZWE+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3gubWF0aEJveC5mb250U2l6ZUxhYmVsICsgJzwvbGFiZWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzZWxlY3QgY2xhc3M9XCJzZS1pbnB1dC1zZWxlY3Qgc2UtbWF0aC1zaXplXCI+JztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZm9udFNpemUubGVuZ3RoLCBmOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGZvbnRTaXplW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZi5kZWZhdWx0KSBkZWZhdWx0Rm9udFNpemUgPSBmLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIGYudmFsdWUgKyAnXCInICsgKGYuZGVmYXVsdCA/ICcgc2VsZWN0ZWQnIDogJycpICsgJz4nICsgZi50ZXh0ICsgJzwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC9zZWxlY3Q+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWRpYWxvZy1mb3JtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD4nICsgbGFuZy5kaWFsb2dCb3gubWF0aEJveC5wcmV2aWV3TGFiZWwgKyAnPC9sYWJlbD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPHAgY2xhc3M9XCJzZS1tYXRoLXByZXZpZXdcIj48L3A+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1kaWFsb2ctZm9vdGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJzZS1idG4tcHJpbWFyeVwiIHRpdGxlPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuZGlhbG9nQm94LnN1Ym1pdEJ1dHRvbiArICdcIj48c3Bhbj4nICsgbGFuZy5kaWFsb2dCb3guc3VibWl0QnV0dG9uICsgJzwvc3Bhbj48L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICc8L2Zvcm0+JztcclxuXHJcbiAgICAgICAgY29yZS5jb250ZXh0Lm1hdGguZGVmYXVsdEZvbnRTaXplID0gZGVmYXVsdEZvbnRTaXplO1xyXG4gICAgICAgIGRpYWxvZy5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgIHJldHVybiBkaWFsb2c7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKiBtb2RpZnkgY29udHJvbGxlciBidXR0b24gKi9cclxuICAgIHNldENvbnRyb2xsZXJfTWF0aEJ1dHRvbjogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IG1hdGhfYnRuID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBtYXRoX2J0bi5jbGFzc05hbWUgPSAnc2UtY29udHJvbGxlciBzZS1jb250cm9sbGVyLWxpbmsnO1xyXG4gICAgICAgIG1hdGhfYnRuLmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWFycm93IHNlLWFycm93LXVwXCI+PC9kaXY+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJsaW5rLWNvbnRlbnRcIj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXBcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJ1cGRhdGVcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMuZWRpdCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5lZGl0ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiZGVsZXRlXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmljb25zLmRlbGV0ZSArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yZW1vdmUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAnJztcclxuXHJcbiAgICAgICAgcmV0dXJuIG1hdGhfYnRuO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIG9wZW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbnMuZGlhbG9nLm9wZW4uY2FsbCh0aGlzLCAnbWF0aCcsICdtYXRoJyA9PT0gdGhpcy5jdXJyZW50Q29udHJvbGxlck5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBjb3JlIC0gbWFuYWdlZFRhZ3NJbmZvXHJcbiAgICAgKi9cclxuICAgIG1hbmFnZWRUYWdzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAna2F0ZXgnLFxyXG4gICAgICAgICAgICBtZXRob2Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWV4cCcpIHx8ICF0aGlzLm9wdGlvbnMua2F0ZXgpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRvbSA9IHRoaXMuX2QuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQodGhpcy5wbHVnaW5zLm1hdGguX3JlbmRlcmVyLmNhbGwodGhpcywgdGhpcy51dGlsLkhUTUxEZWNvZGVyKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWV4cCcpKSkpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBkb20ucXVlcnlTZWxlY3RvcignLmthdGV4JykuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIF9yZW5kZXJlcjogZnVuY3Rpb24gKGV4cCkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGhpcy5jb250ZXh0Lm1hdGguZm9jdXNFbGVtZW50LCAnc2UtZXJyb3InKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5vcHRpb25zLmthdGV4LnNyYy5yZW5kZXJUb1N0cmluZyhleHAsIHt0aHJvd09uRXJyb3I6IHRydWUsIGRpc3BsYXlNb2RlOiB0cnVlfSk7XHJcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3ModGhpcy5jb250ZXh0Lm1hdGguZm9jdXNFbGVtZW50LCAnc2UtZXJyb3InKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gJzxzcGFuIGNsYXNzPVwic2UtbWF0aC1rYXRleC1lcnJvclwiPkthdGV4IHN5bnRheCBlcnJvci4gKFJlZmVyIDxhIGhyZWY9XCInICsgS0FURVhfV0VCU0lURSArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5LYVRlWDwvYT4pPC9zcGFuPic7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW1NVTkVESVRPUi5tYXRoLkthdGV4LmVycm9yXSAnLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG5cclxuICAgIF9yZW5kZXJNYXRoRXhwOiBmdW5jdGlvbiAoY29udGV4dE1hdGgsIGUpIHtcclxuICAgICAgICBjb250ZXh0TWF0aC5wcmV2aWV3RWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLnBsdWdpbnMubWF0aC5fcmVuZGVyZXIuY2FsbCh0aGlzLCBlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN1Ym1pdDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBjb25zdCBzdWJtaXRBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQubWF0aC5mb2N1c0VsZW1lbnQudmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29udGV4dE1hdGggPSB0aGlzLmNvbnRleHQubWF0aDtcclxuICAgICAgICAgICAgY29uc3QgbWF0aEV4cCA9IGNvbnRleHRNYXRoLmZvY3VzRWxlbWVudC52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3Qga2F0ZXhFbCA9IGNvbnRleHRNYXRoLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5rYXRleCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFrYXRleEVsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGthdGV4RWwuY2xhc3NOYW1lID0gJ19fc2VfX2thdGV4ICcgKyBrYXRleEVsLmNsYXNzTmFtZTtcclxuICAgICAgICAgICAga2F0ZXhFbC5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGZhbHNlKTtcclxuICAgICAgICAgICAga2F0ZXhFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwJywgdGhpcy51dGlsLkhUTUxFbmNvZGVyKG1hdGhFeHApKTtcclxuICAgICAgICAgICAga2F0ZXhFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZm9udC1zaXplJywgY29udGV4dE1hdGguZm9udFNpemVFbGVtZW50LnZhbHVlKTtcclxuICAgICAgICAgICAga2F0ZXhFbC5zdHlsZS5mb250U2l6ZSA9IGNvbnRleHRNYXRoLmZvbnRTaXplRWxlbWVudC52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0LmRpYWxvZy51cGRhdGVNb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRGb3JtYXRzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb0Zvcm1hdCA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1swXS5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb0Zvcm1hdC5hcHBlbmRDaGlsZChrYXRleEVsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5zZXJ0Tm9kZShvRm9ybWF0LCBudWxsLCB0cnVlKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5zZXJ0Tm9kZShrYXRleEVsLCBudWxsLCB0cnVlKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5ID0gdGhpcy51dGlsLmNyZWF0ZVRleHROb2RlKHRoaXMudXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICBrYXRleEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVtcHR5LCBrYXRleEVsLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uoa2F0ZXhFbCwgMCwga2F0ZXhFbCwgMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJFbCA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KGNvbnRleHRNYXRoLl9tYXRoRXhwLCAnLmthdGV4Jyk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJFbC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChrYXRleEVsLCBjb250YWluZXJFbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGthdGV4RWwsIDAsIGthdGV4RWwsIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0TWF0aC5mb2N1c0VsZW1lbnQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgY29udGV4dE1hdGguZm9udFNpemVFbGVtZW50LnZhbHVlID0gJzFlbSc7XHJcbiAgICAgICAgICAgIGNvbnRleHRNYXRoLnByZXZpZXdFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gJzFlbSc7XHJcbiAgICAgICAgICAgIGNvbnRleHRNYXRoLnByZXZpZXdFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoc3VibWl0QWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kaWFsb2cuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5jbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIGFjdGl2ZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlckFycmF5LmluZGV4T2YodGhpcy5jb250ZXh0Lm1hdGgubWF0aENvbnRyb2xsZXIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwJykpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlckFycmF5LmluZGV4T2YodGhpcy5jb250ZXh0Lm1hdGgubWF0aENvbnRyb2xsZXIpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShlbGVtZW50LCAwLCBlbGVtZW50LCAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5tYXRoLmNhbGxfY29udHJvbGxlci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbjogZnVuY3Rpb24gKHVwZGF0ZSkge1xyXG4gICAgICAgIGlmICghdXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5tYXRoLmluaXQuY2FsbCh0aGlzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0TWF0aCA9IHRoaXMuY29udGV4dC5tYXRoO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dE1hdGguX21hdGhFeHApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cCA9IHRoaXMudXRpbC5IVE1MRGVjb2Rlcihjb250ZXh0TWF0aC5fbWF0aEV4cC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwJykpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSBjb250ZXh0TWF0aC5fbWF0aEV4cC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZm9udC1zaXplJykgfHwgJzFlbSc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlhbG9nLnVwZGF0ZU1vZGFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRNYXRoLmZvY3VzRWxlbWVudC52YWx1ZSA9IGV4cDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRNYXRoLmZvbnRTaXplRWxlbWVudC52YWx1ZSA9IGZvbnRTaXplO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dE1hdGgucHJldmlld0VsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5wbHVnaW5zLm1hdGguX3JlbmRlcmVyLmNhbGwodGhpcywgZXhwKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRNYXRoLnByZXZpZXdFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNhbGxfY29udHJvbGxlcjogZnVuY3Rpb24gKG1hdGhUYWcpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQubWF0aC5fbWF0aEV4cCA9IG1hdGhUYWc7XHJcbiAgICAgICAgY29uc3QgbWF0aEJ0biA9IHRoaXMuY29udGV4dC5tYXRoLm1hdGhDb250cm9sbGVyO1xyXG5cclxuICAgICAgICB0aGlzLnNldENvbnRyb2xsZXJQb3NpdGlvbihtYXRoQnRuLCBtYXRoVGFnLCAnYm90dG9tJywge2xlZnQ6IDAsIHRvcDogMH0pO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPbihtYXRoQnRuLCBtYXRoVGFnLCAnbWF0aCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNsaWNrX21hdGhDb250cm9sbGVyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpIHx8IGUudGFyZ2V0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAoL3VwZGF0ZS8udGVzdChjb21tYW5kKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubWF0aC5mb2N1c0VsZW1lbnQudmFsdWUgPSB0aGlzLnV0aWwuSFRNTERlY29kZXIodGhpcy5jb250ZXh0Lm1hdGguX21hdGhFeHAuZ2V0QXR0cmlidXRlKCdkYXRhLWV4cCcpKTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmRpYWxvZy5vcGVuLmNhbGwodGhpcywgJ21hdGgnLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogZGVsZXRlICovXHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKHRoaXMuY29udGV4dC5tYXRoLl9tYXRoRXhwKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0Lm1hdGguX21hdGhFeHAgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgIH0sXHJcblxyXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRNYXRoID0gdGhpcy5jb250ZXh0Lm1hdGg7XHJcbiAgICAgICAgY29udGV4dE1hdGgubWF0aENvbnRyb2xsZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBjb250ZXh0TWF0aC5fbWF0aEV4cCA9IG51bGw7XHJcbiAgICAgICAgY29udGV4dE1hdGguZm9jdXNFbGVtZW50LnZhbHVlID0gJyc7XHJcbiAgICAgICAgY29udGV4dE1hdGgucHJldmlld0VsZW1lbnQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB9XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIGNvbW1hbmRcclxuaW1wb3J0IGJsb2NrcXVvdGUgZnJvbSAnLi9jb21tYW5kL2Jsb2NrcXVvdGUnO1xyXG5cclxuLy8gc3VibWVudVxyXG5pbXBvcnQgYWxpZ24gZnJvbSAnLi9zdWJtZW51L2FsaWduJztcclxuaW1wb3J0IGZvbnQgZnJvbSAnLi9zdWJtZW51L2ZvbnQnO1xyXG5pbXBvcnQgZm9udFNpemUgZnJvbSAnLi9zdWJtZW51L2ZvbnRTaXplJztcclxuaW1wb3J0IGZvbnRDb2xvciBmcm9tICcuL3N1Ym1lbnUvZm9udENvbG9yJztcclxuaW1wb3J0IGhpbGl0ZUNvbG9yIGZyb20gJy4vc3VibWVudS9oaWxpdGVDb2xvcic7XHJcbmltcG9ydCBob3Jpem9udGFsUnVsZSBmcm9tICcuL3N1Ym1lbnUvaG9yaXpvbnRhbFJ1bGUnO1xyXG5pbXBvcnQgbGlzdCBmcm9tICcuL3N1Ym1lbnUvbGlzdCc7XHJcbmltcG9ydCB0YWJsZSBmcm9tICcuL3N1Ym1lbnUvdGFibGUnO1xyXG5pbXBvcnQgZm9ybWF0QmxvY2sgZnJvbSAnLi9zdWJtZW51L2Zvcm1hdEJsb2NrJztcclxuaW1wb3J0IGxpbmVIZWlnaHQgZnJvbSAnLi9zdWJtZW51L2xpbmVIZWlnaHQnO1xyXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9zdWJtZW51L3RlbXBsYXRlJztcclxuaW1wb3J0IHBhcmFncmFwaFN0eWxlIGZyb20gJy4vc3VibWVudS9wYXJhZ3JhcGhTdHlsZSc7XHJcbmltcG9ydCB0ZXh0U3R5bGUgZnJvbSAnLi9zdWJtZW51L3RleHRTdHlsZSc7XHJcblxyXG4vLyBkaWFsb2dcclxuaW1wb3J0IGxpbmsgZnJvbSAnLi9kaWFsb2cvbGluayc7XHJcbmltcG9ydCBpbWFnZSBmcm9tICcuL2RpYWxvZy9pbWFnZSc7XHJcbmltcG9ydCB2aWRlbyBmcm9tICcuL2RpYWxvZy92aWRlbyc7XHJcbmltcG9ydCBhdWRpbyBmcm9tICcuL2RpYWxvZy9hdWRpbyc7XHJcbmltcG9ydCBtYXRoIGZyb20gJy4vZGlhbG9nL21hdGgnO1xyXG5cclxuLy8gZmlsZSBicm93c2VyXHJcbmltcG9ydCBpbWFnZUdhbGxlcnkgZnJvbSAnLi9maWxlQnJvd3Nlci9pbWFnZUdhbGxlcnknO1xyXG5cclxuZXhwb3J0IHsgYmxvY2txdW90ZSwgYWxpZ24sIGZvbnQsIGZvbnRTaXplLCBmb250Q29sb3IsIGhpbGl0ZUNvbG9yLCBob3Jpem9udGFsUnVsZSwgbGlzdCwgdGFibGUsIGZvcm1hdEJsb2NrLCBsaW5lSGVpZ2h0LCB0ZW1wbGF0ZSwgcGFyYWdyYXBoU3R5bGUsIHRleHRTdHlsZSwgbGluaywgaW1hZ2UsIHZpZGVvLCBhdWRpbywgbWF0aCwgaW1hZ2VHYWxsZXJ5IH07XHJcbmV4cG9ydCBkZWZhdWx0IHsgYmxvY2txdW90ZSwgYWxpZ24sIGZvbnQsIGZvbnRTaXplLCBmb250Q29sb3IsIGhpbGl0ZUNvbG9yLCBob3Jpem9udGFsUnVsZSwgbGlzdCwgdGFibGUsIGZvcm1hdEJsb2NrLCBsaW5lSGVpZ2h0LCB0ZW1wbGF0ZSwgcGFyYWdyYXBoU3R5bGUsIHRleHRTdHlsZSwgbGluaywgaW1hZ2UsIHZpZGVvLCBhdWRpbywgbWF0aCwgaW1hZ2VHYWxsZXJ5IH07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnYmxvY2txdW90ZScsXHJcbiAgICBkaXNwbGF5OiAnY29tbWFuZCcsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0LmJsb2NrcXVvdGUgPSB7XHJcbiAgICAgICAgICAgIHRhcmdldEJ1dHRvbjogdGFyZ2V0RWxlbWVudCxcclxuICAgICAgICAgICAgdGFnOiBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnQkxPQ0tRVU9URScpXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxyXG4gICAgICovXHJcbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0aGlzLmNvbnRleHQuYmxvY2txdW90ZS50YXJnZXRCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICB9IGVsc2UgaWYgKC9ibG9ja3F1b3RlL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3ModGhpcy5jb250ZXh0LmJsb2NrcXVvdGUudGFyZ2V0QnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGNvcmVcclxuICAgICAqL1xyXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudEJsb2NrcXVvdGUgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudCh0aGlzLmdldFNlbGVjdGlvbk5vZGUoKSwgJ2Jsb2NrcXVvdGUnKTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRCbG9ja3F1b3RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoUmFuZ2VGb3JtYXRFbGVtZW50KGN1cnJlbnRCbG9ja3F1b3RlLCBudWxsLCBudWxsLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlSYW5nZUZvcm1hdEVsZW1lbnQodGhpcy5jb250ZXh0LmJsb2NrcXVvdGUudGFnLmNsb25lTm9kZShmYWxzZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2FsaWduJyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBpY29ucyA9IGNvcmUuaWNvbnM7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0LmFsaWduID0ge1xyXG4gICAgICAgICAgICB0YXJnZXRCdXR0b246IHRhcmdldEVsZW1lbnQsXHJcbiAgICAgICAgICAgIF9pdGVtTWVudTogbnVsbCxcclxuICAgICAgICAgICAgX2FsaWduTGlzdDogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVudEFsaWduOiAnJyxcclxuICAgICAgICAgICAgZGVmYXVsdERpcjogY29yZS5vcHRpb25zLnJ0bCA/ICdyaWdodCcgOiAnbGVmdCcsXHJcbiAgICAgICAgICAgIGljb25zOiB7XHJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5OiBpY29ucy5hbGlnbl9qdXN0aWZ5LFxyXG4gICAgICAgICAgICAgICAgbGVmdDogaWNvbnMuYWxpZ25fbGVmdCxcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiBpY29ucy5hbGlnbl9yaWdodCxcclxuICAgICAgICAgICAgICAgIGNlbnRlcjogaWNvbnMuYWxpZ25fY2VudGVyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuICAgICAgICBsZXQgbGlzdFVsID0gY29udGV4dC5hbGlnbi5faXRlbU1lbnUgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJyk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgbGlzdFVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5waWNrdXAuYmluZChjb3JlKSk7XHJcbiAgICAgICAgY29udGV4dC5hbGlnbi5fYWxpZ25MaXN0ID0gbGlzdFVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsLCBsaXN0VWwgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgY29uc3QgYWxpZ25JdGVtcyA9IGNvcmUub3B0aW9ucy5hbGlnbkl0ZW1zO1xyXG5cclxuICAgICAgICBsZXQgaHRtbCA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpdGVtLCB0ZXh0OyBpIDwgYWxpZ25JdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpdGVtID0gYWxpZ25JdGVtc1tpXTtcclxuICAgICAgICAgICAgdGV4dCA9IGxhbmcudG9vbGJhclsnYWxpZ24nICsgaXRlbS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGl0ZW0uc2xpY2UoMSldO1xyXG4gICAgICAgICAgICBodG1sICs9ICc8bGk+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCBzZS1idG4tYWxpZ25cIiBkYXRhLXZhbHVlPVwiJyArIGl0ZW0gKyAnXCIgdGl0bGU9XCInICsgdGV4dCArICdcIiBhcmlhLWxhYmVsPVwiJyArIHRleHQgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtbGlzdC1pY29uXCI+JyArIGljb25zWydhbGlnbl8nICsgaXRlbV0gKyAnPC9zcGFuPicgKyB0ZXh0ICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgJzwvbGk+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWFsaWduJztcclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgK1xyXG4gICAgICAgICAgICAgICAgJzwvdWw+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxyXG4gICAgICovXHJcbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgYWxpZ25Db250ZXh0ID0gdGhpcy5jb250ZXh0LmFsaWduO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEJ1dHRvbiA9IGFsaWduQ29udGV4dC50YXJnZXRCdXR0b247XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0QnV0dG9uLmZpcnN0RWxlbWVudENoaWxkO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZUVsZW1lbnQodGFyZ2V0LCBhbGlnbkNvbnRleHQuaWNvbnNbYWxpZ25Db250ZXh0LmRlZmF1bHREaXJdKTtcclxuICAgICAgICAgICAgdGFyZ2V0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mb2N1cycpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy51dGlsLmlzRm9ybWF0RWxlbWVudChlbGVtZW50KSkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0QWxpZ24gPSBlbGVtZW50LnN0eWxlLnRleHRBbGlnbjtcclxuICAgICAgICAgICAgaWYgKHRleHRBbGlnbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZUVsZW1lbnQodGFyZ2V0LCBhbGlnbkNvbnRleHQuaWNvbnNbdGV4dEFsaWduXSB8fCBhbGlnbkNvbnRleHQuaWNvbnNbYWxpZ25Db250ZXh0LmRlZmF1bHREaXJdKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMnLCB0ZXh0QWxpZ24pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGFsaWduQ29udGV4dCA9IHRoaXMuY29udGV4dC5hbGlnbjtcclxuICAgICAgICBjb25zdCBhbGlnbkxpc3QgPSBhbGlnbkNvbnRleHQuX2FsaWduTGlzdDtcclxuICAgICAgICBjb25zdCBjdXJyZW50QWxpZ24gPSBhbGlnbkNvbnRleHQudGFyZ2V0QnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cycpIHx8IGFsaWduQ29udGV4dC5kZWZhdWx0RGlyO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudEFsaWduICE9PSBhbGlnbkNvbnRleHQuY3VycmVudEFsaWduKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhbGlnbkxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QWxpZ24gPT09IGFsaWduTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhhbGlnbkxpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGFsaWduTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhbGlnbkNvbnRleHQuY3VycmVudEFsaWduID0gY3VycmVudEFsaWduO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZXhjaGFuZ2VEaXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBkaXIgPSB0aGlzLm9wdGlvbnMucnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcclxuICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5hbGlnbiB8fCB0aGlzLmNvbnRleHQuYWxpZ24uZGVmYXVsdERpciA9PT0gZGlyKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dC5hbGlnbi5kZWZhdWx0RGlyID0gZGlyO1xyXG4gICAgICAgIGxldCBtZW51ID0gdGhpcy5jb250ZXh0LmFsaWduLl9pdGVtTWVudTtcclxuICAgICAgICBsZXQgbGVmdEJ0biA9IG1lbnUucXVlcnlTZWxlY3RvcignW2RhdGEtdmFsdWU9XCJsZWZ0XCJdJyk7XHJcbiAgICAgICAgbGV0IHJpZ2h0QnRuID0gbWVudS5xdWVyeVNlbGVjdG9yKCdbZGF0YS12YWx1ZT1cInJpZ2h0XCJdJyk7XHJcbiAgICAgICAgaWYgKGxlZnRCdG4gJiYgcmlnaHRCdG4pIHtcclxuICAgICAgICAgICAgY29uc3QgbHAgPSBsZWZ0QnRuLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHJwID0gcmlnaHRCdG4ucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgbHAuYXBwZW5kQ2hpbGQocmlnaHRCdG4pO1xyXG4gICAgICAgICAgICBycC5hcHBlbmRDaGlsZChsZWZ0QnRuKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHdoaWxlICghdmFsdWUgJiYgIS9VTC9pLnRlc3QodGFyZ2V0LnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgZGVmYXVsdERpciA9IHRoaXMuY29udGV4dC5hbGlnbi5kZWZhdWx0RGlyO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkRm9ybXN0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1zdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnNldFN0eWxlKHNlbGVjdGVkRm9ybXN0c1tpXSwgJ3RleHRBbGlnbicsICh2YWx1ZSA9PT0gZGVmYXVsdERpciA/ICcnIDogdmFsdWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgdGhpcy5mb2N1cygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnZm9udCcsXHJcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0LmZvbnQgPSB7XHJcbiAgICAgICAgICAgIHRhcmdldFRleHQ6IHRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnR4dCcpLFxyXG4gICAgICAgICAgICB0YXJnZXRUb29sdGlwOiB0YXJnZXRFbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLnNlLXRvb2x0aXAtdGV4dCcpLFxyXG4gICAgICAgICAgICBfZm9udExpc3Q6IG51bGwsXHJcbiAgICAgICAgICAgIGN1cnJlbnRGb250OiAnJ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGxpc3REaXYucXVlcnlTZWxlY3RvcignLnNlLWxpc3QtaW5uZXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICBjb250ZXh0LmZvbnQuX2ZvbnRMaXN0ID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yQWxsKCd1bCBsaSBidXR0b24nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWZvbnQtZmFtaWx5JztcclxuXHJcbiAgICAgICAgbGV0IGZvbnQsIHRleHQsIGksIGxlbjtcclxuICAgICAgICBsZXQgZm9udExpc3QgPSBjb3JlLm9wdGlvbnMuZm9udDtcclxuXHJcbiAgICAgICAgbGV0IGxpc3QgPSAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImRlZmF1bHRfdmFsdWUgc2UtYnRuLWxpc3RcIiB0aXRsZT1cIicgKyBsYW5nLnRvb2xiYXIuZGVmYXVsdCArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcudG9vbGJhci5kZWZhdWx0ICsgJ1wiPignICsgbGFuZy50b29sYmFyLmRlZmF1bHQgKyAnKTwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBmb250TGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb250ID0gZm9udExpc3RbaV07XHJcbiAgICAgICAgICAgIHRleHQgPSBmb250LnNwbGl0KCcsJylbMF07XHJcbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0XCIgZGF0YS12YWx1ZT1cIicgKyBmb250ICsgJ1wiIGRhdGEtdHh0PVwiJyArIHRleHQgKyAnXCIgdGl0bGU9XCInICsgdGV4dCArICdcIiBhcmlhLWxhYmVsPVwiJyArIHRleHQgKyAnXCIgc3R5bGU9XCJmb250LWZhbWlseTonICsgZm9udCArICc7XCI+JyArIHRleHQgKyAnPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaXN0ICs9ICc8L3VsPjwvZGl2Pic7XHJcbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSBsaXN0O1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGNvcmVcclxuICAgICAqL1xyXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuY29udGV4dC5mb250LnRhcmdldFRleHQ7XHJcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHRoaXMuY29udGV4dC5mb250LnRhcmdldFRvb2x0aXA7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBmb250ID0gdGhpcy5oYXNGb2N1cyA/IHRoaXMud3dDb21wdXRlZFN0eWxlLmZvbnRGYW1pbHkgOiB0aGlzLmxhbmcudG9vbGJhci5mb250O1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlVHh0KHRhcmdldCwgZm9udCk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQodG9vbHRpcCwgdGhpcy5oYXNGb2N1cyA/IHRoaXMubGFuZy50b29sYmFyLmZvbnQgKyAoZm9udCA/ICcgKCcgKyBmb250ICsgJyknIDogJycpIDogZm9udCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnN0eWxlICYmIGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdEZvbnQgPSBlbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkucmVwbGFjZSgvW1wiJ10vZywnJyk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQodGFyZ2V0LCBzZWxlY3RGb250KTtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dCh0b29sdGlwLCB0aGlzLmxhbmcudG9vbGJhci5mb250ICsgJyAoJyArIHNlbGVjdEZvbnQgKyAnKScpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHN1Ym1lbnVcclxuICAgICAqL1xyXG4gICAgb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBmb250Q29udGV4dCA9IHRoaXMuY29udGV4dC5mb250O1xyXG4gICAgICAgIGNvbnN0IGZvbnRMaXN0ID0gZm9udENvbnRleHQuX2ZvbnRMaXN0O1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb250ID0gZm9udENvbnRleHQudGFyZ2V0VGV4dC50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRGb250ICE9PSBmb250Q29udGV4dC5jdXJyZW50Rm9udCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZm9udExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Rm9udCA9PT0gKGZvbnRMaXN0W2ldLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpIHx8ICcnKS5yZXBsYWNlKC8nfFwiL2csICcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhmb250TGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoZm9udExpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9udENvbnRleHQuY3VycmVudEZvbnQgPSBjdXJyZW50Rm9udDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoIS9eQlVUVE9OJC9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3Tm9kZSA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XHJcbiAgICAgICAgICAgIGlmICgvW1xcc1xcZFxcV10vLnRlc3QodmFsdWUpICYmICEvXlsnXCJdLipbJ1wiXSQvLnRlc3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICdcIicgKyB2YWx1ZSArICdcIic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3Tm9kZS5zdHlsZS5mb250RmFtaWx5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZUNoYW5nZShuZXdOb2RlLCBbJ2ZvbnQtZmFtaWx5J10sIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZUNoYW5nZShudWxsLCBbJ2ZvbnQtZmFtaWx5J10sIFsnc3BhbiddLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnZm9udFNpemUnLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5mb250U2l6ZSA9IHtcclxuICAgICAgICAgICAgdGFyZ2V0VGV4dDogdGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudHh0JyksXHJcbiAgICAgICAgICAgIF9zaXplTGlzdDogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVudFNpemU6ICcnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcbiAgICAgICAgbGV0IGxpc3RVbCA9IGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0VWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBjb250ZXh0LmZvbnRTaXplLl9zaXplTGlzdCA9IGxpc3RVbC5xdWVyeVNlbGVjdG9yQWxsKCdsaSBidXR0b24nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbCwgbGlzdFVsID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXIgc2UtbGlzdC1mb250LXNpemUnO1xyXG5cclxuICAgICAgICBjb25zdCBzaXplTGlzdCA9ICFvcHRpb24uZm9udFNpemUgPyBbOCwgOSwgMTAsIDExLCAxMiwgMTQsIDE2LCAxOCwgMjAsIDIyLCAyNCwgMjYsIDI4LCAzNiwgNDgsIDcyXSA6IG9wdGlvbi5mb250U2l6ZTtcclxuXHJcbiAgICAgICAgbGV0IGxpc3QgPSAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImRlZmF1bHRfdmFsdWUgc2UtYnRuLWxpc3RcIiB0aXRsZT1cIicgKyBsYW5nLnRvb2xiYXIuZGVmYXVsdCArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcudG9vbGJhci5kZWZhdWx0ICsgJ1wiPignICsgbGFuZy50b29sYmFyLmRlZmF1bHQgKyAnKTwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgdW5pdCA9IG9wdGlvbi5mb250U2l6ZVVuaXQsIGxlbiA9IHNpemVMaXN0Lmxlbmd0aCwgc2l6ZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHNpemUgPSBzaXplTGlzdFtpXTtcclxuICAgICAgICAgICAgbGlzdCArPSAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3RcIiBkYXRhLXZhbHVlPVwiJyArIHNpemUgKyB1bml0ICsgJ1wiIHRpdGxlPVwiJyArIHNpemUgKyB1bml0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgc2l6ZSArIHVuaXQgKyAnXCIgc3R5bGU9XCJmb250LXNpemU6JyArIHNpemUgKyB1bml0ICsgJztcIj4nICsgc2l6ZSArICc8L2J1dHRvbj48L2xpPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QgKz0gJzwvdWw+PC9kaXY+JztcclxuXHJcbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSBsaXN0O1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGNvcmVcclxuICAgICAqL1xyXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlVHh0KHRoaXMuY29udGV4dC5mb250U2l6ZS50YXJnZXRUZXh0LCB0aGlzLmhhc0ZvY3VzID8gdGhpcy5fY29udmVydEZvbnRTaXplLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLmZvbnRTaXplVW5pdCwgdGhpcy53d0NvbXB1dGVkU3R5bGUuZm9udFNpemUpIDogdGhpcy5sYW5nLnRvb2xiYXIuZm9udFNpemUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5zdHlsZSAmJiBlbGVtZW50LnN0eWxlLmZvbnRTaXplLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dCh0aGlzLmNvbnRleHQuZm9udFNpemUudGFyZ2V0VGV4dCwgdGhpcy5fY29udmVydEZvbnRTaXplLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLmZvbnRTaXplVW5pdCwgZWxlbWVudC5zdHlsZS5mb250U2l6ZSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHN1Ym1lbnVcclxuICAgICAqL1xyXG4gICAgb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBmb250U2l6ZUNvbnRleHQgPSB0aGlzLmNvbnRleHQuZm9udFNpemU7XHJcbiAgICAgICAgY29uc3Qgc2l6ZUxpc3QgPSBmb250U2l6ZUNvbnRleHQuX3NpemVMaXN0O1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTaXplID0gZm9udFNpemVDb250ZXh0LnRhcmdldFRleHQudGV4dENvbnRlbnQ7XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50U2l6ZSAhPT0gZm9udFNpemVDb250ZXh0LmN1cnJlbnRTaXplKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzaXplTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTaXplID09PSBzaXplTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyhzaXplTGlzdFtpXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3Moc2l6ZUxpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9udFNpemVDb250ZXh0LmN1cnJlbnRTaXplID0gY3VycmVudFNpemU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwaWNrdXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKCEvXkJVVFRPTiQvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICAgICAgbmV3Tm9kZS5zdHlsZS5mb250U2l6ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVDaGFuZ2UobmV3Tm9kZSwgWydmb250LXNpemUnXSwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG51bGwsIFsnZm9udC1zaXplJ10sIFsnc3BhbiddLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2hvcml6b250YWxSdWxlJyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb3JlLmNvbnRleHQuaG9yaXpvbnRhbFJ1bGUgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRIUjogbnVsbCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhvcml6b250YWxSdWxlUGljay5iaW5kKGNvcmUpKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBjb3JlLm9wdGlvbnMuaHJJdGVtcyB8fCBbe25hbWU6IGxhbmcudG9vbGJhci5ocl9zb2xpZCwgY2xhc3M6ICdfX3NlX19zb2xpZCd9LCB7bmFtZTogbGFuZy50b29sYmFyLmhyX2Rhc2hlZCwgY2xhc3M6ICdfX3NlX19kYXNoZWQnfSwge25hbWU6IGxhbmcudG9vbGJhci5ocl9kb3R0ZWQsIGNsYXNzOiAnX19zZV9fZG90dGVkJ31dO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBsaXN0ID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IGJ0bl9saW5lXCIgZGF0YS1jb21tYW5kPVwiaG9yaXpvbnRhbFJ1bGVcIiBkYXRhLXZhbHVlPVwiJyArIGl0ZW1zW2ldLmNsYXNzICsgJ1wiIHRpdGxlPVwiJyArIGl0ZW1zW2ldLm5hbWUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBpdGVtc1tpXS5uYW1lICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aHInICsgKGl0ZW1zW2ldLmNsYXNzID8gJyBjbGFzcz1cIicgKyBpdGVtc1tpXS5jbGFzcyArICdcIicgOiAnJykgKyAoaXRlbXNbaV0uc3R5bGUgPyAnIHN0eWxlPVwiJyArIGl0ZW1zW2ldLnN0eWxlICsgJ1wiJyA6ICcnKSArICcvPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAnPC9saT4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXIgc2UtbGlzdC1saW5lJztcclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgK1xyXG4gICAgICAgICAgICAgICAgJzwvdWw+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy51dGlsLmhhc0NsYXNzKHRoaXMuY29udGV4dC5ob3Jpem9udGFsUnVsZS5jdXJyZW50SFIsICdvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKC9IUi9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmhvcml6b250YWxSdWxlLmN1cnJlbnRIUiA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy51dGlsLmhhc0NsYXNzKGVsZW1lbnQsICdvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ29uJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT24oJ2hyJywgdGhpcy51dGlsLnJlbW92ZUNsYXNzLmJpbmQodGhpcy51dGlsLCBlbGVtZW50LCAnb24nKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIGFwcGVuZEhyOiBmdW5jdGlvbiAoaHJUZW1wKSB7XHJcbiAgICAgICAgdGhpcy5mb2N1cygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydENvbXBvbmVudChoclRlbXAuY2xvbmVOb2RlKGZhbHNlKSwgZmFsc2UsIHRydWUsIGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgaG9yaXpvbnRhbFJ1bGVQaWNrOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgbGV0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICBcclxuICAgICAgICB3aGlsZSAoIWNvbW1hbmQgJiYgIS9VTC9pLnRlc3QodGFyZ2V0LnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBjb21tYW5kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3Qgb05vZGUgPSB0aGlzLnBsdWdpbnMuaG9yaXpvbnRhbFJ1bGUuYXBwZW5kSHIuY2FsbCh0aGlzLCB0YXJnZXQuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG4gICAgICAgIGlmIChvTm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9Ob2RlLCAwLCBvTm9kZSwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdsaXN0JyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQubGlzdCA9IHtcclxuICAgICAgICAgICAgdGFyZ2V0QnV0dG9uOiB0YXJnZXRFbGVtZW50LFxyXG4gICAgICAgICAgICBfbGlzdDogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVudExpc3Q6ICcnLFxyXG4gICAgICAgICAgICBpY29uczoge1xyXG4gICAgICAgICAgICAgICAgYnVsbGV0czogY29yZS5pY29ucy5saXN0X2J1bGxldHMsXHJcbiAgICAgICAgICAgICAgICBudW1iZXI6IGNvcmUuaWNvbnMubGlzdF9udW1iZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG4gICAgICAgIGxldCBsaXN0VWwgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJyk7XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgbGlzdFVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5waWNrdXAuYmluZChjb3JlKSk7XHJcbiAgICAgICAgY29udGV4dC5saXN0Ll9saXN0ID0gbGlzdFVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIGxpc3REaXYgPSBudWxsLCBsaXN0VWwgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2Utc3VibWVudSBzZS1saXN0LWxheWVyJztcclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCBzZS10b29sdGlwXCIgZGF0YS1jb21tYW5kPVwiT0xcIiB0aXRsZT1cIicgKyBsYW5nLnRvb2xiYXIub3JkZXJMaXN0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy50b29sYmFyLm9yZGVyTGlzdCArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5saXN0X251bWJlciArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLXRvb2x0aXBcIiBkYXRhLWNvbW1hbmQ9XCJVTFwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci51bm9yZGVyTGlzdCArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcudG9vbGJhci51bm9yZGVyTGlzdCArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5pY29ucy5saXN0X2J1bGxldHMgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj48L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvdWw+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIGNvcmVcclxuICAgICAqL1xyXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuY29udGV4dC5saXN0LnRhcmdldEJ1dHRvbjtcclxuICAgICAgICBjb25zdCBpY29uID0gYnV0dG9uLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIGNvbnN0IHV0aWwgPSB0aGlzLnV0aWw7XHJcblxyXG4gICAgICAgIGlmICh1dGlsLmlzTGlzdChlbGVtZW50KSkge1xyXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMnLCBub2RlTmFtZSk7XHJcbiAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoYnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGlmICgvVUwvaS50ZXN0KG5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGljb24sIHRoaXMuY29udGV4dC5saXN0Lmljb25zLmJ1bGxldHMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGljb24sIHRoaXMuY29udGV4dC5saXN0Lmljb25zLm51bWJlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMnKTtcclxuICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGljb24sIHRoaXMuY29udGV4dC5saXN0Lmljb25zLm51bWJlcik7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoYnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBPdmVycmlkZSBzdWJtZW51XHJcbiAgICAgKi9cclxuICAgIG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdENvbnRleHQgPSB0aGlzLmNvbnRleHQubGlzdDtcclxuICAgICAgICBjb25zdCBsaXN0ID0gbGlzdENvbnRleHQuX2xpc3Q7XHJcbiAgICAgICAgY29uc3QgY3VycmVudExpc3QgPSBsaXN0Q29udGV4dC50YXJnZXRCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWZvY3VzJykgfHwgJyc7XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50TGlzdCAhPT0gbGlzdENvbnRleHQuY3VycmVudExpc3QpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGlzdCA9PT0gbGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGxpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKGxpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGlzdENvbnRleHQuY3VycmVudExpc3QgPSBjdXJyZW50TGlzdDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGVkaXRMaXN0OiBmdW5jdGlvbiAoY29tbWFuZCwgc2VsZWN0ZWRDZWxscywgZGV0YWNoKSB7XHJcbiAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgIGxldCBzZWxlY3RlZEZvcm1hdHMgPSAhc2VsZWN0ZWRDZWxscyA/IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMoZmFsc2UpIDogc2VsZWN0ZWRDZWxscztcclxuXHJcbiAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ2VsbHMpIHJldHVybjtcclxuICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmdldFJhbmdlX2FkZExpbmUocmFuZ2UsIG51bGwpO1xyXG4gICAgICAgICAgICBzZWxlY3RlZEZvcm1hdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzKGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cy5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuICAgICAgICB1dGlsLnNvcnRCeURlcHRoKHNlbGVjdGVkRm9ybWF0cywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIG1lcmdlXHJcbiAgICAgICAgbGV0IGZpcnN0U2VsID0gc2VsZWN0ZWRGb3JtYXRzWzBdO1xyXG4gICAgICAgIGxldCBsYXN0U2VsID0gc2VsZWN0ZWRGb3JtYXRzW3NlbGVjdGVkRm9ybWF0cy5sZW5ndGggLSAxXTtcclxuICAgICAgICBsZXQgdG9wRWwgPSAodXRpbC5pc0xpc3RDZWxsKGZpcnN0U2VsKSB8fCB1dGlsLmlzQ29tcG9uZW50KGZpcnN0U2VsKSkgJiYgIWZpcnN0U2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPyBmaXJzdFNlbC5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgOiBmaXJzdFNlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgIGxldCBib3R0b21FbCA9ICh1dGlsLmlzTGlzdENlbGwobGFzdFNlbCkgfHwgdXRpbC5pc0NvbXBvbmVudChsYXN0U2VsKSkgJiYgIWxhc3RTZWwubmV4dEVsZW1lbnRTaWJsaW5nID8gbGFzdFNlbC5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZyA6IGxhc3RTZWwubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG5cclxuICAgICAgICBjb25zdCBpc0NvbGxhcHNlZCA9IHJhbmdlLmNvbGxhcHNlZDtcclxuICAgICAgICBjb25zdCBvcmlnaW5SYW5nZSA9IHtcclxuICAgICAgICAgICAgc2M6IHJhbmdlLnN0YXJ0Q29udGFpbmVyLFxyXG4gICAgICAgICAgICBzbzogKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocmFuZ2Uuc3RhcnRDb250YWluZXIpICYmIHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwICYmIHJhbmdlLmVuZE9mZnNldCA9PT0gMSkgPyByYW5nZS5lbmRPZmZzZXQgOiByYW5nZS5zdGFydE9mZnNldCxcclxuICAgICAgICAgICAgZWM6IHJhbmdlLmVuZENvbnRhaW5lcixcclxuICAgICAgICAgICAgZW86IHJhbmdlLmVuZE9mZnNldFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IGFmdGVyUmFuZ2UgPSBudWxsO1xyXG4gICAgICAgIGxldCBpc1JlbW92ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdCh1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzZWxlY3RlZEZvcm1hdHNbaV0sIGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoY3VycmVudCkgJiYgY3VycmVudCAhPT0gc2VsZWN0ZWRGb3JtYXRzW2ldO1xyXG4gICAgICAgICAgICB9LmJpbmQodXRpbCkpKSkge1xyXG4gICAgICAgICAgICAgICAgaXNSZW1vdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNSZW1vdmUgJiYgKCF0b3BFbCB8fCAoZmlyc3RTZWwudGFnTmFtZSAhPT0gdG9wRWwudGFnTmFtZSB8fCBjb21tYW5kICE9PSB0b3BFbC50YWdOYW1lLnRvVXBwZXJDYXNlKCkpKSAmJiAoIWJvdHRvbUVsIHx8IChsYXN0U2VsLnRhZ05hbWUgIT09IGJvdHRvbUVsLnRhZ05hbWUgfHwgY29tbWFuZCAhPT0gYm90dG9tRWwudGFnTmFtZS50b1VwcGVyQ2FzZSgpKSkpIHtcclxuICAgICAgICAgICAgaWYgKGRldGFjaCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpIC0gMTsgaiA+PSAwOyBqLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0c1tqXS5jb250YWlucyhzZWxlY3RlZEZvcm1hdHNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEZvcm1hdHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS0tOyBsZW4tLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Rm9ybWF0ID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZmlyc3RTZWwpO1xyXG4gICAgICAgICAgICBjb25zdCBjYW5jZWwgPSBjdXJyZW50Rm9ybWF0ICYmIGN1cnJlbnRGb3JtYXQudGFnTmFtZSA9PT0gY29tbWFuZDtcclxuICAgICAgICAgICAgbGV0IHJhbmdlQXJyLCB0ZW1wTGlzdDtcclxuICAgICAgICAgICAgY29uc3QgcGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNDb21wb25lbnQoY3VycmVudCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh1dGlsKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghY2FuY2VsKSB0ZW1wTGlzdCA9IHV0aWwuY3JlYXRlRWxlbWVudChjb21tYW5kKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoLCByLCBvOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG8gPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzZWxlY3RlZEZvcm1hdHNbaV0sIHBhc3NDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvIHx8ICF1dGlsLmlzTGlzdChvKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IG87XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VBcnIgPSB7cjogciwgZjogW3V0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3RlZEZvcm1hdHNbaV0sICdMSScpXX07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyICE9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXRhY2ggJiYgdXRpbC5pc0xpc3RDZWxsKG8ucGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5saXN0Ll9kZXRhY2hOZXN0ZWQuY2FsbCh0aGlzLCByYW5nZUFyci5mKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyUmFuZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUFyci5mWzBdLnBhcmVudE5vZGUsIHJhbmdlQXJyLmYsIHRlbXBMaXN0LCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBzZWxlY3RlZEZvcm1hdHNbaV0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5jZWwpIHRlbXBMaXN0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyLmYucHVzaCh1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXRhY2ggJiYgdXRpbC5pc0xpc3RDZWxsKG8ucGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmxpc3QuX2RldGFjaE5lc3RlZC5jYWxsKHRoaXMsIHJhbmdlQXJyLmYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyUmFuZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUFyci5mWzBdLnBhcmVudE5vZGUsIHJhbmdlQXJyLmYsIHRlbXBMaXN0LCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdG9wRWxQYXJlbnQgPSB0b3BFbCA/IHRvcEVsLnBhcmVudE5vZGUgOiB0b3BFbDtcclxuICAgICAgICAgICAgY29uc3QgYm90dG9tRWxQYXJlbnQgPSBib3R0b21FbCA/IGJvdHRvbUVsLnBhcmVudE5vZGUgOiBib3R0b21FbDtcclxuICAgICAgICAgICAgdG9wRWwgPSB0b3BFbFBhcmVudCAmJiAhdXRpbC5pc1d5c2l3eWdEaXYodG9wRWxQYXJlbnQpICYmIHRvcEVsUGFyZW50Lm5vZGVOYW1lID09PSBjb21tYW5kID8gdG9wRWxQYXJlbnQgOiB0b3BFbDtcclxuICAgICAgICAgICAgYm90dG9tRWwgPSBib3R0b21FbFBhcmVudCAmJiAhdXRpbC5pc1d5c2l3eWdEaXYoYm90dG9tRWxQYXJlbnQpICYmIGJvdHRvbUVsUGFyZW50Lm5vZGVOYW1lID09PSBjb21tYW5kID8gYm90dG9tRWxQYXJlbnQgOiBib3R0b21FbDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlVG9wID0gdG9wRWwgJiYgdG9wRWwudGFnTmFtZSA9PT0gY29tbWFuZDtcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VCb3R0b20gPSBib3R0b21FbCAmJiBib3R0b21FbC50YWdOYW1lID09PSBjb21tYW5kO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IGxpc3QgPSBtZXJnZVRvcCA/IHRvcEVsIDogdXRpbC5jcmVhdGVFbGVtZW50KGNvbW1hbmQpO1xyXG4gICAgICAgICAgICBsZXQgZmlyc3RMaXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IGxhc3RMaXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IHRvcE51bWJlciA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBib3R0b21OdW1iZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNDb21wb25lbnQoY3VycmVudCkgJiYgIXRoaXMuaXNMaXN0KGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9LmJpbmQodXRpbCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCwgbmV3Q2VsbCwgZlRhZywgaXNDZWxsLCBuZXh0LCBvcmlnaW5QYXJlbnQsIG5leHRQYXJlbnQsIHBhcmVudFRhZywgc2libGluZ1RhZywgcmFuZ2VUYWc7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZlRhZyA9IHNlbGVjdGVkRm9ybWF0c1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChmVGFnLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmICF1dGlsLl9pc0lnbm9yZU5vZGVDaGFuZ2UoZlRhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZlRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gc2VsZWN0ZWRGb3JtYXRzW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgIG9yaWdpblBhcmVudCA9IGZUYWcucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIG5leHRQYXJlbnQgPSBuZXh0ID8gbmV4dC5wYXJlbnROb2RlIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGlzQ2VsbCA9IHV0aWwuaXNMaXN0Q2VsbChmVGFnKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlVGFnID0gdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChvcmlnaW5QYXJlbnQpID8gb3JpZ2luUGFyZW50IDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHBhcmVudFRhZyA9IGlzQ2VsbCAmJiAhdXRpbC5pc1d5c2l3eWdEaXYob3JpZ2luUGFyZW50KSA/IG9yaWdpblBhcmVudC5wYXJlbnROb2RlIDogb3JpZ2luUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgc2libGluZ1RhZyA9IGlzQ2VsbCAmJiAhdXRpbC5pc1d5c2l3eWdEaXYob3JpZ2luUGFyZW50KSA/ICghbmV4dCB8fCB1dGlsLmlzTGlzdENlbGwocGFyZW50VGFnKSkgPyBvcmlnaW5QYXJlbnQgOiBvcmlnaW5QYXJlbnQubmV4dFNpYmxpbmcgOiBmVGFnLm5leHRTaWJsaW5nO1xyXG5cclxuICAgICAgICAgICAgICAgIG5ld0NlbGwgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmNvcHlGb3JtYXRBdHRyaWJ1dGVzKG5ld0NlbGwsIGZUYWcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAgMCAmJiBvcmlnaW5SYW5nZS5zYyA9PT0gZlRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpblJhbmdlLnNjID0gbmV3Q2VsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSBsZW4gLSAxICYmIG9yaWdpblJhbmdlLmVjID09PSBmVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luUmFuZ2UuZWMgPSBuZXdDZWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQ29tcG9uZW50KGZUYWcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNIUiA9IC9eSFIkL2kudGVzdChmVGFnLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSFIpIG5ld0NlbGwuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbGwuaW5uZXJIVE1MICs9IGZUYWcub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0hSKSBuZXdDZWxsLmlubmVySFRNTCArPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZDaGlsZHJlbiA9IGZUYWcuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZkNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NlbGwuYXBwZW5kQ2hpbGQoZkNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZENoaWxkKG5ld0NlbGwpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghbmV4dCkgbGFzdExpc3QgPSBsaXN0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0IHx8IHBhcmVudFRhZyAhPT0gbmV4dFBhcmVudCB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KHNpYmxpbmdUYWcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdExpc3QpIGZpcnN0TGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCghbWVyZ2VUb3AgfHwgIW5leHQgfHwgcGFyZW50VGFnICE9PSBuZXh0UGFyZW50KSAmJiAhKG5leHQgJiYgdXRpbC5pc0xpc3QobmV4dFBhcmVudCkgJiYgbmV4dFBhcmVudCA9PT0gb3JpZ2luUGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlzdC5wYXJlbnROb2RlICE9PSBwYXJlbnRUYWcpIHBhcmVudFRhZy5pbnNlcnRCZWZvcmUobGlzdCwgc2libGluZ1RhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShmVGFnKTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXJnZVRvcCAmJiB0b3BOdW1iZXIgPT09IG51bGwpIHRvcE51bWJlciA9IGxpc3QuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmICh1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChuZXh0UGFyZW50LCBwYXNzQ29tcG9uZW50KSAhPT0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQob3JpZ2luUGFyZW50LCBwYXNzQ29tcG9uZW50KSB8fCAodXRpbC5pc0xpc3QobmV4dFBhcmVudCkgJiYgdXRpbC5pc0xpc3Qob3JpZ2luUGFyZW50KSAmJiB1dGlsLmdldEVsZW1lbnREZXB0aChuZXh0UGFyZW50KSAhPT0gdXRpbC5nZXRFbGVtZW50RGVwdGgob3JpZ2luUGFyZW50KSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdCA9IHV0aWwuY3JlYXRlRWxlbWVudChjb21tYW5kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VUYWcgJiYgcmFuZ2VUYWcuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB1dGlsLnJlbW92ZUl0ZW0ocmFuZ2VUYWcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodG9wTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJzdExpc3QgPSBmaXJzdExpc3QuY2hpbGRyZW5bdG9wTnVtYmVyXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1lcmdlQm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICBib3R0b21OdW1iZXIgPSBsaXN0LmNoaWxkcmVuLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICBsaXN0LmlubmVySFRNTCArPSBib3R0b21FbC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICBsYXN0TGlzdCA9IGxpc3QuY2hpbGRyZW5bYm90dG9tTnVtYmVyXTtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShib3R0b21FbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gIWlzQ29sbGFwc2VkID8gb3JpZ2luUmFuZ2UgOiBhZnRlclJhbmdlO1xyXG4gICAgfSxcclxuXHJcbiAgICBfZGV0YWNoTmVzdGVkOiBmdW5jdGlvbiAoY2VsbHMpIHtcclxuICAgICAgICBjb25zdCBmaXJzdCA9IGNlbGxzWzBdO1xyXG4gICAgICAgIGNvbnN0IGxhc3QgPSBjZWxsc1tjZWxscy5sZW5ndGggLSAxXTtcclxuICAgICAgICBjb25zdCBuZXh0ID0gbGFzdC5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luTGlzdCA9IGZpcnN0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgY29uc3Qgc2libGluZyA9IG9yaWdpbkxpc3QucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IG9yaWdpbkxpc3QucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNlbGxzLmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShjZWxsc1tjXSwgc2libGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobmV4dCAmJiBvcmlnaW5MaXN0LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3TGlzdCA9IG9yaWdpbkxpc3QuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBvcmlnaW5MaXN0LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy51dGlsLmdldFBvc2l0aW9uSW5kZXgobmV4dCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlbltpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIG5ld0xpc3QuYXBwZW5kQ2hpbGQoY2hpbGRyZW5baW5kZXhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0LmFwcGVuZENoaWxkKG5ld0xpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9yaWdpbkxpc3QuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB0aGlzLnV0aWwucmVtb3ZlSXRlbShvcmlnaW5MaXN0KTtcclxuICAgICAgICB0aGlzLnV0aWwubWVyZ2VTYW1lVGFncyhwYXJlbnROb2RlKTtcclxuXHJcbiAgICAgICAgY29uc3QgZWRnZSA9IHRoaXMudXRpbC5nZXRFZGdlQ2hpbGROb2RlcyhmaXJzdCwgbGFzdCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNjOiBmaXJzdC5wYXJlbnROb2RlLFxyXG4gICAgICAgICAgICBzYzogZWRnZS5zYyxcclxuICAgICAgICAgICAgZWM6IGVkZ2UuZWNcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBlZGl0SW5zaWRlTGlzdDogZnVuY3Rpb24gKHJlbW92ZSwgc2VsZWN0ZWRDZWxscykge1xyXG4gICAgICAgIHNlbGVjdGVkQ2VsbHMgPSAhc2VsZWN0ZWRDZWxscyA/IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRoaXMuaXNMaXN0Q2VsbChlbCk7IH0uYmluZCh0aGlzLnV0aWwpKSA6IHNlbGVjdGVkQ2VsbHM7XHJcbiAgICAgICAgY29uc3QgY2VsbHNMZW4gPSBzZWxlY3RlZENlbGxzLmxlbmd0aDtcclxuICAgICAgICBpZiAoY2VsbHNMZW4gPT09IDAgfHwgKCFyZW1vdmUgJiYgKCF0aGlzLnV0aWwuaXNMaXN0Q2VsbChzZWxlY3RlZENlbGxzWzBdLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpICYmICF0aGlzLnV0aWwuaXNMaXN0Q2VsbChzZWxlY3RlZENlbGxzW2NlbGxzTGVuIC0gMV0ubmV4dEVsZW1lbnRTaWJsaW5nKSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzYzogc2VsZWN0ZWRDZWxsc1swXSxcclxuICAgICAgICAgICAgICAgIHNvOiAwLFxyXG4gICAgICAgICAgICAgICAgZWM6IHNlbGVjdGVkQ2VsbHNbY2VsbHNMZW4gLSAxXSxcclxuICAgICAgICAgICAgICAgIGVvOiAxXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgb3JpZ2luTGlzdCA9IHNlbGVjdGVkQ2VsbHNbMF0ucGFyZW50Tm9kZTtcclxuICAgICAgICBsZXQgbGFzdENlbGwgPSBzZWxlY3RlZENlbGxzW2NlbGxzTGVuIC0gMV07XHJcbiAgICAgICAgbGV0IHJhbmdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHJlbW92ZSkge1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luTGlzdCAhPT0gbGFzdENlbGwucGFyZW50Tm9kZSAmJiB0aGlzLnV0aWwuaXNMaXN0KGxhc3RDZWxsLnBhcmVudE5vZGUucGFyZW50Tm9kZSkgJiYgbGFzdENlbGwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0Q2VsbCA9IGxhc3RDZWxsLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChsYXN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2VsbHMucHVzaChsYXN0Q2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdENlbGwgPSBsYXN0Q2VsbC5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLnBsdWdpbnMubGlzdC5lZGl0TGlzdC5jYWxsKHRoaXMsIG9yaWdpbkxpc3Qubm9kZU5hbWUudG9VcHBlckNhc2UoKSwgc2VsZWN0ZWRDZWxscywgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGlubmVyTGlzdCA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KG9yaWdpbkxpc3Qubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgcHJldiA9IHNlbGVjdGVkQ2VsbHNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgbGV0IG5leHQgPSBsYXN0Q2VsbC5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVQYXRoID0geyBzOiBudWxsLCBlOiBudWxsLCBzbDogb3JpZ2luTGlzdCwgZWw6IG9yaWdpbkxpc3QgfTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjZWxsc0xlbiwgYzsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gc2VsZWN0ZWRDZWxsc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjLnBhcmVudE5vZGUgIT09IG9yaWdpbkxpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5faW5zaWVkTGlzdC5jYWxsKHRoaXMsIG9yaWdpbkxpc3QsIGlubmVyTGlzdCwgcHJldiwgbmV4dCwgbm9kZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbkxpc3QgPSBjLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJMaXN0ID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQob3JpZ2luTGlzdC5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHByZXYgPSBjLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gYy5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICBpbm5lckxpc3QuYXBwZW5kQ2hpbGQoYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5saXN0Ll9pbnNpZWRMaXN0LmNhbGwodGhpcywgb3JpZ2luTGlzdCwgaW5uZXJMaXN0LCBwcmV2LCBuZXh0LCBub2RlUGF0aCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzYyA9IHRoaXMudXRpbC5nZXROb2RlRnJvbVBhdGgobm9kZVBhdGgucywgbm9kZVBhdGguc2wpO1xyXG4gICAgICAgICAgICBjb25zdCBlYyA9IHRoaXMudXRpbC5nZXROb2RlRnJvbVBhdGgobm9kZVBhdGguZSwgbm9kZVBhdGguZWwpO1xyXG4gICAgICAgICAgICByYW5nZSA9IHtcclxuICAgICAgICAgICAgICAgIHNjOiBzYyxcclxuICAgICAgICAgICAgICAgIHNvOiAwLFxyXG4gICAgICAgICAgICAgICAgZWM6IGVjLFxyXG4gICAgICAgICAgICAgICAgZW86IGVjLnRleHRDb250ZW50Lmxlbmd0aFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xyXG4gICAgfSxcclxuXHJcbiAgICBfaW5zaWVkTGlzdDogZnVuY3Rpb24gKG9yaWdpbkxpc3QsIGlubmVyTGlzdCwgcHJldiwgbmV4dCwgbm9kZVBhdGgpIHtcclxuICAgICAgICBsZXQgaW5zZXJ0UHJldiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAocHJldiAmJiBpbm5lckxpc3QudGFnTmFtZSA9PT0gcHJldi50YWdOYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gaW5uZXJMaXN0LmNoaWxkcmVuO1xyXG4gICAgICAgICAgICB3aGlsZSAoY2hpbGRyZW5bMF0pIHtcclxuICAgICAgICAgICAgICAgIHByZXYuYXBwZW5kQ2hpbGQoY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbm5lckxpc3QgPSBwcmV2O1xyXG4gICAgICAgICAgICBpbnNlcnRQcmV2ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuZXh0ICYmIGlubmVyTGlzdC50YWdOYW1lID09PSBuZXh0LnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBuZXh0LmNoaWxkcmVuO1xyXG4gICAgICAgICAgICB3aGlsZSAoY2hpbGRyZW5bMF0pIHtcclxuICAgICAgICAgICAgICAgIGlubmVyTGlzdC5hcHBlbmRDaGlsZChjaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBuZXh0Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgbmV4dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5leHQpO1xyXG4gICAgICAgICAgICBuZXh0ID0gdGVtcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaW5zZXJ0UHJldikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy51dGlsLmlzTGlzdENlbGwocHJldikpIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbkxpc3QgPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgbmV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9yaWdpbkxpc3QuaW5zZXJ0QmVmb3JlKGlubmVyTGlzdCwgbmV4dCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW5vZGVQYXRoLnMpIHtcclxuICAgICAgICAgICAgICAgIG5vZGVQYXRoLnMgPSB0aGlzLnV0aWwuZ2V0Tm9kZVBhdGgoaW5uZXJMaXN0LmZpcnN0RWxlbWVudENoaWxkLmZpcnN0Q2hpbGQsIG9yaWdpbkxpc3QsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgbm9kZVBhdGguc2wgPSBvcmlnaW5MaXN0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzbFBhdGggPSBvcmlnaW5MaXN0LmNvbnRhaW5zKG5vZGVQYXRoLnNsKSA/IHRoaXMudXRpbC5nZXROb2RlUGF0aChub2RlUGF0aC5zbCwgb3JpZ2luTGlzdCkgOiBudWxsO1xyXG4gICAgICAgICAgICBub2RlUGF0aC5lID0gdGhpcy51dGlsLmdldE5vZGVQYXRoKGlubmVyTGlzdC5sYXN0RWxlbWVudENoaWxkLmZpcnN0Q2hpbGQsIG9yaWdpbkxpc3QsIG51bGwpO1xyXG4gICAgICAgICAgICBub2RlUGF0aC5lbCA9IG9yaWdpbkxpc3Q7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnV0aWwubWVyZ2VTYW1lVGFncyhvcmlnaW5MaXN0LCBbbm9kZVBhdGgucywgbm9kZVBhdGguZSwgc2xQYXRoXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwubWVyZ2VOZXN0ZWRUYWdzKG9yaWdpbkxpc3QpO1xyXG4gICAgICAgICAgICBpZiAoc2xQYXRoKSBub2RlUGF0aC5zbCA9IHRoaXMudXRpbC5nZXROb2RlRnJvbVBhdGgoc2xQYXRoLCBvcmlnaW5MaXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbm5lckxpc3Q7XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGxldCBjb21tYW5kID0gJyc7XHJcblxyXG4gICAgICAgIHdoaWxlICghY29tbWFuZCAmJiAhL15VTCQvaS50ZXN0KHRhcmdldC50YWdOYW1lKSkge1xyXG4gICAgICAgICAgICBjb21tYW5kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5wbHVnaW5zLmxpc3QuZWRpdExpc3QuY2FsbCh0aGlzLCBjb21tYW5kLCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKHJhbmdlKSB0aGlzLnNldFJhbmdlKHJhbmdlLnNjLCByYW5nZS5zbywgcmFuZ2UuZWMsIHJhbmdlLmVvKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcblxyXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAndGFibGUnLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgbGV0IGNvbnRleHRUYWJsZSA9IGNvbnRleHQudGFibGUgPSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBfdGRFbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBfdHJFbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBfdHJFbGVtZW50czogbnVsbCxcclxuICAgICAgICAgICAgX3RhYmxlWFk6IFtdLFxyXG4gICAgICAgICAgICBfbWF4V2lkdGg6IHRydWUsXHJcbiAgICAgICAgICAgIF9maXhlZENvbHVtbjogZmFsc2UsXHJcbiAgICAgICAgICAgIF9ydGw6IGNvcmUub3B0aW9ucy5ydGwsXHJcbiAgICAgICAgICAgIGNlbGxDb250cm9sbGVyVG9wOiBjb3JlLm9wdGlvbnMudGFibGVDZWxsQ29udHJvbGxlclBvc2l0aW9uID09PSAndG9wJyxcclxuICAgICAgICAgICAgcmVzaXplVGV4dDogbnVsbCxcclxuICAgICAgICAgICAgaGVhZGVyQnV0dG9uOiBudWxsLFxyXG4gICAgICAgICAgICBtZXJnZUJ1dHRvbjogbnVsbCxcclxuICAgICAgICAgICAgc3BsaXRCdXR0b246IG51bGwsXHJcbiAgICAgICAgICAgIHNwbGl0TWVudTogbnVsbCxcclxuICAgICAgICAgICAgbWF4VGV4dDogY29yZS5sYW5nLmNvbnRyb2xsZXIubWF4U2l6ZSxcclxuICAgICAgICAgICAgbWluVGV4dDogY29yZS5sYW5nLmNvbnRyb2xsZXIubWluU2l6ZSxcclxuICAgICAgICAgICAgX3BoeXNpY2FsX2NlbGxDbnQ6IDAsXHJcbiAgICAgICAgICAgIF9sb2dpY2FsX2NlbGxDbnQ6IDAsXHJcbiAgICAgICAgICAgIF9yb3dDbnQ6IDAsXHJcbiAgICAgICAgICAgIF9yb3dJbmRleDogMCxcclxuICAgICAgICAgICAgX3BoeXNpY2FsX2NlbGxJbmRleDogMCxcclxuICAgICAgICAgICAgX2xvZ2ljYWxfY2VsbEluZGV4OiAwLFxyXG4gICAgICAgICAgICBfY3VycmVudF9jb2xTcGFuOiAwLFxyXG4gICAgICAgICAgICBfY3VycmVudF9yb3dTcGFuOiAwLFxyXG4gICAgICAgICAgICBpY29uczoge1xyXG4gICAgICAgICAgICAgICAgZXhwYW5zaW9uOiBjb3JlLmljb25zLmV4cGFuc2lvbixcclxuICAgICAgICAgICAgICAgIHJlZHVjdGlvbjogY29yZS5pY29ucy5yZWR1Y3Rpb25cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xyXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xyXG4gICAgICAgIGxldCB0YWJsZVBpY2tlciA9IGxpc3REaXYucXVlcnlTZWxlY3RvcignLnNlLWNvbnRyb2xsZXItdGFibGUtcGlja2VyJyk7XHJcblxyXG4gICAgICAgIGNvbnRleHRUYWJsZS50YWJsZUhpZ2hsaWdodCA9IGxpc3REaXYucXVlcnlTZWxlY3RvcignLnNlLXRhYmxlLXNpemUtaGlnaGxpZ2h0ZWQnKTtcclxuICAgICAgICBjb250ZXh0VGFibGUudGFibGVVbkhpZ2hsaWdodCA9IGxpc3REaXYucXVlcnlTZWxlY3RvcignLnNlLXRhYmxlLXNpemUtdW5oaWdobGlnaHRlZCcpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS50YWJsZURpc3BsYXkgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJy5zZS10YWJsZS1zaXplLWRpc3BsYXknKTtcclxuICAgICAgICBpZiAoY29yZS5vcHRpb25zLnJ0bCkgY29udGV4dFRhYmxlLnRhYmxlSGlnaGxpZ2h0LnN0eWxlLmxlZnQgPSAoMTAgKiAxOCAtIDEzKSArICdweCc7XHJcblxyXG4gICAgICAgIC8qKiBzZXQgdGFibGUgY29udHJvbGxlciAqL1xyXG4gICAgICAgIGxldCB0YWJsZUNvbnRyb2xsZXIgPSB0aGlzLnNldENvbnRyb2xsZXJfdGFibGUoY29yZSk7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLnRhYmxlQ29udHJvbGxlciA9IHRhYmxlQ29udHJvbGxlcjtcclxuICAgICAgICBjb250ZXh0VGFibGUucmVzaXplQnV0dG9uID0gdGFibGVDb250cm9sbGVyLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfdGFibGVfcmVzaXplJyk7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLnJlc2l6ZVRleHQgPSB0YWJsZUNvbnRyb2xsZXIucXVlcnlTZWxlY3RvcignLl9zZV90YWJsZV9yZXNpemUgPiBzcGFuID4gc3BhbicpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5jb2x1bW5GaXhlZEJ1dHRvbiA9IHRhYmxlQ29udHJvbGxlci5xdWVyeVNlbGVjdG9yKCcuX3NlX3RhYmxlX2ZpeGVkX2NvbHVtbicpO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5oZWFkZXJCdXR0b24gPSB0YWJsZUNvbnRyb2xsZXIucXVlcnlTZWxlY3RvcignLl9zZV90YWJsZV9oZWFkZXInKTtcclxuXHJcbiAgICAgICAgLyoqIHNldCByZXNpemluZyAqL1xyXG4gICAgICAgIGxldCByZXNpemVEaXYgPSB0aGlzLnNldENvbnRyb2xsZXJfdGFibGVFZGl0b3IoY29yZSwgY29udGV4dFRhYmxlLmNlbGxDb250cm9sbGVyVG9wKTtcclxuICAgICAgICBjb250ZXh0VGFibGUucmVzaXplRGl2ID0gcmVzaXplRGl2O1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5zcGxpdE1lbnUgPSByZXNpemVEaXYucXVlcnlTZWxlY3RvcignLnNlLWJ0bi1ncm91cC1zdWInKTtcclxuICAgICAgICBjb250ZXh0VGFibGUubWVyZ2VCdXR0b24gPSByZXNpemVEaXYucXVlcnlTZWxlY3RvcignLl9zZV90YWJsZV9tZXJnZV9idXR0b24nKTtcclxuICAgICAgICBjb250ZXh0VGFibGUuc3BsaXRCdXR0b24gPSByZXNpemVEaXYucXVlcnlTZWxlY3RvcignLl9zZV90YWJsZV9zcGxpdF9idXR0b24nKTtcclxuICAgICAgICBjb250ZXh0VGFibGUuaW5zZXJ0Um93QWJvdmVCdXR0b24gPSByZXNpemVEaXYucXVlcnlTZWxlY3RvcignLl9zZV90YWJsZV9pbnNlcnRfcm93X2EnKTtcclxuICAgICAgICBjb250ZXh0VGFibGUuaW5zZXJ0Um93QmVsb3dCdXR0b24gPSByZXNpemVEaXYucXVlcnlTZWxlY3RvcignLl9zZV90YWJsZV9pbnNlcnRfcm93X2InKTtcclxuICAgICAgICBcclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIHRhYmxlUGlja2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmVfdGFibGVQaWNrZXIuYmluZChjb3JlLCBjb250ZXh0VGFibGUpKTtcclxuICAgICAgICB0YWJsZVBpY2tlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYXBwZW5kVGFibGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgcmVzaXplRGl2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrX3RhYmxlQ29udHJvbGxlci5iaW5kKGNvcmUpKTtcclxuICAgICAgICB0YWJsZUNvbnRyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tfdGFibGVDb250cm9sbGVyLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xyXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCBjb250cm9sbGVyICovXHJcbiAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKHJlc2l6ZURpdik7XHJcbiAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKHRhYmxlQ29udHJvbGxlcik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbCwgdGFibGVQaWNrZXIgPSBudWxsLCByZXNpemVEaXYgPSBudWxsLCB0YWJsZUNvbnRyb2xsZXIgPSBudWxsLCBjb250ZXh0VGFibGUgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2Utc3VibWVudSBzZS1zZWxlY3Rvci10YWJsZSc7XHJcbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSAnJyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtdGFibGUtc2l6ZVwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS10YWJsZS1zaXplLXBpY2tlciBzZS1jb250cm9sbGVyLXRhYmxlLXBpY2tlclwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS10YWJsZS1zaXplLWhpZ2hsaWdodGVkXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLXRhYmxlLXNpemUtdW5oaWdobGlnaHRlZFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtdGFibGUtc2l6ZS1kaXNwbGF5XCI+MSB4IDE8L2Rpdj4nO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0Q29udHJvbGxlcl90YWJsZTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGljb25zID0gY29yZS5pY29ucztcclxuICAgICAgICBjb25zdCB0YWJsZVJlc2l6ZSA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgdGFibGVSZXNpemUuY2xhc3NOYW1lID0gJ3NlLWNvbnRyb2xsZXIgc2UtY29udHJvbGxlci10YWJsZSc7XHJcbiAgICAgICAgdGFibGVSZXNpemUuaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYnRuLWdyb3VwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cInJlc2l6ZVwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3RhYmxlX3Jlc2l6ZVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5leHBhbnNpb24gK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLm1heFNpemUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImxheW91dFwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3RhYmxlX2ZpeGVkX2NvbHVtblwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5maXhlZF9jb2x1bW5fd2lkdGggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLmZpeGVkQ29sdW1uV2lkdGggKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImhlYWRlclwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3RhYmxlX2hlYWRlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29ucy50YWJsZV9oZWFkZXIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnRhYmxlSGVhZGVyICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJyZW1vdmVcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zLmRlbGV0ZSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRhYmxlUmVzaXplO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRDb250cm9sbGVyX3RhYmxlRWRpdG9yOiBmdW5jdGlvbiAoY29yZSwgY2VsbENvbnRyb2xsZXJUb3ApIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gY29yZS5sYW5nO1xyXG4gICAgICAgIGNvbnN0IGljb25zID0gY29yZS5pY29ucztcclxuICAgICAgICBjb25zdCB0YWJsZVJlc2l6ZSA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuXHJcbiAgICAgICAgdGFibGVSZXNpemUuY2xhc3NOYW1lID0gJ3NlLWNvbnRyb2xsZXIgc2UtY29udHJvbGxlci10YWJsZS1jZWxsJztcclxuICAgICAgICB0YWJsZVJlc2l6ZS5pbm5lckhUTUwgPSAoY2VsbENvbnRyb2xsZXJUb3AgPyAnJyA6ICc8ZGl2IGNsYXNzPVwic2UtYXJyb3cgc2UtYXJyb3ctdXBcIj48L2Rpdj4nKSArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYnRuLWdyb3VwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiaW5zZXJ0XCIgZGF0YS12YWx1ZT1cInJvd1wiIGRhdGEtb3B0aW9uPVwidXBcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwIF9zZV90YWJsZV9pbnNlcnRfcm93X2FcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBpY29ucy5pbnNlcnRfcm93X2Fib3ZlICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLmluc2VydFJvd0Fib3ZlICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiaW5zZXJ0XCIgZGF0YS12YWx1ZT1cInJvd1wiIGRhdGEtb3B0aW9uPVwiZG93blwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3RhYmxlX2luc2VydF9yb3dfYlwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGljb25zLmluc2VydF9yb3dfYmVsb3cgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuaW5zZXJ0Um93QmVsb3cgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJkZWxldGVcIiBkYXRhLXZhbHVlPVwicm93XCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGljb25zLmRlbGV0ZV9yb3cgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuZGVsZXRlUm93ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwibWVyZ2VcIiBjbGFzcz1cIl9zZV90YWJsZV9tZXJnZV9idXR0b24gc2UtYnRuIHNlLXRvb2x0aXBcIiBkaXNhYmxlZD4nICtcclxuICAgICAgICAgICAgICAgICAgICBpY29ucy5tZXJnZV9jZWxsICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLm1lcmdlQ2VsbHMgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWJ0bi1ncm91cFwiIHN0eWxlPVwicGFkZGluZy10b3A6IDA7XCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiaW5zZXJ0XCIgZGF0YS12YWx1ZT1cImNlbGxcIiBkYXRhLW9wdGlvbj1cImxlZnRcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnMuaW5zZXJ0X2NvbHVtbl9sZWZ0ICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLmluc2VydENvbHVtbkJlZm9yZSArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cImluc2VydFwiIGRhdGEtdmFsdWU9XCJjZWxsXCIgZGF0YS1vcHRpb249XCJyaWdodFwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICBpY29ucy5pbnNlcnRfY29sdW1uX3JpZ2h0ICtcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLmluc2VydENvbHVtbkFmdGVyICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiZGVsZXRlXCIgZGF0YS12YWx1ZT1cImNlbGxcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnMuZGVsZXRlX2NvbHVtbiArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5kZWxldGVDb2x1bW4gKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJvbnNwbGl0XCIgY2xhc3M9XCJfc2VfdGFibGVfc3BsaXRfYnV0dG9uIHNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnMuc3BsaXRfY2VsbCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5zcGxpdENlbGxzICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlLWJ0bi1ncm91cC1zdWIgc3VuLWVkaXRvci1jb21tb24gc2UtbGlzdC1sYXllciBzZS10YWJsZS1zcGxpdFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1pbm5lclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsaSBjbGFzcz1cInNlLWJ0bi1saXN0XCIgZGF0YS1jb21tYW5kPVwic3BsaXRcIiBkYXRhLXZhbHVlPVwidmVydGljYWxcIiBzdHlsZT1cImxpbmUtaGVpZ2h0OjMycHg7XCIgdGl0bGU9XCInICsgbGFuZy5jb250cm9sbGVyLlZlcnRpY2FsU3BsaXQgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBsYW5nLmNvbnRyb2xsZXIuVmVydGljYWxTcGxpdCArICdcIj4nICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZy5jb250cm9sbGVyLlZlcnRpY2FsU3BsaXQgKyAnPC9saT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGkgY2xhc3M9XCJzZS1idG4tbGlzdFwiIGRhdGEtY29tbWFuZD1cInNwbGl0XCIgZGF0YS12YWx1ZT1cImhvcml6b250YWxcIiBzdHlsZT1cImxpbmUtaGVpZ2h0OjMycHg7XCIgdGl0bGU9XCInICsgbGFuZy5jb250cm9sbGVyLkhvcml6b250YWxTcGxpdCArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcuY29udHJvbGxlci5Ib3Jpem9udGFsU3BsaXQgKyAnXCI+JyArIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmcuY29udHJvbGxlci5Ib3Jpem9udGFsU3BsaXQgKyAnPC9saT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvdWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRhYmxlUmVzaXplO1xyXG4gICAgfSxcclxuXHJcbiAgICBhcHBlbmRUYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IG9UYWJsZSA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdUQUJMRScpO1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZUNlbGxzID0gdGhpcy5wbHVnaW5zLnRhYmxlLmNyZWF0ZUNlbGxzO1xyXG5cclxuICAgICAgICBjb25zdCB4ID0gdGhpcy5jb250ZXh0LnRhYmxlLl90YWJsZVhZWzBdO1xyXG4gICAgICAgIGxldCB5ID0gdGhpcy5jb250ZXh0LnRhYmxlLl90YWJsZVhZWzFdO1xyXG4gICAgICAgIGxldCB0YWJsZUhUTUwgPSAnPHRib2R5Pic7XHJcbiAgICAgICAgd2hpbGUgKHkgPiAwKSB7XHJcbiAgICAgICAgICAgIHRhYmxlSFRNTCArPSAnPHRyPicgKyBjcmVhdGVDZWxscy5jYWxsKHRoaXMsICd0ZCcsIHgpICsgJzwvdHI+JztcclxuICAgICAgICAgICAgLS15O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YWJsZUhUTUwgKz0gJzwvdGJvZHk+JztcclxuICAgICAgICBvVGFibGUuaW5uZXJIVE1MID0gdGFibGVIVE1MO1xyXG5cclxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5pbnNlcnRDb21wb25lbnQob1RhYmxlLCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0VGQgPSBvVGFibGUucXVlcnlTZWxlY3RvcigndGQgZGl2Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZmlyc3RUZCwgMCwgZmlyc3RUZCwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy50YWJsZS5yZXNldF90YWJsZV9waWNrZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZUNlbGxzOiBmdW5jdGlvbiAobm9kZU5hbWUsIGNudCwgcmV0dXJuRWxlbWVudCkge1xyXG4gICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgaWYgKCFyZXR1cm5FbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGxldCBjZWxsc0hUTUwgPSAnJztcclxuICAgICAgICAgICAgd2hpbGUgKGNudCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNlbGxzSFRNTCArPSAnPCcgK25vZGVOYW1lICsgJz48ZGl2Pjxicj48L2Rpdj48LycgKyBub2RlTmFtZSArICc+JztcclxuICAgICAgICAgICAgICAgIGNudC0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjZWxsc0hUTUw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcclxuICAgICAgICAgICAgY2VsbC5pbm5lckhUTUwgPSAnPGRpdj48YnI+PC9kaXY+JztcclxuICAgICAgICAgICAgcmV0dXJuIGNlbGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBvbk1vdXNlTW92ZV90YWJsZVBpY2tlcjogZnVuY3Rpb24gKGNvbnRleHRUYWJsZSwgZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGxldCB4ID0gdGhpcy5fdy5NYXRoLmNlaWwoZS5vZmZzZXRYIC8gMTgpO1xyXG4gICAgICAgIGxldCB5ID0gdGhpcy5fdy5NYXRoLmNlaWwoZS5vZmZzZXRZIC8gMTgpO1xyXG4gICAgICAgIHggPSB4IDwgMSA/IDEgOiB4O1xyXG4gICAgICAgIHkgPSB5IDwgMSA/IDEgOiB5O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjb250ZXh0VGFibGUuX3J0bCkge1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUudGFibGVIaWdobGlnaHQuc3R5bGUubGVmdCA9ICh4ICogMTggLSAxMykgKyAncHgnO1xyXG4gICAgICAgICAgICB4ID0gMTEgLSB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb250ZXh0VGFibGUudGFibGVIaWdobGlnaHQuc3R5bGUud2lkdGggPSB4ICsgJ2VtJztcclxuICAgICAgICBjb250ZXh0VGFibGUudGFibGVIaWdobGlnaHQuc3R5bGUuaGVpZ2h0ID0geSArICdlbSc7XHJcblxyXG4gICAgICAgIC8vIGxldCB4X3UgPSB4IDwgNSA/IDUgOiAoeCA+IDkgPyAxMCA6IHggKyAxKTtcclxuICAgICAgICAvLyBsZXQgeV91ID0geSA8IDUgPyA1IDogKHkgPiA5ID8gMTAgOiB5ICsgMSk7XHJcbiAgICAgICAgLy8gY29udGV4dFRhYmxlLnRhYmxlVW5IaWdobGlnaHQuc3R5bGUud2lkdGggPSB4X3UgKyAnZW0nO1xyXG4gICAgICAgIC8vIGNvbnRleHRUYWJsZS50YWJsZVVuSGlnaGxpZ2h0LnN0eWxlLmhlaWdodCA9IHlfdSArICdlbSc7XHJcblxyXG4gICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQoY29udGV4dFRhYmxlLnRhYmxlRGlzcGxheSwgeCArICcgeCAnICsgeSk7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl90YWJsZVhZID0gW3gsIHldO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXNldF90YWJsZV9waWNrZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY29udGV4dC50YWJsZS50YWJsZUhpZ2hsaWdodCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBoaWdobGlnaHQgPSB0aGlzLmNvbnRleHQudGFibGUudGFibGVIaWdobGlnaHQuc3R5bGU7XHJcbiAgICAgICAgY29uc3QgdW5IaWdobGlnaHQgPSB0aGlzLmNvbnRleHQudGFibGUudGFibGVVbkhpZ2hsaWdodC5zdHlsZTtcclxuXHJcbiAgICAgICAgaGlnaGxpZ2h0LndpZHRoID0gJzFlbSc7XHJcbiAgICAgICAgaGlnaGxpZ2h0LmhlaWdodCA9ICcxZW0nO1xyXG4gICAgICAgIHVuSGlnaGxpZ2h0LndpZHRoID0gJzEwZW0nO1xyXG4gICAgICAgIHVuSGlnaGxpZ2h0LmhlaWdodCA9ICcxMGVtJztcclxuXHJcbiAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dCh0aGlzLmNvbnRleHQudGFibGUudGFibGVEaXNwbGF5LCAnMSB4IDEnKTtcclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgIH0sXHJcblxyXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuXHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3JlbW92ZUV2ZW50cy5jYWxsKHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRDZWxscyA9IHRhYmxlUGx1Z2luLl9zZWxlY3RlZFRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZS10YWJsZS1zZWxlY3RlZC1jZWxsJyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZENlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3Moc2VsZWN0ZWRDZWxsc1tpXSwgJ3NlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3RvZ2dsZUVkaXRvci5jYWxsKHRoaXMsIHRydWUpO1xyXG5cclxuICAgICAgICBjb250ZXh0VGFibGUuX2VsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fdGRFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX3RyRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl90ckVsZW1lbnRzID0gbnVsbDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX3RhYmxlWFkgPSBbXTtcclxuICAgICAgICBjb250ZXh0VGFibGUuX21heFdpZHRoID0gdHJ1ZTtcclxuICAgICAgICBjb250ZXh0VGFibGUuX2ZpeGVkQ29sdW1uID0gZmFsc2U7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl9waHlzaWNhbF9jZWxsQ250ID0gMDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX2xvZ2ljYWxfY2VsbENudCA9IDA7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl9yb3dDbnQgPSAwO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fcm93SW5kZXggPSAwO1xyXG4gICAgICAgIGNvbnRleHRUYWJsZS5fcGh5c2ljYWxfY2VsbEluZGV4ID0gMDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX2xvZ2ljYWxfY2VsbEluZGV4ID0gMDtcclxuICAgICAgICBjb250ZXh0VGFibGUuX2N1cnJlbnRfY29sU3BhbiA9IDA7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl9jdXJyZW50X3Jvd1NwYW4gPSAwO1xyXG5cclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2hpZnQgPSBmYWxzZTtcclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxscyA9IG51bGw7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUgPSBudWxsO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9yZWYgPSBudWxsO1xyXG5cclxuICAgICAgICB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsID0gbnVsbDtcclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxsID0gbnVsbDtcclxuICAgICAgICB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsTmFtZSA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKiB0YWJsZSBlZGl0IGNvbnRyb2xsZXIgKi9cclxuICAgIGNhbGxfY29udHJvbGxlcl90YWJsZUVkaXQ6IGZ1bmN0aW9uICh0ZEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5nZXRTZWxlY3Rpb24oKS5pc0NvbGxhcHNlZCAmJiAhdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0ZEVsZW1lbnQsICdzZS10YWJsZS1zZWxlY3RlZC1jZWxsJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRhYmxlRWxlbWVudCA9IGNvbnRleHRUYWJsZS5fZWxlbWVudCB8fCB0aGlzLnBsdWdpbnMudGFibGUuX3NlbGVjdGVkVGFibGUgfHwgdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQodGRFbGVtZW50LCAnVEFCTEUnKTtcclxuICAgICAgICBjb250ZXh0VGFibGUuX21heFdpZHRoID0gdGhpcy51dGlsLmhhc0NsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLXNpemUtMTAwJykgfHwgdGFibGVFbGVtZW50LnN0eWxlLndpZHRoID09PSAnMTAwJScgfHwgKCF0YWJsZUVsZW1lbnQuc3R5bGUud2lkdGggJiYgIXRoaXMudXRpbC5oYXNDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1zaXplLWF1dG8nKSk7XHJcbiAgICAgICAgY29udGV4dFRhYmxlLl9maXhlZENvbHVtbiA9IHRoaXMudXRpbC5oYXNDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1sYXlvdXQtZml4ZWQnKSB8fCB0YWJsZUVsZW1lbnQuc3R5bGUudGFibGVMYXlvdXQgPT09ICdmaXhlZCc7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uc2V0VGFibGVTdHlsZS5jYWxsKHRoaXMsIGNvbnRleHRUYWJsZS5fbWF4V2lkdGggPyAnd2lkdGh8Y29sdW1uJyA6ICd3aWR0aCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRhYmxlUGx1Z2luLnNldFBvc2l0aW9uQ29udHJvbGxlclRvcC5jYWxsKHRoaXMsIHRhYmxlRWxlbWVudCk7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uc2V0UG9zaXRpb25Db250cm9sbGVyRGl2LmNhbGwodGhpcywgdGRFbGVtZW50LCB0YWJsZVBsdWdpbi5fc2hpZnQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghdGFibGVQbHVnaW4uX3NoaWZ0KSB0aGlzLmNvbnRyb2xsZXJzT24oY29udGV4dFRhYmxlLnJlc2l6ZURpdiwgY29udGV4dFRhYmxlLnRhYmxlQ29udHJvbGxlciwgdGFibGVQbHVnaW4uaW5pdC5iaW5kKHRoaXMpLCB0ZEVsZW1lbnQsICd0YWJsZScpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRQb3NpdGlvbkNvbnRyb2xsZXJUb3A6IGZ1bmN0aW9uICh0YWJsZUVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLnNldENvbnRyb2xsZXJQb3NpdGlvbih0aGlzLmNvbnRleHQudGFibGUudGFibGVDb250cm9sbGVyLCB0YWJsZUVsZW1lbnQsICd0b3AnLCB7bGVmdDogMCwgdG9wOiAwfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFBvc2l0aW9uQ29udHJvbGxlckRpdjogZnVuY3Rpb24gKHRkRWxlbWVudCwgcmVzZXQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcbiAgICAgICAgY29uc3QgcmVzaXplRGl2ID0gY29udGV4dFRhYmxlLnJlc2l6ZURpdjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnBsdWdpbnMudGFibGUuc2V0Q2VsbEluZm8uY2FsbCh0aGlzLCB0ZEVsZW1lbnQsIHJlc2V0KTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoY29udGV4dFRhYmxlLmNlbGxDb250cm9sbGVyVG9wKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udHJvbGxlclBvc2l0aW9uKHJlc2l6ZURpdiwgY29udGV4dFRhYmxlLl9lbGVtZW50LCAndG9wJywge2xlZnQ6IGNvbnRleHRUYWJsZS50YWJsZUNvbnRyb2xsZXIub2Zmc2V0V2lkdGgsIHRvcDogMH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udHJvbGxlclBvc2l0aW9uKHJlc2l6ZURpdiwgdGRFbGVtZW50LCAnYm90dG9tJywge2xlZnQ6IDAsIHRvcDogMH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2V0Q2VsbEluZm86IGZ1bmN0aW9uICh0ZEVsZW1lbnQsIHJlc2V0KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlID0gY29udGV4dFRhYmxlLl9lbGVtZW50ID0gdGhpcy5wbHVnaW5zLnRhYmxlLl9zZWxlY3RlZFRhYmxlIHx8IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHRkRWxlbWVudCwgJ1RBQkxFJyk7XHJcblxyXG4gICAgICAgIGlmICgvVEhFQUQvaS50ZXN0KHRhYmxlLmZpcnN0RWxlbWVudENoaWxkLm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dFRhYmxlLmhlYWRlckJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0VGFibGUuaGVhZGVyQnV0dG9uLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzZXQgfHwgY29udGV4dFRhYmxlLl9waHlzaWNhbF9jZWxsQ250ID09PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0VGFibGUuX3RkRWxlbWVudCAhPT0gdGRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0VGFibGUuX3RkRWxlbWVudCA9IHRkRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fdHJFbGVtZW50ID0gdGRFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSBjb250ZXh0VGFibGUuX3RyRWxlbWVudHMgPSB0YWJsZS5yb3dzO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsSW5kZXggPSB0ZEVsZW1lbnQuY2VsbEluZGV4O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNlbGxDbnQgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgY2VsbHMgPSByb3dzWzBdLmNlbGxzLCBsZW4gPSByb3dzWzBdLmNlbGxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsQ250ICs9IGNlbGxzW2ldLmNvbFNwYW47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHJvdyBjbnQsIHJvdyBpbmRleFxyXG4gICAgICAgICAgICBjb25zdCByb3dJbmRleCA9IGNvbnRleHRUYWJsZS5fcm93SW5kZXggPSBjb250ZXh0VGFibGUuX3RyRWxlbWVudC5yb3dJbmRleDtcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLl9yb3dDbnQgPSByb3dzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIC8vIGNlbGwgY250LCBwaHlzaWNhbCBjZWxsIGluZGV4XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fcGh5c2ljYWxfY2VsbENudCA9IGNvbnRleHRUYWJsZS5fdHJFbGVtZW50LmNlbGxzLmxlbmd0aDtcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLl9sb2dpY2FsX2NlbGxDbnQgPSBjZWxsQ250O1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuX3BoeXNpY2FsX2NlbGxJbmRleCA9IGNlbGxJbmRleDtcclxuXHJcbiAgICAgICAgICAgIC8vIHNwYW5cclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLl9jdXJyZW50X2NvbFNwYW4gPSBjb250ZXh0VGFibGUuX3RkRWxlbWVudC5jb2xTcGFuIC0gMTtcclxuICAgICAgICAgICAgY29udGV4dFRhYmxlLl9jdXJyZW50X3Jvd1NwYW4gLSBjb250ZXh0VGFibGUuX3RyRWxlbWVudC5jZWxsc1tjZWxsSW5kZXhdLnJvd1NwYW4gLSAxO1xyXG5cclxuICAgICAgICAgICAgLy8gZmluZCBsb2djYWwgY2VsbCBpbmRleFxyXG4gICAgICAgICAgICBsZXQgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgc3BhbkluZGV4ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBjZWxscywgY29sU3BhbjsgaSA8PSByb3dJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxscyA9IHJvd3NbaV0uY2VsbHM7XHJcbiAgICAgICAgICAgICAgICBjb2xTcGFuID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBjcywgcnMsIGxvZ2NhbEluZGV4OyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNzID0gY2VsbC5jb2xTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGNlbGwucm93U3BhbiAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nY2FsSW5kZXggPSBjICsgY29sU3BhbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwYW5JbmRleC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHIgPSAwLCBhcnI7IHIgPCBzcGFuSW5kZXgubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9IHNwYW5JbmRleFtyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucm93ID4gaSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9nY2FsSW5kZXggPj0gYXJyLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBhcnIuY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nY2FsSW5kZXggKz0gYXJyLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5ycyAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5yb3cgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJzIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuSW5kZXguc3BsaWNlKHIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IGNMZW4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJvdyA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucnMgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvZ2NhbCBjZWxsIGluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHJvd0luZGV4ICYmIGMgPT09IGNlbGxJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0VGFibGUuX2xvZ2ljYWxfY2VsbEluZGV4ID0gbG9nY2FsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dTcGFuQXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGxvZ2NhbEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3M6IGNzICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzOiBycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogLTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbFNwYW4gKz0gY3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc3BhbkluZGV4ID0gc3BhbkluZGV4LmNvbmNhdChyb3dTcGFuQXJyKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7cmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O30pO1xyXG4gICAgICAgICAgICAgICAgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByb3dTcGFuQXJyID0gbnVsbDtcclxuICAgICAgICAgICAgc3BhbkluZGV4ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGVkaXRUYWJsZTogZnVuY3Rpb24gKHR5cGUsIG9wdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHRhYmxlUGx1Z2luID0gdGhpcy5wbHVnaW5zLnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuICAgICAgICBjb25zdCB0YWJsZSA9IGNvbnRleHRUYWJsZS5fZWxlbWVudDtcclxuICAgICAgICBjb25zdCBpc1JvdyA9IHR5cGUgPT09ICdyb3cnO1xyXG5cclxuICAgICAgICBpZiAoaXNSb3cpIHtcclxuICAgICAgICAgICAgY29uc3QgdGFibGVBdHRyID0gY29udGV4dFRhYmxlLl90ckVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgaWYgKC9eVEhFQUQkL2kudGVzdCh0YWJsZUF0dHIubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09PSAndXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGFibGVBdHRyLm5leHRFbGVtZW50U2libGluZyB8fCAhL15UQk9EWSQvaS50ZXN0KHRhYmxlQXR0ci5uZXh0RWxlbWVudFNpYmxpbmcubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5uZXJIVE1MICs9ICc8dGJvZHk+PHRyPicgKyB0YWJsZVBsdWdpbi5jcmVhdGVDZWxscy5jYWxsKHRoaXMsICd0ZCcsIGNvbnRleHRUYWJsZS5fbG9naWNhbF9jZWxsQ250LCBmYWxzZSkgKyAnPC90cj48L3Rib2R5Pic7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBtdWx0aVxyXG4gICAgICAgIGlmICh0YWJsZVBsdWdpbi5fcmVmKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQ2VsbCA9IGNvbnRleHRUYWJsZS5fdGRFbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZENlbGxzID0gdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbHM7XHJcbiAgICAgICAgICAgIC8vIG11bHRpIC0gcm93XHJcbiAgICAgICAgICAgIGlmIChpc1Jvdykge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHJvd1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0gc2VsZWN0ZWRDZWxsc1swXS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZUNlbGxzID0gW3NlbGVjdGVkQ2VsbHNbMF1dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gc2VsZWN0ZWRDZWxscy5sZW5ndGgsIGNlbGw7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gc2VsZWN0ZWRDZWxsc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdyAhPT0gY2VsbC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDZWxscy5wdXNoKGNlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gY2VsbC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmVtb3ZlQ2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uc2V0Q2VsbEluZm8uY2FsbCh0aGlzLCByZW1vdmVDZWxsc1tpXSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLmVkaXRSb3cuY2FsbCh0aGlzLCBvcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGVkaXQgcm93XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uc2V0Q2VsbEluZm8uY2FsbCh0aGlzLCBvcHRpb24gPT09ICd1cCcgPyBzZWxlY3RlZENlbGxzWzBdIDogc2VsZWN0ZWRDZWxsc1tzZWxlY3RlZENlbGxzLmxlbmd0aCAtIDFdLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5lZGl0Um93LmNhbGwodGhpcywgb3B0aW9uLCBwb3NpdGlvbkNlbGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBtdWx0aSAtIGNlbGxcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Um93ID0gc2VsZWN0ZWRDZWxsc1swXS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGNlbGxcclxuICAgICAgICAgICAgICAgIGlmICghb3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlQ2VsbHMgPSBbc2VsZWN0ZWRDZWxsc1swXV07XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDEsIGxlbiA9IHNlbGVjdGVkQ2VsbHMubGVuZ3RoLCBjZWxsOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IHNlbGVjdGVkQ2VsbHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdFJvdyA9PT0gY2VsbC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDZWxscy5wdXNoKGNlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZW1vdmVDZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRDZWxsSW5mby5jYWxsKHRoaXMsIHJlbW92ZUNlbGxzW2ldLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uZWRpdENlbGwuY2FsbCh0aGlzLCBvcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGVkaXQgY2VsbFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCByaWdodENlbGwgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRDZWxscy5sZW5ndGggLSAxOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0Um93ICE9PSBzZWxlY3RlZENlbGxzW2kgKyAxXS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodENlbGwgPSBzZWxlY3RlZENlbGxzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnNldENlbGxJbmZvLmNhbGwodGhpcywgb3B0aW9uID09PSAnbGVmdCcgPyBzZWxlY3RlZENlbGxzWzBdIDogcmlnaHRDZWxsIHx8IHNlbGVjdGVkQ2VsbHNbMF0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLmVkaXRDZWxsLmNhbGwodGhpcywgb3B0aW9uLCBwb3NpdGlvbkNlbGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9wdGlvbikgdGFibGVQbHVnaW4uaW5pdC5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0gLy8gb25lXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luW2lzUm93ID8gJ2VkaXRSb3cnIDogJ2VkaXRDZWxsJ10uY2FsbCh0aGlzLCBvcHRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWZ0ZXIgcmVtb3ZlXHJcbiAgICAgICAgaWYgKCFvcHRpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0YWJsZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2ldLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVJdGVtKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0YWJsZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHRoaXMudXRpbC5yZW1vdmVJdGVtKHRhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGVkaXRSb3c6IGZ1bmN0aW9uIChvcHRpb24sIHBvc2l0aW9uUmVzZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZSA9ICFvcHRpb247XHJcblxyXG4gICAgICAgIGNvbnN0IHVwID0gb3B0aW9uID09PSAndXAnO1xyXG4gICAgICAgIGNvbnN0IG9yaWdpblJvd0luZGV4ID0gY29udGV4dFRhYmxlLl9yb3dJbmRleDtcclxuICAgICAgICBjb25zdCByb3dJbmRleCA9IHJlbW92ZSB8fCB1cCA/IG9yaWdpblJvd0luZGV4IDogb3JpZ2luUm93SW5kZXggKyBjb250ZXh0VGFibGUuX2N1cnJlbnRfcm93U3BhbiArIDE7XHJcbiAgICAgICAgY29uc3Qgc2lnbiA9IHJlbW92ZSA/IC0xIDogMTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCByb3dzID0gY29udGV4dFRhYmxlLl90ckVsZW1lbnRzO1xyXG4gICAgICAgIGxldCBjZWxsQ250ID0gY29udGV4dFRhYmxlLl9sb2dpY2FsX2NlbGxDbnQ7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBvcmlnaW5Sb3dJbmRleCArIChyZW1vdmUgPyAtMSA6IDApLCBjZWxsOyBpIDw9IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNlbGwgPSByb3dzW2ldLmNlbGxzO1xyXG4gICAgICAgICAgICBpZiAoY2VsbC5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2VsbC5sZW5ndGgsIHJzLCBjczsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgcnMgPSBjZWxsW2NdLnJvd1NwYW47XHJcbiAgICAgICAgICAgICAgICBjcyA9IGNlbGxbY10uY29sU3BhbjtcclxuICAgICAgICAgICAgICAgIGlmIChycyA8IDIgJiYgY3MgPCAyKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocnMgKyBpID4gcm93SW5kZXggJiYgcm93SW5kZXggPiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFtjXS5yb3dTcGFuID0gcnMgKyBzaWduO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxDbnQgLT0gY3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZW1vdmUpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IHJvd3Nbb3JpZ2luUm93SW5kZXggKyAxXTtcclxuICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW5DZWxscyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNlbGxzID0gcm93c1tvcmlnaW5Sb3dJbmRleF0uY2VsbHM7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sU3BhbiA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgbG9nY2FsSW5kZXg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwgPSBjZWxsc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCA9IGkgKyBjb2xTcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbFNwYW4gKz0gY2VsbC5jb2xTcGFuIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwucm93U3BhbiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5yb3dTcGFuIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5DZWxscy5wdXNoKHtjZWxsOiBjZWxsLmNsb25lTm9kZShmYWxzZSksIGluZGV4OiBsb2djYWxJbmRleH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3BhbkNlbGxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BhbkNlbGwgPSBzcGFuQ2VsbHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxscyA9IG5leHQuY2VsbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sU3BhbiA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGxvZ2NhbEluZGV4OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCA9IGkgKyBjb2xTcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuICs9IGNlbGwuY29sU3BhbiAtIDE7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ2NhbEluZGV4ID49IHNwYW5DZWxsLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLS0sIGNvbFNwYW4tLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW4gKz0gc3BhbkNlbGwuY2VsbC5jb2xTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQuaW5zZXJ0QmVmb3JlKHNwYW5DZWxsLmNlbGwsIGNlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkNlbGwgPSBzcGFuQ2VsbHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3BhbkNlbGwpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BhbkNlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5hcHBlbmRDaGlsZChzcGFuQ2VsbC5jZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNwYW5DZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5hcHBlbmRDaGlsZChzcGFuQ2VsbHNbaV0uY2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fZWxlbWVudC5kZWxldGVSb3cocm93SW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1JvdyA9IGNvbnRleHRUYWJsZS5fZWxlbWVudC5pbnNlcnRSb3cocm93SW5kZXgpO1xyXG4gICAgICAgICAgICBuZXdSb3cuaW5uZXJIVE1MID0gdGhpcy5wbHVnaW5zLnRhYmxlLmNyZWF0ZUNlbGxzLmNhbGwodGhpcywgJ3RkJywgY2VsbENudCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFyZW1vdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnRhYmxlLnNldFBvc2l0aW9uQ29udHJvbGxlckRpdi5jYWxsKHRoaXMsIHBvc2l0aW9uUmVzZXRFbGVtZW50IHx8IGNvbnRleHRUYWJsZS5fdGRFbGVtZW50LCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBlZGl0Q2VsbDogZnVuY3Rpb24gKG9wdGlvbiwgcG9zaXRpb25SZXNldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuICAgICAgICBjb25zdCByZW1vdmUgPSAhb3B0aW9uO1xyXG5cclxuICAgICAgICBjb25zdCBsZWZ0ID0gb3B0aW9uID09PSAnbGVmdCc7XHJcbiAgICAgICAgY29uc3QgY29sU3BhbiA9IGNvbnRleHRUYWJsZS5fY3VycmVudF9jb2xTcGFuO1xyXG4gICAgICAgIGNvbnN0IGNlbGxJbmRleCA9IHJlbW92ZSB8fCBsZWZ0ID8gY29udGV4dFRhYmxlLl9sb2dpY2FsX2NlbGxJbmRleCA6IGNvbnRleHRUYWJsZS5fbG9naWNhbF9jZWxsSW5kZXggKyBjb2xTcGFuICsgMTtcclxuXHJcbiAgICAgICAgY29uc3Qgcm93cyA9IGNvbnRleHRUYWJsZS5fdHJFbGVtZW50cztcclxuICAgICAgICBsZXQgcm93U3BhbkFyciA9IFtdO1xyXG4gICAgICAgIGxldCBzcGFuSW5kZXggPSBbXTtcclxuICAgICAgICBsZXQgcGFzc0NlbGwgPSAwO1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZUNlbGwgPSBbXTtcclxuICAgICAgICBjb25zdCByZW1vdmVTcGFuQXJyID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjb250ZXh0VGFibGUuX3Jvd0NudCwgcm93LCBpbnNlcnRJbmRleCwgY2VsbHMsIG5ld0NlbGwsIGFwcGx5U3BhbiwgY2VsbENvbFNwYW47IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICByb3cgPSByb3dzW2ldO1xyXG4gICAgICAgICAgICBpbnNlcnRJbmRleCA9IGNlbGxJbmRleDtcclxuICAgICAgICAgICAgYXBwbHlTcGFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNlbGxzID0gcm93LmNlbGxzO1xyXG4gICAgICAgICAgICBjZWxsQ29sU3BhbiA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY2VsbCwgY0xlbiA9IGNlbGxzLmxlbmd0aCwgcnMsIGNzLCByZW1vdmVJbmRleDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2NdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjZWxsKSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBycyA9IGNlbGwucm93U3BhbiAtIDE7XHJcbiAgICAgICAgICAgICAgICBjcyA9IGNlbGwuY29sU3BhbiAtIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFyZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYyA+PSBpbnNlcnRJbmRleCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFzc0NlbGwgPCAxICYmIGNzICsgYyA+PSBpbnNlcnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jb2xTcGFuICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRJbmRleCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzQ2VsbCA9IHJzICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRJbmRleCAtPSBjcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXBwbHlTcGFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHIgPSAwLCBhcnI7IHIgPCBzcGFuSW5kZXgubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9IHNwYW5JbmRleFtyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEluZGV4IC09IGFyci5jcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5ycyAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5ycyA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuSW5kZXguc3BsaWNlKHIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5U3BhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVJbmRleCA9IGMgKyBjZWxsQ29sU3BhbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwYW5JbmRleC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RDZWxsID0gIWNlbGxzW2MgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciA9IDAsIGFycjsgciA8IHNwYW5JbmRleC5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyID0gc3BhbkluZGV4W3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5yb3cgPiBpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlSW5kZXggPj0gYXJyLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbENvbFNwYW4gKz0gYXJyLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUluZGV4ID0gYyArIGNlbGxDb2xTcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5ycyAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5yb3cgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJzIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuSW5kZXguc3BsaWNlKHIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJvdyA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucnMgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChycyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93U3BhbkFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzOiBycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzOiBjcyArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogcmVtb3ZlSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6IC0xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZUluZGV4ID49IGluc2VydEluZGV4ICYmIHJlbW92ZUluZGV4ICsgY3MgPD0gaW5zZXJ0SW5kZXggKyBjb2xTcGFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNlbGwucHVzaChjZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlbW92ZUluZGV4IDw9IGluc2VydEluZGV4ICsgY29sU3BhbiAmJiByZW1vdmVJbmRleCArIGNzID49IGluc2VydEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY29sU3BhbiAtPSB1dGlsLmdldE92ZXJsYXBSYW5nZUF0SW5kZXgoY2VsbEluZGV4LCBjZWxsSW5kZXggKyBjb2xTcGFuLCByZW1vdmVJbmRleCwgcmVtb3ZlSW5kZXggKyBjcyk7IFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocnMgPiAwICYmIChyZW1vdmVJbmRleCA8IGluc2VydEluZGV4IHx8IHJlbW92ZUluZGV4ICsgY3MgPiBpbnNlcnRJbmRleCArIGNvbFNwYW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVNwYW5BcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsOiBjZWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaTogaSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzOiBpICsgcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjZWxsQ29sU3BhbiArPSBjcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3BhbkluZGV4ID0gc3BhbkluZGV4LmNvbmNhdChyb3dTcGFuQXJyKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7cmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O30pO1xyXG4gICAgICAgICAgICByb3dTcGFuQXJyID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhc3NDZWxsID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhc3NDZWxsIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGluc2VydEluZGV4ICE9PSBudWxsICYmIGNlbGxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdDZWxsID0gdGhpcy5wbHVnaW5zLnRhYmxlLmNyZWF0ZUNlbGxzLmNhbGwodGhpcywgY2VsbHNbMF0ubm9kZU5hbWUsIDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbGwgPSByb3cuaW5zZXJ0QmVmb3JlKG5ld0NlbGwsIGNlbGxzW2luc2VydEluZGV4XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZW1vdmUpIHtcclxuICAgICAgICAgICAgbGV0IHJlbW92ZUZpcnN0LCByZW1vdmVFbmQ7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHIgPSAwLCByTGVuID0gcmVtb3ZlQ2VsbC5sZW5ndGgsIHJvdzsgciA8IHJMZW47IHIrKykge1xyXG4gICAgICAgICAgICAgICAgcm93ID0gcmVtb3ZlQ2VsbFtyXS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZUNlbGxbcl0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJvdy5jZWxscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlbW92ZUZpcnN0KSByZW1vdmVGaXJzdCA9IHV0aWwuZ2V0QXJyYXlJbmRleChyb3dzLCByb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVuZCA9IHV0aWwuZ2V0QXJyYXlJbmRleChyb3dzLCByb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShyb3cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IHJlbW92ZVNwYW5BcnIubGVuZ3RoLCByb3dTcGFuQ2VsbDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgcm93U3BhbkNlbGwgPSByZW1vdmVTcGFuQXJyW2NdO1xyXG4gICAgICAgICAgICAgICAgcm93U3BhbkNlbGwuY2VsbC5yb3dTcGFuID0gdXRpbC5nZXRPdmVybGFwUmFuZ2VBdEluZGV4KHJlbW92ZUZpcnN0LCByZW1vdmVFbmQsIHJvd1NwYW5DZWxsLmksIHJvd1NwYW5DZWxsLnJzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy50YWJsZS5zZXRQb3NpdGlvbkNvbnRyb2xsZXJEaXYuY2FsbCh0aGlzLCBwb3NpdGlvblJlc2V0RWxlbWVudCB8fCBjb250ZXh0VGFibGUuX3RkRWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfY2xvc2VTcGxpdE1lbnU6IG51bGwsXHJcbiAgICBvcGVuU3BsaXRNZW51OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHRoaXMuY29udGV4dC50YWJsZS5zcGxpdEJ1dHRvbiwgJ29uJyk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRhYmxlLnNwbGl0TWVudS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS10YWJsZSc7XHJcblxyXG4gICAgICAgIHRoaXMucGx1Z2lucy50YWJsZS5fY2xvc2VTcGxpdE1lbnUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0aGlzLmNvbnRleHQudGFibGUuc3BsaXRCdXR0b24sICdvbicpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQudGFibGUuc3BsaXRNZW51LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jRXZlbnQoJ2NsaWNrJywgdGhpcy5wbHVnaW5zLnRhYmxlLl9jbG9zZVNwbGl0TWVudSk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy50YWJsZS5fY2xvc2VTcGxpdE1lbnUgPSBudWxsO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGREb2NFdmVudCgnY2xpY2snLCB0aGlzLnBsdWdpbnMudGFibGUuX2Nsb3NlU3BsaXRNZW51KTtcclxuICAgIH0sXHJcblxyXG4gICAgc3BsaXRDZWxsczogZnVuY3Rpb24gKGRpcmVjdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHV0aWwgPSB0aGlzLnV0aWw7XHJcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRDZWxsID0gY29udGV4dFRhYmxlLl90ZEVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3Qgcm93cyA9IGNvbnRleHRUYWJsZS5fdHJFbGVtZW50cztcclxuICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gY29udGV4dFRhYmxlLl90ckVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBjb250ZXh0VGFibGUuX2xvZ2ljYWxfY2VsbEluZGV4O1xyXG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gY29udGV4dFRhYmxlLl9yb3dJbmRleDtcclxuICAgICAgICBjb25zdCBuZXdDZWxsID0gdGhpcy5wbHVnaW5zLnRhYmxlLmNyZWF0ZUNlbGxzLmNhbGwodGhpcywgY3VycmVudENlbGwubm9kZU5hbWUsIDAsIHRydWUpO1xyXG5cclxuICAgICAgICAvLyB2ZXJ0aWNhbFxyXG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sU3BhbiA9IGN1cnJlbnRDZWxsLmNvbFNwYW47XHJcbiAgICAgICAgICAgIG5ld0NlbGwucm93U3BhbiA9IGN1cnJlbnRDZWxsLnJvd1NwYW47XHJcblxyXG4gICAgICAgICAgICAvLyBjb2xzcGFuID4gMVxyXG4gICAgICAgICAgICBpZiAoY3VycmVudENvbFNwYW4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDZWxsLmNvbFNwYW4gPSB0aGlzLl93Lk1hdGguZmxvb3IoY3VycmVudENvbFNwYW4vMik7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2VsbC5jb2xTcGFuID0gY3VycmVudENvbFNwYW4gLSBuZXdDZWxsLmNvbFNwYW47XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Um93Lmluc2VydEJlZm9yZShuZXdDZWxsLCBjdXJyZW50Q2VsbC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBjb2xzcGFuIC0gMVxyXG4gICAgICAgICAgICAgICAgbGV0IHJvd1NwYW5BcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBzcGFuSW5kZXggPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY29udGV4dFRhYmxlLl9yb3dDbnQsIGNlbGxzLCBjb2xTcGFuOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxscyA9IHJvd3NbaV0uY2VsbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sU3BhbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGNzLCBycywgbG9nY2FsSW5kZXg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcyA9IGNlbGwuY29sU3BhbiAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJzID0gY2VsbC5yb3dTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nY2FsSW5kZXggPSBjICsgY29sU3BhbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGFuSW5kZXgubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciA9IDAsIGFycjsgciA8IHNwYW5JbmRleC5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9IHNwYW5JbmRleFtyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJvdyA+IGkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2djYWxJbmRleCA+PSBhcnIuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBhcnIuY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2NhbEluZGV4ICs9IGFyci5jcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5yb3cgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5ycyA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gY0xlbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5yb3cgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5ycyA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2djYWxJbmRleCA8PSBpbmRleCAmJiBycyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW5BcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGxvZ2NhbEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzOiBjcyArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnM6IHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogLTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbCAhPT0gY3VycmVudENlbGwgJiYgbG9nY2FsSW5kZXggPD0gaW5kZXggJiYgbG9nY2FsSW5kZXggKyBjcyA+PSBpbmRleCArIGN1cnJlbnRDb2xTcGFuIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jb2xTcGFuICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ2NhbEluZGV4ID4gaW5kZXgpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBjcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleCA9IHNwYW5JbmRleC5jb25jYXQocm93U3BhbkFycikuc29ydChmdW5jdGlvbiAoYSwgYikge3JldHVybiBhLmluZGV4IC0gYi5pbmRleDt9KTtcclxuICAgICAgICAgICAgICAgICAgICByb3dTcGFuQXJyID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJvdy5pbnNlcnRCZWZvcmUobmV3Q2VsbCwgY3VycmVudENlbGwubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7IC8vIGhvcml6b250YWxcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFJvd1NwYW4gPSBjdXJyZW50Q2VsbC5yb3dTcGFuO1xyXG4gICAgICAgICAgICBuZXdDZWxsLmNvbFNwYW4gPSBjdXJyZW50Q2VsbC5jb2xTcGFuO1xyXG5cclxuICAgICAgICAgICAgLy8gcm93c3BhbiA+IDFcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSb3dTcGFuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgbmV3Q2VsbC5yb3dTcGFuID0gdGhpcy5fdy5NYXRoLmZsb29yKGN1cnJlbnRSb3dTcGFuLzIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Um93U3BhbiA9IGN1cnJlbnRSb3dTcGFuIC0gbmV3Q2VsbC5yb3dTcGFuO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd1NwYW5BcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRSb3dJbmRleCA9IHV0aWwuZ2V0QXJyYXlJbmRleChyb3dzLCBjdXJyZW50Um93KSArIG5ld1Jvd1NwYW47XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGNlbGxzLCBjb2xTcGFuOyBpIDwgbmV4dFJvd0luZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxscyA9IHJvd3NbaV0uY2VsbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sU3BhbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGNzLCBsb2djYWxJbmRleDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCA9IGMgKyBjb2xTcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9nY2FsSW5kZXggPj0gaW5kZXgpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcyA9IGNlbGwucm93U3BhbiAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcyA+IDAgJiYgY3MgKyBpID49IG5leHRSb3dJbmRleCAmJiBsb2djYWxJbmRleCA8IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dTcGFuQXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBsb2djYWxJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjczogY2VsbC5jb2xTcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuICs9IGNlbGwuY29sU3BhbiAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRSb3cgPSByb3dzW25leHRSb3dJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2VsbHMgPSBuZXh0Um93LmNlbGxzO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJzID0gcm93U3BhbkFyci5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gbmV4dENlbGxzLmxlbmd0aCwgY29sU3BhbiA9IDAsIGNlbGwsIGNzLCBsb2djYWxJbmRleCwgaW5zZXJ0SW5kZXg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2djYWxJbmRleCA9IGMgKyBjb2xTcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwgPSBuZXh0Q2VsbHNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgY3MgPSBjZWxsLmNvbFNwYW4gLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc2VydEluZGV4ID0gbG9nY2FsSW5kZXggKyBjcyArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChycyAmJiBpbnNlcnRJbmRleCA+PSBycy5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuICs9IHJzLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRJbmRleCArPSBycy5jcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnMgPSByb3dTcGFuQXJyLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnNlcnRJbmRleCA+PSBpbmRleCB8fCBjID09PSBjTGVuIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Um93Lmluc2VydEJlZm9yZShuZXdDZWxsLCBjZWxsLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29sU3BhbiArPSBjcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2VsbC5yb3dTcGFuID0gbmV3Um93U3BhbjtcclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gcm93c3BhbiAtIDFcclxuICAgICAgICAgICAgICAgIG5ld0NlbGwucm93U3BhbiA9IGN1cnJlbnRDZWxsLnJvd1NwYW47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ1RSJyk7XHJcbiAgICAgICAgICAgICAgICBuZXdSb3cuYXBwZW5kQ2hpbGQobmV3Q2VsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGNlbGxzOyBpIDwgcm93SW5kZXg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzID0gcm93c1tpXS5jZWxscztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbHMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2VsbHMubGVuZ3RoOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICsgY2VsbHNbY10ucm93U3BhbiAtIDEgPj0gcm93SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzW2NdLnJvd1NwYW4gKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwaHlzaWNhbEluZGV4ID0gY29udGV4dFRhYmxlLl9waHlzaWNhbF9jZWxsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IGN1cnJlbnRSb3cuY2VsbHM7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxscy5sZW5ndGg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gcGh5c2ljYWxJbmRleCkgY29udGludWU7ICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzW2NdLnJvd1NwYW4gKz0gMTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRSb3cucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Um93LCBjdXJyZW50Um93Lm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZm9jdXNFZGdlKGN1cnJlbnRDZWxsKTtcclxuICAgICAgICB0aGlzLnBsdWdpbnMudGFibGUuc2V0UG9zaXRpb25Db250cm9sbGVyRGl2LmNhbGwodGhpcywgY3VycmVudENlbGwsIHRydWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBtZXJnZUNlbGxzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgdGFibGVQbHVnaW4gPSB0aGlzLnBsdWdpbnMudGFibGU7XHJcbiAgICAgICAgY29uc3QgY29udGV4dFRhYmxlID0gdGhpcy5jb250ZXh0LnRhYmxlO1xyXG4gICAgICAgIGNvbnN0IHV0aWwgPSB0aGlzLnV0aWw7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZiA9IHRhYmxlUGx1Z2luLl9yZWY7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRDZWxscyA9IHRhYmxlUGx1Z2luLl9zZWxlY3RlZENlbGxzO1xyXG4gICAgICAgIGNvbnN0IG1lcmdlQ2VsbCA9IHNlbGVjdGVkQ2VsbHNbMF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGVtcHR5Um93Rmlyc3QgPSBudWxsO1xyXG4gICAgICAgIGxldCBlbXB0eVJvd0xhc3QgPSBudWxsO1xyXG4gICAgICAgIGxldCBjcyA9IChyZWYuY2UgLSByZWYuY3MpICsgMTtcclxuICAgICAgICBsZXQgcnMgPSAocmVmLnJlIC0gcmVmLnJzKSArIDE7XHJcbiAgICAgICAgbGV0IG1lcmdlSFRNTCA9ICcnO1xyXG4gICAgICAgIGxldCByb3cgPSBudWxsO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gc2VsZWN0ZWRDZWxscy5sZW5ndGgsIGNlbGwsIGNoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY2VsbCA9IHNlbGVjdGVkQ2VsbHNbaV07XHJcbiAgICAgICAgICAgIGlmIChyb3cgIT09IGNlbGwucGFyZW50Tm9kZSkgcm93ID0gY2VsbC5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgICAgICAgY2ggPSBjZWxsLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNoLmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGNoW2NdKSAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjaFtjXS50ZXh0Q29udGVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hbY10pO1xyXG4gICAgICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1lcmdlSFRNTCArPSBjZWxsLmlubmVySFRNTDtcclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNlbGwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJvdy5jZWxscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICghZW1wdHlSb3dGaXJzdCkgZW1wdHlSb3dGaXJzdCA9IHJvdztcclxuICAgICAgICAgICAgICAgIGVsc2UgZW1wdHlSb3dMYXN0ID0gcm93O1xyXG4gICAgICAgICAgICAgICAgcnMgLT0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVtcHR5Um93Rmlyc3QpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93cyA9IGNvbnRleHRUYWJsZS5fdHJFbGVtZW50cztcclxuICAgICAgICAgICAgY29uc3Qgcm93SW5kZXhGaXJzdCA9IHV0aWwuZ2V0QXJyYXlJbmRleChyb3dzLCBlbXB0eVJvd0ZpcnN0KTtcclxuICAgICAgICAgICAgY29uc3Qgcm93SW5kZXhMYXN0ID0gdXRpbC5nZXRBcnJheUluZGV4KHJvd3MsIGVtcHR5Um93TGFzdCB8fCBlbXB0eVJvd0ZpcnN0KTtcclxuICAgICAgICAgICAgY29uc3QgcmVtb3ZlUm93cyA9IFtdO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBjZWxsczsgaSA8PSByb3dJbmRleExhc3Q7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2VsbHMgPSByb3dzW2ldLmNlbGxzO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNlbGxzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVJvd3MucHVzaChyb3dzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIHJzOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGNlbGxzW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJzID0gY2VsbC5yb3dTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocnMgPiAwICYmIGkgKyBycyA+PSByb3dJbmRleEZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwucm93U3BhbiAtPSB1dGlsLmdldE92ZXJsYXBSYW5nZUF0SW5kZXgocm93SW5kZXhGaXJzdCwgcm93SW5kZXhMYXN0LCBpLCBpICsgcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlbW92ZVJvd3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShyZW1vdmVSb3dzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWVyZ2VDZWxsLmlubmVySFRNTCArPSBtZXJnZUhUTUw7XHJcbiAgICAgICAgbWVyZ2VDZWxsLmNvbFNwYW4gPSBjcztcclxuICAgICAgICBtZXJnZUNlbGwucm93U3BhbiA9IHJzO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uc2V0QWN0aXZlQnV0dG9uLmNhbGwodGhpcywgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLmNhbGxfY29udHJvbGxlcl90YWJsZUVkaXQuY2FsbCh0aGlzLCBtZXJnZUNlbGwpO1xyXG5cclxuICAgICAgICB1dGlsLmFkZENsYXNzKG1lcmdlQ2VsbCwgJ3NlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICB0aGlzLmZvY3VzRWRnZShtZXJnZUNlbGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICB0b2dnbGVIZWFkZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCB1dGlsID0gdGhpcy51dGlsO1xyXG4gICAgICAgIGNvbnN0IGhlYWRlckJ1dHRvbiA9IHRoaXMuY29udGV4dC50YWJsZS5oZWFkZXJCdXR0b247XHJcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdXRpbC5oYXNDbGFzcyhoZWFkZXJCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICBjb25zdCB0YWJsZSA9IHRoaXMuY29udGV4dC50YWJsZS5fZWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKCFhY3RpdmUpIHtcclxuICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdUSEVBRCcpO1xyXG4gICAgICAgICAgICBoZWFkZXIuaW5uZXJIVE1MID0gJzx0cj4nICsgdGhpcy5wbHVnaW5zLnRhYmxlLmNyZWF0ZUNlbGxzLmNhbGwodGhpcywgJ3RoJywgdGhpcy5jb250ZXh0LnRhYmxlLl9sb2dpY2FsX2NlbGxDbnQsIGZhbHNlKSArICc8L3RyPic7XHJcbiAgICAgICAgICAgIHRhYmxlLmluc2VydEJlZm9yZShoZWFkZXIsIHRhYmxlLmZpcnN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odGFibGUucXVlcnlTZWxlY3RvcigndGhlYWQnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1dGlsLnRvZ2dsZUNsYXNzKGhlYWRlckJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICBpZiAoL1RIL2kudGVzdCh0aGlzLmNvbnRleHQudGFibGUuX3RkRWxlbWVudC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy50YWJsZS5zZXRQb3NpdGlvbkNvbnRyb2xsZXJEaXYuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHQudGFibGUuX3RkRWxlbWVudCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2V0VGFibGVTdHlsZTogZnVuY3Rpb24gKHN0eWxlcykge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUYWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcclxuICAgICAgICBjb25zdCB0YWJsZUVsZW1lbnQgPSBjb250ZXh0VGFibGUuX2VsZW1lbnQ7XHJcbiAgICAgICAgbGV0IGljb24sIHNwYW4sIHNpemVJY29uLCB0ZXh0O1xyXG5cclxuICAgICAgICBpZiAoc3R5bGVzLmluZGV4T2YoJ3dpZHRoJykgPiAtMSkge1xyXG4gICAgICAgICAgICBpY29uID0gIGNvbnRleHRUYWJsZS5yZXNpemVCdXR0b24uZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgIHNwYW4gPSBjb250ZXh0VGFibGUucmVzaXplVGV4dDtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29udGV4dFRhYmxlLl9tYXhXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgc2l6ZUljb24gPSBjb250ZXh0VGFibGUuaWNvbnMuZXhwYW5zaW9uO1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IGNvbnRleHRUYWJsZS5tYXhUZXh0O1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFRhYmxlLmNvbHVtbkZpeGVkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGFibGVFbGVtZW50LCAnc2UtdGFibGUtc2l6ZS0xMDAnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1zaXplLWF1dG8nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNpemVJY29uID0gY29udGV4dFRhYmxlLmljb25zLnJlZHVjdGlvbjtcclxuICAgICAgICAgICAgICAgIHRleHQgPSBjb250ZXh0VGFibGUubWluVGV4dDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRUYWJsZS5jb2x1bW5GaXhlZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1zaXplLWF1dG8nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1zaXplLTEwMCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnV0aWwuY2hhbmdlRWxlbWVudChpY29uLCBzaXplSWNvbik7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQoc3BhbiwgdGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3R5bGVzLmluZGV4T2YoJ2NvbHVtbicpID4gLTEpIHtcclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0VGFibGUuX2ZpeGVkQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGFibGVFbGVtZW50LCAnc2UtdGFibGUtbGF5b3V0LWZpeGVkJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3ModGFibGVFbGVtZW50LCAnc2UtdGFibGUtbGF5b3V0LWF1dG8nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0VGFibGUuY29sdW1uRml4ZWRCdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyh0YWJsZUVsZW1lbnQsICdzZS10YWJsZS1sYXlvdXQtYXV0bycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHRhYmxlRWxlbWVudCwgJ3NlLXRhYmxlLWxheW91dC1maXhlZCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGNvbnRleHRUYWJsZS5jb2x1bW5GaXhlZEJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2V0QWN0aXZlQnV0dG9uOiBmdW5jdGlvbiAoZml4ZWRDZWxsLCBzZWxlY3RlZENlbGwpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcblxyXG4gICAgICAgIGlmICgvXlRIJC9pLnRlc3QoZml4ZWRDZWxsLm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuaW5zZXJ0Um93QWJvdmVCdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuaW5zZXJ0Um93QmVsb3dCdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5pbnNlcnRSb3dBYm92ZUJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5pbnNlcnRSb3dCZWxvd0J1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNlbGVjdGVkQ2VsbCB8fCBmaXhlZENlbGwgPT09IHNlbGVjdGVkQ2VsbCkge1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUuc3BsaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICBjb250ZXh0VGFibGUubWVyZ2VCdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5zcGxpdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRUYWJsZS5tZXJnZUJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBtdWx0aSBzZWxlY3RlXHJcbiAgICBfYmluZE9uU2VsZWN0OiBudWxsLFxyXG4gICAgX2JpbmRPZmZTZWxlY3Q6IG51bGwsXHJcbiAgICBfYmluZE9mZlNoaWZ0OiBudWxsLFxyXG4gICAgX3NlbGVjdGVkQ2VsbHM6IG51bGwsXHJcbiAgICBfc2hpZnQ6IGZhbHNlLFxyXG4gICAgX2ZpeGVkQ2VsbDogbnVsbCxcclxuICAgIF9maXhlZENlbGxOYW1lOiBudWxsLFxyXG4gICAgX3NlbGVjdGVkQ2VsbDogbnVsbCxcclxuICAgIF9zZWxlY3RlZFRhYmxlOiBudWxsLFxyXG4gICAgX3JlZjogbnVsbCxcclxuICAgIF90b2dnbGVFZGl0b3I6IGZ1bmN0aW9uIChlbmFibGVkKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGVuYWJsZWQpO1xyXG4gICAgICAgIGlmIChlbmFibGVkKSB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5ZywgJ3NlLWRpc2FibGVkJyk7XHJcbiAgICAgICAgZWxzZSB0aGlzLnV0aWwuYWRkQ2xhc3ModGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5ZywgJ3NlLWRpc2FibGVkJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9vZmZDZWxsTXVsdGlTZWxlY3Q6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKCF0YWJsZVBsdWdpbi5fc2hpZnQpIHtcclxuICAgICAgICAgICAgdGFibGVQbHVnaW4uX3JlbW92ZUV2ZW50cy5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fdG9nZ2xlRWRpdG9yLmNhbGwodGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YWJsZVBsdWdpbi5faW5pdEJpbmQpIHtcclxuICAgICAgICAgICAgdGhpcy5fd2QucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGFibGVQbHVnaW4uX2luaXRCaW5kKTtcclxuICAgICAgICAgICAgdGFibGVQbHVnaW4uX2luaXRCaW5kID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbCB8fCAhdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICB0YWJsZVBsdWdpbi5zZXRBY3RpdmVCdXR0b24uY2FsbCh0aGlzLCB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsLCB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxsKTtcclxuICAgICAgICB0YWJsZVBsdWdpbi5jYWxsX2NvbnRyb2xsZXJfdGFibGVFZGl0LmNhbGwodGhpcywgdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbCB8fCB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsKTtcclxuXHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbHMgPSB0YWJsZVBsdWdpbi5fc2VsZWN0ZWRUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKCcuc2UtdGFibGUtc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgIGlmICh0YWJsZVBsdWdpbi5fc2VsZWN0ZWRDZWxsICYmIHRhYmxlUGx1Z2luLl9maXhlZENlbGwpIHRoaXMuZm9jdXNFZGdlKHRhYmxlUGx1Z2luLl9zZWxlY3RlZENlbGwpO1xyXG5cclxuICAgICAgICBpZiAoIXRhYmxlUGx1Z2luLl9zaGlmdCkge1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fZml4ZWRDZWxsID0gbnVsbDtcclxuICAgICAgICAgICAgdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRhYmxlUGx1Z2luLl9maXhlZENlbGxOYW1lID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9vbkNlbGxNdWx0aVNlbGVjdDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgdGFibGVQbHVnaW4gPSB0aGlzLnBsdWdpbnMudGFibGU7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZS50YXJnZXQsIHRoaXMudXRpbC5pc0NlbGwpO1xyXG5cclxuICAgICAgICBpZiAodGFibGVQbHVnaW4uX3NoaWZ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHRhYmxlUGx1Z2luLl9maXhlZENlbGwpIHRhYmxlUGx1Z2luLl90b2dnbGVFZGl0b3IuY2FsbCh0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgZWxzZSB0YWJsZVBsdWdpbi5fdG9nZ2xlRWRpdG9yLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXRhYmxlUGx1Z2luLl9yZWYpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBlbHNlIHRhYmxlUGx1Z2luLl90b2dnbGVFZGl0b3IuY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRhcmdldCB8fCB0YXJnZXQgPT09IHRhYmxlUGx1Z2luLl9zZWxlY3RlZENlbGwgfHwgdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbE5hbWUgIT09IHRhcmdldC5ub2RlTmFtZSB8fCBcclxuICAgICAgICAgICAgdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUgIT09IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHRhcmdldCwgJ1RBQkxFJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3NlbGVjdGVkQ2VsbCA9IHRhcmdldDtcclxuICAgICAgICB0YWJsZVBsdWdpbi5fc2V0TXVsdGlDZWxscy5jYWxsKHRoaXMsIHRhYmxlUGx1Z2luLl9maXhlZENlbGwsIHRhcmdldCk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zZXRNdWx0aUNlbGxzOiBmdW5jdGlvbiAoc3RhcnRDZWxsLCBlbmRDZWxsKSB7XHJcbiAgICAgICAgY29uc3QgdGFibGVQbHVnaW4gPSB0aGlzLnBsdWdpbnMudGFibGU7XHJcbiAgICAgICAgY29uc3Qgcm93cyA9IHRhYmxlUGx1Z2luLl9zZWxlY3RlZFRhYmxlLnJvd3M7XHJcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRDZWxscyA9IHRhYmxlUGx1Z2luLl9zZWxlY3RlZFRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZS10YWJsZS1zZWxlY3RlZC1jZWxsJyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkQ2VsbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhzZWxlY3RlZENlbGxzW2ldLCAnc2UtdGFibGUtc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0Q2VsbCA9PT0gZW5kQ2VsbCkge1xyXG4gICAgICAgICAgICB1dGlsLmFkZENsYXNzKHN0YXJ0Q2VsbCwgJ3NlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICAgICAgaWYgKCF0YWJsZVBsdWdpbi5fc2hpZnQpIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaW5kU2VsZWN0ZWRDZWxsID0gdHJ1ZTtcclxuICAgICAgICBsZXQgc3BhbkluZGV4ID0gW107XHJcbiAgICAgICAgbGV0IHJvd1NwYW5BcnIgPSBbXTtcclxuICAgICAgICBjb25zdCByZWYgPSB0YWJsZVBsdWdpbi5fcmVmID0ge19pOiAwLCBjczogbnVsbCwgY2U6IG51bGwsIHJzOiBudWxsLCByZTogbnVsbH07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByb3dzLmxlbmd0aCwgY2VsbHMsIGNvbFNwYW47IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBjZWxscyA9IHJvd3NbaV0uY2VsbHM7XHJcbiAgICAgICAgICAgIGNvbFNwYW4gPSAwO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGxvZ2NhbEluZGV4LCBjcywgcnM7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgIGNlbGwgPSBjZWxsc1tjXTtcclxuICAgICAgICAgICAgICAgIGNzID0gY2VsbC5jb2xTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgIHJzID0gY2VsbC5yb3dTcGFuIC0gMTtcclxuICAgICAgICAgICAgICAgIGxvZ2NhbEluZGV4ID0gYyArIGNvbFNwYW47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNwYW5JbmRleC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciA9IDAsIGFycjsgciA8IHNwYW5JbmRleC5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnIgPSBzcGFuSW5kZXhbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucm93ID4gaSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2djYWxJbmRleCA+PSBhcnIuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW4gKz0gYXJyLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nY2FsSW5kZXggKz0gYXJyLmNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnJzIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucm93ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLnJzIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleC5zcGxpY2UociwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IGNMZW4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucnMgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5yb3cgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIucnMgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4LnNwbGljZShyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbmRTZWxlY3RlZENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbCA9PT0gc3RhcnRDZWxsIHx8IGNlbGwgPT09IGVuZENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmLmNzID0gcmVmLmNzICE9PSBudWxsICYmIHJlZi5jcyA8IGxvZ2NhbEluZGV4ID8gcmVmLmNzIDogbG9nY2FsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5jZSA9IHJlZi5jZSAhPT0gbnVsbCAmJiByZWYuY2UgPiBsb2djYWxJbmRleCArIGNzID8gcmVmLmNlIDogbG9nY2FsSW5kZXggKyBjcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmLnJzID0gcmVmLnJzICE9PSBudWxsICYmIHJlZi5ycyA8IGkgPyByZWYucnMgOiBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWYucmUgPSByZWYucmUgIT09IG51bGwgJiYgcmVmLnJlID4gaSArIHJzID8gcmVmLnJlIDogaSArIHJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWYuX2kgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZi5faSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5kU2VsZWN0ZWRDZWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5JbmRleCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dTcGFuQXJyID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmdldE92ZXJsYXBSYW5nZUF0SW5kZXgocmVmLmNzLCByZWYuY2UsIGxvZ2NhbEluZGV4LCBsb2djYWxJbmRleCArIGNzKSAmJiB1dGlsLmdldE92ZXJsYXBSYW5nZUF0SW5kZXgocmVmLnJzLCByZWYucmUsIGksIGkgKyBycykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDcyA9IHJlZi5jcyA8IGxvZ2NhbEluZGV4ID8gcmVmLmNzIDogbG9nY2FsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q2UgPSByZWYuY2UgPiBsb2djYWxJbmRleCArIGNzID8gcmVmLmNlIDogbG9nY2FsSW5kZXggKyBjcztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdScyA9IHJlZi5ycyA8IGkgPyByZWYucnMgOiBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JlID0gcmVmLnJlID4gaSArIHJzID8gcmVmLnJlIDogaSArIHJzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVmLmNzICE9PSBuZXdDcyB8fCByZWYuY2UgIT09IG5ld0NlIHx8IHJlZi5ycyAhPT0gbmV3UnMgfHwgcmVmLnJlICE9PSBuZXdSZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWYuY3MgPSBuZXdDcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmLmNlID0gbmV3Q2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5ycyA9IG5ld1JzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWYucmUgPSBuZXdSZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkluZGV4ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW5BcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNlbGwsICdzZS10YWJsZS1zZWxlY3RlZC1jZWxsJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd1NwYW5BcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBsb2djYWxJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3M6IGNzICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnM6IHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3c6IC0xXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29sU3BhbiArPSBjZWxsLmNvbFNwYW4gLSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzcGFuSW5kZXggPSBzcGFuSW5kZXguY29uY2F0KHJvd1NwYW5BcnIpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtyZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7fSk7XHJcbiAgICAgICAgICAgIHJvd1NwYW5BcnIgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9yZW1vdmVFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKHRhYmxlUGx1Z2luLl9pbml0QmluZCkge1xyXG4gICAgICAgICAgICB0aGlzLl93ZC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0YWJsZVBsdWdpbi5faW5pdEJpbmQpO1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5faW5pdEJpbmQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRhYmxlUGx1Z2luLl9iaW5kT25TZWxlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5fd2QucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGFibGVQbHVnaW4uX2JpbmRPblNlbGVjdCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRhYmxlUGx1Z2luLl9iaW5kT25TZWxlY3QpO1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fYmluZE9uU2VsZWN0ID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YWJsZVBsdWdpbi5fYmluZE9mZlNlbGVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLl93ZC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGFibGVQbHVnaW4uX2JpbmRPZmZTZWxlY3QpO1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fYmluZE9mZlNlbGVjdCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFibGVQbHVnaW4uX2JpbmRPZmZTaGlmdCkge1xyXG4gICAgICAgICAgICB0aGlzLl93ZC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2hpZnQpO1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fYmluZE9mZlNoaWZ0ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9pbml0QmluZDogbnVsbCxcclxuICAgIG9uVGFibGVDZWxsTXVsdGlTZWxlY3Q6IGZ1bmN0aW9uICh0ZEVsZW1lbnQsIHNoaWZ0KSB7XHJcbiAgICAgICAgY29uc3QgdGFibGVQbHVnaW4gPSB0aGlzLnBsdWdpbnMudGFibGU7XHJcblxyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9yZW1vdmVFdmVudHMuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9zaGlmdCA9IHNoaWZ0O1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9maXhlZENlbGwgPSB0ZEVsZW1lbnQ7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbE5hbWUgPSB0ZEVsZW1lbnQubm9kZU5hbWU7XHJcbiAgICAgICAgdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudCh0ZEVsZW1lbnQsICdUQUJMRScpO1xyXG5cclxuICAgICAgICBjb25zdCBzZWxlY3RlZENlbGxzID0gdGFibGVQbHVnaW4uX3NlbGVjdGVkVGFibGUucXVlcnlTZWxlY3RvckFsbCgnLnNlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRDZWxscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3Moc2VsZWN0ZWRDZWxsc1tpXSwgJ3NlLXRhYmxlLXNlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXRpbC5hZGRDbGFzcyh0ZEVsZW1lbnQsICdzZS10YWJsZS1zZWxlY3RlZC1jZWxsJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGFibGVQbHVnaW4uX2JpbmRPblNlbGVjdCA9IHRhYmxlUGx1Z2luLl9vbkNlbGxNdWx0aVNlbGVjdC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9iaW5kT2ZmU2VsZWN0ID0gdGFibGVQbHVnaW4uX29mZkNlbGxNdWx0aVNlbGVjdC5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAoIXNoaWZ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRhYmxlUGx1Z2luLl9iaW5kT25TZWxlY3QsIGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fYmluZE9mZlNoaWZ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09uKHRoaXMuY29udGV4dC50YWJsZS5yZXNpemVEaXYsIHRoaXMuY29udGV4dC50YWJsZS50YWJsZUNvbnRyb2xsZXIsIHRoaXMucGx1Z2lucy50YWJsZS5pbml0LmJpbmQodGhpcyksIHRkRWxlbWVudCwgJ3RhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRhYmxlUGx1Z2luLl9yZWYpIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fd2QuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0YWJsZVBsdWdpbi5fYmluZE9mZlNoaWZ0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRhYmxlUGx1Z2luLl9iaW5kT25TZWxlY3QsIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3dkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0YWJsZVBsdWdpbi5fYmluZE9mZlNlbGVjdCwgZmFsc2UpO1xyXG4gICAgICAgIHRhYmxlUGx1Z2luLl9pbml0QmluZCA9IHRhYmxlUGx1Z2luLmluaXQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLl93ZC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0YWJsZVBsdWdpbi5faW5pdEJpbmQsIGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25DbGlja190YWJsZUNvbnRyb2xsZXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpID8gZS50YXJnZXQgOiBlLnRhcmdldC5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBjb21tYW5kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1vcHRpb24nKTtcclxuICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IHRoaXMucGx1Z2lucy50YWJsZTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodHlwZW9mIHRhYmxlUGx1Z2luLl9jbG9zZVNwbGl0TWVudSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0YWJsZVBsdWdpbi5fY2xvc2VTcGxpdE1lbnUoKTtcclxuICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdvbnNwbGl0JykgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBjb250ZXh0VGFibGUgPSB0aGlzLmNvbnRleHQudGFibGU7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoY29tbWFuZCkge1xyXG4gICAgICAgICAgICBjYXNlICdpbnNlcnQnOlxyXG4gICAgICAgICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uZWRpdFRhYmxlLmNhbGwodGhpcywgdmFsdWUsIG9wdGlvbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnaGVhZGVyJzpcclxuICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnRvZ2dsZUhlYWRlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ29uc3BsaXQnOlxyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4ub3BlblNwbGl0TWVudS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3NwbGl0JzpcclxuICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnNwbGl0Q2VsbHMuY2FsbCh0aGlzLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbWVyZ2UnOlxyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4ubWVyZ2VDZWxscy5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3Jlc2l6ZSc6XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0VGFibGUuX21heFdpZHRoID0gIWNvbnRleHRUYWJsZS5fbWF4V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRUYWJsZVN0eWxlLmNhbGwodGhpcywgJ3dpZHRoJyk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRQb3NpdGlvbkNvbnRyb2xsZXJUb3AuY2FsbCh0aGlzLCBjb250ZXh0VGFibGUuX2VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uc2V0UG9zaXRpb25Db250cm9sbGVyRGl2LmNhbGwodGhpcywgY29udGV4dFRhYmxlLl90ZEVsZW1lbnQsIHRhYmxlUGx1Z2luLl9zaGlmdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbGF5b3V0JzpcclxuICAgICAgICAgICAgICAgIGNvbnRleHRUYWJsZS5fZml4ZWRDb2x1bW4gPSAhY29udGV4dFRhYmxlLl9maXhlZENvbHVtbjtcclxuICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLnNldFRhYmxlU3R5bGUuY2FsbCh0aGlzLCAnY29sdW1uJyk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5zZXRQb3NpdGlvbkNvbnRyb2xsZXJUb3AuY2FsbCh0aGlzLCBjb250ZXh0VGFibGUuX2VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGFibGVQbHVnaW4uc2V0UG9zaXRpb25Db250cm9sbGVyRGl2LmNhbGwodGhpcywgY29udGV4dFRhYmxlLl90ZEVsZW1lbnQsIHRhYmxlUGx1Z2luLl9zaGlmdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncmVtb3ZlJzpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5RGl2ID0gY29udGV4dFRhYmxlLl9lbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlSXRlbShjb250ZXh0VGFibGUuX2VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbXB0eURpdiAhPT0gdGhpcy5jb250ZXh0LmVsZW1lbnQud3lzaXd5ZykgdGhpcy51dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKGVtcHR5RGl2LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMDsgfSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ2Zvcm1hdEJsb2NrJyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQuZm9ybWF0QmxvY2sgPSB7XHJcbiAgICAgICAgICAgIHRhcmdldFRleHQ6IHRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnR4dCcpLFxyXG4gICAgICAgICAgICB0YXJnZXRUb29sdGlwOiB0YXJnZXRFbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLnNlLXRvb2x0aXAtdGV4dCcpLFxyXG4gICAgICAgICAgICBfZm9ybWF0TGlzdDogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVudEZvcm1hdDogJydcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2tVcC5iaW5kKGNvcmUpKTtcclxuICAgICAgICBjb250ZXh0LmZvcm1hdEJsb2NrLl9mb3JtYXRMaXN0ID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yQWxsKCdsaSBidXR0b24nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgbGFuZ190b29sYmFyID0gY29yZS5sYW5nLnRvb2xiYXI7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXIgc2UtbGlzdC1mb3JtYXQnO1xyXG5cclxuICAgICAgICBjb25zdCBkZWZhdWx0Rm9ybWF0cyA9IFsncCcsICdkaXYnLCAnYmxvY2txdW90ZScsICdwcmUnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXTtcclxuICAgICAgICBjb25zdCBmb3JtYXRMaXN0ID0gIW9wdGlvbi5mb3JtYXRzIHx8IG9wdGlvbi5mb3JtYXRzLmxlbmd0aCA9PT0gMCA/IGRlZmF1bHRGb3JtYXRzIDogb3B0aW9uLmZvcm1hdHM7XHJcblxyXG4gICAgICAgIGxldCBsaXN0ID0gJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+PHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPic7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZvcm1hdExpc3QubGVuZ3RoLCBmb3JtYXQsIHRhZ05hbWUsIGNvbW1hbmQsIG5hbWUsIGgsIGF0dHJzLCBjbGFzc05hbWU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXRMaXN0W2ldO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnICYmIGRlZmF1bHRGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lID0gZm9ybWF0LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kID0gdGFnTmFtZSA9PT0gJ2Jsb2NrcXVvdGUnID8gJ3JhbmdlJyA6IHRhZ05hbWUgPT09ICdwcmUnID8gJ2ZyZWUnIDogJ3JlcGxhY2UnO1xyXG4gICAgICAgICAgICAgICAgaCA9IC9eaC8udGVzdCh0YWdOYW1lKSA/IHRhZ05hbWUubWF0Y2goL1xcZCsvKVswXSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IGxhbmdfdG9vbGJhclsndGFnXycgKyAoaCA/ICdoJyA6IHRhZ05hbWUpXSArIGg7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSAnJztcclxuICAgICAgICAgICAgICAgIGF0dHJzID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0YWdOYW1lID0gZm9ybWF0LnRhZy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZCA9IGZvcm1hdC5jb21tYW5kO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IGZvcm1hdC5uYW1lIHx8IHRhZ05hbWU7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBmb3JtYXQuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICBhdHRycyA9IGNsYXNzTmFtZSA/ICcgY2xhc3M9XCInICsgY2xhc3NOYW1lICsgJ1wiJyA6ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsaXN0ICs9ICc8bGk+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdFwiIGRhdGEtY29tbWFuZD1cIicgKyBjb21tYW5kICsgJ1wiIGRhdGEtdmFsdWU9XCInICsgdGFnTmFtZSArICdcIiBkYXRhLWNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIiB0aXRsZT1cIicgKyBuYW1lICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbmFtZSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPCcgKyB0YWdOYW1lICsgYXR0cnMgKyAnPicgKyBuYW1lICsgJzwvJyArIHRhZ05hbWUgKyAnPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdCArPSAnPC91bD48L2Rpdj4nO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxyXG4gICAgICovXHJcbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IGZvcm1hdFRpdGxlID0gdGhpcy5sYW5nLnRvb2xiYXIuZm9ybWF0cztcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmNvbnRleHQuZm9ybWF0QmxvY2sudGFyZ2V0VGV4dDtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQodGFyZ2V0LCBmb3JtYXRUaXRsZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnV0aWwuaXNGb3JtYXRFbGVtZW50KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdENvbnRleHQgPSB0aGlzLmNvbnRleHQuZm9ybWF0QmxvY2s7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdExpc3QgPSBmb3JtYXRDb250ZXh0Ll9mb3JtYXRMaXN0O1xyXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gKGVsZW1lbnQuY2xhc3NOYW1lLm1hdGNoKC8oXFxzfF4pX19zZV9fZm9ybWF0X19bXlxcc10rLykgfHwgWycnXSlbMF0udHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZvcm1hdExpc3QubGVuZ3RoLCBmOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGYgPSBmb3JtYXRMaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSBmLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpICYmIGNsYXNzTmFtZSA9PT0gZi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2xhc3MnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFRpdGxlID0gZi50aXRsZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dCh0YXJnZXQsIGZvcm1hdFRpdGxlKTtcclxuICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIG5vZGVOYW1lKTtcclxuICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnZGF0YS1jbGFzcycsIGNsYXNzTmFtZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHN1Ym1lbnVcclxuICAgICAqL1xyXG4gICAgb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBmb3JtYXRDb250ZXh0ID0gdGhpcy5jb250ZXh0LmZvcm1hdEJsb2NrO1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdExpc3QgPSBmb3JtYXRDb250ZXh0Ll9mb3JtYXRMaXN0O1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGZvcm1hdENvbnRleHQudGFyZ2V0VGV4dDtcclxuICAgICAgICBjb25zdCBjdXJyZW50Rm9ybWF0ID0gKHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCAnJykgKyAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jbGFzcycpIHx8ICcnKTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRGb3JtYXQgIT09IGZvcm1hdENvbnRleHQuY3VycmVudEZvcm1hdCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZm9ybWF0TGlzdC5sZW5ndGgsIGY7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZiA9IGZvcm1hdExpc3RbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEZvcm1hdCA9PT0gZi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSArIGYuZ2V0QXR0cmlidXRlKCdkYXRhLWNsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoZiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MoZiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3JtYXRDb250ZXh0LmN1cnJlbnRGb3JtYXQgPSBjdXJyZW50Rm9ybWF0O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcGlja1VwOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgbGV0IGNvbW1hbmQgPSBudWxsLCB2YWx1ZSA9IG51bGwsIHRhZyA9IG51bGwsIGNsYXNzTmFtZSA9ICcnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdoaWxlICghY29tbWFuZCAmJiAhL1VML2kudGVzdCh0YXJnZXQudGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTtcclxuICAgICAgICAgICAgY2xhc3NOYW1lID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jbGFzcycpO1xyXG4gICAgICAgICAgICBpZiAoY29tbWFuZCkge1xyXG4gICAgICAgICAgICAgICAgdGFnID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghY29tbWFuZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBibG9ja3F1b3RlXHJcbiAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdyYW5nZScpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2VFbGVtZW50ID0gdGFnLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZnJlZSwgcmVwbGFjZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZEZvcm1zdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEZvcm1zdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VfYWRkTGluZShyYW5nZSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEZvcm1zdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZvcm1zdHMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IHJhbmdlLmVuZE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHV0aWwgPSB0aGlzLnV0aWw7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IHNlbGVjdGVkRm9ybXN0c1swXTtcclxuICAgICAgICAgICAgbGV0IGxhc3QgPSBzZWxlY3RlZEZvcm1zdHNbc2VsZWN0ZWRGb3Jtc3RzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBmaXJzdCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RQYXRoID0gdXRpbC5nZXROb2RlUGF0aChyYW5nZS5lbmRDb250YWluZXIsIGxhc3QsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIHNlbGVjdGVkIGxpc3RcclxuICAgICAgICAgICAgY29uc3Qgcmxpc3QgPSB0aGlzLmRldGFjaExpc3Qoc2VsZWN0ZWRGb3Jtc3RzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChybGlzdC5zYykgZmlyc3QgPSBybGlzdC5zYztcclxuICAgICAgICAgICAgaWYgKHJsaXN0LmVjKSBsYXN0ID0gcmxpc3QuZWM7XHJcblxyXG4gICAgICAgICAgICAvLyBjaGFuZ2UgZm9ybWF0IHRhZ1xyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKHV0aWwuZ2V0Tm9kZUZyb21QYXRoKGZpcnN0UGF0aCwgZmlyc3QpLCBzdGFydE9mZnNldCwgdXRpbC5nZXROb2RlRnJvbVBhdGgobGFzdFBhdGgsIGxhc3QpLCBlbmRPZmZzZXQpO1xyXG4gICAgICAgICAgICBjb25zdCBtb2RpZmllZEZvcm1zdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZyZWUgZm9ybWF0XHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kID09PSAnZnJlZScpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlbiA9IG1vZGlmaWVkRm9ybXN0cy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudE5vZGUgPSBtb2RpZmllZEZvcm1zdHNbbGVuXS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZyZWVFbGVtZW50ID0gdGFnLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb2N1c0VsZW1lbnQgPSBmcmVlRWxlbWVudDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGxlbiwgZiwgaHRtbCwgYmVmb3JlLCBuZXh0LCBpbm5lciwgaXNDb21wLCBmaXJzdCA9IHRydWU7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IG1vZGlmaWVkRm9ybXN0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gKCFtb2RpZmllZEZvcm1zdHNbaSArIDFdID8gbnVsbCA6IG1vZGlmaWVkRm9ybXN0c1tpICsgMV0ucGFyZW50Tm9kZSkpIGNvbnRpbnVlO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wID0gdXRpbC5pc0NvbXBvbmVudChmKTtcclxuICAgICAgICAgICAgICAgICAgICBodG1sID0gaXNDb21wID8gJycgOiBmLmlubmVySFRNTC5yZXBsYWNlKC8oPyE+KVxccysoPz08KXxcXG4vZywgJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoZiwgZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQucGFyZW50Tm9kZSA9PT0gcGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlICE9PSBmLnBhcmVudE5vZGUgfHwgaXNDb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmcmVlRWxlbWVudCwgcGFyZW50Tm9kZS5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZnJlZUVsZW1lbnQsIGJlZm9yZSA/IGJlZm9yZS5uZXh0U2libGluZyA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGYucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGZyZWVFbGVtZW50Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBmcmVlRWxlbWVudC5ub2RlTmFtZSA9PT0gbmV4dC5ub2RlTmFtZSAmJiB1dGlsLmlzU2FtZUF0dHJpYnV0ZXMoZnJlZUVsZW1lbnQsIG5leHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVlRWxlbWVudC5pbm5lckhUTUwgKz0gJzxCUj4nICsgbmV4dC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0obmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVFbGVtZW50ID0gdGFnLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBpbm5lciA9IGZyZWVFbGVtZW50LmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICBmcmVlRWxlbWVudC5pbm5lckhUTUwgPSAoKGZpcnN0IHx8ICFodG1sIHx8ICFpbm5lciB8fCAvPGJyPiQvaS50ZXN0KGh0bWwpKSA/IGh0bWwgOiBodG1sICsgJzxCUj4nKSArIGlubmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShmcmVlRWxlbWVudCwgZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBmLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBmcmVlRWxlbWVudC5ub2RlTmFtZSA9PT0gbmV4dC5ub2RlTmFtZSAmJiB1dGlsLmlzU2FtZUF0dHJpYnV0ZXMoZnJlZUVsZW1lbnQsIG5leHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVlRWxlbWVudC5pbm5lckhUTUwgKz0gJzxCUj4nICsgbmV4dC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0obmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBmcmVlRWxlbWVudC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICYmIGZyZWVFbGVtZW50Lm5vZGVOYW1lID09PSBwcmV2Lm5vZGVOYW1lICYmIHV0aWwuaXNTYW1lQXR0cmlidXRlcyhmcmVlRWxlbWVudCwgcHJldikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYuaW5uZXJIVE1MICs9ICc8QlI+JyArIGZyZWVFbGVtZW50LmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShmcmVlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNDb21wKSB1dGlsLnJlbW92ZUl0ZW0oZik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhaHRtbCkgZmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShmb2N1c0VsZW1lbnQsIDAsIGZvY3VzRWxlbWVudCwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVwbGFjZSBmb3JtYXRcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbW9kaWZpZWRGb3Jtc3RzLmxlbmd0aCwgbm9kZSwgbmV3Rm9ybWF0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbW9kaWZpZWRGb3Jtc3RzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgobm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB2YWx1ZS50b0xvd2VyQ2FzZSgpIHx8IChub2RlLmNsYXNzTmFtZS5tYXRjaCgvKFxcc3xeKV9fc2VfX2Zvcm1hdF9fW15cXHNdKy8pIHx8IFsnJ10pWzBdLnRyaW0oKSAhPT0gY2xhc3NOYW1lKSAmJiAhdXRpbC5pc0NvbXBvbmVudChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGb3JtYXQgPSB0YWcuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5Rm9ybWF0QXR0cmlidXRlcyhuZXdGb3JtYXQsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGb3JtYXQuaW5uZXJIVE1MID0gbm9kZS5pbm5lckhUTUw7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdGb3JtYXQsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBmaXJzdCA9IG5ld0Zvcm1hdCB8fCBub2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBsZW4gLSAxKSBsYXN0ID0gbmV3Rm9ybWF0IHx8IG5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Rm9ybWF0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZSh1dGlsLmdldE5vZGVGcm9tUGF0aChmaXJzdFBhdGgsIGZpcnN0KSwgc3RhcnRPZmZzZXQsIHV0aWwuZ2V0Tm9kZUZyb21QYXRoKGxhc3RQYXRoLCBsYXN0KSwgZW5kT2Zmc2V0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxOTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnbGluZUhlaWdodCcsXHJcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0LmxpbmVIZWlnaHQgPSB7XHJcbiAgICAgICAgICAgIF9zaXplTGlzdDogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVudFNpemU6IC0xXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XHJcbiAgICAgICAgbGV0IGxpc3RVbCA9IGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0VWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5saW5lSGVpZ2h0Ll9zaXplTGlzdCA9IGxpc3RVbC5xdWVyeVNlbGVjdG9yQWxsKCdsaSBidXR0b24nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbCwgbGlzdFVsID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXInO1xyXG5cclxuICAgICAgICBjb25zdCBzaXplTGlzdCA9ICFvcHRpb24ubGluZUhlaWdodHMgPyBbXHJcbiAgICAgICAgICAgIHt0ZXh0OiAnMScsIHZhbHVlOiAxfSxcclxuICAgICAgICAgICAge3RleHQ6ICcxLjE1JywgdmFsdWU6IDEuMTV9LFxyXG4gICAgICAgICAgICB7dGV4dDogJzEuNScsIHZhbHVlOiAxLjV9LFxyXG4gICAgICAgICAgICB7dGV4dDogJzInLCB2YWx1ZTogMn1cclxuICAgICAgICBdIDogb3B0aW9uLmxpbmVIZWlnaHRzO1xyXG5cclxuICAgICAgICBsZXQgbGlzdCA9ICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1pbm5lclwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzx1bCBjbGFzcz1cInNlLWxpc3QtYmFzaWNcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZGVmYXVsdF92YWx1ZSBzZS1idG4tbGlzdFwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci5kZWZhdWx0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy50b29sYmFyLmRlZmF1bHQgKyAnXCI+KCcgKyBsYW5nLnRvb2xiYXIuZGVmYXVsdCArICcpPC9idXR0b24+PC9saT4nO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzaXplTGlzdC5sZW5ndGgsIHNpemU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBzaXplID0gc2l6ZUxpc3RbaV07XHJcbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0XCIgZGF0YS12YWx1ZT1cIicgKyBzaXplLnZhbHVlICsgJ1wiIHRpdGxlPVwiJyArIHNpemUudGV4dCArICdcIiBhcmlhLWxhYmVsPVwiJyArIHNpemUudGV4dCArICdcIj4nICsgc2l6ZS50ZXh0ICsgJzwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdCArPSAnPC91bD48L2Rpdj4nO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHRDb250ZXh0ID0gdGhpcy5jb250ZXh0LmxpbmVIZWlnaHQ7XHJcbiAgICAgICAgY29uc3Qgc2l6ZUxpc3QgPSBsaW5lSGVpZ2h0Q29udGV4dC5fc2l6ZUxpc3Q7XHJcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gdGhpcy51dGlsLmdldEZvcm1hdEVsZW1lbnQodGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCkpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTaXplID0gIWZvcm1hdCA/ICcnIDogZm9ybWF0LnN0eWxlLmxpbmVIZWlnaHQgKyAnJztcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRTaXplICE9PSBsaW5lSGVpZ2h0Q29udGV4dC5jdXJyZW50U2l6ZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2l6ZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2l6ZSA9PT0gc2l6ZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3Moc2l6ZUxpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHNpemVMaXN0W2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxpbmVIZWlnaHRDb250ZXh0LmN1cnJlbnRTaXplID0gY3VycmVudFNpemU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwaWNrdXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKCEvXkJVVFRPTiQvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJyc7XHJcbiAgICAgICAgY29uc3QgZm9ybWF0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZm9ybWF0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb3JtYXRzW2ldLnN0eWxlLmxpbmVIZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xyXG5cclxuICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ3BhcmFncmFwaFN0eWxlJyxcclxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcclxuICAgIGFkZDogZnVuY3Rpb24gKGNvcmUsIHRhcmdldEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQucGFyYWdyYXBoU3R5bGUgPSB7XHJcbiAgICAgICAgICAgIF9jbGFzc0xpc3Q6IG51bGxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2tVcC5iaW5kKGNvcmUpKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5wYXJhZ3JhcGhTdHlsZS5fY2xhc3NMaXN0ID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yQWxsKCdsaSBidXR0b24nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXIgc2UtbGlzdC1mb3JtYXQnO1xyXG5cclxuICAgICAgICBjb25zdCBtZW51TGFuZyA9IGNvcmUubGFuZy5tZW51O1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRMaXN0ID0ge1xyXG4gICAgICAgICAgICBzcGFjZWQ6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG1lbnVMYW5nLnNwYWNlZCxcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnX19zZV9fcC1zcGFjZWQnLFxyXG4gICAgICAgICAgICAgICAgX2NsYXNzOiAnJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib3JkZXJlZDoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbWVudUxhbmcuYm9yZGVyZWQsXHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ19fc2VfX3AtYm9yZGVyZWQnLFxyXG4gICAgICAgICAgICAgICAgX2NsYXNzOiAnJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBuZW9uOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBtZW51TGFuZy5uZW9uLFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdfX3NlX19wLW5lb24nLFxyXG4gICAgICAgICAgICAgICAgX2NsYXNzOiAnJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBwYXJhZ3JhcGhTdHlsZXMgPSAhb3B0aW9uLnBhcmFncmFwaFN0eWxlcyB8fCBvcHRpb24ucGFyYWdyYXBoU3R5bGVzLmxlbmd0aCA9PT0gMCA/IFsnc3BhY2VkJywgJ2JvcmRlcmVkJywgJ25lb24nXSA6IG9wdGlvbi5wYXJhZ3JhcGhTdHlsZXM7XHJcblxyXG4gICAgICAgIGxldCBsaXN0ID0gJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+PHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPic7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhcmFncmFwaFN0eWxlcy5sZW5ndGgsIHAsIG5hbWUsIGF0dHJzLCBfY2xhc3M7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBwID0gcGFyYWdyYXBoU3R5bGVzW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFN0eWxlID0gZGVmYXVsdExpc3RbcC50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdFN0eWxlKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIHAgPSBkZWZhdWx0U3R5bGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5hbWUgPSBwLm5hbWU7XHJcbiAgICAgICAgICAgIGF0dHJzID0gcC5jbGFzcyA/ICcgY2xhc3M9XCInICsgcC5jbGFzcyArICdcIicgOiAnJztcclxuICAgICAgICAgICAgX2NsYXNzID0gcC5fY2xhc3M7XHJcblxyXG4gICAgICAgICAgICBsaXN0ICs9ICc8bGk+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCcgKyAoX2NsYXNzID8gJyAnICsgX2NsYXNzOiAnJykgKyAnXCIgZGF0YS12YWx1ZT1cIicgKyBwLmNsYXNzICsgJ1wiIHRpdGxlPVwiJyArIG5hbWUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBuYW1lICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2JyArIGF0dHJzICsgJz4nICsgbmFtZSArICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj48L2xpPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QgKz0gJzwvdWw+PC9kaXY+JztcclxuXHJcbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSBsaXN0O1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdERpdjtcclxuICAgIH0sXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQE92ZXJyaWRlIHN1Ym1lbnVcclxuICAgICAqL1xyXG4gICAgb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBwYXJhZ3JhcGhDb250ZXh0ID0gdGhpcy5jb250ZXh0LnBhcmFncmFwaFN0eWxlO1xyXG4gICAgICAgIGNvbnN0IHBhcmFncmFwaExpc3QgPSBwYXJhZ3JhcGhDb250ZXh0Ll9jbGFzc0xpc3Q7XHJcbiAgICAgICAgY29uc3QgY3VycmVudEZvcm1hdCA9IHRoaXMudXRpbC5nZXRGb3JtYXRFbGVtZW50KHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhcmFncmFwaExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudXRpbC5oYXNDbGFzcyhjdXJyZW50Rm9ybWF0LCBwYXJhZ3JhcGhMaXN0W2ldLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHBhcmFncmFwaExpc3RbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhwYXJhZ3JhcGhMaXN0W2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2tVcDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgd2hpbGUgKCEvXlVMJC9pLnRlc3QodGFyZ2V0LnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIGJyZWFrO1xyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IHNlbGVjdGVkRm9ybXN0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpO1xyXG4gICAgICAgIGlmIChzZWxlY3RlZEZvcm1zdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UmFuZ2VfYWRkTGluZSh0aGlzLmdldFJhbmdlKCksIG51bGwpO1xyXG4gICAgICAgICAgICBzZWxlY3RlZEZvcm1zdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMoKTtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybXN0cy5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNoYW5nZSBmb3JtYXQgY2xhc3NcclxuICAgICAgICBjb25zdCB0b2dnbGVDbGFzcyA9IHRoaXMudXRpbC5oYXNDbGFzcyh0YXJnZXQsICdhY3RpdmUnKSA/IHRoaXMudXRpbC5yZW1vdmVDbGFzcy5iaW5kKHRoaXMudXRpbCkgOiB0aGlzLnV0aWwuYWRkQ2xhc3MuYmluZCh0aGlzLnV0aWwpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1zdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZWN0ZWRGb3Jtc3RzW2ldLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuXHJcbiAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgIH1cclxufTtcclxuIiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICd0ZXh0U3R5bGUnLFxyXG4gICAgZGlzcGxheTogJ3N1Ym1lbnUnLFxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC50ZXh0U3R5bGUgPSB7XHJcbiAgICAgICAgICAgIF9zdHlsZUxpc3Q6IG51bGxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cclxuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcclxuICAgICAgICBsZXQgbGlzdFVsID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yKCd1bCcpO1xyXG5cclxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIGxpc3RVbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xyXG5cclxuICAgICAgICBjb250ZXh0LnRleHRTdHlsZS5fc3R5bGVMaXN0ID0gbGlzdERpdi5xdWVyeVNlbGVjdG9yQWxsKCdsaSBidXR0b24nKTtcclxuXHJcbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cclxuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XHJcblxyXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cclxuICAgICAgICBsaXN0RGl2ID0gbnVsbCwgbGlzdFVsID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXIgc2UtbGlzdC1mb3JtYXQnO1xyXG5cclxuICAgICAgICBjb25zdCBkZWZhdWx0TGlzdCA9IHtcclxuICAgICAgICAgICAgY29kZToge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogY29yZS5sYW5nLm1lbnUuY29kZSxcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnX19zZV9fdC1jb2RlJyxcclxuICAgICAgICAgICAgICAgIHRhZzogJ2NvZGUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0cmFuc2x1Y2VudDoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogY29yZS5sYW5nLm1lbnUudHJhbnNsdWNlbnQsXHJcbiAgICAgICAgICAgICAgICBzdHlsZTogJ29wYWNpdHk6IDAuNTsnLFxyXG4gICAgICAgICAgICAgICAgdGFnOiAnc3BhbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNoYWRvdzoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogY29yZS5sYW5nLm1lbnUuc2hhZG93LFxyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdfX3NlX190LXNoYWRvdycsXHJcbiAgICAgICAgICAgICAgICB0YWc6ICdzcGFuJyxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc3R5bGVMaXN0ID0gIW9wdGlvbi50ZXh0U3R5bGVzID8gY29yZS5fdy5PYmplY3Qua2V5cyhkZWZhdWx0TGlzdCkgOiBvcHRpb24udGV4dFN0eWxlcztcclxuXHJcbiAgICAgICAgbGV0IGxpc3QgPSAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj48dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3R5bGVMaXN0Lmxlbmd0aCwgdCwgdGFnLCBuYW1lLCBhdHRycywgY29tbWFuZCwgdmFsdWUsIF9jbGFzczsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHQgPSBzdHlsZUxpc3RbaV07XHJcbiAgICAgICAgICAgIGF0dHJzID0gJycsIHZhbHVlID0gJycsIGNvbW1hbmQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRTdHlsZSA9IGRlZmF1bHRMaXN0W3QudG9Mb3dlckNhc2UoKV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlZmF1bHRTdHlsZSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB0ID0gZGVmYXVsdFN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuYW1lID0gdC5uYW1lO1xyXG4gICAgICAgICAgICB0YWcgPSB0LnRhZyB8fCAnc3Bhbic7XHJcbiAgICAgICAgICAgIF9jbGFzcyA9IHQuX2NsYXNzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHQuc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJzICs9ICcgc3R5bGU9XCInICsgdC5zdHlsZSArICdcIic7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSB0LnN0eWxlLnJlcGxhY2UoLzpbXjtdKyg7fCQpXFxzKi9nLCAnLCcpO1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZC5wdXNoKCdzdHlsZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LmNsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRycyArPSAnIGNsYXNzPVwiJyArIHQuY2xhc3MgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gJy4nICsgdC5jbGFzcy50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnLC4nKTtcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQucHVzaCgnY2xhc3MnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8sJC8sICcnKTtcclxuXHJcbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0JyArIChfY2xhc3MgPyAnICcgKyBfY2xhc3M6ICcnKSArICdcIiBkYXRhLWNvbW1hbmQ9XCInICsgdGFnICsgJ1wiIGRhdGEtdmFsdWU9XCInICsgdmFsdWUgKyAnXCIgdGl0bGU9XCInICsgbmFtZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIG5hbWUgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnICsgdGFnICsgYXR0cnMgKyAnPicgKyBuYW1lICsgICc8LycgKyB0YWcgKyAnPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdCArPSAnPC91bD48L2Rpdj4nO1xyXG5cclxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xyXG4gICAgfSxcclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHV0aWwgPSB0aGlzLnV0aWw7XHJcbiAgICAgICAgY29uc3QgdGV4dFN0eWxlQ29udGV4dCA9IHRoaXMuY29udGV4dC50ZXh0U3R5bGU7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVCdXR0b25MaXN0ID0gdGV4dFN0eWxlQ29udGV4dC5fc3R5bGVMaXN0O1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbk5vZGUgPSB0aGlzLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlQnV0dG9uTGlzdC5sZW5ndGgsIGJ0biwgZGF0YSwgYWN0aXZlOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgYnRuID0gc3R5bGVCdXR0b25MaXN0W2ldO1xyXG4gICAgICAgICAgICBkYXRhID0gYnRuLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCB2ID0gMCwgbm9kZSwgdmFsdWU7IHYgPCBkYXRhLmxlbmd0aDsgdisrKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gc2VsZWN0aW9uTm9kZTtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobm9kZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQobm9kZSkgJiYgIXV0aWwuaXNDb21wb25lbnQobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBidG4uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0YVt2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eXFwuLy50ZXN0KHZhbHVlKSA/IHV0aWwuaGFzQ2xhc3Mobm9kZSwgdmFsdWUucmVwbGFjZSgvXlxcLi8sICcnKSkgOiAhIW5vZGUuc3R5bGVbdmFsdWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSkgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFjdGl2ZSA/IHV0aWwuYWRkQ2xhc3MoYnRuLCAnYWN0aXZlJykgOiB1dGlsLnJlbW92ZUNsYXNzKGJ0biwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LFxyXG5cclxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGxldCBjb21tYW5kID0gbnVsbCwgdGFnID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICB3aGlsZSAoIWNvbW1hbmQgJiYgIS9VTC9pLnRlc3QodGFyZ2V0LnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgaWYgKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIHRhZyA9IHRhcmdldC5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2tTdHlsZXMgPSB0YWcuc3R5bGUuY3NzVGV4dC5yZXBsYWNlKC86LisoO3wkKS9nLCAnLCcpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgY2hlY2tTdHlsZXMucG9wKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSB0YWcuY2xhc3NMaXN0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjbGFzc2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNoZWNrU3R5bGVzLnB1c2goJy4nICsgY2xhc3Nlc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuZXdOb2RlID0gdGhpcy51dGlsLmhhc0NsYXNzKHRhcmdldCwgJ2FjdGl2ZScpID8gbnVsbCA6IHRhZy5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZU5vZGVzID0gbmV3Tm9kZSA/IG51bGwgOiBbdGFnLm5vZGVOYW1lXTtcclxuICAgICAgICB0aGlzLm5vZGVDaGFuZ2UobmV3Tm9kZSwgY2hlY2tTdHlsZXMsIHJlbW92ZU5vZGVzLCB0cnVlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgZmlsZUJyb3dzZXIgZnJvbSAnLi4vbW9kdWxlcy9maWxlQnJvd3Nlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOiAnaW1hZ2VHYWxsZXJ5JyxcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdCBcclxuICAgICAqL1xyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgIGNvcmUuYWRkTW9kdWxlKFtmaWxlQnJvd3Nlcl0pO1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgIGNvbnRleHQuaW1hZ2VHYWxsZXJ5ID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogY29yZS5sYW5nLnRvb2xiYXIuaW1hZ2VHYWxsZXJ5LCAvLyBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVCcm93c2VyIC0gRmlsZSBicm93c2VyIHdpbmRvdyB0aXRsZS5cclxuICAgICAgICAgICAgdXJsOiBjb3JlLm9wdGlvbnMuaW1hZ2VHYWxsZXJ5VXJsLCAvLyBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVCcm93c2VyIC0gRmlsZSBzZXJ2ZXIgdXJsLlxyXG4gICAgICAgICAgICBoZWFkZXI6IGNvcmUub3B0aW9ucy5pbWFnZUdhbGxlcnlIZWFkZXIsIC8vIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZUJyb3dzZXIgLSBGaWxlIHNlcnZlciBodHRwIGhlYWRlci5cclxuICAgICAgICAgICAgbGlzdENsYXNzOiAnc2UtaW1hZ2UtbGlzdCcsIC8vIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZUJyb3dzZXIgLSBDbGFzcyBuYW1lIG9mIGxpc3QgZGl2LlxyXG4gICAgICAgICAgICBpdGVtVGVtcGxhdGVIYW5kbGVyOiB0aGlzLmRyYXdJdGVtcywgLy8gQFJlcXVpcmVkIEBPdmVycmlkZSBmaWxlQnJvd3NlciAtIEZ1bmN0aW9uIHRoYXQgZGVmaW5lcyB0aGUgSFRNTCBvZiBhbiBmaWxlIGl0ZW0uXHJcbiAgICAgICAgICAgIHNlbGVjdG9ySGFuZGxlcjogdGhpcy5zZXRJbWFnZS5iaW5kKGNvcmUpLCAvLyBAUmVxdWlyZWQgQE92ZXJyaWRlIGZpbGVCcm93c2VyIC0gRnVuY3Rpb24gdGhhdCBhY3Rpb24gd2hlbiBpdGVtIGNsaWNrLlxyXG4gICAgICAgICAgICBjb2x1bW5TaXplOiA0IC8vIEBPcHRpb24gQE92ZXJyaWRlIGZpbGVCcm93c2VyIC0gTnVtYmVyIG9mIFwiZGl2LnNlLWZpbGUtaXRlbS1jb2x1bW5cIiB0byBiZSBjcmVhdGVkIChkZWZhdWx0OiA0KVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEBSZXF1aXJlZCBAT3ZlcnJpZGUgZmlsZUJyb3dzZXJcclxuICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGEgZmlsZSBicm93c2VyLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSBzZWxlY3RvckhhbmRsZXIgV2hlbiB0aGUgZnVuY3Rpb24gY29tZXMgYXMgYW4gYXJndW1lbnQgdmFsdWUsIGl0IHN1YnN0aXR1dGVzIFwiY29udGV4dC5zZWxlY3RvckhhbmRsZXJcIi5cclxuICAgICAqL1xyXG4gICAgb3BlbjogZnVuY3Rpb24gKHNlbGVjdG9ySGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5maWxlQnJvd3Nlci5vcGVuLmNhbGwodGhpcywgJ2ltYWdlR2FsbGVyeScsIHNlbGVjdG9ySGFuZGxlcik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFJlcXVpcmVkIEBPdmVycmlkZSBmaWxlQnJvd3NlclxyXG4gICAgICogQGRlc2NyaXB0aW9uIERlZmluZSB0aGUgSFRNTCBvZiB0aGUgaXRlbSB0byBiZSBwdXQgaW4gXCJkaXYuc2UtZmlsZS1pdGVtLWNvbHVtblwiLlxyXG4gICAgICogRm9ybWF0OiBbXHJcbiAgICAgKiAgICAgIHsgc3JjOiBcImltYWdlIHNyY1wiLCBuYW1lOiBcIm5hbWUoQG9wdGlvbilcIiwgYWx0OiBcImltYWdlIGFsdChAb3B0aW9uKVwiLCB0YWc6IFwidGFnIG5hbWUoQG9wdGlvbilcIiB9XHJcbiAgICAgKiBdXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaXRlbSBJdGVtIG9mIHRoZSByZXNwb25zZSBkYXRhJ3MgYXJyYXlcclxuICAgICAqL1xyXG4gICAgZHJhd0l0ZW1zOiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGNvbnN0IHNyY05hbWUgPSBpdGVtLnNyYy5zcGxpdCgnLycpLnBvcCgpO1xyXG4gICAgICAgIHJldHVybiAgJzxkaXYgY2xhc3M9XCJzZS1maWxlLWl0ZW0taW1nXCI+PGltZyBzcmM9XCInICsgKGl0ZW0udGh1bWJuYWlsIHx8IGl0ZW0uc3JjKSArICdcIiBhbHQ9XCInICsgKGl0ZW0uYWx0IHx8IHNyY05hbWUpICsgJ1wiIGRhdGEtY29tbWFuZD1cInBpY2tcIiBkYXRhLXZhbHVlPVwiJyArIChpdGVtLnNyYyB8fCBpdGVtLnRodW1ibmFpbCkgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1maWxlLWltZy1uYW1lIHNlLWZpbGUtbmFtZS1iYWNrXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1maWxlLWltZy1uYW1lIF9fc2VfX2ltZ19uYW1lXCI+JyArIChpdGVtLm5hbWUgfHwgc3JjTmFtZSkgKyAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuICAgIH0sXHJcblxyXG4gICAgc2V0SW1hZ2U6IGZ1bmN0aW9uICh0YXJnZXQsIGZpbGVOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsUGx1Z2luKCdpbWFnZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHtuYW1lOiBmaWxlTmFtZSwgc2l6ZTogMH07XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5pbWFnZS5jcmVhdGVfaW1hZ2UuY2FsbCh0aGlzLCB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyksIG51bGwsIHRoaXMuY29udGV4dC5pbWFnZS5fb3JpZ2luX3csIHRoaXMuY29udGV4dC5pbWFnZS5fb3JpZ2luX2gsICdub25lJywgZmlsZSwgdGFyZ2V0LmFsdCk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpLCBudWxsKTtcclxuICAgIH1cclxufTsiLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDIwIEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAvLyBydGwgaWNvblxyXG4gICBydGw6IHtcclxuICAgICAgaXRhbGljOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMC41IDE1LjhcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxnPjxwYXRoIGQ9XCJNMC4zLDAuMWMwLjMsMCwwLjUsMCwwLjcsMGMxLDAuMSwxLjcsMC4xLDIuMiwwLjFINEw3LjIsMGwwLjIsMS4xSDdjLTAuNSwwLTEsMC4xLTEuNSwwLjN2MC40bDAuMywxLjlMNiw0LjRMNi4zLDYgbDAuMSwwLjRsMC4xLDAuNWMwLjEsMC4yLDAuMSwwLjQsMC4yLDAuN3MwLjEsMC42LDAuMiwwLjlMNyw5LjFsMC42LDIuOGwwLjMsMS40YzAuMSwwLjQsMC4yLDAuNywwLjQsMWMwLjQsMC4yLDAuOCwwLjMsMS4yLDAuNCBsMC44LDAuMmwwLjIsMC45bC0xLjEsMGMtMC45LTAuMS0xLjUtMC4xLTEuOC0wLjFoLTJjLTAuOSwwLjEtMS40LDAuMi0xLjUsMC4yYy0wLjEsMC0wLjIsMC0wLjMsMEgzLjRjLTAuMSwwLTAuMiwwLTAuMiwwIGwtMC4xLTAuNGMwLTAuMi0wLjEtMC40LTAuMS0wLjZsMC43LTAuMWMwLjQsMCwwLjgtMC4xLDEuMi0wLjJjMC0wLjEsMC0wLjIsMC0wLjNsLTAuMS0wLjVsLTAuNC0yLjRMNCw5LjZMMy40LDYuNCBDMy4yLDUuNywzLDQuNywyLjcsMy4zYzAtMC4zLTAuMS0wLjUtMC4xLTAuOEMyLjUsMi4xLDIuNCwxLjksMi4zLDEuNkMyLDEuNCwxLjYsMS4zLDEuMywxLjJDMC45LDEuMiwwLjUsMS4xLDAuMiwwLjlMMCwwLjRMMCwwIEwwLjMsMC4xTDAuMywwLjF6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICAgICBpbmRlbnQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjcgMTIuNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PGc+PHBhdGggZD1cIk0xNS41LDEwLjFMMTUuNSwxMC4xYzAuMSwwLDAuMywwLjEsMC4zLDAuM3YxLjdjMCwwLjEsMCwwLjEtMC4xLDAuMmMtMC4xLDAuMS0wLjEsMC4xLTAuMiwwLjFsLTE1LjIsMCBjLTAuMSwwLTAuMSwwLTAuMi0wLjFDMCwxMi4yLDAsMTIuMiwwLDEyLjFsMC0xLjdjMC0wLjEsMC0wLjEsMC4xLTAuMmMwLjEtMC4xLDAuMS0wLjEsMC4yLTAuMUMwLjMsMTAuMSwxNS41LDEwLjEsMTUuNSwxMC4xeiBNOS44LDYuN2MwLjEsMCwwLjEsMCwwLjIsMC4xQzEwLjEsNi45LDEwLjEsNywxMC4xLDd2MS43YzAsMC4xLDAsMC4yLTAuMSwwLjJDMTAsOSw5LjksOSw5LjgsOUwwLjMsOUMwLjIsOSwwLjEsOSwwLjEsOC45IEMwLDguOSwwLDguOCwwLDguN1Y3QzAsNywwLDYuOSwwLjEsNi44YzAuMS0wLjEsMC4xLTAuMSwwLjItMC4xQzAuMyw2LjcsOS44LDYuNyw5LjgsNi43eiBNMC4zLDMuNGg5LjZoMGMwLjEsMCwwLjMsMC4xLDAuMywwLjMgdjEuN3YwYzAsMC4xLTAuMSwwLjMtMC4zLDAuM0gwLjNjLTAuMSwwLTAuMSwwLTAuMi0wLjFDMCw1LjUsMCw1LjQsMCw1LjNWMy42YzAtMC4xLDAtMC4xLDAuMS0wLjJDMC4xLDMuNCwwLjIsMy40LDAuMywzLjQgTDAuMywzLjR6IE0wLjMsMGwxNS4yLDBjMC4xLDAsMC4xLDAsMC4yLDAuMWMwLjEsMC4xLDAuMSwwLjEsMC4xLDAuMlYyYzAsMC4xLDAsMC4yLTAuMSwwLjJjLTAuMSwwLjEtMC4xLDAuMS0wLjIsMC4xSDAuMyBjLTAuMSwwLTAuMSwwLTAuMi0wLjFDMCwyLjEsMCwyLDAsMmwwLTEuN2MwLTAuMSwwLTAuMSwwLjEtMC4yQzAuMSwwLDAuMiwwLDAuMywwelwiLz48L2c+PHBhdGggZD1cIk0xMy4xLDMuNUwxNS43LDZjMC4xLDAuMSwwLjEsMC4zLDAsMC40bC0yLjUsMi41QzEzLjEsOSwxMyw5LDEyLjksOWMtMC4xLDAtMC4xLDAtMC4yLTAuMWMtMC4xLTAuMS0wLjEtMC4xLTAuMS0wLjJWMy43IGMwLTAuMSwwLTAuMiwwLjEtMC4yYzAuMS0wLjEsMC4xLTAuMSwwLjItMC4xQzEzLDMuNCwxMy4xLDMuNCwxMy4xLDMuNXpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgICAgIG91dGRlbnQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjcgMTIuNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PGc+PHBhdGggZD1cIk0xNS41LDEwLjFMMTUuNSwxMC4xYzAuMSwwLDAuMywwLjEsMC4zLDAuM3YxLjdjMCwwLjEsMCwwLjEtMC4xLDAuMmMtMC4xLDAuMS0wLjEsMC4xLTAuMiwwLjFsLTE1LjIsMCBjLTAuMSwwLTAuMSwwLTAuMi0wLjFDMCwxMi4yLDAsMTIuMiwwLDEyLjFsMC0xLjdjMC0wLjEsMC0wLjEsMC4xLTAuMmMwLjEtMC4xLDAuMS0wLjEsMC4yLTAuMUMwLjMsMTAuMSwxNS41LDEwLjEsMTUuNSwxMC4xeiBNOS44LDYuN2MwLjEsMCwwLjEsMCwwLjIsMC4xQzEwLjEsNi45LDEwLjEsNywxMC4xLDd2MS43YzAsMC4xLDAsMC4yLTAuMSwwLjJDMTAsOSw5LjksOSw5LjgsOUwwLjMsOUMwLjIsOSwwLjEsOSwwLjEsOC45IEMwLDguOSwwLDguOCwwLDguN1Y3QzAsNywwLDYuOSwwLjEsNi44YzAuMS0wLjEsMC4xLTAuMSwwLjItMC4xQzAuMyw2LjcsOS44LDYuNyw5LjgsNi43eiBNMC4zLDMuNGg5LjZoMGMwLjEsMCwwLjMsMC4xLDAuMywwLjMgdjEuN3YwYzAsMC4xLTAuMSwwLjMtMC4zLDAuM0gwLjNjLTAuMSwwLTAuMSwwLTAuMi0wLjFDMCw1LjUsMCw1LjQsMCw1LjNWMy42YzAtMC4xLDAtMC4xLDAuMS0wLjJDMC4xLDMuNCwwLjIsMy40LDAuMywzLjQgTDAuMywzLjR6IE0wLjMsMGwxNS4yLDBjMC4xLDAsMC4xLDAsMC4yLDAuMWMwLjEsMC4xLDAuMSwwLjEsMC4xLDAuMlYyYzAsMC4xLDAsMC4yLTAuMSwwLjJjLTAuMSwwLjEtMC4xLDAuMS0wLjIsMC4xSDAuMyBjLTAuMSwwLTAuMSwwLTAuMi0wLjFDMCwyLjEsMCwyLDAsMmwwLTEuN2MwLTAuMSwwLTAuMSwwLjEtMC4yQzAuMSwwLDAuMiwwLDAuMywwelwiLz48L2c+PHBhdGggZD1cIk0xNS41LDMuNGMwLjEsMCwwLjEsMCwwLjIsMC4xYzAuMSwwLjEsMC4xLDAuMSwwLjEsMC4ydjUuMWMwLDAuMSwwLDAuMS0wLjEsMC4yQzE1LjYsOSwxNS41LDksMTUuNSw5IGMtMC4xLDAtMC4xLDAtMC4yLTAuMWwtMi41LTIuNWMtMC4xLTAuMS0wLjEtMC4zLDAtMC40bDIuNS0yLjVDMTUuMywzLjQsMTUuNCwzLjQsMTUuNSwzLjR6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICAgICBsaXN0X2J1bGxldHM6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjcgMTIuNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PHBhdGggZD1cIk0xMi40LDEwLjdjMCwwLjksMC44LDEuNywxLjcsMS43YzAuOSwwLDEuNy0wLjgsMS43LTEuN0MxNS43LDkuOCwxNSw5LDE0LjEsOWMtMC40LDAtMC45LDAuMi0xLjIsMC41IEMxMi41LDkuOCwxMi40LDEwLjIsMTIuNCwxMC43QzEyLjQsMTAuNywxMi40LDEwLjcsMTIuNCwxMC43eiBNMTIuNCw2LjJjMCwwLjksMC44LDEuNywxLjcsMS43YzAuNCwwLDAuOS0wLjIsMS4yLTAuNSBjMC4zLTAuMywwLjQtMC43LDAuNC0xLjFjMC0wLjktMC43LTEuNy0xLjYtMS43QzEzLjEsNC42LDEyLjQsNS4zLDEyLjQsNi4yQzEyLjQsNi4yLDEyLjQsNi4yLDEyLjQsNi4yeiBNMCw5Ljh2MS43IGMwLDAuMSwwLDAuMSwwLjEsMC4yYzAuMSwwLjEsMC4xLDAuMSwwLjIsMC4xbDEwLjcsMGMwLDAsMCwwLDAsMGMwLjEsMCwwLjMtMC4xLDAuMy0wLjNWOS44YzAtMC4xLDAtMC4xLTAuMS0wLjIgQzExLjEsOS42LDExLDkuNiwxMSw5LjZsLTEwLjcsMGMtMC4xLDAtMC4xLDAtMC4yLDAuMUMwLDkuNywwLDkuOCwwLDkuOEwwLDkuOHogTTEyLjksMi45YzAuMywwLjMsMC43LDAuNSwxLjIsMC41IGMwLjQsMCwwLjktMC4yLDEuMi0wLjVjMC43LTAuNywwLjctMS43LDAtMi40QzE0LjksMC4yLDE0LjUsMCwxNC4xLDBjLTAuNCwwLTAuOSwwLjItMS4yLDAuNWMtMC4zLDAuMy0wLjUsMC43LTAuNSwxLjIgQzEyLjQsMi4xLDEyLjUsMi42LDEyLjksMi45eiBNMCw1LjNWN2MwLDAuMSwwLDAuMSwwLjEsMC4yYzAuMSwwLjEsMC4xLDAuMSwwLjIsMC4xSDExYzAuMSwwLDAuMSwwLDAuMi0wLjEgYzAuMS0wLjEsMC4xLTAuMSwwLjEtMC4yVjUuM2MwLDAsMCwwLDAsMGMwLTAuMS0wLjEtMC4zLTAuMy0wLjNIMC4zYy0wLjEsMC0wLjEsMC0wLjIsMC4xQzAsNS4yLDAsNS4zLDAsNS4zTDAsNS4zeiBNMCwwLjh2MS43IGMwLDAuMSwwLDAuMSwwLjEsMC4yYzAuMSwwLjEsMC4xLDAuMSwwLjIsMC4xaDEwLjdjMC4xLDAsMC4xLDAsMC4yLTAuMWMwLDAsMC4xLTAuMSwwLjEtMC4yVjAuOGMwLTAuMSwwLTAuMS0wLjEtMC4yIGMwLTAuMS0wLjEtMC4xLTAuMi0wLjFIMC4zYy0wLjEsMC0wLjEsMC0wLjIsMC4xQzAsMC43LDAsMC44LDAsMC44TDAsMC44elwiLz48L2c+PC9zdmc+JyxcclxuICAgICAgbGlzdF9udW1iZXI6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjcgMTUuN1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PGc+PHBhdGggZD1cIk0wLDExLjVsMCwxLjdjMCwwLjEsMCwwLjEsMC4xLDAuMmMwLjEsMC4xLDAuMSwwLjEsMC4yLDAuMUgxMWMwLjEsMCwwLjIsMCwwLjItMC4xYzAuMS0wLjEsMC4xLTAuMSwwLjEtMC4ydi0xLjcgYzAtMC4xLDAtMC4xLTAuMS0wLjJjLTAuMS0wLjEtMC4xLTAuMS0wLjItMC4xSDAuM2MtMC4xLDAtMC4yLDAtMC4yLDAuMUMwLDExLjQsMCwxMS40LDAsMTEuNUwwLDExLjV6IE0wLDguN2MwLDAuMSwwLDAuMSwwLjEsMC4yIEMwLjEsOC45LDAuMiw5LDAuMyw5SDExYzAuMSwwLDAuMiwwLDAuMi0wLjFjMC4xLTAuMSwwLjEtMC4xLDAuMS0wLjJWN2MwLTAuMSwwLTAuMS0wLjEtMC4yYy0wLjEtMC4xLTAuMS0wLjEtMC4yLTAuMWwtMTAuNywwIGMtMC4xLDAtMC4yLDAtMC4yLDAuMUMwLDYuOCwwLDYuOSwwLDdDMCw3LDAsOC43LDAsOC43eiBNMCwyLjV2MS43YzAsMC4xLDAsMC4xLDAuMSwwLjJjMCwwLDAuMSwwLjEsMC4yLDAuMWwxMC43LDAgYzAuMSwwLDAuMiwwLDAuMi0wLjFjMC4xLTAuMSwwLjEtMC4xLDAuMS0wLjJWMi40YzAtMC4xLDAtMC4xLTAuMS0wLjJjLTAuMSwwLTAuMSwwLTAuMiwwSDAuM2MtMC4xLDAtMC4xLDAtMC4yLDAgQzAsMi4zLDAsMi40LDAsMi41TDAsMi41elwiLz48L2c+PHBhdGggZD1cIk0xNS42LDE0LjJjMC0wLjMtMC4xLTAuNi0wLjMtMC44Yy0wLjItMC4yLTAuNC0wLjQtMC43LTAuNGwwLjktMXYtMC44aC0yLjl2MS4zaDAuOXYtMC41aDAuOWwwLDBjLTAuMSwwLjEtMC4yLDAuMi0wLjMsMC4zIHMtMC4yLDAuMy0wLjQsMC41bC0wLjMsMC4zbDAuMiwwLjVjMC42LDAsMC45LDAuMSwwLjksMC41YzAsMC4xLTAuMSwwLjMtMC4yLDAuNGMtMC4xLDAuMS0wLjMsMC4xLTAuNCwwLjFjLTAuMywwLTAuNy0wLjEtMC45LTAuMyBsLTAuNSwwLjhjMC40LDAuNCwwLjksMC42LDEuNSwwLjZjMC40LDAsMC45LTAuMSwxLjItMC40QzE1LjUsMTUuMSwxNS42LDE0LjcsMTUuNiwxNC4yelwiLz48cGF0aCBkPVwiTTE1LjYsOC43aC0wLjl2MC41aC0xLjFjMC0wLjIsMC4yLTAuNCwwLjQtMC41YzAuMi0wLjIsMC40LTAuMywwLjctMC40YzAuMy0wLjIsMC41LTAuMywwLjctMC42YzAuMi0wLjIsMC4zLTAuNSwwLjMtMC44IGMwLTAuNC0wLjItMC44LTAuNS0xYy0wLjYtMC40LTEuNC0wLjUtMi0wLjFjLTAuMywwLjItMC41LDAuNC0wLjYsMC43TDEzLjMsN2MwLjEtMC4zLDAuNC0wLjUsMC43LTAuNWMwLjEsMCwwLjMsMCwwLjMsMC4xIGMwLjEsMC4xLDAuMSwwLjIsMC4xLDAuM2MwLDAuMi0wLjEsMC4zLTAuMiwwLjRjLTAuMiwwLjEtMC4zLDAuMy0wLjUsMC40Yy0wLjIsMC4xLTAuNCwwLjMtMC42LDAuNGMtMC4yLDAuMi0wLjQsMC40LTAuNSwwLjYgYy0wLjEsMC4yLTAuMiwwLjUtMC4yLDAuOGMwLDAuMiwwLDAuMywwLDAuNWgzLjJMMTUuNiw4LjdMMTUuNiw4Ljd6XCIvPjxwYXRoIGQ9XCJNMTUuNiwzLjZoLTFWMGgtMC45bC0xLjIsMS4xbDAuNiwwLjdjMC4yLTAuMSwwLjMtMC4zLDAuNC0wLjVsMCwwdjIuMmgtMC45djAuOWgzTDE1LjYsMy42TDE1LjYsMy42elwiLz48L3N2Zz4nLFxyXG4gICAgICBsaW5rOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43IDE1LjdcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxnPjxwYXRoIGQ9XCJNNy40LDkuOWwzLjEsMy4xYzAuMywwLjMsMC44LDAuNSwxLjMsMC41YzAuNSwwLDAuOS0wLjIsMS4zLTAuNWMwLDAsMCwwLDAsMGMwLjctMC43LDAuNy0xLjksMC0yLjZMOS45LDcuMyBjMC0wLjEsMC0wLjIsMC0wLjNDOS45LDcsMTAsNywxMC4xLDdsMi4yLTAuMmMwLjEsMCwwLjEsMCwwLjIsMC4xbDIuMSwyLjFjMC40LDAuNCwwLjcsMC44LDAuOSwxLjNjMC4yLDAuNSwwLjMsMSwwLjMsMS41IGMwLDAuNS0wLjEsMS0wLjMsMS41Yy0wLjgsMi0zLjIsMy01LjIsMi4yYy0wLjUtMC4yLTAuOS0wLjUtMS4zLTAuOWwtMi4xLTIuMWMtMC4xLDAtMC4xLTAuMS0wLjEtMC4yTDcsMTAuMUM3LDEwLDcsOS45LDcuMSw5LjkgQzcuMiw5LjgsNy4zLDkuOSw3LjQsOS45eiBNMS4yLDEuMUMxLjYsMC43LDIsMC40LDIuNSwwLjNjMS0wLjQsMi4xLTAuNCwzLjEsMEM2LDAuNCw2LjUsMC43LDYuOCwxLjFMOSwzLjJDOSwzLjMsOS4xLDMuMyw5LDMuNCBMOC44LDUuNmMwLDAuMS0wLjEsMC4yLTAuMiwwLjJjLTAuMSwwLjEtMC4yLDAuMS0wLjMsMEw1LjMsMi43QzUsMi4zLDQuNSwyLjEsNCwyLjFjLTAuNSwwLTAuOSwwLjItMS4zLDAuNWMwLDAsMCwwLDAsMCBDMiwzLjQsMiw0LjUsMi43LDUuMmwzLjEsMy4yYzAuMSwwLjEsMC4xLDAuMiwwLDAuM2MwLDAuMS0wLjEsMC4xLTAuMiwwLjFMMy41LDlDMy40LDksMy40LDksMy4zLDguOUwxLjIsNi44YzAsMCwwLDAsMCwwIEMtMC40LDUuMi0wLjQsMi43LDEuMiwxLjFMMS4yLDEuMXogTTE0LjMsNmgtMi42YzAsMCwwLDAsMCwwYy0wLjEsMC0wLjItMC4xLTAuMi0wLjJjMC0wLjEsMC0wLjIsMC4xLTAuM2wyLjUtMC43IGMwLjEsMCwwLjEsMCwwLjIsMGMwLjEsMCwwLjEsMC4xLDAuMSwwLjJsMC4xLDAuOGMwLDAuMSwwLDAuMS0wLjEsMC4yQzE0LjUsNiwxNC40LDYsMTQuMyw2TDE0LjMsNnogTTEwLjIsNC4xIGMwLDAuMS0wLjEsMC4yLTAuMiwwLjJsMCwwYzAsMCwwLDAsMCwwQzkuOCw0LjIsOS43LDQuMSw5LjgsNEw5LjcsMS40YzAtMC4xLDAtMC4xLDAuMS0wLjJjMC4xLDAsMC4xLDAsMC4yLDBoMC44IGMwLjEsMCwwLjEsMCwwLjIsMC4xYzAsMC4xLDAsMC4xLDAsMC4yTDEwLjIsNC4xTDEwLjIsNC4xeiBNMS41LDkuN2gxLjNoMS4zYzAuMSwwLDAuMiwwLjEsMC4yLDAuMmMwLDAuMSwwLDAuMi0wLjEsMC4zbC0yLjUsMC42IEgxLjZjMCwwLTAuMSwwLTAuMSwwYy0wLjEsMC0wLjEtMC4xLTAuMS0wLjJMMS4yLDkuOWMwLTAuMSwwLTAuMSwwLjEtMC4yYzAtMC4xLDAuMS0wLjEsMC4yLTAuMUwxLjUsOS43eiBNNS42LDExLjYgQzUuNiwxMS42LDUuNiwxMS42LDUuNiwxMS42YzAtMC4xLDAuMS0wLjIsMC4zLTAuMWMwLDAsMCwwLDAsMGMwLjEsMCwwLjIsMC4xLDAuMiwwLjJ2Mi42YzAsMC4xLDAsMC4xLTAuMSwwLjIgYzAsMC0wLjEsMC4xLTAuMiwwLjFMNSwxNC41Yy0wLjEsMC0wLjEsMC0wLjItMC4xYzAtMC4xLDAtMC4xLDAtMC4yTDUuNiwxMS42TDUuNiwxMS42elwiLz48L2c+PC9zdmc+JyxcclxuICAgICAgdW5saW5rOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43IDE1LjdcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxnPjxwYXRoIGQ9XCJNMTQuNiwxNC42YzEuNi0xLjYsMS42LTQuMSwwLTUuN2wwLDBsLTMuMS0zLjFsLTEuMiwxLjZsMi45LDIuOWMwLjQsMC40LDAuNiwwLjksMC42LDEuNWMwLDEuMS0wLjksMi4xLTIuMSwyLjFsMCwwIGMtMC42LDAtMS4xLTAuMi0xLjUtMC42bC0wLjQtMC40bC0xLjcsMWwwLjgsMC44QzEwLjQsMTYuMiwxMywxNi4yLDE0LjYsMTQuNkwxNC42LDE0LjZMMTQuNiwxNC42eiBNMy42LDZDMyw1LjksMi42LDUuNSwyLjMsNSBTMS45LDQsMi4xLDMuNEMyLjMsMi45LDIuNiwyLjUsMywyLjJDMy41LDIsNC4xLDEuOSw0LjYsMmwzLjMsMS40bDAuNS0yTDUuMSwwLjFDNC0wLjEsMi45LDAsMiwwLjVDMS4xLDEuMSwwLjQsMS45LDAuMiwzIEMtMC4xLDQsMCw1LjEsMC42LDZDMS4xLDYuOSwxLjksNy42LDMsNy44bDUuNCwybDAuNS0yTDYuMiw2LjlMMy42LDZ6XCIvPjwvZz48L3N2Zz4nXHJcbiAgIH0sXHJcbiAgIC8vIGNvbW1vbiwgbHRyIGljb25cclxuICAgcmVkbzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNTkgMTQuMThcIj48Zz48cGF0aCBkPVwiTTExLjU4LDE4LjQ4YTYuODQsNi44NCwwLDEsMSw2Ljg1LTYuODVzMCwuMjYsMCwuNjdhOCw4LDAsMCwxLS4yMiwxLjQ0bC45MS0uNTVhLjUxLjUxLDAsMCwxLC4zNiwwLC40NS40NSwwLDAsMSwuMjkuMjIuNDcuNDcsMCwwLDEsLjA2LjM2LjQ1LjQ1LDAsMCwxLS4yMi4yOUwxNy40MiwxNS4zbC0uMTIsMGgtLjI1bC0uMTItLjA2LS4wOS0uMDktLjA2LS4wNywwLS4wNi0uODctMi4xMmEuNDMuNDMsMCwwLDEsMC0uMzcuNDkuNDksMCwwLDEsLjI3LS4yNi40MS40MSwwLDAsMSwuMzYsMCwuNTMuNTMsMCwwLDEsLjI3LjI2bC40NCwxLjA5YTYuNTEsNi41MSwwLDAsMCwuMjQtMS4zNiw0LjU4LDQuNTgsMCwwLDAsMC0uNjQsNS44Myw1LjgzLDAsMCwwLTEuNzMtNC4xNyw1Ljg4LDUuODgsMCwwLDAtOC4zNCwwLDUuOSw1LjksMCwwLDAsNC4xNywxMC4wNi41MS41MSwwLDAsMSwuMzMuMTUuNDguNDgsMCwwLDEsMCwuNjguNTMuNTMsMCwwLDEtLjMzLjEyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40OCAtNC41NClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHVuZG86ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjU5IDE0LjE4XCI+PGc+PHBhdGggZD1cIk01LDE0YS40My40MywwLDAsMS0uMjItLjI5LjQ2LjQ2LDAsMCwxLC4wNi0uMzYuNDMuNDMsMCwwLDEsLjI5LS4yMi41Ni41NiwwLDAsMSwuMzYsMGwuOTEuNTVhOC4yNyw4LjI3LDAsMCwxLS4yMi0xLjQ1LDUuMDcsNS4wNywwLDAsMSwwLS42N0E2Ljg1LDYuODUsMCwxLDEsMTMsMTguNDdhLjQ0LjQ0LDAsMCwxLS4zMy0uMTMuNDguNDgsMCwwLDEsMC0uNjguNTEuNTEsMCwwLDEsLjMzLS4xNUE1Ljg5LDUuODksMCwwLDAsMTcuMTUsNy40NWE1Ljg4LDUuODgsMCwwLDAtOC4zMywwLDUuODQsNS44NCwwLDAsMC0xLjczLDQuMTdzMCwuMjUsMCwuNjVhNi40OSw2LjQ5LDAsMCwwLC4yNCwxLjM3bC40NC0xLjA5YS41Ny41NywwLDAsMSwuMjctLjI2LjQxLjQxLDAsMCwxLC4zNiwwLC41My41MywwLDAsMSwuMjcuMjYuNDMuNDMsMCwwLDEsMCwuMzdMNy44MiwxNWwwLC4wOS0uMDkuMDktLjEuMDctLjA2LDBINy4yOGwtLjEzLDAtMS4wOS0uNjNjLS42NS0uMzYtMS0uNTctMS4xLS42M1pcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDkgLTQuNTMpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBib2xkOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMS43NiAxNS43NVwiPjxnPjxwYXRoIGQ9XCJNNi40LDMuNzZWMTkuNWg2Ljc2YTUuNTUsNS41NSwwLDAsMCwyLS4zMiw0LjkzLDQuOTMsMCwwLDAsMS41Mi0xLDQuMjcsNC4yNywwLDAsMCwxLjQ4LTMuMzQsMy44NywzLjg3LDAsMCwwLS42OS0yLjM3LDUuNzQsNS43NCwwLDAsMC0uNzEtLjgzLDMuNDQsMy40NCwwLDAsMC0xLjEtLjY1LDMuNiwzLjYsMCwwLDAsMS41OC0xLjM2LDMuNjYsMy42NiwwLDAsMCwuNTMtMS45MywzLjcsMy43LDAsMCwwLTEuMjEtMi44Nyw0LjY1LDQuNjUsMCwwLDAtMy4yNS0xLjFINi40Wm0yLjQ2LDYuNjVWNS41N2gzLjUyYTQuOTEsNC45MSwwLDAsMSwxLjM2LjE1LDIuMywyLjMsMCwwLDEsLjg1LjQ1LDIuMDYsMi4wNiwwLDAsMSwuNzQsMS43MSwyLjMsMi4zLDAsMCwxLS43OCwxLjkyLDIuNTQsMi41NCwwLDAsMS0uODYuNDYsNC43LDQuNywwLDAsMS0xLjMyLjE1SDguODZabTAsNy4yN1YxMi4xNUgxMi43YTQuNTYsNC41NiwwLDAsMSwxLjM4LjE3LDMuNDMsMy40MywwLDAsMSwuOTUuNDksMi4yOSwyLjI5LDAsMCwxLC45MiwyLDIuNzMsMi43MywwLDAsMS0uODMsMi4xLDIuNjYsMi42NiwwLDAsMS0uODMuNTgsMy4yNSwzLjI1LDAsMCwxLTEuMjYuMkg4Ljg2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNi40IC0zLjc1KVwiLz48L2c+PC9zdmc+JyxcclxuICAgdW5kZXJsaW5lOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA5Ljc4IDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xNC42NCwzLjc2aDIuNTJ2Ny43MmE0LjUxLDQuNTEsMCwwLDEtLjU5LDIuMzEsMy43NiwzLjc2LDAsMCwxLTEuNzEsMS41Myw2LjEyLDYuMTIsMCwwLDEtMi42NC41Myw1LDUsMCwwLDEtMy41Ny0xLjE4LDQuMTcsNC4xNywwLDAsMS0xLjI3LTMuMjRWMy43Nkg5Ljl2Ny4zYTMsMywwLDAsMCwuNTUsMiwyLjMsMi4zLDAsMCwwLDEuODMuNjUsMi4yNiwyLjI2LDAsMCwwLDEuOC0uNjUsMy4wOSwzLjA5LDAsMCwwLC41NS0yVjMuNzZabTIuNTIsMTMuMzFWMTkuNUg3LjM5VjE3LjA4aDkuNzdaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC03LjM4IC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgaXRhbGljOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMC40OSAxNS43NlwiPjxnPjxwYXRoIGQ9XCJNMTcuMTYsMy43OWwuMzcsMC0uMDYuMzgtLjE0LjUyQTEwLDEwLDAsMCwxLDE2LjIxLDVhOS4zNyw5LjM3LDAsMCwwLTEsLjMyLDYuNjgsNi42OCwwLDAsMC0uMjUuODljLS4wNi4zMS0uMTEuNTktLjE0Ljg1LS4zLDEuMzYtLjUyLDIuNDEtLjY4LDMuMTRsLS42MSwzLjE4TDEzLjEsMTVsLS40MywyLjQtLjEyLjQ2YS42Mi42MiwwLDAsMCwwLC4yOGMuNDQuMS44NS4xNywxLjIzLjIybC42OC4xMWE0LjUxLDQuNTEsMCwwLDEtLjA4LjZsLS4wOS40MmEuOTIuOTIsMCwwLDAtLjIzLDBsLS40MywwYTEuMzcsMS4zNywwLDAsMS0uMjksMGMtLjEzLDAtLjYzLS4wOC0xLjQ5LS4xNmwtMiwwYy0uMjgsMC0uODcsMC0xLjc4LjEyTDcsMTkuNWwuMTctLjg4LjgtLjJBNi42MSw2LjYxLDAsMCwwLDkuMTksMTgsMi42MiwyLjYyLDAsMCwwLDkuNjEsMTdsLjI4LTEuNDEuNTgtMi43NS4xMi0uNjZjLjA1LS4zLjExLS41OC4xNy0uODZzLjEyLS41MS4xNy0uNjlsLjEyLS40OC4xMi0uNDMuMzEtMS42LjE1LS42NS4zMS0xLjkxVjUuMTRhMy44NiwzLjg2LDAsMCwwLTEuNDgtLjI5bC0uMzgsMCwuMi0xLjA2LDMuMjQuMTQuNzUsMGMuNDUsMCwxLjE4LDAsMi4xOC0uMDkuMjMsMCwuNDYsMCwuNzEsMFpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTcuMDQgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBzdHJpa2U6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDE0LjlcIj48Zz48cGF0aCBkPVwiTTEyLjk0LDEzYTQuMjcsNC4yNywwLDAsMSwxLjMyLjU4LDEuNDYsMS40NiwwLDAsMSwuNTUsMS4yLDEuODcsMS44NywwLDAsMS0uODgsMS42NCw0LjE3LDQuMTcsMCwwLDEtMi4zNS41OSw0LjQ0LDQuNDQsMCwwLDEtMi43NC0uNzEsMi43MiwyLjcyLDAsMCwxLTEtMi4xN0g1LjU3YTQuNTYsNC41NiwwLDAsMCwxLjU1LDMuNyw3LDcsMCwwLDAsNC40NywxLjIzLDYsNiwwLDAsMCw0LjA3LTEuMyw0LjI0LDQuMjQsMCwwLDAsMS41Mi0zLjM3LDQsNCwwLDAsMC0uMjYtMS40aC00Wk02LjM3LDEwLjI0QTMuMjcsMy4yNywwLDAsMSw2LDguNjhhNCw0LDAsMCwxLDEuNDgtMy4zLDUuOTIsNS45MiwwLDAsMSwzLjg4LTEuMjEsNS41OCw1LjU4LDAsMCwxLDMuOTEsMS4yNCw0LjM2LDQuMzYsMCwwLDEsMS40NSwzLjE3SDE0LjQ0YTIuMTIsMi4xMiwwLDAsMC0uOTEtMS44MSw0LjQ1LDQuNDUsMCwwLDAtMi40NC0uNTUsMy42OSwzLjY5LDAsMCwwLTIsLjUxQTEuNjQsMS42NCwwLDAsMCw4LjMsOC4yMmExLjMsMS4zLDAsMCwwLC40OCwxLjExLDcsNywwLDAsMCwyLjEuNzhsLjI4LjA2LjI4LjA4SDYuMzdabTEzLjA5LjY4YS43My43MywwLDAsMSwuNDkuMjEuNjYuNjYsMCwwLDEsLjIuNDguNjQuNjQsMCwwLDEtLjIuNDguNzEuNzEsMCwwLDEtLjQ5LjE5SDUuMWEuNjcuNjcsMCwwLDEtLjQ5LS4xOS42Ni42NiwwLDAsMS0uMi0uNDguNjQuNjQsMCwwLDEsLjItLjQ4LjczLjczLDAsMCwxLC40OS0uMjFIMTkuNDZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC00LjE3KVwiLz48L2c+PC9zdmc+JyxcclxuICAgc3Vic2NyaXB0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NSAxNC42MVwiPjxnPjxwYXRoIGQ9XCJNMTUuMzgsNC4zM0gxMi43NEwxMS4xOSw3Yy0uMjguNDYtLjUxLjg3LS42OSwxLjIxTDEwLjA3LDloMGwtLjQ0LS44Yy0uMjItLjQtLjQ1LS44MS0uNzEtMS4yM0w3LjM0LDQuMzNINC42OEw4LjI2LDEwLDQuNCwxNi4wOEg3LjFsMS42OS0yLjgzYy4zOC0uNjMuNzItMS4yMiwxLTEuNzhsLjI1LS40NmgwbC40OS45MmMuMjQuNDUuNDguODkuNzQsMS4zMkwxMywxNi4wOGgyLjYxTDExLjg0LDEwbDEuNzctMi44NCwxLjc3LTIuODVabTQuNzcsMTMuNzVIMTd2LS4xNWMwLS40LjA1LS42NC4xNi0uNzJhNC40Miw0LjQyLDAsMCwxLDEuMTYtLjMxLDMuMywzLjMsMCwwLDAsMS41NC0uNTZBMS44NCwxLjg0LDAsMCwwLDIwLjE1LDE1YTEuNzgsMS43OCwwLDAsMC0uNDQtMS40MUEyLjgsMi44LDAsMCwwLDE4LDEzLjI1YTIuNzEsMi43MSwwLDAsMC0xLjY5LjM3LDEuODMsMS44MywwLDAsMC0uNDQsMS40M3YuMjNIMTd2LS4yM3EwLS42My4xOC0uNzhhMS42MiwxLjYyLDAsMCwxLC44OC0uMTUsMS41OSwxLjU5LDAsMCwxLC44OC4xNXEuMTguMTUuMTguNzV0LS4xOC43NWEzLjU4LDMuNTgsMCwwLDEtMS4xOC4zMywzLjMzLDMuMzMsMCwwLDAtMS41Mi41MSwxLjU3LDEuNTcsMCwwLDAtLjMyLDEuMTh2MS4xNWg0LjI3di0uODZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTQuMzMpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBzdXBlcnNjcmlwdDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzUgMTUuNDJcIj48Zz48cGF0aCBkPVwiTTEyLDEzLjE0bDMuNjEtNS44MUgxMi45NEwxMS4zMywxMGMtLjI4LjQ2LS41MS44OC0uNjksMS4yNWwtLjQ1LjgzaDBsLS40NS0uODVjLS4yMi0uNDEtLjQ1LS44Mi0uNzEtMS4yNEw3LjQsNy4zM0g0LjY4bDMuNjYsNS44MUw0LjQsMTkuMzNINy4xNGwxLjc0LTIuODdxLjU4LTEsMS0xLjgzbC4yNS0uNDhoMGwuNTEuOTQuNzUsMS4zNywxLjcyLDIuODdoMi42N2wtMS45Mi0zLjA5Yy0xLjEyLTEuOC0xLjc2LTIuODMtMS45Mi0zLjFabTQuODQtNC40MWgwbDAsLjE1aDMuMjd2Ljg2SDE1Ljc3VjguNThhMS42NiwxLjY2LDAsMCwxLC4zMy0xLjIyLDMuNTEsMy41MSwwLDAsMSwxLjU2LS41MSwzLjY4LDMuNjgsMCwwLDAsMS4yMS0uMzRjLjEzLS4xLjE5LS4zNi4xOS0uNzdTMTksNS4wNywxOC44Nyw1QTEuNjMsMS42MywwLDAsMCwxOCw0LjhhMS41OCwxLjU4LDAsMCwwLS45MS4xN2MtLjEzLjExLS4xOS4zOC0uMTkuOFY2SDE1Ljc4VjUuNzZhMS44NywxLjg3LDAsMCwxLC40NS0xLjQ3QTIuODQsMi44NCwwLDAsMSwxOCwzLjkxYTIuOCwyLjgsMCwwLDEsMS43Mi4zOCwxLjg0LDEuODQsMCwwLDEsLjQ1LDEuNDQsMS45MSwxLjkxLDAsMCwxLS4zNCwxLjM1LDMuMjQsMy4yNCwwLDAsMS0xLjU4LjU3QTMuNjksMy42OSwwLDAsMCwxNyw4Yy0uMTIuMS0uMTcuMzUtLjE3Ljc2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40IC0zLjkxKVwiLz48L2c+PC9zdmc+JyxcclxuICAgZXJhc2U6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDEzLjc2XCI+PGc+PHBhdGggZD1cIk0xMy42OSwxNy4yaDYuNDZ2MS4zMUg4LjU2TDQuNDEsMTQuMzcsMTQsNC43NWw2LjA2LDYuMDZMMTYuODksMTRsLTMuMiwzLjE5Wm0tNC42MSwwaDIuNzdMMTQuMDksMTUsOS44OCwxMC43NSw2LjI1LDE0LjM4bDEuNDEsMS40MWMuODQuODIsMS4zMSwxLjI5LDEuNDIsMS40MVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTQuNzUpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBpbmRlbnQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDEyLjM2XCI+PGc+PHBhdGggZD1cIk00LjY4LDE0LjQ1YS4yNy4yNywwLDAsMS0uMTktLjA4LjMuMywwLDAsMS0uMDgtLjIxVjkuMWEuMjcuMjcsMCwwLDEsLjA4LS4xOS4yOC4yOCwwLDAsMSwuMi0uMDguMjUuMjUsMCwwLDEsLjE5LjA3bDIuNTQsMi41NGEuMjkuMjksMCwwLDEsMCwuNEw0Ljg4LDE0LjM2YS4yNC4yNCwwLDAsMS0uMi4wOVptMTUuMTksMS4xMmEuMjcuMjcsMCwwLDEsLjE5LjA4LjI1LjI1LDAsMCwxLC4wOC4xOXYxLjY5YS4yNy4yNywwLDAsMS0uMDguMTkuMjUuMjUsMCwwLDEtLjE5LjA4SDQuNjhhLjI3LjI3LDAsMCwxLS4xOS0uMDguMjUuMjUsMCwwLDEtLjA4LS4xOVYxNS44NGEuMjcuMjcsMCwwLDEsLjI3LS4yN0gxOS44N1ptMC0zLjM4YS4yNy4yNywwLDAsMSwuMTkuMDguMjguMjgsMCwwLDEsLjA4LjIxdjEuNjhhLjMyLjMyLDAsMCwxLS4wOC4yMS4yNS4yNSwwLDAsMS0uMTkuMDhIMTAuMzFhLjI3LjI3LDAsMCwxLS4xOS0uMDguMy4zLDAsMCwxLS4wOC0uMjFWMTIuNDhhLjMyLjMyLDAsMCwxLC4wOC0uMjEuMjQuMjQsMCwwLDEsLjE5LS4wOGg5LjU2Wm0wLTMuMzdhLjI3LjI3LDAsMCwxLC4xOS4wOC4yNS4yNSwwLDAsMSwuMDguMTl2MS42OWEuMjcuMjcsMCwwLDEtLjA4LjE5LjI1LjI1LDAsMCwxLS4xOS4wOEgxMC4zMWEuMjcuMjcsMCwwLDEtLjI3LS4yN1Y5LjFhLjI3LjI3LDAsMCwxLC4yNy0uMjdoOS41NlptLjItMy4yOWEuMjguMjgsMCwwLDEsLjA4LjJWNy40MWEuMzIuMzIsMCwwLDEtLjA4LjIxLjI1LjI1LDAsMCwxLS4xOS4wOEg0LjY4YS4yNy4yNywwLDAsMS0uMTktLjA4LjMuMywwLDAsMS0uMDgtLjIxVjUuNzNhLjMyLjMyLDAsMCwxLC4wOC0uMjEuMjUuMjUsMCwwLDEsLjE5LS4wOEgxOS44N2EuMjguMjgsMCwwLDEsLjIuMDlaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC01LjQ0KVwiLz48L2c+PC9zdmc+JyxcclxuICAgb3V0ZGVudDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTIuMzZcIj48Zz48cGF0aCBkPVwiTTE5Ljg3LDE1LjU3YS4yNy4yNywwLDAsMSwuMTkuMDguMjUuMjUsMCwwLDEsLjA4LjE5djEuNjlhLjI3LjI3LDAsMCwxLS4wOC4xOS4yNS4yNSwwLDAsMS0uMTkuMDhINC42OGEuMjcuMjcsMCwwLDEtLjE5LS4wOC4yNS4yNSwwLDAsMS0uMDgtLjE5VjE1Ljg0YS4yNy4yNywwLDAsMSwuMjctLjI3SDE5Ljg3Wk03LjUsMTQuNDVhLjI1LjI1LDAsMCwxLS4yLS4wOUw0Ljc2LDExLjg0YS4yOS4yOSwwLDAsMSwwLS40TDcuMyw4LjlhLjI5LjI5LDAsMCwxLC40LDAsLjMxLjMxLDAsMCwxLC4wNy4ydjUuMDZhLjMyLjMyLDAsMCwxLS4wOC4yMS4yNi4yNiwwLDAsMS0uMTkuMDhaTTE5Ljg3LDguODJhLjI3LjI3LDAsMCwxLC4xOS4wOC4yNS4yNSwwLDAsMSwuMDguMTl2MS42OWEuMjcuMjcsMCwwLDEtLjA4LjE5LjI1LjI1LDAsMCwxLS4xOS4wOEgxMC4zMWEuMjcuMjcsMCwwLDEtLjI3LS4yN1Y5LjFhLjI3LjI3LDAsMCwxLC4yNy0uMjdoOS41NlptMCwzLjM3YS4yNy4yNywwLDAsMSwuMTkuMDguMjguMjgsMCwwLDEsLjA4LjIxdjEuNjhhLjMyLjMyLDAsMCwxLS4wOC4yMS4yNS4yNSwwLDAsMS0uMTkuMDhIMTAuMzFhLjI3LjI3LDAsMCwxLS4xOS0uMDguMy4zLDAsMCwxLS4wOC0uMjFWMTIuNDhhLjMyLjMyLDAsMCwxLC4wOC0uMjEuMjQuMjQsMCwwLDEsLjE5LS4wOGg5LjU2Wm0uMi02LjY2YS4yOC4yOCwwLDAsMSwuMDguMlY3LjQxYS4zMi4zMiwwLDAsMS0uMDguMjEuMjUuMjUsMCwwLDEtLjE5LjA4SDQuNjhhLjI3LjI3LDAsMCwxLS4xOS0uMDguMy4zLDAsMCwxLS4wOC0uMjFWNS43M2EuMzIuMzIsMCwwLDEsLjA4LS4yMS4yNS4yNSwwLDAsMSwuMTktLjA4SDE5Ljg3YS4yOC4yOCwwLDAsMSwuMi4wOVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTUuNDQpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBleHBhbnNpb246ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xMS44LDEzLjA2bC01LjEsNS4xSDkuNTFWMTkuNUg0LjQxVjE0LjRINS43NXYyLjgxTDguMywxNC42NnEyLjI1LTIuMjMsMi41NS0yLjU1Wm04LjM1LTkuM3Y1LjFIMTguODFWNi4wNWwtNS4xLDUuMS0xLTEsNS4xLTUuMUgxNS4wNVYzLjc2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHJlZHVjdGlvbjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTE0LjkxLDEwaDIuODd2MS4zOEgxMi41NVY2LjEyaDEuMzhWOWw1LjI0LTUuMjQuNDguNDkuNDkuNDhaTTYuNzcsMTEuOTJIMTJ2NS4yM0gxMC42MlYxNC4yNkw1LjM3LDE5LjVsLTEtMUw5LjYzLDEzLjNINi43N1pcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNCAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGNvZGVfdmlldzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzMgMTEuOFwiPjxnPjxwYXRoIGQ9XCJNOC4wOSw3Ljk0YS43Ni43NiwwLDAsMSwuNTMuMjIuNzIuNzIsMCwwLDEsLjIxLjUyLjc2Ljc2LDAsMCwxLS4yMi41NEw2LjE4LDExLjYzbDIuNDMsMi40NGEuNjkuNjksMCwwLDEsLjIuNTEuNjYuNjYsMCwwLDEtLjIxLjUxLjc1Ljc1LDAsMCwxLS41MS4yMi42My42MywwLDAsMS0uNTEtLjIxaDBMNC42MywxMi4xNWEuNy43LDAsMCwxLS4yMi0uNTMuNjcuNjcsMCwwLDEsLjI1LS41NUw3LjU3LDguMTZhLjgyLjgyLDAsMCwxLC41Mi0uMjJabTEyLjA1LDMuNjlhLjcuNywwLDAsMS0uMjMuNTJMMTcsMTUuMWgwYS42Ni42NiwwLDAsMS0uNTEuMjEuNzMuNzMsMCwwLDEtLjUxLS4yMi43NS43NSwwLDAsMS0uMjItLjUxLjYzLjYzLDAsMCwxLC4yMS0uNTFsMi40My0yLjQ0TDE1LjkyLDkuMjJhLjczLjczLDAsMCwxLS4yMi0uNTNBLjc0Ljc0LDAsMCwxLDE3LDguMThoMGwyLjkxLDIuOTFhLjY3LjY3LDAsMCwxLC4yNy41NFptLTUuOS01LjlhLjczLjczLDAsMCwxLC42MS4zMi43MS43MSwwLDAsMSwuMDcuNjhMMTEsMTdhMSwxLDAsMCwxLS4yMi4zMi42LjYsMCwwLDEtLjM1LjE2Ljc1Ljc1LDAsMCwxLS42OS0uMjYuNjkuNjksMCwwLDEtLjEyLS43MkwxMy41Niw2LjIzYS43NS43NSwwLDAsMSwuMjYtLjM1Ljc0Ljc0LDAsMCwxLC40Mi0uMTVaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC01LjczKVwiLz48L2c+PC9zdmc+JyxcclxuICAgcHJldmlldzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNjUgMTUuNjZcIj48Zz48cGF0aCBkPVwiTTE2LjE5LDE0LjQzbDIuNDksMi40OWEuNzMuNzMsMCwwLDEsLjIxLjUyLjY3LjY3LDAsMCwxLS4yMi41MS43LjcsMCwwLDEtLjUyLjIyLjY5LjY5LDAsMCwxLS41MS0uMjFsLTIuNDktMi40OGE1LjE3LDUuMTcsMCwwLDEtMS4zNC42OSw0LjY0LDQuNjQsMCwwLDEtMS40OC4yNCw0Ljc4LDQuNzgsMCwxLDEsMC05LjU2LDQuNzksNC43OSwwLDAsMSwxLjg0LjM2LDQuOSw0LjksMCwwLDEsMS41NiwxLDQuNzcsNC43NywwLDAsMSwuNDYsNi4xOFpNMTAsMTRhMy4zLDMuMywwLDAsMCwyLjM0LjkzQTMuMzcsMy4zNywwLDAsMCwxNC43LDE0YTMuMywzLjMsMCwwLDAtMS4wOC01LjQxLDMuNDcsMy40NywwLDAsMC0yLjU2LDBBMywzLDAsMCwwLDEwLDkuMjgsMy4zMSwzLjMxLDAsMCwwLDEwLDE0Wk0xNiw0YTMuODYsMy44NiwwLDAsMSwyLjc3LDEuMTRBMy45LDMuOSwwLDAsMSwyMCw3Ljg1djRhLjc3Ljc3LDAsMCwxLS4yMi41My43LjcsMCwwLDEtLjUyLjIxLjcyLjcyLDAsMCwxLS43NC0uNzR2LTRhMi40NiwyLjQ2LDAsMCwwLS43Mi0xLjczQTIuMzcsMi4zNywwLDAsMCwxNiw1LjQ1SDguNTNBMi40MiwyLjQyLDAsMCwwLDYuMDgsNy44OXY3LjUyYTIuNDEsMi40MSwwLDAsMCwuNzEsMS43MywyLjQ2LDIuNDYsMCwwLDAsMS43NC43Mmg0LjA4YS43My43MywwLDAsMSwwLDEuNDZIOC41M2EzLjg1LDMuODUsMCwwLDEtMi43OC0xLjE0QTMuOTMsMy45MywwLDAsMSw0LjYsMTUuNFY3Ljg3QTMuOTQsMy45NCwwLDAsMSw1Ljc2LDUuMDksMy44OCwzLjg4LDAsMCwxLDguNTQsNEgxNlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDUgLTMuOClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHByaW50OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNi4wNSAxNi4wNFwiPjxnPjxwYXRoIGQ9XCJNMTkuNzYsMTUuODRhMS4yOSwxLjI5LDAsMCwwLC4zOS0uOTJWOC4zNUEyLjA1LDIuMDUsMCwwLDAsMTkuNTcsN2ExLjkzLDEuOTMsMCwwLDAtMS4zOC0uNTdINi4zN2ExLjk1LDEuOTUsMCwwLDAtMiwydjYuNTZhMS4yMywxLjIzLDAsMCwwLC4zOC45MiwxLjM1LDEuMzUsMCwwLDAsLjkzLjM4aDJWMTQuOWwtMiwwVjguMzVhLjY3LjY3LDAsMCwxLC4xOC0uNDcuNjIuNjIsMCwwLDEsLjQ4LS4xOUgxOC4xOGEuNi42LDAsMCwxLC40Ni4xOS42Ni42NiwwLDAsMSwuMTguNDdWMTQuOWgtMnYxLjMyaDJBMS4zNSwxLjM1LDAsMCwwLDE5Ljc2LDE1Ljg0Wk0xNy41Miw3LjY5VjUuMDZhMS4zMSwxLjMxLDAsMCwwLS4zOC0uOTIsMS4zNCwxLjM0LDAsMCwwLS45NC0uMzhIOC4zNEExLjMsMS4zLDAsMCwwLDcsNS4wNlY3LjY5SDguMzRWNS4wNmg3Ljg3VjcuNjloMS4zMVpNOC4zNCwxMi45M2g3Ljg3bDAsNS4yNkg4LjM0VjEyLjkzWm03Ljg3LDUuMjZ2MFptLjY1LDEuMzFhLjYuNiwwLDAsMCwuNDYtLjE5LjcyLjcyLDAsMCwwLC4yLS40N1YxMi4yOWEuNzQuNzQsMCwwLDAtLjItLjQ3LjYuNiwwLDAsMC0uNDYtLjE5SDcuNjhhLjYuNiwwLDAsMC0uNDYuMTkuNzIuNzIsMCwwLDAtLjIuNDd2Ni41NWEuNzQuNzQsMCwwLDAsLjIuNDcuNi42LDAsMCwwLC40Ni4xOWg5LjE4Wk0xNi42Nyw5LjI4YS43LjcsMCwwLDAtLjk0LDAsLjYzLjYzLDAsMCwwLS4xOC40Ni42Ny42NywwLDAsMCwuMTguNDcuNjguNjgsMCwwLDAsLjk0LDAsLjY2LjY2LDAsMCwwLC4xOC0uNDdBLjU4LjU4LDAsMCwwLDE2LjY3LDkuMjhaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjI1IC0zLjYxKVwiLz48L2c+PC9zdmc+JyxcclxuICAgdGVtcGxhdGU6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE0LjI3IDE1LjY0XCI+PGc+PHBhdGggZD1cIk0xOC4xOCwxOS4xNmExLDEsMCwwLDAsMS0xVjUuNzNhMSwxLDAsMCwwLTEtMWgtMnYxaDJWMTguMTlINi4zN1Y1LjczaDJ2LTFoLTJBLjk0Ljk0LDAsMCwwLDUuNjgsNWExLDEsMCwwLDAtLjI5LjdWMTguMThhLjk0Ljk0LDAsMCwwLC4yOS42OSwxLDEsMCwwLDAsLjY5LjI5SDE4LjE4Wk05LjgyLDEwLjMxaDQuOTJhLjQ5LjQ5LDAsMCwwLC4zNS0uMTUuNDcuNDcsMCwwLDAsLjE1LS4zNS40OS40OSwwLDAsMC0uMTUtLjM1LjQ3LjQ3LDAsMCwwLS4zNS0uMTVIOS44MmEuNDkuNDksMCwwLDAtLjM1LjE1LjQ3LjQ3LDAsMCwwLS4xNS4zNS40OS40OSwwLDAsMCwuMTUuMzUuNDcuNDcsMCwwLDAsLjM1LjE1Wm01LjksNC45Mkg4LjgzYS40OS40OSwwLDAsMC0uMzUuMTUuNDcuNDcsMCwwLDAtLjE1LjM1LjQ5LjQ5LDAsMCwwLC4xNS4zNS40Ny40NywwLDAsMCwuMzUuMTVoNi44OWEuNDkuNDksMCwwLDAsLjM1LS4xNS40Ny40NywwLDAsMCwuMTUtLjM1LjUxLjUxLDAsMCwwLS41LS41Wk03LjM2LDEyLjc3YS40OS40OSwwLDAsMCwuMTUuMzUuNDcuNDcsMCwwLDAsLjM1LjE1aDguODVhLjQ5LjQ5LDAsMCwwLC4zNS0uMTUuNDcuNDcsMCwwLDAsLjE1LS4zNS40OS40OSwwLDAsMC0uMTUtLjM1LjQ3LjQ3LDAsMCwwLS4zNS0uMTVINy44NWEuNDkuNDksMCwwLDAtLjM1LjE1LjUyLjUyLDAsMCwwLS4xNC4zNVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTUuMTQgLTMuNzcpXCIvPjxwYXRoIGQ9XCJNMTQuMjQsNi43MWExLDEsMCwwLDAsMS0xLDEsMSwwLDAsMC0xLTEsMSwxLDAsMCwwLTEtMWgtMmEuOTQuOTQsMCwwLDAtLjY5LjI4LDEsMSwwLDAsMC0uMjkuN0EuOTQuOTQsMCwwLDAsOS42Miw1YS45MS45MSwwLDAsMC0uMjkuNjksMSwxLDAsMCwwLC4yOS43LDEsMSwwLDAsMCwuNjkuMjloMy45M1pcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTUuMTQgLTMuNzcpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBsaW5lX2hlaWdodDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzYgMTMuNTZcIj48Zz48cGF0aCBkPVwiTTQuNCw0Ljg4VjguMjZhMiwyLDAsMCwwLC41LjM5cy4xLDAsLjE4LS4xMmEuNjIuNjIsMCwwLDAsLjE3LS4yOGMuMDYtLjE5LjEzLS40NC4yMS0uNzRzLjE0LS41Mi4xOS0uNjZhLjU4LjU4LDAsMCwxLC4yMS0uMywyLjQxLDIuNDEsMCwwLDEsLjYzLS4yMSwzLjgzLDMuODMsMCwwLDEsLjg4LS4xMiw5LjE1LDkuMTUsMCwwLDEsMS4zMS4wNi4xNi4xNiwwLDAsMSwuMTEsMCwuMjYuMjYsMCwwLDEsLjA2LjE0LDQsNCwwLDAsMSwwLC40OXYybC4wNSwzLjc3YzAsMS40MSwwLDIuNjgtLjA1LDMuODFhMS43OSwxLjc5LDAsMCwxLS4xMS40OSwxMC42OCwxMC42OCwwLDAsMS0xLjQuNDUsMS4xMiwxLjEyLDAsMCwwLS42OS40M3YuMzFsMCwuMjIuNjEsMGMuODUtLjA4LDEuNTQtLjEyLDIuMDYtLjEyYTE5Ljc2LDE5Ljc2LDAsMCwxLDIuMDkuMDgsMTUuMDgsMTUuMDgsMCwwLDAsMS42NC4wOCwxLjQsMS40LDAsMCwwLC4yOSwwLDEuNTgsMS41OCwwLDAsMCwwLS4yNmwtLjA1LS40M2EyLjI2LDIuMjYsMCwwLDAtLjQzLS4xN2wtLjc3LS4yMi0uMTUsMGEyLjU1LDIuNTUsMCwwLDEtLjc4LS4yOCwyLjU2LDIuNTYsMCwwLDEtLjExLS43NWwwLTEuMjksMC0zLjE1VjcuNTNhMTAuNTEsMTAuNTEsMCwwLDEsLjA2LTEuMiwzLjgzLDMuODMsMCwwLDEsLjYsMGwxLjg4LDBhMi4xOCwyLjE4LDAsMCwxLC4zOCwwLC40NS40NSwwLDAsMSwuMjMuMTcuOS45LDAsMCwxLC4wNS4yNWMwLC4xNi4wNi4zNS4xLjU4YTMuMzMsMy4zMywwLDAsMCwuMTQuNTVBNi4zOSw2LjM5LDAsMCwwLDE1LDlhMi45MSwyLjkxLDAsMCwwLC42LS4xNSwyLjc3LDIuNzcsMCwwLDAsMC0uNDZsMC0uNTEsMC0yLjk1LS4yNSwwLS4zOCwwTDE1LDQuOTRhLjcxLjcxLDAsMCwxLS4xOC4xNS40NS40NSwwLDAsMS0uMjUuMDdsLS4yOSwwSDguNzVsLS4xNSwwSDcuNDVhMTcsMTcsMCwwLDEtMS44NiwwTDUuMzYsNWwtLjI1LS4xM1pNMTkuNzUsMTYuMTRoLS42OXYtOWguNjlBLjQuNCwwLDAsMCwyMC4xMyw3Yy4wNi0uMTEsMC0uMjQtLjEtLjM5TDE4LjkyLDUuMTVhLjUyLjUyLDAsMCwwLS44NiwwTDE3LDYuNThjLS4xMi4xNS0uMTYuMjgtLjEuMzlzLjE4LjE2LjM4LjE2aC42OXY5aC0uNjlhLjQuNCwwLDAsMC0uMzguMTZjLS4wNi4xMSwwLC4yNC4xLjM5bDEuMTEsMS40M2EuNTIuNTIsMCwwLDAsLjg2LDBMMjAsMTYuNjljLjEyLS4xNS4xNi0uMjguMS0uMzlhLjQuNCwwLDAsMC0uMzgtLjE2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40IC00Ljg2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgcGFyYWdyYXBoX3N0eWxlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMS44MSAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTguMTgsMy43NnYyaC0yVjE5LjVoLTJWNS43M2gtMlYxOS41aC0yVjExLjYzYTMuOTQsMy45NCwwLDAsMSwwLTcuODdoNy44N1pcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTYuMzcgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICB0ZXh0X3N0eWxlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMy43NiAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTcuNjgsNi43MWEyLjIyLDIuMjIsMCwwLDAsMS4wNi0uMjIuNzQuNzQsMCwwLDAsLjQyLS43LjczLjczLDAsMCwwLS4wOC0uMzMuNjcuNjcsMCwwLDAtLjE3LS4yMiwxLDEsMCwwLDAtLjMxLS4xNUwxOC4yNiw1bC0uNDUtLjA5QTE1LjI3LDE1LjI3LDAsMCwwLDEzLjI2LDVWNC43NGMwLS42Ni0uNjMtMS0xLjkyLTEtLjI0LDAtLjQzLjE1LS41OS40NmE0LDQsMCwwLDAtLjM2LDEuMTRoMHYwYTI2LjQ1LDI2LjQ1LDAsMCwxLTMuNS4zNUEyLDIsMCwwLDAsNS43Nyw2YS44NC44NCwwLDAsMC0uMzcuNzksMi4xNCwyLjE0LDAsMCwwLC40MSwxLjI5LDEuMjMsMS4yMywwLDAsMCwxLjA1LjYzLDE2LjYyLDE2LjYyLDAsMCwwLDMuMjktLjQ1bC0uMzQsMy4zNWMtLjE2LDEuNjEtLjI5LDIuOS0uMzcsMy44NnMtLjEyLDEuNjYtLjEyLDIuMDlsMCwuNjVhNS4xNSw1LjE1LDAsMCwwLC4wNS42LDEuMjgsMS4yOCwwLDAsMCwuMTYuNTQuMzQuMzQsMCwwLDAsLjI4LjE4LDEuMTYsMS4xNiwwLDAsMCwuNzktLjQ2LDMuNjYsMy42NiwwLDAsMCwuNjgtMSwyMi4wOCwyMi4wOCwwLDAsMCwxLTQuMzNxLjQ5LTMuMS43OC02LjE1YTI0LjY5LDI0LjY5LDAsMCwxLDQuNjItLjg0WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNS40IC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgc2F2ZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTE4LjUzLDE5LjVsLjItLjA1QTEuNzgsMS43OCwwLDAsMCwyMC4xMywxOGwwLS4wOVY3LjE0YTIsMiwwLDAsMC0uMjgtLjY0QTMuMTgsMy4xOCwwLDAsMCwxOS40Myw2Yy0uNS0uNTItMS0xLTEuNTUtMS41NEEyLjU5LDIuNTksMCwwLDAsMTcuMzcsNGExLjgzLDEuODMsMCwwLDAtLjYxLS4yNUg2bC0uMjEsMGExLjc4LDEuNzgsMCwwLDAtMS40LDEuNDlsMCwuMVYxNy44N2EyLjQ5LDIuNDksMCwwLDAsLjA5LjM3LDEuNzksMS43OSwwLDAsMCwxLjQ0LDEuMjNsLjA5LDBabS02LjI1LS42SDYuOTJhLjYxLjYxLDAsMCwxLS42OC0uNDguNzguNzgsMCwwLDEsMC0uMjJWMTIuM2EuNjIuNjIsMCwwLDEsLjY5LS42OEgxNy42NGEuNjIuNjIsMCwwLDEsLjY5LjY5VjE4LjJhLjY0LjY0LDAsMCwxLS43MS42OUgxMi4yOFpNMTIsOS44MUg4LjE1YS42My42MywwLDAsMS0uNzItLjcxdi00YS42NC42NCwwLDAsMSwuNzItLjcyaDcuNjZhLjY0LjY0LDAsMCwxLC43Mi43MnY0YS42NS42NSwwLDAsMS0uNzQuNzJaTTEzLjUsNVY5LjE4aDEuNzhWNVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBibG9ja3F1b3RlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA0NzUuMDgyIDQ3NS4wODFcIj48Zz48cGF0aCBkPVwiTTE2NC40NSwyMTkuMjdoLTYzLjk1NGMtNy42MTQsMC0xNC4wODctMi42NjQtMTkuNDE3LTcuOTk0Yy01LjMyNy01LjMzLTcuOTk0LTExLjgwMS03Ljk5NC0xOS40MTd2LTkuMTMyYzAtMjAuMTc3LDcuMTM5LTM3LjQwMSwyMS40MTYtNTEuNjc4YzE0LjI3Ni0xNC4yNzIsMzEuNTAzLTIxLjQxMSw1MS42NzgtMjEuNDExaDE4LjI3MWM0Ljk0OCwwLDkuMjI5LTEuODA5LDEyLjg0Ny01LjQyNGMzLjYxNi0zLjYxNyw1LjQyNC03Ljg5OCw1LjQyNC0xMi44NDdWNTQuODE5YzAtNC45NDgtMS44MDktOS4yMzMtNS40MjQtMTIuODVjLTMuNjE3LTMuNjEyLTcuODk4LTUuNDI0LTEyLjg0Ny01LjQyNGgtMTguMjcxYy0xOS43OTcsMC0zOC42ODQsMy44NTgtNTYuNjczLDExLjU2M2MtMTcuOTg3LDcuNzEtMzMuNTQ1LDE4LjEzMi00Ni42OCwzMS4yNjdjLTEzLjEzNCwxMy4xMjktMjMuNTUzLDI4LjY4OC0zMS4yNjIsNDYuNjc3QzMuODU1LDE0NC4wMzksMCwxNjIuOTMxLDAsMTgyLjcyNnYyMDAuOTkxYzAsMTUuMjM1LDUuMzI3LDI4LjE3MSwxNS45ODYsMzguODM0YzEwLjY2LDEwLjY1NywyMy42MDYsMTUuOTg1LDM4LjgzMiwxNS45ODVoMTA5LjYzOWMxNS4yMjUsMCwyOC4xNjctNS4zMjgsMzguODI4LTE1Ljk4NWMxMC42NTctMTAuNjYzLDE1Ljk4Ny0yMy41OTksMTUuOTg3LTM4LjgzNFYyNzQuMDg4YzAtMTUuMjMyLTUuMzMtMjguMTY4LTE1Ljk5NC0zOC44MzJDMTkyLjYyMiwyMjQuNiwxNzkuNjc1LDIxOS4yNywxNjQuNDUsMjE5LjI3elwiLz48cGF0aCBkPVwiTTQ1OS4xMDMsMjM1LjI1NmMtMTAuNjU2LTEwLjY1Ni0yMy41OTktMTUuOTg2LTM4LjgyOC0xNS45ODZoLTYzLjk1M2MtNy42MSwwLTE0LjA4OS0yLjY2NC0xOS40MS03Ljk5NGMtNS4zMzItNS4zMy03Ljk5NC0xMS44MDEtNy45OTQtMTkuNDE3di05LjEzMmMwLTIwLjE3Nyw3LjEzOS0zNy40MDEsMjEuNDA5LTUxLjY3OGMxNC4yNzEtMTQuMjcyLDMxLjQ5Ny0yMS40MTEsNTEuNjgyLTIxLjQxMWgxOC4yNjdjNC45NDksMCw5LjIzMy0xLjgwOSwxMi44NDgtNS40MjRjMy42MTMtMy42MTcsNS40MjgtNy44OTgsNS40MjgtMTIuODQ3VjU0LjgxOWMwLTQuOTQ4LTEuODE0LTkuMjMzLTUuNDI4LTEyLjg1Yy0zLjYxNC0zLjYxMi03Ljg5OC01LjQyNC0xMi44NDgtNS40MjRoLTE4LjI2N2MtMTkuODA4LDAtMzguNjkxLDMuODU4LTU2LjY4NSwxMS41NjNjLTE3Ljk4NCw3LjcxLTMzLjUzNywxOC4xMzItNDYuNjcyLDMxLjI2N2MtMTMuMTM1LDEzLjEyOS0yMy41NTksMjguNjg4LTMxLjI2NSw0Ni42NzdjLTcuNzA3LDE3Ljk4Ny0xMS41NjcsMzYuODc5LTExLjU2Nyw1Ni42NzR2MjAwLjk5MWMwLDE1LjIzNSw1LjMzMiwyOC4xNzEsMTUuOTg4LDM4LjgzNGMxMC42NTcsMTAuNjU3LDIzLjYsMTUuOTg1LDM4LjgyOCwxNS45ODVoMTA5LjYzM2MxNS4yMjksMCwyOC4xNzEtNS4zMjgsMzguODI3LTE1Ljk4NWMxMC42NjQtMTAuNjYzLDE1Ljk4NS0yMy41OTksMTUuOTg1LTM4LjgzNFYyNzQuMDg4QzQ3NS4wODIsMjU4Ljg1NSw0NjkuNzYsMjQ1LjkyLDQ1OS4xMDMsMjM1LjI1NnpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGFycm93X2Rvd246ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjczIDguNjdcIj48Zz48cGF0aCBkPVwiTTE4Ljc5LDcuNTJhLjguOCwwLDAsMSwuNTYtLjIzLjgyLjgyLDAsMCwxLC43OS43OS44LjgsMCwwLDEtLjIzLjU2bC03LjA3LDcuMDdhLjc5Ljc5LDAsMCwxLS41Ny4yNS43Ny43NywwLDAsMS0uNTctLjI1aDBMNC42NCw4LjY1YS44LjgsMCwwLDEtLjIzLS41Ny44Mi44MiwwLDAsMSwuNzktLjc5LjguOCwwLDAsMSwuNTYuMjNMMTIuMjgsMTRsMy4yNi0zLjI2LDMuMjUtMy4yNlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTcuMjkpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBhbGlnbl9qdXN0aWZ5OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxMy43N1wiPjxnPjxwYXRoIGQ9XCJNNC40MSw0Ljc0djJIMjAuMTV2LTJINC40MVptMCw1LjlIMjAuMTV2LTJINC40MXYyWm0wLDMuOTRIMjAuMTV2LTJINC40MXYyWm0wLDMuOTNoNy44N3YtMkg0LjQxdjJaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC00Ljc0KVwiLz48L2c+PC9zdmc+JyxcclxuICAgYWxpZ25fbGVmdDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTMuNzdcIj48Zz48cGF0aCBkPVwiTTQuNDEsNC43NHYySDIwLjE1di0ySDQuNDFabTExLjgsMy45NEg0LjQxdjJIMTYuMjJ2LTJabS0xMS44LDUuOUgxOC4xOHYtMkg0LjQxdjJabTAsMy45M2g5Ljg0di0ySDQuNDF2MlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTQuNzQpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBhbGlnbl9yaWdodDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTMuNzdcIj48Zz48cGF0aCBkPVwiTTQuNDEsNC43NHYySDIwLjE1di0ySDQuNDFabTMuOTMsNS45SDIwLjE1di0ySDguMzR2MlptLTIsMy45NEgyMC4xNHYtMkg2LjM3djJabTMuOTQsMy45M2g5Ljg0di0ySDEwLjMxdjJaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC00Ljc0KVwiLz48L2c+PC9zdmc+JyxcclxuICAgYWxpZ25fY2VudGVyOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxMy43N1wiPjxnPjxwYXRoIGQ9XCJNNC40MSw0Ljc0djJIMjAuMTV2LTJINC40MVptMiwzLjk0djJIMTguMTh2LTJINi4zN1ptLTEsNS45SDE5LjE2di0ySDUuMzl2MlptMiwzLjkzSDE3LjJ2LTJINy4zNnYyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNC43NClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGZvbnRfY29sb3I6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDE0LjYxXCI+PGc+PHBhdGggZD1cIk0xOC41LDE1LjU3LDE0LjI4LDQuMzJoLTMuNEw2LjY1LDE1LjU3aDNsLjgtMi4yNmg0LjIzbC44LDIuMjZoM1pNMTQsMTEuMDdIMTEuMTRMMTIuNTQsNywxMy4yNSw5Yy40MSwxLjE4LjY0LDEuODYuNywyWk00LjQxLDE2LjY5djIuMjRIMjAuMTVWMTYuNjlINC40MVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTQuMzIpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBoaWdobGlnaHRfY29sb3I6JzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNjYgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTEyLjMyLDkuMzEsMTMuMzgsMTNIMTEuMjFsLjUyLTEuODNxLjQ2LTEuNjEuNTQtMS44M1pNNC40NCwzLjc2SDIwLjFWMTkuNUg0LjQ0VjMuNzZaTTE0LjcxLDE3LjMyaDIuNjNMMTMuNyw2SDEwLjg5TDcuMjYsMTcuMzJIOS44OWwuNjMtMi4yNGgzLjU1bC4zMiwxLjEyYy4xOC42NS4yOSwxLC4zMiwxLjEyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40NCAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGxpc3RfYnVsbGV0czogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTIuMzdcIj48Zz48cGF0aCBkPVwiTTcuNzcsMTYuMTJhMS41OSwxLjU5LDAsMCwwLS40OS0xLjE4LDEuNjIsMS42MiwwLDAsMC0xLjE5LS40OSwxLjY4LDEuNjgsMCwxLDAsMCwzLjM2LDEuNjcsMS42NywwLDAsMCwxLjY4LTEuNjlabTAtNC40OEExLjY3LDEuNjcsMCwwLDAsNi4wOSwxMCwxLjY4LDEuNjgsMCwwLDAsNC45LDEyLjgyYTEuNjIsMS42MiwwLDAsMCwxLjE5LjQ5LDEuNjcsMS42NywwLDAsMCwxLjY4LTEuNjdabTEyLjM4LDMuNjRhLjI3LjI3LDAsMCwwLS4wOC0uMTkuMjguMjgsMCwwLDAtLjItLjA5SDkuMTlhLjI4LjI4LDAsMCwwLS4yLjA4LjI5LjI5LDAsMCwwLS4wOC4xOVYxN2EuMjcuMjcsMCwwLDAsLjI4LjI4SDE5Ljg3YS4yNy4yNywwLDAsMCwuMTktLjA4LjI0LjI0LDAsMCwwLC4wOC0uMlYxNS4yOFpNNy43Nyw3LjEzYTEuNjMsMS42MywwLDAsMC0uNDktMS4yLDEuNjEsMS42MSwwLDAsMC0xLjE5LS40OSwxLjYxLDEuNjEsMCwwLDAtMS4xOS40OSwxLjcxLDEuNzEsMCwwLDAsMCwyLjQsMS42MiwxLjYyLDAsMCwwLDEuMTkuNDksMS42MSwxLjYxLDAsMCwwLDEuMTktLjQ5LDEuNjMsMS42MywwLDAsMCwuNDktMS4yWm0xMi4zOCwzLjY2YS4yOC4yOCwwLDAsMC0uMDgtLjIuMjkuMjksMCwwLDAtLjE5LS4wOEg5LjE5YS4yNy4yNywwLDAsMC0uMjguMjh2MS42OWEuMjcuMjcsMCwwLDAsLjA4LjE5LjI0LjI0LDAsMCwwLC4yLjA4SDE5Ljg3YS4yNy4yNywwLDAsMCwuMTktLjA4LjI1LjI1LDAsMCwwLC4wOC0uMTlWMTAuNzlabTAtNC41YS4yNy4yNywwLDAsMC0uMDgtLjE5QS4yNS4yNSwwLDAsMCwxOS44OCw2SDkuMTlBLjI4LjI4LDAsMCwwLDksNi4xYS4yNi4yNiwwLDAsMC0uMDguMTlWOEEuMjcuMjcsMCwwLDAsOSw4LjE3YS4yNC4yNCwwLDAsMCwuMi4wOEgxOS44N2EuMjcuMjcsMCwwLDAsLjE5LS4wOEEuMjUuMjUsMCwwLDAsMjAuMTQsOFY2LjI5WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNS40NClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGxpc3RfbnVtYmVyOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS42OSAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNNy42NiwxOGExLjI0LDEuMjQsMCwwLDAtLjI2LS43OCwxLjE3LDEuMTcsMCwwLDAtLjcyLS40MmwuODUtMVYxNUg0LjU4djEuMzRoLjk0di0uNDZsLjg1LDBoMGMtLjExLjExLS4yMi4yMy0uMzIuMzVzLS4yMy4yNy0uMzcuNDdMNS4zOSwxN2wuMjMuNTFjLjYxLS4wNS45Mi4xMS45Mi40OWEuNDIuNDIsMCwwLDEtLjE4LjM3Ljc5Ljc5LDAsMCwxLS40NS4xMkExLjQxLDEuNDEsMCwwLDEsNSwxOC4xNWwtLjUxLjc3QTIuMDYsMi4wNiwwLDAsMCw2LDE5LjVhMS44LDEuOCwwLDAsMCwxLjItLjQxQTEuMzgsMS4zOCwwLDAsMCw3LjY2LDE4Wm0wLTUuNTRINi43NVYxM0g1LjYzQS43Mi43MiwwLDAsMSw2LDEyLjUxYTUuNDUsNS40NSwwLDAsMSwuNjYtLjQ1LDIuNzEsMi43MSwwLDAsMCwuNjctLjU3LDEuMTksMS4xOSwwLDAsMCwuMzEtLjgxLDEuMjksMS4yOSwwLDAsMC0uNDUtMSwxLjg2LDEuODYsMCwwLDAtMi0uMTEsMS41MSwxLjUxLDAsMCwwLS42Mi43bC43NC41MkEuODcuODcsMCwwLDEsNiwxMC4yOGEuNTEuNTEsMCwwLDEsLjM1LjEyLjQyLjQyLDAsMCwxLC4xMy4zMy41NS41NSwwLDAsMS0uMjEuNCwzLDMsMCwwLDEtLjUuMzhjLS4xOS4xMy0uMzkuMjctLjU4LjQyYTIsMiwwLDAsMC0uNS42LDEuNjMsMS42MywwLDAsMC0uMjEuODEsMy44OSwzLjg5LDAsMCwwLC4wNS40OGgzLjJWMTIuNDRabTEyLjQ1LDIuODJhLjI3LjI3LDAsMCwwLS4wOC0uMTkuMjguMjgsMCwwLDAtLjIxLS4wOEg5LjFhLjMyLjMyLDAsMCwwLS4yMS4wOC4yNC4yNCwwLDAsMC0uMDguMlYxN2EuMjcuMjcsMCwwLDAsLjA4LjE5LjMuMywwLDAsMCwuMjEuMDhIMTkuODNhLjMyLjMyLDAsMCwwLC4yMS0uMDguMjUuMjUsMCwwLDAsLjA4LS4xOVYxNS4yNlpNNy42OSw3LjMyaC0xVjMuNzZINS44TDQuNiw0Ljg4bC42My42OGExLjg1LDEuODUsMCwwLDAsLjQzLS40OGgwbDAsMi4yNEg0Ljc0VjguMmgzVjcuMzJabTEyLjQzLDMuNDJhLjI3LjI3LDAsMCwwLS4wOC0uMTkuMjguMjgsMCwwLDAtLjIxLS4wOEg5LjFhLjMyLjMyLDAsMCwwLS4yMS4wOC4yNC4yNCwwLDAsMC0uMDguMnYxLjcxYS4yNy4yNywwLDAsMCwuMDguMTkuMy4zLDAsMCwwLC4yMS4wOEgxOS44M2EuMzIuMzIsMCwwLDAsLjIxLS4wOC4yNS4yNSwwLDAsMCwuMDgtLjE5VjEwLjc0Wm0wLTQuNTJBLjI3LjI3LDAsMCwwLDIwLDYsLjI4LjI4LDAsMCwwLDE5LjgzLDZIOS4xQS4zMi4zMiwwLDAsMCw4Ljg5LDZhLjI0LjI0LDAsMCwwLS4wOC4xOVY3LjkzYS4yNy4yNywwLDAsMCwuMDguMTkuMzIuMzIsMCwwLDAsLjIxLjA4SDE5LjgzQS4zMi4zMiwwLDAsMCwyMCw4LjEyYS4yNi4yNiwwLDAsMCwuMDgtLjJWNi4yMlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDMgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICB0YWJsZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTQuNDEsOC4wNVYzLjc2SDguN1Y4LjA1SDQuNDFabTUuNzEsMFYzLjc2aDQuM1Y4LjA1aC00LjNabTUuNzQtNC4yOWg0LjI5VjguMDVIMTUuODZWMy43NlptLTExLjQ1LDEwVjkuNDhIOC43djQuM0g0LjQxWm01LjcxLDBWOS40OGg0LjN2NC4zaC00LjNabTUuNzQsMFY5LjQ4aDQuMjl2NC4zSDE1Ljg2Wk00LjQxLDE5LjVWMTUuMjFIOC43VjE5LjVINC40MVptNS43MSwwVjE1LjIxaDQuM1YxOS41aC00LjNabTUuNzQsMFYxNS4yMWg0LjI5VjE5LjVIMTUuODZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgaG9yaXpvbnRhbF9ydWxlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAyLjI0XCI+PGc+PHBhdGggZD1cIk0yMC4xNSwxMi43NVYxMC41MUg0LjQxdjIuMjRIMjAuMTVaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC0xMC41MSlcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHNob3dfYmxvY2tzOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS42NiAxNS42N1wiPjxnPjxwYXRoIGQ9XCJNMTkuNzIsNS41OGExLjY0LDEuNjQsMCwwLDAtMS42NC0xLjY0SDYuMjNhMS42MiwxLjYyLDAsMCwwLTEuMTYuNDgsMS42MywxLjYzLDAsMCwwLS40OCwxLjE2VjkuNjNhMS42LDEuNiwwLDAsMCwuNDgsMS4xNiwxLjYyLDEuNjIsMCwwLDAsMS4xNi40N0gxOC4wOWExLjY3LDEuNjcsMCwwLDAsMS4xNi0uNDcsMS42MiwxLjYyLDAsMCwwLC40OC0xLjE2VjUuNThabS0uOTQsNC4wNWEuNjguNjgsMCwwLDEtLjcuN0g2LjIzYS42Ni42NiwwLDAsMS0uNDgtLjIuNzQuNzQsMCwwLDEtLjIxLS41VjUuNThhLjY2LjY2LDAsMCwxLC4yLS40OC43MS43MSwwLDAsMSwuNDgtLjIxSDE4LjA4YS43NC43NCwwLDAsMSwuNS4yMS42Ni42NiwwLDAsMSwuMi40OFpNNi40OCw3LjcyYS4yMS4yMSwwLDAsMCwuMTctLjA3LjIyLjIyLDAsMCwwLC4wNy0uMTdWNy4wNmExLjI3LDEuMjcsMCwwLDEsLjExLS41Mi4zNy4zNywwLDAsMSwuMzYtLjIzSDguNzdBLjI1LjI1LDAsMCwwLDksNi4xN2EuMTkuMTksMCwwLDAsMC0uMjMuMjcuMjcsMCwwLDAtLjItLjEySDcuMTlhLjg4Ljg4LDAsMCwwLS43Mi4zOSwxLjUxLDEuNTEsMCwwLDAtLjIzLjg1di40MmEuMjQuMjQsMCwwLDAsLjI0LjI0Wm0tLjE5LjgxYS4yMS4yMSwwLDAsMCwuMTctLjA3LjI2LjI2LDAsMCwwLC4wNy0uMTcuMjQuMjQsMCwwLDAtLjI0LS4yNC4yLjIsMCwwLDAtLjE2LjA5LjIuMiwwLDAsMC0uMDcuMTYuMjIuMjIsMCwwLDAsLjA3LjE3LjIzLjIzLDAsMCwwLC4xNi4wNlptOC40Niw1LjFhMS42MywxLjYzLDAsMCwwLS40Ny0xLjE2QTEuNjEsMS42MSwwLDAsMCwxMy4xMiwxMkg2LjIzYTEuNiwxLjYsMCwwLDAtMS4xNi40NiwxLjYyLDEuNjIsMCwwLDAtLjQ4LDEuMTZ2NC4wNWExLjY0LDEuNjQsMCwwLDAsMS42NCwxLjY0aDYuODlhMS42LDEuNiwwLDAsMCwxLjE2LS40OCwxLjYyLDEuNjIsMCwwLDAsLjQ3LTEuMTZabS0uOTQsNGEuNy43LDAsMCwxLS4yLjQ5LjY1LjY1LDAsMCwxLS41LjJINi4yM2EuNjYuNjYsMCwwLDEtLjQ4LS4yLjc1Ljc1LDAsMCwxLS4yMS0uNDl2LTRhLjc0Ljc0LDAsMCwxLC4yMS0uNS42Ni42NiwwLDAsMSwuNDgtLjJoNi44OWEuNjguNjgsMCwwLDEsLjcuN3Y0Wm02LjE1LDB2LTRhMS42LDEuNiwwLDAsMC0uNDgtMS4xNkExLjY3LDEuNjcsMCwwLDAsMTguMzIsMTJIMTcuMWExLjYzLDEuNjMsMCwwLDAtMS4xNi40NywxLjYxLDEuNjEsMCwwLDAtLjQ3LDEuMTZ2NGExLjY3LDEuNjcsMCwwLDAsLjQ3LDEuMTYsMS42MiwxLjYyLDAsMCwwLDEuMTYuNDhoMS4yMkExLjY0LDEuNjQsMCwwLDAsMjAsMTcuNjhabS0uOTQtNHY0YS43NS43NSwwLDAsMS0uMjEuNDkuNjIuNjIsMCwwLDEtLjQ4LjJIMTcuMTFhLjY5LjY5LDAsMCwxLS41LS4yLjcuNywwLDAsMS0uMi0uNDl2LTRhLjY4LjY4LDAsMCwxLC43LS43aDEuMjJhLjY2LjY2LDAsMCwxLC40OC4yLjcyLjcyLDAsMCwxLC4yMS41WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40NCAtMy43OSlcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGNhbmNlbDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTE0LjE1LDExLjYzbDUuNjEsNS42MWExLjI5LDEuMjksMCwwLDEsLjM4LjkzLDEuMjcsMS4yNywwLDAsMS0uNC45MywxLjI1LDEuMjUsMCwwLDEtLjkyLjQsMS4zMSwxLjMxLDAsMCwxLS45NC0uNGwtNS42MS01LjYxTDYuNjcsMTkuMWExLjMxLDEuMzEsMCwwLDEtLjk0LjQsMS4yNCwxLjI0LDAsMCwxLS45Mi0uNCwxLjI3LDEuMjcsMCwwLDEtLjQtLjkzLDEuMzMsMS4zMywwLDAsMSwuMzgtLjkzbDUuNjEtNS42M0w0Ljc5LDZhMS4yNiwxLjI2LDAsMCwxLS4zOC0uOTMsMS4yMiwxLjIyLDAsMCwxLC40LS45MiwxLjI4LDEuMjgsMCwwLDEsLjkyLS4zOSwxLjM4LDEuMzgsMCwwLDEsLjk0LjM4bDUuNjEsNS42MSw1LjYxLTUuNjFhMS4zMywxLjMzLDAsMCwxLC45NC0uMzgsMS4yNiwxLjI2LDAsMCwxLC45Mi4zOSwxLjI0LDEuMjQsMCwwLDEsLjQuOTIsMS4yOSwxLjI5LDAsMCwxLS4zOS45M0wxNyw4LjgxbC0yLjgsMi44MlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBpbWFnZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzUgMTUuNzdcIj48Zz48cGF0aCBkPVwiTTguNzcsOC43MmEuODguODgsMCwwLDEtLjYxLS4yNy44Mi44MiwwLDAsMS0uMjUtLjYxLjg5Ljg5LDAsMCwxLC4yNS0uNjJBLjgyLjgyLDAsMCwxLDguNzcsN2EuODEuODEsMCwwLDEsLjYxLjI1LjgzLjgzLDAsMCwxLC4yNy42Mi44MS44MSwwLDAsMS0uMjUuNjEuOTEuOTEsMCwwLDEtLjYzLjI3Wm05LjYyLTVhMS43NCwxLjc0LDAsMCwxLDEuNzYsMS43NlYxNy43NmExLjc0LDEuNzQsMCwwLDEtMS43NiwxLjc2SDYuMTZBMS43NCwxLjc0LDAsMCwxLDQuNCwxNy43NlY1LjUxQTEuNzQsMS43NCwwLDAsMSw2LjE2LDMuNzVIMTguMzlabTAsMS43NUg2LjE2djhMOC41MywxMS44YS45NC45NCwwLDAsMSwuNTQtLjE3Ljg2Ljg2LDAsMCwxLC41NC4yTDExLjA5LDEzbDMuNjQtNC41NWEuNzguNzgsMCwwLDEsLjM0LS4yNS44NS44NSwwLDAsMSwuNDItLjA3Ljg5Ljg5LDAsMCwxLC4zOS4xMi43OC43OCwwLDAsMSwuMjguMjlsMi4yNCwzLjY3VjUuNTFabTAsMTIuMjRWMTUuNkwxNS4zLDEwLjUzLDExLjg5LDE0LjhhLjg5Ljg5LDAsMCwxLS41OS4zMi44Mi44MiwwLDAsMS0uNjQtLjE4TDksMTMuNjIsNi4xNiwxNS43NHYyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40IC0zLjc1KVwiLz48L2c+PC9zdmc+JyxcclxuICAgdmlkZW86ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDE0LjU1XCI+PGc+PHBhdGggZD1cIk0yMC4xNSwxMC4yNlYxOC45bC0zLjk0LTEuNTd2MS4ySDQuNDFWMTAuNjZIMTYuMjJ2MS4yM2wyLS44MSwyLS44MlpNMTQuNjQsMTdoMFYxMi41NGgwdi0uMzFINlYxN2g4LjY3Wm0zLjk0LS4zN3YtNGwtMi4zNywxdjJsMS4xOC40OCwxLjE5LjQ4Wk03Ljk0LDkuODZBMi43NywyLjc3LDAsMCwxLDUuMTksNy4xMWEyLjc2LDIuNzYsMCwwLDEsNS41MSwwQTIuNzgsMi43OCwwLDAsMSw3Ljk0LDkuODZabTAtMy45M2ExLjIxLDEuMjEsMCwwLDAtLjgzLjM1LDEuMTUsMS4xNSwwLDAsMC0uMzQuODRBMS4wOSwxLjA5LDAsMCwwLDcuMTEsOCwxLjE1LDEuMTUsMCwwLDAsOCw4LjI4LDEuMTMsMS4xMywwLDAsMCw5LjExLDcuMTIsMS4xNiwxLjE2LDAsMCwwLDcuOTQsNS45M1ptNS45LDMuOTNhMi4zNCwyLjM0LDAsMCwxLTEuNjctLjY4LDIuMywyLjMsMCwwLDEtLjY4LTEuNjcsMi4zNSwyLjM1LDAsMCwxLDQtMS42NywyLjM3LDIuMzcsMCwwLDEsMCwzLjM0LDIuMzMsMi4zMywwLDAsMS0xLjY4LjY4Wm0wLTMuMTRhLjc1Ljc1LDAsMSwwLC41NS4yMi43My43MywwLDAsMC0uNTUtLjIyWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNC4zNSlcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGxpbms6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDE1LjcyXCI+PGc+PHBhdGggZD1cIk0xMy4wNSwxMy42M2EuMjQuMjQsMCwwLDEsLjE1LjIyTDEzLjQyLDE2YS4xOS4xOSwwLDAsMS0uMDguMThsLTIuMTIsMi4xNGE0LjA4LDQuMDgsMCwwLDEtMS4yOS44NUE0LDQsMCwwLDEsNC43MSwxN2EzLjkyLDMuOTIsMCwwLDEtLjMtMS41MkE0LDQsMCwwLDEsNC43MSwxNGEzLjkxLDMuOTEsMCwwLDEsLjg3LTEuM0w3LjcsMTAuNTZhLjI1LjI1LDAsMCwxLC4yLS4wNmwyLjE3LjIyYS4yMS4yMSwwLDAsMSwuMTkuMTUuMjQuMjQsMCwwLDEsMCwuMjVMNy4xMiwxNC4yM2ExLjgxLDEuODEsMCwwLDAsMCwyLjU4LDEuNzgsMS43OCwwLDAsMCwxLjI5LjUyLDEuNzQsMS43NCwwLDAsMCwxLjI4LS41MkwxMi44LDEzLjdhLjI0LjI0LDAsMCwxLC4yNS0uMDdaTTE5LDQuOTJhNCw0LDAsMCwxLDAsNS42NkwxNi44NiwxMi43YS4yNS4yNSwwLDAsMS0uMTcuMDhsLTIuMi0uMjNhLjIxLjIxLDAsMCwxLS4xOS0uMTUuMjIuMjIsMCwwLDEsMC0uMjVMMTcuNDQsOWExLjgxLDEuODEsMCwwLDAsMC0yLjU4LDEuNzgsMS43OCwwLDAsMC0xLjI5LS41MiwxLjc0LDEuNzQsMCwwLDAtMS4yOC41MkwxMS43Niw5LjU3YS4yMS4yMSwwLDAsMS0uMjUsMCwuMjQuMjQsMCwwLDEtLjE2LS4yMWwtLjIyLTIuMTdhLjE5LjE5LDAsMCwxLC4wOC0uMThsMi4xMi0yLjE0YTQuMDgsNC4wOCwwLDAsMSwxLjI5LS44NSw0LjA1LDQuMDUsMCwwLDEsMy4wNiwwLDMuODUsMy44NSwwLDAsMSwxLjMuODVaTTUuODQsOS44MmEuMjUuMjUsMCwwLDEtLjE4LS4wOC4xOS4xOSwwLDAsMS0uMDctLjE5bC4xMS0uNzdhLjIuMiwwLDAsMSwuMTEtLjE3LjI0LjI0LDAsMCwxLC4yLDBsMi41LjcyYS4yNS4yNSwwLDAsMSwuMTUuMjcuMjIuMjIsMCwwLDEtLjIzLjIxbC0yLjU5LDBabTQuMTItMi0uNzMtMi41YS4yNy4yNywwLDAsMSwwLS4yQS4yMS4yMSwwLDAsMSw5LjQxLDVMMTAuMTksNWEuMjUuMjUsMCwwLDEsLjE5LDAsLjIzLjIzLDAsMCwxLC4wOC4xOGwtLjA1LDIuNjFhLjIuMiwwLDAsMS0uMTkuMjNoMEEuMjIuMjIsMCwwLDEsMTAsNy44NVptOC43Niw1LjU4YS4yNS4yNSwwLDAsMSwuMTguMDguMjMuMjMsMCwwLDEsLjA2LjJsLS4xMS43N2EuMjUuMjUsMCwwLDEtLjExLjE3LjIxLjIxLDAsMCwxLS4xMiwwbC0uMDgsMEwxNiwxNGEuMjUuMjUsMCwwLDEtLjE1LS4yNy4yMi4yMiwwLDAsMSwuMjItLjIxbDEuMjksMCwxLjMzLDBabS00LjEyLDIsLjc0LDIuNTFhLjI4LjI4LDAsMCwxLDAsLjIuMjMuMjMsMCwwLDEtLjE4LjExbC0uOC4xMWEuMjMuMjMsMCwwLDEtLjE3LS4wNy4yNS4yNSwwLDAsMS0uMDgtLjE4bDAtMi42MWEuMjIuMjIsMCwwLDEsLjIyLS4yMi4yMS4yMSwwLDAsMSwuMjYuMTVaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC0zLjc3KVwiLz48L2c+PC9zdmc+JyxcclxuICAgbWF0aDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTEuODEgMTUuNzNcIj48Zz48cGF0aCBkPVwiTTE3LjE5LDUuNzNhMSwxLDAsMCwwLC43MS0uMjksMSwxLDAsMCwwLC4yOC0uNywxLDEsMCwwLDAtMS0xSDcuMzVhMSwxLDAsMCwwLTEsMSwuNzcuNzcsMCwwLDAsLjEzLjQ3aDBsNC41OCw2LjQzTDYuNjgsMTcuODFhMS4yNSwxLjI1LDAsMCwwLS4yOS43MS45NC45NCwwLDAsMCwuMjguNy45Mi45MiwwLDAsMCwuNjkuMjhIMTcuMmExLDEsMCwwLDAsLjcxLS4yOCwxLDEsMCwwLDAsMC0xLjM5LjkyLjkyLDAsMCwwLS43MS0uMjlIOS4yNmwzLjg3LTUuNDNhLjg2Ljg2LDAsMCwwLDAtLjk1TDkuMjYsNS43M2g3LjkzWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNi4zOCAtMy43NylcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHVubGluazogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzJcIj48Zz48cGF0aCBkPVwiTTE5LDE4LjMyYTQsNCwwLDAsMCwwLTUuNjhMMTUuODUsOS41bC0xLjE3LDEuNTVMMTcuNTcsMTRhMiwyLDAsMCwxLC42MSwxLjQ3LDIuMDgsMi4wOCwwLDAsMS0yLjA5LDIuMDksMiwyLDAsMCwxLTEuNDctLjYxbC0uMzgtLjM3LTEuNzQsMSwuOC43OGE0LDQsMCwwLDAsNS42OCwwWk04LDkuNzdhMiwyLDAsMCwxLTEuMjctMSwxLjg5LDEuODksMCwwLDEtLjIxLTEuNTdBMi4xLDIuMSwwLDAsMSw3LjQ1LDYsMiwyLDAsMCwxLDksNS43NkwxMi4yNyw3LjJsLjQ5LTJMOS40OCwzLjlhNCw0LDAsMCwwLTMuMDYuNDFBMy44MiwzLjgyLDAsMCwwLDQuNTYsNi43M2EzLjgsMy44LDAsMCwwLC40LDNBMy43OCwzLjc4LDAsMCwwLDcuMzksMTEuNmw1LjM4LDIsLjQ5LTItMi42NC0uOTRMOCw5Ljc3WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIHRhYmxlX2hlYWRlcjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzUgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTE3LDE5LjV2LS43OEgxNS41di43OEgxN1ptLTMsMHYtLjc4SDEyLjV2Ljc4SDE0Wm0tMywwdi0uNzhIOS41M3YuNzhIMTFabS0zLDB2LS43OEg2LjUzdi43OEg4Wm0xMC41NSwwYTEuNzMsMS43MywwLDAsMCwuODUtLjM1LDEuNjcsMS42NywwLDAsMCwuNTYtLjc2bC0uNzEtLjMxYTEuMjEsMS4yMSwwLDAsMS0uMzUuNCwxLjM0LDEuMzQsMCwwLDEtLjUzLjIzbC4wOC4zOGMuMDYuMjQuMDkuMzguMS40MVptLTEzLjctLjYzLjU1LS41NUEuNzcuNzcsMCwwLDEsNS4yNSwxOGExLjMxLDEuMzEsMCwwLDEtLjA2LS4zOHYtLjM4SDQuNDF2LjM4YTIsMiwwLDAsMCwuMTIuNjgsMS42LDEuNiwwLDAsMCwuMzUuNTdabTE1LjI3LTIuMTJWMTUuMjZoLS43OHYxLjQ5aC43OFptLTE1LTFWMTQuMjNINC40MXYxLjQ5aC43OFptMTUtMlYxMi4yNmgtLjc4djEuNDloLjc4Wm0tMTUtMVYxMS4yMkg0LjQxdjEuNTFoLjc4Wm0xNS0yVjkuMjZoLS43OHYxLjUxaC43OFptLTE1LTFWOC4xN0g0LjQxVjkuNzRoLjc4Wm0xNS0yVjYuMjhoLS43OFY3Ljc3aC43OFptLTE1LTEuMTFWNS4zM0w0LjQ4LDUuMWEuNzcuNzcsMCwwLDAtLjA3LjI3LDIuNzIsMi43MiwwLDAsMCwwLC4yOHYxaC43OVpNMTkuMjEsNWwuNjMtLjRBMS42MiwxLjYyLDAsMCwwLDE5LjE2LDRhMS45NCwxLjk0LDAsMCwwLS45MS0uMjJ2Ljc4YTEuMzEsMS4zMSwwLDAsMSwuNTYuMTIuODguODgsMCwwLDEsLjQuMzZaTTYsNC41NEg3Ljc4VjMuNzZINmEuODIuODIsMCwwLDAtLjI4LjA2bC4xMi4zNWMuMDcuMjEuMS4zMy4xMS4zNlptMTAuOCwwVjMuNzZIMTUuMjh2Ljc4aDEuNDlabS0zLDBWMy43NkgxMi4yOHYuNzhoMS40OVptLTMsMFYzLjc2SDkuMjh2Ljc4aDEuNTFaTTYsMTAuODRoMTIuNlY2LjkxSDZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBtZXJnZV9jZWxsOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NiAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTguOTIsMTMuNWgxLjIzdjQuMTVBMS44NCwxLjg0LDAsMCwxLDE4LjMsMTkuNUgxNFYxOC4yN0gxOC4zYS42LjYsMCwwLDAsLjQ0LS4xOC41OS41OSwwLDAsMCwuMTgtLjQ0VjEzLjVaTTE4LjMsMy43NmExLjg0LDEuODQsMCwwLDEsMS44NSwxLjg1VjkuODJIMTguOTJWNS42YS42LjYsMCwwLDAtLjE4LS40NEEuNTkuNTksMCwwLDAsMTguMyw1SDE0VjMuNzZIMTguM1ptMS44NSw4LjUxSDE1LjZMMTcuMjYsMTRsLS44Ni44Ni0zLjE0LTMuMTdMMTYuNCw4LjUxbC44Ni44NkwxNS42MiwxMWg0LjU0djEuMjRabS0xMy45LDZoNC4yN1YxOS41SDYuMjVBMS44NCwxLjg0LDAsMCwxLDQuNCwxNy42NVYxMy41SDUuNjN2NC4xNWEuNjEuNjEsMCwwLDAsLjYyLjYyWm0wLTE0LjUxaDQuMjdWNUg2LjI1YS42LjYsMCwwLDAtLjQ0LjE4LjU3LjU3LDAsMCwwLS4xNy40M1Y5LjgxSDQuNDFWNS42QTEuODMsMS44MywwLDAsMSw2LjI1LDMuNzZabTUsNy45TDguMTUsMTQuODMsNy4zLDE0LDksMTIuMjdINC40MVYxMUg4Ljk0TDcuMyw5LjM4LDcuNzMsOWwuNDMtLjQzWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40IC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgc3BsaXRfY2VsbDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzUgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTEwLjM3LDEyLjI1SDYuNzRMOC40LDEzLjk0bC0uODcuODZMNC40MSwxMS42Myw3LjUzLDguNWwuODcuODZMNi43NCwxMWgzLjYydjEuMjNabTkuNzgtLjYxTDE3LDE0LjgxLDE2LjEzLDE0bDEuNjYtMS42OUgxNC4xNlYxMWgzLjYzTDE2LjEzLDkuMzdsLjQzLS40M0E1LjI0LDUuMjQsMCwwLDEsMTcsOC41MVpNMTguOSw4LjIyVjUuNjFhLjU3LjU3LDAsMCwwLS4xOC0uNDNBLjY1LjY1LDAsMCwwLDE4LjI5LDVIMTIuODhWMTguMjhoNS40MWEuNy43LDAsMCwwLC40NC0uMTguNTcuNTcsMCwwLDAsLjE4LS40M1YxNWgxLjIzdjIuNjRhMS44NCwxLjg0LDAsMCwxLTEuODUsMS44M2gtMTJBMS44NCwxLjg0LDAsMCwxLDQuOTQsMTlhMS44MSwxLjgxLDAsMCwxLS41NC0xLjI5VjE1SDUuNjN2Mi42NGEuNTcuNTcsMCwwLDAsLjE4LjQzLjY3LjY3LDAsMCwwLC40NC4xOGg1LjQxVjVINi4yNWEuNy43LDAsMCwwLS40NC4xOC41Ni41NiwwLDAsMC0uMTcuNDNWOC4yMkg0LjQxVjUuNjFBMS44LDEuOCwwLDAsMSw1LDQuMzFhMS45MSwxLjkxLDAsMCwxLDEuMzEtLjU1aDEyYTEuODksMS44OSwwLDAsMSwxLjMxLjU1LDEuOCwxLjgsMCwwLDEsLjU0LDEuM1Y4LjIzSDE4LjlaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBjYXB0aW9uOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NCAxMy43OVwiPjxnPjxwYXRoIGQ9XCJNNC40MSwxOC41MkgyMC4xNXYtMkg0LjQxWk0yMCw0LjczSDE4LjA3VjZoLjY1di42NUgyMFY0LjczWk0xNyw2VjQuNzNIMTQuNTVWNkgxN1pNMTMuNDksNlY0LjczSDExVjZoMi40N1pNMTAsNlY0LjczSDcuNVY2SDEwWk01Ljc5LDZoLjY1VjQuNzNINC41VjYuNjdINS44VjZaTTQuNSwxMS4zNEg1Ljc5VjguNDhINC41Wk02LjQ0LDEzLjhINS43OXYtLjY1SDQuNXYxLjk0SDYuNDRaTTE3LDE1LjA5VjEzLjhIMTQuNTV2MS4yOUgxN1ptLTMuNTIsMFYxMy44SDExdjEuMjloMi40N1ptLTMuNTMsMFYxMy44SDcuNXYxLjI5SDEwWk0yMCwxMy4xNkgxOC43MnYuNjVoLS42NVYxNS4xSDIwWm0tMS4yOS0xLjgySDIwVjguNDhoLTEuM3YyLjg2WlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC40MSAtNC43MylcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGVkaXQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDE1LjczXCI+PGc+PHBhdGggZD1cIk03LjUxLDUuNjhoNmwxLjUyLTEuNTdINi45NGEyLjQsMi40LDAsMCwwLTEuNzkuODJBMi44LDIuOCwwLDAsMCw0LjQxLDYuOFYxN2EyLjU1LDIuNTUsMCwwLDAsLjc1LDEuOEEyLjQ4LDIuNDgsMCwwLDAsNywxOS41SDE3LjIyYTIuNTcsMi41NywwLDAsMCwxLjgzLS43NCwyLjUyLDIuNTIsMCwwLDAsLjc3LTEuOFY4LjgzbC0xLjU4LDEuNTR2NmExLjU0LDEuNTQsMCwwLDEtMS41MywxLjUzSDcuNTFBMS41NCwxLjU0LDAsMCwxLDYsMTYuNDFWNy4yMUExLjUyLDEuNTIsMCwwLDEsNy41MSw1LjY4Wm01LjYzLDcuNDdoMEwxMC43LDEwLjc0bC0xLDMuMzgsMS43MS0uNDgsMS43LS40OVptLjM0LS4zNGgwbDUuMzYtNS4zMkwxNi40LDUuMDgsMTEsMTAuNGwxLjIzLDEuMjEsMS4yMSwxLjJaTTE5LjkzLDYuNGEuODIuODIsMCwwLDAsLjIyLS40OEEuNTQuNTQsMCwwLDAsMjAsNS40N0wxOC40NSw0QS42Ny42NywwLDAsMCwxOCwzLjc3YS43LjcsMCwwLDAtLjQ4LjIxbC0uNzQuNzIsMi40NCwyLjQzLjM3LS4zNy4zNS0uMzZaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC0zLjc3KVwiLz48L2c+PC9zdmc+JyxcclxuICAgZGVsZXRlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43MyAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTkuMTYsNi43MWEuOTQuOTQsMCwwLDAsLjY5LS4yOC45MS45MSwwLDAsMCwuMjktLjY4QTEsMSwwLDAsMCwxOS44NSw1YS45My45MywwLDAsMC0uNjktLjNIMTQuMjRBLjk0Ljk0LDAsMCwwLDE0LDQuMDZhLjkyLjkyLDAsMCwwLS43LS4zaC0yYTEsMSwwLDAsMC0uNy4zLjkzLjkzLDAsMCwwLS4yOC42OEg1LjM5QS45Mi45MiwwLDAsMCw0LjcsNWExLDEsMCwwLDAtLjI5LjcxLjkxLjkxLDAsMCwwLC4yOS42OCwxLDEsMCwwLDAsLjY5LjI4SDE5LjE2Wm0tMTIuNzksMWExLDEsMCwwLDAtLjcuMy45NC45NCwwLDAsMC0uMjguNjl2OC44NUExLjg4LDEuODgsMCwwLDAsNiwxOC45M2ExLjksMS45LDAsMCwwLDEuMzkuNTdIMTcuMmExLjg3LDEuODcsMCwwLDAsMS4zOS0uNTgsMS45MSwxLjkxLDAsMCwwLC41OC0xLjM5VjguNjhBMSwxLDAsMCwwLDE4Ljg4LDhhLjg5Ljg5LDAsMCwwLS43LS4yOSwxLDEsMCwwLDAtLjY5LjI5LjkyLjkyLDAsMCwwLS4yOS42OHY3Ljg3YTEsMSwwLDAsMS0xLDFIOC4zNGEuOTQuOTQsMCwwLDEtLjY5LS4yOCwxLDEsMCwwLDEtLjI5LS43MVY4LjY4YTEsMSwwLDAsMC0xLTFaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgbW9kaWZ5OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43IDE1Ljc0XCI+PGc+PHBhdGggZD1cIk0xOS43OSwxNS4yM2EuNjYuNjYsMCwwLDEsLjMuMzguNTkuNTksMCwwLDEtLjA3LjQ4bC0uOCwxLjM4YS42Ni42NiwwLDAsMS0uMzguMy41OS41OSwwLDAsMS0uNDgtLjA3bC0uNjgtLjM4YTQuNTUsNC41NSwwLDAsMS0xLjM0Ljc3di43OGEuNjQuNjQsMCwwLDEtLjE4LjQ1LjYxLjYxLDAsMCwxLS40NS4xOGgtMS42YS42LjYsMCwwLDEtLjQ0LS4xOC42Ni42NiwwLDAsMS0uMTktLjQ1di0uNzhhNC4zNiw0LjM2LDAsMCwxLTEuMzItLjc3bC0uNjkuMzhhLjU4LjU4LDAsMCwxLS40OC4wNy42Ni42NiwwLDAsMS0uMzgtLjNsLS4zOC0uNjZoLjgzYTEuNzcsMS43NywwLDAsMCwxLjIzLS41MiwxLjcyLDEuNzIsMCwwLDAsLjUxLTEuMjN2LS4xOGEzLDMsMCwwLDAsLjQ5LS4yOGwuMTUuMDlhMS44MywxLjgzLDAsMCwwLC44OC4yM0ExLjc1LDEuNzUsMCwwLDAsMTUuODQsMTRsLjg4LTEuNTJhMS43LDEuNywwLDAsMCwuMTctMS4zMiwxLjY2LDEuNjYsMCwwLDAtLjMtLjYxLDEuODQsMS44NCwwLDAsMC0uNTEtLjQ1bC0uMTUtLjA5LDAtLjI5LDAtLjI4LjE1LS4wOWExLDEsMCwwLDAsLjI2LS4xOGwwLC4wNnYuNzhhNC4zNCw0LjM0LDAsMCwxLDEuMzQuNzdsLjY4LS4zOGEuNjguNjgsMCwwLDEsLjQ4LS4wNi42NC42NCwwLDAsMSwuMzguMjlsLjgsMS4zOGEuNTguNTgsMCwwLDEsLjA3LjQ4LjYzLjYzLDAsMCwxLS4zLjM4bC0uNjguNGEzLjg0LDMuODQsMCwwLDEsLjA4Ljc2LDQuMTMsNC4xMywwLDAsMS0uMDguNzhsLjM0LjE4LjMyLjJaTTEwLjE3LDcuODZhMS45LDEuOSwwLDAsMSwxLjM1LDMuMjMsMS44NSwxLjg1LDAsMCwxLTEuMzUuNTVBMS45LDEuOSwwLDAsMSw4LjgzLDguNDFhMS45MiwxLjkyLDAsMCwxLDEuMzQtLjU1Wm0xLjU4LDcuMmEuNzMuNzMsMCwwLDEtLjIxLjQ5LjY2LjY2LDAsMCwxLS40OC4ySDkuMjlhLjY4LjY4LDAsMCwxLS42OS0uNjlWMTQuMmE0Ljc1LDQuNzUsMCwwLDEtMS40OC0uODZsLS43NS40NWEuNzMuNzMsMCwwLDEtLjcsMCwuNjMuNjMsMCwwLDEtLjI1LS4yNkw0LjU0LDEyYS42Ny42NywwLDAsMS0uMDgtLjUzLjcxLjcxLDAsMCwxLC4zMi0uNDJsLjc1LS40M2E0LjgsNC44LDAsMCwxLS4wOC0uODUsNC43MSw0LjcxLDAsMCwxLC4wOC0uODVsLS43NC0uNDRhLjcxLjcxLDAsMCwxLS4zMi0uNDIuNjUuNjUsMCwwLDEsLjA3LS41NEw1LjQyLDZhLjY2LjY2LDAsMCwxLC40Mi0uMzJsLjE4LDBhLjczLjczLDAsMCwxLC4zNS4wOWwuNzUuNDNBNC42OCw0LjY4LDAsMCwxLDguNiw1LjMzVjQuNDVhLjY4LjY4LDAsMCwxLC42OS0uNjloMS43N2EuNjQuNjQsMCwwLDEsLjQ4LjIuNzMuNzMsMCwwLDEsLjIxLjQ5di44OGE0Ljc1LDQuNzUsMCwwLDEsMS40OC44NUwxNCw1Ljc1YS42Ny42NywwLDAsMSwuMzQtLjA5bC4xOCwwYS43MS43MSwwLDAsMSwuNDIuMzJsLjg5LDEuNTRhLjY3LjY3LDAsMCwxLC4wNi41Mi43My43MywwLDAsMS0uMzIuNDNsLS43NS40MmE0LjgsNC44LDAsMCwxLC4wOC44NSw0LjcxLDQuNzEsMCwwLDEtLjA4Ljg1bC43NS40M2EuNjYuNjYsMCwwLDEsLjMyLjQyLjczLjczLDAsMCwxLS4wNi41NGwtLjg5LDEuNTJhLjY5LjY5LDAsMCwxLS4yNS4yNi43LjcsMCwwLDEtLjM1LjA5LjY0LjY0LDAsMCwxLS4zNC0uMDlsLS43NS0uNDVhNC44Nyw0Ljg3LDAsMCwxLTEuNDguODZ2Ljg3Wk03LjIzLDkuNzVhMywzLDAsMCwwLC44NiwyLjA4LDIuOTQsMi45NCwwLDEsMCw0LjE2LTQuMTYsMywzLDAsMCwwLTIuMDgtLjg1QTIuOTQsMi45NCwwLDAsMCw3LjIzLDkuNzVaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQ0IC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgcmV2ZXJ0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43NiAxNC42OVwiPjxnPjxwYXRoIGQ9XCJNMTguMjYsMTVWMTIuM2wxLjg5LTJWMTVhMi41OCwyLjU4LDAsMCwxLS4yNCwxYy0uMi41OC0uNzUuOTItMS42NSwxSDcuNTZ2Mkw0LjQxLDE1LjYzLDcuNTYsMTN2MmgxMC43Wk02LjMsOC4yOFYxMUw0LjQxLDEzVjguMjhhMi41OCwyLjU4LDAsMCwxLC4yNC0xYy4yLS41OC43NS0uOTIsMS42NS0xSDE3di0ybDMuMTUsMy4zNEwxNywxMC4zdi0ySDYuM1pcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNCAtNC4yOClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGF1dG9fc2l6ZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzQgMTUuNzRcIj48Zz48cGF0aCBkPVwiTTYuNzEsMTcuMTksNi44OSwxNmwxLjIxLS4xNUE2LDYsMCwwLDEsNi44MSwxMy45YTUuNzgsNS43OCwwLDAsMS0uNDUtMi4yN0E2LDYsMCwwLDEsOC4xLDcuNDVhNS44Myw1LjgzLDAsMCwxLDQuMTctMS43M2wxLTEtMS0xQTcuODksNy44OSwwLDAsMCw1LDE0LjY0YTcuNzMsNy43MywwLDAsMCwxLjcxLDIuNTVabTUuNTcsMi4zMWgwQTcuODYsNy44NiwwLDAsMCwxNy44NSw2LjA3TDE3LjY3LDcuM2wtMS4yMS4xNWE1LjksNS45LDAsMCwxLDEuMjksMS45Miw1LjgxLDUuODEsMCwwLDEsLjQ1LDIuMjYsNS45MSw1LjkxLDAsMCwxLTUuOSw1LjlsLTEsMSwuNDkuNDkuNDcuNVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBpbnNlcnRfcm93X2JlbG93OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS44IDE1LjhcIj48Zz48cGF0aCBkPVwiTTE1LjcsMS4zYy0wLjEtMC4xLTAuMS0wLjItMC4yLTAuMkwxNS4zLDFIMC40TDAuMywxLjFjMCwwLTAuMSwwLjEtMC4xLDAuMWMwLDAtMC4xLDAuMS0wLjEsMC4xTDAsMS40djcuN2wwLjEsMC4xYzAsMC4xLDAuMSwwLjEsMC4yLDAuMmwwLjEsMC4xaDIuM1Y5LjNsMC4xLTAuNUwzLDguNWwwLjEtMC4yYy0wLjEsMC0wLjIsMC0wLjMsMEgxLjJ2LTZoMTMuM3Y2aC0xLjZjLTAuMSwwLTAuMiwwLTAuMywwbDAuMSwwLjJsMC4yLDAuNEMxMi45LDksMTMsOS4yLDEzLDkuM3YwLjFoMi4zbDAuMi0wLjFjMC4xLDAsMC4xLTAuMSwwLjItMC4ybDAuMS0wLjFWMS40TDE1LjcsMS4zelwiLz48cGF0aCBkPVwiTTEwLjUsNy41QzkuOSw3LjEsOS4zLDYuOCw4LjYsNi43Yy0wLjIsMC0wLjUtMC4xLTAuNywwYy0wLjIsMC0wLjUsMC0wLjcsMEM2LjYsNi43LDYuMSw2LjksNS42LDcuM0M1LjIsNy42LDQuNyw4LDQuNCw4LjRDNC4zLDguNiw0LjIsOC44LDQuMiw4LjlDNC4xLDkuMSw0LDkuMywzLjksOS40QzMuOSw5LjYsMy44LDkuNywzLjgsOS45YzAsMC4yLTAuMSwwLjMtMC4xLDAuNXYtMC4xYy0wLjEsMC44LDAuMSwxLjYsMC41LDIuNGMwLjQsMC43LDEsMS4zLDEuNywxLjdjMC4zLDAuMiwwLjYsMC4zLDAuOSwwLjNjMC4zLDAuMSwwLjcsMC4xLDEsMC4xYzAuMywwLDAuNywwLDEtMC4xYzAuMy0wLjEsMC42LTAuMiwwLjktMC4zYzAuNS0wLjMsMC45LTAuNiwxLjMtMWMwLjMtMC40LDAuNi0wLjgsMC44LTEuM2MwLjEtMC40LDAuMi0wLjksMC4yLTEuNGMwLTAuNS0wLjEtMS0wLjMtMS40QzExLjUsOC42LDExLjEsOCwxMC41LDcuNXogTTEwLjEsMTEuM0g4LjV2MS42SDhINy45SDcuM3Ywdi0wLjF2LTEuNEg1Ljd2LTAuNHYtMC4ydi0wLjZoMGgxLjVWOC41aDEuMnYxLjZoMS42VjExLjN6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICBpbnNlcnRfcm93X2Fib3ZlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS44IDE1LjhcIj48Zz48cGF0aCBkPVwiTTAuMSwxNC41YzAuMSwwLjEsMC4xLDAuMiwwLjIsMC4ybDAuMSwwLjFoMTQuOWwwLjEtMC4xYzAsMCwwLjEtMC4xLDAuMS0wLjFjMCwwLDAuMS0wLjEsMC4xLTAuMWwwLjEtMC4xVjYuN2wtMC4xLTAuMWMwLTAuMS0wLjEtMC4xLTAuMi0wLjJsLTAuMS0wLjFoLTIuM3YwLjFsLTAuMSwwLjVsLTAuMiwwLjRsLTAuMSwwLjJjMC4xLDAsMC4yLDAsMC4zLDBoMS42djZIMS4zdi02aDEuNmMwLjEsMCwwLjIsMCwwLjMsMEwzLjEsNy4zTDIuOSw2LjlDMi44LDYuOCwyLjgsNi42LDIuNyw2LjVWNi4zSDAuNEwwLjMsNi40Yy0wLjEsMC0wLjEsMC4xLTAuMiwwLjJMMCw2Ljd2Ny43TDAuMSwxNC41elwiLz48cGF0aCBkPVwiTTUuMyw4LjNjMC42LDAuNSwxLjIsMC44LDEuOSwwLjljMC4yLDAsMC41LDAuMSwwLjcsMGMwLjIsMCwwLjUsMCwwLjcsMGMwLjYtMC4xLDEuMS0wLjMsMS42LTAuNmMwLjUtMC4zLDAuOS0wLjcsMS4yLTEuMmMwLjEtMC4yLDAuMi0wLjMsMC4zLTAuNWMwLjEtMC4yLDAuMi0wLjQsMC4yLTAuNWMwLjEtMC4xLDAuMS0wLjMsMC4xLTAuNEMxMiw1LjgsMTIsNS42LDEyLDUuNHYwLjFjMC4xLTAuOC0wLjEtMS42LTAuNS0yLjRjLTAuNC0wLjctMS0xLjMtMS43LTEuN0M5LjUsMS4zLDkuMiwxLjIsOC45LDEuMUM4LjUsMSw4LjIsMSw3LjksMWMtMC4zLDAtMC43LDAtMSwwLjFDNi42LDEuMiw2LjMsMS4zLDYsMS40QzUuNSwxLjcsNS4xLDIsNC43LDIuNEM0LjQsMi44LDQuMSwzLjMsMy45LDMuOEMzLjgsNC4yLDMuNyw0LjcsMy43LDUuMmMwLDAuNSwwLjEsMSwwLjMsMS40QzQuMyw3LjIsNC43LDcuOCw1LjMsOC4zeiBNNS43LDQuNWgxLjZWMi45aDAuNWgwLjFoMC42djB2MC4xdjEuNEgxMHYwLjR2MC4ydjAuNmgwSDguNXYxLjZINy4zVjUuN0g1LjdWNC41elwiLz48L2c+PC9zdmc+JyxcclxuICAgaW5zZXJ0X2NvbHVtbl9sZWZ0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS44IDE1LjhcIj48Zz48cGF0aCBkPVwiTTE0LjUsMTUuN2MwLjEtMC4xLDAuMi0wLjEsMC4yLTAuMmwwLjEtMC4xVjAuNGwtMC4xLTAuMWMwLDAtMC4xLTAuMS0wLjEtMC4xYzAsMC0wLjEtMC4xLTAuMS0wLjFMMTQuNCwwSDYuN0w2LjYsMC4xYy0wLjEsMC0wLjEsMC4xLTAuMiwwLjJMNi4zLDAuNHYyLjNoMC4xbDAuNSwwLjFMNy4zLDNsMC4yLDAuMWMwLTAuMSwwLTAuMiwwLTAuM1YxLjJoNnYxMy4zaC02di0xLjZjMC0wLjEsMC0wLjIsMC0wLjNsLTAuMiwwLjFsLTAuNCwwLjJDNi43LDEyLjksNi42LDEzLDYuNCwxM0g2LjN2Mi4zbDAuMSwwLjJjMCwwLjEsMC4xLDAuMSwwLjIsMC4ybDAuMSwwLjFoNy43TDE0LjUsMTUuN3pcIi8+PHBhdGggZD1cIk04LjMsMTAuNUM4LjcsMTAsOSw5LjMsOS4xLDguNmMwLTAuMiwwLjEtMC41LDAtMC43YzAtMC4yLDAtMC41LDAtMC43QzksNi43LDguOCw2LjEsOC41LDUuN0M4LjIsNS4yLDcuOCw0LjgsNy4zLDQuNUM3LjIsNC40LDcsNC4zLDYuOSw0LjJDNi43LDQuMSw2LjUsNCw2LjQsNEM2LjIsMy45LDYuMSwzLjksNS45LDMuOGMtMC4yLDAtMC4zLTAuMS0wLjUtMC4xaDAuMUM0LjcsMy43LDMuOCwzLjksMy4xLDQuM0MyLjQsNC43LDEuOCw1LjMsMS40LDZDMS4zLDYuMywxLjIsNi42LDEuMSw2LjlDMSw3LjIsMSw3LjYsMSw3LjljMCwwLjMsMCwwLjcsMC4xLDFjMC4xLDAuMywwLjIsMC42LDAuMywwLjljMC4zLDAuNSwwLjYsMC45LDEsMS4zYzAuNCwwLjMsMC44LDAuNiwxLjMsMC44QzQuMiwxMiw0LjcsMTIuMSw1LjEsMTJjMC41LDAsMS0wLjEsMS40LTAuM0M3LjIsMTEuNSw3LjgsMTEuMSw4LjMsMTAuNXpNNC41LDEwLjFWOC41SDIuOVY4VjcuOVY3LjNoMEgzaDEuNFY1LjdoMC40aDAuMmgwLjZ2MHYxLjVoMS42djEuMkg1Ljd2MS42SDQuNXpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIGluc2VydF9jb2x1bW5fcmlnaHQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjggMTUuOFwiPjxnPjxwYXRoIGQ9XCJNMS4zLDAuMUMxLjIsMC4yLDEuMSwwLjIsMS4xLDAuM0wxLDAuNHYxNC45bDAuMSwwLjFjMCwwLDAuMSwwLjEsMC4xLDAuMWMwLDAsMC4xLDAuMSwwLjEsMC4xbDAuMSwwLjFoNy43bDAuMS0wLjFjMC4xLDAsMC4xLTAuMSwwLjItMC4ybDAuMS0wLjF2LTIuM0g5LjNsLTAuNS0wLjFsLTAuNC0wLjJsLTAuMi0wLjFjMCwwLjEsMCwwLjIsMCwwLjN2MS42aC02VjEuM2g2djEuNmMwLDAuMSwwLDAuMiwwLDAuM2wwLjItMC4xbDAuNC0wLjJDOSwyLjksOS4yLDIuOCw5LjMsMi44aDAuMVYwLjVMOS40LDAuM2MwLTAuMS0wLjEtMC4xLTAuMi0wLjJMOS4xLDBIMS40TDEuMywwLjF6XCIvPjxwYXRoIGQ9XCJNNy41LDUuM0M3LDUuOCw2LjcsNi41LDYuNiw3LjJjMCwwLjItMC4xLDAuNSwwLDAuN2MwLDAuMiwwLDAuNSwwLDAuN2MwLjEsMC42LDAuMywxLjEsMC42LDEuNmMwLjMsMC41LDAuNywwLjksMS4yLDEuMmMwLjIsMC4xLDAuMywwLjIsMC41LDAuM2MwLjIsMC4xLDAuNCwwLjIsMC41LDAuMmMwLjEsMC4xLDAuMywwLjEsMC40LDAuMWMwLjIsMCwwLjMsMC4xLDAuNSwwLjFoLTAuMWMwLjgsMC4xLDEuNi0wLjEsMi40LTAuNWMwLjctMC40LDEuMy0xLDEuNy0xLjdjMC4yLTAuMywwLjMtMC42LDAuMy0wLjljMC4xLTAuMywwLjEtMC43LDAuMS0xYzAtMC4zLDAtMC43LTAuMS0xYy0wLjEtMC4zLTAuMi0wLjYtMC4zLTAuOWMtMC4zLTAuNS0wLjYtMC45LTEtMS4zQzEzLDQuNCwxMi41LDQuMiwxMiw0Yy0wLjQtMC4xLTAuOS0wLjItMS40LTAuMmMtMC41LDAtMSwwLjEtMS40LDAuMkM4LjUsNC4zLDcuOSw0LjcsNy41LDUuM3ogTTExLjMsNS43djEuNmgxLjZ2MC41djAuMXYwLjZoMGgtMC4xaC0xLjR2MS42aC0wLjRoLTAuMmgtMC42djBWOC41SDguNVY3LjNoMS42VjUuN0gxMS4zelwiLz48L2c+PC9zdmc+JyxcclxuICAgZGVsZXRlX3JvdzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzUgMTMuODNcIj48Zz48cGF0aCBkPVwiTTQuNywxOC40NmwuMTIuMDhIMTkuNzNsLjEyLS4wOGEuNTguNTgsMCwwLDAsLjIyLS4yMmwuMDgtLjEyLDAtNy42OS0uMDgtLjExYS43Ny43NywwLDAsMC0uMTgtLjE4bC0uMTEtLjA4LTIuMzEsMC0uMDguMjgtLjEuMjlhMS41OCwxLjU4LDAsMCwxLS4xMi4yOWwtLjE0LjM0czAsMCwuMTgsMEgxOC45djZINS42NHYtNkg3LjM1Yy4xNCwwLC4yLDAsLjE4LDBsLS4xNC0uMzRhMi44NSwyLjg1LDAsMCwxLS4xMi0uMjlsLS4xLS4yOS0uMDctLjI3LTIuMzEsMC0uMTEuMDhhLjc3Ljc3LDAsMCwwLS4xOC4xOGwtLjA4LjExLDAsNy42OS4wOC4xMmEuNDcuNDcsMCwwLDAsLjA5LjEybC4xMy4wOVpNMTIuMTEsMTNhNCw0LDAsMCwwLDEuNDYtLjIxLDQuNTEsNC41MSwwLDAsMCwxLjMxLS43MUE0LDQsMCwwLDAsMTYuMjYsMTBhNC4zMiw0LjMyLDAsMCwwLS4wOC0yLjU0LDQuMzQsNC4zNCwwLDAsMC0xLTEuNTIsNC4xNSw0LjE1LDAsMCwwLTEuNTQtMSw0LjM0LDQuMzQsMCwwLDAtMS4zNS0uMjJBNC4wNyw0LjA3LDAsMCwwLDExLDQuOTMsMy45NCwzLjk0LDAsMCwwLDkuMjQsNi4wNywzLjkyLDMuOTIsMCwwLDAsOC4xNSw4Ljg4YTMuOTEsMy45MSwwLDAsMCwuMTIuOTVBNC4xNiw0LjE2LDAsMCwwLDEyLjExLDEzWm0yLjM1LTQuMTR2LjU4SDEwLjA5VjguMjdoNC4zN3YuNThaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQgLTQuNzEpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBkZWxldGVfY29sdW1uOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMy44MSAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNNS42NiwxOS40MmwuMTIuMDgsNy42OSwwLC4xMS0uMDhhLjc3Ljc3LDAsMCwwLC4xOC0uMThsLjA4LS4xMSwwLTIuMzItLjE1LDAtLjQ1LS4xNS0uNDItLjE4LS4xNy0uMDdhMSwxLDAsMCwwLDAsLjI3djEuNjNoLTZWNWg2VjYuNjJhLjkuOSwwLDAsMCwwLC4yNmwuMTctLjA3LjQyLS4xN2EzLjkxLDMuOTEsMCwwLDEsLjQ1LS4xNWwuMTUsMCwwLTIuMzJMMTMuNzUsNGEuNzcuNzcsMCwwLDAtLjE4LS4xOGwtLjExLS4wOEg1Ljc5bC0uMTMuMDdhLjYzLjYzLDAsMCwwLS4yMS4yMmwtLjA4LjEyVjE5LjA4bC4wOC4xMmEuNDcuNDcsMCwwLDAsLjA5LjEyLjM1LjM1LDAsMCwwLC4xMi4xWm05LTMuNjdhNC4xNiw0LjE2LDAsMCwwLDIuMzYtLjUxLDQuMDgsNC4wOCwwLDAsMCwxLjY3LTEuNzIsNCw0LDAsMCwwLC4zNS0uOTEsMy43OSwzLjc5LDAsMCwwLC4xLTEsNC43MSw0LjcxLDAsMCwwLS4xMS0xLDUsNSwwLDAsMC0uMy0uODcsNC4yNSw0LjI1LDAsMCwwLTEtMS4yNSw0LjQ5LDQuNDksMCwwLDAtMS4zNC0uODFBNC4yNiw0LjI2LDAsMCwwLDE1LDcuNDhhMy44OCwzLjg4LDAsMCwwLTEuNDEuMjVBNC4zMiw0LjMyLDAsMCwwLDExLjg2LDksNCw0LDAsMCwwLDExLDEwLjk0YTQuNCw0LjQsMCwwLDAtLjA1LjY4LDQuNSw0LjUsMCwwLDAsLjA1LjY4LDMuOTMsMy45MywwLDAsMCwuNjEsMS41Nyw0LjIyLDQuMjIsMCwwLDAsMS4xOCwxLjIsNC41OSw0LjU5LDAsMCwwLC40OC4yN2MuMi4xLjM3LjE3LjUuMjJhMi40NCwyLjQ0LDAsMCwwLC40NS4xMiw0LjYxLDQuNjEsMCwwLDAsLjUuMDdabTIuNTQtNC4xMnYuNThIMTIuODdWMTFoNC4zN3YuNTlaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC01LjM3IC0zLjc2KVwiLz48L2c+PC9zdmc+JyxcclxuICAgZml4ZWRfY29sdW1uX3dpZHRoOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNNiw1SDE4QTEsMSAwIDAsMSAxOSw2QTEsMSAwIDAsMSAxOCw3SDZBMSwxIDAgMCwxIDUsNkExLDEgMCAwLDEgNiw1TTIxLDJWNEgzVjJIMjFNMTUsOEgxN1YyMkgxNVY4TTcsOEg5VjIySDdWOE0xMSw4SDEzVjIySDExVjhaXCIgLz48L3N2Zz4nLFxyXG4gICByb3RhdGVfbGVmdDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuOCAxNS44XCI+PGc+PHBhdGggZD1cIk0wLjUsMTAuMmMwLDAuMSwwLDAuMiwwLDAuM3YwLjJsMCwwYzAuMSwwLjMsMC4zLDAuNiwwLjQsMC45bDAsMEMxLDExLjgsMS4zLDEyLDEuNSwxMS45aDAuMWgwLjJoMC4xYzAuMS0wLjEsMC4zLTAuMywwLjQtMC41di0wLjJjMC0wLjEsMC0wLjItMC4xLTAuM2wwLDBjLTAuMi0wLjItMC4zLTAuNC0wLjMtMC43bDAsMEMxLjgsMTAsMS43LDkuOSwxLjUsOS44Yy0wLjEsMC0wLjIsMC0wLjMsMEgwLjlDMC43LDkuOSwwLjYsMTAsMC41LDEwLjJMMC41LDEwLjJ6XCIvPjxwYXRoIGQ9XCJNMi4yLDExLjVMMi4yLDExLjVMMi4yLDExLjV6XCIvPjxwYXRoIGQ9XCJNNS45LDMuNkw1LjksMy42TDUuOSwzLjZ6XCIvPjxwYXRoIGQ9XCJNMC4xLDcuOWMwLDAuMywwLDAuNiwwLDAuOWwwLDBsMCwwbDAsMGwwLDBjMCwwLjIsMC4xLDAuMywwLjIsMC40bDAsMGMwLjIsMC4xLDAuMywwLjIsMC41LDAuMmwwLDBsMCwwYzAuMiwwLDAuNC0wLjEsMC41LTAuM2wwLDBjMC0wLjEsMC4xLTAuMywwLjEtMC40VjguNmwwLDBjMC0wLjIsMC0wLjUsMC0wLjdsMCwwYzAtMC4yLTAuMS0wLjQtMC4yLTAuNUMxLjEsNy4zLDAuOSw3LjIsMC43LDcuMlMwLjMsNy4zLDAuMiw3LjRDMC4xLDcuNSwwLDcuNywwLjEsNy45elwiLz48cGF0aCBkPVwiTTEuOSwxMi43TDEuOSwxMi43YzAsMC4yLDAsMC40LDAuMiwwLjVsMCwwbDAuMiwwLjNsMCwwYzAuMiwwLjEsMC4zLDAuMiwwLjUsMC40bDAsMGwwLDBsMCwwbDAsMEMyLjksMTQsMywxNC4xLDMuMiwxNC4xczAuNC0wLjEsMC41LTAuMmMwLjEtMC4yLDAuMi0wLjMsMC4yLTAuNXYtMC4xYzAtMC4yLTAuMS0wLjQtMC4yLTAuNWwwLDBsLTAuNC0wLjRsLTAuMi0wLjJsMCwwQzMsMTIuMSwyLjgsMTIsMi42LDEybDAsMGMtMC4yLDAtMC40LDAuMS0wLjUsMC4ybDAsMEMyLDEyLjMsMS45LDEyLjUsMS45LDEyLjd6XCIvPjxwYXRoIGQ9XCJNNi42LDE1YzAsMC4yLDAuMSwwLjQsMC4yLDAuNWMwLjEsMC4xLDAuMiwwLjIsMC40LDAuM2wwLDBjMC4zLDAsMC41LDAsMC43LDBoMC4zbDAsMGMwLjIsMCwwLjQtMC4xLDAuNS0wLjJjMC4xLTAuMiwwLjItMC4zLDAuMi0wLjVsMCwwbDAsMGMwLTAuMi0wLjEtMC40LTAuMi0wLjVsMCwwYy0wLjEtMC4xLTAuMy0wLjItMC41LTAuMmwwLDBINy45Yy0wLjEsMC0wLjMsMC0wLjUsMGwwLDBINy4zYy0wLjItMC4xLTAuMywwLTAuNSwwLjFsMCwwQzYuNywxNC42LDYuNiwxNC44LDYuNiwxNUw2LjYsMTVMNi42LDE1TDYuNiwxNXpcIi8+PHBhdGggZD1cIk00LjIsNy40QzQsNy41LDQsNy43LDQsNy45YzAsMC4yLDAsMC40LDAuMiwwLjVsMCwwbDMuMiwzLjJsMCwwYzAuMSwwLjEsMC4zLDAuMiwwLjUsMC4yczAuMy0wLjEsMC41LTAuMmwwLDBsMy4yLTMuMmwwLDBjMC4xLTAuMSwwLjItMC4zLDAuMi0wLjVjMC0wLjItMC4xLTAuNC0wLjItMC41bDAsMEMxMS41LDcuMywxMSw2LjcsMTAsNS44bDAsMEw4LjQsNC4ybDAsMEM4LjMsNC4xLDguMSw0LDcuOSw0UzcuNSw0LjEsNy40LDQuMkw0LjIsNy40TDQuMiw3LjR6IE02LjgsOUw1LjcsNy45bDIuMi0yLjJsMi4zLDIuMmwtMi4zLDIuMkM3LjcsOS45LDcuMyw5LjUsNi44LDlMNi44LDl6XCIvPjxwYXRoIGQ9XCJNNC4xLDE0LjFDNCwxNC4yLDQsMTQuMyw0LDE0LjR2MC4ybDAsMGMwLjEsMC4xLDAuMiwwLjMsMC40LDAuNGwwLDBjMC4zLDAuMSwwLjYsMC4yLDAuOSwwLjRoMC4xaDAuMWwwLDBjMC4yLDAsMC4zLTAuMSwwLjUtMC4xbDAsMGMwLjItMC4xLDAuMy0wLjMsMC4zLTAuNGwwLDBsMCwwbDAsMGwwLDB2LTAuMmMwLTAuMS0wLjEtMC4yLTAuMS0wLjNsMCwwQzYuMSwxNC4yLDYsMTQuMSw1LjgsMTRsMCwwYy0wLjMtMC4xLTAuNS0wLjItMC44LTAuMmwwLDBjLTAuMS0wLjEtMC4yLTAuMS0wLjMtMC4xSDQuNUM0LjMsMTMuNyw0LjIsMTMuOSw0LjEsMTQuMXpcIi8+PHBhdGggZD1cIk05LjMsMTQuNGMwLDAuMS0wLjEsMC4zLDAsMC40VjE1bDAsMGMwLDAuMSwwLjEsMC4zLDAuNSwwLjRjMC4xLDAuMSwwLjMsMC4xLDAuNCwwLjFsMCwwaDAuMWwwLDBjMC4zLTAuMSwwLjYtMC4yLDAuOS0wLjNsMCwwYzAuMS0wLjEsMC4yLTAuMiwwLjMtMC40bDAuMS0wLjNjMC0wLjEtMC4xLTAuMi0wLjEtMC4zbDAsMGMtMC4xLTAuMi0wLjItMC4zLTAuNC0wLjRsMCwwaC0wLjNjLTAuMSwwLTAuMiwwLTAuMywwbDAsMGMtMC4yLDAuMS0wLjUsMC4yLTAuOCwwLjNsMCwwQzkuNSwxNC4xLDkuNCwxNC4yLDkuMywxNC40TDkuMywxNC40elwiLz48cGF0aCBkPVwiTTExLjQsMTQuN0wxMS40LDE0LjdMMTEuNCwxNC43elwiLz48cGF0aCBkPVwiTTkuNSwxNS4zTDkuNSwxNS4zTDkuNSwxNS4zelwiLz48cGF0aCBkPVwiTTE1LjksNy45YzAtMS0wLjItMi0wLjYtM2wwLDBjLTAuNC0xLTEtMS45LTEuNy0yLjZDMTIuOCwxLjYsMTIsMSwxMSwwLjZsMCwwQzEwLjEsMC4yLDksMCw4LDBDNy4zLDAsNi41LDAuMSw1LjgsMC4zbDAsMEM1LjIsMC41LDQuNiwwLjgsNCwxLjFMMy4xLDAuMmwwLDBDMi45LDAuMSwyLjgsMCwyLjYsMEgyLjRsMCwwQzIuMiwwLDIsMC4yLDEuOSwwLjRsMCwwTDAuMSw0LjlsMCwwQzAsNSwwLDUuMSwwLDUuMmMwLDAuMiwwLjEsMC40LDAuMiwwLjVsMCwwYzAuMiwwLjEsMC4zLDAuMiwwLjUsMC4yaDAuMUgxbDAsMGw0LjctMS44bDAsMEM1LjksNCw2LjEsMy44LDYuMSwzLjZWMy40QzYuMSwzLjIsNiwzLDUuOSwyLjlsMCwwTDUuMSwyLjFjMC40LTAuMiwwLjgtMC40LDEuMy0wLjVjMC41LTAuMSwxLjEtMC4yLDEuNy0wLjJjMC45LDAsMS43LDAuMiwyLjUsMC41bDAsMGMwLjgsMC4zLDEuNSwwLjgsMi4xLDEuNGMwLjYsMC42LDEuMSwxLjMsMS40LDIuMWwwLDBjMC4zLDAuOCwwLjUsMS42LDAuNSwyLjVzLTAuMiwxLjctMC41LDIuNWwwLDBjLTAuMywwLjgtMC44LDEuNS0xLjQsMi4xYy0wLjIsMC4yLTAuNCwwLjMtMC42LDAuNWwwLDBjLTAuMiwwLjEtMC4zLDAuMy0wLjMsMC41djAuMWMwLDAuMSwwLDAuMywwLjEsMC40bDAsMGMwLjEsMC4yLDAuMywwLjMsMC41LDAuM2wwLDBjMC4xLDAsMC4zLTAuMSwwLjQtMC4ybDAsMGwwLDBsMCwwbDAsMGMwLjItMC4yLDAuNS0wLjQsMC43LTAuNmwwLDBsMCwwbDAsMGwwLDBjMC43LTAuOCwxLjMtMS42LDEuNy0yLjZDMTUuNiwxMCwxNS44LDksMTUuOSw3Ljl6IE0xLjksNEMyLDMuOCwyLjEsMy41LDIuMywzLjFsMCwwTDIuNywybDEuMiwxLjJMMS45LDR6XCIvPjxwYXRoIGQ9XCJNNi44LDE1LjVMNi44LDE1LjVMNi44LDE1LjV6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICByb3RhdGVfcmlnaHQ6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1LjggMTUuOFwiPjxnPjxwYXRoIGQ9XCJNOS45LDE1LjNMOS45LDE1LjNMOS45LDE1LjN6XCIvPjxwYXRoIGQ9XCJNNi45LDE1LjFMNi45LDE1LjFjMCwwLjEsMC4xLDAuMywwLjIsMC40bDAsMGMwLjEsMC4yLDAuMywwLjMsMC41LDAuM2wwLDBoMC4zYzAuMiwwLDAuNCwwLDAuNywwbDAsMGMwLjItMC4xLDAuMy0wLjIsMC40LTAuM2MwLjEtMC4xLDAuMi0wLjIsMC4yLTAuNFYxNWMwLTAuMi0wLjEtMC40LTAuMi0wLjRjLTAuMi0wLjEtMC4zLTAuMi0wLjUtMC4ySDguNGwwLDBjLTAuMSwwLTAuMywwLTAuNSwwSDcuNmwwLDBjLTAuMiwwLTAuNCwwLjEtMC41LDAuMkM3LDE0LjcsNi45LDE0LjksNi45LDE1LjF6XCIvPjxwYXRoIGQ9XCJNNi41LDE0LjRMNi41LDE0LjRMNi41LDE0LjR6XCIvPjxwYXRoIGQ9XCJNNS44LDUuOEw1LjgsNS44Yy0xLDAuOS0xLjUsMS41LTEuNywxLjZsMCwwQzQsNy41LDQsNy43LDQsNy45YzAsMC4yLDAsMC40LDAuMiwwLjVsMCwwbDMuMiwzLjJsMCwwYzAuMiwwLjEsMC4zLDAuMiwwLjUsMC4yczAuNC0wLjEsMC41LTAuMmwwLDBsMy4yLTMuMmwwLDBjMC4xLTAuMSwwLjItMC4zLDAuMi0wLjVjMC0wLjItMC4xLTAuNC0wLjItMC41bDAsMEw4LjQsNC4yQzguMyw0LjEsOC4xLDQsNy45LDRDNy43LDQsNy41LDQuMSw3LjQsNC4ybDAsMEw1LjgsNS44eiBNNS42LDcuOWwyLjMtMi4ybDIuMiwyLjJMOSw5bDAsMGwwLDBsMCwwbDAsMGMtMC41LDAuNi0wLjksMC45LTEuMSwxLjFMNS42LDcuOXpcIi8+PHBhdGggZD1cIk05LDE1LjVMOSwxNS41TDksMTUuNXpcIi8+PHBhdGggZD1cIk05LjYsMTQuN3YwLjJsMCwwbDAsMGwwLDBsMCwwYzAuMSwwLjIsMC4xLDAuMywwLjMsMC4zYzAuMSwwLjEsMC4zLDAuMSwwLjQsMC4xbDAsMGgwLjFoMC4xYzAuMy0wLjEsMC42LTAuMywwLjktMC40bDAsMGMwLjEtMC4xLDAuMi0wLjIsMC4zLTAuNGwwLDB2LTAuMmMwLTAuMSwwLTAuMi0wLjEtMC4zYy0wLjEtMC4yLTAuMi0wLjMtMC40LTAuNEgxMWMtMC4xLDAtMC4yLDAuMS0wLjMsMC4xbDAsMGMtMC4yLDAuMS0wLjQsMC4yLTAuNywwLjNsMCwwbDAsMGMtMC4xLDAuMS0wLjMsMC4yLTAuNCwwLjRDOS42LDE0LjUsOS42LDE0LjYsOS42LDE0Ljd6XCIvPjxwYXRoIGQ9XCJNOSwxNC41TDksMTQuNUw5LDE0LjV6XCIvPjxwYXRoIGQ9XCJNOS42LDE0LjRMOS42LDE0LjRMOS42LDE0LjR6XCIvPjxwYXRoIGQ9XCJNMTEuNywxNEwxMS43LDE0TDExLjcsMTR6XCIvPjxwYXRoIGQ9XCJNMTUuNiw3LjRMMTUuNiw3LjRMMTUuNiw3LjR6XCIvPjxwYXRoIGQ9XCJNMTUsOS40YzAuMiwwLDAuNCwwLDAuNi0wLjJsMCwwYzAuMS0wLjEsMC4yLTAuMiwwLjItMC40bDAsMGwwLDBsMCwwbDAsMGMwLTAuMywwLTAuNiwwLTAuOWMwLTAuMi0wLjEtMC40LTAuMi0wLjVjLTAuMS0wLjEtMC4zLTAuMi0wLjUtMC4ycy0wLjQsMC4xLTAuNSwwLjJjLTAuMSwwLjEtMC4yLDAuMy0wLjIsMC41bDAsMGMwLDAuMiwwLDAuNCwwLDAuN2wwLDB2MC4xYzAsMC4xLDAsMC4zLDAuMSwwLjRsMCwwQzE0LjYsOS4zLDE0LjgsOS40LDE1LDkuNEwxNSw5LjRMMTUsOS40elwiLz48cGF0aCBkPVwiTTE0LDEyaDAuMWgwLjJoMC4xYzAuMiwwLDAuNS0wLjIsMC42LTAuNGwwLDBjMC4yLTAuMywwLjMtMC42LDAuNC0wLjlsMCwwdi0wLjJjMC0wLjEtMC4xLTAuMi0wLjEtMC4zYy0wLjEtMC4yLTAuMi0wLjMtMC40LTAuNGgtMC4zYy0wLjEsMC0wLjIsMC0wLjMsMEMxNC4yLDkuOSwxNCwxMCwxNCwxMC4zbDAsMGMtMC4xLDAuMi0wLjIsMC41LTAuMywwLjdsMCwwYy0wLjEsMC4xLTAuMSwwLjItMC4xLDAuM3YwLjJsMCwwbDAsMEMxMy42LDExLjYsMTMuOCwxMS44LDE0LDEyelwiLz48cGF0aCBkPVwiTTE0LjYsNy40TDE0LjYsNy40TDE0LjYsNy40elwiLz48cGF0aCBkPVwiTTQuNCwxNC4yYy0wLjEsMC4xLTAuMSwwLjItMC4xLDAuM2wwLjEsMC4yYzAsMC4yLDAuMiwwLjMsMC4zLDAuNGwwLDBjMC4zLDAuMSwwLjYsMC4zLDEuMSwwLjRsMCwwaDAuMWwwLDBjMC4xLDAsMC4yLTAuMSwwLjQtMC4yYzAuMSwwLDAuMi0wLjIsMC4zLTAuM2wwLDB2LTAuMmMwLTAuMS0wLjEtMC4zLTAuMi0wLjRjLTAuMS0wLjEtMC4yLTAuMi0wLjQtMC4zbDAsMGMtMC4yLTAuMS0wLjUtMC4yLTAuNy0wLjNsMCwwYy0wLjEsMC0wLjIsMC0wLjMsMEg0LjdsMCwwQzQuNiwxMy45LDQuNCwxNCw0LjQsMTQuMkw0LjQsMTQuMnpcIi8+PHBhdGggZD1cIk0xMS45LDEzLjNjMCwwLjIsMC4xLDAuNCwwLjIsMC42YzAuMSwwLjEsMC4zLDAuMiwwLjUsMC4yczAuNC0wLjEsMC41LTAuMmwwLDBsMCwwbDAsMGwwLDBjMC4xLTAuMSwwLjMtMC4zLDAuNC0wLjRsMCwwbDAuMi0wLjNsMCwwYzAuMS0wLjIsMC4yLTAuMywwLjItMC41bDAsMGMwLTAuMi0wLjEtMC40LTAuMi0wLjVsMCwwYy0wLjEtMC4xLTAuMy0wLjItMC41LTAuMmwwLDBjLTAuMiwwLTAuNCwwLjEtMC41LDAuMmwwLDBsLTAuMiwwLjJsLTAuNCwwLjRsMCwwQzEyLDEzLDExLjksMTMuMSwxMS45LDEzLjNMMTEuOSwxMy4zelwiLz48cGF0aCBkPVwiTTEyLjEsMTMuOEwxMi4xLDEzLjhMMTIuMSwxMy44elwiLz48cGF0aCBkPVwiTTExLjksMTMuM0wxMS45LDEzLjNMMTEuOSwxMy4zelwiLz48cGF0aCBkPVwiTTE1LjksNS4yYzAtMC4xLTAuMS0wLjItMC4xLTAuM2wwLDBMMTQsMC40bDAsMEMxMy45LDAuMiwxMy43LDAsMTMuNSwwbDAsMGwwLDBoLTAuMmMtMC4yLDAtMC40LDAuMS0wLjUsMC4ybDAsMGwtMC45LDAuOWMtMC41LTAuMy0xLjEtMC42LTEuOC0wLjhsMCwwQzkuNCwwLjEsOC43LDAsNy45LDBjLTEsMC0yLDAuMi0zLDAuNlMzLDEuNiwyLjMsMi4zQzEuNiwzLjEsMSwzLjksMC42LDQuOWwwLDBDMC4yLDUuOCwwLDYuOCwwLDcuOWMwLDEsMC4yLDIsMC42LDNzMC45LDEuOCwxLjcsMi42bDAsMGwwLDBsMCwwbDAsMGMwLjIsMC4yLDAuNSwwLjQsMC43LDAuNmwwLDBsMCwwbDAsMGwwLDBjMC4yLDAuMSwwLjMsMC4yLDAuNSwwLjJsMCwwYzAuMiwwLDAuNC0wLjEsMC42LTAuM2wwLDBjMC4xLTAuMSwwLjEtMC4zLDAuMS0wLjR2LTAuMWwwLDBDNC4xLDEzLjMsNCwxMy4xLDMuOSwxM2wwLDBjLTAuMi0wLjEtMC40LTAuMy0wLjYtMC41Yy0wLjYtMC42LTEuMS0xLjMtMS40LTIuMWwwLDBDMS42LDkuNiwxLjQsOC44LDEuNCw3LjlzMC4yLTEuNywwLjUtMi41bDAsMGMwLjMtMC44LDAuOC0xLjUsMS40LTIuMWMwLjYtMC42LDEuMy0xLjEsMi4xLTEuNGwwLDBDNi4yLDEuNiw3LDEuNCw3LjksMS40YzAuNiwwLDEuMSwwLjEsMS43LDAuMmMwLjUsMC4xLDAuOSwwLjMsMS4zLDAuNWwtMC44LDAuOGwwLDBDMTAsMy4xLDkuOSwzLjIsOS45LDMuNHYwLjJsMCwwbDAsMGMwLDAuMiwwLjIsMC40LDAuNCwwLjVsMCwwbDQuNSwxLjhsMCwwSDE1aDAuMWMwLjIsMCwwLjQtMC4xLDAuNS0wLjJsMCwwQzE1LjcsNS42LDE1LjgsNS40LDE1LjksNS4yeiBNMTEuOCwzLjJMMTMsMmwwLjQsMS4xbDAsMGMwLjIsMC40LDAuMywwLjcsMC40LDAuOUwxMS44LDMuMnpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1pcnJvcl9ob3Jpem9udGFsOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNC43NSAxNS43NFwiPjxnPjxwYXRoIGQ9XCJNMTMuNzUsMy43Nmw1LjksMTUuNzRoLTUuOVYzLjc2Wk00LjksMTkuNSwxMC44LDMuNzZWMTkuNUg0LjlaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjkgLTMuNzYpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBtaXJyb3JfdmVydGljYWw6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDE1Ljc0IDE0Ljc1XCI+PGc+PHBhdGggZD1cIk0yMC4xNSwxMy4xLDQuNDEsMTlWMTMuMUgyMC4xNVpNNC40MSw0LjI1bDE1Ljc0LDUuOUg0LjQxVjQuMjVaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC00LjQxIC00LjI1KVwiLz48L2c+PC9zdmc+JyxcclxuICAgY2hlY2tlZDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzUgMTIuMVwiPjxnPjxwYXRoIGQ9XCJNNC41OSwxMi4yM2wuMTIuMThMOS40MywxNy41YS41OC41OCwwLDAsMCwuODQsMEwyMCw3LjQ1aDBhLjU4LjU4LDAsMCwwLDAtLjg0bC0uODUtLjg1YS41OC41OCwwLDAsMC0uODQsMEgxOC4ybC04LjEyLDguNDFhLjI5LjI5LDAsMCwxLS40MiwwbC0zLjQtMy42M2EuNTguNTgsMCwwLDAtLjg0LDBsLS44NS44NWEuNi42LDAsMCwwLS4xNC4yMS41MS41MSwwLDAsMCwwLC40NGMuMDUuMDYuMS4xMy4xNi4xOVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuMzggLTUuNTgpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBsaW5lX2JyZWFrOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTksNmExLDEsMCwwLDAtMSwxdjRhMSwxLDAsMCwxLTEsMUg3LjQxbDEuMy0xLjI5QTEsMSwwLDAsMCw3LjI5LDkuMjlsLTMsM2ExLDEsMCwwLDAtLjIxLjMzLDEsMSwwLDAsMCwwLC43NiwxLDEsMCwwLDAsLjIxLjMzbDMsM2ExLDEsMCwwLDAsMS40MiwwLDEsMSwwLDAsMCwwLTEuNDJMNy40MSwxNEgxN2EzLDMsMCwwLDAsMy0zVjdBMSwxLDAsMCwwLDE5LDZaXCIvPjwvc3ZnPicsXHJcbiAgIGF1ZGlvOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTQsMy4yM1Y1LjI5QzE2Ljg5LDYuMTUgMTksOC44MyAxOSwxMkMxOSwxNS4xNyAxNi44OSwxNy44NCAxNCwxOC43VjIwLjc3QzE4LDE5Ljg2IDIxLDE2LjI4IDIxLDEyQzIxLDcuNzIgMTgsNC4xNCAxNCwzLjIzTTE2LjUsMTJDMTYuNSwxMC4yMyAxNS41LDguNzEgMTQsNy45N1YxNkMxNS41LDE1LjI5IDE2LjUsMTMuNzYgMTYuNSwxMk0zLDlWMTVIN0wxMiwyMFY0TDcsOUgzWlwiIC8+PC9zdmc+JyxcclxuICAgaW1hZ2VfZ2FsbGVyeTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIzMCAzMCAxNTAgMTUwXCI+PGc+PHBhdGggZD1cIk0xNTIuNzc1LDEyMC41NDhWNTEuNjUxYzAtMTIuMjcxLTkuOTg0LTIyLjI1NC0yMi4yNTQtMjIuMjU0SDQzLjcyN2MtMTIuMjcxLDAtMjIuMjU0LDkuOTgzLTIyLjI1NCwyMi4yNTR2NjguODk2YzAsMTIuMjcsOS45ODMsMjIuMjU0LDIyLjI1NCwyMi4yNTRoODYuNzk1QzE0Mi43OTEsMTQyLjgwMiwxNTIuNzc1LDEzMi44MTcsMTUyLjc3NSwxMjAuNTQ4eiBNMzYuMzk0LDUxLjY1MWMwLTQuMDQyLDMuMjkxLTcuMzMzLDcuMzMzLTcuMzMzaDg2Ljc5NWM0LjA0MiwwLDcuMzMyLDMuMjkxLDcuMzMyLDcuMzMzdjIzLjkxN2wtMTQuOTM4LTE3Ljc2N2MtMS40MS0xLjY3OC0zLjQ4Ny0yLjY0OS01LjY4LTIuNjU4aC0wLjAyOWMtMi4xODQsMC00LjI1NSwwLjk1NC01LjY3NCwyLjYxM0w3Ni43MDksOTguNTE5bC05LjA5Ni05LjM5OGMtMS40MjctMS40NzQtMy4zOTItMi4yOTEtNS40NDgtMi4yNzNjLTIuMDUyLDAuMDI1LTQuMDA0LDAuODkzLTUuMzk2LDIuNEwzNi4zOTQsMTExLjMyVjUxLjY1MXogTTQxLjY4NCwxMjcuNTg1bDIwLjY5Ny0yMi40MTZsOS4zMTIsOS42MjJjMS40NjEsMS41MTEsMy40ODksMi4zMzQsNS41OTIsMi4yN2MyLjEwMS0wLjA2Niw0LjA3NS0xLjAxMyw1LjQ0LTIuNjEybDM0LjQzNi00MC4zMDhsMjAuNjkzLDI0LjYxM3YyMS43OTRjMCw0LjA0Mi0zLjI5LDcuMzMyLTcuMzMyLDcuMzMySDQzLjcyN0M0My4wMTgsMTI3Ljg4LDQyLjMzNCwxMjcuNzc1LDQxLjY4NCwxMjcuNTg1eiBNMTgyLjYxNiwxNTIuNVY3NS42NTdjMC00LjEyLTMuMzQtNy40Ni03LjQ2MS03LjQ2Yy00LjExOSwwLTcuNDYsMy4zNC03LjQ2LDcuNDZWMTUyLjVjMCw0LjExMi0zLjM0Nyw3LjQ2LTcuNDYxLDcuNDZoLTk0Yy00LjExOSwwLTcuNDYsMy4zMzktNy40Niw3LjQ1OWMwLDQuMTIzLDMuMzQxLDcuNDYyLDcuNDYsNy40NjJoOTRDMTcyLjU3NiwxNzQuODgxLDE4Mi42MTYsMTY0Ljg0MSwxODIuNjE2LDE1Mi41elwiLz48L2c+PC9zdmc+JyxcclxuICAgYm9va21hcms6ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE3LDNIN0EyLDIgMCAwLDAgNSw1VjIxTDEyLDE4TDE5LDIxVjVDMTksMy44OSAxOC4xLDMgMTcsM1pcIiAvPjwvc3ZnPicsXHJcbiAgIGRvd25sb2FkOiAnPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0yIDEySDRWMTdIMjBWMTJIMjJWMTdDMjIgMTguMTEgMjEuMTEgMTkgMjAgMTlINEMyLjkgMTkgMiAxOC4xMSAyIDE3VjEyTTEyIDE1TDE3LjU1IDkuNTRMMTYuMTMgOC4xM0wxMyAxMS4yNVYySDExVjExLjI1TDcuODggOC4xM0w2LjQ2IDkuNTVMMTIgMTVaXCIgLz48L3N2Zz4nLFxyXG4gICBkaXJfbHRyOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMCAwaDI0djI0SDBWMHpcIiBmaWxsPVwibm9uZVwiLz48cGF0aCBkPVwiTTkgNHY0Yy0xLjEgMC0yLS45LTItMnMuOS0yIDItMm04LTJIOUM2Ljc5IDIgNSAzLjc5IDUgNnMxLjc5IDQgNCA0djVoMlY0aDJ2MTFoMlY0aDJWMnptMCAxMnYzSDV2MmgxMnYzbDQtNC00LTR6XCIvPjwvc3ZnPicsXHJcbiAgIGRpcl9ydGw6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0wIDBoMjR2MjRIMFYwelwiIGZpbGw9XCJub25lXCIvPjxwYXRoIGQ9XCJNMTAgNHY0Yy0xLjEgMC0yLS45LTItMnMuOS0yIDItMm04LTJoLThDNy43OSAyIDYgMy43OSA2IDZzMS43OSA0IDQgNHY1aDJWNGgydjExaDJWNGgyVjJ6TTggMTRsLTQgNCA0IDR2LTNoMTJ2LTJIOHYtM3pcIi8+PC9zdmc+JyxcclxuICAgLy8gRXJyb3JcclxuICAgYWxlcnRfb3V0bGluZTogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTExLDE1SDEzVjE3SDExVjE1TTExLDdIMTNWMTNIMTFWN00xMiwyQzYuNDcsMiAyLDYuNSAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwwIDIyLDEyQTEwLDEwIDAgMCwwIDEyLDJNMTIsMjBBOCw4IDAgMCwxIDQsMTJBOCw4IDAgMCwxIDEyLDRBOCw4IDAgMCwxIDIwLDEyQTgsOCAwIDAsMSAxMiwyMFpcIiAvPjwvc3ZnPicsXHJcbiAgIC8vIE1vcmUgaWNvbnNcclxuICAgbW9yZV90ZXh0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjEwIDEwIDE4MCAxODBcIj48Zz48cGF0aCBkPVwiTTQ5LjcxMSwxNDIuMTg4aDQ5LjAyN2MyLjMyOCwwLjAwMiw0LjM5NCwxLjQ5Miw1LjEyOSwzLjY5OWw5Ljc0MiwyOS4yNTJjMC4zNjMsMS4wOTIsMS4zODUsMS44MjgsMi41MzcsMS44M2wxNS44ODMsMC4wMWMwLjg1OSwwLDEuNjY3LTAuNDEyLDIuMTctMS4xMDlzMC42NDEtMS41OTQsMC4zNy0yLjQxbC0xNi42MjUtNTAuMDQ1TDg2LjUwMywyOC45NTNjLTAuMzYtMS4wOTctMS4zODMtMS44MzktMi41MzctMS44NDJINjQuNTMyYy0xLjE1My0wLjAwMS0yLjE3OCwwLjczNi0yLjU0MiwxLjgzMUwxMy44NDcsMTczLjQ1N2MtMC4yNzEsMC44MTYtMC4xMzUsMS43MTMsMC4zNjksMi40MTJjMC41MDMsMC42OTcsMS4zMTEsMS4xMDksMi4xNzEsMS4xMDloMTUuODcyYzEuMTUxLDAsMi4xNzMtMC43MzYsMi41MzctMS44MjhsOS43OTMtMjkuMjg3QzQ1LjMyNSwxNDMuNjYsNDcuMzksMTQyLjE4LDQ5LjcxMSwxNDIuMTg4TDQ5LjcxMSwxNDIuMTg4eiBNNTMuNDkzLDExOS4wOThsMTUuNjA3LTQ2LjljMC43NDQtMi4xOTYsMi44MDYtMy42NzQsNS4xMjUtMy42NzRzNC4zODEsMS40NzgsNS4xMjUsMy42NzRsMTUuNjA3LDQ2LjkwNGMwLjUzNywxLjYyMSwwLjI2MywzLjQwMi0wLjczNiw0Ljc4OWMtMS4wMTgsMS40MDgtMi42NDksMi4yNC00LjM4NiwyLjI0SDU4LjYxNWMtMS43MzYsMC0zLjM2OC0wLjgzMi00LjM4Ni0yLjI0QzUzLjIzLDEyMi41MDQsNTIuOTU2LDEyMC43MjEsNTMuNDkzLDExOS4wOThMNTMuNDkzLDExOS4wOTh6IE0xOTAuNDY1LDYzLjMyYzAtMi45MTktMS4wMTUtNS4zOTYtMy4wNTktNy40MjhjLTIuMDI5LTIuMDMxLTQuNDk2LTMuMDQ3LTcuMzgzLTMuMDQ3Yy0yLjg4OSwwLTUuMzU1LDEuMDE2LTcuMzg4LDMuMDQ3Yy0yLjAyOSwyLjAzMi0zLjA1Niw0LjQ5OC0zLjA1Niw3LjM4NmMwLDIuODg5LDEuMDI2LDUuMzU0LDMuMDU2LDcuMzg1YzIuMDMyLDIuMDMyLDQuNDk5LDMuMDU5LDcuMzg4LDMuMDU5YzIuODg3LDAsNS4zNTQtMS4wMjYsNy4zODMtMy4wNTlDMTg5LjQ1LDY4LjYzMywxOTAuNDY1LDY2LjE3OCwxOTAuNDY1LDYzLjMyTDE5MC40NjUsNjMuMzJ6IE0xOTAuNDY1LDEwMS45OTRjMC0yLjg1OC0xLjAxNS01LjMxMy0zLjA1OS03LjMzM2MtMi4wMjktMi4wNDItNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMDUtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDIxLTMuMDU2LDQuNDg2LTMuMDU2LDcuMzc2YzAsMi44ODcsMS4wMjYsNS4zNTIsMy4wNTYsNy4zOTVjMi4wMzIsMi4wMjEsNC40OTksMy4wNDcsNy4zODgsMy4wNDdjMi44ODcsMCw1LjM1NC0xLjAyNSw3LjM4My0zLjA0N0MxODkuNDUsMTA3LjM4OSwxOTAuNDY1LDEwNC45MTQsMTkwLjQ2NSwxMDEuOTk0TDE5MC40NjUsMTAxLjk5NHogTTE5MC40NjUsMTQwLjc2YzAtMi45MTgtMS4wMTUtNS4zOTUtMy4wNTktNy40MzhjLTIuMDI5LTIuMDQxLTQuNDk2LTMuMDQ3LTcuMzgzLTMuMDQ3Yy0yLjg4OSwwLTUuMzU1LDEuMDA2LTcuMzg4LDMuMDQ3Yy0yLjAyOSwyLjA0My0zLjA1Niw0LjUyLTMuMDU2LDcuNDM4YzAsMi45MjIsMS4wMjYsNS4zOTgsMy4wNTYsNy40MzljMi4wMzIsMi4wMjEsNC40OTksMy4wNDcsNy4zODgsMy4wNDdjMi44ODcsMCw1LjM1NC0xLjAyNSw3LjM4My0zLjA0N0MxODkuNDUsMTQ2LjE1OCwxOTAuNDY1LDE0My42ODIsMTkwLjQ2NSwxNDAuNzZMMTkwLjQ2NSwxNDAuNzZ6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICBtb3JlX3BhcmFncmFwaDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIxMCAxMCAxODAgMTgwXCI+PGc+PHBhdGggZD1cIk0xMjguMzksMjguNDk5SDYzLjQ5M2MtMjUuNTU4LDAtNDYuMzU0LDIwLjc5Ni00Ni4zNTQsNDYuMzU0YzAsMjUuNTU5LDIwLjc5Niw0Ni4zNTMsNDYuMzU0LDQ2LjM1M2g5LjI3MXY1NS42MjVoMTguNTQyVjQ3LjA0aDkuMjcxVjE3Ni44M2gxOC41NDNWNDcuMDRoOS4yNzFWMjguNDk5eiBNNzIuNzY0LDEwMi42NjRoLTkuMjcxYy0xNS4zMzcsMC0yNy44MTMtMTIuNDc1LTI3LjgxMy0yNy44MTJjMC0xNS4zMzYsMTIuNDc2LTI3LjgxMywyNy44MTMtMjcuODEzaDkuMjcxVjEwMi42NjR6IE0xOTAuNDY1LDYzLjMyYzAtMi45MTktMS4wMTUtNS4zOTYtMy4wNTktNy40MjhjLTIuMDI5LTIuMDMxLTQuNDk2LTMuMDQ3LTcuMzgzLTMuMDQ3Yy0yLjg4OSwwLTUuMzU1LDEuMDE2LTcuMzg4LDMuMDQ3Yy0yLjAyOSwyLjAzMi0zLjA1Niw0LjQ5OC0zLjA1Niw3LjM4NmMwLDIuODg5LDEuMDI2LDUuMzU0LDMuMDU2LDcuMzg1YzIuMDMyLDIuMDMyLDQuNDk5LDMuMDU5LDcuMzg4LDMuMDU5YzIuODg3LDAsNS4zNTQtMS4wMjYsNy4zODMtMy4wNTlDMTg5LjQ1LDY4LjYzMywxOTAuNDY1LDY2LjE3OCwxOTAuNDY1LDYzLjMyTDE5MC40NjUsNjMuMzJ6IE0xOTAuNDY1LDEwMS45OTRjMC0yLjg1OC0xLjAxNS01LjMxMy0zLjA1OS03LjMzM2MtMi4wMjktMi4wNDItNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMDUtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDIxLTMuMDU2LDQuNDg2LTMuMDU2LDcuMzc2YzAsMi44ODcsMS4wMjYsNS4zNTIsMy4wNTYsNy4zOTVjMi4wMzIsMi4wMjEsNC40OTksMy4wNDcsNy4zODgsMy4wNDdjMi44ODcsMCw1LjM1NC0xLjAyNSw3LjM4My0zLjA0N0MxODkuNDUsMTA3LjM4OSwxOTAuNDY1LDEwNC45MTQsMTkwLjQ2NSwxMDEuOTk0TDE5MC40NjUsMTAxLjk5NHogTTE5MC40NjUsMTQwLjc2YzAtMi45MTgtMS4wMTUtNS4zOTUtMy4wNTktNy40MzhjLTIuMDI5LTIuMDQxLTQuNDk2LTMuMDQ3LTcuMzgzLTMuMDQ3Yy0yLjg4OSwwLTUuMzU1LDEuMDA2LTcuMzg4LDMuMDQ3Yy0yLjAyOSwyLjA0My0zLjA1Niw0LjUyLTMuMDU2LDcuNDM4YzAsMi45MjIsMS4wMjYsNS4zOTgsMy4wNTYsNy40MzljMi4wMzIsMi4wMjEsNC40OTksMy4wNDcsNy4zODgsMy4wNDdjMi44ODcsMCw1LjM1NC0xLjAyNSw3LjM4My0zLjA0N0MxODkuNDUsMTQ2LjE1OCwxOTAuNDY1LDE0My42ODIsMTkwLjQ2NSwxNDAuNzZMMTkwLjQ2NSwxNDAuNzZ6XCIvPjwvZz48L3N2Zz4nLFxyXG4gICBtb3JlX3BsdXM6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMzUgMzAgMTQwIDE0MFwiPjxnPjxwYXRoIGQ9XCJNMTM3LjIxNSwxMDIuMDQ1YzAsMy40OTgtMi44MzUsNi4zMzItNi4zMzMsNi4zMzJIMjQuNTQ5Yy0zLjQ5OCwwLTYuMzM0LTIuODM0LTYuMzM0LTYuMzMybDAsMGMwLTMuNDk4LDIuODM2LTYuMzMzLDYuMzM0LTYuMzMzaDEwNi4zMzNDMTM0LjM4LDk1LjcxMSwxMzcuMjE1LDk4LjU0NywxMzcuMjE1LDEwMi4wNDVMMTM3LjIxNSwxMDIuMDQ1eiBNNzcuNzE1LDE2MS41NDVjLTMuNDk4LDAtNi4zMzMtMi44MzYtNi4zMzMtNi4zMzRWNDguODc4YzAtMy40OTgsMi44MzYtNi4zMzMsNi4zMzMtNi4zMzNsMCwwYzMuNDk4LDAsNi4zMzQsMi44MzUsNi4zMzQsNi4zMzN2MTA2LjMzM0M4NC4wNDksMTU4LjcwOSw4MS4yMTMsMTYxLjU0NSw3Ny43MTUsMTYxLjU0NUw3Ny43MTUsMTYxLjU0NXogTTE5MC40NjUsNjMuMzJjMC0yLjkxOS0xLjAxNS01LjM5Ni0zLjA1OS03LjQyOGMtMi4wMjktMi4wMzEtNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMTYtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDMyLTMuMDU2LDQuNDk4LTMuMDU2LDcuMzg2YzAsMi44ODksMS4wMjYsNS4zNTQsMy4wNTYsNy4zODVjMi4wMzIsMi4wMzIsNC40OTksMy4wNTksNy4zODgsMy4wNTljMi44ODcsMCw1LjM1NC0xLjAyNiw3LjM4My0zLjA1OUMxODkuNDUsNjguNjMyLDE5MC40NjUsNjYuMTc3LDE5MC40NjUsNjMuMzJMMTkwLjQ2NSw2My4zMnogTTE5MC40NjUsMTAxLjk5M2MwLTIuODU4LTEuMDE1LTUuMzEzLTMuMDU5LTcuMzMzYy0yLjAyOS0yLjA0Mi00LjQ5Ni0zLjA0Ny03LjM4My0zLjA0N2MtMi44ODksMC01LjM1NSwxLjAwNS03LjM4OCwzLjA0N2MtMi4wMjksMi4wMjEtMy4wNTYsNC40ODYtMy4wNTYsNy4zNzZjMCwyLjg4OCwxLjAyNiw1LjM1MywzLjA1Niw3LjM5NmMyLjAzMiwyLjAyMSw0LjQ5OSwzLjA0Nyw3LjM4OCwzLjA0N2MyLjg4NywwLDUuMzU0LTEuMDI1LDcuMzgzLTMuMDQ3QzE4OS40NSwxMDcuMzg5LDE5MC40NjUsMTA0LjkxNCwxOTAuNDY1LDEwMS45OTNMMTkwLjQ2NSwxMDEuOTkzeiBNMTkwLjQ2NSwxNDAuNzZjMC0yLjkxOC0xLjAxNS01LjM5NS0zLjA1OS03LjQzOGMtMi4wMjktMi4wNDEtNC40OTYtMy4wNDctNy4zODMtMy4wNDdjLTIuODg5LDAtNS4zNTUsMS4wMDYtNy4zODgsMy4wNDdjLTIuMDI5LDIuMDQzLTMuMDU2LDQuNTItMy4wNTYsNy40MzhjMCwyLjkyMiwxLjAyNiw1LjM5OCwzLjA1Niw3LjQzOWMyLjAzMiwyLjAyMSw0LjQ5OSwzLjA0Nyw3LjM4OCwzLjA0N2MyLjg4NywwLDUuMzU0LTEuMDI1LDcuMzgzLTMuMDQ3QzE4OS40NSwxNDYuMTU4LDE5MC40NjUsMTQzLjY4MiwxOTAuNDY1LDE0MC43NkwxOTAuNDY1LDE0MC43NnpcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1vcmVfaG9yaXpvbnRhbDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTUuNzYgMy41OFwiPjxnPjxwYXRoIGQ9XCJNNC42NCwxMC43M2ExLjg0LDEuODQsMCwwLDEsLjY1LS42NSwxLjc2LDEuNzYsMCwwLDEsMS43OSwwQTEuNzksMS43OSwwLDAsMSw4LDExLjYzYTEuODQsMS44NCwwLDAsMS0uMjUuOSwxLjY5LDEuNjksMCwwLDEtLjY1LjY1LDEuOCwxLjgsMCwwLDEtMi42OS0xLjU1QTIuMDgsMi4wOCwwLDAsMSw0LjY0LDEwLjczWm02LjA5LDBhMS44NCwxLjg0LDAsMCwxLC42NS0uNjUsMS43OCwxLjc4LDAsMCwxLDIuNjcsMS41NSwxLjczLDEuNzMsMCwwLDEtLjI0LjksMS44NCwxLjg0LDAsMCwxLS42NS42NSwxLjc2LDEuNzYsMCwwLDEtMS43OSwwLDEuNzksMS43OSwwLDAsMS0uNjQtMi40NFptNi4wOCwwYTEuNjksMS42OSwwLDAsMSwuNjUtLjY1LDEuNzYsMS43NiwwLDAsMSwxLjc5LDAsMS43OSwxLjc5LDAsMCwxLC45LDEuNTQsMS43MywxLjczLDAsMCwxLS4yNC45LDEuODQsMS44NCwwLDAsMS0uNjUuNjUsMS44LDEuOCwwLDAsMS0yLjY5LTEuNTVBMiwyLDAsMCwxLDE2LjgxLDEwLjczWlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNC4zOSAtOS44NClcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1vcmVfdmVydGljYWw6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDMuOTQgMTUuNzVcIj48Zz48cGF0aCBkPVwiTTEyLjI4LDcuNjlhMS45MiwxLjkyLDAsMCwxLTEuMzktLjU4LDIsMiwwLDAsMS0uNTgtMS4zOSwxLjkyLDEuOTIsMCwwLDEsLjU4LTEuMzksMiwyLDAsMCwxLDEuMzktLjU4LDEuOTIsMS45MiwwLDAsMSwxLjM5LjU4LDIsMiwwLDAsMSwuNTgsMS4zOSwxLjkyLDEuOTIsMCwwLDEtLjU4LDEuMzksMiwyLDAsMCwxLTEuMzkuNThabTAsMmExLjkyLDEuOTIsMCwwLDEsMS4zOS41OCwyLDIsMCwwLDEsLjU4LDEuMzlBMS45MiwxLjkyLDAsMCwxLDEzLjY3LDEzYTIsMiwwLDAsMS0xLjM5LjU4QTEuOTIsMS45MiwwLDAsMSwxMC44OSwxM2EyLDIsMCwwLDEtLjU4LTEuMzksMiwyLDAsMCwxLDItMlptMCw1LjlhMS45MiwxLjkyLDAsMCwxLDEuMzkuNTgsMiwyLDAsMCwxLC41OCwxLjM5LDEuOTIsMS45MiwwLDAsMS0uNTgsMS4zOSwyLDIsMCwwLDEtMS4zOS41OCwxLjkyLDEuOTIsMCwwLDEtMS4zOS0uNTgsMiwyLDAsMCwxLS41OC0xLjM5LDEuOTIsMS45MiwwLDAsMSwuNTgtMS4zOSwxLjk0LDEuOTQsMCwwLDEsMS4zOS0uNThaXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKC0xMC4zMSAtMy43NSlcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIC8vIE5vdCBjdXJyZW50bHkgdXNlZFxyXG4gICBhdHRhY2htZW50OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA4LjM4IDE1LjY4XCI+PGc+PHBhdGggZD1cIk0xNS4yMyw2aDF2OS43OGEzLjg4LDMuODgsMCwwLDEtMS4zMSwyLjQ1LDQsNCwwLDAsMS02LjU3LTIuNDVWN0EzLDMsMCwwLDEsOS4yLDQuODlhMywzLDAsMCwxLDUsMi4wOXY4LjMxYTEuOTIsMS45MiwwLDAsMS0uNTgsMS4zOSwyLDIsMCwwLDEtMS4zOS41OCwxLjkyLDEuOTIsMCwwLDEtMS4zOS0uNTgsMiwyLDAsMCwxLS41OC0xLjM5VjhoMXY3LjMyYTEsMSwwLDAsMCwuMjkuNjksMSwxLDAsMCwwLC42OS4yOEEuOS45LDAsMCwwLDEzLDE2YTEsMSwwLDAsMCwuMjktLjY5VjdhMS45MiwxLjkyLDAsMCwwLS41OC0xLjM5QTIsMiwwLDAsMCwxMS4yNyw1YTEuOTIsMS45MiwwLDAsMC0xLjM5LjU4QTIsMiwwLDAsMCw5LjMzLDd2OC4zMWEzLDMsMCwxLDAsNS45LDBWNlpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTguMDggLTMuNzgpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBtYXA6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDExLjcgMTUuNjJcIj48Zz48cGF0aCBkPVwiTTEyLjA1LDEyLjQyYTIuOTMsMi45MywwLDEsMSwyLjA3LTVBMi44OCwyLjg4LDAsMCwxLDE1LDkuNDlhMywzLDAsMCwxLS44NiwyLjA3LDIuODksMi44OSwwLDAsMS0yLjA3Ljg2Wm0wLTUuMzZhMi40MywyLjQzLDAsMCwwLTEuNzIsNC4xNiwyLjQ4LDIuNDgsMCwwLDAsMS43Mi43MiwyLjQ0LDIuNDQsMCwwLDAsMC00Ljg4Wm0wLTMuM0E1Ljg0LDUuODQsMCwwLDEsMTcuOSw5LjYyYTkuOTQsOS45NCwwLDAsMS0xLjczLDVBMzMuNTksMzMuNTksMCwwLDEsMTIuODQsMTlhMS41MiwxLjUyLDAsMCwxLS4yMy4yLDEsMSwwLDAsMS0uNTUuMmgwYTEsMSwwLDAsMS0uNTUtLjIsMS41MiwxLjUyLDAsMCwxLS4yMy0uMiwzMy41OSwzMy41OSwwLDAsMS0zLjMzLTQuMzIsOS45Myw5LjkzLDAsMCwxLTEuNzItNSw1Ljg0LDUuODQsMCwwLDEsNS44NS01Ljg2Wk0xMiwxOC4zNGwuMDguMDUuMDYtLjA2YTM1LjU4LDM1LjU4LDAsMCwwLDMuMDYtMy45Myw5LjM1LDkuMzUsMCwwLDAsMS43NC00Ljc3LDQuODgsNC44OCwwLDAsMC00Ljg4LTQuODhBNC43OSw0Ljc5LDAsMCwwLDguNiw2LjE3LDQuODQsNC44NCwwLDAsMCw3LjE3LDkuNjIsOS4yOSw5LjI5LDAsMCwwLDguOTEsMTQuNCwzNiwzNiwwLDAsMCwxMiwxOC4zNFpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTYuMiAtMy43NilcIi8+PC9nPjwvc3ZnPicsXHJcbiAgIG1hZ2ljX3N0aWNrOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNS43MyAxNS43NVwiPjxnPjxwYXRoIGQ9XCJNMTkuODYsMTkuMjFhMSwxLDAsMCwwLC4yOC0uNjgsMSwxLDAsMCwwLS4yOC0uN0wxMywxMC45M2ExLDEsMCwwLDAtLjctLjI4LDEsMSwwLDAsMC0uNjgsMS42NWw2LjksNi45YTEsMSwwLDAsMCwuNjkuMjkuOTMuOTMsMCwwLDAsLjY5LS4yOFpNOS4xOSw4LjU1YTMsMywwLDAsMCwxLjY4LDAsMTQuMTIsMTQuMTIsMCwwLDAsMS40MS0uMzJBMTEuMjYsMTEuMjYsMCwwLDAsMTAuOCw3LjA2Yy0uNTYtLjM2LS44Ni0uNTYtLjkxLS41OFMxMCw1LjkxLDEwLDUuMTFzMC0xLjI2LS4xNS0xLjM3YTQuMzUsNC4zNSwwLDAsMC0xLjE5LjcxYy0uNTMuNC0uODEuNjItLjg3LjY4YTksOSwwLDAsMC0yLS42LDYuODQsNi44NCwwLDAsMC0uNzYtLjA5czAsLjI3LjA4Ljc3YTguNiw4LjYsMCwwLDAsLjYxLDJxLS4wOS4wOS0uNjkuODdhMy41OSwzLjU5LDAsMCwwLS42OCwxLjE3Yy4xMi4xNy41Ny4yMywxLjM2LjE1UzcsOS4yNiw3LjE1LDkuMjNzLjIxLjM2LjU3LjkxYTEwLjQ5LDEwLjQ5LDAsMCwwLDEuMTQsMS40OGMwLS4xLjE0LS41Ny4zMS0xLjRhMywzLDAsMCwwLDAtMS42N1pcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTQuNDEgLTMuNzQpXCIvPjwvZz48L3N2Zz4nLFxyXG4gICBlbXB0eV9maWxlOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMi43OCAxNS43NVwiPjxnPjxwYXRoIGQ9XCJNMTQuNzMsMy43NiwxOC42Nyw3Ljd2OS44NGEyLDIsMCwwLDEtMiwySDcuODRhMS44OSwxLjg5LDAsMCwxLTEuMzgtLjU4LDIsMiwwLDAsMS0uNTctMS4zOVY1LjczYTEuOTMsMS45MywwLDAsMSwuNTctMS4zOCwyLDIsMCwwLDEsMS4zOC0uNThoNi42MmwuMjYsMHYwWm0yLjk1LDQuOTJoLTJhMS45MywxLjkzLDAsMCwxLTEuMzgtLjU3LDIsMiwwLDAsMS0uNTgtMS40VjYuMTdjMC0uMzYsMC0uODQsMC0xLjQzSDcuODVhMSwxLDAsMCwwLS43LjI5LDEsMSwwLDAsMC0uMjkuN1YxNy41NGExLDEsMCwwLDAsLjI5LjY5LDEsMSwwLDAsMCwuNjkuMjloOC44NWExLDEsMCwwLDAsLjcxLS4yOS45Mi45MiwwLDAsMCwuMjgtLjY5Wm0wLTFMMTQuNzMsNC43NHYyQTEsMSwwLDAsMCwxNSw3LjRhMSwxLDAsMCwwLC42OS4yOVpcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTUuODkgLTMuNzYpXCIvPjwvZz48L3N2Zz4nXHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uIHV0aWxpdHkgZnVuY3Rpb25cclxuICovXHJcbmNvbnN0IHV0aWwgPSB7XHJcbiAgICBfZDogbnVsbCxcclxuICAgIF93OiBudWxsLFxyXG4gICAgaXNJRTogbnVsbCxcclxuICAgIGlzSUVfRWRnZTogbnVsbCxcclxuICAgIGlzT1NYX0lPUzogbnVsbCxcclxuICAgIGlzQ2hyb21pdW06IG51bGwsXHJcbiAgICBpc01vYmlsZTogbnVsbCxcclxuICAgIGlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQ6IG51bGwsXHJcbiAgICBfcHJvcGVydGllc0luaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX2QgPSAgZG9jdW1lbnQ7XHJcbiAgICAgICAgdGhpcy5fdyA9IHdpbmRvdztcclxuICAgICAgICB0aGlzLmlzSUUgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA+IC0xO1xyXG4gICAgICAgIHRoaXMuaXNJRV9FZGdlID0gKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID4gLTEpIHx8IChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdFZGdlJykgPiAtMSk7XHJcbiAgICAgICAgdGhpcy5pc09TWF9JT1MgPSAvKE1hY3xpUGhvbmV8aVBvZHxpUGFkKS8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xyXG4gICAgICAgIHRoaXMuaXNDaHJvbWl1bSA9ICEhd2luZG93LmNocm9tZTtcclxuICAgICAgICB0aGlzLmlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQgPSAodHlwZW9mIFJlc2l6ZU9ic2VydmVyID09PSAnZnVuY3Rpb24nKTtcclxuICAgICAgICB0aGlzLmlzTW9iaWxlID0gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMDtcclxuICAgIH0sXHJcblxyXG4gICAgX2FsbG93ZWRFbXB0eU5vZGVMaXN0OiAnLnNlLWNvbXBvbmVudCwgcHJlLCBibG9ja3F1b3RlLCBociwgbGksIHRhYmxlLCBpbWcsIGlmcmFtZSwgdmlkZW8sIGF1ZGlvLCBjYW52YXMnLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEhUTUwgUmVzZXJ2ZWQgV29yZCBDb252ZXJ0ZXIuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBIVE1MIHN0cmluZ1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX0hUTUxDb252ZXJ0b3I6IGZ1bmN0aW9uIChjb250ZW50cykge1xyXG4gICAgICAgIGNvbnN0IGVjID0geycmJzogJyZhbXA7JywgJ1xcdTAwQTAnOiAnJm5ic3A7JywgJ1xcJyc6ICcmYXBvczsnLCAnXCInOiAnJnF1b3Q7JywgJzwnOiAnJmx0OycsICc+JzogJyZndDsnfTtcclxuICAgICAgICByZXR1cm4gY29udGVudHMucmVwbGFjZSgvJnxcXHUwMEEwfCd8XCJ8PHw+L2csIGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIGVjW21dID09PSAnc3RyaW5nJykgPyBlY1ttXSA6IG07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFVuaWNvZGUgQ2hhcmFjdGVyICdaRVJPIFdJRFRIIFNQQUNFJyAoXFx1MjAwQilcclxuICAgICAqL1xyXG4gICAgemVyb1dpZHRoU3BhY2U6IFN0cmluZy5mcm9tQ2hhckNvZGUoODIwMyksXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVndWxhciBleHByZXNzaW9uIHRvIGZpbmQgJ3plcm8gd2lkdGggc3BhY2UnICgvXFx1MjAwQi9nKVxyXG4gICAgICovXHJcbiAgICB6ZXJvV2lkdGhSZWdFeHA6IG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSg4MjAzKSwgJ2cnKSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gZmluZCBvbmx5ICd6ZXJvIHdpZHRoIHNwYWNlJyAoL15cXHUyMDBCKyQvKVxyXG4gICAgICovXHJcbiAgICBvbmx5WmVyb1dpZHRoUmVnRXhwOiBuZXcgUmVnRXhwKCdeJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoODIwMykgKyAnKyQnKSxcclxuXHJcbiAgICBmb250VmFsdWVNYXA6IHtcclxuICAgICAgICAneHgtc21hbGwnOiAxLFxyXG4gICAgICAgICd4LXNtYWxsJzogMixcclxuICAgICAgICAnc21hbGwnOiAzLFxyXG4gICAgICAgICdtZWRpdW0nOiA0LFxyXG4gICAgICAgICdsYXJnZSc6IDUsXHJcbiAgICAgICAgJ3gtbGFyZ2UnOiA2LFxyXG4gICAgICAgICd4eC1sYXJnZSc6IDdcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQSBtZXRob2QgdGhhdCBjaGVja3MgSWYgdGhlIHRleHQgaXMgYmxhbmsgb3IgdG8gc2VlIGlmIGl0IGNvbnRhaW5zICdaRVJPIFdJRFRIIFNQQUNFJyBvciBlbXB0eSAodXRpbC56ZXJvV2lkdGhTcGFjZSlcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE5vZGV9IHRleHQgU3RyaW5nIHZhbHVlIG9yIE5vZGVcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBvbmx5WmVyb1dpZHRoU3BhY2U6IGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgaWYgKHRleHQgPT09IG51bGwgfHwgdGV4dCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykgdGV4dCA9IHRleHQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRleHQgPT09ICcnIHx8IHRoaXMub25seVplcm9XaWR0aFJlZ0V4cC50ZXN0KHRleHQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIFhNTEh0dHBSZXF1ZXN0IG9iamVjdFxyXG4gICAgICogQHJldHVybnMge1hNTEh0dHBSZXF1ZXN0fEFjdGl2ZVhPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldFhNTEh0dHBSZXF1ZXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLyoqIElFICovXHJcbiAgICAgICAgaWYgKHRoaXMuX3cuQWN0aXZlWE9iamVjdCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUCcpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIG5ldHNjYXBlICovXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdy5YTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBmYWlsICovXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gT2JqZWN0LnZhbHVlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gb2JqIE9iamVjdCBwYXJhbWV0ZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlczogZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiAhb2JqID8gW10gOiB0aGlzLl93Lk9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmpbaV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbnZlcnQgdGhlIENhbWVsQ2FzZSBUbyB0aGUgS2ViYWJDYXNlLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBhcmFtIFtDYW1lbCBzdHJpbmddXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfEFycmF5fVxyXG4gICAgICovXHJcbiAgICBjYW1lbFRvS2ViYWJDYXNlOiBmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW0ucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKGxldHRlcikgeyByZXR1cm4gXCItXCIgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTsgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtLm1hcChmdW5jdGlvbihzdHIpIHsgcmV0dXJuIHV0aWwuY2FtZWxUb0tlYmFiQ2FzZShzdHIpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbnZlcnQgdGhlIEtlYmFiQ2FzZSBUbyB0aGUgQ2FtZWxDYXNlLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBhcmFtIFtLZWJhYkNhc2Ugc3RyaW5nXVxyXG4gICAgICogQHJldHVybnMge1N0cmluZ3xBcnJheX1cclxuICAgICAqL1xyXG4gICAga2ViYWJUb0NhbWVsQ2FzZTogZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnJlcGxhY2UoLy1bYS16QS1aXS9nLCBmdW5jdGlvbiAobGV0dGVyKSB7IHJldHVybiBsZXR0ZXIucmVwbGFjZSgnLScsICcnKS50b1VwcGVyQ2FzZSgpOyB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW0ubWFwKGZ1bmN0aW9uKHN0cikgeyByZXR1cm4gdXRpbC5jYW1lbFRvS2ViYWJDYXNlKHN0cik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIEVsZW1lbnQgbm9kZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVsZW1lbnROYW1lIEVsZW1lbnQgbmFtZVxyXG4gICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50TmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kLmNyZWF0ZUVsZW1lbnQoZWxlbWVudE5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgdGV4dCBub2RlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCB0ZXh0IGNvbnRlbnRzXHJcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlVGV4dE5vZGU6IGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QuY3JlYXRlVGV4dE5vZGUodGV4dCB8fCAnJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSBlZGl0b3IgY2hlY2tzIHRhZ3MgYnkgc3RyaW5nLlxyXG4gICAgICogSWYgdGhlcmUgaXMgXCI8XCIgb3IgXCI+XCIgaW4gdGhlIGF0dHJpYnV0ZSBvZiB0YWcsIEhUTUwgaXMgYnJva2VuIHdoZW4gY2hlY2tpbmcgdGhlIHRhZy5cclxuICAgICAqIFdoZW4gdXNpbmcgYW4gYXR0cmlidXRlIHdpdGggXCI8XCIgb3IgXCI+XCIsIHVzZSBcIkhUTUxFbmNvZGVyXCIgdG8gc2F2ZS4gKGV4OiBtYXRoKGthdGV4KSlcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZW50cyBIVE1MIG9yIFRleHQgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBIVE1MRW5jb2RlcjogZnVuY3Rpb24gKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgY29uc3QgZWMgPSB7JzwnOiAnJGx0OycsICc+JzogJyRndDsnfTtcclxuICAgICAgICByZXR1cm4gY29udGVudHMucmVwbGFjZSgvPHw+L2csIGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIGVjW21dID09PSAnc3RyaW5nJykgPyBlY1ttXSA6IG07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSBlZGl0b3IgY2hlY2tzIHRhZ3MgYnkgc3RyaW5nLlxyXG4gICAgICogSWYgdGhlcmUgaXMgXCI8XCIgb3IgXCI+XCIgaW4gdGhlIGF0dHJpYnV0ZSBvZiB0YWcsIEhUTUwgaXMgYnJva2VuIHdoZW4gY2hlY2tpbmcgdGhlIHRhZy5cclxuICAgICAqIERlY29kZXIgb2YgZGF0YSBzdG9yZWQgYXMgXCJIVE1MRW5jb2RlclwiIChleDogbWF0aChrYXRleCkpXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgSFRNTCBvciBUZXh0IHN0cmluZ1xyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgSFRNTERlY29kZXI6IGZ1bmN0aW9uIChjb250ZW50cykge1xyXG4gICAgICAgIGNvbnN0IGVjID0geyckbHQ7JzogJzwnLCAnJGd0Oyc6ICc+J307XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRzLnJlcGxhY2UoL1xcJGx0O3xcXCRndDsvZywgZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgZWNbbV0gPT09ICdzdHJpbmcnKSA/IGVjW21dIDogbTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gVGhpcyBtZXRob2QgcnVuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IG9iai5rZXlcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBoYXNPd246IGZ1bmN0aW9uIChvYmosIGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNPd24uY2FsbChvYmosIGtleSk7XHJcbiAgICB9LFxyXG4gICAgX2hhc093bjogT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSB0aGUgdGFnIHBhdGggb2YgdGhlIGFyZ3VtZW50cyB2YWx1ZVxyXG4gICAgICogSWYgbm90IGZvdW5kLCByZXR1cm4gdGhlIGZpcnN0IGZvdW5kIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBuYW1lQXJyYXkgRmlsZSBuYW1lIGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXh0ZW5zaW9uIGpzLCBjc3NcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldEluY2x1ZGVQYXRoOiBmdW5jdGlvbiAobmFtZUFycmF5LCBleHRlbnNpb24pIHtcclxuICAgICAgICBsZXQgcGF0aCA9ICcnO1xyXG4gICAgICAgIGNvbnN0IHBhdGhMaXN0ID0gW107XHJcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IGV4dGVuc2lvbiA9PT0gJ2pzJyA/ICdzY3JpcHQnIDogJ2xpbmsnO1xyXG4gICAgICAgIGNvbnN0IHNyYyA9IGV4dGVuc2lvbiA9PT0gJ2pzJyA/ICdzcmMnIDogJ2hyZWYnO1xyXG5cclxuICAgICAgICBsZXQgZmlsZU5hbWUgPSAnKD86JztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbmFtZUFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZpbGVOYW1lICs9IG5hbWVBcnJheVtpXSArIChpIDwgbGVuIC0gMSA/ICd8JyA6ICcpJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZWdFeHAgPSBuZXcgdGhpcy5fdy5SZWdFeHAoJyhefC4qW1xcXFwvXSknICsgZmlsZU5hbWUgKyAnKFxcXFwuW15cXFxcL10rKT9cXC4nICsgZXh0ZW5zaW9uICsgJyg/OlxcXFw/Lip8Oy4qKT8kJywgJ2knKTtcclxuICAgICAgICBjb25zdCBleHRSZWdFeHAgPSBuZXcgdGhpcy5fdy5SZWdFeHAoJy4rXFxcXC4nICsgZXh0ZW5zaW9uICsgJyg/OlxcXFw/Lip8Oy4qKT8kJywgJ2knKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgYyA9IHRoaXMuX2QuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSksIGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZXh0UmVnRXhwLnRlc3QoY1tpXVtzcmNdKSkge1xyXG4gICAgICAgICAgICAgICAgcGF0aExpc3QucHVzaChjW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgZWRpdG9yVGFnID0gcGF0aExpc3RbaV1bc3JjXS5tYXRjaChyZWdFeHApO1xyXG4gICAgICAgICAgICBpZiAoZWRpdG9yVGFnKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gZWRpdG9yVGFnWzBdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXRoID09PSAnJykgcGF0aCA9IHBhdGhMaXN0Lmxlbmd0aCA+IDAgPyBwYXRoTGlzdFswXVtzcmNdIDogJyc7XHJcblxyXG4gICAgICAgIC0xID09PSBwYXRoLmluZGV4T2YoJzovJykgJiYgJy8vJyAhPT0gcGF0aC5zbGljZSgwLCAyKSAmJiAocGF0aCA9IDAgPT09IHBhdGguaW5kZXhPZignLycpID8gbG9jYXRpb24uaHJlZi5tYXRjaCgvXi4qPzpcXC9cXC9bXlxcL10qLylbMF0gKyBwYXRoIDogbG9jYXRpb24uaHJlZi5tYXRjaCgvXlteXFw/XSpcXC8oPzopLylbMF0gKyBwYXRoKTtcclxuXHJcbiAgICAgICAgaWYgKCFwYXRoKSB0aHJvdyAnW1NVTkVESVRPUi51dGlsLmdldEluY2x1ZGVQYXRoLmZhaWxdIFRoZSBTVU5FRElUT1IgaW5zdGFsbGF0aW9uIHBhdGggY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgZGV0ZWN0ZWQuIChuYW1lOiArJyArIG5hbWUgKyAnLCBleHRlbnNpb246ICcgKyBleHRlbnNpb24gKyAnKSc7XHJcblxyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgQ1NTIHRleHQgdGhhdCBoYXMgYmVlbiBhcHBsaWVkIHRvIHRoZSBjdXJyZW50IHBhZ2UuXHJcbiAgICAgKiBAcGFyYW0ge0RvY3VtZW50fG51bGx9IGRvYyBUbyBnZXQgdGhlIENTUyB0ZXh0IG9mIGFuIGRvY3VtZW50KGNvcmUuX3dkKS4gSWYgbnVsbCBnZXQgdGhlIGN1cnJlbnQgZG9jdW1lbnQuXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBTdHlsZXMgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGdldFBhZ2VTdHlsZTogZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgIGxldCBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgY29uc3Qgc2hlZXRzID0gKGRvYyB8fCB0aGlzLl9kKS5zdHlsZVNoZWV0cztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNoZWV0cy5sZW5ndGgsIHJ1bGVzOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJ1bGVzID0gc2hlZXRzW2ldLmNzc1J1bGVzO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJ1bGVzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IHJ1bGVzLmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gcnVsZXNbY10uY3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNzc1RleHQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgYXJndW1lbnQgaWZyYW1lJ3MgZG9jdW1lbnQgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGlmcmFtZSBJZnJhbWUgZWxlbWVudCAoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZSlcclxuICAgICAqIEByZXR1cm5zIHtEb2N1bWVudH1cclxuICAgICAqL1xyXG4gICAgZ2V0SWZyYW1lRG9jdW1lbnQ6IGZ1bmN0aW9uIChpZnJhbWUpIHtcclxuICAgICAgICBsZXQgd0RvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cgfHwgaWZyYW1lLmNvbnRlbnREb2N1bWVudDtcclxuICAgICAgICBpZiAod0RvY3VtZW50LmRvY3VtZW50KSB3RG9jdW1lbnQgPSB3RG9jdW1lbnQuZG9jdW1lbnQ7XHJcbiAgICAgICAgcmV0dXJuIHdEb2N1bWVudDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IGF0dHJpYnV0ZXMgb2YgYXJndW1lbnQgZWxlbWVudCB0byBzdHJpbmcgKCdjbGFzcz1cIi0tLVwiIG5hbWU9XCItLS1cIiAnKVxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IGV4Y2VwdEF0dHJzIEFycmF5IG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBleGNsdWRlIGZyb20gdGhlIHJlc3VsdFxyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0QXR0cmlidXRlc1RvU3RyaW5nOiBmdW5jdGlvbiAoZWxlbWVudCwgZXhjZXB0QXR0cnMpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cmlidXRlcykgcmV0dXJuICcnO1xyXG5cclxuICAgICAgICBjb25zdCBhdHRycyA9IGVsZW1lbnQuYXR0cmlidXRlcztcclxuICAgICAgICBsZXQgYXR0clN0cmluZyA9ICcnO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXR0cnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGV4Y2VwdEF0dHJzICYmIGV4Y2VwdEF0dHJzLmluZGV4T2YoYXR0cnNbaV0ubmFtZSkgPiAtMSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGF0dHJTdHJpbmcgKz0gYXR0cnNbaV0ubmFtZSArICc9XCInICsgYXR0cnNbaV0udmFsdWUgKyAnXCIgJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhdHRyU3RyaW5nO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbkdldHMgR2V0IHRoZSBsZW5ndGggaW4gYnl0ZXMgb2YgYSBzdHJpbmcuXHJcbiAgICAgKiByZWZlcmVuY2luZyBjb2RlOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9zaGFhbjE5NzQvbXlyZGluL2Jsb2IvbWFzdGVyL2V4cHJlc3Npb25zL3N0cmluZy5qcyNMMTFcIlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgU3RyaW5nIHRleHRcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldEJ5dGVMZW5ndGg6IGZ1bmN0aW9uKHRleHQpIHtcclxuICAgICAgICBpZiAoIXRleHQgfHwgIXRleHQudG9TdHJpbmcpIHJldHVybiAwO1xyXG4gICAgICAgIHRleHQgPSB0ZXh0LnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSB0aGlzLl93LmVuY29kZVVSSUNvbXBvbmVudDtcclxuICAgICAgICBsZXQgY3IsIGNsO1xyXG4gICAgICAgIGlmICh0aGlzLmlzSUVfRWRnZSkge1xyXG4gICAgICAgICAgICBjbCA9IHRoaXMuX3cudW5lc2NhcGUoZW5jb2Rlcih0ZXh0KSkubGVuZ3RoO1xyXG4gICAgICAgICAgICBjciA9IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5jb2Rlcih0ZXh0KS5tYXRjaCgvKCUwQXwlMEQpL2dpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY3IgPSBlbmNvZGVyKHRleHQpLm1hdGNoKC8oJTBBfCUwRCkvZ2kpLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNsICsgY3I7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2wgPSAobmV3IHRoaXMuX3cuVGV4dEVuY29kZXIoJ3V0Zi04JykuZW5jb2RlKHRleHQpKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNyID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbmNvZGVyKHRleHQpLm1hdGNoKC8oJTBBfCUwRCkvZ2kpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjciA9IGVuY29kZXIodGV4dCkubWF0Y2goLyglMEF8JTBEKS9naSkubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY2wgKyBjcjtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGp1ZGdlZCB3aGV0aGVyIGl0IGlzIHRoZSBlZGl0IHJlZ2lvbiB0b3AgZGl2IGVsZW1lbnQgb3IgaWZyYW1lJ3MgYm9keSB0YWcuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc1d5c2l3eWdEaXY6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiAodGhpcy5oYXNDbGFzcyhlbGVtZW50LCAnc2Utd3JhcHBlci13eXNpd3lnJykgfHwgL15CT0RZJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyB0aGUgY29udGVudGVkaXRhYmxlIHByb3BlcnR5IGlzIGZhbHNlLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNOb25FZGl0YWJsZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKSA9PT0gJ2ZhbHNlJztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgYSBub2RlIHJlbGF0ZWQgdG8gdGhlIHRleHQgc3R5bGUuXHJcbiAgICAgKiAoc3Ryb25nfHNwYW58Zm9udHxifHZhcnxpfGVtfHV8aW5zfHN8c3RyaWtlfGRlbHxzdWJ8c3VwfG1hcmt8YXxsYWJlbHxjb2RlKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNUZXh0U3R5bGVFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDMgJiYgL14oc3Ryb25nfHNwYW58Zm9udHxifHZhcnxpfGVtfHV8aW5zfHN8c3RyaWtlfGRlbHxzdWJ8c3VwfG1hcmt8YXxsYWJlbHxjb2RlfHN1bW1hcnkpJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGp1ZGdlZCB3aGV0aGVyIGl0IGlzIHRoZSBpbnB1dCBlbGVtZW50IChJTlBVVCwgVEVYVEFSRUEpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBpc0lucHV0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmIC9eKElOUFVUfFRFWFRBUkVBKSQvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyB0aGUgZm9ybWF0IGVsZW1lbnQgKFAsIERJViwgSFsxLTZdLCBQUkUsIExJIHwgY2xhc3M9XCJfX3NlX19mb3JtYXRfX3JlcGxhY2VfeHh4XCIpXHJcbiAgICAgKiBGb3JtYXQgZWxlbWVudCBhbHNvIGNvbnRhaW4gXCJmcmVlIGZvcm1hdCBFbGVtZW50XCJcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgbm9kZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzRm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxICYmICgvXihQfERJVnxIWzEtNl18UFJFfExJfFRIfFREfERFVEFJTFMpJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgfHwgdGhpcy5oYXNDbGFzcyhlbGVtZW50LCAnKFxcXFxzfF4pX19zZV9fZm9ybWF0X19yZXBsYWNlXy4rKFxcXFxzfCQpfChcXFxcc3xeKV9fc2VfX2Zvcm1hdF9fZnJlZV8uKyhcXFxcc3wkKScpKSAmJiAhdGhpcy5pc0NvbXBvbmVudChlbGVtZW50KSAmJiAhdGhpcy5pc1d5c2l3eWdEaXYoZWxlbWVudCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGp1ZGdlZCB3aGV0aGVyIGl0IGlzIHRoZSByYW5nZSBmb3JtYXQgZWxlbWVudC4gKEJMT0NLUVVPVEUsIE9MLCBVTCwgRklHQ0FQVElPTiwgVEFCTEUsIFRIRUFELCBUQk9EWSwgVFIsIFRILCBURCB8IGNsYXNzPVwiX19zZV9fZm9ybWF0X19yYW5nZV94eHhcIilcclxuICAgICAqIFJhbmdlIGZvcm1hdCBlbGVtZW50IGlzIHdyYXAgdGhlIFwiZm9ybWF0IGVsZW1lbnRcIiBhbmQgXCJjb21wb25lbnRcIlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiAoL14oQkxPQ0tRVU9URXxPTHxVTHxGSUdDQVBUSU9OfFRBQkxFfFRIRUFEfFRCT0RZfFRSfFRIfFREfERFVEFJTFMpJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgfHwgdGhpcy5oYXNDbGFzcyhlbGVtZW50LCAnKFxcXFxzfF4pX19zZV9fZm9ybWF0X19yYW5nZV8uKyhcXFxcc3wkKScpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIGNsb3N1cmUgcmFuZ2UgZm9ybWF0IGVsZW1lbnQuIChUSCwgVEQgfCBjbGFzcz1cIl9fc2VfX2Zvcm1hdF9fcmFuZ2VfX2Nsb3N1cmVfeHh4XCIpXHJcbiAgICAgKiBDbG9zdXJlIHJhbmdlIGZvcm1hdCBlbGVtZW50cyBpcyBpbmNsdWRlZCBpbiB0aGUgcmFuZ2UgZm9ybWF0IGVsZW1lbnQuXHJcbiAgICAgKiAgLSBDbG9zdXJlIHJhbmdlIGZvcm1hdCBlbGVtZW50IGlzIHdyYXAgdGhlIFwiZm9ybWF0IGVsZW1lbnRcIiBhbmQgXCJjb21wb25lbnRcIlxyXG4gICAgICog4oC7IFlvdSBjYW5ub3QgZXhpdCB0aGlzIGZvcm1hdCB3aXRoIHRoZSBFbnRlciBrZXkgb3IgQmFja3NwYWNlIGtleS5cclxuICAgICAqIOKAuyBVc2UgaXQgb25seSBpbiBzcGVjaWFsIGNhc2VzLiAoW2V4XSBmb3JtYXQgb2YgdGFibGUgY2VsbHMpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgVGhlIG5vZGUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0Nsb3N1cmVSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiAoL14oVEh8VEQpJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgfHwgdGhpcy5oYXNDbGFzcyhlbGVtZW50LCAnKFxcXFxzfF4pX19zZV9fZm9ybWF0X19yYW5nZV9fY2xvc3VyZV8uKyhcXFxcc3wkKScpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIGZyZWUgZm9ybWF0IGVsZW1lbnQuIChQUkUgfCBjbGFzcz1cIl9fc2VfX2Zvcm1hdF9fZnJlZV94eHhcIilcclxuICAgICAqIEZyZWUgZm9ybWF0IGVsZW1lbnRzIGlzIGluY2x1ZGVkIGluIHRoZSBmb3JtYXQgZWxlbWVudC5cclxuICAgICAqIEZyZWUgZm9ybWF0IGVsZW1lbnRzJ3MgbGluZSBicmVhayBpcyBcIkJSXCIgdGFnLlxyXG4gICAgICog4oC7IEVudGVyaW5nIHRoZSBFbnRlciBrZXkgaW4gdGhlIHNwYWNlIG9uIHRoZSBsYXN0IGxpbmUgZW5kcyBcIkZyZWUgRm9ybWF0XCIgYW5kIGFwcGVuZHMgXCJGb3JtYXRcIi5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgbm9kZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzRnJlZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiAoL15QUkUkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSB8fCB0aGlzLmhhc0NsYXNzKGVsZW1lbnQsICcoXFxcXHN8XilfX3NlX19mb3JtYXRfX2ZyZWVfLisoXFxcXHN8JCknKSkgJiYgIXRoaXMuaXNDb21wb25lbnQoZWxlbWVudCkgJiYgIXRoaXMuaXNXeXNpd3lnRGl2KGVsZW1lbnQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBqdWRnZWQgd2hldGhlciBpdCBpcyB0aGUgY2xvc3VyZSBmcmVlIGZvcm1hdCBlbGVtZW50LiAoY2xhc3M9XCJfX3NlX19mb3JtYXRfX2ZyZWVfX2Nsb3N1cmVfeHh4XCIpXHJcbiAgICAgKiBDbG9zdXJlIGZyZWUgZm9ybWF0IGVsZW1lbnRzIGlzIGluY2x1ZGVkIGluIHRoZSBmcmVlIGZvcm1hdCBlbGVtZW50LlxyXG4gICAgICogIC0gQ2xvc3VyZSBmcmVlIGZvcm1hdCBlbGVtZW50cydzIGxpbmUgYnJlYWsgaXMgXCJCUlwiIHRhZy5cclxuICAgICAqIOKAuyBZb3UgY2Fubm90IGV4aXQgdGhpcyBmb3JtYXQgd2l0aCB0aGUgRW50ZXIga2V5IG9yIEJhY2tzcGFjZSBrZXkuXHJcbiAgICAgKiDigLsgVXNlIGl0IG9ubHkgaW4gc3BlY2lhbCBjYXNlcy4gKFtleF0gZm9ybWF0IG9mIHRhYmxlIGNlbGxzKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiB0aGlzLmhhc0NsYXNzKGVsZW1lbnQsICcoXFxcXHN8XilfX3NlX19mb3JtYXRfX2ZyZWVfX2Nsb3N1cmVfLisoXFxcXHN8JCknKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIGNvbXBvbmVudFtpbWcsIGlmcmFtZSwgdmlkZW8sIGF1ZGlvLCB0YWJsZV0gY292ZXIoY2xhc3M9XCJzZS1jb21wb25lbnRcIikgYW5kIHRhYmxlLCBoclxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNDb21wb25lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgKC9zZS1jb21wb25lbnQvLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpIHx8IC9eKFRBQkxFfEhSKSQvLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVja3MgZm9yIFwiX19zZV9fdW5lZGl0YWJsZVwiIGluIHRoZSBjbGFzcyBsaXN0LlxyXG4gICAgICogQ29tcG9uZW50cyB3aXRoIGNsYXNzIFwiX19zZV9fdW5lZGl0YWJsZVwiIGNhbm5vdCBiZSBtb2RpZmllZC5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzVW5lZGl0YWJsZUNvbXBvbmVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiB0aGlzLmhhc0NsYXNzKGVsZW1lbnQsICdfX3NlX191bmVkaXRhYmxlJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGp1ZGdlZCB3aGV0aGVyIGl0IGlzIHRoZSBjb21wb25lbnQgW2ltZywgaWZyYW1lXSBjb3ZlcihjbGFzcz1cInNlLWNvbXBvbmVudFwiKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNNZWRpYUNvbXBvbmVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiAvc2UtY29tcG9uZW50Ly50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSXQgaXMganVkZ2VkIHdoZXRoZXIgaXQgaXMgdGhlIG5vdCBjaGVja2luZyBub2RlLiAoY2xhc3M9XCJrYXRleFwiLCBcIl9fc2VfX3RhZ1wiKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBub2RlIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNOb3RDaGVja2luZ05vZGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgL2thdGV4fF9fc2VfX3RhZy8udGVzdChlbGVtZW50LmNsYXNzTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIElmIGEgcGFyZW50IG5vZGUgdGhhdCBjb250YWlucyBhbiBhcmd1bWVudCBub2RlIGZpbmRzIGEgZm9ybWF0IG5vZGUgKHV0aWwuaXNGb3JtYXRFbGVtZW50KSwgaXQgcmV0dXJucyB0aGF0IG5vZGUuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgUmVmZXJlbmNlIG5vZGUuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHZhbGlkYXRpb24gQWRkaXRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9uLlxyXG4gICAgICogQHJldHVybnMge0VsZW1lbnR8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0Rm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbGlkYXRpb24pIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmICghdmFsaWRhdGlvbikge1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzV3lzaXd5Z0RpdihlbGVtZW50KSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGVsZW1lbnQpKSBlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Zvcm1hdEVsZW1lbnQoZWxlbWVudCkgJiYgdmFsaWRhdGlvbihlbGVtZW50KSkgcmV0dXJuIGVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIElmIGEgcGFyZW50IG5vZGUgdGhhdCBjb250YWlucyBhbiBhcmd1bWVudCBub2RlIGZpbmRzIGEgZm9ybWF0IG5vZGUgKHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQpLCBpdCByZXR1cm5zIHRoYXQgbm9kZS5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBSZWZlcmVuY2Ugbm9kZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdmFsaWRhdGlvbiBBZGRpdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb24uXHJcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gbnVsbDtcclxuICAgICAgICBpZiAoIXZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgdmFsaWRhdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aGlsZSAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1d5c2l3eWdEaXYoZWxlbWVudCkpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChlbGVtZW50KSAmJiAhL14oVEhFQUR8VEJPRFl8VFIpJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgJiYgdmFsaWRhdGlvbihlbGVtZW50KSkgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gSWYgYSBwYXJlbnQgbm9kZSB0aGF0IGNvbnRhaW5zIGFuIGFyZ3VtZW50IG5vZGUgZmluZHMgYSBmcmVlIGZvcm1hdCBub2RlICh1dGlsLmlzRnJlZUZvcm1hdEVsZW1lbnQpLCBpdCByZXR1cm5zIHRoYXQgbm9kZS5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBSZWZlcmVuY2Ugbm9kZS5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdmFsaWRhdGlvbiBBZGRpdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb24uXHJcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRGcmVlRm9ybWF0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbGlkYXRpb24pIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmICghdmFsaWRhdGlvbikge1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzV3lzaXd5Z0RpdihlbGVtZW50KSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRnJlZUZvcm1hdEVsZW1lbnQoZWxlbWVudCkgJiYgdmFsaWRhdGlvbihlbGVtZW50KSkgcmV0dXJuIGVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIElmIGEgcGFyZW50IG5vZGUgdGhhdCBjb250YWlucyBhbiBhcmd1bWVudCBub2RlIGZpbmRzIGEgY2xvc3VyZSBmcmVlIGZvcm1hdCBub2RlICh1dGlsLmlzQ2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50KSwgaXQgcmV0dXJucyB0aGF0IG5vZGUuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgUmVmZXJlbmNlIG5vZGUuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHZhbGlkYXRpb24gQWRkaXRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9uLlxyXG4gICAgICogQHJldHVybnMge0VsZW1lbnR8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0Q2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsaWRhdGlvbikge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKCF2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNXeXNpd3lnRGl2KGVsZW1lbnQpKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQoZWxlbWVudCkgJiYgdmFsaWRhdGlvbihlbGVtZW50KSkgcmV0dXJuIGVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEFkZCBzdHlsZSBhbmQgY2xhc3NOYW1lIG9mIGNvcHlFbCB0byBvcmlnaW5FbFxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBvcmlnaW5FbCBPcmlnaW4gZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBjb3B5RWwgRWxlbWVudCB0byBjb3B5XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IGJsYWNrbGlzdCBCbGFja2xpc3QgYXJyYXkoTG93ZXJDYXNlKVxyXG4gICAgICovXHJcbiAgICBjb3B5VGFnQXR0cmlidXRlczogZnVuY3Rpb24gKG9yaWdpbkVsLCBjb3B5RWwsIGJsYWNrbGlzdCkge1xyXG4gICAgICAgIGlmIChjb3B5RWwuc3R5bGUuY3NzVGV4dCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb3B5U3R5bGVzID0gY29weUVsLnN0eWxlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY29weVN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luRWwuc3R5bGVbY29weVN0eWxlc1tpXV0gPSBjb3B5U3R5bGVzW2NvcHlTdHlsZXNbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhdHRycyA9IGNvcHlFbC5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhdHRycy5sZW5ndGgsIG5hbWU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBuYW1lID0gYXR0cnNbaV0ubmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBpZiAoKGJsYWNrbGlzdCAmJiBibGFja2xpc3QuaW5kZXhPZihuYW1lKSA+IC0xKSB8fCAhYXR0cnNbaV0udmFsdWUpIG9yaWdpbkVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAobmFtZSAhPT0gJ3N0eWxlJykgb3JpZ2luRWwuc2V0QXR0cmlidXRlKGF0dHJzW2ldLm5hbWUsIGF0dHJzW2ldLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvcHkgYW5kIGFwcGx5IGF0dHJpYnV0ZXMgb2YgZm9ybWF0IHRhZyB0aGF0IHNob3VsZCBiZSBtYWludGFpbmVkLiAoc3R5bGUsIGNsYXNzKSBJZ25vcmUgXCJfX3NlX19mb3JtYXRfX1wiIGNsYXNzXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG9yaWdpbkVsIE9yaWdpbiBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvcHlFbCBFbGVtZW50IHRvIGNvcHlcclxuICAgICAqL1xyXG4gICAgY29weUZvcm1hdEF0dHJpYnV0ZXM6IGZ1bmN0aW9uIChvcmlnaW5FbCwgY29weUVsKSB7XHJcbiAgICAgICAgY29weUVsID0gY29weUVsLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgY29weUVsLmNsYXNzTmFtZSA9IGNvcHlFbC5jbGFzc05hbWUucmVwbGFjZSgvKFxcc3xeKV9fc2VfX2Zvcm1hdF9fW15cXHNdKy9nLCAnJyk7XHJcbiAgICAgICAgdGhpcy5jb3B5VGFnQXR0cmlidXRlcyhvcmlnaW5FbCwgY29weUVsKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBpdGVtIGZyb20gdGhlIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGUgY29uZGl0aW9uLlxyXG4gICAgICogQHBhcmFtIHtBcnJheXxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gYXJyYXkgQXJyYXkgdG8gZ2V0IGl0ZW1cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdmFsaWRhdGlvbiBDb25kaXRpb25hbCBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBtdWx0aSBJZiB0cnVlLCByZXR1cm5zIGFsbCBpdGVtcyB0aGF0IG1lZXQgdGhlIGNyaXRlcmlhIG90aGVyd2lzZSwgcmV0dXJucyBhbiBlbXB0eSBhcnJheS5cclxuICAgICAqIElmIGZhbHNlLCByZXR1cm5zIG9ubHkgb25lIGl0ZW0gdGhhdCBtZWV0IHRoZSBjcml0ZXJpYSBvdGhlcndpc2UgcmV0dXJuIG51bGwuXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8Tm9kZXxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRBcnJheUl0ZW06IGZ1bmN0aW9uIChhcnJheSwgdmFsaWRhdGlvbiwgbXVsdGkpIHtcclxuICAgICAgICBpZiAoIWFycmF5IHx8IGFycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIHZhbGlkYXRpb24gPSB2YWxpZGF0aW9uIHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGgsIGE7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBhID0gYXJyYXlbaV07XHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uKGEpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW11bHRpKSByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgIGVsc2UgYXJyLnB1c2goYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAhbXVsdGkgPyBudWxsIDogYXJyO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayBpZiBhbiBhcnJheSBjb250YWlucyBhbiBlbGVtZW50IFxyXG4gICAgICogQHBhcmFtIHtBcnJheXxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gYXJyYXkgZWxlbWVudCBhcnJheVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNoZWNrIGZvclxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGFycmF5SW5jbHVkZXM6IGZ1bmN0aW9uKGFycmF5LCBlbGVtZW50KSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYXJyYXlbaV0gPT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdmFsdWUgaW4gdGhlIGVsZW1lbnQgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IGFycmF5IGVsZW1lbnQgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBmaW5kIGluZGV4XHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBnZXRBcnJheUluZGV4OiBmdW5jdGlvbiAoYXJyYXksIGVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgaWR4ID0gLTE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhcnJheVtpXSA9PT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgaWR4ID0gaTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaWR4O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIG5leHQgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHZhbHVlIGluIHRoZSBlbGVtZW50IGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSBhcnJheSBlbGVtZW50IGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGl0ZW0gVGhlIGVsZW1lbnQgdG8gZmluZCBpbmRleFxyXG4gICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAqL1xyXG4gICAgbmV4dElkeDogZnVuY3Rpb24gKGFycmF5LCBpdGVtKSB7XHJcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMuZ2V0QXJyYXlJbmRleChhcnJheSwgaXRlbSk7XHJcbiAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHJldHVybiAtMTtcclxuICAgICAgICByZXR1cm4gaWR4ICsgMTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBwcmV2aW91cyBpbmRleCBvZiB0aGUgYXJndW1lbnQgdmFsdWUgaW4gdGhlIGVsZW1lbnQgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IGFycmF5IEVsZW1lbnQgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gaXRlbSBUaGUgZWxlbWVudCB0byBmaW5kIGluZGV4XHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBwcmV2SWR4OiBmdW5jdGlvbiAoYXJyYXksIGl0ZW0pIHtcclxuICAgICAgICBsZXQgaWR4ID0gdGhpcy5nZXRBcnJheUluZGV4KGFycmF5LCBpdGVtKTtcclxuICAgICAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuIC0xO1xyXG4gICAgICAgIHJldHVybiBpZHggLSAxO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBpbmRleCBjb21wYXJlZCB0byBvdGhlciBzaWJsaW5nIG5vZGVzLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBOb2RlIHRvIGZpbmQgaW5kZXhcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldFBvc2l0aW9uSW5kZXg6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgbGV0IGlkeCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgIGlkeCArPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaWR4O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgXCJub2RlXCIgaW4gdGhlIFwicGFyZW50Tm9kZVwiIGluIGEgbnVtZXJpY2FsIGFycmF5LlxyXG4gICAgICogZXgpIDxwPjxzcGFuPmFhPC9zcGFuPjxzcGFuPmJiPC9zcGFuPjwvcD4gOiBnZXROb2RlUGF0aChub2RlOiBcImJiXCIsIHBhcmVudE5vZGU6IFwiPFA+XCIpIC0+IFsxLCAwXVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBOb2RlIHRvIGZpbmQgcG9zaXRpb24gcGF0aFxyXG4gICAgICogQHBhcmFtIHtOb2RlfG51bGx9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUuIElmIG51bGwsIHd5c2l3eWcgZGl2IGFyZWFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IF9uZXdPZmZzZXRzIElmIHlvdSBzZW5kIGFuIG9iamVjdCBvZiB0aGUgZm9ybSBcIntzOiAwLCBlOiAwfVwiLCB0aGUgdGV4dCBub2RlcyB0aGF0IGFyZSBhdHRhY2hlZCB0b2dldGhlciBhcmUgbWVyZ2VkIGludG8gb25lLCBjZW50ZXJlZCBvbiB0aGUgXCJub2RlXCIgYXJndW1lbnQuXHJcbiAgICAgKiBcIl9uZXdPZmZzZXRzLnNcIiBzdG9yZXMgdGhlIGxlbmd0aCBvZiB0aGUgY29tYmluZWQgY2hhcmFjdGVycyBhZnRlciBcIm5vZGVcIiBhbmQgXCJfbmV3T2Zmc2V0cy5lXCIgc3RvcmVzIHRoZSBsZW5ndGggb2YgdGhlIGNvbWJpbmVkIGNoYXJhY3RlcnMgYmVmb3JlIFwibm9kZVwiLlxyXG4gICAgICogRG8gbm90IHVzZSB1bmxlc3MgYWJzb2x1dGVseSBuZWNlc3NhcnkuXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGdldE5vZGVQYXRoOiBmdW5jdGlvbiAobm9kZSwgcGFyZW50Tm9kZSwgX25ld09mZnNldHMpIHtcclxuICAgICAgICBjb25zdCBwYXRoID0gW107XHJcbiAgICAgICAgbGV0IGZpbmRzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5nZXRQYXJlbnRFbGVtZW50KG5vZGUsIGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBpZiAoZWwgPT09IHBhcmVudE5vZGUpIGZpbmRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChmaW5kcyAmJiAhdGhpcy5pc1d5c2l3eWdEaXYoZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXJnZSB0ZXh0IG5vZGVzXHJcbiAgICAgICAgICAgICAgICBpZiAoX25ld09mZnNldHMgJiYgZWwubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IG51bGwsIHRlbXBUZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBfbmV3T2Zmc2V0cy5zID0gX25ld09mZnNldHMuZSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2aW91cyA9IGVsLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocHJldmlvdXMgJiYgcHJldmlvdXMubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFRleHQgPSBwcmV2aW91cy50ZXh0Q29udGVudC5yZXBsYWNlKHRoaXMuemVyb1dpZHRoUmVnRXhwLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9uZXdPZmZzZXRzLnMgKz0gdGVtcFRleHQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHRlbXBUZXh0ICsgZWwudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSBwcmV2aW91cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91cy5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0ZW1wKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gZWwubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5leHQgJiYgbmV4dC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wVGV4dCA9IG5leHQudGV4dENvbnRlbnQucmVwbGFjZSh0aGlzLnplcm9XaWR0aFJlZ0V4cCwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbmV3T2Zmc2V0cy5lICs9IHRlbXBUZXh0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgKz0gdGVtcFRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSBuZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKHRlbXApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbmRleCBwdXNoXHJcbiAgICAgICAgICAgICAgICBwYXRoLnB1c2goZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICByZXR1cm4gcGF0aC5tYXAodGhpcy5nZXRQb3NpdGlvbkluZGV4KS5yZXZlcnNlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIG5vZGUgaW4gdGhlIGxvY2F0aW9uIG9mIHRoZSBwYXRoIGFycmF5IG9idGFpbmVkIGZyb20gXCJ1dGlsLmdldE5vZGVQYXRoXCIuXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvZmZzZXRzIFBvc2l0aW9uIGFycmF5LCBhcnJheSBvYnRhaW5lZCBmcm9tIFwidXRpbC5nZXROb2RlUGF0aFwiXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IHBhcmVudE5vZGUgQmFzZSBwYXJlbnQgZWxlbWVudFxyXG4gICAgICogQHJldHVybnMge05vZGV9XHJcbiAgICAgKi9cclxuICAgIGdldE5vZGVGcm9tUGF0aDogZnVuY3Rpb24gKG9mZnNldHMsIHBhcmVudE5vZGUpIHtcclxuICAgICAgICBsZXQgY3VycmVudCA9IHBhcmVudE5vZGU7XHJcbiAgICAgICAgbGV0IG5vZGVzO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gb2Zmc2V0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBub2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA9PT0gMCkgYnJlYWs7XHJcbiAgICAgICAgICAgIGlmIChub2Rlcy5sZW5ndGggPD0gb2Zmc2V0c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG5vZGVzW29mZnNldHNbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29tcGFyZXMgdGhlIHN0eWxlIGFuZCBjbGFzcyBmb3IgZXF1YWwgdmFsdWVzLlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGJvdGggYXJlIHRleHQgbm9kZXMuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGEgTm9kZSB0byBjb21wYXJlXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGIgTm9kZSB0byBjb21wYXJlXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNTYW1lQXR0cmlidXRlczogZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5ub2RlVHlwZSA9PT0gMyAmJiBiLm5vZGVUeXBlID09PSAzKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoYS5ub2RlVHlwZSA9PT0gMyB8fCBiLm5vZGVUeXBlID09PSAzKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0eWxlX2EgPSBhLnN0eWxlO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlX2IgPSBiLnN0eWxlO1xyXG4gICAgICAgIGxldCBjb21wU3R5bGUgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3R5bGVfYS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3R5bGVfYVtzdHlsZV9hW2ldXSA9PT0gc3R5bGVfYltzdHlsZV9hW2ldXSkgY29tcFN0eWxlKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjbGFzc19hID0gYS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgY29uc3QgY2xhc3NfYiA9IGIuY2xhc3NMaXN0O1xyXG4gICAgICAgIGNvbnN0IHJlZyA9IHRoaXMuX3cuUmVnRXhwO1xyXG4gICAgICAgIGxldCBjb21wQ2xhc3MgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2xhc3NfYS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocmVnKCcoXFxzfF4pJyArIGNsYXNzX2FbaV0gKyAnKFxcc3wkKScpLnRlc3QoY2xhc3NfYi52YWx1ZSkpIGNvbXBDbGFzcysrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChjb21wU3R5bGUgPT09IHN0eWxlX2IubGVuZ3RoICYmIGNvbXBTdHlsZSA9PT0gc3R5bGVfYS5sZW5ndGgpICYmIChjb21wQ2xhc3MgPT09IGNsYXNzX2IubGVuZ3RoICYmIGNvbXBDbGFzcyA9PT0gY2xhc3NfYS5sZW5ndGgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayB0aGUgbGluZSBlbGVtZW50KHV0aWwuaXNGb3JtYXRFbGVtZW50KSBpcyBlbXB0eS5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBGb3JtYXQgZWxlbWVudCBub2RlXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNFbXB0eUxpbmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuICFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudE5vZGUgfHwgKCFlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ0lNRywgSUZSQU1FLCBBVURJTywgVklERU8sIENBTlZBUywgVEFCTEUnKSAmJiBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiB0aGlzLm9ubHlaZXJvV2lkdGhTcGFjZShlbGVtZW50LnRleHRDb250ZW50KSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBzcGFuJ3MgYXR0cmlidXRlcyBhcmUgZW1wdHkuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gZWxlbWVudCBFbGVtZW50IG5vZGVcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc1NwYW5XaXRob3V0QXR0cjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gISFlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEgJiYgL15TUEFOJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgJiYgIWVsZW1lbnQuY2xhc3NOYW1lICYmICFlbGVtZW50LnN0eWxlLmNzc1RleHQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBub2RlIGlzIGEgbGlzdCAob2wsIHVsKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gbm9kZSBUaGUgZWxlbWVudCBvciBlbGVtZW50IG5hbWUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0xpc3Q6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgL14oT0x8VUwpJC9pLnRlc3QodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnID8gbm9kZSA6IG5vZGUubm9kZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayB0aGUgbm9kZSBpcyBhIGxpc3QgY2VsbCAobGkpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBub2RlIFRoZSBlbGVtZW50IG9yIGVsZW1lbnQgbmFtZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzTGlzdENlbGw6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgL15MSSQvaS50ZXN0KHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IG5vZGUgOiBub2RlLm5vZGVOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIG5vZGUgaXMgYSB0YWJsZSAodGFibGUsIHRoZWFkLCB0Ym9keSwgdHIsIHRoLCB0ZClcclxuICAgICAqIEBwYXJhbSB7Tm9kZXxTdHJpbmd9IG5vZGUgVGhlIGVsZW1lbnQgb3IgZWxlbWVudCBuYW1lIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNUYWJsZTogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZSAmJiAvXihUQUJMRXxUSEVBRHxUQk9EWXxUUnxUSHxURCkkL2kudGVzdCh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgPyBub2RlIDogbm9kZS5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBub2RlIGlzIGEgdGFibGUgY2VsbCAodGQsIHRoKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gbm9kZSBUaGUgZWxlbWVudCBvciBlbGVtZW50IG5hbWUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0NlbGw6IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgL14oVER8VEgpJC9pLnRlc3QodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnID8gbm9kZSA6IG5vZGUubm9kZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayB0aGUgbm9kZSBpcyBhIGJyZWFrIG5vZGUgKEJSKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gbm9kZSBUaGUgZWxlbWVudCBvciBlbGVtZW50IG5hbWUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0JyZWFrOiBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBub2RlICYmIC9eQlIkL2kudGVzdCh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgPyBub2RlIDogbm9kZS5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayB0aGUgbm9kZSBpcyBhIGFuY2hvciBub2RlIChBKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gbm9kZSBUaGUgZWxlbWVudCBvciBlbGVtZW50IG5hbWUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0FuY2hvcjogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZSAmJiAvXkEkL2kudGVzdCh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgPyBub2RlIDogbm9kZS5ub2RlTmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBub2RlIGlzIGEgbWVkaWEgbm9kZSAoaW1nLCBpZnJhbWUsIGF1ZGlvLCB2aWRlbywgY2FudmFzKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gbm9kZSBUaGUgZWxlbWVudCBvciBlbGVtZW50IG5hbWUgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc01lZGlhOiBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBub2RlICYmIC9eKElNR3xJRlJBTUV8QVVESU98VklERU98Q0FOVkFTKSQvaS50ZXN0KHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IG5vZGUgOiBub2RlLm5vZGVOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIG5vZGUgaXMgYSBmaWd1cmUgdGFnIG9yIHV0aWwuaXNNZWRpYSgpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBub2RlIFRoZSBlbGVtZW50IG9yIGVsZW1lbnQgbmFtZSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzRmlndXJlczogZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZSAmJiAodGhpcy5pc01lZGlhKG5vZGUpIHx8IC9eKEZJR1VSRSkkL2kudGVzdCh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgPyBub2RlIDogbm9kZS5ub2RlTmFtZSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVja3MgZm9yIG51bWVyaWMgKHdpdGggZGVjaW1hbCBwb2ludCkuXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHRleHQgVGV4dCBzdHJpbmcgb3IgbnVtYmVyXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNOdW1iZXI6IGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGV4dCAmJiAvXi0/XFxkKyhcXC5cXGQrKT8kLy50ZXN0KHRleHQgKyAnJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCBhIG51bWJlci5cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdGV4dCBUZXh0IHN0cmluZyBvciBudW1iZXJcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEZWMgTWF4aW11bSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKC0xIDogSW5maW5pdHkpXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBnZXROdW1iZXI6IGZ1bmN0aW9uICh0ZXh0LCBtYXhEZWMpIHtcclxuICAgICAgICBpZiAoIXRleHQpIHJldHVybiAwO1xyXG5cclxuICAgICAgICBsZXQgbnVtYmVyID0gKHRleHQgKyAnJykubWF0Y2goLy0/XFxkKyhcXC5cXGQrKT8vKTtcclxuICAgICAgICBpZiAoIW51bWJlciB8fCAhbnVtYmVyWzBdKSByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgbnVtYmVyID0gbnVtYmVyWzBdO1xyXG4gICAgICAgIHJldHVybiBtYXhEZWMgPCAwID8gbnVtYmVyICogMSA6IG1heERlYyA9PT0gMCA/IHRoaXMuX3cuTWF0aC5yb3VuZChudW1iZXIgKiAxKSA6IChudW1iZXIgKiAxKS50b0ZpeGVkKG1heERlYykgKiAxO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgYWxsIFwiY2hpbGRyZW5cIiBvZiB0aGUgYXJndW1lbnQgdmFsdWUgZWxlbWVudCAoV2l0aG91dCB0ZXh0IG5vZGVzKVxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IGVsZW1lbnQgdG8gZ2V0IGNoaWxkIG5vZGVcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdmFsaWRhdGlvbiBDb25kaXRpb25hbCBmdW5jdGlvblxyXG4gICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICovXHJcbiAgICBnZXRMaXN0Q2hpbGRyZW46IGZ1bmN0aW9uIChlbGVtZW50LCB2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQuY2hpbGRyZW4gfHwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHJldHVybiBjaGlsZHJlbjtcclxuXHJcbiAgICAgICAgdmFsaWRhdGlvbiA9IHZhbGlkYXRpb24gfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuXHJcbiAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gY3VycmVudCAmJiB2YWxpZGF0aW9uKGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoISFjdXJyZW50LmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY3VycmVudC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY3VycmVudC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KShlbGVtZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgYWxsIFwiY2hpbGROb2Rlc1wiIG9mIHRoZSBhcmd1bWVudCB2YWx1ZSBlbGVtZW50IChJbmNsdWRlIHRleHQgbm9kZXMpXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgZWxlbWVudCB0byBnZXQgY2hpbGQgbm9kZVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIENvbmRpdGlvbmFsIGZ1bmN0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGdldExpc3RDaGlsZE5vZGVzOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsaWRhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XHJcbiAgICAgICAgaWYgKCFlbGVtZW50IHx8IGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHJldHVybiBjaGlsZHJlbjtcclxuXHJcbiAgICAgICAgdmFsaWRhdGlvbiA9IHZhbGlkYXRpb24gfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuXHJcbiAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gY3VycmVudCAmJiB2YWxpZGF0aW9uKGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGN1cnJlbnQuY2hpbGROb2Rlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KShlbGVtZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcGFyZW50cyBub2Rlcy5cclxuICAgICAqIFwiMFwiIHdoZW4gdGhlIHBhcmVudCBub2RlIGlzIHRoZSBXWVNJV1lHIGFyZWEuXHJcbiAgICAgKiBcIi0xXCIgd2hlbiB0aGUgZWxlbWVudCBhcmd1bWVudCBpcyB0aGUgV1lTSVdZRyBhcmVhLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBnZXRFbGVtZW50RGVwdGg6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50IHx8IHRoaXMuaXNXeXNpd3lnRGl2KGVsZW1lbnQpKSByZXR1cm4gLTE7XHJcblxyXG4gICAgICAgIGxldCBkZXB0aCA9IDA7XHJcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgIXRoaXMuaXNXeXNpd3lnRGl2KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGRlcHRoICs9IDE7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVwdGg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENvbXBhcmVzIHR3byBlbGVtZW50cyB0byBmaW5kIGEgY29tbW9uIGFuY2VzdG9yLCBhbmQgcmV0dXJucyB0aGUgb3JkZXIgb2YgdGhlIHR3byBlbGVtZW50cy5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gYSBOb2RlIHRvIGNvbXBhcmUuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGIgTm9kZSB0byBjb21wYXJlLlxyXG4gICAgICogQHJldHVybnMge09iamVjdH0geyBhbmNlc3N0b3IsIGEsIGIsIHJlc3VsdDogKGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwKSB9O1xyXG4gICAgICovXHJcbiAgICBjb21wYXJlRWxlbWVudHM6IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgbGV0IGFOb2RlID0gYSwgYk5vZGUgPSBiO1xyXG4gICAgICAgIHdoaWxlIChhTm9kZSAmJiBiTm9kZSAmJiBhTm9kZS5wYXJlbnROb2RlICE9PSBiTm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIGFOb2RlID0gYU5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgYk5vZGUgPSBiTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFhTm9kZSB8fCAhYk5vZGUpIHJldHVybiB7IGFuY2VzdG9yOiBudWxsLCBhOiBhLCBiOiBiLCByZXN1bHQ6IDAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBhTm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgY29uc3QgYUluZGV4ID0gdGhpcy5nZXRBcnJheUluZGV4KGNoaWxkcmVuLCBhTm9kZSk7XHJcbiAgICAgICAgY29uc3QgYkluZGV4ID0gdGhpcy5nZXRBcnJheUluZGV4KGNoaWxkcmVuLCBiTm9kZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFuY2VzdG9yOiBhTm9kZS5wYXJlbnROb2RlLFxyXG4gICAgICAgICAgICBhOiBhTm9kZSxcclxuICAgICAgICAgICAgYjogYk5vZGUsXHJcbiAgICAgICAgICAgIHJlc3VsdDogYUluZGV4ID4gYkluZGV4ID8gMSA6IGFJbmRleCA8IGJJbmRleCA/IC0xIDogMFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGFyZ3VtZW50IHZhbHVlLlxyXG4gICAgICogQSB0YWcgdGhhdCBzYXRpc2ZpZXMgdGhlIHF1ZXJ5IGNvbmRpdGlvbiBpcyBpbXBvcnRlZC5cclxuICAgICAqIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmQuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgUmVmZXJlbmNlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBxdWVyeSBRdWVyeSBTdHJpbmcgKG5vZGVOYW1lLCAuY2xhc3NOYW1lLCAjSUQsIDpuYW1lKSBvciB2YWxpZGF0aW9uIGZ1bmN0aW9uLlxyXG4gICAgICogTm90IHVzZSBpdCBsaWtlIGpxdWVyeS5cclxuICAgICAqIE9ubHkgb25lIGNvbmRpdGlvbiBjYW4gYmUgZW50ZXJlZCBhdCBhIHRpbWUuXHJcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRQYXJlbnRFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgcXVlcnkpIHtcclxuICAgICAgICBsZXQgY2hlY2s7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY2hlY2sgPSBxdWVyeTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgYXR0cjtcclxuICAgICAgICAgICAgaWYgKC9eXFwuLy50ZXN0KHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgYXR0ciA9ICdjbGFzc05hbWUnO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkgPSBxdWVyeS5zcGxpdCgnLicpWzFdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eIy8udGVzdChxdWVyeSkpIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSAnaWQnO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkgPSAnXicgKyBxdWVyeS5zcGxpdCgnIycpWzFdICsgJyQnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eOi8udGVzdChxdWVyeSkpIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSAnbmFtZSc7XHJcbiAgICAgICAgICAgICAgICBxdWVyeSA9ICdeJyArIHF1ZXJ5LnNwbGl0KCc6JylbMV0gKyAnJCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyID0gJ25vZGVOYW1lJztcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gJ14nICsgcXVlcnkgKyAnJCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyB0aGlzLl93LlJlZ0V4cChxdWVyeSwgJ2knKTtcclxuICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWdFeHAudGVzdChlbFthdHRyXSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aGlsZSAoZWxlbWVudCAmJiAhY2hlY2soZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNXeXNpd3lnRGl2KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIHByZXZpb3VzIHNpYmxpbmcgbGFzdCBjaGlsZC4gSWYgdGhlcmUgaXMgbm8gc2libGluZywgdGhlbiBpdCdsbCB0YWtlIGl0IGZyb20gdGhlIGNsb3Nlc3QgYW5jZXN0b3Igd2l0aCBjaGlsZFxyXG4gICAgICogUmV0dXJucyBudWxsIGlmIG5vdCBmb3VuZC5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBSZWZlcmVuY2UgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtOb2RlfG51bGx9IGNlaWxpbmcgSGlnaGVzdCBib3VuZGFyeSBhbGxvd2VkXHJcbiAgICAgKiBAcmV0dXJucyB7Tm9kZXxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRQcmV2aW91c0RlZXBlc3ROb2RlOiBmdW5jdGlvbiAobm9kZSwgY2VpbGluZykge1xyXG4gICAgICAgIGxldCBwcmV2aW91c05vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICBpZiAoIXByZXZpb3VzTm9kZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlOyBwYXJlbnROb2RlOyBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZSA9PT0gY2VpbGluZykgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZS5wcmV2aW91c1NpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBwYXJlbnROb2RlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXByZXZpb3VzTm9kZSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChwcmV2aW91c05vZGUubGFzdENoaWxkKSBwcmV2aW91c05vZGUgPSBwcmV2aW91c05vZGUubGFzdENoaWxkO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJldmlvdXNOb2RlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBuZXh0IHNpYmxpbmcgZmlyc3QgY2hpbGQuIElmIHRoZXJlIGlzIG5vIHNpYmxpbmcsIHRoZW4gaXQnbGwgdGFrZSBpdCBmcm9tIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHdpdGggY2hpbGRcclxuICAgICAqIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmQuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgUmVmZXJlbmNlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7Tm9kZXxudWxsfSBjZWlsaW5nIEhpZ2hlc3QgYm91bmRhcnkgYWxsb3dlZFxyXG4gICAgICogQHJldHVybnMge05vZGV8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0TmV4dERlZXBlc3ROb2RlOiBmdW5jdGlvbiAobm9kZSwgY2VpbGluZykge1xyXG4gICAgICAgIGxldCBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgaWYgKCFuZXh0Tm9kZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlOyBwYXJlbnROb2RlOyBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZSA9PT0gY2VpbGluZykgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZS5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gcGFyZW50Tm9kZS5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIW5leHROb2RlKSByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKG5leHROb2RlLmZpcnN0Q2hpbGQpIG5leHROb2RlID0gbmV4dE5vZGUuZmlyc3RDaGlsZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5leHROb2RlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIGNoaWxkIGVsZW1lbnQgb2YgdGhlIGFyZ3VtZW50IHZhbHVlLlxyXG4gICAgICogQSB0YWcgdGhhdCBzYXRpc2ZpZXMgdGhlIHF1ZXJ5IGNvbmRpdGlvbiBpcyBpbXBvcnRlZC5cclxuICAgICAqIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmQuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgUmVmZXJlbmNlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBxdWVyeSBRdWVyeSBTdHJpbmcgKG5vZGVOYW1lLCAuY2xhc3NOYW1lLCAjSUQsIDpuYW1lKSBvciB2YWxpZGF0aW9uIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBsYXN0IElmIHRydWUgcmV0dXJucyB0aGUgbGFzdCBub2RlIGFtb25nIHRoZSBmb3VuZCBjaGlsZCBub2Rlcy4gKGRlZmF1bHQ6IGZpcnN0IG5vZGUpXHJcbiAgICAgKiBOb3QgdXNlIGl0IGxpa2UganF1ZXJ5LlxyXG4gICAgICogT25seSBvbmUgY29uZGl0aW9uIGNhbiBiZSBlbnRlcmVkIGF0IGEgdGltZS5cclxuICAgICAqIEByZXR1cm5zIHtFbGVtZW50fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldENoaWxkRWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHF1ZXJ5LCBsYXN0KSB7XHJcbiAgICAgICAgbGV0IGNoZWNrO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNoZWNrID0gcXVlcnk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGF0dHI7XHJcbiAgICAgICAgICAgIGlmICgvXlxcLi8udGVzdChxdWVyeSkpIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSAnY2xhc3NOYW1lJztcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkuc3BsaXQoJy4nKVsxXTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgvXiMvLnRlc3QocXVlcnkpKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyID0gJ2lkJztcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gJ14nICsgcXVlcnkuc3BsaXQoJyMnKVsxXSArICckJztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgvXjovLnRlc3QocXVlcnkpKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyID0gJ25hbWUnO1xyXG4gICAgICAgICAgICAgICAgcXVlcnkgPSAnXicgKyBxdWVyeS5zcGxpdCgnOicpWzFdICsgJyQnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXR0ciA9ICdub2RlTmFtZSc7XHJcbiAgICAgICAgICAgICAgICBxdWVyeSA9ICdeJyArIChxdWVyeSA9PT0gJ3RleHQnID8gJyMnICsgcXVlcnkgOiBxdWVyeSkgKyAnJCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyB0aGlzLl93LlJlZ0V4cChxdWVyeSwgJ2knKTtcclxuICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWdFeHAudGVzdChlbFthdHRyXSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjaGlsZExpc3QgPSB0aGlzLmdldExpc3RDaGlsZE5vZGVzKGVsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjaGVjayhjdXJyZW50KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNoaWxkTGlzdFtsYXN0ID8gY2hpbGRMaXN0Lmxlbmd0aCAtIDEgOiAwXTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gMS4gVGhlIGZpcnN0IG5vZGUgb2YgYWxsIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgXCJmaXJzdFwiIGVsZW1lbnQgaXMgcmV0dXJuZWQuXHJcbiAgICAgKiAyLiBUaGUgbGFzdCBub2RlIG9mIGFsbCB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIFwibGFzdFwiIGVsZW1lbnQgaXMgcmV0dXJuZWQuXHJcbiAgICAgKiAzLiBXaGVuIHRoZXJlIGlzIG5vIFwibGFzdFwiIGVsZW1lbnQsIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlcyBvZiBhbGwgdGhlIGNoaWxkcmVuIG9mIHRoZSBcImZpcnN0XCIgZWxlbWVudCBhcmUgcmV0dXJuZWQuXHJcbiAgICAgKiB7IHNjOiBcImZpcnN0XCIsIGVjOiBcImxhc3RcIiB9XHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGZpcnN0IEZpcnN0IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7Tm9kZXxudWxsfSBsYXN0IExhc3QgZWxlbWVudFxyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0RWRnZUNoaWxkTm9kZXM6IGZ1bmN0aW9uIChmaXJzdCwgbGFzdCkge1xyXG4gICAgICAgIGlmICghZmlyc3QpIHJldHVybjtcclxuICAgICAgICBpZiAoIWxhc3QpIGxhc3QgPSBmaXJzdDtcclxuXHJcbiAgICAgICAgd2hpbGUgKGZpcnN0ICYmIGZpcnN0Lm5vZGVUeXBlID09PSAxICYmIGZpcnN0LmNoaWxkTm9kZXMubGVuZ3RoID4gMCAmJiAhdGhpcy5pc0JyZWFrKGZpcnN0KSkgZmlyc3QgPSBmaXJzdC5maXJzdENoaWxkO1xyXG4gICAgICAgIHdoaWxlIChsYXN0ICYmIGxhc3Qubm9kZVR5cGUgPT09IDEgJiYgbGFzdC5jaGlsZE5vZGVzLmxlbmd0aCA+IDAgJiYgICF0aGlzLmlzQnJlYWsobGFzdCkpIGxhc3QgPSBsYXN0Lmxhc3RDaGlsZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2M6IGZpcnN0LFxyXG4gICAgICAgICAgICBlYzogbGFzdCB8fCBmaXJzdFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBsZWZ0IGFuZCB0b3Agb2YgYXJndW1lbnQuIHtsZWZ0OjAsIHRvcDowfVxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IFRhcmdldCBub2RlXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gd3lzaXd5Z0ZyYW1lIFdoZW4gdXNlIGlmcmFtZSBvcHRpb24sIGlmcmFtZSBvYmplY3Qgc2hvdWxkIGJlIHNlbnQgKGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPZmZzZXQ6IGZ1bmN0aW9uIChlbGVtZW50LCB3eXNpd3lnRnJhbWUpIHtcclxuICAgICAgICBsZXQgb2Zmc2V0TGVmdCA9IDA7XHJcbiAgICAgICAgbGV0IG9mZnNldFRvcCA9IDA7XHJcbiAgICAgICAgbGV0IG9mZnNldEVsZW1lbnQgPSBlbGVtZW50Lm5vZGVUeXBlID09PSAzID8gZWxlbWVudC5wYXJlbnRFbGVtZW50IDogZWxlbWVudDtcclxuICAgICAgICBjb25zdCB3eXNpd3lnID0gdGhpcy5nZXRQYXJlbnRFbGVtZW50KGVsZW1lbnQsIHRoaXMuaXNXeXNpd3lnRGl2LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB3aGlsZSAob2Zmc2V0RWxlbWVudCAmJiAhdGhpcy5oYXNDbGFzcyhvZmZzZXRFbGVtZW50LCAnc2UtY29udGFpbmVyJykgJiYgb2Zmc2V0RWxlbWVudCAhPT0gd3lzaXd5Zykge1xyXG4gICAgICAgICAgICBvZmZzZXRMZWZ0ICs9IG9mZnNldEVsZW1lbnQub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgb2Zmc2V0VG9wICs9IG9mZnNldEVsZW1lbnQub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICBvZmZzZXRFbGVtZW50ID0gb2Zmc2V0RWxlbWVudC5vZmZzZXRQYXJlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpZnJhbWUgPSB3eXNpd3lnRnJhbWUgJiYgL2lmcmFtZS9pLnRlc3Qod3lzaXd5Z0ZyYW1lLm5vZGVOYW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGVmdDogb2Zmc2V0TGVmdCArIChpZnJhbWUgPyB3eXNpd3lnRnJhbWUucGFyZW50RWxlbWVudC5vZmZzZXRMZWZ0IDogMCksXHJcbiAgICAgICAgICAgIHRvcDogKG9mZnNldFRvcCAtICh3eXNpd3lnID8gd3lzaXd5Zy5zY3JvbGxUb3AgOiAwKSkgKyAoaWZyYW1lID8gd3lzaXd5Z0ZyYW1lLnBhcmVudEVsZW1lbnQub2Zmc2V0VG9wIDogMClcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJdCBjb21wYXJlcyB0aGUgc3RhcnQgYW5kIGVuZCBpbmRleGVzIG9mIFwiYVwiIGFuZCBcImJcIiBhbmQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIG92ZXJsYXBwaW5nIGluZGV4ZXMgaW4gdGhlIHJhbmdlLlxyXG4gICAgICogZXgpIDEsIDUsIDQsIDYgPT4gXCIyXCIgKDQgfiA1KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFTdGFydCBTdGFydCBpbmRleCBvZiBcImFcIlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFFbmQgRW5kIGluZGV4IG9mIFwiYVwiXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYlN0YXJ0IFN0YXJ0IGluZGV4IG9mIFwiYlwiXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYkVuZCBTdGFydCBpbmRleCBvZiBcImJcIlxyXG4gICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAqL1xyXG4gICAgZ2V0T3ZlcmxhcFJhbmdlQXRJbmRleDogZnVuY3Rpb24gKGFTdGFydCwgYUVuZCwgYlN0YXJ0LCBiRW5kKSB7XHJcbiAgICAgICAgaWYgKGFTdGFydCA8PSBiRW5kID8gYUVuZCA8IGJTdGFydCA6IGFFbmQgPiBiU3RhcnQpIHJldHVybiAwO1xyXG5cclxuICAgICAgICBjb25zdCBvdmVybGFwID0gKGFTdGFydCA+IGJTdGFydCA/IGFTdGFydCA6IGJTdGFydCkgLSAoYUVuZCA8IGJFbmQgPyBhRW5kIDogYkVuZCk7XHJcbiAgICAgICAgcmV0dXJuIChvdmVybGFwIDwgMCA/IG92ZXJsYXAgKiAtMSA6IG92ZXJsYXApICsgMTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU2V0IHRoZSB0ZXh0IGNvbnRlbnQgdmFsdWUgb2YgdGhlIGFyZ3VtZW50IHZhbHVlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCBFbGVtZW50IHRvIHJlcGxhY2UgdGV4dCBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHh0IFRleHQgdG8gYmUgYXBwbGllZFxyXG4gICAgICovXHJcbiAgICBjaGFuZ2VUeHQ6IGZ1bmN0aW9uIChlbGVtZW50LCB0eHQpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIXR4dCkgcmV0dXJuO1xyXG4gICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0eHQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJlcGxhY2UgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRhcmdldCBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fSBuZXdFbGVtZW50IFN0cmluZyBvciBlbGVtZW50IG9mIHRoZSBuZXcgZWxlbWVudCB0byBhcHBseVxyXG4gICAgICovXHJcbiAgICBjaGFuZ2VFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgbmV3RWxlbWVudCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmV3RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQub3V0ZXJIVE1MKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm91dGVySFRNTCA9IG5ld0VsZW1lbnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkb2MgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICAgICAgZG9jLmlubmVySFRNTCA9IG5ld0VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBuZXdFbGVtZW50ID0gZG9jLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0VsZW1lbnQsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZXdFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3RWxlbWVudCwgZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgc3R5bGUsIGlmIGFsbCBzdHlsZXMgYXJlIGRlbGV0ZWQsIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGFyZSBkZWxldGVkLlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gc2V0IHN0eWxlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3R5bGVOYW1lIFN0eWxlIGF0dHJpYnV0ZSBuYW1lIChtYXJnaW5MZWZ0LCB0ZXh0QWxpZ24uLi4pXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbHVlIFN0eWxlIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFN0eWxlOiBmdW5jdGlvbiAoZWxlbWVudCwgc3R5bGVOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGVbc3R5bGVOYW1lXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoIXZhbHVlICYmICFlbGVtZW50LnN0eWxlLmNzc1RleHQpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmUgd2hldGhlciBhbnkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudHMgYXJlIGFzc2lnbmVkIHRoZSBnaXZlbiBjbGFzc1xyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRzIHRvIHNlYXJjaCBjbGFzcyBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIENsYXNzIG5hbWUgdG8gc2VhcmNoIGZvclxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgIHJldHVybiAobmV3IHRoaXMuX3cuUmVnRXhwKGNsYXNzTmFtZSkpLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBBcHBlbmQgdGhlIGNsYXNzTmFtZSB2YWx1ZSBvZiB0aGUgYXJndW1lbnQgdmFsdWUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRzIHRvIGFkZCBjbGFzcyBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIENsYXNzIG5hbWUgdG8gYmUgYWRkXHJcbiAgICAgKi9cclxuICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGNoZWNrID0gbmV3IHRoaXMuX3cuUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpO1xyXG4gICAgICAgIGlmIChjaGVjay50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAoZWxlbWVudC5jbGFzc05hbWUubGVuZ3RoID4gMCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIHRoZSBjbGFzc05hbWUgdmFsdWUgb2YgdGhlIGFyZ3VtZW50IHZhbHVlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50cyB0byByZW1vdmUgY2xhc3MgbmFtZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZSBDbGFzcyBuYW1lIHRvIGJlIHJlbW92ZVxyXG4gICAgICovXHJcbiAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBjaGVjayA9IG5ldyB0aGlzLl93LlJlZ0V4cCgnKFxcXFxzfF4pJyArIGNsYXNzTmFtZSArICcoXFxcXHN8JCknKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoY2hlY2ssICcgJykudHJpbSgpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQuY2xhc3NOYW1lLnRyaW0oKSkgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEFyZ3VtZW50IHZhbHVlIElmIHRoZXJlIGlzIG5vIGNsYXNzIG5hbWUsIGluc2VydCBpdCBhbmQgZGVsZXRlIHRoZSBjbGFzcyBuYW1lIGlmIGl0IGV4aXN0c1xyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRzIHRvIHJlcGxhY2UgY2xhc3MgbmFtZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZSBDbGFzcyBuYW1lIHRvIGJlIGNoYW5nZVxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW58dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2sgPSBuZXcgdGhpcy5fdy5SZWdFeHAoJyhcXFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzfCQpJyk7XHJcbiAgICAgICAgaWYgKGNoZWNrLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShjaGVjaywgJyAnKS50cmltKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50LmNsYXNzTmFtZS50cmltKCkpIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVja3MgaWYgZWxlbWVudCBjYW4ndCBiZSBlYXNpbHkgZW5hYmxlZFxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2sgZm9yXHJcbiAgICAgKi9cclxuICAgIGlzSW1wb3J0YW50RGlzYWJsZWQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWltcG9ydGFudC1kaXNhYmxlZCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJbiB0aGUgcHJlZGVmaW5lZCBjb2RlIHZpZXcgbW9kZSwgdGhlIGJ1dHRvbnMgZXhjZXB0IHRoZSBleGVjdXRhYmxlIGJ1dHRvbiBhcmUgY2hhbmdlZCB0byB0aGUgJ2Rpc2FibGVkJyBzdGF0ZS5cclxuICAgICAqIGNvcmUuY29kZVZpZXdEaXNhYmxlZEJ1dHRvbnMgKEFuIGFycmF5IG9mIGJ1dHRvbnMgd2hvc2UgY2xhc3MgbmFtZSBpcyBub3QgXCJzZS1jb2RlLXZpZXctZW5hYmxlZFwiKVxyXG4gICAgICogY29yZS5yZXNpemluZ0Rpc2FibGVkQnV0dG9ucyAoQW4gYXJyYXkgb2YgYnV0dG9ucyB3aG9zZSBjbGFzcyBuYW1lIGlzIG5vdCBcInNlLXJlc2l6aW5nLWVuYWJsZWRcIilcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgRGlzYWJsZWQgdmFsdWVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IGJ1dHRvbkxpc3QgQnV0dG9uIGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGltcG9ydGFudCBJZiBwcml2ZWxlZ2VkIG1vZGUgc2hvdWxkIGJlIHVzZWQgKE5lY2Vzc2FyeSB0byBzd2l0Y2ggaW1wb3J0YW50RGlzYWJsZWQgYnV0dG9ucylcclxuICAgICAqL1xyXG4gICAgc2V0RGlzYWJsZWRCdXR0b25zOiBmdW5jdGlvbiAoZGlzYWJsZWQsIGJ1dHRvbkxpc3QsIGltcG9ydGFudCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBidXR0b25MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBidXR0b24gPSBidXR0b25MaXN0W2ldO1xyXG4gICAgICAgICAgICBpZiAoaW1wb3J0YW50IHx8ICF0aGlzLmlzSW1wb3J0YW50RGlzYWJsZWQoYnV0dG9uKSkgYnV0dG9uLmRpc2FibGVkID0gZGlzYWJsZWQ7XHJcbiAgICAgICAgICAgIGlmIChpbXBvcnRhbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW1wb3J0YW50LWRpc2FibGVkJywgJycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWltcG9ydGFudC1kaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgYXJndW1lbnUgdmFsdWUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBpdGVtIE5vZGUgdG8gYmUgcmVtb3ZlXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUl0ZW06IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaWYgKCFpdGVtKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmKHR5cGVvZiBpdGVtLnJlbW92ZSA9PT0gJ2Z1bmN0aW9uJykgaXRlbS5yZW1vdmUoKTtcclxuICAgICAgICBlbHNlIGlmIChpdGVtLnBhcmVudE5vZGUpIGl0ZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpdGVtKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIGFsbCBwYXJlbnQgbm9kZXMgdGhhdCBtYXRjaCB0aGUgY29uZGl0aW9uLlxyXG4gICAgICogUmV0dXJucyBhbiB7c2M6IHByZXZpb3VzU2libGluZywgZWM6IG5leHRTaWJsaW5nfSh0aGUgZGVsZXRlZCBub2RlIHJlZmVyZW5jZSkgb3IgbnVsbC5cclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gaXRlbSBOb2RlIHRvIGJlIHJlbW92ZVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIFZhbGlkYXRpb24gZnVuY3Rpb24uIGRlZmF1bHQoRGVsZXRlZCBpZiBpdCBvbmx5IGhhdmUgYnJlYWtMaW5lIGFuZCBibGFua3MpXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gc3RvcFBhcmVudCBTdG9wIHdoZW4gdGhlIHBhcmVudCBub2RlIHJlYWNoZXMgc3RvcFBhcmVudFxyXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfSB7c2M6IHByZXZpb3VzU2libGluZywgZWM6IG5leHRTaWJsaW5nfVxyXG4gICAgICovXHJcbiAgICByZW1vdmVJdGVtQWxsUGFyZW50czogZnVuY3Rpb24gKGl0ZW0sIHZhbGlkYXRpb24sIHN0b3BQYXJlbnQpIHtcclxuICAgICAgICBpZiAoIWl0ZW0pIHJldHVybiBudWxsO1xyXG4gICAgICAgIGxldCBjYyA9IG51bGw7XHJcbiAgICAgICAgaWYgKCF2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHN0b3BQYXJlbnQgfHwgdGhpcy5pc0NvbXBvbmVudChjdXJyZW50KSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGN1cnJlbnQudGV4dENvbnRlbnQudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQubGVuZ3RoID09PSAwIHx8IC9eKFxcbnxcXHUyMDBCKSskLy50ZXN0KHRleHQpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNXeXNpd3lnRGl2KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50ICYmIHZhbGlkYXRpb24oZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2M6IGVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWM6IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhwYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfShpdGVtKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjYztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRGV0YWNoIE5lc3RlZCBhbGwgbmVzdGVkIGxpc3RzIHVuZGVyIHRoZSBcImJhc2VOb2RlXCIuXHJcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCB3aXRoIG5lc3RlZCByZW1vdmVkLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBiYXNlTm9kZSBFbGVtZW50IG9uIHdoaWNoIHRvIGJhc2UuXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFsbCBJZiB0cnVlLCBpdCBhbHNvIGRldGFjaCBhbGwgbmVzdGVkIGxpc3RzIG9mIGEgcmV0dXJuZWQgbGlzdC5cclxuICAgICAqIEByZXR1cm5zIHtFbGVtZW50fVxyXG4gICAgICovXHJcbiAgICBkZXRhY2hOZXN0ZWRMaXN0OiBmdW5jdGlvbiAoYmFzZU5vZGUsIGFsbCkge1xyXG4gICAgICAgIGNvbnN0IHJOb2RlID0gdGhpcy5fZGVsZXRlTmVzdGVkTGlzdChiYXNlTm9kZSk7XHJcbiAgICAgICAgbGV0IHJhbmdlRWxlbWVudCwgY05vZGVzO1xyXG5cclxuICAgICAgICBpZiAock5vZGUpIHtcclxuICAgICAgICAgICAgcmFuZ2VFbGVtZW50ID0gck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY05vZGVzID0gck5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmdldFBvc2l0aW9uSW5kZXgoYmFzZU5vZGUpO1xyXG4gICAgICAgICAgICB3aGlsZSAoY05vZGVzW2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VFbGVtZW50LmFwcGVuZENoaWxkKGNOb2Rlc1tpbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmFuZ2VFbGVtZW50ID0gYmFzZU5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgckNoaWxkcmVuO1xyXG4gICAgICAgIGlmICghYWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlcHRoID0gdGhpcy5nZXRFbGVtZW50RGVwdGgoYmFzZU5vZGUpICsgMjtcclxuICAgICAgICAgICAgckNoaWxkcmVuID0gdGhpcy5nZXRMaXN0Q2hpbGRyZW4oYmFzZU5vZGUsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiB0aGlzLmlzTGlzdENlbGwoY3VycmVudCkgJiYgIWN1cnJlbnQucHJldmlvdXNFbGVtZW50U2libGluZyAmJiB0aGlzLmdldEVsZW1lbnREZXB0aChjdXJyZW50KSA9PT0gZGVwdGg7IH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgckNoaWxkcmVuID0gdGhpcy5nZXRMaXN0Q2hpbGRyZW4ocmFuZ2VFbGVtZW50LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc0xpc3RDZWxsKGN1cnJlbnQpICYmICFjdXJyZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gckNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlbGV0ZU5lc3RlZExpc3QockNoaWxkcmVuW2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyTm9kZSkge1xyXG4gICAgICAgICAgICByTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShyYW5nZUVsZW1lbnQsIHJOb2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgaWYgKGNOb2RlcyAmJiBjTm9kZXMubGVuZ3RoID09PSAwKSB0aGlzLnJlbW92ZUl0ZW0ock5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJhbmdlRWxlbWVudCA9PT0gYmFzZU5vZGUgPyByYW5nZUVsZW1lbnQucGFyZW50Tm9kZSA6IHJhbmdlRWxlbWVudDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU3ViIGZ1bmN0aW9uIG9mIHV0aWwuZGV0YWNoTmVzdGVkTGlzdCBtZXRob2QuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfZGVsZXRlTmVzdGVkTGlzdDogZnVuY3Rpb24gKGJhc2VOb2RlKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZVBhcmVudCA9IGJhc2VOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgbGV0IHNpYmxpbmcgPSBiYXNlUGFyZW50O1xyXG4gICAgICAgIGxldCBwYXJlbnQgPSBzaWJsaW5nLnBhcmVudE5vZGU7XHJcbiAgICAgICAgbGV0IGxpU2libGluZywgbGlQYXJlbnQsIGNoaWxkLCBpbmRleCwgYztcclxuXHJcbiAgICAgICAgd2hpbGUgKHRoaXMuaXNMaXN0Q2VsbChwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXRQb3NpdGlvbkluZGV4KGJhc2VOb2RlKTtcclxuICAgICAgICAgICAgbGlTaWJsaW5nID0gcGFyZW50Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgbGlQYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgY2hpbGQgPSBzaWJsaW5nO1xyXG4gICAgICAgICAgICB3aGlsZShjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgc2libGluZyA9IHNpYmxpbmcubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xpc3QoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYyA9IGNoaWxkLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpUGFyZW50Lmluc2VydEJlZm9yZShjW2luZGV4XSwgbGlTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMubGVuZ3RoID09PSAwKSB0aGlzLnJlbW92ZUl0ZW0oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsaVBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjaGlsZCA9IHNpYmxpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2libGluZyA9IGxpUGFyZW50O1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBsaVBhcmVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJhc2VQYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB0aGlzLnJlbW92ZUl0ZW0oYmFzZVBhcmVudCk7XHJcblxyXG4gICAgICAgIHJldHVybiBsaVBhcmVudDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gU3BsaXQgYWxsIHRhZ3MgYmFzZWQgb24gXCJiYXNlTm9kZVwiXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIHNwbGl0ZWQgdGFnLlxyXG4gICAgICogQHBhcmFtIHtOb2RlfSBiYXNlTm9kZSBFbGVtZW50IG9yIHRleHQgbm9kZSBvbiB3aGljaCB0byBiYXNlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcnxOb2RlfG51bGx9IG9mZnNldCBUZXh0IG9mZnNldCBvZiBcImJhc2VOb2RlXCIgKE9ubHkgdmFsaWQgd2hlbiBcImJhc2VOb2RlXCIgaXMgYSB0ZXh0IG5vZGUpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVwdGggVGhlIG5lc3RpbmcgZGVwdGggb2YgdGhlIGVsZW1lbnQgYmVpbmcgc3BsaXQuIChkZWZhdWx0OiAwKVxyXG4gICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIHNwbGl0RWxlbWVudDogZnVuY3Rpb24gKGJhc2VOb2RlLCBvZmZzZXQsIGRlcHRoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNXeXNpd3lnRGl2KGJhc2VOb2RlKSkgcmV0dXJuIGJhc2VOb2RlO1xyXG5cclxuICAgICAgICBpZiAob2Zmc2V0ICYmICF0aGlzLmlzTnVtYmVyKG9mZnNldCkpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSAgYmFzZU5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5nZXRQb3NpdGlvbkluZGV4KG9mZnNldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBiYXNlTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gYmFzZU5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IGluZGV4KSBwcmV2LmFwcGVuZENoaWxkKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPiBpbmRleCkgbmV4dC5hcHBlbmRDaGlsZChjaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgbGVuLS07XHJcbiAgICAgICAgICAgICAgICBpbmRleC0tO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocHJldi5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIGJhc2VOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHByZXYsIGJhc2VOb2RlKTtcclxuICAgICAgICAgICAgaWYgKG5leHQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSBiYXNlTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXh0LCBiYXNlTm9kZS5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGJhc2VOb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYnAgPSBiYXNlTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgbGV0IHN1ZmZpeEluZGV4ID0gMTtcclxuICAgICAgICBsZXQgbmV4dCA9IHRydWU7XHJcbiAgICAgICAgbGV0IG5ld0VsLCBjaGlsZHJlbiwgdGVtcDtcclxuICAgICAgICBpZiAoIWRlcHRoIHx8IGRlcHRoIDwgMCkgZGVwdGggPSAwO1xyXG5cclxuICAgICAgICBpZiAoYmFzZU5vZGUubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmdldFBvc2l0aW9uSW5kZXgoYmFzZU5vZGUpO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID49IDAgJiYgYmFzZU5vZGUubGVuZ3RoICE9PSBvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIGJhc2VOb2RlLnNwbGl0VGV4dChvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSB0aGlzLmdldE5vZGVGcm9tUGF0aChbaW5kZXggKyAxXSwgYnApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25seVplcm9XaWR0aFNwYWNlKGFmdGVyKSkgYWZ0ZXIuZGF0YSA9IHRoaXMuemVyb1dpZHRoU3BhY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGJhc2VOb2RlLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlTm9kZS5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZU5vZGUgPSBiYXNlTm9kZS5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGJhc2VOb2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSB0aGlzLmNyZWF0ZVRleHROb2RlKHRoaXMuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGFmdGVyLCBiYXNlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZU5vZGUgPSBhZnRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWJhc2VOb2RlLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0RWxlbWVudERlcHRoKGJhc2VOb2RlKSA9PT0gZGVwdGgpIG5leHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJhc2VOb2RlID0gYmFzZU5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYmFzZU5vZGUubm9kZVR5cGUgPT09IDEpIHN1ZmZpeEluZGV4ID0gMDtcclxuICAgICAgICBsZXQgZGVwdGhFbCA9IGJhc2VOb2RlO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLmdldEVsZW1lbnREZXB0aChkZXB0aEVsKSA+IGRlcHRoKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXRQb3NpdGlvbkluZGV4KGRlcHRoRWwpICsgc3VmZml4SW5kZXg7XHJcbiAgICAgICAgICAgIGRlcHRoRWwgPSBkZXB0aEVsLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICB0ZW1wID0gbmV3RWw7XHJcbiAgICAgICAgICAgIG5ld0VsID0gZGVwdGhFbC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IGRlcHRoRWwuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgIGlmICh0ZW1wKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xpc3RDZWxsKG5ld0VsKSAmJiB0aGlzLmlzTGlzdCh0ZW1wKSAmJiB0ZW1wLmZpcnN0RWxlbWVudENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RWwuaW5uZXJIVE1MID0gdGVtcC5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHRlbXAuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wLmNoaWxkcmVuLmxlbmd0aCA+IDApIG5ld0VsLmFwcGVuZENoaWxkKHRlbXApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdFbC5hcHBlbmRDaGlsZCh0ZW1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuW2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgbmV3RWwuYXBwZW5kQ2hpbGQoY2hpbGRyZW5baW5kZXhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRlcHRoRWwuY2hpbGROb2Rlcy5sZW5ndGggPD0gMSAmJiAoIWRlcHRoRWwuZmlyc3RDaGlsZCB8fCBkZXB0aEVsLmZpcnN0Q2hpbGQudGV4dENvbnRlbnQubGVuZ3RoID09PSAwKSkgZGVwdGhFbC5pbm5lckhUTUwgPSAnPGJyPic7XHJcblxyXG4gICAgICAgIGNvbnN0IHBFbGVtZW50ID0gZGVwdGhFbC5wYXJlbnROb2RlO1xyXG4gICAgICAgIGlmIChuZXh0KSBkZXB0aEVsID0gZGVwdGhFbC5uZXh0U2libGluZztcclxuICAgICAgICBpZiAoIW5ld0VsKSByZXR1cm4gZGVwdGhFbDtcclxuXHJcbiAgICAgICAgdGhpcy5tZXJnZVNhbWVUYWdzKG5ld0VsLCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5tZXJnZU5lc3RlZFRhZ3MobmV3RWwsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiB0aGlzLmlzTGlzdChjdXJyZW50KTsgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgaWYgKG5ld0VsLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkgcEVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5ld0VsLCBkZXB0aEVsKTtcclxuICAgICAgICBlbHNlIG5ld0VsID0gZGVwdGhFbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNMaXN0Q2VsbChuZXdFbCkgJiYgbmV3RWwuY2hpbGRyZW4gJiYgdGhpcy5pc0xpc3QobmV3RWwuY2hpbGRyZW5bMF0pKSB7XHJcbiAgICAgICAgICAgIG5ld0VsLmluc2VydEJlZm9yZSh0aGlzLmNyZWF0ZUVsZW1lbnQoJ0JSJyksIG5ld0VsLmNoaWxkcmVuWzBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChicC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkgdGhpcy5yZW1vdmVJdGVtKGJwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld0VsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBVc2Ugd2l0aCBcIm5wZGVQYXRoICh1dGlsLmdldE5vZGVQYXRoKVwiIHRvIG1lcmdlIHRoZSBzYW1lIGF0dHJpYnV0ZXMgYW5kIHRhZ3MgaWYgdGhleSBhcmUgcHJlc2VudCBhbmQgbW9kaWZ5IHRoZSBub2RlcGF0aC5cclxuICAgICAqIElmIFwib2Zmc2V0XCIgaGFzIGJlZW4gY2hhbmdlZCwgaXQgd2lsbCByZXR1cm4gYXMgbXVjaCBcIm9mZnNldFwiIGFzIGl0IGhhcyBiZWVuIG1vZGlmaWVkLlxyXG4gICAgICogQW4gYXJyYXkgY29udGFpbmluZyBjaGFuZ2Ugb2Zmc2V0cyBpcyByZXR1cm5lZCBpbiB0aGUgb3JkZXIgb2YgdGhlIFwibm9kZVBhdGhBcnJheVwiIGFycmF5LlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8bnVsbH0gbm9kZVBhdGhBcnJheSBBcnJheSBvZiBOb2RlUGF0aCBvYmplY3QgKFt1dGlsLmdldE5vZGVQYXRoKCksIC4uXSlcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb25seVRleHQgSWYgdHJ1ZSwgbm9uLXRleHQgbm9kZXMoIXV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZSkgbGlrZSAnc3BhbicsICdzdHJvbmcnLi4gYXJlIGlnbm9yZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFtvZmZzZXQsIC4uXVxyXG4gICAgICovXHJcbiAgICBtZXJnZVNhbWVUYWdzOiBmdW5jdGlvbiAoZWxlbWVudCwgbm9kZVBhdGhBcnJheSwgb25seVRleHQpIHtcclxuICAgICAgICBjb25zdCBpbnN0ID0gdGhpcztcclxuICAgICAgICBjb25zdCBub2RlUGF0aExlbiA9IG5vZGVQYXRoQXJyYXkgPyBub2RlUGF0aEFycmF5Lmxlbmd0aCA6IDA7XHJcbiAgICAgICAgbGV0IG9mZnNldHMgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAobm9kZVBhdGhMZW4pIHtcclxuICAgICAgICAgICAgb2Zmc2V0cyA9IHRoaXMuX3cuQXJyYXkuYXBwbHkobnVsbCwgbmV3IHRoaXMuX3cuQXJyYXkobm9kZVBhdGhMZW4pKS5tYXAodGhpcy5fdy5OdW1iZXIucHJvdG90eXBlLnZhbHVlT2YsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCwgZGVwdGgsIGRlcHRoSW5kZXgpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBjdXJyZW50LmNoaWxkTm9kZXM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoLCBjaGlsZCwgbmV4dDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgbmV4dCA9IGNoaWxkcmVuW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgIGlmICghY2hpbGQpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYoKG9ubHlUZXh0ICYmIGluc3QuX2lzSWdub3JlTm9kZUNoYW5nZShjaGlsZCkpIHx8ICghb25seVRleHQgJiYgKGluc3QuaXNUYWJsZShjaGlsZCkgfHwgaW5zdC5pc0xpc3RDZWxsKGNoaWxkKSB8fCAoaW5zdC5pc0Zvcm1hdEVsZW1lbnQoY2hpbGQpICYmICFpbnN0LmlzRnJlZUZvcm1hdEVsZW1lbnQoY2hpbGQpKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3QuaXNUYWJsZShjaGlsZCkgfHwgaW5zdC5pc0xpc3RDZWxsKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGNoaWxkLCBkZXB0aCArIDEsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPT09IDEgJiYgY3VycmVudC5ub2RlTmFtZSA9PT0gY2hpbGQubm9kZU5hbWUgJiYgY3VycmVudC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIG5vZGVQYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVQYXRoTGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXRoLCBjLCBwLCBjRGVwdGgsIHNwbGljZURlcHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IG5vZGVQYXRoTGVuOyBuKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBub2RlUGF0aEFycmF5W25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGggJiYgcGF0aFtkZXB0aF0gPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gY2hpbGQsIHAgPSBjdXJyZW50LCBjRGVwdGggPSBkZXB0aCwgc3BsaWNlRGVwdGggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjRGVwdGggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdC5nZXRBcnJheUluZGV4KHAuY2hpbGROb2RlcywgYykgIT09IHBhdGhbY0RlcHRoXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsaWNlRGVwdGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaGlsZC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gYy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjRGVwdGgtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGljZURlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguc3BsaWNlKGRlcHRoLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtkZXB0aF0gPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWVyZ2UgdGFnXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdC5jb3B5VGFnQXR0cmlidXRlcyhjaGlsZCwgY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZCwgY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdC5yZW1vdmVJdGVtKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSByZWN1cnNpb25GdW5jKGNoaWxkLCBkZXB0aCArIDEsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlTmFtZSA9PT0gbmV4dC5ub2RlTmFtZSAmJiBpbnN0LmlzU2FtZUF0dHJpYnV0ZXMoY2hpbGQsIG5leHQpICYmIGNoaWxkLmhyZWYgPT09IG5leHQuaHJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcyA9IGNoaWxkLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuID0gMCwgbkxlbiA9IGNoaWxkcy5sZW5ndGg7IG4gPCBuTGVuOyBuKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkc1tuXS50ZXh0Q29udGVudC5sZW5ndGggPiAwKSBjaGlsZExlbmd0aCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IGNoaWxkLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbmV4dC5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhZGRPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsICYmIHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dE9mZnNldCA9IGwubm9kZVR5cGUgPT09IDMgJiYgci5ub2RlVHlwZSA9PT0gMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkT2Zmc2V0ID0gbC50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wTCA9IGwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSh0ZW1wTCAmJiB0ZW1wTC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkT2Zmc2V0ICs9IHRlbXBMLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBMID0gdGVtcEwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRMZW5ndGggPiAwICYmIGwubm9kZVR5cGUgPT09IDMgJiYgci5ub2RlVHlwZSA9PT0gMyAmJiAobC50ZXh0Q29udGVudC5sZW5ndGggPiAwIHx8IHIudGV4dENvbnRlbnQubGVuZ3RoID4gMCkpIGNoaWxkTGVuZ3RoLS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVBhdGhMZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXRoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgbm9kZVBhdGhMZW47IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBub2RlUGF0aEFycmF5W25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoICYmIHBhdGhbZGVwdGhdID4gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVwdGggPiAwICYmIHBhdGhbZGVwdGggLSAxXSAhPT0gZGVwdGhJbmRleCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoW2RlcHRoXSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtkZXB0aCArIDFdID49IDAgJiYgcGF0aFtkZXB0aF0gPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbZGVwdGggKyAxXSArPSBjaGlsZExlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0T2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGwgJiYgbC5ub2RlVHlwZSA9PT0gMyAmJiByICYmIHIubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0c1tuXSArPSBhZGRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkT2Zmc2V0ID0gY2hpbGQudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC50ZXh0Q29udGVudCArPSBuZXh0LnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVBhdGhMZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXRoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgbm9kZVBhdGhMZW47IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBub2RlUGF0aEFycmF5W25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoICYmIHBhdGhbZGVwdGhdID4gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVwdGggPiAwICYmIHBhdGhbZGVwdGggLSAxXSAhPT0gZGVwdGhJbmRleCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoW2RlcHRoXSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtkZXB0aCArIDFdID49IDAgJiYgcGF0aFtkZXB0aF0gPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbZGVwdGggKyAxXSArPSBjaGlsZExlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldHNbbl0gKz0gYWRkT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuaW5uZXJIVE1MICs9IG5leHQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdC5yZW1vdmVJdGVtKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGNoaWxkLCBkZXB0aCArIDEsIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkoZWxlbWVudCwgMCwgMCk7XHJcblxyXG4gICAgICAgIHJldHVybiBvZmZzZXRzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmUgbmVzdGVkIHRhZ3Mgd2l0aG91dCBvdGhlciBjaGlsZCBub2Rlcy5cclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IG9iamVjdFxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd8bnVsbH0gdmFsaWRhdGlvbiBWYWxpZGF0aW9uIGZ1bmN0aW9uIC8gU3RyaW5nKFwidGFnMXx0YWcyLi5cIikgLyBJZiBudWxsLCBhbGwgdGFncyBhcmUgYXBwbGljYWJsZS5cclxuICAgICAqL1xyXG4gICAgbWVyZ2VOZXN0ZWRUYWdzOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsaWRhdGlvbikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGlvbiA9IGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiB0aGlzLnRlc3QoY3VycmVudC50YWdOYW1lKTsgfS5iaW5kKG5ldyB0aGlzLl93LlJlZ0V4cCgnXignICsgKHZhbGlkYXRpb24gPyB2YWxpZGF0aW9uIDogJy4rJykgKyAnKSQnLCAnaScpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWxpZGF0aW9uICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCkge1xyXG4gICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBjdXJyZW50LmNoaWxkcmVuO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGNoaWxkcmVuWzBdLm5vZGVOYW1lID09PSBjdXJyZW50Lm5vZGVOYW1lICYmIHZhbGlkYXRpb24oY3VycmVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gdGVtcC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXBwZW5kQ2hpbGQoY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudC5yZW1vdmVDaGlsZCh0ZW1wKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGN1cnJlbnQuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY3VycmVudC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KShlbGVtZW50KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIGEgZW1wdHkgY2hpbGQgbm9kZSBvZiBhcmd1bWVudCBlbGVtZW50LlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgbm9kZVxyXG4gICAgICogQHBhcmFtIHtOb2RlfG51bGx9IG5vdFJlbW92ZU5vZGUgRG8gbm90IHJlbW92ZSBub2RlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlRGVsZXRlIFdoZW4gYWxsIGNoaWxkIG5vZGVzIGFyZSBkZWxldGVkLCB0aGUgcGFyZW50IG5vZGUgaXMgYWxzbyBkZWxldGVkLlxyXG4gICAgICovXHJcbiAgICByZW1vdmVFbXB0eU5vZGU6IGZ1bmN0aW9uIChlbGVtZW50LCBub3RSZW1vdmVOb2RlLCBmb3JjZURlbGV0ZSkge1xyXG4gICAgICAgIGNvbnN0IGluc3QgPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAobm90UmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICBub3RSZW1vdmVOb2RlID0gaW5zdC5nZXRQYXJlbnRFbGVtZW50KG5vdFJlbW92ZU5vZGUsIGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudCA9PT0gY3VycmVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIChmdW5jdGlvbiByZWN1cnNpb25GdW5jKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGluc3QuX25vdFRleHROb2RlKGN1cnJlbnQpIHx8IGN1cnJlbnQgPT09IG5vdFJlbW92ZU5vZGUgfHwgaW5zdC5pc05vbkVkaXRhYmxlKGN1cnJlbnQpKSByZXR1cm4gMDtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnQgIT09IGVsZW1lbnQgJiYgaW5zdC5vbmx5WmVyb1dpZHRoU3BhY2UoY3VycmVudC50ZXh0Q29udGVudCkgJiYgKCFjdXJyZW50LmZpcnN0Q2hpbGQgfHwgIWluc3QuaXNCcmVhayhjdXJyZW50LmZpcnN0Q2hpbGQpKSAmJiAhY3VycmVudC5xdWVyeVNlbGVjdG9yKGluc3QuX2FsbG93ZWRFbXB0eU5vZGVMaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGN1cnJlbnQuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoLCByID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZHJlbltpICsgcl0gfHwgaW5zdC5pc0NvbXBvbmVudChjaGlsZHJlbltpICsgcl0pKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICByICs9IHJlY3Vyc2lvbkZ1bmMoY2hpbGRyZW5baSArIHJdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSkoZWxlbWVudCk7XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JjZURlbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSB3aGl0ZXNwYWNlIGJldHdlZW4gdGFncyBpbiBIVE1MIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIEhUTUwgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBodG1sUmVtb3ZlV2hpdGVTcGFjZTogZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICBpZiAoIWh0bWwpIHJldHVybiAnJztcclxuICAgICAgICByZXR1cm4gaHRtbC50cmltKCkucmVwbGFjZSgvPFxcLz8oPyFzdHJvbmd8c3Bhbnxmb250fGJ8dmFyfGl8ZW18dXxpbnN8c3xzdHJpa2V8ZGVsfHN1YnxzdXB8bWFya3xhfGxhYmVsfGNvZGV8c3VtbWFyeSlbXj5ePF0rPlxccysoPz08KS9pZywgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ucmVwbGFjZSgvXFxuL2csICcnKS5yZXBsYWNlKC9cXHMrLywgJyAnKTsgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEhUTUwgY29kZSBjb21wcmVzc2lvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgSFRNTCBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEhUTUwgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGh0bWxDb21wcmVzczogZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC9cXG4vZywgJycpLnJlcGxhY2UoLyg+KSg/OlxccyspKDwpL2csICckMSQyJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIFNvcnQgYSBlbGVtZW50IGFycmF5IGJ5IGRlcHRoIG9mIGVsZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBBcnJheSBvYmplY3RcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZGVzIHRydWU6IGRlc2NlbmRpbmcgb3JkZXIgLyBmYWxzZTogYXNjZW5kaW5nIG9yZGVyXHJcbiAgICAgKi9cclxuICAgIHNvcnRCeURlcHRoOiBmdW5jdGlvbiAoYXJyYXksIGRlcykge1xyXG4gICAgICAgIGNvbnN0IHQgPSAhZGVzID8gLTEgOiAxO1xyXG4gICAgICAgIGNvbnN0IGYgPSB0ICogLTE7XHJcblxyXG4gICAgICAgIGFycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzTGlzdENlbGwoYSkgfHwgIXRoaXMuaXNMaXN0Q2VsbChiKSkgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIGEgPSB0aGlzLmdldEVsZW1lbnREZXB0aChhKTtcclxuICAgICAgICAgICAgYiA9IHRoaXMuZ2V0RWxlbWVudERlcHRoKGIpO1xyXG4gICAgICAgICAgICByZXR1cm4gYSA+IGIgPyB0IDogYSA8IGIgPyBmIDogMDtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRXNjYXBlIGEgc3RyaW5nIGZvciBzYWZlIHVzZSBpbiByZWd1bGFyIGV4cHJlc3Npb25zLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gZXNjYXBlXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBlc2NhcGVTdHJpbmdSZWdleHA6IGZ1bmN0aW9uIChzdHJpbmcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHdpdGggc3BlY2lhbCBtZWFuaW5nIGVpdGhlciBpbnNpZGUgb3Igb3V0c2lkZSBjaGFyYWN0ZXIgc2V0cy5cclxuICAgICAgICAvLyBVc2UgYSBzaW1wbGUgYmFja3NsYXNoIGVzY2FwZSB3aGVuIGl04oCZcyBhbHdheXMgdmFsaWQsIGFuZCBhIGBcXHhubmAgZXNjYXBlIHdoZW4gdGhlIHNpbXBsZXIgZm9ybSB3b3VsZCBiZSBkaXNhbGxvd2VkIGJ5IFVuaWNvZGUgcGF0dGVybnPigJkgc3RyaWN0ZXIgZ3JhbW1hci5cclxuICAgICAgICByZXR1cm4gc3RyaW5nXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZywgJ1xcXFwkJicpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8tL2csICdcXFxceDJkJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9pc0V4Y2x1ZGVTZWxlY3Rpb25FbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiAhL0ZJR0NBUFRJT04vaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpICYmICh0aGlzLmlzQ29tcG9uZW50KGVsZW1lbnQpIHx8IC9GSUdVUkUvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gTm9kZXMgdGhhdCBuZWVkIHRvIGJlIGFkZGVkIHdpdGhvdXQgbW9kaWZpY2F0aW9uIHdoZW4gY2hhbmdpbmcgdGV4dCBub2Rlc1xyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2lzSWdub3JlTm9kZUNoYW5nZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlICE9PSAzICYmICh0aGlzLmlzTm9uRWRpdGFibGUoZWxlbWVudCkgfHwgIXRoaXMuaXNUZXh0U3R5bGVFbGVtZW50KGVsZW1lbnQpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gTm9kZXMgdGhhdCBtdXN0IHJlbWFpbiB1bmRldGFjaGVkIHdoZW4gY2hhbmdpbmcgdGV4dCBub2RlcyAoQSwgTGFiZWwsIENvZGUsIFNwYW46Zm9udC1zaXplKVxyXG4gICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gZWxlbWVudCBFbGVtZW50IHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9pc01haW50YWluZWROb2RlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDMgJiYgL14oYXxsYWJlbHxjb2RlfHN1bW1hcnkpJC9pLnRlc3QodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnID8gZWxlbWVudCA6IGVsZW1lbnQubm9kZU5hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBOb2RlIHdpdGggZm9udC1zaXplIHN0eWxlXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfaXNTaXplTm9kZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlICE9PSAzICYmIHRoaXMuaXNUZXh0U3R5bGVFbGVtZW50KGVsZW1lbnQpICYmICEhZWxlbWVudC5zdHlsZS5mb250U2l6ZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gTm9kZXMgd2l0aG91dCB0ZXh0XHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgRWxlbWVudCB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbm90VGV4dE5vZGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSAhPT0gMyAmJiAodGhpcy5pc0NvbXBvbmVudChlbGVtZW50KSB8fCAvXihicnxpbnB1dHxzZWxlY3R8Y2FudmFzfGltZ3xpZnJhbWV8YXVkaW98dmlkZW8pJC9pLnRlc3QodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnID8gZWxlbWVudCA6IGVsZW1lbnQubm9kZU5hbWUpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICogQGRlc2NyaXB0aW9uIENoZWNrIGRpc2FsbG93ZWQgdGFnc1xyXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IEVsZW1lbnQgdG8gY2hlY2tcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2Rpc2FsbG93ZWRUYWdzOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiAvXihtZXRhfHNjcmlwdHxsaW5rfHN0eWxlfFthLXpdK1xcOlthLXpdKykkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIHdoaXRlbGlzdCBSZWdFeHAgb2JqZWN0LlxyXG4gICAgICogUmV0dXJuIFJlZ0V4cCBmb3JtYXQ6IG5ldyBSZWdFeHAoXCI8XFxcXC8/XFxcXGIoPyFcIiArIGxpc3QgKyBcIilcXFxcYltePl48XSorPlwiLCBcImdpXCIpXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGlzdCBUYWdzIGxpc3QgKFwiYnJ8cHxkaXZ8cHJlLi4uXCIpXHJcbiAgICAgKiBAcmV0dXJucyB7UmVnRXhwfVxyXG4gICAgICovXHJcbiAgICBjcmVhdGVUYWdzV2hpdGVsaXN0OiBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCc8XFxcXC8/XFxcXGIoPyFcXFxcYicgKyAobGlzdCB8fCAnJykucmVwbGFjZSgvXFx8L2csICdcXFxcYnxcXFxcYicpICsgJ1xcXFxiKVtePl0qPicsICdnaScpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgYmxhY2tsaXN0IFJlZ0V4cCBvYmplY3QuXHJcbiAgICAgKiBSZXR1cm4gUmVnRXhwIGZvcm1hdDogbmV3IFJlZ0V4cChcIjxcXFxcLz9cXFxcYig/OlwiICsgbGlzdCArIFwiKVxcXFxiW14+XjxdKis+XCIsIFwiZ2lcIilcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsaXN0IFRhZ3MgbGlzdCAoXCJicnxwfGRpdnxwcmUuLi5cIilcclxuICAgICAqIEByZXR1cm5zIHtSZWdFeHB9XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVRhZ3NCbGFja2xpc3Q6IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJzxcXFxcLz9cXFxcYig/OlxcXFxiJyArIChsaXN0IHx8ICdeJykucmVwbGFjZSgvXFx8L2csICdcXFxcYnxcXFxcYicpICsgJ1xcXFxiKVtePl0qPicsICdnaScpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBGaXggdGFncyB0aGF0IGRvIG5vdCBmaXQgdGhlIGVkaXRvciBmb3JtYXQuXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGRvY3VtZW50RnJhZ21lbnQgRG9jdW1lbnQgZnJhZ21lbnQgXCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFXCIgKG5vZGVUeXBlID09PSAxMSlcclxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBodG1sQ2hlY2tXaGl0ZWxpc3RSZWdFeHAgRWRpdG9yIHRhZ3Mgd2hpdGVsaXN0IChjb3JlLl9odG1sQ2hlY2tXaGl0ZWxpc3RSZWdFeHApXHJcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gaHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwIEVkaXRvciB0YWdzIGJsYWNrbGlzdCAoY29yZS5faHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwKVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2xhc3NOYW1lRmlsdGVyIENsYXNzIG5hbWUgZmlsdGVyIGZ1bmN0aW9uXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfY29uc2lzdGVuY3lDaGVja09mSFRNTDogZnVuY3Rpb24gKGRvY3VtZW50RnJhZ21lbnQsIGh0bWxDaGVja1doaXRlbGlzdFJlZ0V4cCwgaHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwLCBjbGFzc05hbWVGaWx0ZXIpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJdCBpcyBjYW4gdXNlIFwiLmNoaWxkcmVuKHV0aWwuZ2V0TGlzdENoaWxkcmVuKVwiIHRvIGV4Y2x1ZGUgdGV4dCBub2RlcywgYnV0IFwiZG9jdW1lbnRGcmFnbWVudC5jaGlsZHJlblwiIGlzIG5vdCBzdXBwb3J0ZWQgaW4gSUUuXHJcbiAgICAgICAgICogU28gY2hlY2sgdGhlIG5vZGUgdHlwZSBhbmQgZXhjbHVkZSB0aGUgdGV4dCBubyAoY3VycmVudC5ub2RlVHlwZSAhPT0gMSlcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCByZW1vdmVUYWdzID0gW10sIGVtcHR5VGFncyA9IFtdLCB3cm9uZ0xpc3QgPSBbXSwgd2l0aG91dEZvcm1hdENlbGxzID0gW107XHJcblxyXG4gICAgICAgIC8vIHdyb25nIHBvc2l0aW9uXHJcbiAgICAgICAgY29uc3Qgd3JvbmdUYWdzID0gdGhpcy5nZXRMaXN0Q2hpbGROb2Rlcyhkb2N1bWVudEZyYWdtZW50LCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNMaXN0KGN1cnJlbnQucGFyZW50RWxlbWVudCkpIHJlbW92ZVRhZ3MucHVzaChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gd2hpdGUgbGlzdFxyXG4gICAgICAgICAgICBpZiAoaHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwLnRlc3QoY3VycmVudC5ub2RlTmFtZSkgfHwgKCFodG1sQ2hlY2tXaGl0ZWxpc3RSZWdFeHAudGVzdChjdXJyZW50Lm5vZGVOYW1lKSAmJiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIHRoaXMuaXNOb3RDaGVja2luZ05vZGUoY3VycmVudCkpKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVUYWdzLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGVtcHR5IHRhZ3NcclxuICAgICAgICAgICAgY29uc3QgbnJ0YWcgPSAhdGhpcy5nZXRQYXJlbnRFbGVtZW50KGN1cnJlbnQsIHRoaXMuaXNOb3RDaGVja2luZ05vZGUpO1xyXG4gICAgICAgICAgICBpZiAoKCF0aGlzLmlzVGFibGUoY3VycmVudCkgJiYgIXRoaXMuaXNMaXN0Q2VsbChjdXJyZW50KSAmJiAhdGhpcy5pc0FuY2hvcihjdXJyZW50KSkgJiYgKHRoaXMuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpIHx8IHRoaXMuaXNSYW5nZUZvcm1hdEVsZW1lbnQoY3VycmVudCkgfHwgdGhpcy5pc1RleHRTdHlsZUVsZW1lbnQoY3VycmVudCkpICYmIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgJiYgbnJ0YWcpIHtcclxuICAgICAgICAgICAgICAgIGVtcHR5VGFncy5wdXNoKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB3cm9uZyBsaXN0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTGlzdChjdXJyZW50LnBhcmVudE5vZGUpICYmICF0aGlzLmlzTGlzdChjdXJyZW50KSAmJiAhdGhpcy5pc0xpc3RDZWxsKGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB3cm9uZ0xpc3QucHVzaChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdGFibGUgY2VsbHNcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDZWxsKGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmZWwgPSBjdXJyZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRm9ybWF0RWxlbWVudChmZWwpICYmICF0aGlzLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGZlbCkgJiYgIXRoaXMuaXNDb21wb25lbnQoZmVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpdGhvdXRGb3JtYXRDZWxscy5wdXNoKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2xhc3MgZmlsdGVyXHJcbiAgICAgICAgICAgIGlmIChucnRhZyAmJiBjdXJyZW50LmNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gbmV3IHRoaXMuX3cuQXJyYXkoY3VycmVudC5jbGFzc0xpc3QpLm1hcChjbGFzc05hbWVGaWx0ZXIpLmpvaW4oJyAnKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSBjdXJyZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgY3VycmVudC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGN1cnJlbnQucGFyZW50Tm9kZSAhPT0gZG9jdW1lbnRGcmFnbWVudCAmJiBucnRhZyAmJlxyXG4gICAgICAgICAgICAgICAgKCh0aGlzLmlzTGlzdENlbGwoY3VycmVudCkgJiYgIXRoaXMuaXNMaXN0KGN1cnJlbnQucGFyZW50Tm9kZSkpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKCh0aGlzLmlzRm9ybWF0RWxlbWVudChjdXJyZW50KSB8fCB0aGlzLmlzQ29tcG9uZW50KGN1cnJlbnQpKSAmJiAhdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50LnBhcmVudE5vZGUpICYmICF0aGlzLmdldFBhcmVudEVsZW1lbnQoY3VycmVudCwgdGhpcy5pc0NvbXBvbmVudCkpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlbW92ZVRhZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKHJlbW92ZVRhZ3NbaV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2tUYWdzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHdyb25nVGFncy5sZW5ndGgsIHQsIHA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0ID0gd3JvbmdUYWdzW2ldO1xyXG4gICAgICAgICAgICBwID0gdC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAoIXAgfHwgIXAucGFyZW50Tm9kZSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRQYXJlbnRFbGVtZW50KHQsIHRoaXMuaXNMaXN0Q2VsbCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxDaGlsZHJlbiA9IHQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBjZWxsQ2hpbGRyZW4ubGVuZ3RoIC0gMTsgbGVuID49IDA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAuaW5zZXJ0QmVmb3JlKHQsIGNlbGxDaGlsZHJlbltqXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjaGVja1RhZ3MucHVzaCh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHAucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgcCk7XHJcbiAgICAgICAgICAgICAgICBjaGVja1RhZ3MucHVzaChwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoZWNrVGFncy5sZW5ndGgsIHQ7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0ID0gY2hlY2tUYWdzW2ldO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbmx5WmVyb1dpZHRoU3BhY2UodC50ZXh0Q29udGVudC50cmltKCkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW0odCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbXB0eVRhZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGVtcHR5VGFnc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gd3JvbmdMaXN0Lmxlbmd0aCwgdCwgdHAsIGNoaWxkcmVuLCBwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdCA9IHdyb25nTGlzdFtpXTtcclxuICAgICAgICAgICAgcCA9IHQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgaWYgKCFwKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIHRwID0gdGhpcy5jcmVhdGVFbGVtZW50KCdMSScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNGb3JtYXRFbGVtZW50KHQpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRwLmFwcGVuZENoaWxkKGNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHAuaW5zZXJ0QmVmb3JlKHRwLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHQgPSB0Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgdHAuYXBwZW5kQ2hpbGQod3JvbmdMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgIHAuaW5zZXJ0QmVmb3JlKHRwLCB0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHdpdGhvdXRGb3JtYXRDZWxscy5sZW5ndGgsIHQsIGY7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB0ID0gd2l0aG91dEZvcm1hdENlbGxzW2ldO1xyXG4gICAgICAgICAgICBmID0gdGhpcy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgZi5pbm5lckhUTUwgPSAodC50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoID09PSAwICYmIHQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSA/ICc8YnI+JyA6IHQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICB0LmlubmVySFRNTCA9IGYub3V0ZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3NldERlZmF1bHRPcHRpb25TdHlsZTogZnVuY3Rpb24gKG9wdGlvbnMsIGRlZmF1bHRTdHlsZSkge1xyXG4gICAgICAgIGxldCBvcHRpb25TdHlsZSA9ICcnO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmhlaWdodCkgb3B0aW9uU3R5bGUgKz0gJ2hlaWdodDonICsgb3B0aW9ucy5oZWlnaHQgKyAnOyc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubWluSGVpZ2h0KSBvcHRpb25TdHlsZSArPSAnbWluLWhlaWdodDonICsgb3B0aW9ucy5taW5IZWlnaHQgKyAnOyc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4SGVpZ2h0KSBvcHRpb25TdHlsZSArPSAnbWF4LWhlaWdodDonICsgb3B0aW9ucy5tYXhIZWlnaHQgKyAnOyc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24pIG9wdGlvblN0eWxlICs9ICdwb3NpdGlvbjonICsgb3B0aW9ucy5wb3NpdGlvbiArICc7JztcclxuICAgICAgICBpZiAob3B0aW9ucy53aWR0aCkgb3B0aW9uU3R5bGUgKz0gJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJzsnO1xyXG4gICAgICAgIGlmIChvcHRpb25zLm1pbldpZHRoKSBvcHRpb25TdHlsZSArPSAnbWluLXdpZHRoOicgKyBvcHRpb25zLm1pbldpZHRoICsgJzsnO1xyXG4gICAgICAgIGlmIChvcHRpb25zLm1heFdpZHRoKSBvcHRpb25TdHlsZSArPSAnbWF4LXdpZHRoOicgKyBvcHRpb25zLm1heFdpZHRoICsgJzsnO1xyXG5cclxuICAgICAgICBsZXQgdG9wID0gJycsIGZyYW1lID0gJycsIGVkaXRvciA9ICcnO1xyXG4gICAgICAgIGRlZmF1bHRTdHlsZSA9IG9wdGlvblN0eWxlICsgZGVmYXVsdFN0eWxlO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlQXJyID0gZGVmYXVsdFN0eWxlLnNwbGl0KCc7Jyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlQXJyLmxlbmd0aCwgczsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBzdHlsZUFycltpXS50cmltKCk7XHJcbiAgICAgICAgICAgIGlmICghcykgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmICgvXihtaW4tfG1heC0pP3dpZHRoXFxzKjovLnRlc3QocykgfHwgL14oei1pbmRleHxwb3NpdGlvbilcXHMqOi8udGVzdChzKSkge1xyXG4gICAgICAgICAgICAgICAgdG9wICs9IHMgKyAnOyc7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoL14obWluLXxtYXgtKT9oZWlnaHRcXHMqOi8udGVzdChzKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKC9eaGVpZ2h0Ly50ZXN0KHMpICYmIHMuc3BsaXQoJzonKVsxXS50cmltKCkgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnJhbWUgKz0gcyArICc7JztcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVkaXRvciArPSBzICsgJzsnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9wOiB0b3AsXHJcbiAgICAgICAgICAgIGZyYW1lOiBmcmFtZSxcclxuICAgICAgICAgICAgZWRpdG9yOiBlZGl0b3JcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0SWZyYW1lRG9jdW1lbnQ6IGZ1bmN0aW9uIChmcmFtZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGZyYW1lLnNldEF0dHJpYnV0ZSgnc2Nyb2xsaW5nJywgJ2F1dG8nKTtcclxuICAgICAgICBmcmFtZS5jb250ZW50RG9jdW1lbnQuaGVhZC5pbm5lckhUTUwgPSAnJyArXHJcbiAgICAgICAgICAgICc8bWV0YSBjaGFyc2V0PVwidXRmLThcIiAvPicgK1xyXG4gICAgICAgICAgICAnPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTFcIj4nICtcclxuICAgICAgICAgICAgdGhpcy5fc2V0SWZyYW1lQ3NzVGFncyhvcHRpb25zKTtcclxuICAgICAgICBmcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBvcHRpb25zLl9lZGl0YWJsZUNsYXNzO1xyXG4gICAgICAgIGZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgdHJ1ZSk7XHJcbiAgICAgICAgZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdhdXRvY29ycmVjdCcsIFwib2ZmXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0SWZyYW1lQ3NzVGFnczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBsaW5rTmFtZXMgPSBvcHRpb25zLmlmcmFtZUNTU0ZpbGVOYW1lO1xyXG4gICAgICAgIGNvbnN0IHdSZWdFeHAgPSB0aGlzLl93LlJlZ0V4cDtcclxuICAgICAgICBsZXQgdGFnU3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGYgPSAwLCBsZW4gPSBsaW5rTmFtZXMubGVuZ3RoLCBwYXRoOyBmIDwgbGVuOyBmKyspIHtcclxuICAgICAgICAgICAgcGF0aCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKC8oXmh0dHBzPzpcXC9cXC8pfCheZGF0YTp0ZXh0XFwvY3NzLCkvLnRlc3QobGlua05hbWVzW2ZdKSkge1xyXG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKGxpbmtOYW1lc1tmXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBDU1NGaWxlTmFtZSA9IG5ldyB3UmVnRXhwKCcoXnwuKltcXFxcL10pJyArIGxpbmtOYW1lc1tmXSArICcoXFxcXC4uKyk/XFxcXC5jc3MoPzpcXFxcPy4qfDsuKik/JCcsICdpJyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpbmsnKSwgaSA9IDAsIGxlbiA9IGMubGVuZ3RoLCBzdHlsZVRhZzsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVUYWcgPSBjW2ldLmhyZWYubWF0Y2goQ1NTRmlsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZVRhZykgcGF0aC5wdXNoKHN0eWxlVGFnWzBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFwYXRoIHx8IHBhdGgubGVuZ3RoID09PSAwKSB0aHJvdyAnW1NVTkVESVRPUi5jb25zdHJ1Y3Rvci5pZnJhbWUuZmFpbF0gVGhlIHN1bmVkaXRvciBDU1MgZmlsZXMgaW5zdGFsbGF0aW9uIHBhdGggY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgZGV0ZWN0ZWQuIFBsZWFzZSBzZXQgdGhlIG9wdGlvbiBwcm9wZXJ0eSBcImlmcmFtZUNTU0ZpbGVOYW1lXCIgYmVmb3JlIGNyZWF0aW5nIGVkaXRvciBpbnN0YW5jZXMuJztcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXRoLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdTdHJpbmcgKz0gJzxsaW5rIGhyZWY9XCInICsgcGF0aFtpXSArICdcIiByZWw9XCJzdHlsZXNoZWV0XCI+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRhZ1N0cmluZyArIChvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nID8gJzxzdHlsZT5cXG4vKiogSWZyYW1lIGhlaWdodCBhdXRvICovXFxuYm9keXtoZWlnaHQ6IG1pbi1jb250ZW50OyBvdmVyZmxvdzogaGlkZGVuO31cXG48L3N0eWxlPicgOiAnJyk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1dGlsOyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgX2ljb25zIGZyb20gJy4uL2Fzc2V0cy9kZWZhdWx0SWNvbnMnO1xyXG5pbXBvcnQgX2RlZmF1bHRMYW5nIGZyb20gJy4uL2xhbmcvZW4nO1xyXG5pbXBvcnQgdXRpbCBmcm9tICcuL3V0aWwnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gZG9jdW1lbnQgY3JlYXRlXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGV4dGFyZWFcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykgb3B0aW9ucyA9IHt9O1xyXG5cclxuICAgICAgICBjb25zdCBkb2MgPSBkb2N1bWVudDtcclxuXHJcbiAgICAgICAgLyoqIC0tLSBpbml0IG9wdGlvbnMgLS0tICovXHJcbiAgICAgICAgdGhpcy5faW5pdE9wdGlvbnMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICBcclxuICAgICAgICAvLyBzdW5lZGl0b3IgZGl2XHJcbiAgICAgICAgY29uc3QgdG9wX2RpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICB0b3BfZGl2LmNsYXNzTmFtZSA9ICdzdW4tZWRpdG9yJyArIChvcHRpb25zLnJ0bCA/ICcgc2UtcnRsJyA6ICcnKTtcclxuICAgICAgICBpZiAoZWxlbWVudC5pZCkgdG9wX2Rpdi5pZCA9ICdzdW5lZGl0b3JfJyArIGVsZW1lbnQuaWQ7XHJcbiAgICBcclxuICAgICAgICAvLyByZWxhdGl2ZSBkaXZcclxuICAgICAgICBjb25zdCByZWxhdGl2ZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICByZWxhdGl2ZS5jbGFzc05hbWUgPSAnc2UtY29udGFpbmVyJztcclxuICAgIFxyXG4gICAgICAgIC8vIHRvb2xiYXJcclxuICAgICAgICBjb25zdCB0b29sX2JhciA9IHRoaXMuX2NyZWF0ZVRvb2xCYXIoZG9jLCBvcHRpb25zLmJ1dHRvbkxpc3QsIG9wdGlvbnMucGx1Z2lucywgb3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgdG9vbGJhclNoYWRvdyA9IHRvb2xfYmFyLmVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICB0b29sYmFyU2hhZG93LmNsYXNzTmFtZSArPSAnIHNlLXRvb2xiYXItc2hhZG93JztcclxuICAgICAgICB0b29sX2Jhci5lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICBpZiAodG9vbF9iYXIucGx1Z2luQ2FsbEJ1dHRvbnMubWF0aCkgdGhpcy5fY2hlY2tLYXRleE1hdGgob3B0aW9ucy5rYXRleCk7XHJcbiAgICAgICAgY29uc3QgYXJyb3cgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgYXJyb3cuY2xhc3NOYW1lID0gJ3NlLWFycm93JztcclxuXHJcbiAgICAgICAgLy8gc3RpY2t5IHRvb2xiYXIgZHVtbXlcclxuICAgICAgICBjb25zdCBzdGlja3lfZHVtbXkgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgc3RpY2t5X2R1bW15LmNsYXNzTmFtZSA9ICdzZS10b29sYmFyLXN0aWNreS1kdW1teSc7XHJcbiAgICBcclxuICAgICAgICAvLyBpbm5lciBlZGl0b3IgZGl2XHJcbiAgICAgICAgY29uc3QgZWRpdG9yX2RpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBlZGl0b3JfZGl2LmNsYXNzTmFtZSA9ICdzZS13cmFwcGVyJztcclxuXHJcbiAgICAgICAgLyoqIC0tLSBpbml0IGVsZW1lbnRzIGFuZCBjcmVhdGUgYm90dG9tIGJhciAtLS0gKi9cclxuICAgICAgICBjb25zdCBpbml0RWxlbWVudHMgPSB0aGlzLl9pbml0RWxlbWVudHMob3B0aW9ucywgdG9wX2RpdiwgdG9vbF9iYXIuZWxlbWVudCwgYXJyb3cpO1xyXG5cclxuICAgICAgICBjb25zdCBib3R0b21CYXIgPSBpbml0RWxlbWVudHMuYm90dG9tQmFyO1xyXG4gICAgICAgIGNvbnN0IHd5c2l3eWdfZGl2ID0gaW5pdEVsZW1lbnRzLnd5c2l3eWdGcmFtZTtcclxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcl9zcGFuID0gaW5pdEVsZW1lbnRzLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIGxldCB0ZXh0YXJlYSA9IGluaXRFbGVtZW50cy5jb2RlVmlldztcclxuXHJcbiAgICAgICAgLy8gcmVzaXppbmcgYmFyXHJcbiAgICAgICAgY29uc3QgcmVzaXppbmdfYmFyID0gYm90dG9tQmFyLnJlc2l6aW5nQmFyO1xyXG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBib3R0b21CYXIubmF2aWdhdGlvbjtcclxuICAgICAgICBjb25zdCBjaGFyX3dyYXBwZXIgPSBib3R0b21CYXIuY2hhcldyYXBwZXI7XHJcbiAgICAgICAgY29uc3QgY2hhcl9jb3VudGVyID0gYm90dG9tQmFyLmNoYXJDb3VudGVyO1xyXG4gICAgXHJcbiAgICAgICAgLy8gbG9hZGluZyBib3hcclxuICAgICAgICBjb25zdCBsb2FkaW5nX2JveCA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBsb2FkaW5nX2JveC5jbGFzc05hbWUgPSAnc2UtbG9hZGluZy1ib3ggc3VuLWVkaXRvci1jb21tb24nO1xyXG4gICAgICAgIGxvYWRpbmdfYm94LmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwic2UtbG9hZGluZy1lZmZlY3RcIj48L2Rpdj4nO1xyXG5cclxuICAgICAgICAvLyBlbnRlciBsaW5lXHJcbiAgICAgICAgY29uc3QgbGluZV9icmVha2VyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGxpbmVfYnJlYWtlci5jbGFzc05hbWUgPSAnc2UtbGluZS1icmVha2VyJztcclxuICAgICAgICBsaW5lX2JyZWFrZXIuaW5uZXJIVE1MID0gJzxidXR0b24gY2xhc3M9XCJzZS1idG5cIj4nICsgb3B0aW9ucy5pY29ucy5saW5lX2JyZWFrICsgJzwvYnV0dG9uPic7XHJcbiAgICAgICAgY29uc3QgbGluZV9icmVha2VyX3QgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgbGluZV9icmVha2VyX3QuY2xhc3NOYW1lICs9ICdzZS1saW5lLWJyZWFrZXItY29tcG9uZW50JztcclxuICAgICAgICBjb25zdCBsaW5lX2JyZWFrZXJfYiA9IGxpbmVfYnJlYWtlcl90LmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICBsaW5lX2JyZWFrZXJfdC5pbm5lckhUTUwgPSBsaW5lX2JyZWFrZXJfYi5pbm5lckhUTUwgPSBvcHRpb25zLmljb25zLmxpbmVfYnJlYWs7XHJcbiAgICBcclxuICAgICAgICAvLyByZXNpemUgb3BlcmF0aW9uIGJhY2tncm91bmRcclxuICAgICAgICBjb25zdCByZXNpemVfYmFjayA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICByZXNpemVfYmFjay5jbGFzc05hbWUgPSAnc2UtcmVzaXppbmctYmFjayc7XHJcblxyXG4gICAgICAgIC8vLyBmb2N1cyB0ZW1wXHJcbiAgICAgICAgY29uc3QgZm9jdXNUZW1wID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0lOUFVUJyk7XHJcbiAgICAgICAgZm9jdXNUZW1wLnRhYkluZGV4ID0gLTE7XHJcbiAgICAgICAgZm9jdXNUZW1wLnN0eWxlLmNzc1RleHQgPSAncG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7IHRvcDogLTEwMDAwcHggIWltcG9ydGFudDsgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgd2lkdGg6IDAgIWltcG9ydGFudDsgaGVpZ2h0OiAwICFpbXBvcnRhbnQ7IG1hcmdpbjogMCAhaW1wb3J0YW50OyBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7JztcclxuXHJcbiAgICAgICAgLy8gdG9vbGJhciBjb250YWluZXJcclxuICAgICAgICBjb25zdCB0b29sYmFyQ29udGFpbmVyID0gb3B0aW9ucy50b29sYmFyQ29udGFpbmVyO1xyXG4gICAgICAgIGlmICh0b29sYmFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHRvb2xiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQodG9vbF9iYXIuZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRvb2xiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQodG9vbGJhclNoYWRvdyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZXNpemluZ2JhclxyXG4gICAgICAgIGNvbnN0IHJlc2l6aW5nQmFyQ29udGFpbmVyID0gb3B0aW9ucy5yZXNpemluZ0JhckNvbnRhaW5lcjtcclxuICAgICAgICBpZiAocmVzaXppbmdfYmFyICYmIHJlc2l6aW5nQmFyQ29udGFpbmVyKSByZXNpemluZ0JhckNvbnRhaW5lci5hcHBlbmRDaGlsZChyZXNpemluZ19iYXIpO1xyXG4gICAgXHJcbiAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXHJcbiAgICAgICAgZWRpdG9yX2Rpdi5hcHBlbmRDaGlsZCh0ZXh0YXJlYSk7XHJcbiAgICAgICAgaWYgKHBsYWNlaG9sZGVyX3NwYW4pIGVkaXRvcl9kaXYuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXJfc3Bhbik7XHJcbiAgICAgICAgaWYgKCF0b29sYmFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKHRvb2xfYmFyLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZCh0b29sYmFyU2hhZG93KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVsYXRpdmUuYXBwZW5kQ2hpbGQoc3RpY2t5X2R1bW15KTtcclxuICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChlZGl0b3JfZGl2KTtcclxuICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChyZXNpemVfYmFjayk7XHJcbiAgICAgICAgcmVsYXRpdmUuYXBwZW5kQ2hpbGQobG9hZGluZ19ib3gpO1xyXG4gICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKGxpbmVfYnJlYWtlcik7XHJcbiAgICAgICAgcmVsYXRpdmUuYXBwZW5kQ2hpbGQobGluZV9icmVha2VyX3QpO1xyXG4gICAgICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKGxpbmVfYnJlYWtlcl9iKTtcclxuICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChmb2N1c1RlbXApO1xyXG4gICAgICAgIGlmIChyZXNpemluZ19iYXIgJiYgIXJlc2l6aW5nQmFyQ29udGFpbmVyKSByZWxhdGl2ZS5hcHBlbmRDaGlsZChyZXNpemluZ19iYXIpO1xyXG4gICAgICAgIHRvcF9kaXYuYXBwZW5kQ2hpbGQocmVsYXRpdmUpO1xyXG5cclxuICAgICAgICB0ZXh0YXJlYSA9IHRoaXMuX2NoZWNrQ29kZU1pcnJvcihvcHRpb25zLCB0ZXh0YXJlYSk7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RlZDoge1xyXG4gICAgICAgICAgICAgICAgX3RvcDogdG9wX2RpdixcclxuICAgICAgICAgICAgICAgIF9yZWxhdGl2ZTogcmVsYXRpdmUsXHJcbiAgICAgICAgICAgICAgICBfdG9vbEJhcjogdG9vbF9iYXIuZWxlbWVudCxcclxuICAgICAgICAgICAgICAgIF90b29sYmFyU2hhZG93OiB0b29sYmFyU2hhZG93LFxyXG4gICAgICAgICAgICAgICAgX21lbnVUcmF5OiB0b29sX2Jhci5fbWVudVRyYXksXHJcbiAgICAgICAgICAgICAgICBfZWRpdG9yQXJlYTogZWRpdG9yX2RpdixcclxuICAgICAgICAgICAgICAgIF93eXNpd3lnQXJlYTogd3lzaXd5Z19kaXYsXHJcbiAgICAgICAgICAgICAgICBfY29kZUFyZWE6IHRleHRhcmVhLFxyXG4gICAgICAgICAgICAgICAgX3BsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcl9zcGFuLFxyXG4gICAgICAgICAgICAgICAgX3Jlc2l6aW5nQmFyOiByZXNpemluZ19iYXIsXHJcbiAgICAgICAgICAgICAgICBfbmF2aWdhdGlvbjogbmF2aWdhdGlvbixcclxuICAgICAgICAgICAgICAgIF9jaGFyV3JhcHBlcjogY2hhcl93cmFwcGVyLFxyXG4gICAgICAgICAgICAgICAgX2NoYXJDb3VudGVyOiBjaGFyX2NvdW50ZXIsXHJcbiAgICAgICAgICAgICAgICBfbG9hZGluZzogbG9hZGluZ19ib3gsXHJcbiAgICAgICAgICAgICAgICBfbGluZUJyZWFrZXI6IGxpbmVfYnJlYWtlcixcclxuICAgICAgICAgICAgICAgIF9saW5lQnJlYWtlcl90OiBsaW5lX2JyZWFrZXJfdCxcclxuICAgICAgICAgICAgICAgIF9saW5lQnJlYWtlcl9iOiBsaW5lX2JyZWFrZXJfYixcclxuICAgICAgICAgICAgICAgIF9yZXNpemVCYWNrOiByZXNpemVfYmFjayxcclxuICAgICAgICAgICAgICAgIF9zdGlja3lEdW1teTogc3RpY2t5X2R1bW15LFxyXG4gICAgICAgICAgICAgICAgX2Fycm93OiBhcnJvdyxcclxuICAgICAgICAgICAgICAgIF9mb2N1c1RlbXA6IGZvY3VzVGVtcFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxyXG4gICAgICAgICAgICBwbHVnaW5zOiB0b29sX2Jhci5wbHVnaW5zLFxyXG4gICAgICAgICAgICBwbHVnaW5DYWxsQnV0dG9uczogdG9vbF9iYXIucGx1Z2luQ2FsbEJ1dHRvbnMsXHJcbiAgICAgICAgICAgIF9yZXNwb25zaXZlQnV0dG9uczogdG9vbF9iYXIucmVzcG9uc2l2ZUJ1dHRvbnNcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayB0aGUgQ29kZU1pcnJvciBvcHRpb24gdG8gYXBwbHkgdGhlIENvZGVNaXJyb3IgYW5kIHJldHVybiB0aGUgQ29kZU1pcnJvciBlbGVtZW50LlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgb3B0aW9uc1xyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0ZXh0YXJlYSB0ZXh0YXJlYSBlbGVtZW50XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfY2hlY2tDb2RlTWlycm9yOiBmdW5jdGlvbiAob3B0aW9ucywgdGV4dGFyZWEpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5jb2RlTWlycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNtT3B0aW9ucyA9IFt7XHJcbiAgICAgICAgICAgICAgICBtb2RlOiAnaHRtbG1peGVkJyxcclxuICAgICAgICAgICAgICAgIGh0bWxNb2RlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBsaW5lV3JhcHBpbmc6IHRydWVcclxuICAgICAgICAgICAgfSwgKG9wdGlvbnMuY29kZU1pcnJvci5vcHRpb25zIHx8IHt9KV0ucmVkdWNlKGZ1bmN0aW9uIChpbml0LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5oYXNPd24ob3B0aW9uLCBrZXkpKSBpbml0W2tleV0gPSBvcHRpb25ba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpbml0O1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgY21PcHRpb25zLnZpZXdwb3J0TWFyZ2luID0gSW5maW5pdHk7XHJcbiAgICAgICAgICAgICAgICBjbU9wdGlvbnMuaGVpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjbSA9IG9wdGlvbnMuY29kZU1pcnJvci5zcmMuZnJvbVRleHRBcmVhKHRleHRhcmVhLCBjbU9wdGlvbnMpO1xyXG4gICAgICAgICAgICBjbS5kaXNwbGF5LndyYXBwZXIuc3R5bGUuY3NzVGV4dCA9IHRleHRhcmVhLnN0eWxlLmNzc1RleHQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IgPSBjbTtcclxuICAgICAgICAgICAgdGV4dGFyZWEgPSBjbS5kaXNwbGF5LndyYXBwZXI7XHJcbiAgICAgICAgICAgIHRleHRhcmVhLmNsYXNzTmFtZSArPSAnIHNlLXdyYXBwZXItY29kZS1taXJyb3InO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRleHRhcmVhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayBmb3IgYSBrYXRleCBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0ga2F0ZXgga2F0ZXggb2JqZWN0XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfY2hlY2tLYXRleE1hdGg6IGZ1bmN0aW9uIChrYXRleCkge1xyXG4gICAgICAgIGlmICgha2F0ZXgpIHRocm93IEVycm9yKCdbU1VORURJVE9SLmNyZWF0ZS5mYWlsXSBUbyB1c2UgdGhlIG1hdGggYnV0dG9uIHlvdSBuZWVkIHRvIGFkZCBhIFwia2F0ZXhcIiBvYmplY3QgdG8gdGhlIG9wdGlvbnMuJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGthdGV4T3B0aW9ucyA9IFt7XHJcbiAgICAgICAgICAgIHRocm93T25FcnJvcjogZmFsc2UsXHJcbiAgICAgICAgfSwgKGthdGV4Lm9wdGlvbnMgfHwge30pXS5yZWR1Y2UoZnVuY3Rpb24gKGluaXQsIG9wdGlvbikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5oYXNPd24ob3B0aW9uLCBrZXkpKSBpbml0W2tleV0gPSBvcHRpb25ba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW5pdDtcclxuICAgICAgICB9LCB7fSk7XHJcblxyXG4gICAgICAgIGthdGV4Lm9wdGlvbnMgPSBrYXRleE9wdGlvbnM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEFkZCBvciByZXNldCBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWVyZ2VPcHRpb25zIE5ldyBvcHRpb25zIHByb3BlcnR5XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dCBDb250ZXh0IG9iamVjdCBvZiBjb3JlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3JpZ2luT3B0aW9ucyBPcmlnaW4gb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge09iamVjdH0gcGx1Z2luQ2FsbEJ1dHRvbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9zZXRPcHRpb25zOiBmdW5jdGlvbiAobWVyZ2VPcHRpb25zLCBjb250ZXh0LCBvcmlnaW5PcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5faW5pdE9wdGlvbnMoY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQsIG1lcmdlT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVsID0gY29udGV4dC5lbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlID0gZWwucmVsYXRpdmU7XHJcbiAgICAgICAgY29uc3QgZWRpdG9yQXJlYSA9IGVsLmVkaXRvckFyZWE7XHJcbiAgICAgICAgY29uc3QgaXNOZXdUb29sYmFyQ29udGFpbmVyID0gbWVyZ2VPcHRpb25zLnRvb2xiYXJDb250YWluZXIgJiYgbWVyZ2VPcHRpb25zLnRvb2xiYXJDb250YWluZXIgIT09IG9yaWdpbk9wdGlvbnMudG9vbGJhckNvbnRhaW5lcjtcclxuICAgICAgICBjb25zdCBpc05ld1Rvb2xiYXIgPSBtZXJnZU9wdGlvbnMubGFuZyAhPT0gb3JpZ2luT3B0aW9ucy5sYW5nIHx8IG1lcmdlT3B0aW9ucy5idXR0b25MaXN0ICE9PSBvcmlnaW5PcHRpb25zLmJ1dHRvbkxpc3QgfHwgbWVyZ2VPcHRpb25zLm1vZGUgIT09IG9yaWdpbk9wdGlvbnMubW9kZSB8fCBpc05ld1Rvb2xiYXJDb250YWluZXI7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvb2xfYmFyID0gdGhpcy5fY3JlYXRlVG9vbEJhcihkb2N1bWVudCwgKGlzTmV3VG9vbGJhciA/IG1lcmdlT3B0aW9ucy5idXR0b25MaXN0IDogb3JpZ2luT3B0aW9ucy5idXR0b25MaXN0KSwgbWVyZ2VPcHRpb25zLnBsdWdpbnMsIG1lcmdlT3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHRvb2xfYmFyLnBsdWdpbkNhbGxCdXR0b25zLm1hdGgpIHRoaXMuX2NoZWNrS2F0ZXhNYXRoKG1lcmdlT3B0aW9ucy5rYXRleCk7XHJcbiAgICAgICAgY29uc3QgYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICBhcnJvdy5jbGFzc05hbWUgPSAnc2UtYXJyb3cnO1xyXG5cclxuICAgICAgICBpZiAoaXNOZXdUb29sYmFyKSB7XHJcbiAgICAgICAgICAgIHRvb2xfYmFyLmVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICAvLyB0b29sYmFyIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBpZiAoaXNOZXdUb29sYmFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBtZXJnZU9wdGlvbnMudG9vbGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b29sX2Jhci5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGVsLnRvb2xiYXIucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbC50b29sYmFyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsLnRvb2xiYXIucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQodG9vbF9iYXIuZWxlbWVudCwgZWwudG9vbGJhcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsLnRvb2xiYXIgPSB0b29sX2Jhci5lbGVtZW50O1xyXG4gICAgICAgICAgICBlbC5fbWVudVRyYXkgPSB0b29sX2Jhci5fbWVudVRyYXk7XHJcbiAgICAgICAgICAgIGVsLl9hcnJvdyA9IGFycm93O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBpbml0RWxlbWVudHMgPSB0aGlzLl9pbml0RWxlbWVudHMobWVyZ2VPcHRpb25zLCBlbC50b3BBcmVhLCAoaXNOZXdUb29sYmFyID8gdG9vbF9iYXIuZWxlbWVudCA6IGVsLnRvb2xiYXIpLCBhcnJvdyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvdHRvbUJhciA9IGluaXRFbGVtZW50cy5ib3R0b21CYXI7XHJcbiAgICAgICAgY29uc3Qgd3lzaXd5Z0ZyYW1lID0gaW5pdEVsZW1lbnRzLnd5c2l3eWdGcmFtZTtcclxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcl9zcGFuID0gaW5pdEVsZW1lbnRzLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIGxldCBjb2RlID0gaW5pdEVsZW1lbnRzLmNvZGVWaWV3O1xyXG5cclxuICAgICAgICBpZiAoZWwucmVzaXppbmdCYXIpIHV0aWwucmVtb3ZlSXRlbShlbC5yZXNpemluZ0Jhcik7XHJcbiAgICAgICAgaWYgKGJvdHRvbUJhci5yZXNpemluZ0Jhcikge1xyXG4gICAgICAgICAgICBpZiAobWVyZ2VPcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyICYmIG1lcmdlT3B0aW9ucy5yZXNpemluZ0JhckNvbnRhaW5lciAhPT0gb3JpZ2luT3B0aW9ucy5yZXNpemluZ0JhckNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VPcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGJvdHRvbUJhci5yZXNpemluZ0Jhcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChib3R0b21CYXIucmVzaXppbmdCYXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlZGl0b3JBcmVhLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGVkaXRvckFyZWEuYXBwZW5kQ2hpbGQoY29kZSk7XHJcbiAgICAgICAgaWYgKHBsYWNlaG9sZGVyX3NwYW4pIGVkaXRvckFyZWEuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXJfc3Bhbik7XHJcblxyXG4gICAgICAgIGNvZGUgPSB0aGlzLl9jaGVja0NvZGVNaXJyb3IobWVyZ2VPcHRpb25zLCBjb2RlKTtcclxuICAgICAgICBcclxuICAgICAgICBlbC5yZXNpemluZ0JhciA9IGJvdHRvbUJhci5yZXNpemluZ0JhcjtcclxuICAgICAgICBlbC5uYXZpZ2F0aW9uID0gYm90dG9tQmFyLm5hdmlnYXRpb247XHJcbiAgICAgICAgZWwuY2hhcldyYXBwZXIgPSBib3R0b21CYXIuY2hhcldyYXBwZXI7XHJcbiAgICAgICAgZWwuY2hhckNvdW50ZXIgPSBib3R0b21CYXIuY2hhckNvdW50ZXI7XHJcbiAgICAgICAgZWwud3lzaXd5Z0ZyYW1lID0gd3lzaXd5Z0ZyYW1lO1xyXG4gICAgICAgIGVsLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIGVsLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXJfc3BhbjtcclxuXHJcbiAgICAgICAgaWYgKG1lcmdlT3B0aW9ucy5ydGwpIHV0aWwuYWRkQ2xhc3MoZWwudG9wQXJlYSwgJ3NlLXJ0bCcpO1xyXG4gICAgICAgIGVsc2UgdXRpbC5yZW1vdmVDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNhbGxCdXR0b25zOiB0b29sX2Jhci5wbHVnaW5DYWxsQnV0dG9ucyxcclxuICAgICAgICAgICAgcGx1Z2luczogdG9vbF9iYXIucGx1Z2lucyxcclxuICAgICAgICAgICAgdG9vbGJhcjogdG9vbF9iYXJcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXplIHByb3BlcnR5IG9mIHN1bmVkaXRvciBlbGVtZW50c1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9uc1xyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0b3BEaXYgU3VuZWRpdG9yIHRvcCBkaXZcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdG9vbEJhciBUb29sIGJhclxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0b29sQmFyQXJyb3cgVG9vbCBiYXIgYXJyb3cgKGJhbGxvb24gZWRpdG9yKVxyXG4gICAgICogQHJldHVybnMge09iamVjdH0gQm90dG9tIGJhciBlbGVtZW50cyAocmVzaXppbmdCYXIsIG5hdmlnYXRpb24sIGNoYXJXcmFwcGVyLCBjaGFyQ291bnRlcilcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9pbml0RWxlbWVudHM6IGZ1bmN0aW9uIChvcHRpb25zLCB0b3BEaXYsIHRvb2xCYXIsIHRvb2xCYXJBcnJvdykge1xyXG4gICAgICAgIC8qKiB0b3AgZGl2ICovXHJcbiAgICAgICAgdG9wRGl2LnN0eWxlLmNzc1RleHQgPSBvcHRpb25zLl9lZGl0b3JTdHlsZXMudG9wO1xyXG5cclxuICAgICAgICAvKiogdG9vbGJhciAqL1xyXG4gICAgICAgIGlmICgvaW5saW5lL2kudGVzdChvcHRpb25zLm1vZGUpKSB7XHJcbiAgICAgICAgICAgIHRvb2xCYXIuY2xhc3NOYW1lICs9ICcgc2UtdG9vbGJhci1pbmxpbmUnO1xyXG4gICAgICAgICAgICB0b29sQmFyLnN0eWxlLndpZHRoID0gb3B0aW9ucy50b29sYmFyV2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIGlmICgvYmFsbG9vbi9pLnRlc3Qob3B0aW9ucy5tb2RlKSkge1xyXG4gICAgICAgICAgICB0b29sQmFyLmNsYXNzTmFtZSArPSAnIHNlLXRvb2xiYXItYmFsbG9vbic7XHJcbiAgICAgICAgICAgIHRvb2xCYXIuc3R5bGUud2lkdGggPSBvcHRpb25zLnRvb2xiYXJXaWR0aDtcclxuICAgICAgICAgICAgdG9vbEJhci5hcHBlbmRDaGlsZCh0b29sQmFyQXJyb3cpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqIGVkaXRvciAqL1xyXG4gICAgICAgIC8vIHd5c2l3eWcgZGl2IG9yIGlmcmFtZVxyXG4gICAgICAgIGNvbnN0IHd5c2l3eWdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCFvcHRpb25zLmlmcmFtZSA/ICdESVYnIDogJ0lGUkFNRScpO1xyXG4gICAgICAgIHd5c2l3eWdEaXYuY2xhc3NOYW1lID0gJ3NlLXdyYXBwZXItaW5uZXIgc2Utd3JhcHBlci13eXNpd3lnJztcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCB0cnVlKTtcclxuICAgICAgICAgICAgd3lzaXd5Z0Rpdi5zZXRBdHRyaWJ1dGUoJ2F1dG9jb3JyZWN0JywgXCJvZmZcIik7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuc2V0QXR0cmlidXRlKCdzY3JvbGxpbmcnLCAnYXV0bycpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb3B0aW9ucy5pZnJhbWVBdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICB3eXNpd3lnRGl2LnNldEF0dHJpYnV0ZShrZXksIG9wdGlvbnMuaWZyYW1lQXR0cmlidXRlc1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3eXNpd3lnRGl2LmNsYXNzTmFtZSArPSAnICcgKyBvcHRpb25zLl9lZGl0YWJsZUNsYXNzO1xyXG4gICAgICAgICAgICB3eXNpd3lnRGl2LnN0eWxlLmNzc1RleHQgPSBvcHRpb25zLl9lZGl0b3JTdHlsZXMuZnJhbWUgKyBvcHRpb25zLl9lZGl0b3JTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICB3eXNpd3lnRGl2LmNsYXNzTmFtZSArPSBvcHRpb25zLmNsYXNzTmFtZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3eXNpd3lnRGl2LmFsbG93RnVsbHNjcmVlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuZnJhbWVCb3JkZXIgPSAwO1xyXG4gICAgICAgICAgICB3eXNpd3lnRGl2LnN0eWxlLmNzc1RleHQgPSBvcHRpb25zLl9lZGl0b3JTdHlsZXMuZnJhbWU7XHJcbiAgICAgICAgICAgIHd5c2l3eWdEaXYuY2xhc3NOYW1lICs9IG9wdGlvbnMuY2xhc3NOYW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGV4dGFyZWEgZm9yIGNvZGUgdmlld1xyXG4gICAgICAgIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnVEVYVEFSRUEnKTtcclxuICAgICAgICB0ZXh0YXJlYS5jbGFzc05hbWUgPSAnc2Utd3JhcHBlci1pbm5lciBzZS13cmFwcGVyLWNvZGUnICsgb3B0aW9ucy5jbGFzc05hbWU7XHJcbiAgICAgICAgdGV4dGFyZWEuc3R5bGUuY3NzVGV4dCA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcy5mcmFtZTtcclxuICAgICAgICB0ZXh0YXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nKSB0ZXh0YXJlYS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgICAvKiogcmVzaXplIGJhciAqL1xyXG4gICAgICAgIGxldCByZXNpemluZ0JhciA9IG51bGw7XHJcbiAgICAgICAgbGV0IG5hdmlnYXRpb24gPSBudWxsO1xyXG4gICAgICAgIGxldCBjaGFyV3JhcHBlciA9IG51bGw7XHJcbiAgICAgICAgbGV0IGNoYXJDb3VudGVyID0gbnVsbDtcclxuICAgICAgICBpZiAob3B0aW9ucy5yZXNpemluZ0Jhcikge1xyXG4gICAgICAgICAgICByZXNpemluZ0JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICByZXNpemluZ0Jhci5jbGFzc05hbWUgPSAnc2UtcmVzaXppbmctYmFyIHN1bi1lZGl0b3ItY29tbW9uJztcclxuXHJcbiAgICAgICAgICAgIC8qKiBuYXZpZ2F0aW9uICovXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgbmF2aWdhdGlvbi5jbGFzc05hbWUgPSAnc2UtbmF2aWdhdGlvbiBzdW4tZWRpdG9yLWNvbW1vbic7XHJcbiAgICAgICAgICAgIHJlc2l6aW5nQmFyLmFwcGVuZENoaWxkKG5hdmlnYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgLyoqIGNoYXIgY291bnRlciAqL1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jaGFyQ291bnRlcikge1xyXG4gICAgICAgICAgICAgICAgY2hhcldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICAgICAgICAgIGNoYXJXcmFwcGVyLmNsYXNzTmFtZSA9ICdzZS1jaGFyLWNvdW50ZXItd3JhcHBlcic7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hhckNvdW50ZXJMYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyTGFiZWwuY2xhc3NOYW1lID0gJ3NlLWNoYXItbGFiZWwnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJMYWJlbC50ZXh0Q29udGVudCA9IG9wdGlvbnMuY2hhckNvdW50ZXJMYWJlbDtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyV3JhcHBlci5hcHBlbmRDaGlsZChjaGFyTGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBjaGFyQ291bnRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICAgICAgICAgIGNoYXJDb3VudGVyLmNsYXNzTmFtZSA9ICdzZS1jaGFyLWNvdW50ZXInO1xyXG4gICAgICAgICAgICAgICAgY2hhckNvdW50ZXIudGV4dENvbnRlbnQgPSAnMCc7XHJcbiAgICAgICAgICAgICAgICBjaGFyV3JhcHBlci5hcHBlbmRDaGlsZChjaGFyQ291bnRlcik7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1heENoYXJDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyX21heCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyX21heC50ZXh0Q29udGVudCA9ICcgLyAnICsgb3B0aW9ucy5tYXhDaGFyQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcldyYXBwZXIuYXBwZW5kQ2hpbGQoY2hhcl9tYXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJlc2l6aW5nQmFyLmFwcGVuZENoaWxkKGNoYXJXcmFwcGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsZXQgcGxhY2Vob2xkZXIgPSBudWxsO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnU1BBTicpO1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlci5jbGFzc05hbWUgPSAnc2UtcGxhY2Vob2xkZXInO1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlci5pbm5lclRleHQgPSBvcHRpb25zLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYm90dG9tQmFyOiB7XHJcbiAgICAgICAgICAgICAgICByZXNpemluZ0JhcjogcmVzaXppbmdCYXIsXHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uOiBuYXZpZ2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgY2hhcldyYXBwZXI6IGNoYXJXcmFwcGVyLFxyXG4gICAgICAgICAgICAgICAgY2hhckNvdW50ZXI6IGNoYXJDb3VudGVyXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHd5c2l3eWdGcmFtZTogd3lzaXd5Z0RpdixcclxuICAgICAgICAgICAgY29kZVZpZXc6IHRleHRhcmVhLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXJcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXplIG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBPcHRpb25zIG9iamVjdFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9pbml0T3B0aW9uczogZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBwbHVnaW5zID0ge307XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucGx1Z2lucykge1xyXG4gICAgICAgICAgICBjb25zdCBfcGx1Z2lucyA9IG9wdGlvbnMucGx1Z2lucztcclxuICAgICAgICAgICAgY29uc3QgcGx1Z2luc1ZhbHVlcyA9IF9wbHVnaW5zLmxlbmd0aCA/IF9wbHVnaW5zIDogT2JqZWN0LmtleXMoX3BsdWdpbnMpLm1hcChmdW5jdGlvbihuYW1lKSB7IHJldHVybiBfcGx1Z2luc1tuYW1lXTsgfSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwbHVnaW5zVmFsdWVzLmxlbmd0aCwgcDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBwID0gcGx1Z2luc1ZhbHVlc1tpXS5kZWZhdWx0IHx8IHBsdWdpbnNWYWx1ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zW3AubmFtZV0gPSBwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9wdGlvbnMucGx1Z2lucyA9IHBsdWdpbnM7XHJcbiAgICAgICAgLyoqIFZhbHVlcyAqL1xyXG4gICAgICAgIG9wdGlvbnMuc3RyaWN0TW9kZSA9IG9wdGlvbnMuc3RyaWN0TW9kZSAhPT0gZmFsc2U7XHJcbiAgICAgICAgb3B0aW9ucy5sYW5nID0gb3B0aW9ucy5sYW5nIHx8IF9kZWZhdWx0TGFuZztcclxuICAgICAgICBvcHRpb25zLnZhbHVlID0gdHlwZW9mIG9wdGlvbnMudmFsdWUgPT09ICdzdHJpbmcnID8gb3B0aW9ucy52YWx1ZSA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5hbGxvd2VkQ2xhc3NOYW1lcyA9IG5ldyB1dGlsLl93LlJlZ0V4cCgob3B0aW9ucy5hbGxvd2VkQ2xhc3NOYW1lcyAmJiB0eXBlb2Ygb3B0aW9ucy5hbGxvd2VkQ2xhc3NOYW1lcyA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmFsbG93ZWRDbGFzc05hbWVzICsgJ3wnIDogJycpICsgJ15fX3NlX198c2UtfGthdGV4Jyk7XHJcbiAgICAgICAgb3B0aW9ucy5oaXN0b3J5U3RhY2tEZWxheVRpbWUgPSB0eXBlb2Ygb3B0aW9ucy5oaXN0b3J5U3RhY2tEZWxheVRpbWUgPT09ICdudW1iZXInID8gb3B0aW9ucy5oaXN0b3J5U3RhY2tEZWxheVRpbWUgOiA0MDA7XHJcbiAgICAgICAgb3B0aW9ucy5mcmFtZUF0dHJidXRlcyA9IG9wdGlvbnMuZnJhbWVBdHRyYnV0ZXMgfHwge307XHJcbiAgICAgICAgLy8gdGFnIHN0eWxlXHJcbiAgICAgICAgb3B0aW9ucy5kZWZhdWx0VGFnID0gdHlwZW9mIG9wdGlvbnMuZGVmYXVsdFRhZyA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5kZWZhdWx0VGFnLmxlbmd0aCA+IDAgPyBvcHRpb25zLmRlZmF1bHRUYWcgOiAncCc7XHJcbiAgICAgICAgY29uc3QgdGV4dFRhZ3MgPSBvcHRpb25zLnRleHRUYWdzID0gW3tib2xkOiAnU1RST05HJywgdW5kZXJsaW5lOiAnVScsIGl0YWxpYzogJ0VNJywgc3RyaWtlOiAnREVMJywgc3ViOiAnU1VCJywgc3VwOiAnU1VQJ30sIChvcHRpb25zLnRleHRUYWdzIHx8IHt9KV0ucmVkdWNlKGZ1bmN0aW9uIChfZGVmYXVsdCwgX25ldykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gX25ldykge1xyXG4gICAgICAgICAgICAgICAgX2RlZmF1bHRba2V5XSA9IF9uZXdba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX2RlZmF1bHQ7XHJcbiAgICAgICAgfSwge30pO1xyXG4gICAgICAgIG9wdGlvbnMuX3RleHRUYWdzTWFwID0ge1xyXG4gICAgICAgICAgICAnc3Ryb25nJzogdGV4dFRhZ3MuYm9sZC50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAnYic6IHRleHRUYWdzLmJvbGQudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgJ3UnOiB0ZXh0VGFncy51bmRlcmxpbmUudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgJ2lucyc6IHRleHRUYWdzLnVuZGVybGluZS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAnZW0nOiB0ZXh0VGFncy5pdGFsaWMudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgJ2knOiB0ZXh0VGFncy5pdGFsaWMudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgJ2RlbCc6IHRleHRUYWdzLnN0cmlrZS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAnc3RyaWtlJzogdGV4dFRhZ3Muc3RyaWtlLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICdzJzogdGV4dFRhZ3Muc3RyaWtlLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgICdzdWInOiB0ZXh0VGFncy5zdWIudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgJ3N1cCc6IHRleHRUYWdzLnN1cC50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBvcHRpb25zLl9kZWZhdWx0Q29tbWFuZCA9IHtcclxuICAgICAgICAgICAgYm9sZDogb3B0aW9ucy50ZXh0VGFncy5ib2xkLFxyXG4gICAgICAgICAgICB1bmRlcmxpbmU6IG9wdGlvbnMudGV4dFRhZ3MudW5kZXJsaW5lLFxyXG4gICAgICAgICAgICBpdGFsaWM6IG9wdGlvbnMudGV4dFRhZ3MuaXRhbGljLFxyXG4gICAgICAgICAgICBzdHJpa2U6IG9wdGlvbnMudGV4dFRhZ3Muc3RyaWtlLFxyXG4gICAgICAgICAgICBzdWJzY3JpcHQ6IG9wdGlvbnMudGV4dFRhZ3Muc3ViLFxyXG4gICAgICAgICAgICBzdXBlcnNjcmlwdDogb3B0aW9ucy50ZXh0VGFncy5zdXBcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKiBXaGl0ZWxpc3QsIEJsYWNrbGlzdCAqL1xyXG4gICAgICAgIG9wdGlvbnMuX19hbGxvd2VkU2NyaXB0VGFnID0gb3B0aW9ucy5fX2FsbG93ZWRTY3JpcHRUYWcgPT09IHRydWU7XHJcbiAgICAgICAgY29uc3Qgd2hpdGVsaXN0ID0gJ2JyfHB8ZGl2fHByZXxibG9ja3F1b3RlfGgxfGgyfGgzfGg0fGg1fGg2fG9sfHVsfGxpfGhyfGZpZ3VyZXxmaWdjYXB0aW9ufGltZ3xpZnJhbWV8YXVkaW98dmlkZW98c291cmNlfHRhYmxlfHRoZWFkfHRib2R5fHRyfHRofHRkfGF8YnxzdHJvbmd8dmFyfGl8ZW18dXxpbnN8c3xzcGFufHN0cmlrZXxkZWx8c3VifHN1cHxjb2RlfHN2Z3xwYXRofGRldGFpbHN8c3VtbWFyeSc7XHJcbiAgICAgICAgLy8gdGFnc1xyXG4gICAgICAgIG9wdGlvbnMudGFnc0JsYWNrbGlzdCA9IG9wdGlvbnMudGFnc0JsYWNrbGlzdCB8fCAnJztcclxuICAgICAgICBvcHRpb25zLl9kZWZhdWx0VGFnc1doaXRlbGlzdCA9ICh0eXBlb2Ygb3B0aW9ucy5fZGVmYXVsdFRhZ3NXaGl0ZWxpc3QgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5fZGVmYXVsdFRhZ3NXaGl0ZWxpc3QgOiB3aGl0ZWxpc3QpICsgKG9wdGlvbnMuX19hbGxvd2VkU2NyaXB0VGFnID8gJ3xzY3JpcHQnIDogJycpO1xyXG4gICAgICAgIG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QgPSBvcHRpb25zLmFkZFRhZ3NXaGl0ZWxpc3QgPT09ICcqJyA/ICcqJyA6IHRoaXMuX3NldFdoaXRlbGlzdChvcHRpb25zLl9kZWZhdWx0VGFnc1doaXRlbGlzdCArICh0eXBlb2Ygb3B0aW9ucy5hZGRUYWdzV2hpdGVsaXN0ID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmFkZFRhZ3NXaGl0ZWxpc3QubGVuZ3RoID4gMCA/ICd8JyArIG9wdGlvbnMuYWRkVGFnc1doaXRlbGlzdCA6ICcnKSwgb3B0aW9ucy50YWdzQmxhY2tsaXN0KTtcclxuICAgICAgICAvLyBwYXN0ZSB0YWdzXHJcbiAgICAgICAgb3B0aW9ucy5wYXN0ZVRhZ3NCbGFja2xpc3QgPSBvcHRpb25zLnRhZ3NCbGFja2xpc3QgKyAob3B0aW9ucy50YWdzQmxhY2tsaXN0ICYmIG9wdGlvbnMucGFzdGVUYWdzQmxhY2tsaXN0ID8gKCd8JyArIG9wdGlvbnMucGFzdGVUYWdzQmxhY2tsaXN0KSA6IChvcHRpb25zLnBhc3RlVGFnc0JsYWNrbGlzdCB8fCAnJykpO1xyXG4gICAgICAgIG9wdGlvbnMucGFzdGVUYWdzV2hpdGVsaXN0ID0gb3B0aW9ucy5wYXN0ZVRhZ3NXaGl0ZWxpc3QgPT09ICcqJyA/ICcqJyA6IHRoaXMuX3NldFdoaXRlbGlzdCh0eXBlb2Ygb3B0aW9ucy5wYXN0ZVRhZ3NXaGl0ZWxpc3QgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5wYXN0ZVRhZ3NXaGl0ZWxpc3QgOiBvcHRpb25zLl9lZGl0b3JUYWdzV2hpdGVsaXN0LCBvcHRpb25zLnBhc3RlVGFnc0JsYWNrbGlzdCk7XHJcbiAgICAgICAgLy8gdGFnIGF0dHJpYnV0ZXNcclxuICAgICAgICBvcHRpb25zLmF0dHJpYnV0ZXNXaGl0ZWxpc3QgPSAoIW9wdGlvbnMuYXR0cmlidXRlc1doaXRlbGlzdCB8fCB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzV2hpdGVsaXN0ICE9PSAnb2JqZWN0JykgPyBudWxsIDogb3B0aW9ucy5hdHRyaWJ1dGVzV2hpdGVsaXN0O1xyXG4gICAgICAgIG9wdGlvbnMuYXR0cmlidXRlc0JsYWNrbGlzdCA9ICghb3B0aW9ucy5hdHRyaWJ1dGVzQmxhY2tsaXN0IHx8IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXNCbGFja2xpc3QgIT09ICdvYmplY3QnKSA/IG51bGwgOiBvcHRpb25zLmF0dHJpYnV0ZXNCbGFja2xpc3Q7XHJcbiAgICAgICAgLyoqIExheW91dCAqL1xyXG4gICAgICAgIG9wdGlvbnMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCAnY2xhc3NpYyc7IC8vIGNsYXNzaWMsIGlubGluZSwgYmFsbG9vbiwgYmFsbG9vbi1hbHdheXNcclxuICAgICAgICBvcHRpb25zLnJ0bCA9ICEhb3B0aW9ucy5ydGw7XHJcbiAgICAgICAgb3B0aW9ucy5saW5lQXR0clJlc2V0ID0gWydpZCddLmNvbmNhdCgob3B0aW9ucy5saW5lQXR0clJlc2V0ICYmIHR5cGVvZiBvcHRpb25zLmxpbmVBdHRyUmVzZXQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5saW5lQXR0clJlc2V0LnRvTG93ZXJDYXNlKCkuc3BsaXQoJ3wnKSA6IFtdKSk7XHJcbiAgICAgICAgb3B0aW9ucy5fZWRpdGFibGVDbGFzcyA9ICdzdW4tZWRpdG9yLWVkaXRhYmxlJyArIChvcHRpb25zLnJ0bCA/ICcgc2UtcnRsJyA6ICcnKTtcclxuICAgICAgICBvcHRpb25zLl9wcmludENsYXNzID0gdHlwZW9mIG9wdGlvbnMuX3ByaW50Q2xhc3MgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5fcHJpbnRDbGFzcyA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy50b29sYmFyV2lkdGggPSBvcHRpb25zLnRvb2xiYXJXaWR0aCA/ICh1dGlsLmlzTnVtYmVyKG9wdGlvbnMudG9vbGJhcldpZHRoKSA/IG9wdGlvbnMudG9vbGJhcldpZHRoICsgJ3B4JyA6IG9wdGlvbnMudG9vbGJhcldpZHRoKSA6ICdhdXRvJztcclxuICAgICAgICBvcHRpb25zLnRvb2xiYXJDb250YWluZXIgPSB0eXBlb2Ygb3B0aW9ucy50b29sYmFyQ29udGFpbmVyID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSA6IG9wdGlvbnMudG9vbGJhckNvbnRhaW5lcjtcclxuICAgICAgICBvcHRpb25zLnN0aWNreVRvb2xiYXIgPSAoL2JhbGxvb24vaS50ZXN0KG9wdGlvbnMubW9kZSkgfHwgISFvcHRpb25zLnRvb2xiYXJDb250YWluZXIpID8gLTEgOiBvcHRpb25zLnN0aWNreVRvb2xiYXIgPT09IHVuZGVmaW5lZCA/IDAgOiAoL15cXGQrLy50ZXN0KG9wdGlvbnMuc3RpY2t5VG9vbGJhcikgPyB1dGlsLmdldE51bWJlcihvcHRpb25zLnN0aWNreVRvb2xiYXIsIDApIDogLTEpO1xyXG4gICAgICAgIG9wdGlvbnMuaGlkZVRvb2xiYXIgPSAhIW9wdGlvbnMuaGlkZVRvb2xiYXI7XHJcbiAgICAgICAgb3B0aW9ucy5mdWxsU2NyZWVuT2Zmc2V0ID0gb3B0aW9ucy5mdWxsU2NyZWVuT2Zmc2V0ID09PSB1bmRlZmluZWQgPyAwIDogKC9eXFxkKy8udGVzdChvcHRpb25zLmZ1bGxTY3JlZW5PZmZzZXQpID8gdXRpbC5nZXROdW1iZXIob3B0aW9ucy5mdWxsU2NyZWVuT2Zmc2V0LCAwKSA6IDApO1xyXG4gICAgICAgIG9wdGlvbnMuZnVsbFBhZ2UgPSAhIW9wdGlvbnMuZnVsbFBhZ2U7XHJcbiAgICAgICAgb3B0aW9ucy5pZnJhbWUgPSBvcHRpb25zLmZ1bGxQYWdlIHx8ICEhb3B0aW9ucy5pZnJhbWU7XHJcbiAgICAgICAgb3B0aW9ucy5pZnJhbWVBdHRyaWJ1dGVzID0gb3B0aW9ucy5pZnJhbWVBdHRyaWJ1dGVzIHx8IHt9O1xyXG4gICAgICAgIG9wdGlvbnMuaWZyYW1lQ1NTRmlsZU5hbWUgPSBvcHRpb25zLmlmcmFtZSA/IHR5cGVvZiBvcHRpb25zLmlmcmFtZUNTU0ZpbGVOYW1lID09PSAnc3RyaW5nJyA/IFtvcHRpb25zLmlmcmFtZUNTU0ZpbGVOYW1lXSA6IChvcHRpb25zLmlmcmFtZUNTU0ZpbGVOYW1lIHx8IFsnc3VuZWRpdG9yJ10pIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLnByZXZpZXdUZW1wbGF0ZSA9IHR5cGVvZiBvcHRpb25zLnByZXZpZXdUZW1wbGF0ZSA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnByZXZpZXdUZW1wbGF0ZSA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5wcmludFRlbXBsYXRlID0gdHlwZW9mIG9wdGlvbnMucHJpbnRUZW1wbGF0ZSA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnByaW50VGVtcGxhdGUgOiBudWxsO1xyXG4gICAgICAgIC8qKiBDb2RlTWlycm9yIG9iamVjdCAqL1xyXG4gICAgICAgIG9wdGlvbnMuY29kZU1pcnJvciA9IG9wdGlvbnMuY29kZU1pcnJvciA/IG9wdGlvbnMuY29kZU1pcnJvci5zcmMgPyBvcHRpb25zLmNvZGVNaXJyb3IgOiB7c3JjOiBvcHRpb25zLmNvZGVNaXJyb3J9IDogbnVsbDtcclxuICAgICAgICAvKioga2F0ZXggb2JqZWN0IChNYXRoIHBsdWdpbikgKi9cclxuICAgICAgICBvcHRpb25zLmthdGV4ID0gb3B0aW9ucy5rYXRleCA/IG9wdGlvbnMua2F0ZXguc3JjID8gb3B0aW9ucy5rYXRleCA6IHtzcmM6IG9wdGlvbnMua2F0ZXh9IDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLm1hdGhGb250U2l6ZSA9ICEhb3B0aW9ucy5tYXRoRm9udFNpemUgPyBvcHRpb25zLm1hdGhGb250U2l6ZSA6IFtcclxuICAgICAgICAgICAge3RleHQ6ICcxJywgdmFsdWU6ICcxZW0nfSxcclxuICAgICAgICAgICAge3RleHQ6ICcxLjUnLCB2YWx1ZTogJzEuNWVtJ30sXHJcbiAgICAgICAgICAgIHt0ZXh0OiAnMicsIHZhbHVlOiAnMmVtJ30sXHJcbiAgICAgICAgICAgIHt0ZXh0OiAnMi41JywgdmFsdWU6ICcyLjVlbSd9XHJcbiAgICAgICAgXTtcclxuICAgICAgICAvKiogRGlzcGxheSAqL1xyXG4gICAgICAgIG9wdGlvbnMucG9zaXRpb24gPSB0eXBlb2Ygb3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnBvc2l0aW9uIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLmRpc3BsYXkgPSBvcHRpb25zLmRpc3BsYXkgfHwgKGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnIHx8ICFlbGVtZW50LnN0eWxlLmRpc3BsYXkgPyAnYmxvY2snIDogZWxlbWVudC5zdHlsZS5kaXNwbGF5KTtcclxuICAgICAgICBvcHRpb25zLnBvcHVwRGlzcGxheSA9IG9wdGlvbnMucG9wdXBEaXNwbGF5IHx8ICdmdWxsJztcclxuICAgICAgICAvKiogQm90dG9tIHJlc2l6aW5nIGJhciAqL1xyXG4gICAgICAgIG9wdGlvbnMucmVzaXppbmdCYXIgPSBvcHRpb25zLnJlc2l6aW5nQmFyID09PSB1bmRlZmluZWQgPyAoL2lubGluZXxiYWxsb29uL2kudGVzdChvcHRpb25zLm1vZGUpID8gZmFsc2UgOiB0cnVlKSA6IG9wdGlvbnMucmVzaXppbmdCYXI7XHJcbiAgICAgICAgb3B0aW9ucy5zaG93UGF0aExhYmVsID0gIW9wdGlvbnMucmVzaXppbmdCYXIgPyBmYWxzZSA6IHR5cGVvZiBvcHRpb25zLnNob3dQYXRoTGFiZWwgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc2hvd1BhdGhMYWJlbCA6IHRydWU7XHJcbiAgICAgICAgb3B0aW9ucy5yZXNpemVFbmFibGUgPSBvcHRpb25zLnJlc2l6ZUVuYWJsZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy5yZXNpemVFbmFibGU7XHJcbiAgICAgICAgb3B0aW9ucy5yZXNpemluZ0JhckNvbnRhaW5lciA9IHR5cGVvZiBvcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy5yZXNpemluZ0JhckNvbnRhaW5lcikgOiBvcHRpb25zLnJlc2l6aW5nQmFyQ29udGFpbmVyO1xyXG4gICAgICAgIC8qKiBDaGFyYWN0ZXIgY291bnQgKi9cclxuICAgICAgICBvcHRpb25zLmNoYXJDb3VudGVyID0gb3B0aW9ucy5tYXhDaGFyQ291bnQgPiAwID8gdHJ1ZSA6IHR5cGVvZiBvcHRpb25zLmNoYXJDb3VudGVyID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmNoYXJDb3VudGVyIDogZmFsc2U7XHJcbiAgICAgICAgb3B0aW9ucy5jaGFyQ291bnRlclR5cGUgPSB0eXBlb2Ygb3B0aW9ucy5jaGFyQ291bnRlclR5cGUgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5jaGFyQ291bnRlclR5cGUgOiAnY2hhcic7XHJcbiAgICAgICAgb3B0aW9ucy5jaGFyQ291bnRlckxhYmVsID0gdHlwZW9mIG9wdGlvbnMuY2hhckNvdW50ZXJMYWJlbCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmNoYXJDb3VudGVyTGFiZWwudHJpbSgpIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLm1heENoYXJDb3VudCA9IHV0aWwuaXNOdW1iZXIob3B0aW9ucy5tYXhDaGFyQ291bnQpICYmIG9wdGlvbnMubWF4Q2hhckNvdW50ID4gLTEgPyBvcHRpb25zLm1heENoYXJDb3VudCAqIDEgOiBudWxsO1xyXG4gICAgICAgIC8qKiBXaWR0aCBzaXplICovXHJcbiAgICAgICAgb3B0aW9ucy53aWR0aCA9IG9wdGlvbnMud2lkdGggPyAodXRpbC5pc051bWJlcihvcHRpb25zLndpZHRoKSA/IG9wdGlvbnMud2lkdGggKyAncHgnIDogb3B0aW9ucy53aWR0aCkgOiAoZWxlbWVudC5jbGllbnRXaWR0aCA/IGVsZW1lbnQuY2xpZW50V2lkdGggKyAncHgnIDogJzEwMCUnKTtcclxuICAgICAgICBvcHRpb25zLm1pbldpZHRoID0gKHV0aWwuaXNOdW1iZXIob3B0aW9ucy5taW5XaWR0aCkgPyBvcHRpb25zLm1pbldpZHRoICsgJ3B4JyA6IG9wdGlvbnMubWluV2lkdGgpIHx8ICcnO1xyXG4gICAgICAgIG9wdGlvbnMubWF4V2lkdGggPSAodXRpbC5pc051bWJlcihvcHRpb25zLm1heFdpZHRoKSA/IG9wdGlvbnMubWF4V2lkdGggKyAncHgnIDogb3B0aW9ucy5tYXhXaWR0aCkgfHwgJyc7XHJcbiAgICAgICAgLyoqIEhlaWdodCBzaXplICovXHJcbiAgICAgICAgb3B0aW9ucy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCA/ICh1dGlsLmlzTnVtYmVyKG9wdGlvbnMuaGVpZ2h0KSA/IG9wdGlvbnMuaGVpZ2h0ICsgJ3B4JyA6IG9wdGlvbnMuaGVpZ2h0KSA6IChlbGVtZW50LmNsaWVudEhlaWdodCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgJ3B4JyA6ICdhdXRvJyk7XHJcbiAgICAgICAgb3B0aW9ucy5taW5IZWlnaHQgPSAodXRpbC5pc051bWJlcihvcHRpb25zLm1pbkhlaWdodCkgPyBvcHRpb25zLm1pbkhlaWdodCArICdweCcgOiBvcHRpb25zLm1pbkhlaWdodCkgfHwgJyc7XHJcbiAgICAgICAgb3B0aW9ucy5tYXhIZWlnaHQgPSAodXRpbC5pc051bWJlcihvcHRpb25zLm1heEhlaWdodCkgPyBvcHRpb25zLm1heEhlaWdodCArICdweCcgOiBvcHRpb25zLm1heEhlaWdodCkgfHwgJyc7XHJcbiAgICAgICAgLyoqIEVkaXRpbmcgYXJlYSAqL1xyXG4gICAgICAgIG9wdGlvbnMuY2xhc3NOYW1lID0gKHR5cGVvZiBvcHRpb25zLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5jbGFzc05hbWUubGVuZ3RoID4gMCkgPyAnICcgKyBvcHRpb25zLmNsYXNzTmFtZSA6ICcnO1xyXG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdFN0eWxlID0gdHlwZW9mIG9wdGlvbnMuZGVmYXVsdFN0eWxlID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZGVmYXVsdFN0eWxlIDogJyc7XHJcbiAgICAgICAgLyoqIERlZmluaW5nIG1lbnUgaXRlbXMgKi9cclxuICAgICAgICBvcHRpb25zLmZvbnQgPSAhb3B0aW9ucy5mb250ID8gWydBcmlhbCcsICdDb21pYyBTYW5zIE1TJywgJ0NvdXJpZXIgTmV3JywgJ0ltcGFjdCcsICdHZW9yZ2lhJywgJ3RhaG9tYScsICdUcmVidWNoZXQgTVMnLCAnVmVyZGFuYSddIDogb3B0aW9ucy5mb250O1xyXG4gICAgICAgIG9wdGlvbnMuZm9udFNpemUgPSAhb3B0aW9ucy5mb250U2l6ZSA/IG51bGwgOiBvcHRpb25zLmZvbnRTaXplO1xyXG4gICAgICAgIG9wdGlvbnMuZm9ybWF0cyA9ICFvcHRpb25zLmZvcm1hdHMgPyBudWxsIDogb3B0aW9ucy5mb3JtYXRzO1xyXG4gICAgICAgIG9wdGlvbnMuY29sb3JMaXN0ID0gIW9wdGlvbnMuY29sb3JMaXN0ID8gbnVsbCA6IG9wdGlvbnMuY29sb3JMaXN0O1xyXG4gICAgICAgIG9wdGlvbnMubGluZUhlaWdodHMgPSAhb3B0aW9ucy5saW5lSGVpZ2h0cyA/IG51bGwgOiBvcHRpb25zLmxpbmVIZWlnaHRzO1xyXG4gICAgICAgIG9wdGlvbnMucGFyYWdyYXBoU3R5bGVzID0gIW9wdGlvbnMucGFyYWdyYXBoU3R5bGVzID8gbnVsbCA6IG9wdGlvbnMucGFyYWdyYXBoU3R5bGVzO1xyXG4gICAgICAgIG9wdGlvbnMudGV4dFN0eWxlcyA9ICFvcHRpb25zLnRleHRTdHlsZXMgPyBudWxsIDogb3B0aW9ucy50ZXh0U3R5bGVzO1xyXG4gICAgICAgIG9wdGlvbnMuZm9udFNpemVVbml0ID0gdHlwZW9mIG9wdGlvbnMuZm9udFNpemVVbml0ID09PSAnc3RyaW5nJyA/IChvcHRpb25zLmZvbnRTaXplVW5pdC50cmltKCkudG9Mb3dlckNhc2UoKSB8fCAncHgnKSA6ICdweCc7XHJcbiAgICAgICAgb3B0aW9ucy5hbGlnbkl0ZW1zID0gdHlwZW9mIG9wdGlvbnMuYWxpZ25JdGVtcyA9PT0gJ29iamVjdCcgPyBvcHRpb25zLmFsaWduSXRlbXMgOiAob3B0aW9ucy5ydGwgPyBbJ3JpZ2h0JywgJ2NlbnRlcicsICdsZWZ0JywgJ2p1c3RpZnknXSA6IFsnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKTtcclxuICAgICAgICAvKiogSW1hZ2UgKi9cclxuICAgICAgICBvcHRpb25zLmltYWdlUmVzaXppbmcgPSBvcHRpb25zLmltYWdlUmVzaXppbmcgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRpb25zLmltYWdlUmVzaXppbmc7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZUhlaWdodFNob3cgPSBvcHRpb25zLmltYWdlSGVpZ2h0U2hvdyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy5pbWFnZUhlaWdodFNob3c7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZUFsaWduU2hvdyA9IG9wdGlvbnMuaW1hZ2VBbGlnblNob3cgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIW9wdGlvbnMuaW1hZ2VBbGlnblNob3c7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZVdpZHRoID0gIW9wdGlvbnMuaW1hZ2VXaWR0aCA/ICdhdXRvJyA6IHV0aWwuaXNOdW1iZXIob3B0aW9ucy5pbWFnZVdpZHRoKSA/IG9wdGlvbnMuaW1hZ2VXaWR0aCArICdweCcgOiBvcHRpb25zLmltYWdlV2lkdGg7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZUhlaWdodCA9ICFvcHRpb25zLmltYWdlSGVpZ2h0ID8gJ2F1dG8nIDogdXRpbC5pc051bWJlcihvcHRpb25zLmltYWdlSGVpZ2h0KSA/IG9wdGlvbnMuaW1hZ2VIZWlnaHQgKyAncHgnIDogb3B0aW9ucy5pbWFnZUhlaWdodDtcclxuICAgICAgICBvcHRpb25zLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlID0gISFvcHRpb25zLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlO1xyXG4gICAgICAgIG9wdGlvbnMuX2ltYWdlU2l6ZVVuaXQgPSBvcHRpb25zLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlID8gJyUnIDogJ3B4JztcclxuICAgICAgICBvcHRpb25zLmltYWdlUm90YXRpb24gPSBvcHRpb25zLmltYWdlUm90YXRpb24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaW1hZ2VSb3RhdGlvbiA6ICEob3B0aW9ucy5pbWFnZVNpemVPbmx5UGVyY2VudGFnZSB8fCAhb3B0aW9ucy5pbWFnZUhlaWdodFNob3cpO1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VGaWxlSW5wdXQgPSBvcHRpb25zLmltYWdlRmlsZUlucHV0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy5pbWFnZUZpbGVJbnB1dDtcclxuICAgICAgICBvcHRpb25zLmltYWdlVXJsSW5wdXQgPSAob3B0aW9ucy5pbWFnZVVybElucHV0ID09PSB1bmRlZmluZWQgfHwgIW9wdGlvbnMuaW1hZ2VGaWxlSW5wdXQpID8gdHJ1ZSA6IG9wdGlvbnMuaW1hZ2VVcmxJbnB1dDtcclxuICAgICAgICBvcHRpb25zLmltYWdlVXBsb2FkSGVhZGVyID0gb3B0aW9ucy5pbWFnZVVwbG9hZEhlYWRlciB8fCBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMuaW1hZ2VVcGxvYWRVcmwgPSB0eXBlb2Ygb3B0aW9ucy5pbWFnZVVwbG9hZFVybCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmltYWdlVXBsb2FkVXJsIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLmltYWdlVXBsb2FkU2l6ZUxpbWl0ID0gL1xcZCsvLnRlc3Qob3B0aW9ucy5pbWFnZVVwbG9hZFNpemVMaW1pdCkgPyB1dGlsLmdldE51bWJlcihvcHRpb25zLmltYWdlVXBsb2FkU2l6ZUxpbWl0LCAwKSA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZU11bHRpcGxlRmlsZSA9ICEhb3B0aW9ucy5pbWFnZU11bHRpcGxlRmlsZTtcclxuICAgICAgICBvcHRpb25zLmltYWdlQWNjZXB0ID0gKHR5cGVvZiBvcHRpb25zLmltYWdlQWNjZXB0ICE9PSAnc3RyaW5nJyB8fCBvcHRpb25zLmltYWdlQWNjZXB0LnRyaW0oKSA9PT0gXCIqXCIpID8gJ2ltYWdlLyonIDogb3B0aW9ucy5pbWFnZUFjY2VwdC50cmltKCkgfHwgJ2ltYWdlLyonO1xyXG4gICAgICAgIC8qKiBJbWFnZSAtIGltYWdlIGdhbGxlcnkgKi9cclxuICAgICAgICBvcHRpb25zLmltYWdlR2FsbGVyeVVybCA9IHR5cGVvZiBvcHRpb25zLmltYWdlR2FsbGVyeVVybCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmltYWdlR2FsbGVyeVVybCA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5pbWFnZUdhbGxlcnlIZWFkZXIgPSBvcHRpb25zLmltYWdlR2FsbGVyeUhlYWRlciB8fCBudWxsO1xyXG4gICAgICAgIC8qKiBWaWRlbyAqL1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9SZXNpemluZyA9IG9wdGlvbnMudmlkZW9SZXNpemluZyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMudmlkZW9SZXNpemluZztcclxuICAgICAgICBvcHRpb25zLnZpZGVvSGVpZ2h0U2hvdyA9IG9wdGlvbnMudmlkZW9IZWlnaHRTaG93ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLnZpZGVvSGVpZ2h0U2hvdztcclxuICAgICAgICBvcHRpb25zLnZpZGVvQWxpZ25TaG93ID0gb3B0aW9ucy52aWRlb0FsaWduU2hvdyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy52aWRlb0FsaWduU2hvdztcclxuICAgICAgICBvcHRpb25zLnZpZGVvUmF0aW9TaG93ID0gb3B0aW9ucy52aWRlb1JhdGlvU2hvdyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy52aWRlb1JhdGlvU2hvdztcclxuICAgICAgICBvcHRpb25zLnZpZGVvV2lkdGggPSAhb3B0aW9ucy52aWRlb1dpZHRoIHx8ICF1dGlsLmdldE51bWJlcihvcHRpb25zLnZpZGVvV2lkdGgsIDApID8gJycgOiB1dGlsLmlzTnVtYmVyKG9wdGlvbnMudmlkZW9XaWR0aCkgPyBvcHRpb25zLnZpZGVvV2lkdGggKyAncHgnIDogb3B0aW9ucy52aWRlb1dpZHRoO1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9IZWlnaHQgPSAhb3B0aW9ucy52aWRlb0hlaWdodCB8fCAhdXRpbC5nZXROdW1iZXIob3B0aW9ucy52aWRlb0hlaWdodCwgMCkgPyAnJyA6IHV0aWwuaXNOdW1iZXIob3B0aW9ucy52aWRlb0hlaWdodCkgPyBvcHRpb25zLnZpZGVvSGVpZ2h0ICsgJ3B4JyA6IG9wdGlvbnMudmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1NpemVPbmx5UGVyY2VudGFnZSA9ICEhb3B0aW9ucy52aWRlb1NpemVPbmx5UGVyY2VudGFnZTtcclxuICAgICAgICBvcHRpb25zLl92aWRlb1NpemVVbml0ID0gb3B0aW9ucy52aWRlb1NpemVPbmx5UGVyY2VudGFnZSA/ICclJyA6ICdweCc7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1JvdGF0aW9uID0gb3B0aW9ucy52aWRlb1JvdGF0aW9uICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnZpZGVvUm90YXRpb24gOiAhKG9wdGlvbnMudmlkZW9TaXplT25seVBlcmNlbnRhZ2UgfHwgIW9wdGlvbnMudmlkZW9IZWlnaHRTaG93KTtcclxuICAgICAgICBvcHRpb25zLnZpZGVvUmF0aW8gPSAodXRpbC5nZXROdW1iZXIob3B0aW9ucy52aWRlb1JhdGlvLCA0KSB8fCAwLjU2MjUpO1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9SYXRpb0xpc3QgPSAhb3B0aW9ucy52aWRlb1JhdGlvTGlzdCA/IG51bGwgOiBvcHRpb25zLnZpZGVvUmF0aW9MaXN0O1xyXG4gICAgICAgIG9wdGlvbnMueW91dHViZVF1ZXJ5ID0gKG9wdGlvbnMueW91dHViZVF1ZXJ5IHx8ICcnKS5yZXBsYWNlKCc/JywgJycpO1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9GaWxlSW5wdXQgPSAhIW9wdGlvbnMudmlkZW9GaWxlSW5wdXQ7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1VybElucHV0ID0gKG9wdGlvbnMudmlkZW9VcmxJbnB1dCA9PT0gdW5kZWZpbmVkIHx8ICFvcHRpb25zLnZpZGVvRmlsZUlucHV0KSA/IHRydWUgOiBvcHRpb25zLnZpZGVvVXJsSW5wdXQ7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1VwbG9hZEhlYWRlciA9IG9wdGlvbnMudmlkZW9VcGxvYWRIZWFkZXIgfHwgbnVsbDtcclxuICAgICAgICBvcHRpb25zLnZpZGVvVXBsb2FkVXJsID0gdHlwZW9mIG9wdGlvbnMudmlkZW9VcGxvYWRVcmwgPT09ICdzdHJpbmcnID8gb3B0aW9ucy52aWRlb1VwbG9hZFVybCA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1VwbG9hZFNpemVMaW1pdCA9IC9cXGQrLy50ZXN0KG9wdGlvbnMudmlkZW9VcGxvYWRTaXplTGltaXQpID8gdXRpbC5nZXROdW1iZXIob3B0aW9ucy52aWRlb1VwbG9hZFNpemVMaW1pdCwgMCkgOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMudmlkZW9NdWx0aXBsZUZpbGUgPSAhIW9wdGlvbnMudmlkZW9NdWx0aXBsZUZpbGU7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb1RhZ0F0dHJzID0gb3B0aW9ucy52aWRlb1RhZ0F0dHJzIHx8IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb0lmcmFtZUF0dHJzID0gb3B0aW9ucy52aWRlb0lmcmFtZUF0dHJzIHx8IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy52aWRlb0FjY2VwdCA9ICh0eXBlb2Ygb3B0aW9ucy52aWRlb0FjY2VwdCAhPT0gJ3N0cmluZycgfHwgb3B0aW9ucy52aWRlb0FjY2VwdC50cmltKCkgPT09IFwiKlwiKSA/ICd2aWRlby8qJyA6IG9wdGlvbnMudmlkZW9BY2NlcHQudHJpbSgpIHx8ICd2aWRlby8qJztcclxuICAgICAgICAvKiogQXVkaW8gKi9cclxuICAgICAgICBvcHRpb25zLmF1ZGlvV2lkdGggPSAhb3B0aW9ucy5hdWRpb1dpZHRoID8gJycgOiB1dGlsLmlzTnVtYmVyKG9wdGlvbnMuYXVkaW9XaWR0aCkgPyBvcHRpb25zLmF1ZGlvV2lkdGggKyAncHgnIDogb3B0aW9ucy5hdWRpb1dpZHRoO1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9IZWlnaHQgPSAhb3B0aW9ucy5hdWRpb0hlaWdodCA/ICcnIDogdXRpbC5pc051bWJlcihvcHRpb25zLmF1ZGlvSGVpZ2h0KSA/IG9wdGlvbnMuYXVkaW9IZWlnaHQgKyAncHgnIDogb3B0aW9ucy5hdWRpb0hlaWdodDtcclxuICAgICAgICBvcHRpb25zLmF1ZGlvRmlsZUlucHV0ID0gISFvcHRpb25zLmF1ZGlvRmlsZUlucHV0O1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9VcmxJbnB1dCA9IChvcHRpb25zLmF1ZGlvVXJsSW5wdXQgPT09IHVuZGVmaW5lZCB8fCAhb3B0aW9ucy5hdWRpb0ZpbGVJbnB1dCkgPyB0cnVlIDogb3B0aW9ucy5hdWRpb1VybElucHV0O1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9VcGxvYWRIZWFkZXIgPSBvcHRpb25zLmF1ZGlvVXBsb2FkSGVhZGVyIHx8IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5hdWRpb1VwbG9hZFVybCA9IHR5cGVvZiBvcHRpb25zLmF1ZGlvVXBsb2FkVXJsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuYXVkaW9VcGxvYWRVcmwgOiBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9VcGxvYWRTaXplTGltaXQgPSAvXFxkKy8udGVzdChvcHRpb25zLmF1ZGlvVXBsb2FkU2l6ZUxpbWl0KSA/IHV0aWwuZ2V0TnVtYmVyKG9wdGlvbnMuYXVkaW9VcGxvYWRTaXplTGltaXQsIDApIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLmF1ZGlvTXVsdGlwbGVGaWxlID0gISFvcHRpb25zLmF1ZGlvTXVsdGlwbGVGaWxlO1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9UYWdBdHRycyA9IG9wdGlvbnMuYXVkaW9UYWdBdHRycyB8fCBudWxsO1xyXG4gICAgICAgIG9wdGlvbnMuYXVkaW9BY2NlcHQgPSAodHlwZW9mIG9wdGlvbnMuYXVkaW9BY2NlcHQgIT09ICdzdHJpbmcnIHx8IG9wdGlvbnMuYXVkaW9BY2NlcHQudHJpbSgpID09PSBcIipcIikgPyAnYXVkaW8vKicgOiBvcHRpb25zLmF1ZGlvQWNjZXB0LnRyaW0oKSB8fCAnYXVkaW8vKic7XHJcbiAgICAgICAgLyoqIFRhYmxlICovXHJcbiAgICAgICAgb3B0aW9ucy50YWJsZUNlbGxDb250cm9sbGVyUG9zaXRpb24gPSB0eXBlb2Ygb3B0aW9ucy50YWJsZUNlbGxDb250cm9sbGVyUG9zaXRpb24gPT09ICdzdHJpbmcnID8gb3B0aW9ucy50YWJsZUNlbGxDb250cm9sbGVyUG9zaXRpb24udG9Mb3dlckNhc2UoKSA6ICdjZWxsJztcclxuICAgICAgICAvKiogTGluayAqL1xyXG4gICAgICAgIG9wdGlvbnMubGlua1RhcmdldE5ld1dpbmRvdyA9ICEhb3B0aW9ucy5saW5rVGFyZ2V0TmV3V2luZG93O1xyXG4gICAgICAgIG9wdGlvbnMubGlua1Byb3RvY29sID0gdHlwZW9mIG9wdGlvbnMubGlua1Byb3RvY29sID09PSAnc3RyaW5nJyA/IG9wdGlvbnMubGlua1Byb3RvY29sIDogbnVsbDtcclxuICAgICAgICBvcHRpb25zLmxpbmtSZWwgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMubGlua1JlbCkgPyBvcHRpb25zLmxpbmtSZWwgOiBbXTtcclxuICAgICAgICBvcHRpb25zLmxpbmtSZWxEZWZhdWx0ID0gb3B0aW9ucy5saW5rUmVsRGVmYXVsdCB8fCB7fTtcclxuICAgICAgICAvKiogSFIgKi9cclxuICAgICAgICAvLyBvcHRpb25zLmhySXRlbXMgPSBvcHRpb25zLmhySXRlbXM7XHJcbiAgICAgICAgLyoqIEtleSBhY3Rpb25zICovXHJcbiAgICAgICAgb3B0aW9ucy50YWJEaXNhYmxlID0gISFvcHRpb25zLnRhYkRpc2FibGU7XHJcbiAgICAgICAgb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlID0gQXJyYXkuaXNBcnJheShvcHRpb25zLnNob3J0Y3V0c0Rpc2FibGUpID8gb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlIDogW107XHJcbiAgICAgICAgb3B0aW9ucy5zaG9ydGN1dHNIaW50ID0gb3B0aW9ucy5zaG9ydGN1dHNIaW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLnNob3J0Y3V0c0hpbnQ7XHJcbiAgICAgICAgLyoqIERlZmluaW5nIHNhdmUgYnV0dG9uICovXHJcbiAgICAgICAgb3B0aW9ucy5jYWxsQmFja1NhdmUgPSAhb3B0aW9ucy5jYWxsQmFja1NhdmUgPyBudWxsIDogb3B0aW9ucy5jYWxsQmFja1NhdmU7XHJcbiAgICAgICAgLyoqIFRlbXBsYXRlcyBBcnJheSAqL1xyXG4gICAgICAgIG9wdGlvbnMudGVtcGxhdGVzID0gIW9wdGlvbnMudGVtcGxhdGVzID8gbnVsbCA6IG9wdGlvbnMudGVtcGxhdGVzO1xyXG4gICAgICAgIC8qKiBFVEMgKi9cclxuICAgICAgICBvcHRpb25zLnBsYWNlaG9sZGVyID0gdHlwZW9mIG9wdGlvbnMucGxhY2Vob2xkZXIgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5wbGFjZWhvbGRlciA6IG51bGw7XHJcbiAgICAgICAgb3B0aW9ucy5tZWRpYUF1dG9TZWxlY3QgPSBvcHRpb25zLm1lZGlhQXV0b1NlbGVjdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy5tZWRpYUF1dG9TZWxlY3Q7XHJcbiAgICAgICAgLyoqIEJ1dHRvbnMgKi9cclxuICAgICAgICBvcHRpb25zLmJ1dHRvbkxpc3QgPSAhIW9wdGlvbnMuYnV0dG9uTGlzdCA/IG9wdGlvbnMuYnV0dG9uTGlzdCA6IFtcclxuICAgICAgICAgICAgWyd1bmRvJywgJ3JlZG8nXSxcclxuICAgICAgICAgICAgWydib2xkJywgJ3VuZGVybGluZScsICdpdGFsaWMnLCAnc3RyaWtlJywgJ3N1YnNjcmlwdCcsICdzdXBlcnNjcmlwdCddLFxyXG4gICAgICAgICAgICBbJ3JlbW92ZUZvcm1hdCddLFxyXG4gICAgICAgICAgICBbJ291dGRlbnQnLCAnaW5kZW50J10sXHJcbiAgICAgICAgICAgIFsnZnVsbFNjcmVlbicsICdzaG93QmxvY2tzJywgJ2NvZGVWaWV3J10sXHJcbiAgICAgICAgICAgIFsncHJldmlldycsICdwcmludCddXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgLyoqIFJUTCAtIGJ1dHRvbnMgKi9cclxuICAgICAgICBpZiAob3B0aW9ucy5ydGwpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5idXR0b25MaXN0ID0gb3B0aW9ucy5idXR0b25MaXN0LnJldmVyc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiAtLS0gRGVmaW5lIGljb25zIC0tLSAqL1xyXG4gICAgICAgIC8vIGN1c3RvbSBpY29uc1xyXG4gICAgICAgIG9wdGlvbnMuaWNvbnMgPSAoIW9wdGlvbnMuaWNvbnMgfHwgdHlwZW9mIG9wdGlvbnMuaWNvbnMgIT09ICdvYmplY3QnKSA/IF9pY29ucyA6IFtfaWNvbnMsIG9wdGlvbnMuaWNvbnNdLnJlZHVjZShmdW5jdGlvbiAoX2RlZmF1bHQsIF9uZXcpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIF9uZXcpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmhhc093bihfbmV3LCBrZXkpKSBfZGVmYXVsdFtrZXldID0gX25ld1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfZGVmYXVsdDtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgLy8gcnRsIGljb25zXHJcbiAgICAgICAgb3B0aW9ucy5pY29ucyA9ICFvcHRpb25zLnJ0bCA/IG9wdGlvbnMuaWNvbnMgOiBbb3B0aW9ucy5pY29ucywgb3B0aW9ucy5pY29ucy5ydGxdLnJlZHVjZShmdW5jdGlvbiAoX2RlZmF1bHQsIF9uZXcpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIF9uZXcpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmhhc093bihfbmV3LCBrZXkpKSBfZGVmYXVsdFtrZXldID0gX25ld1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfZGVmYXVsdDtcclxuICAgICAgICB9LCB7fSk7XHJcblxyXG4gICAgICAgIC8qKiBQcml2YXRlIG9wdGlvbnMgKi9cclxuICAgICAgICBvcHRpb25zLl9fbGlzdENvbW1vblN0eWxlID0gb3B0aW9ucy5fX2xpc3RDb21tb25TdHlsZSB8fCBbJ2ZvbnRTaXplJywgJ2NvbG9yJywgJ2ZvbnRGYW1pbHknLCAnZm9udFdlaWdodCcsICdmb250U3R5bGUnXTtcclxuXHJcbiAgICAgICAgLyoqIF9pbml0IG9wdGlvbnMgKi9cclxuICAgICAgICBvcHRpb25zLl9lZGl0b3JTdHlsZXMgPSB1dGlsLl9zZXREZWZhdWx0T3B0aW9uU3R5bGUob3B0aW9ucywgb3B0aW9ucy5kZWZhdWx0U3R5bGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0V2hpdGVsaXN0OiBmdW5jdGlvbiAod2hpdGVsaXN0LCBibGFja2xpc3QpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGJsYWNrbGlzdCAhPT0gJ3N0cmluZycpIHJldHVybiB3aGl0ZWxpc3Q7XHJcbiAgICAgICAgYmxhY2tsaXN0ID0gYmxhY2tsaXN0LnNwbGl0KCd8Jyk7XHJcbiAgICAgICAgd2hpdGVsaXN0ID0gd2hpdGVsaXN0LnNwbGl0KCd8Jyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGJsYWNrbGlzdC5sZW5ndGgsIGluZGV4OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaW5kZXggPSB3aGl0ZWxpc3QuaW5kZXhPZihibGFja2xpc3RbaV0pO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkgd2hpdGVsaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3aGl0ZWxpc3Quam9pbignfCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBTdW5lZGl0b3IncyBEZWZhdWx0IGJ1dHRvbiBsaXN0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBvcHRpb25zXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfZGVmYXVsdEJ1dHRvbnM6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgaWNvbnMgPSBvcHRpb25zLmljb25zO1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBvcHRpb25zLmxhbmc7XHJcbiAgICAgICAgY29uc3QgY21kID0gdXRpbC5pc09TWF9JT1MgPyAn4oyYJyA6ICdDVFJMJztcclxuICAgICAgICBjb25zdCBhZGRTaGlmdCA9IHV0aWwuaXNPU1hfSU9TID8gJ+KHpycgOiAnK1NISUZUJztcclxuICAgICAgICBjb25zdCBzaG9ydGN1dHNEaXNhYmxlID0gIW9wdGlvbnMuc2hvcnRjdXRzSGludCA/IFsnYm9sZCcsICdzdHJpa2UnLCAndW5kZXJsaW5lJywgJ2l0YWxpYycsICd1bmRvJywgJ2luZGVudCcsICdzYXZlJ10gOiBvcHRpb25zLnNob3J0Y3V0c0Rpc2FibGU7XHJcbiAgICAgICAgY29uc3QgaW5kZW50S2V5ID0gb3B0aW9ucy5ydGwgPyBbJ1snLCddJ10gOiBbJ10nLCdbJ107XHJcbiAgICAgICAgY29uc3QgaW5kZW50SWNvbiA9IG9wdGlvbnMucnRsID8gW2ljb25zLm91dGRlbnQsIGljb25zLmluZGVudF0gOiBbaWNvbnMuaW5kZW50LCBpY29ucy5vdXRkZW50XTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLyoqIGRlZmF1bHQgY29tbWFuZCAqL1xyXG4gICAgICAgICAgICBib2xkOiBbJycsIGxhbmcudG9vbGJhci5ib2xkICsgJzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXRcIj4nICsgKHNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZignYm9sZCcpID4gLTEgPyAnJyA6IGNtZCArICcrPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dC1rZXlcIj5CPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAnYm9sZCcsICcnLCBpY29ucy5ib2xkXSxcclxuICAgICAgICAgICAgdW5kZXJsaW5lOiBbJycsIGxhbmcudG9vbGJhci51bmRlcmxpbmUgKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCd1bmRlcmxpbmUnKSA+IC0xID8gJycgOiBjbWQgKyAnKzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXQta2V5XCI+VTwvc3Bhbj4nKSArICc8L3NwYW4+JywgJ3VuZGVybGluZScsICcnLCBpY29ucy51bmRlcmxpbmVdLFxyXG4gICAgICAgICAgICBpdGFsaWM6IFsnJywgbGFuZy50b29sYmFyLml0YWxpYyArICc8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0XCI+JyArIChzaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ2l0YWxpYycpID4gLTEgPyAnJyA6IGNtZCArICcrPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dC1rZXlcIj5JPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAnaXRhbGljJywgJycsIGljb25zLml0YWxpY10sXHJcbiAgICAgICAgICAgIHN0cmlrZTogWycnLCBsYW5nLnRvb2xiYXIuc3RyaWtlICsgJzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXRcIj4nICsgKHNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZignc3RyaWtlJykgPiAtMSA/ICcnIDogY21kICsgYWRkU2hpZnQgKyAnKzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXQta2V5XCI+Uzwvc3Bhbj4nKSArICc8L3NwYW4+JywgJ3N0cmlrZScsICcnLCBpY29ucy5zdHJpa2VdLFxyXG4gICAgICAgICAgICBzdWJzY3JpcHQ6IFsnJywgbGFuZy50b29sYmFyLnN1YnNjcmlwdCwgJ1NVQicsICcnLCBpY29ucy5zdWJzY3JpcHRdLFxyXG4gICAgICAgICAgICBzdXBlcnNjcmlwdDogWycnLCBsYW5nLnRvb2xiYXIuc3VwZXJzY3JpcHQsICdTVVAnLCAnJywgaWNvbnMuc3VwZXJzY3JpcHRdLFxyXG4gICAgICAgICAgICByZW1vdmVGb3JtYXQ6IFsnJywgbGFuZy50b29sYmFyLnJlbW92ZUZvcm1hdCwgJ3JlbW92ZUZvcm1hdCcsICcnLCBpY29ucy5lcmFzZV0sXHJcbiAgICAgICAgICAgIGluZGVudDogWycnLCBsYW5nLnRvb2xiYXIuaW5kZW50ICsgJzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXRcIj4nICsgKHNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZignaW5kZW50JykgPiAtMSA/ICcnIDogY21kICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPicgKyBpbmRlbnRLZXlbMF0gKyAnPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAnaW5kZW50JywgJycsIGluZGVudEljb25bMF1dLFxyXG4gICAgICAgICAgICBvdXRkZW50OiBbJycsIGxhbmcudG9vbGJhci5vdXRkZW50ICsgJzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXRcIj4nICsgKHNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZignaW5kZW50JykgPiAtMSA/ICcnIDogY21kICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPicgKyBpbmRlbnRLZXlbMV0gKyAnPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAnb3V0ZGVudCcsICcnLCBpbmRlbnRJY29uWzFdXSxcclxuICAgICAgICAgICAgZnVsbFNjcmVlbjogWydzZS1jb2RlLXZpZXctZW5hYmxlZCBzZS1yZXNpemluZy1lbmFibGVkJywgbGFuZy50b29sYmFyLmZ1bGxTY3JlZW4sICdmdWxsU2NyZWVuJywgJycsIGljb25zLmV4cGFuc2lvbl0sXHJcbiAgICAgICAgICAgIHNob3dCbG9ja3M6IFsnJywgbGFuZy50b29sYmFyLnNob3dCbG9ja3MsICdzaG93QmxvY2tzJywgJycsIGljb25zLnNob3dfYmxvY2tzXSxcclxuICAgICAgICAgICAgY29kZVZpZXc6IFsnc2UtY29kZS12aWV3LWVuYWJsZWQgc2UtcmVzaXppbmctZW5hYmxlZCcsIGxhbmcudG9vbGJhci5jb2RlVmlldywgJ2NvZGVWaWV3JywgJycsIGljb25zLmNvZGVfdmlld10sXHJcbiAgICAgICAgICAgIHVuZG86IFsnJywgbGFuZy50b29sYmFyLnVuZG8gKyAnPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dFwiPicgKyAoc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCd1bmRvJykgPiAtMSA/ICcnIDogY21kICsgJys8c3BhbiBjbGFzcz1cInNlLXNob3J0Y3V0LWtleVwiPlo8L3NwYW4+JykgKyAnPC9zcGFuPicsICd1bmRvJywgJycsIGljb25zLnVuZG9dLFxyXG4gICAgICAgICAgICByZWRvOiBbJycsIGxhbmcudG9vbGJhci5yZWRvICsgJzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXRcIj4nICsgKHNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZigndW5kbycpID4gLTEgPyAnJyA6IGNtZCArICcrPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dC1rZXlcIj5ZPC9zcGFuPiAvICcgKyBjbWQgKyBhZGRTaGlmdCArICcrPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dC1rZXlcIj5aPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAncmVkbycsICcnLCBpY29ucy5yZWRvXSxcclxuICAgICAgICAgICAgcHJldmlldzogWydzZS1yZXNpemluZy1lbmFibGVkJywgbGFuZy50b29sYmFyLnByZXZpZXcsICdwcmV2aWV3JywgJycsIGljb25zLnByZXZpZXddLFxyXG4gICAgICAgICAgICBwcmludDogWydzZS1yZXNpemluZy1lbmFibGVkJywgbGFuZy50b29sYmFyLnByaW50LCAncHJpbnQnLCAnJywgaWNvbnMucHJpbnRdLFxyXG4gICAgICAgICAgICBkaXI6IFsnJywgbGFuZy50b29sYmFyW29wdGlvbnMucnRsID8gJ2Rpcl9sdHInIDogJ2Rpcl9ydGwnXSwgJ2RpcicsICcnLCAgaWNvbnNbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddXSxcclxuICAgICAgICAgICAgZGlyX2x0cjogWycnLCBsYW5nLnRvb2xiYXIuZGlyX2x0ciwgJ2Rpcl9sdHInLCAnJywgIGljb25zLmRpcl9sdHJdLFxyXG4gICAgICAgICAgICBkaXJfcnRsOiBbJycsIGxhbmcudG9vbGJhci5kaXJfcnRsLCAnZGlyX3J0bCcsICcnLCAgaWNvbnMuZGlyX3J0bF0sXHJcbiAgICAgICAgICAgIHNhdmU6IFsnc2UtcmVzaXppbmctZW5hYmxlZCcsIGxhbmcudG9vbGJhci5zYXZlICsgJzxzcGFuIGNsYXNzPVwic2Utc2hvcnRjdXRcIj4nICsgKHNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZignc2F2ZScpID4gLTEgPyAnJyA6IGNtZCArICcrPHNwYW4gY2xhc3M9XCJzZS1zaG9ydGN1dC1rZXlcIj5TPC9zcGFuPicpICsgJzwvc3Bhbj4nLCAnc2F2ZScsICcnLCBpY29ucy5zYXZlXSxcclxuICAgICAgICAgICAgLyoqIHBsdWdpbnMgLSBjb21tYW5kICovXHJcbiAgICAgICAgICAgIGJsb2NrcXVvdGU6IFsnJywgbGFuZy50b29sYmFyLnRhZ19ibG9ja3F1b3RlLCAnYmxvY2txdW90ZScsICdjb21tYW5kJywgaWNvbnMuYmxvY2txdW90ZV0sXHJcbiAgICAgICAgICAgIC8qKiBwbHVnaW5zIC0gc3VibWVudSAqL1xyXG4gICAgICAgICAgICBmb250OiBbJ3NlLWJ0bi1zZWxlY3Qgc2UtYnRuLXRvb2wtZm9udCcsIGxhbmcudG9vbGJhci5mb250LCAnZm9udCcsICdzdWJtZW51JywgJzxzcGFuIGNsYXNzPVwidHh0XCI+JyArIGxhbmcudG9vbGJhci5mb250ICsgJzwvc3Bhbj4nICsgaWNvbnMuYXJyb3dfZG93bl0sXHJcbiAgICAgICAgICAgIGZvcm1hdEJsb2NrOiBbJ3NlLWJ0bi1zZWxlY3Qgc2UtYnRuLXRvb2wtZm9ybWF0JywgbGFuZy50b29sYmFyLmZvcm1hdHMsICdmb3JtYXRCbG9jaycsICdzdWJtZW51JywgJzxzcGFuIGNsYXNzPVwidHh0XCI+JyArIGxhbmcudG9vbGJhci5mb3JtYXRzICsgJzwvc3Bhbj4nICsgaWNvbnMuYXJyb3dfZG93bl0sXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBbJ3NlLWJ0bi1zZWxlY3Qgc2UtYnRuLXRvb2wtc2l6ZScsIGxhbmcudG9vbGJhci5mb250U2l6ZSwgJ2ZvbnRTaXplJywgJ3N1Ym1lbnUnLCAnPHNwYW4gY2xhc3M9XCJ0eHRcIj4nICsgbGFuZy50b29sYmFyLmZvbnRTaXplICsgJzwvc3Bhbj4nICsgaWNvbnMuYXJyb3dfZG93bl0sXHJcbiAgICAgICAgICAgIGZvbnRDb2xvcjogWycnLCBsYW5nLnRvb2xiYXIuZm9udENvbG9yLCAnZm9udENvbG9yJywgJ3N1Ym1lbnUnLCBpY29ucy5mb250X2NvbG9yXSxcclxuICAgICAgICAgICAgaGlsaXRlQ29sb3I6IFsnJywgbGFuZy50b29sYmFyLmhpbGl0ZUNvbG9yLCAnaGlsaXRlQ29sb3InLCAnc3VibWVudScsIGljb25zLmhpZ2hsaWdodF9jb2xvcl0sXHJcbiAgICAgICAgICAgIGFsaWduOiBbJ3NlLWJ0bi1hbGlnbicsIGxhbmcudG9vbGJhci5hbGlnbiwgJ2FsaWduJywgJ3N1Ym1lbnUnLCAob3B0aW9ucy5ydGwgPyBpY29ucy5hbGlnbl9yaWdodCA6IGljb25zLmFsaWduX2xlZnQpXSxcclxuICAgICAgICAgICAgbGlzdDogWycnLCBsYW5nLnRvb2xiYXIubGlzdCwgJ2xpc3QnLCAnc3VibWVudScsIGljb25zLmxpc3RfbnVtYmVyXSxcclxuICAgICAgICAgICAgaG9yaXpvbnRhbFJ1bGU6IFsnYnRuX2xpbmUnLCBsYW5nLnRvb2xiYXIuaG9yaXpvbnRhbFJ1bGUsICdob3Jpem9udGFsUnVsZScsICdzdWJtZW51JywgaWNvbnMuaG9yaXpvbnRhbF9ydWxlXSxcclxuICAgICAgICAgICAgdGFibGU6IFsnJywgbGFuZy50b29sYmFyLnRhYmxlLCAndGFibGUnLCAnc3VibWVudScsIGljb25zLnRhYmxlXSxcclxuICAgICAgICAgICAgbGluZUhlaWdodDogWycnLCBsYW5nLnRvb2xiYXIubGluZUhlaWdodCwgJ2xpbmVIZWlnaHQnLCAnc3VibWVudScsIGljb25zLmxpbmVfaGVpZ2h0XSxcclxuICAgICAgICAgICAgdGVtcGxhdGU6IFsnJywgbGFuZy50b29sYmFyLnRlbXBsYXRlLCAndGVtcGxhdGUnLCAnc3VibWVudScsIGljb25zLnRlbXBsYXRlXSxcclxuICAgICAgICAgICAgcGFyYWdyYXBoU3R5bGU6IFsnJywgbGFuZy50b29sYmFyLnBhcmFncmFwaFN0eWxlLCAncGFyYWdyYXBoU3R5bGUnLCAnc3VibWVudScsIGljb25zLnBhcmFncmFwaF9zdHlsZV0sXHJcbiAgICAgICAgICAgIHRleHRTdHlsZTogWycnLCBsYW5nLnRvb2xiYXIudGV4dFN0eWxlLCAndGV4dFN0eWxlJywgJ3N1Ym1lbnUnLCBpY29ucy50ZXh0X3N0eWxlXSxcclxuICAgICAgICAgICAgLyoqIHBsdWdpbnMgLSBkaWFsb2cgKi9cclxuICAgICAgICAgICAgbGluazogWycnLCBsYW5nLnRvb2xiYXIubGluaywgJ2xpbmsnLCAnZGlhbG9nJywgaWNvbnMubGlua10sXHJcbiAgICAgICAgICAgIGltYWdlOiBbJycsIGxhbmcudG9vbGJhci5pbWFnZSwgJ2ltYWdlJywgJ2RpYWxvZycsIGljb25zLmltYWdlXSxcclxuICAgICAgICAgICAgdmlkZW86IFsnJywgbGFuZy50b29sYmFyLnZpZGVvLCAndmlkZW8nLCAnZGlhbG9nJywgaWNvbnMudmlkZW9dLFxyXG4gICAgICAgICAgICBhdWRpbzogWycnLCBsYW5nLnRvb2xiYXIuYXVkaW8sICdhdWRpbycsICdkaWFsb2cnLCBpY29ucy5hdWRpb10sXHJcbiAgICAgICAgICAgIG1hdGg6IFsnJywgbGFuZy50b29sYmFyLm1hdGgsICdtYXRoJywgJ2RpYWxvZycsIGljb25zLm1hdGhdLFxyXG4gICAgICAgICAgICAvKiogcGx1Z2lucyAtIGZpbGVCcm93c2VyICovXHJcbiAgICAgICAgICAgIGltYWdlR2FsbGVyeTogWycnLCBsYW5nLnRvb2xiYXIuaW1hZ2VHYWxsZXJ5LCAnaW1hZ2VHYWxsZXJ5JywgJ2ZpbGVCcm93c2VyJywgaWNvbnMuaW1hZ2VfZ2FsbGVyeV1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgYSBncm91cCBkaXYgY29udGFpbmluZyBlYWNoIG1vZHVsZVxyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jcmVhdGVNb2R1bGVHcm91cDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IG9EaXYgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIG9EaXYuY2xhc3NOYW1lID0gJ3NlLWJ0bi1tb2R1bGUgc2UtYnRuLW1vZHVsZS1ib3JkZXInO1xyXG5cclxuICAgICAgICBjb25zdCBvVWwgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ1VMJyk7XHJcbiAgICAgICAgb1VsLmNsYXNzTmFtZSA9ICdzZS1tZW51LWxpc3QnO1xyXG4gICAgICAgIG9EaXYuYXBwZW5kQ2hpbGQob1VsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ2Rpdic6IG9EaXYsXHJcbiAgICAgICAgICAgICd1bCc6IG9VbFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSBhIGJ1dHRvbiBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnV0dG9uQ2xhc3MgY2xhc3NOYW1lIGluIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIFRpdGxlIGluIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFDb21tYW5kIFRoZSBkYXRhLWNvbW1hbmQgcHJvcGVydHkgb2YgdGhlIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFEaXNwbGF5IFRoZSBkYXRhLWRpc3BsYXkgcHJvcGVydHkgb2YgdGhlIGJ1dHRvbiAoJ2RpYWxvZycsICdzdWJtZW51JywgJ2NvbW1hbmQnKVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlubmVySFRNTCBIdG1sIGluIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IF9kaXNhYmxlZCBCdXR0b24gZGlzYWJsZWRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBfaWNvbnMgSWNvbnNcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfY3JlYXRlQnV0dG9uOiBmdW5jdGlvbiAoYnV0dG9uQ2xhc3MsIHRpdGxlLCBkYXRhQ29tbWFuZCwgZGF0YURpc3BsYXksIGlubmVySFRNTCwgX2Rpc2FibGVkLCBfaWNvbnMpIHtcclxuICAgICAgICBjb25zdCBvTGkgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcbiAgICAgICAgY29uc3Qgb0J1dHRvbiA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlVUVE9OJyk7XHJcbiAgICAgICAgY29uc3QgbGFiZWwgPSAodGl0bGUgfHwgZGF0YUNvbW1hbmQpO1xyXG5cclxuICAgICAgICBvQnV0dG9uLnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcclxuICAgICAgICBvQnV0dG9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2UtYnRuJyArIChidXR0b25DbGFzcyA/ICcgJyArIGJ1dHRvbkNsYXNzIDogJycpICsgJyBzZS10b29sdGlwJyk7XHJcbiAgICAgICAgb0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcsIGRhdGFDb21tYW5kKTtcclxuICAgICAgICBvQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1kaXNwbGF5JywgZGF0YURpc3BsYXkpO1xyXG4gICAgICAgIG9CdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgbGFiZWwucmVwbGFjZSgvPHNwYW4gLis8XFwvc3Bhbj4vLCAnJykpO1xyXG4gICAgICAgIG9CdXR0b24uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghaW5uZXJIVE1MKSBpbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJzZS1pY29uLXRleHRcIj4hPC9zcGFuPic7XHJcbiAgICAgICAgaWYgKC9eZGVmYXVsdFxcLi9pLnRlc3QoaW5uZXJIVE1MKSkge1xyXG4gICAgICAgICAgICBpbm5lckhUTUwgPSBfaWNvbnNbaW5uZXJIVE1MLnJlcGxhY2UoL15kZWZhdWx0XFwuL2ksICcnKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXnRleHRcXC4vaS50ZXN0KGlubmVySFRNTCkpIHtcclxuICAgICAgICAgICAgaW5uZXJIVE1MID0gaW5uZXJIVE1MLnJlcGxhY2UoL150ZXh0XFwuL2ksICcnKTtcclxuICAgICAgICAgICAgb0J1dHRvbi5jbGFzc05hbWUgKz0gJyBzZS1idG4tbW9yZS10ZXh0JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlubmVySFRNTCArPSAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFiZWwgKyAnPC9zcGFuPjwvc3Bhbj4nO1xyXG5cclxuICAgICAgICBpZiAoX2Rpc2FibGVkKSBvQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICBcclxuICAgICAgICBvQnV0dG9uLmlubmVySFRNTCA9IGlubmVySFRNTDtcclxuICAgICAgICBvTGkuYXBwZW5kQ2hpbGQob0J1dHRvbik7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdsaSc6IG9MaSxcclxuICAgICAgICAgICAgJ2J1dHRvbic6IG9CdXR0b25cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgZWRpdG9yIEhUTUxcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRvYyBkb2N1bWVudCBvYmplY3RcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGJ1dHRvbkxpc3Qgb3B0aW9uLmJ1dHRvbkxpc3RcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IHBsdWdpbnMgUGx1Z2luc1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3B0aW9ucyBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7IGVsZW1lbnQ6IChFbGVtZW50KSBUb29sYmFyIGVsZW1lbnQsIHBsdWdpbnM6IChBcnJheXxudWxsKSBQbHVnaW5zIEFycmF5LCBwbHVnaW5DYWxsQnV0dG9uczogKE9iamVjdCksIHJlc3BvbnNpdmVCdXR0b25zOiAoQXJyYXkpIH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jcmVhdGVUb29sQmFyOiBmdW5jdGlvbiAoZG9jLCBidXR0b25MaXN0LCBwbHVnaW5zLCBvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yX3ZlcnRpY2FsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIHNlcGFyYXRvcl92ZXJ0aWNhbC5jbGFzc05hbWUgPSAnc2UtdG9vbGJhci1zZXBhcmF0b3ItdmVydGljYWwnO1xyXG5cclxuICAgICAgICBjb25zdCB0b29sX2JhciA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICB0b29sX2Jhci5jbGFzc05hbWUgPSAnc2UtdG9vbGJhciBzdW4tZWRpdG9yLWNvbW1vbic7XHJcblxyXG4gICAgICAgIGNvbnN0IF9idXR0b25UcmF5ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIF9idXR0b25UcmF5LmNsYXNzTmFtZSA9ICdzZS1idG4tdHJheSc7XHJcbiAgICAgICAgdG9vbF9iYXIuYXBwZW5kQ2hpbGQoX2J1dHRvblRyYXkpO1xyXG5cclxuICAgICAgICAvKiogY3JlYXRlIGJ1dHRvbiBsaXN0ICovXHJcbiAgICAgICAgYnV0dG9uTGlzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYnV0dG9uTGlzdCkpO1xyXG4gICAgICAgIGNvbnN0IGljb25zID0gb3B0aW9ucy5pY29ucztcclxuICAgICAgICBjb25zdCBkZWZhdWx0QnV0dG9uTGlzdCA9IHRoaXMuX2RlZmF1bHRCdXR0b25zKG9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IHBsdWdpbkNhbGxCdXR0b25zID0ge307XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2l2ZUJ1dHRvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgbGV0IG1vZHVsZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGJ1dHRvbiA9IG51bGw7XHJcbiAgICAgICAgbGV0IG1vZHVsZUVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGxldCBidXR0b25FbGVtZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgcGx1Z2luTmFtZSA9ICcnO1xyXG4gICAgICAgIGxldCB2ZXJ0aWNhbCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IG1vcmVMYXllciA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgbW9yZUxheWVyLmNsYXNzTmFtZSA9ICdzZS10b29sYmFyLW1vcmUtbGF5ZXInO1xyXG5cclxuICAgICAgICBidXR0b25Hcm91cExvb3A6XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG1vcmUsIG1vcmVDb250YWluZXIsIG1vcmVDb21tYW5kLCBidXR0b25Hcm91cCwgYWxpZ247IGkgPCBidXR0b25MaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1vcmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgYWxpZ24gPSAnJztcclxuICAgICAgICAgICAgYnV0dG9uR3JvdXAgPSBidXR0b25MaXN0W2ldO1xyXG4gICAgICAgICAgICBtb2R1bGVFbGVtZW50ID0gdGhpcy5fY3JlYXRlTW9kdWxlR3JvdXAoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJ1dHRvbiBvYmplY3RcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBidXR0b25Hcm91cCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIC8vIGJ1dHRvbnMgbG9vcFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIG1vcmVCdXR0b247IGogPCBidXR0b25Hcm91cC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGJ1dHRvbkdyb3VwW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vcmVCdXR0b24gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9eXFwlXFxkKy8udGVzdChidXR0b24pICYmIGogPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uR3JvdXBbMF0gPSBidXR0b24ucmVwbGFjZSgvW15cXGRdL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZUJ1dHRvbnMucHVzaChidXR0b25Hcm91cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkxpc3Quc3BsaWNlKGktLSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGJ1dHRvbkdyb3VwTG9vcDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBidXR0b24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnV0dG9uLmFkZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luTmFtZSA9IGJ1dHRvbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlID0gZGVmYXVsdEJ1dHRvbkxpc3RbcGx1Z2luTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5zW3BsdWdpbk5hbWVdID0gYnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luTmFtZSA9IGJ1dHRvbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlID0gW2J1dHRvbi5idXR0b25DbGFzcywgYnV0dG9uLnRpdGxlLCBidXR0b24ubmFtZSwgYnV0dG9uLmRhdGFEaXNwbGF5LCBidXR0b24uaW5uZXJIVE1MLCBidXR0b24uX2Rpc2FibGVkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsaWduXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvXlxcLS8udGVzdChidXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbiA9IGJ1dHRvbi5zdWJzdHIoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGVFbGVtZW50LmRpdi5jbGFzc05hbWUgKz0gJyBtb2R1bGUtZmxvYXQtJyArIGFsaWduO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJ0bCBmaXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eXFwjLy50ZXN0KGJ1dHRvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGJ1dHRvbi5zdWJzdHIoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09PSAnZml4JykgbW9kdWxlRWxlbWVudC51bC5jbGFzc05hbWUgKz0gJyBzZS1tZW51LWRpci1maXgnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vcmUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvXlxcOi8udGVzdChidXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZWQgPSBidXR0b24ubWF0Y2goL15cXDooW15cXC1dKylcXC0oW15cXC1dKylcXC0oW15cXC1dKykvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVDb21tYW5kID0gJ19fc2VfXycgKyBtYXRjaGVkWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gbWF0Y2hlZFsyXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbm5lckhUTUwgPSBtYXRjaGVkWzNdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZSA9IFsnc2UtYnRuLW1vcmUnLCB0aXRsZSwgbW9yZUNvbW1hbmQsICdNT1JFJywgaW5uZXJIVE1MXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBidXR0b25zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlID0gZGVmYXVsdEJ1dHRvbkxpc3RbYnV0dG9uXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luTmFtZSA9IGJ1dHRvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2R1bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1c3RvbSA9IHBsdWdpbnNbcGx1Z2luTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN1c3RvbSkgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY3JlYXRlLnRvb2xiYXIuZmFpbF0gVGhlIGJ1dHRvbiBuYW1lIG9mIGEgcGx1Z2luIHRoYXQgZG9lcyBub3QgZXhpc3QuIFsnICsgcGx1Z2luTmFtZSArICddJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUgPSBbY3VzdG9tLmJ1dHRvbkNsYXNzLCBjdXN0b20udGl0bGUsIGN1c3RvbS5uYW1lLCBjdXN0b20uZGlzcGxheSwgY3VzdG9tLmlubmVySFRNTCwgY3VzdG9tLl9kaXNhYmxlZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9jcmVhdGVCdXR0b24obW9kdWxlWzBdLCBtb2R1bGVbMV0sIG1vZHVsZVsyXSwgbW9kdWxlWzNdLCBtb2R1bGVbNF0sIG1vZHVsZVs1XSwgaWNvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIChtb3JlID8gbW9yZUNvbnRhaW5lciA6IG1vZHVsZUVsZW1lbnQudWwpLmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQubGkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luc1twbHVnaW5OYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5DYWxsQnV0dG9uc1twbHVnaW5OYW1lXSA9IGJ1dHRvbkVsZW1lbnQuYnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW9yZSBidXR0b25cclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9yZUJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9yZUNvbnRhaW5lciA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVDb250YWluZXIuY2xhc3NOYW1lID0gJ3NlLW1vcmUtbGF5ZXIgJyArIG1vcmVDb21tYW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JlQ29udGFpbmVyLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwic2UtbW9yZS1mb3JtXCI+PHVsIGNsYXNzPVwic2UtbWVudS1saXN0XCInICsgKGFsaWduID8gJyBzdHlsZT1cImZsb2F0OiAnICsgYWxpZ24gKyAnO1wiJyA6ICcnKSArICc+PC91bD48L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JlTGF5ZXIuYXBwZW5kQ2hpbGQobW9yZUNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVDb250YWluZXIgPSBtb3JlQ29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdiA9ICBzZXBhcmF0b3JfdmVydGljYWwuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBfYnV0dG9uVHJheS5hcHBlbmRDaGlsZChzdik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIF9idXR0b25UcmF5LmFwcGVuZENoaWxkKG1vZHVsZUVsZW1lbnQuZGl2KTtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKiogbGluZSBicmVhayAgKi9cclxuICAgICAgICAgICAgZWxzZSBpZiAoL15cXC8kLy50ZXN0KGJ1dHRvbkdyb3VwKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZW50ZXJEaXYgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgICAgICBlbnRlckRpdi5jbGFzc05hbWUgPSAnc2UtYnRuLW1vZHVsZS1lbnRlcic7XHJcbiAgICAgICAgICAgICAgICBfYnV0dG9uVHJheS5hcHBlbmRDaGlsZChlbnRlckRpdik7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKF9idXR0b25UcmF5LmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICBfYnV0dG9uVHJheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoX2J1dHRvblRyYXkuZmlyc3RFbGVtZW50Q2hpbGQsICdzZS1idG4tbW9kdWxlLWJvcmRlcicpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5ydGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdiA9ICBzZXBhcmF0b3JfdmVydGljYWwuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBzdi5zdHlsZS5mbG9hdCA9IF9idXR0b25UcmF5Lmxhc3RFbGVtZW50Q2hpbGQuc3R5bGUuZmxvYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgX2J1dHRvblRyYXkuYXBwZW5kQ2hpbGQoc3YpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNpdmVCdXR0b25zLmxlbmd0aCA+IDApIHJlc3BvbnNpdmVCdXR0b25zLnVuc2hpZnQoYnV0dG9uTGlzdCk7XHJcbiAgICAgICAgaWYgKG1vcmVMYXllci5jaGlsZHJlbi5sZW5ndGggPiAwKSBfYnV0dG9uVHJheS5hcHBlbmRDaGlsZChtb3JlTGF5ZXIpO1xyXG5cclxuICAgICAgICAvLyBtZW51IHRyYXlcclxuICAgICAgICBjb25zdCBfbWVudVRyYXkgPSBkb2MuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgX21lbnVUcmF5LmNsYXNzTmFtZSA9ICdzZS1tZW51LXRyYXknO1xyXG4gICAgICAgIHRvb2xfYmFyLmFwcGVuZENoaWxkKF9tZW51VHJheSk7XHJcblxyXG4gICAgICAgIC8vIGNvdmVyXHJcbiAgICAgICAgY29uc3QgdG9vbF9jb3ZlciA9IGRvYy5jcmVhdGVFbGVtZW50KCdESVYnKTtcclxuICAgICAgICB0b29sX2NvdmVyLmNsYXNzTmFtZSA9ICdzZS10b29sYmFyLWNvdmVyJztcclxuICAgICAgICB0b29sX2Jhci5hcHBlbmRDaGlsZCh0b29sX2NvdmVyKTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGlkZVRvb2xiYXIpIHRvb2xfYmFyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdlbGVtZW50JzogdG9vbF9iYXIsXHJcbiAgICAgICAgICAgICdwbHVnaW5zJzogcGx1Z2lucyxcclxuICAgICAgICAgICAgJ3BsdWdpbkNhbGxCdXR0b25zJzogcGx1Z2luQ2FsbEJ1dHRvbnMsXHJcbiAgICAgICAgICAgICdyZXNwb25zaXZlQnV0dG9ucyc6IHJlc3BvbnNpdmVCdXR0b25zLFxyXG4gICAgICAgICAgICAnX21lbnVUcmF5JzogX21lbnVUcmF5LFxyXG4gICAgICAgICAgICAnX2J1dHRvblRyYXknOiBfYnV0dG9uVHJheVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07IiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gRWxlbWVudHMgYW5kIHZhcmlhYmxlcyB5b3Ugc2hvdWxkIGhhdmVcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IHRleHRhcmVhIGVsZW1lbnRcclxuICogQHBhcmFtIHtvYmplY3R9IGNvbnMgVG9vbGJhciBlbGVtZW50IHlvdSBjcmVhdGVkXHJcbiAqIEBwYXJhbSB7SlNPTnxPYmplY3R9IG9wdGlvbnMgSW5zZXJ0ZWQgb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB7RWxlbWVudHMsIHZhcmlhYmxlcyBvZiB0aGUgZWRpdG9yLCBvcHRpb259XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBfQ29udGV4dCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25zLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgb3JpZ2luRWxlbWVudDogZWxlbWVudCxcclxuICAgICAgICAgICAgdG9wQXJlYTogY29ucy5fdG9wLFxyXG4gICAgICAgICAgICByZWxhdGl2ZTogY29ucy5fcmVsYXRpdmUsXHJcbiAgICAgICAgICAgIHRvb2xiYXI6IGNvbnMuX3Rvb2xCYXIsXHJcbiAgICAgICAgICAgIF90b29sYmFyU2hhZG93OiBjb25zLl90b29sYmFyU2hhZG93LFxyXG4gICAgICAgICAgICBfYnV0dG9uVHJheTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCcuc2UtYnRuLXRyYXknKSxcclxuICAgICAgICAgICAgX21lbnVUcmF5OiBjb25zLl9tZW51VHJheSxcclxuICAgICAgICAgICAgcmVzaXppbmdCYXI6IGNvbnMuX3Jlc2l6aW5nQmFyLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiBjb25zLl9uYXZpZ2F0aW9uLFxyXG4gICAgICAgICAgICBjaGFyV3JhcHBlcjogY29ucy5fY2hhcldyYXBwZXIsXHJcbiAgICAgICAgICAgIGNoYXJDb3VudGVyOiBjb25zLl9jaGFyQ291bnRlcixcclxuICAgICAgICAgICAgZWRpdG9yQXJlYTogY29ucy5fZWRpdG9yQXJlYSxcclxuICAgICAgICAgICAgd3lzaXd5Z0ZyYW1lOiBjb25zLl93eXNpd3lnQXJlYSxcclxuICAgICAgICAgICAgd3lzaXd5ZzogY29ucy5fd3lzaXd5Z0FyZWEsIC8vIGlmIChvcHRpb25zLmlmcmFtZSkgY29ucy5fd3lzaXd5Z0FyZWEuY29udGVudERvY3VtZW50LmJvZHlcclxuICAgICAgICAgICAgY29kZTogY29ucy5fY29kZUFyZWEsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBjb25zLl9wbGFjZWhvbGRlcixcclxuICAgICAgICAgICAgbG9hZGluZzogY29ucy5fbG9hZGluZyxcclxuICAgICAgICAgICAgbGluZUJyZWFrZXI6IGNvbnMuX2xpbmVCcmVha2VyLFxyXG4gICAgICAgICAgICBsaW5lQnJlYWtlcl90OiBjb25zLl9saW5lQnJlYWtlcl90LFxyXG4gICAgICAgICAgICBsaW5lQnJlYWtlcl9iOiBjb25zLl9saW5lQnJlYWtlcl9iLFxyXG4gICAgICAgICAgICByZXNpemVCYWNrZ3JvdW5kOiBjb25zLl9yZXNpemVCYWNrLFxyXG4gICAgICAgICAgICBfc3RpY2t5RHVtbXk6IGNvbnMuX3N0aWNreUR1bW15LFxyXG4gICAgICAgICAgICBfYXJyb3c6IGNvbnMuX2Fycm93LFxyXG4gICAgICAgICAgICBfZm9jdXNUZW1wOiBjb25zLl9mb2N1c1RlbXBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvb2w6IHtcclxuICAgICAgICAgICAgY292ZXI6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignLnNlLXRvb2xiYXItY292ZXInKSxcclxuICAgICAgICAgICAgYm9sZDogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiYm9sZFwiXScpLFxyXG4gICAgICAgICAgICB1bmRlcmxpbmU6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInVuZGVybGluZVwiXScpLFxyXG4gICAgICAgICAgICBpdGFsaWM6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIml0YWxpY1wiXScpLFxyXG4gICAgICAgICAgICBzdHJpa2U6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInN0cmlrZVwiXScpLFxyXG4gICAgICAgICAgICBzdWI6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIlNVQlwiXScpLFxyXG4gICAgICAgICAgICBzdXA6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIlNVUFwiXScpLFxyXG4gICAgICAgICAgICB1bmRvOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJ1bmRvXCJdJyksXHJcbiAgICAgICAgICAgIHJlZG86IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInJlZG9cIl0nKSxcclxuICAgICAgICAgICAgc2F2ZTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwic2F2ZVwiXScpLFxyXG4gICAgICAgICAgICBvdXRkZW50OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJvdXRkZW50XCJdJyksXHJcbiAgICAgICAgICAgIGluZGVudDogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiaW5kZW50XCJdJyksXHJcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cImZ1bGxTY3JlZW5cIl0nKSxcclxuICAgICAgICAgICAgc2hvd0Jsb2NrczogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwic2hvd0Jsb2Nrc1wiXScpLFxyXG4gICAgICAgICAgICBjb2RlVmlldzogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiY29kZVZpZXdcIl0nKSxcclxuICAgICAgICAgICAgZGlyOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJkaXJcIl0nKSxcclxuICAgICAgICAgICAgZGlyX2x0cjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiZGlyX2x0clwiXScpLFxyXG4gICAgICAgICAgICBkaXJfcnRsOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJkaXJfcnRsXCJdJylcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgICAgb3B0aW9uOiBvcHRpb25zXHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgX0NvbnRleHQ7IiwiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdub3RpY2UnLFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICovXHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvcmUuY29udGV4dDtcclxuICAgICAgICBjb250ZXh0Lm5vdGljZSA9IHt9O1xyXG5cclxuICAgICAgICAvKiogZGlhbG9nICovXHJcbiAgICAgICAgbGV0IG5vdGljZV9kaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgbGV0IG5vdGljZV9zcGFuID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcclxuICAgICAgICBsZXQgbm90aWNlX2J1dHRvbiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdCVVRUT04nKTtcclxuXHJcbiAgICAgICAgbm90aWNlX2Rpdi5jbGFzc05hbWUgPSAnc2Utbm90aWNlJztcclxuICAgICAgICBub3RpY2VfYnV0dG9uLmNsYXNzTmFtZSA9ICdjbG9zZSc7XHJcbiAgICAgICAgbm90aWNlX2J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnQ2xvc2UnKTtcclxuICAgICAgICBub3RpY2VfYnV0dG9uLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBjb3JlLmxhbmcuZGlhbG9nQm94LmNsb3NlKTtcclxuICAgICAgICBub3RpY2VfYnV0dG9uLmlubmVySFRNTCA9IGNvcmUuaWNvbnMuY2FuY2VsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5vdGljZV9kaXYuYXBwZW5kQ2hpbGQobm90aWNlX3NwYW4pO1xyXG4gICAgICAgIG5vdGljZV9kaXYuYXBwZW5kQ2hpbGQobm90aWNlX2J1dHRvbik7XHJcblxyXG4gICAgICAgIGNvbnRleHQubm90aWNlLm1vZGFsID0gbm90aWNlX2RpdjtcclxuICAgICAgICBjb250ZXh0Lm5vdGljZS5tZXNzYWdlID0gbm90aWNlX3NwYW47XHJcblxyXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXHJcbiAgICAgICAgbm90aWNlX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja19jYW5jZWwuYmluZChjb3JlKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXHJcbiAgICAgICAgY29udGV4dC5lbGVtZW50LmVkaXRvckFyZWEuYXBwZW5kQ2hpbGQobm90aWNlX2Rpdik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgIG5vdGljZV9kaXYgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCB3aGVuIGNsaWNraW5nIHRoZSBjYW5jZWwgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGUgRXZlbnQgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIG9uQ2xpY2tfY2FuY2VsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHRoaXMucGx1Z2lucy5ub3RpY2UuY2xvc2UuY2FsbCh0aGlzKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gIE9wZW4gdGhlIG5vdGljZSBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgTm90aWNlIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgb3BlbjogZnVuY3Rpb24gKHRleHQpICB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0Lm5vdGljZS5tZXNzYWdlLnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgICAgICB0aGlzLmNvbnRleHQubm90aWNlLm1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiAgT3BlbiB0aGUgbm90aWNlIHBhbmVsXHJcbiAgICAgKi9cclxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0Lm5vdGljZS5tb2RhbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IGNvcmUgZnJvbSAnLi9saWIvY29yZSc7XHJcbmltcG9ydCB1dGlsIGZyb20gJy4vbGliL3V0aWwnO1xyXG5pbXBvcnQgX0NvbnN0cnVjdG9yIGZyb20gJy4vbGliL2NvbnN0cnVjdG9yJztcclxuaW1wb3J0IF9Db250ZXh0IGZyb20gJy4vbGliL2NvbnRleHQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgY3JlYXRlIGZ1bmN0aW9uIHdpdGggcHJlc2V0IG9wdGlvbnMuXHJcbiAgICAgKiBJZiB0aGUgb3B0aW9ucyBvdmVybGFwLCB0aGUgb3B0aW9ucyBvZiB0aGUgJ2NyZWF0ZScgZnVuY3Rpb24gdGFrZSBwcmVjZWRlbmNlLlxyXG4gICAgICogQHBhcmFtIHtKc29ufSBvcHRpb25zIEluaXRpYWxpemF0aW9uIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uIChpbml0X29wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChpZE9yRWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKGlkT3JFbGVtZW50LCBvcHRpb25zLCBpbml0X29wdGlvbnMpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgdGhlIHN1bmVkaXRvclxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudH0gaWRPckVsZW1lbnQgdGV4dGFyZWEgSWQgb3IgdGV4dGFyZWEgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtKU09OfE9iamVjdH0gb3B0aW9ucyB1c2VyIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKGlkT3JFbGVtZW50LCBvcHRpb25zLCBfaW5pdF9vcHRpb25zKSB7XHJcbiAgICAgICAgdXRpbC5fcHJvcGVydGllc0luaXQoKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIGlmIChfaW5pdF9vcHRpb25zKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSAgW19pbml0X29wdGlvbnMsIG9wdGlvbnNdLnJlZHVjZShmdW5jdGlvbiAoaW5pdCwgb3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmhhc093bihvcHRpb24sIGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdwbHVnaW5zJyAmJiBvcHRpb25ba2V5XSAmJiBpbml0W2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSBpbml0W2tleV0sIG8gPSBvcHRpb25ba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkubGVuZ3RoID8gaSA6IE9iamVjdC5rZXlzKGkpLm1hcChmdW5jdGlvbihuYW1lKSB7IHJldHVybiBpW25hbWVdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG8ubGVuZ3RoID8gbyA6IE9iamVjdC5rZXlzKG8pLm1hcChmdW5jdGlvbihuYW1lKSB7IHJldHVybiBvW25hbWVdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFtrZXldID0gKG8uZmlsdGVyKGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gaS5pbmRleE9mKHZhbCkgPT09IC0xOyB9KSkuY29uY2F0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRba2V5XSA9IG9wdGlvbltrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0eXBlb2YgaWRPckVsZW1lbnQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRPckVsZW1lbnQpIDogaWRPckVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGlkT3JFbGVtZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY3JlYXRlLmZhaWxdIFRoZSBlbGVtZW50IGZvciB0aGF0IGlkIHdhcyBub3QgZm91bmQgKElEOlwiJyArIGlkT3JFbGVtZW50ICsgJ1wiKScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUuZmFpbF0gc3VuZWRpdG9yIHJlcXVpcmVzIHRleHRhcmVhXFwncyBlbGVtZW50IG9yIGlkIHZhbHVlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjb25zID0gX0NvbnN0cnVjdG9yLmluaXQoZWxlbWVudCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmIChjb25zLmNvbnN0cnVjdGVkLl90b3AuaWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29ucy5jb25zdHJ1Y3RlZC5fdG9wLmlkKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUuZmFpbF0gVGhlIElEIG9mIHRoZSBzdW5lZGl0b3IgeW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGFscmVhZHkgZXhpc3RzIChJRDpcIicgKyBjb25zLmNvbnN0cnVjdGVkLl90b3AuaWQgKyAnXCIpJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29yZShfQ29udGV4dChlbGVtZW50LCBjb25zLmNvbnN0cnVjdGVkLCBjb25zLm9wdGlvbnMpLCBjb25zLnBsdWdpbkNhbGxCdXR0b25zLCBjb25zLnBsdWdpbnMsIGNvbnMub3B0aW9ucy5sYW5nLCBvcHRpb25zLCBjb25zLl9yZXNwb25zaXZlQnV0dG9ucyk7XHJcbiAgICB9XHJcbn07XHJcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgX0NvbnN0cnVjdG9yIGZyb20gJy4vY29uc3RydWN0b3InO1xyXG5pbXBvcnQgX0NvbnRleHQgZnJvbSAnLi9jb250ZXh0JztcclxuaW1wb3J0IF9oaXN0b3J5IGZyb20gJy4vaGlzdG9yeSc7XHJcbmltcG9ydCBfdXRpbCBmcm9tICcuL3V0aWwnO1xyXG5pbXBvcnQgX25vdGljZSBmcm9tICcuLi9wbHVnaW5zL21vZHVsZXMvX25vdGljZSc7XHJcbmltcG9ydCBhbmNob3JtZSBmcm9tIFwiYW5jaG9ybWVcIjtcclxuaW1wb3J0IHNob3dkb3duIGZyb20gXCJzaG93ZG93blwiO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvbiBTdW5FZGl0b3IgY29uc3R1Y3RvciBmdW5jdGlvbi5cclxuICogY3JlYXRlIGNvcmUgb2JqZWN0IGFuZCBldmVudCByZWdpc3RyYXRpb24uXHJcbiAqIGNvcmUsIGV2ZW50LCBmdW5jdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcclxuICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbkNhbGxCdXR0b25zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW5zIFxyXG4gKiBAcGFyYW0ge09iamVjdH0gbGFuZ1xyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gX3Jlc3BvbnNpdmVCdXR0b25zXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IGZ1bmN0aW9ucyBPYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb250ZXh0LCBwbHVnaW5DYWxsQnV0dG9ucywgcGx1Z2lucywgbGFuZywgb3B0aW9ucywgX3Jlc3BvbnNpdmVCdXR0b25zKSB7XHJcbiAgICBjb25zdCBfZCA9IGNvbnRleHQuZWxlbWVudC5vcmlnaW5FbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XHJcbiAgICBjb25zdCBfdyA9IF9kLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcclxuICAgIGNvbnN0IHV0aWwgPSBfdXRpbDtcclxuICAgIGNvbnN0IGljb25zID0gb3B0aW9ucy5pY29ucztcclxuICAgIGNvbnN0IG1kQ29udmVydGVyID0gbmV3IHNob3dkb3duLkNvbnZlcnRlcih7ZW1vamk6dHJ1ZSwgZW5jb2RlRW1haWxzOnRydWUsIG9taXRFeHRyYVdMSW5Db2RlQmxvY2tzOnRydWUsIFxyXG4gICAgICAgIG9wZW5MaW5rc0luTmV3V2luZG93OnRydWUsIHNpbXBsaWZpZWRBdXRvTGluazp0cnVlLCBzcGxpdEFkamFjZW50QmxvY2txdW90ZXM6dHJ1ZSwgdGFibGVzOnRydWUsIFxyXG4gICAgfSk7XHJcbiAgICBtZENvbnZlcnRlci5zZXRGbGF2b3IoJ2dpdGh1YicpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gZWRpdG9yIGNvcmUgb2JqZWN0XHJcbiAgICAgKiBzaG91bGQgYWx3YXlzIGJpbmQgdGhpcyBvYmplY3Qgd2hlbiByZWdpc3RlcmluZyBhbiBldmVudCBpbiB0aGUgcGx1Zy1pbi5cclxuICAgICAqL1xyXG4gICAgY29uc3QgY29yZSA9IHtcclxuICAgICAgICBfZDogX2QsXHJcbiAgICAgICAgX3c6IF93LFxyXG4gICAgICAgIF9wYXJzZXI6IG5ldyBfdy5ET01QYXJzZXIoKSxcclxuICAgICAgICBfcHJldlJ0bDogb3B0aW9ucy5ydGwsXHJcbiAgICAgICAgX2VkaXRvckhlaWdodDogMCxcclxuICAgICAgICBfZWRpdG9ySGVpZ2h0UGFkZGluZzogMCxcclxuICAgICAgICBfbGlzdENhbWVsOiBvcHRpb25zLl9fbGlzdENvbW1vblN0eWxlLFxyXG4gICAgICAgIF9saXN0S2ViYWI6IHV0aWwuY2FtZWxUb0tlYmFiQ2FzZShvcHRpb25zLl9fbGlzdENvbW1vblN0eWxlKSxcclxuICAgICAgICBfX2ZvY3VzVGVtcDogY29udGV4dC5lbGVtZW50Ll9mb2N1c1RlbXAsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEb2N1bWVudCBvYmplY3Qgb2YgdGhlIGlmcmFtZSBpZiBjcmVhdGVkIGFzIGFuIGlmcmFtZSB8fCBfZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3dkOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2luZG93IG9iamVjdCBvZiB0aGUgaWZyYW1lIGlmIGNyZWF0ZWQgYXMgYW4gaWZyYW1lIHx8IF93XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfd3c6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZXN0IFNoYWRvd1Jvb3QgdG8gZWRpdG9yIGlmIGZvdW5kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2hhZG93Um9vdDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEJsb2NrIGNvbnRyb2xsZXIgbW91c2Vkb3duIGV2ZW50cyBpbiBcInNoYWRvd1Jvb3RcIiBlbnZpcm9ubWVudFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NoYWRvd1Jvb3RDb250cm9sbGVyRXZlbnRUYXJnZXQ6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBVdGlsIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0aWw6IHV0aWwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBGdW5jdGlvbnMgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb25zOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRWRpdG9yIG9wdGlvbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBvcHRpb25zOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29tcHV0ZWQgc3R5bGUgb2YgdGhlIHd5c2l3eWcgYXJlYSAod2luZG93LmdldENvbXB1dGVkU3R5bGUoY29udGV4dC5lbGVtZW50Lnd5c2l3eWcpKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHd3Q29tcHV0ZWRTdHlsZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE5vdGljZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBub3RpY2U6IF9ub3RpY2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZWZhdWx0IGljb25zIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGljb25zOiBpY29ucyxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEhpc3Rvcnkgb2JqZWN0IGZvciB1bmRvLCByZWRvXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGlzdG9yeTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVsZW1lbnRzIGFuZCB1c2VyIG9wdGlvbnMgcGFyYW1ldGVycyBvZiB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFBsdWdpbiBidXR0b25zXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGx1Z2luQ2FsbEJ1dHRvbnM6IHBsdWdpbkNhbGxCdXR0b25zLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gTG9hZGVkIHBsdWdpbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBwbHVnaW5zOiBwbHVnaW5zIHx8IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2hldGhlciB0aGUgcGx1Z2luIGlzIGluaXRpYWxpemVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdFBsdWdpbnM6IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT2JqZWN0IGZvciBtYW5hZ2luZyBzdWJtZW51IGVsZW1lbnRzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGFyZ2V0UGx1Z2luczoge30sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTYXZlIHJlbmRlcmVkIHN1Ym1lbnVzIGFuZCBjb250YWluZXJzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbWVudVRyYXk6IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gbG9hZGVkIGxhbmd1YWdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZzogbGFuZyxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBzZWxlY3Rpb24gbm9kZSAoY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCkpIHRvIHdoaWNoIHRoZSBlZmZlY3Qgd2FzIGxhc3QgYXBwbGllZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVmZmVjdE5vZGU6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBzdWJtZW51IGVsZW1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJtZW51OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gY29udGFpbmVyIGVsZW1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250YWluZXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBjdXJyZW50IHN1Ym1lbnQgbmFtZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3N1Ym1lbnVOYW1lOiAnJyxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGJpbmRlZCBzdWJtZW51T2ZmIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2JpbmRlZFN1Ym1lbnVPZmY6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBiaW5kZWQgY29udGFpbmVyT2ZmIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2JpbmRlZENvbnRhaW5lck9mZjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGFjdGl2ZSBidXR0b24gZWxlbWVudCBpbiBzdWJtZW51XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3VibWVudUFjdGl2ZUJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGFjdGl2ZSBidXR0b24gZWxlbWVudCBpbiBjb250YWluZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250YWluZXJBY3RpdmVCdXR0b246IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgZWxlbWVudHMgYXJyYXkgdG8gYmUgcHJvY2Vzc2VkIHVudmlzaWJsZSB3aGVuIHRoZSBjb250cm9sbGVyc09mZiBmdW5jdGlvbiBpcyBleGVjdXRlZCAocmVzaXppbmcsIGxpbmsgbW9kaWZpZWQgYnV0dG9uLCB0YWJsZSBjb250cm9sbGVyKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRyb2xsZXJBcnJheTogW10sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRoYXQgY2FsbGVkIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNvbnRyb2xsZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBjdXJyZW50Q29udHJvbGxlck5hbWU6ICcnLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIHRhcmdldCBlbGVtZW50IG9mIGN1cnJlbnQgY29udHJvbGxlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGN1cnJlbnRDb250cm9sbGVyVGFyZ2V0OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIGZpbGUgY29tcG9uZW50IG9iamVjdCBvZiBjdXJyZW50IHNlbGVjdGVkIGZpbGUgdGFnIChnZXRGaWxlQ29tcG9uZW50KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbzogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFuIGFycmF5IG9mIGJ1dHRvbnMgd2hvc2UgY2xhc3MgbmFtZSBpcyBub3QgXCJzZS1jb2RlLXZpZXctZW5hYmxlZFwiXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29kZVZpZXdEaXNhYmxlZEJ1dHRvbnM6IFtdLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQW4gYXJyYXkgb2YgYnV0dG9ucyB3aG9zZSBjbGFzcyBuYW1lIGlzIG5vdCBcInNlLXJlc2l6aW5nLWVuYWJsZWRcIlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc2l6aW5nRGlzYWJsZWRCdXR0b25zOiBbXSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGFjdGl2ZSBtb3JlIGxheWVyIGVsZW1lbnQgaW4gc3VibWVudVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX21vcmVMYXllckFjdGl2ZUJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyB3aGl0ZWxpc3QgUmVnRXhwIG9iamVjdCB1c2VkIGluIFwiX2NvbnNpc3RlbmN5Q2hlY2tPZkhUTUxcIiBtZXRob2RcclxuICAgICAgICAgKiBeKG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QpJFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2h0bWxDaGVja1doaXRlbGlzdFJlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyBibGFja2xpc3QgUmVnRXhwIG9iamVjdCB1c2VkIGluIFwiX2NvbnNpc3RlbmN5Q2hlY2tPZkhUTUxcIiBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9odG1sQ2hlY2tCbGFja2xpc3RSZWdFeHA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZWdFeHAgd2hlbiB1c2luZyBjaGVjayBkaXNhbGxvd2QgdGFncy4gKGIsIGksIGlucywgc3RyaWtlLCBzKVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVkaXRvciB0YWdzIHdoaXRlbGlzdCAoUmVnRXhwIG9iamVjdClcclxuICAgICAgICAgKiB1dGlsLmNyZWF0ZVRhZ3NXaGl0ZWxpc3Qob3B0aW9ucy5fZWRpdG9yVGFnc1doaXRlbGlzdClcclxuICAgICAgICAgKi9cclxuICAgICAgICBlZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRWRpdG9yIHRhZ3MgYmxhY2tsaXN0IChSZWdFeHAgb2JqZWN0KVxyXG4gICAgICAgICAqIHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChvcHRpb25zLnRhZ3NCbGFja2xpc3QpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZWRpdG9yVGFnc0JsYWNrbGlzdFJlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyB3aGl0ZWxpc3Qgd2hlbiBwYXN0aW5nIChSZWdFeHAgb2JqZWN0KVxyXG4gICAgICAgICAqIHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdChvcHRpb25zLnBhc3RlVGFnc1doaXRlbGlzdClcclxuICAgICAgICAgKi9cclxuICAgICAgICBwYXN0ZVRhZ3NXaGl0ZWxpc3RSZWdFeHA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUYWcgYmxhY2tsaXN0IHdoZW4gcGFzdGluZyAoUmVnRXhwIG9iamVjdClcclxuICAgICAgICAgKiB1dGlsLmNyZWF0ZVRhZ3NCbGFja2xpc3Qob3B0aW9ucy5wYXN0ZVRhZ3NCbGFja2xpc3QpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGFzdGVUYWdzQmxhY2tsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9vbGVhbiB2YWx1ZSBvZiB3aGV0aGVyIHRoZSBlZGl0b3IgaGFzIGZvY3VzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGFzRm9jdXM6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9vbGVhbiB2YWx1ZSBvZiB3aGV0aGVyIHRoZSBlZGl0b3IgaXMgZGlzYWJsZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpc0Rpc2FibGVkOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEJvb2xlYW4gdmFsdWUgb2Ygd2hldGhlciB0aGUgZWRpdG9yIGlzIHJlYWRPbmx5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNSZWFkT25seTogZmFsc2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBdHRyaWJ1dGVzIHdoaXRlbGlzdCB1c2VkIGJ5IHRoZSBjbGVhbkhUTUwgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cDogbnVsbCxcclxuICAgICAgICBfYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cF9hbGxfZGF0YTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEF0dHJpYnV0ZXMgYmxhY2tsaXN0IHVzZWQgYnkgdGhlIGNsZWFuSFRNTCBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9hdHRyaWJ1dGVzQmxhY2tsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXR0cmlidXRlcyBvZiB0YWdzIHdoaXRlbGlzdCB1c2VkIGJ5IHRoZSBjbGVhbkhUTUwgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3Q6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBdHRyaWJ1dGVzIG9mIHRhZ3MgYmxhY2tsaXN0IHVzZWQgYnkgdGhlIGNsZWFuSFRNTCBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9hdHRyaWJ1dGVzVGFnc0JsYWNrbGlzdDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGJpbmRlZCBjb250cm9sbGVyc09mZiBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9iaW5kQ29udHJvbGxlcnNPZmY6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJcyBpbmxpbmUgbW9kZT9cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pc0lubGluZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElzIGJhbGxvb258YmFsbG9vbi1hbHdheXMgbW9kZT9cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pc0JhbGxvb246IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJcyBiYWxsb29uLWFsd2F5cyBtb2RlP1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lzQmFsbG9vbkFsd2F5czogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlcXVpcmVkIHZhbHVlIHdoZW4gdXNpbmcgaW5saW5lIG1vZGUgdG8gc3RpY2t5IHRvb2xiYXJcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pbmxpbmVUb29sYmFyQXR0cjoge3RvcDogJycsIHdpZHRoOiAnJywgaXNTaG93OiBmYWxzZX0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYXJpYWJsZSB0aGF0IGNvbnRyb2xzIHRoZSBcImJsdXJcIiBldmVudCBpbiB0aGUgZWRpdG9yIG9mIGlubGluZSBvciBiYWxsb29uIG1vZGUgd2hlbiB0aGUgZm9jdXMgaXMgbW92ZWQgdG8gc3VibWVudVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vdEhpZGVUb29sYmFyOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhcmlhYmxlIHZhbHVlIHRoYXQgc3RpY2t5IHRvb2xiYXIgbW9kZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3N0aWNreTogZmFsc2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYXJpYWJsZXMgZm9yIGNvbnRyb2xsaW5nIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2FudGlCbHVyOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvbXBvbmVudCBsaW5lIGJyZWFrZXIgZWxlbWVudFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2xpbmVCcmVha2VyOiBudWxsLFxyXG4gICAgICAgIF9saW5lQnJlYWtlckJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIHRydWUsIChpbml0aWFsaXplLCByZXNldCkgYWxsIGluZGV4ZXMgb2YgaW1hZ2UsIHZpZGVvIGluZm9ybWF0aW9uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY29tcG9uZW50c0luZm9Jbml0OiB0cnVlLFxyXG4gICAgICAgIF9jb21wb25lbnRzSW5mb1Jlc2V0OiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFBsdWdpbnMgYXJyYXkgd2l0aCBcImFjdGl2ZVwiIG1ldGhvZC5cclxuICAgICAgICAgKiBcImFjdGl2ZVBsdWdpbnNcIiBydW5zIHRoZSBcImFkZFwiIG1ldGhvZCB3aGVuIGNyZWF0aW5nIHRoZSBlZGl0b3IuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWN0aXZlUGx1Z2luczogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluZm9ybWF0aW9uIG9mIHRhZ3MgdGhhdCBzaG91bGQgbWFpbnRhaW4gSFRNTCBzdHJ1Y3R1cmUsIHN0eWxlLCBjbGFzcyBuYW1lLCBldGMuIChJbiB1c2UgYnkgXCJtYXRoXCIgcGx1Z2luKVxyXG4gICAgICAgICAqIFdoZW4gaW5zZXJ0aW5nIFwiaHRtbFwiIHN1Y2ggYXMgcGFzdGUsIGl0IGlzIGV4ZWN1dGVkIG9uIHRoZSBcImh0bWxcIiB0byBiZSBpbnNlcnRlZC4gKGNvcmUuY2xlYW5IVE1MKVxyXG4gICAgICAgICAqIEJhc2ljIEVkaXRvciBBY3Rpb25zOlxyXG4gICAgICAgICAqIDEuIEFsbCBjbGFzc2VzIG5vdCBzdGFydGluZyB3aXRoIFwiX19zZV9fXCIgb3IgXCJzZS1cIiBpbiB0aGUgZWRpdG9yIGFyZSByZW1vdmVkLlxyXG4gICAgICAgICAqIDIuIFRoZSBzdHlsZSBvZiBhbGwgdGFncyBleGNlcHQgdGhlIFwic3BhblwiIHRhZyBpcyByZW1vdmVkIGZyb20gdGhlIGVkaXRvci5cclxuICAgICAgICAgKiBcIm1hbmFnZWRUYWdzSW5mb1wiIHN0cnVjdHVyZSBleDpcclxuICAgICAgICAgKiBtYW5hZ2VkVGFnc0luZm86IHtcclxuICAgICAgICAgKiAgIHF1ZXJ5OiAnLl9fc2VfX3h4eCwgc2UteHh4J1xyXG4gICAgICAgICAqICAgbWFwOiB7XHJcbiAgICAgICAgICogICAgICdfX3NlX194eHgnOiBtZXRob2QuYmluZChjb3JlKSxcclxuICAgICAgICAgKiAgICAgJ3NlLXh4eCc6IG1ldGhvZC5iaW5kKGNvcmUpLFxyXG4gICAgICAgICAqICAgfVxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIERlZmluZSBpbiB0aGUgZm9sbG93aW5nIHJldHVybiBmb3JtYXQgaW4gdGhlIFwibWFuYWdlZFRhZ0luZm9cIiBmdW5jdGlvbiBvZiB0aGUgcGx1Z2luLlxyXG4gICAgICAgICAqIG1hbmFnZWRUYWdJbmZvKCkgPT4ge1xyXG4gICAgICAgICAqICByZXR1cm4ge1xyXG4gICAgICAgICAqICAgIGNsYXNzTmFtZTogJ3N0cmluZycsIC8vIENsYXNzIG5hbWUgdG8gaWRlbnRpZnkgdGhlIHRhZy4gKFwiX19zZV9feHh4XCIsIFwic2UteHh4XCIpXHJcbiAgICAgICAgICogICAgLy8gQ2hhbmdlIHRoZSBodG1sIG9mIHRoZSBcImVsZW1lbnRcIi4gKFwiZWxlbWVudFwiIGlzIHRoZSBlbGVtZW50IGZvdW5kIHdpdGggXCJjbGFzc05hbWVcIi4pXHJcbiAgICAgICAgICogICAgLy8gXCJtZXRob2RcIiBpcyBleGVjdXRlZCBieSBiaW5kaW5nIFwiY29yZVwiLlxyXG4gICAgICAgICAqICAgIG1ldGhvZDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgKiAgICAgIC8vIHRoaXMgPT09IGNvcmVcclxuICAgICAgICAgKiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gLy8gKHJlbmRlcmVkIGh0bWwpO1xyXG4gICAgICAgICAqICAgIH1cclxuICAgICAgICAgKiAgfVxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBtYW5hZ2VkVGFnc0luZm86IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBjYXNoaW5nOiBvcHRpb25zLmNoYXJDb3VudGVyVHlwZSA9PT0gJ2J5dGUtaHRtbCdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jaGFyVHlwZUhUTUw6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXJyYXkgb2YgXCJjaGVja0ZpbGVJbmZvXCIgZnVuY3Rpb25zIHdpdGggdGhlIGNvcmUgYm91bmRcclxuICAgICAgICAgKiAoUGx1Z2lucyB3aXRoIFwiY2hlY2tGaWxlSW5mb1wiIGFuZCBcInJlc2V0RmlsZUluZm9cIiBtZXRob2RzKVxyXG4gICAgICAgICAqIFwiZmlsZUluZm9QbHVnaW5zXCIgcnVucyB0aGUgXCJhZGRcIiBtZXRob2Qgd2hlbiBjcmVhdGluZyB0aGUgZWRpdG9yLlxyXG4gICAgICAgICAqIFwiY2hlY2tGaWxlSW5mb1wiIG1ldGhvZCBpcyBhbHdheXMgY2FsbCBqdXN0IGJlZm9yZSB0aGUgXCJjaGFuZ2VcIiBldmVudC5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9maWxlSW5mb1BsdWdpbnNDaGVjazogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFycmF5IG9mIFwicmVzZXRGaWxlSW5mb1wiIGZ1bmN0aW9ucyB3aXRoIHRoZSBjb3JlIGJvdW5kXHJcbiAgICAgICAgICogKFBsdWdpbnMgd2l0aCBcImNoZWNrRmlsZUluZm9cIiBhbmQgXCJyZXNldEZpbGVJbmZvXCIgbWV0aG9kcylcclxuICAgICAgICAgKiBcImNoZWNrRmlsZUluZm9cIiBtZXRob2QgaXMgYWx3YXlzIGNhbGwganVzdCBiZWZvcmUgdGhlIFwiZnVuY3Rpb25zLnNldE9wdGlvbnNcIiBtZXRob2QuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZmlsZUluZm9QbHVnaW5zUmVzZXQ6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYXJpYWJsZXMgZm9yIGZpbGUgY29tcG9uZW50IG1hbmFnZW1lbnRcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9maWxlTWFuYWdlcjoge1xyXG4gICAgICAgICAgICB0YWdzOiBudWxsLFxyXG4gICAgICAgICAgICByZWdFeHA6IG51bGwsXHJcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nOiBudWxsLFxyXG4gICAgICAgICAgICBwbHVnaW5SZWdFeHA6IG51bGwsXHJcbiAgICAgICAgICAgIHBsdWdpbk1hcDogbnVsbFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlIHRleHQgb3IgY2xhc3NOYW1lIGZvciBlYWNoIHNlbGVjdGlvbiBjaGFuZ2VcclxuICAgICAgICAgKiBBZnRlciBjcmVhdGluZyB0aGUgZWRpdG9yLCBcImFjdGl2ZVBsdWdpbnNcIiBhcmUgYWRkZWQuXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBTVFJPTkcgYm9sZCBidXR0b25cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IFUgdW5kZXJsaW5lIGJ1dHRvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gRU0gaXRhbGljIGJ1dHRvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gREVMIHN0cmlrZSBidXR0b25cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IFNVQiBzdWJzY3JpcHQgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBTVVAgc3VwZXJzY3JpcHQgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBPVVRERU5UIG91dGRlbnQgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBJTkRFTlQgaW5kZW50IGJ1dHRvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbW1hbmRNYXA6IHt9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ1NTIHByb3BlcnRpZXMgcmVsYXRlZCB0byBzdHlsZSB0YWdzIFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NvbW1hbmRNYXBTdHlsZXM6IHtcclxuICAgICAgICAgICAgU1RST05HOiBbJ2ZvbnQtd2VpZ2h0J10sXHJcbiAgICAgICAgICAgIFU6IFsndGV4dC1kZWNvcmF0aW9uJ10sXHJcbiAgICAgICAgICAgIEVNOiBbJ2ZvbnQtc3R5bGUnXSxcclxuICAgICAgICAgICAgREVMOiBbJ3RleHQtZGVjb3JhdGlvbiddXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFN0eWxlIGJ1dHRvbiByZWxhdGVkIHRvIGVkaXQgYXJlYVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gZnVsbFNjcmVlbiBmdWxsU2NyZWVuIGJ1dHRvbiBlbGVtZW50XHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBzaG93QmxvY2tzIHNob3dCbG9ja3MgYnV0dG9uIGVsZW1lbnRcclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IGNvZGVWaWV3IGNvZGVWaWV3IGJ1dHRvbiBlbGVtZW50XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc3R5bGVDb21tYW5kTWFwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jbGVhblN0eWxlUmVnRXhwOiB7XHJcbiAgICAgICAgICAgIGRpdjogbmV3IF93LlJlZ0V4cCgnXFxcXHMqW14tYS16QS1aXSguKylcXFxccyo6W147XSsoPyE7KSonLCAnaWcnKSxcclxuICAgICAgICAgICAgc3BhbjogbmV3IF93LlJlZ0V4cCgnXFxcXHMqW14tYS16QS1aXShmb250LWZhbWlseXxmb250LXNpemV8Y29sb3J8YmFja2dyb3VuZC1jb2xvcilcXFxccyo6W147XSsoPyE7KSonLCAnaWcnKSxcclxuICAgICAgICAgICAgZm9ybWF0OiBuZXcgX3cuUmVnRXhwKCdcXFxccypbXi1hLXpBLVpdKHRleHQtYWxpZ258bWFyZ2luLWxlZnR8bWFyZ2luLXJpZ2h0fHdpZHRofGhlaWdodHxsaW5lLWhlaWdodClcXFxccyo6W147XSsoPyE7KSonLCAnaWcnKSxcclxuICAgICAgICAgICAgZm9udFNpemVVbml0OiBuZXcgX3cuUmVnRXhwKCdcXFxcZCsnICsgb3B0aW9ucy5mb250U2l6ZVVuaXQgKyAnJCcsICdpJyksXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhcmlhYmxlcyB1c2VkIGludGVybmFsbHkgaW4gZWRpdG9yIG9wZXJhdGlvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNDb2RlVmlldyBTdGF0ZSBvZiBjb2RlIHZpZXdcclxuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzRnVsbFNjcmVlbiBTdGF0ZSBvZiBmdWxsIHNjcmVlblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBpbm5lckhlaWdodF9mdWxsU2NyZWVuIElubmVySGVpZ2h0IGluIGVkaXRvciB3aGVuIGluIGZ1bGwgc2NyZWVuXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJlc2l6ZUNsaWVudFkgUmVtZW1iZXIgdGhlIHZlcnRpY2FsIHNpemUgb2YgdGhlIGVkaXRvciBiZWZvcmUgcmVzaXppbmcgdGhlIGVkaXRvciAoVXNlZCB3aGVuIGNhbGN1bGF0aW5nIGR1cmluZyByZXNpemUgb3BlcmF0aW9uKVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0YWJTaXplIEluZGVudCBzaXplIG9mIHRhYiAoNClcclxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gY29kZUluZGVudCBJbmRlbnQgc2l6ZSBvZiBDb2RlIHZpZXcgbW9kZSAoMilcclxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbWluUmVzaXppbmdTaXplIE1pbmltdW0gc2l6ZSBvZiBlZGl0aW5nIGFyZWEgd2hlbiByZXNpemVkIHtOdW1iZXJ9ICguc2Utd3JhcHBlci1pbm5lciB7bWluLWhlaWdodDogNjVweDt9IHx8IDY1KVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGN1cnJlbnROb2RlcyAgQW4gYXJyYXkgb2YgdGhlIGN1cnJlbnQgY3Vyc29yJ3Mgbm9kZSBzdHJ1Y3R1cmVcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF92YXJpYWJsZToge1xyXG4gICAgICAgICAgICBpc0NoYW5nZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc0NvZGVWaWV3OiBmYWxzZSxcclxuICAgICAgICAgICAgaXNGdWxsU2NyZWVuOiBmYWxzZSxcclxuICAgICAgICAgICAgaW5uZXJIZWlnaHRfZnVsbFNjcmVlbjogMCxcclxuICAgICAgICAgICAgcmVzaXplQ2xpZW50WTogMCxcclxuICAgICAgICAgICAgdGFiU2l6ZTogNCxcclxuICAgICAgICAgICAgY29kZUluZGVudDogMixcclxuICAgICAgICAgICAgbWluUmVzaXppbmdTaXplOiB1dGlsLmdldE51bWJlcigoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5zdHlsZS5taW5IZWlnaHQgfHwgJzY1JyksIDApLFxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZXM6IFtdLFxyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZXNNYXA6IFtdLFxyXG4gICAgICAgICAgICBfcmFuZ2U6IG51bGwsXHJcbiAgICAgICAgICAgIF9zZWxlY3Rpb25Ob2RlOiBudWxsLFxyXG4gICAgICAgICAgICBfb3JpZ2luQ3NzVGV4dDogY29udGV4dC5lbGVtZW50LnRvcEFyZWEuc3R5bGUuY3NzVGV4dCxcclxuICAgICAgICAgICAgX2JvZHlPdmVyZmxvdzogJycsXHJcbiAgICAgICAgICAgIF9lZGl0b3JBcmVhT3JpZ2luQ3NzVGV4dDogJycsXHJcbiAgICAgICAgICAgIF93eXNpd3lnT3JpZ2luQ3NzVGV4dDogJycsXHJcbiAgICAgICAgICAgIF9jb2RlT3JpZ2luQ3NzVGV4dDogJycsXHJcbiAgICAgICAgICAgIF9mdWxsU2NyZWVuQXR0cnM6IHtzdGlja3k6IGZhbHNlLCBiYWxsb29uOiBmYWxzZSwgaW5saW5lOiBmYWxzZX0sXHJcbiAgICAgICAgICAgIF9saW5lQnJlYWtDb21wOiBudWxsLFxyXG4gICAgICAgICAgICBfbGluZUJyZWFrRGlyOiAnJ1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUZW1wIHZhcmlhYmxlIGZvciBzZXQgbGluZSBhdHRyc1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2Zvcm1hdEF0dHJzVGVtcDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNhdmUgdGhlIGN1cnJlbnQgYnV0dG9ucyBzdGF0ZXMgdG8gXCJhbGxDb21tYW5kQnV0dG9uc1wiIG9iamVjdFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NhdmVCdXR0b25TdGF0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbENvbW1hbmRCdXR0b25zKSB0aGlzLmFsbENvbW1hbmRCdXR0b25zID0ge307XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QnV0dG9ucyA9IHRoaXMuY29udGV4dC5lbGVtZW50Ll9idXR0b25UcmF5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZS1tZW51LWxpc3QgYnV0dG9uW2RhdGEtZGlzcGxheV0nKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGVsZW1lbnQsIGNvbW1hbmQ7IGkgPCBjdXJyZW50QnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IGN1cnJlbnRCdXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbENvbW1hbmRCdXR0b25zW2NvbW1hbmRdID0gZWxlbWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZWNvdmVyIHRoZSBjdXJyZW50IGJ1dHRvbnMgc3RhdGVzIGZyb20gXCJhbGxDb21tYW5kQnV0dG9uc1wiIG9iamVjdFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3JlY292ZXJCdXR0b25TdGF0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWxsQ29tbWFuZEJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCdXR0b25zID0gdGhpcy5jb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnLnNlLW1lbnUtbGlzdCBidXR0b25bZGF0YS1kaXNwbGF5XScpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGJ1dHRvbiwgY29tbWFuZCwgb2xkQnV0dG9uOyBpIDwgY3VycmVudEJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBjdXJyZW50QnV0dG9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9sZEJ1dHRvbiA9IHRoaXMuYWxsQ29tbWFuZEJ1dHRvbnNbY29tbWFuZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQob2xkQnV0dG9uLCBidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnRvb2xbY29tbWFuZF0pIHRoaXMuY29udGV4dC50b29sW2NvbW1hbmRdID0gb2xkQnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJZiB0aGUgcGx1Z2luIGlzIG5vdCBhZGRlZCwgYWRkIHRoZSBwbHVnaW4gYW5kIGNhbGwgdGhlICdhZGQnIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIElmIHRoZSBwbHVnaW4gaXMgYWRkZWQgY2FsbCBjYWxsQmFjayBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRvIGNhbGxcclxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsQmFja0Z1bmN0aW9uIEZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGFmdGVyIG1vZHVsZSBjYWxsXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IF90YXJnZXQgUGx1Z2luIHRhcmdldCBidXR0b24gKFRoaXMgaXMgbm90IG5lY2Vzc2FyeSBpZiB5b3UgaGF2ZSBhIGJ1dHRvbiBsaXN0IHdoZW4gY3JlYXRpbmcgdGhlIGVkaXRvcilcclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsUGx1Z2luOiBmdW5jdGlvbiAocGx1Z2luTmFtZSwgY2FsbEJhY2tGdW5jdGlvbiwgX3RhcmdldCkge1xyXG4gICAgICAgICAgICBfdGFyZ2V0ID0gX3RhcmdldCB8fCBwbHVnaW5DYWxsQnV0dG9uc1twbHVnaW5OYW1lXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jb3JlLmNhbGxQbHVnaW4uZmFpbF0gVGhlIGNhbGxlZCBwbHVnaW4gZG9lcyBub3QgZXhpc3Qgb3IgaXMgaW4gYW4gaW52YWxpZCBmb3JtYXQuIChwbHVnaW5OYW1lOlwiJyArIHBsdWdpbk5hbWUgKyAnXCIpJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaW5pdFBsdWdpbnNbcGx1Z2luTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luc1twbHVnaW5OYW1lXS5hZGQodGhpcywgX3RhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRQbHVnaW5zW3BsdWdpbk5hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5fdGFyZ2V0UGx1Z2luc1twbHVnaW5OYW1lXSA9PT0gJ29iamVjdCcgJiYgISFfdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRNZW51VGFyZ2V0KHBsdWdpbk5hbWUsIF90YXJnZXQsIHRoaXMuX3RhcmdldFBsdWdpbnNbcGx1Z2luTmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdLmFjdGl2ZSAmJiAhdGhpcy5jb21tYW5kTWFwW3BsdWdpbk5hbWVdICYmICEhX3RhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kTWFwW3BsdWdpbk5hbWVdID0gX3RhcmdldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlUGx1Z2lucy5wdXNoKHBsdWdpbk5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxCYWNrRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIGNhbGxCYWNrRnVuY3Rpb24oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSWYgdGhlIG1vZHVsZSBpcyBub3QgYWRkZWQsIGFkZCB0aGUgbW9kdWxlIGFuZCBjYWxsIHRoZSAnYWRkJyBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG1vZHVsZUFycmF5IG1vZHVsZSBvYmplY3QncyBBcnJheSBbZGlhbG9nLCByZXNpemluZ11cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGRNb2R1bGU6IGZ1bmN0aW9uIChtb2R1bGVBcnJheSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbW9kdWxlQXJyYXkubGVuZ3RoLCBtb2R1bGVOYW1lOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVBcnJheVtpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbnNbbW9kdWxlTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbbW9kdWxlTmFtZV0gPSBtb2R1bGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbml0UGx1Z2luc1ttb2R1bGVOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdFBsdWdpbnNbbW9kdWxlTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wbHVnaW5zW21vZHVsZU5hbWVdLmFkZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5wbHVnaW5zW21vZHVsZU5hbWVdLmFkZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGVkaXRvci1yZWxhdGl2ZSBzY3JvbGwgb2Zmc2V0LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHt0b3AsIGxlZnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0R2xvYmFsU2Nyb2xsT2Zmc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCB0ID0gMCwgbCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBlbCA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhO1xyXG4gICAgICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHQgKz0gZWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgbCArPSBlbC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbCA9IHRoaXMuX3NoYWRvd1Jvb3QgPyB0aGlzLl9zaGFkb3dSb290Lmhvc3QgOiBudWxsO1xyXG4gICAgICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHQgKz0gZWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgbCArPSBlbC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiB0LFxyXG4gICAgICAgICAgICAgICAgbGVmdDogbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIG1hbmFnaW5nIHN1Ym1lbnUgZWxlbWVudC5cclxuICAgICAgICAgKiBZb3UgbXVzdCBhZGQgdGhlIFwic3VibWVudVwiIGVsZW1lbnQgdXNpbmcgdGhlIHRoaXMgbWV0aG9kIGF0IGN1c3RvbSBwbHVnaW4uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gdGFyZ2V0IFRhcmdldCBidXR0b25cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG1lbnUgU3VibWVudSBlbGVtZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdE1lbnVUYXJnZXQ6IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCB0YXJnZXQsIG1lbnUpIHtcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFBsdWdpbnNbcGx1Z2luTmFtZV0gPSBtZW51O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9tZW51VHJheS5hcHBlbmRDaGlsZChtZW51KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFBsdWdpbnNbcGx1Z2luTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVudVRyYXlbdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyldID0gbWVudTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbmFibGUgc3VibWVudVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBTdWJtZW51J3MgYnV0dG9uIGVsZW1lbnQgdG8gY2FsbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1Ym1lbnVPbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmRlZFN1Ym1lbnVPZmYpIHRoaXMuX2JpbmRlZFN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmRDb250cm9sbGVyc09mZikgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3VibWVudU5hbWUgPSB0aGlzLl9zdWJtZW51TmFtZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgY29uc3QgbWVudSA9IHRoaXMuc3VibWVudSA9IHRoaXMuX21lbnVUcmF5W3N1Ym1lbnVOYW1lXTtcclxuICAgICAgICAgICAgdGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fc2V0TWVudVBvc2l0aW9uKGVsZW1lbnQsIG1lbnUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluZGVkU3VibWVudU9mZiA9IHRoaXMuc3VibWVudU9mZi5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdtb3VzZWRvd24nLCB0aGlzLl9iaW5kZWRTdWJtZW51T2ZmLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zW3N1Ym1lbnVOYW1lXS5vbikgdGhpcy5wbHVnaW5zW3N1Ym1lbnVOYW1lXS5vbi5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERpc2FibGUgc3VibWVudVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1Ym1lbnVPZmY6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVEb2NFdmVudCgnbW91c2Vkb3duJywgdGhpcy5fYmluZGVkU3VibWVudU9mZik7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRlZFN1Ym1lbnVPZmYgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3VibWVudSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VibWVudU5hbWUgPSAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VibWVudS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3ModGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uLCAnb24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VibWVudUFjdGl2ZUJ1dHRvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RIaWRlVG9vbGJhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlIG1vcmUgbGF5ZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBtb3JlTGF5ZXJPZmY6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXllciA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykpO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3ModGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uLCAnb24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vcmVMYXllckFjdGl2ZUJ1dHRvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRW5hYmxlIGNvbnRhaW5lclxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBDb250YWluZXIncyBidXR0b24gZWxlbWVudCB0byBjYWxsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udGFpbmVyT246IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9iaW5kZWRDb250YWluZXJPZmYpIHRoaXMuX2JpbmRlZENvbnRhaW5lck9mZigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyTmFtZSA9IHRoaXMuX2NvbnRhaW5lck5hbWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnUgPSB0aGlzLmNvbnRhaW5lciA9IHRoaXMuX21lbnVUcmF5W2NvbnRhaW5lck5hbWVdO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckFjdGl2ZUJ1dHRvbiA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE1lbnVQb3NpdGlvbihlbGVtZW50LCBtZW51KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRlZENvbnRhaW5lck9mZiA9IHRoaXMuY29udGFpbmVyT2ZmLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRG9jRXZlbnQoJ21vdXNlZG93bicsIHRoaXMuX2JpbmRlZENvbnRhaW5lck9mZiwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luc1tjb250YWluZXJOYW1lXS5vbikgdGhpcy5wbHVnaW5zW2NvbnRhaW5lck5hbWVdLm9uLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FudGlCbHVyID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGlzYWJsZSBjb250YWluZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250YWluZXJPZmY6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVEb2NFdmVudCgnbW91c2Vkb3duJywgdGhpcy5fYmluZGVkQ29udGFpbmVyT2ZmKTtcclxuICAgICAgICAgICAgdGhpcy5fYmluZGVkQ29udGFpbmVyT2ZmID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyTmFtZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3ModGhpcy5jb250YWluZXJBY3RpdmVCdXR0b24sICdvbicpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJBY3RpdmVCdXR0b24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbm90SGlkZVRvb2xiYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYW50aUJsdXIgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IHRoZSBtZW51IHBvc2l0aW9uLiAoc3VibWVudSwgY29udGFpbmVyKVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gZWxlbWVudCBCdXR0b24gZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gbWVudSBNZW51IGVsZW1lbnRcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRNZW51UG9zaXRpb246IGZ1bmN0aW9uIChlbGVtZW50LCBtZW51KSB7XHJcbiAgICAgICAgICAgIG1lbnUuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBtZW51LnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgICAgICB1dGlsLmFkZENsYXNzKGVsZW1lbnQsICdvbicpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhciA9IHRoaXMuY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJXID0gdG9vbGJhci5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhck9mZnNldCA9IGV2ZW50Ll9nZXRFZGl0b3JPZmZzZXRzKGNvbnRleHQuZWxlbWVudC50b29sYmFyKTtcclxuICAgICAgICAgICAgY29uc3QgbWVudVcgPSBtZW51Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50Lm9mZnNldExlZnQgKyAzO1xyXG5cclxuICAgICAgICAgICAgLy8gcnRsXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJ0bCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudFcgPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcnRsVyA9IG1lbnVXID4gZWxlbWVudFcgPyBtZW51VyAtIGVsZW1lbnRXIDogMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJ0bEwgPSBydGxXID4gMCA/IDAgOiBlbGVtZW50VyAtIG1lbnVXO1xyXG4gICAgICAgICAgICAgICAgbWVudS5zdHlsZS5sZWZ0ID0gKGwgLSBydGxXICsgcnRsTCkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xiYXJPZmZzZXQubGVmdCA+IGV2ZW50Ll9nZXRFZGl0b3JPZmZzZXRzKG1lbnUpLmxlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZW51LnN0eWxlLmxlZnQgPSAnMHB4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJMZWZ0ID0gdG9vbGJhclcgPD0gbWVudVcgPyAwIDogdG9vbGJhclcgLSAobCArIG1lbnVXKTtcclxuICAgICAgICAgICAgICAgIGlmIChvdmVyTGVmdCA8IDApIG1lbnUuc3R5bGUubGVmdCA9IChsICsgb3ZlckxlZnQpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGVsc2UgbWVudS5zdHlsZS5sZWZ0ID0gbCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdldCBlbGVtZW50IHRvcFxyXG4gICAgICAgICAgICBsZXQgdCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXRFbCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXRFbCAmJiBvZmZzZXRFbCAhPT0gdG9vbGJhcikge1xyXG4gICAgICAgICAgICAgICAgdCArPSBvZmZzZXRFbC5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXRFbCA9IG9mZnNldEVsLm9mZnNldFBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgYnQgPSB0O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNCYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICB0ICs9IHRvb2xiYXIub2Zmc2V0VG9wICsgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0IC09IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgbWVudSBwb3NpdGlvblxyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyVG9wID0gdG9vbGJhck9mZnNldC50b3A7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnVIZWlnaHQgPSBtZW51Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gdGhpcy5nZXRHbG9iYWxTY3JvbGxPZmZzZXQoKS50b3A7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtZW51SGVpZ2h0X2JvdHRvbSA9IF93LmlubmVySGVpZ2h0IC0gKHRvb2xiYXJUb3AgLSBzY3JvbGxUb3AgKyBidCArIGVsZW1lbnQucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICAgICAgICBpZiAobWVudUhlaWdodF9ib3R0b20gPCBtZW51SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWVudVRvcCA9IC0xICogKG1lbnVIZWlnaHQgLSBidCArIDMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zVG9wID0gdG9vbGJhclRvcCAtIHNjcm9sbFRvcCArIG1lbnVUb3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZW51SGVpZ2h0X3RvcCA9IG1lbnVIZWlnaHQgKyAoaW5zVG9wIDwgMCA/IGluc1RvcCA6IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZW51SGVpZ2h0X3RvcCA+IG1lbnVIZWlnaHRfYm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSBtZW51SGVpZ2h0X3RvcCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudVRvcCA9IC0xICogKG1lbnVIZWlnaHRfdG9wIC0gYnQgKyAzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSBtZW51SGVpZ2h0X2JvdHRvbSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudVRvcCA9IGJ0ICsgZWxlbWVudC5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBtZW51LnN0eWxlLnRvcCA9IG1lbnVUb3AgKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVudS5zdHlsZS50b3AgPSAoYnQgKyBlbGVtZW50LnBhcmVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1lbnUuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IGNvbnRyb2xsZXIgYXQgZWRpdG9yIGFyZWEgKGNvbnRyb2xsZXIgZWxlbWVudHMsIGZ1bmN0aW9uLCBcImNvbnRyb2xsZXIgdGFyZ2V0IGVsZW1lbnQoQFJlcXVpcmVkKVwiLCBcImNvbnRyb2xsZXIgbmFtZShAUmVxdWlyZWQpXCIsIGV0Yy4uKVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gYXJndW1lbnRzIGNvbnRyb2xsZXIgZWxlbWVudHMsIGZ1bmN0aW9ucy4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udHJvbGxlcnNPbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmKSB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBhcmc7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghYXJnKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSA9IGFyZztcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyQXJyYXkucHVzaChhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmhhc0NsYXNzKGFyZywgJ3NlLWNvbnRyb2xsZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRyb2xsZXJUYXJnZXQgPSBhcmc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsZUNvbXBvbmVudEluZm8gPSB0aGlzLmdldEZpbGVDb21wb25lbnQoYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhcmcuc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NoYWRvd1Jvb3QgJiYgdGhpcy5fc2hhZG93Um9vdENvbnRyb2xsZXJFdmVudFRhcmdldC5pbmRleE9mKGFyZykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaGFkb3dSb290Q29udHJvbGxlckV2ZW50VGFyZ2V0LnB1c2goYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcnJheS5wdXNoKGFyZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRDb250cm9sbGVyc09mZiA9IHRoaXMuY29udHJvbGxlcnNPZmYuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5hZGREb2NFdmVudCgnbW91c2Vkb3duJywgdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRG9jRXZlbnQoJ2tleWRvd24nLCB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5fYW50aUJsdXIgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMuc2hvd0NvbnRyb2xsZXIgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy5zaG93Q29udHJvbGxlcih0aGlzLmN1cnJlbnRDb250cm9sbGVyTmFtZSwgdGhpcy5jb250cm9sbGVyQXJyYXksIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBIaWRlIGNvbnRyb2xsZXIgYXQgZWRpdG9yIGFyZWEgKGxpbmsgYnV0dG9uLCBpbWFnZSByZXNpemUgYnV0dG9uLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fE1vdXNlRXZlbnR8bnVsbH0gZSBFdmVudCBvYmplY3Qgd2hlbiBjYWxsZWQgZnJvbSBtb3VzZWRvd24gYW5kIGtleWRvd24gZXZlbnRzIHJlZ2lzdGVyZWQgaW4gXCJjb3JlLmNvbnRyb2xsZXJzT25cIlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRyb2xsZXJzT2ZmOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9saW5lQnJlYWtlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSB0aGlzLmNvbnRyb2xsZXJBcnJheS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAmJiBsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRyb2xsZXJBcnJheVtpXS5jb250YWlucyA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLmNvbnRyb2xsZXJBcnJheVtpXS5jb250YWlucyhlLnRhcmdldCkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpblJlZ0V4cC50ZXN0KHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lKSAmJiBlICYmIGUudHlwZSA9PT0gJ2tleWRvd24nICYmIGUua2V5Q29kZSAhPT0gMjcpIHJldHVybjtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX3Quc3R5bGUuZGlzcGxheSA9IGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcl9iLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9saW5lQnJlYWtDb21wID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRyb2xsZXJUYXJnZXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdtb3VzZWRvd24nLCB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdrZXlkb3duJywgdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmKTtcclxuICAgICAgICAgICAgdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRyb2xsZXJBcnJheVtpXSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5jb250cm9sbGVyQXJyYXlbaV0oKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMuY29udHJvbGxlckFycmF5W2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYW50aUJsdXIgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU3BlY2lmeSB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbnRyb2xsZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBjb250cm9sbGVyIENvbnRyb2xsZXIgZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyRWwgRWxlbWVudCB0aGF0IGlzIHRoZSBiYXNpcyBvZiB0aGUgY29udHJvbGxlcidzIHBvc2l0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiBUeXBlIG9mIHBvc2l0aW9uIChcInRvcFwiIHwgXCJib3R0b21cIilcclxuICAgICAgICAgKiBXaGVuIHVzaW5nIHRoZSBcInRvcFwiIHBvc2l0aW9uLCB0aGVyZSBzaG91bGQgbm90IGJlIGFuIGFycm93IG9uIHRoZSBjb250cm9sbGVyLlxyXG4gICAgICAgICAqIFdoZW4gdXNpbmcgdGhlIFwiYm90dG9tXCIgcG9zaXRpb24gdGhlcmUgc2hvdWxkIGJlIGFuIGFycm93IG9uIHRoZSBjb250cm9sbGVyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhZGRPZmZzZXQgVGhlc2UgYXJlIHRoZSBsZWZ0IGFuZCB0b3AgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSBhZGRlZCBzcGVjaWFsbHkuIFxyXG4gICAgICAgICAqIFRoaXMgYXJndW1lbnQgaXMgcmVxdWlyZWQuIC0ge2xlZnQ6IDAsIHRvcDogMH1cclxuICAgICAgICAgKiBQbGVhc2UgZW50ZXIgdGhlIHZhbHVlIGJhc2VkIG9uIGx0ciBtb2RlLlxyXG4gICAgICAgICAqIENhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBpbiBydGwgbW9kZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRDb250cm9sbGVyUG9zaXRpb246IGZ1bmN0aW9uIChjb250cm9sbGVyLCByZWZlckVsLCBwb3NpdGlvbiwgYWRkT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJ0bCkgYWRkT2Zmc2V0LmxlZnQgKj0gLTE7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB1dGlsLmdldE9mZnNldChyZWZlckVsLCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAvLyBIZWlnaHQgdmFsdWUgb2YgdGhlIGFycm93IGVsZW1lbnQgaXMgMTFweFxyXG4gICAgICAgICAgICBjb25zdCB0b3BNYXJnaW4gPSBwb3NpdGlvbiA9PT0gJ3RvcCcgPyAtKGNvbnRyb2xsZXIub2Zmc2V0SGVpZ2h0ICsgMikgOiAocmVmZXJFbC5vZmZzZXRIZWlnaHQgKyAxMik7XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUudG9wID0gKG9mZnNldC50b3AgKyB0b3BNYXJnaW4gKyBhZGRPZmZzZXQudG9wKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsID0gb2Zmc2V0LmxlZnQgLSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnNjcm9sbExlZnQgKyBhZGRPZmZzZXQubGVmdDtcclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlclcgPSBjb250cm9sbGVyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCByZWZlckVsVyA9IHJlZmVyRWwub2Zmc2V0V2lkdGg7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbGxvdyA9IHV0aWwuaGFzQ2xhc3MoY29udHJvbGxlci5maXJzdEVsZW1lbnRDaGlsZCwgJ3NlLWFycm93JykgPyBjb250cm9sbGVyLmZpcnN0RWxlbWVudENoaWxkIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vIHJ0bCAoV2lkdGggdmFsdWUgb2YgdGhlIGFycm93IGVsZW1lbnQgaXMgMjJweClcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucnRsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBydGxXID0gKGNvbnRyb2xsZXJXID4gcmVmZXJFbFcpID8gY29udHJvbGxlclcgLSByZWZlckVsVyA6IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBydGxMID0gcnRsVyA+IDAgPyAwIDogcmVmZXJFbFcgLSBjb250cm9sbGVyVztcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUubGVmdCA9IChsIC0gcnRsVyArIHJ0bEwpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocnRsVyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3cpIGFsbG93LnN0eWxlLmxlZnQgPSAoKGNvbnRyb2xsZXJXIC0gMTQgPCAxMCArIHJ0bFcpID8gKGNvbnRyb2xsZXJXIC0gMTQpIDogKDEwICsgcnRsVykpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVyU2l6ZSA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUub2Zmc2V0TGVmdCAtIGNvbnRyb2xsZXIub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgICAgIGlmIChvdmVyU2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnN0eWxlLmxlZnQgPSAnMHB4JztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3cpIGFsbG93LnN0eWxlLmxlZnQgPSBvdmVyU2l6ZSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnN0eWxlLmxlZnQgPSBsICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVyU2l6ZSA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUub2Zmc2V0V2lkdGggLSAoY29udHJvbGxlci5vZmZzZXRMZWZ0ICsgY29udHJvbGxlclcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJTaXplIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUubGVmdCA9IChjb250cm9sbGVyLm9mZnNldExlZnQgKyBvdmVyU2l6ZSkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvdykgYWxsb3cuc3R5bGUubGVmdCA9ICgyMCAtIG92ZXJTaXplKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvdykgYWxsb3cuc3R5bGUubGVmdCA9ICcyMHB4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGphdmFzY3JpcHQgZXhlY0NvbW1hbmRcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tbWFuZCBqYXZhc2NyaXB0IGV4ZWNDb21tYW5kIGZ1bmN0aW9uIHByb3BlcnR5XHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufHVuZGVmaW5lZH0gc2hvd0RlZmF1bHRVSSBqYXZhc2NyaXB0IGV4ZWNDb21tYW5kIGZ1bmN0aW9uIHByb3BlcnR5XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8dW5kZWZpbmVkfSB2YWx1ZSBqYXZhc2NyaXB0IGV4ZWNDb21tYW5kIGZ1bmN0aW9uIHByb3BlcnR5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjb21tYW5kLCBzaG93RGVmYXVsdFVJLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl93ZC5leGVjQ29tbWFuZChjb21tYW5kLCBzaG93RGVmYXVsdFVJLCAoY29tbWFuZCA9PT0gJ2Zvcm1hdEJsb2NrJyA/ICc8JyArIHZhbHVlICsgJz4nIDogdmFsdWUpKTtcclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRm9jdXMgdG8gd3lzaXd5ZyBhcmVhIHVzaW5nIFwibmF0aXZlIGZvY3VzIGZ1bmN0aW9uXCJcclxuICAgICAgICAgKi9cclxuICAgICAgICBuYXRpdmVGb2N1czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZm9jdXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRm9jdXMgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfX2ZvY3VzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcHRpb24gPSB1dGlsLmdldFBhcmVudEVsZW1lbnQodGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCksICdmaWdjYXB0aW9uJyk7XHJcbiAgICAgICAgICAgIGlmIChjYXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEZvY3VzIHRvIHd5c2l3eWcgYXJlYVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZvY3VzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydENvbnRhaW5lciA9PT0gcmFuZ2UuZW5kQ29udGFpbmVyICYmIHV0aWwuaXNXeXNpd3lnRGl2KHJhbmdlLnN0YXJ0Q29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLmNoaWxkcmVuW3JhbmdlLnN0YXJ0T2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzRm9ybWF0RWxlbWVudChjdXJyZW50Tm9kZSkgJiYgIXV0aWwuaXNDb21wb25lbnQoY3VycmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmluc2VydEJlZm9yZShmb3JtYXQsIGN1cnJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoYnIsIDAsIGJyLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCwgcmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNCYWxsb29uKSBldmVudC5fdG9nZ2xlVG9vbGJhckJhbGxvb24oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSWYgXCJmb2N1c0VsXCIgaXMgYSBjb21wb25lbnQsIHRoZW4gdGhhdCBjb21wb25lbnQgaXMgc2VsZWN0ZWQ7IGlmIGl0IGlzIGEgZm9ybWF0IGVsZW1lbnQsIHRoZSBsYXN0IHRleHQgaXMgc2VsZWN0ZWRcclxuICAgICAgICAgKiBJZiBcImZvY3VzRWRnZVwiIGlzIG51bGwsIHRoZW4gc2VsZWN0ZWQgbGFzdCBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGZvY3VzRWwgRm9jdXMgZWxlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZvY3VzRWRnZTogZnVuY3Rpb24gKGZvY3VzRWwpIHtcclxuICAgICAgICAgICAgaWYgKCFmb2N1c0VsKSBmb2N1c0VsID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcubGFzdEVsZW1lbnRDaGlsZDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnRJbmZvID0gdGhpcy5nZXRGaWxlQ29tcG9uZW50KGZvY3VzRWwpO1xyXG4gICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGZpbGVDb21wb25lbnRJbmZvLnRhcmdldCwgZmlsZUNvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9jdXNFbCkge1xyXG4gICAgICAgICAgICAgICAgZm9jdXNFbCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGZvY3VzRWwsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmb2N1c0VsKSB0aGlzLm5hdGl2ZUZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuc2V0UmFuZ2UoZm9jdXNFbCwgZm9jdXNFbC50ZXh0Q29udGVudC5sZW5ndGgsIGZvY3VzRWwsIGZvY3VzRWwudGV4dENvbnRlbnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBGb2N1c291dCB0byB3eXNpd3lnIGFyZWEgKC5ibHVyKCkpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYmx1cjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuYmx1cigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuYmx1cigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCBjdXJyZW50IGVkaXRvcidzIHJhbmdlIG9iamVjdCBhbmQgcmV0dXJuLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gc3RhcnRDb24gVGhlIHN0YXJ0Q29udGFpbmVyIHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydE9mZiBUaGUgc3RhcnRPZmZzZXQgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBlbmRDb24gVGhlIGVuZENvbnRhaW5lciBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kT2ZmIFRoZSBlbmRPZmZzZXQgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gUmFuZ2Ugb2JqZWN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJhbmdlOiBmdW5jdGlvbiAoc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZikge1xyXG4gICAgICAgICAgICBpZiAoIXN0YXJ0Q29uIHx8ICFlbmRDb24pIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0T2ZmID4gc3RhcnRDb24udGV4dENvbnRlbnQubGVuZ3RoKSBzdGFydE9mZiA9IHN0YXJ0Q29uLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGVuZE9mZiA+IGVuZENvbi50ZXh0Q29udGVudC5sZW5ndGgpIGVuZE9mZiA9IGVuZENvbi50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gc3RhcnRDb24uY2hpbGROb2Rlc1tzdGFydE9mZl0gfHwgc3RhcnRDb24uY2hpbGROb2Rlc1tzdGFydE9mZiAtIDFdIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgc3RhcnRPZmYgPSBzdGFydE9mZiA+IDAgPyBzdGFydENvbi5ub2RlVHlwZSA9PT0gMSA/IDEgOiBzdGFydENvbi50ZXh0Q29udGVudCA/IHN0YXJ0Q29uLnRleHRDb250ZW50Lmxlbmd0aCA6IDAgOiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChlbmRDb24pKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRDb24gPSBlbmRDb24uY2hpbGROb2Rlc1tlbmRPZmZdIHx8IGVuZENvbi5jaGlsZE5vZGVzW2VuZE9mZiAtIDFdIHx8IGVuZENvbjtcclxuICAgICAgICAgICAgICAgIGVuZE9mZiA9IGVuZE9mZiA+IDAgPyBlbmRDb24ubm9kZVR5cGUgPT09IDEgPyAxIDogZW5kQ29uLnRleHRDb250ZW50ID8gZW5kQ29uLnRleHRDb250ZW50Lmxlbmd0aCA6IDAgOiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuX3dkLmNyZWF0ZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRDb24sIHN0YXJ0T2ZmKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChlbmRDb24sIGVuZE9mZik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuY29yZS5mb2N1cy5lcnJvcl0gJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy5nZXRTZWxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JhbmdlSW5mbyhyYW5nZSwgdGhpcy5nZXRTZWxlY3Rpb24oKSk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkgdGhpcy5fX2ZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSByYW5nZSBvYmplY3QgYW5kIGJ1dHRvbiBlZmZlY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVSYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fcmFuZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0ZvY3VzKSB0aGlzLmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRLZXlFZmZlY3QoW10pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgY3VycmVudCBlZGl0b3IncyByYW5nZSBvYmplY3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFJhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5fdmFyaWFibGUuX3JhbmdlIHx8IHRoaXMuX2NyZWF0ZURlZmF1bHRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkID09PSBzZWxlY3Rpb24uaXNDb2xsYXBzZWQgfHwgIWNvbnRleHQuZWxlbWVudC53eXNpd3lnLmNvbnRhaW5zKHNlbGVjdGlvbi5mb2N1c05vZGUpKSByZXR1cm4gcmFuZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92YXJpYWJsZS5fcmFuZ2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzYyA9IHNlbGVjdGlvbi5hbmNob3JOb2RlLCBlYyA9IHNlbGVjdGlvbi5mb2N1c05vZGUsIHNvID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldCwgZW8gPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wYXJlVmFsdWUgPSB1dGlsLmNvbXBhcmVFbGVtZW50cyhzYywgZWMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHREaXIgPSBjb21wYXJlVmFsdWUuYW5jZXN0b3IgJiYgKGNvbXBhcmVWYWx1ZS5yZXN1bHQgPT09IDAgPyBzbyA8PSBlbyA6IGNvbXBhcmVWYWx1ZS5yZXN1bHQgPiAxID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0RGlyID8gc2MgOiBlYyxcclxuICAgICAgICAgICAgICAgICAgICByaWdodERpciA/IHNvIDogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHREaXIgPyBlYyA6IHNjLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0RGlyID8gZW8gOiBzb1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJZiB0aGUgXCJyYW5nZVwiIG9iamVjdCBpcyBhIG5vbi1lZGl0YWJsZSBhcmVhLCBhZGQgYSBsaW5lIGF0IHRoZSB0b3Agb2YgdGhlIGVkaXRvciBhbmQgdXBkYXRlIHRoZSBcInJhbmdlXCIgb2JqZWN0LlxyXG4gICAgICAgICAqIFJldHVybnMgYSBuZXcgXCJyYW5nZVwiIG9yIGFyZ3VtZW50IFwicmFuZ2VcIi5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmFuZ2UgY29yZS5nZXRSYW5nZSgpXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGNvbnRhaW5lciBJZiB0aGVyZSBpcyBcImNvbnRhaW5lclwiIGFyZ3VtZW50LCBpdCBjcmVhdGVzIGEgbGluZSBpbiBmcm9udCBvZiB0aGUgY29udGFpbmVyLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHJhbmdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0UmFuZ2VfYWRkTGluZTogZnVuY3Rpb24gKHJhbmdlLCBjb250YWluZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGlvblZvaWQocmFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcCA9IHV0aWwuY3JlYXRlRWxlbWVudChvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgb3AuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgd3lzaXd5Zy5pbnNlcnRCZWZvcmUob3AsIGNvbnRhaW5lciAmJiBjb250YWluZXIgIT09IHd5c2l3eWcgPyBjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nIDogd3lzaXd5Zy5maXJzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9wLmZpcnN0RWxlbWVudENoaWxkLCAwLCBvcC5maXJzdEVsZW1lbnRDaGlsZCwgMSk7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuX3ZhcmlhYmxlLl9yYW5nZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCB3aW5kb3cgc2VsZWN0aW9uIG9iZWpjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0U2VsZWN0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuX3NoYWRvd1Jvb3QgJiYgdGhpcy5fc2hhZG93Um9vdC5nZXRTZWxlY3Rpb24gPyB0aGlzLl9zaGFkb3dSb290LmdldFNlbGVjdGlvbigpIDogdGhpcy5fd3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fdmFyaWFibGUuX3JhbmdlICYmICFjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5jb250YWlucyhzZWxlY3Rpb24uZm9jdXNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHRoaXMuX2NyZWF0ZURlZmF1bHRSYW5nZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgY3VycmVudCBzZWxlY3Qgbm9kZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtOb2RlfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFNlbGVjdGlvbk5vZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5jb250YWlucyh0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSkpIHRoaXMuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fdmFyaWFibGUuX3NlbGVjdGlvbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbk5vZGUgPSB1dGlsLmdldENoaWxkRWxlbWVudChjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5maXJzdENoaWxkLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCB8fCBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSA9IHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhcmlhYmxlLl9zZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTYXZpbmcgdGhlIHJhbmdlIG9iamVjdCBhbmQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBub2RlIG9mIGVkaXRvclxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2VkaXRvclJhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsID0gdGhpcy5fd2QuYWN0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNJbnB1dEVsZW1lbnQoYWN0aXZlRWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSA9IGFjdGl2ZUVsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUVsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGVjdGlvbikgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGxldCByYW5nZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLl9jcmVhdGVEZWZhdWx0UmFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmFuZ2VJbmZvKHJhbmdlLCBzZWxlY3Rpb24pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgXCJyYW5nZVwiIGFuZCBcInNlbGVjdGlvblwiIGluZm8uXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHJhbmdlIHJhbmdlIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VsZWN0aW9uIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3JhbmdlSW5mbzogZnVuY3Rpb24gKHJhbmdlLCBzZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGlvbk5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fcmFuZ2UgPSByYW5nZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHNlbGVjdGlvbk5vZGUgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5jaGlsZHJlbltyYW5nZS5zdGFydE9mZnNldF0gfHwgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHNlbGVjdGlvbk5vZGUgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb24uZXh0ZW50Tm9kZSB8fCBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX3NlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm4gdGhlIHJhbmdlIG9iamVjdCBvZiBlZGl0b3IncyBmaXJzdCBjaGlsZCBub2RlXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jcmVhdGVEZWZhdWx0UmFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3Qgd3lzaXd5ZyA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuX3dkLmNyZWF0ZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgZmlyc3RGb3JtYXQgPSB3eXNpd3lnLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICBsZXQgZm9jdXNFbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghZmlyc3RGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGZpcnN0Rm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICBmb2N1c0VsID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgZmlyc3RGb3JtYXQuYXBwZW5kQ2hpbGQoZm9jdXNFbCk7XHJcbiAgICAgICAgICAgICAgICB3eXNpd3lnLmFwcGVuZENoaWxkKGZpcnN0Rm9ybWF0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvY3VzRWwgPSBmaXJzdEZvcm1hdC5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmb2N1c0VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNFbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdEZvcm1hdC5hcHBlbmRDaGlsZChmb2N1c0VsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoZm9jdXNFbCwgMCk7XHJcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZChmb2N1c0VsLCAwKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIG5vIHZhbGlkIFwic2VsZWN0aW9uXCIuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHJhbmdlIGNvcmUuZ2V0UmFuZ2UoKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHJhbmdlXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2VsZWN0aW9uVm9pZDogZnVuY3Rpb24gKHJhbmdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW0gPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgcmV0dXJuICh1dGlsLmlzV3lzaXd5Z0RpdihyYW5nZS5zdGFydENvbnRhaW5lcikgJiYgdXRpbC5pc1d5c2l3eWdEaXYocmFuZ2UuZW5kQ29udGFpbmVyKSkgfHwgL0ZJR1VSRS9pLnRlc3QoY29tbS5ub2RlTmFtZSkgfHwgdGhpcy5fZmlsZU1hbmFnZXIucmVnRXhwLnRlc3QoY29tbS5ub2RlTmFtZSkgfHwgdXRpbC5pc01lZGlhQ29tcG9uZW50KGNvbW0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCByYW5nZSBvYmplY3QgdG8gdGV4dCBub2RlIHNlbGVjdGVkIHN0YXR1cy5cclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBmYWxzZSBpZiB0aGVyZSBpcyBubyB2YWxpZCBzZWxlY3Rpb24uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVzZXRSYW5nZVRvVGV4dE5vZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25Wb2lkKHJhbmdlKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgdGVtcENvbiwgdGVtcE9mZnNldCwgdGVtcENoaWxkO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KHN0YXJ0Q29uKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdGFydENvbi5jaGlsZE5vZGVzW3N0YXJ0T2ZmXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gc3RhcnRDb24ubGFzdENoaWxkIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZmID0gc3RhcnRDb24udGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydENvbiA9IHN0YXJ0Q29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZmID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHdoaWxlIChzdGFydENvbiAmJiBzdGFydENvbi5ub2RlVHlwZSA9PT0gMSAmJiBzdGFydENvbi5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb24gPSBzdGFydENvbi5maXJzdENoaWxkIHx8IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZmID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoZW5kQ29uKSkge1xyXG4gICAgICAgICAgICAgICAgZW5kQ29uID0gZW5kQ29uLmNoaWxkTm9kZXNbZW5kT2ZmXSB8fCBlbmRDb24ubGFzdENoaWxkIHx8IGVuZENvbjtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChlbmRDb24gJiYgZW5kQ29uLm5vZGVUeXBlID09PSAxICYmIGVuZENvbi5sYXN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb24gPSBlbmRDb24ubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZW5kT2ZmID0gZW5kQ29uLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc3RhcnRDb250YWluZXJcclxuICAgICAgICAgICAgdGVtcENvbiA9IHV0aWwuaXNXeXNpd3lnRGl2KHN0YXJ0Q29uKSA/IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmZpcnN0Q2hpbGQgOiBzdGFydENvbjtcclxuICAgICAgICAgICAgdGVtcE9mZnNldCA9IHN0YXJ0T2ZmO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayh0ZW1wQ29uKSB8fCAodGVtcENvbi5ub2RlVHlwZSA9PT0gMSAmJiB0ZW1wQ29uLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlCcmVhayA9IHV0aWwuaXNCcmVhayh0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgIGlmICghb25seUJyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRlbXBDb24gJiYgIXV0aWwuaXNCcmVhayh0ZW1wQ29uKSAmJiB0ZW1wQ29uLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb24gPSB0ZW1wQ29uLmNoaWxkTm9kZXNbdGVtcE9mZnNldF0gfHwgdGVtcENvbi5uZXh0RWxlbWVudFNpYmxpbmcgfHwgdGVtcENvbi5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRlbXBDb24sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdCwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0ZW1wQ29uLCB1dGlsLmlzQ2VsbCkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZm9ybWF0LCB0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHRlbXBDb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1wdHlUZXh0ID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVtcHR5VGV4dCwgdGVtcENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcENvbiA9IGVtcHR5VGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob25seUJyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbiA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRDb24gPSB0ZW1wQ29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kT2ZmID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHN0YXJ0Q29udGFpbmVyXHJcbiAgICAgICAgICAgIHN0YXJ0Q29uID0gdGVtcENvbjtcclxuICAgICAgICAgICAgc3RhcnRPZmYgPSB0ZW1wT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgIHRlbXBDb24gPSB1dGlsLmlzV3lzaXd5Z0RpdihlbmRDb24pID8gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcubGFzdENoaWxkIDogZW5kQ29uO1xyXG4gICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gZW5kT2ZmO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayh0ZW1wQ29uKSB8fCAodGVtcENvbi5ub2RlVHlwZSA9PT0gMSAmJiB0ZW1wQ29uLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9ubHlCcmVhayA9IHV0aWwuaXNCcmVhayh0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgIGlmICghb25seUJyZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRlbXBDb24gJiYgIXV0aWwuaXNCcmVhayh0ZW1wQ29uKSAmJiB0ZW1wQ29uLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDaGlsZCA9IHRlbXBDb24uY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBDaGlsZC5sZW5ndGggPT09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uID0gdGVtcENoaWxkW3RlbXBPZmZzZXQgPiAwID8gdGVtcE9mZnNldCAtIDEgOiB0ZW1wT2Zmc2V0XSB8fCAhL0ZJR1VSRS9pLnRlc3QodGVtcENoaWxkWzBdLm5vZGVOYW1lKSA/IHRlbXBDaGlsZFswXSA6ICh0ZW1wQ29uLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgdGVtcENvbi5wcmV2aW91c1NpYmxpbmcgfHwgc3RhcnRDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gdGVtcE9mZnNldCA+IDAgPyB0ZW1wQ29uLnRleHRDb250ZW50Lmxlbmd0aCA6IHRlbXBPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRlbXBDb24sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdCwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KHV0aWwuaXNDZWxsKGZvcm1hdCkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZm9ybWF0LCB0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHRlbXBDb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1wdHlUZXh0ID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVtcHR5VGV4dCwgdGVtcENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcENvbiA9IGVtcHR5VGV4dDtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob25seUJyZWFrICYmICF0ZW1wQ29uLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZW5kQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBlbmRDb250YWluZXJcclxuICAgICAgICAgICAgZW5kQ29uID0gdGVtcENvbjtcclxuICAgICAgICAgICAgZW5kT2ZmID0gdGVtcE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBSYW5nZVxyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKHN0YXJ0Q29uLCBzdGFydE9mZiwgZW5kQ29uLCBlbmRPZmYpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBhIFwiZm9ybWF0RWxlbWVudFwiKHV0aWwuaXNGb3JtYXRFbGVtZW50KSBhcnJheSBmcm9tIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmFuZ2UuXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB2YWxpZGF0aW9uIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uLiAoUmVwbGFjZXMgdGhlIGRlZmF1bHQgdmFsaWRhdGlvbiBmdW5jdGlvbi11dGlsLmlzRm9ybWF0RWxlbWVudChjdXJyZW50KSlcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0U2VsZWN0ZWRFbGVtZW50czogZnVuY3Rpb24gKHZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9yZXNldFJhbmdlVG9UZXh0Tm9kZSgpKSByZXR1cm4gW107XHJcbiAgICAgICAgICAgIGxldCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihyYW5nZS5zdGFydENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSByZXR1cm4gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGNoaWxkcmVuWzBdLCAwLCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dENvbnRlbnQudHJpbSgpLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRDb24gPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3QgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBjb21tb25Db24gPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIC8vIGdldCBsaW5lIG5vZGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVOb2RlcyA9IHV0aWwuZ2V0TGlzdENoaWxkcmVuKGNvbW1vbkNvbiwgZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0aW9uID8gdmFsaWRhdGlvbihjdXJyZW50KSA6IHV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1d5c2l3eWdEaXYoY29tbW9uQ29uKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24pKSBsaW5lTm9kZXMudW5zaGlmdCh1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29tbW9uQ29uLCBudWxsKSk7XHJcbiAgICAgICAgICAgIGlmIChzdGFydENvbiA9PT0gZW5kQ29uIHx8IGxpbmVOb2Rlcy5sZW5ndGggPT09IDEpIHJldHVybiBsaW5lTm9kZXM7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnRMaW5lID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHN0YXJ0Q29uLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IGVuZExpbmUgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoZW5kQ29uLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0SWR4ID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IGVuZElkeCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvbmx5VGFibGUgPSBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNUYWJsZShjdXJyZW50KSA/IC9eVEFCTEUkL2kudGVzdChjdXJyZW50Lm5vZGVOYW1lKSA6IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnRSYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoc3RhcnRMaW5lLCBvbmx5VGFibGUpO1xyXG4gICAgICAgICAgICBsZXQgZW5kUmFuZ2VFbCA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGVuZExpbmUsIG9ubHlUYWJsZSk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVGFibGUoc3RhcnRSYW5nZUVsKSAmJiB1dGlsLmlzTGlzdENlbGwoc3RhcnRSYW5nZUVsLnBhcmVudE5vZGUpKSBzdGFydFJhbmdlRWwgPSBzdGFydFJhbmdlRWwucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNUYWJsZShlbmRSYW5nZUVsKSAmJiB1dGlsLmlzTGlzdENlbGwoZW5kUmFuZ2VFbC5wYXJlbnROb2RlKSkgZW5kUmFuZ2VFbCA9IGVuZFJhbmdlRWwucGFyZW50Tm9kZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNhbWVSYW5nZSA9IHN0YXJ0UmFuZ2VFbCA9PT0gZW5kUmFuZ2VFbDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmVOb2Rlcy5sZW5ndGgsIGxpbmU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IGxpbmVOb2Rlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRMaW5lID09PSBsaW5lIHx8ICghc2FtZVJhbmdlICYmIGxpbmUgPT09IHN0YXJ0UmFuZ2VFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydElkeCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVuZExpbmUgPT09IGxpbmUgfHwgKCFzYW1lUmFuZ2UgJiYgbGluZSA9PT0gZW5kUmFuZ2VFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRJZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhcnRJZHggPT09IG51bGwpIHN0YXJ0SWR4ID0gMDtcclxuICAgICAgICAgICAgaWYgKGVuZElkeCA9PT0gbnVsbCkgZW5kSWR4ID0gbGluZU5vZGVzLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbGluZU5vZGVzLnNsaWNlKHN0YXJ0SWR4LCBlbmRJZHggKyAxKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IGZvcm1hdCBlbGVtZW50cyBhbmQgY29tcG9uZW50cyBmcm9tIHRoZSBzZWxlY3RlZCBhcmVhLiAoUCwgRElWLCBIWzEtNl0sIE9MLCBVTCwgVEFCTEUuLilcclxuICAgICAgICAgKiBJZiBzb21lIG9mIHRoZSBjb21wb25lbnQgYXJlIGluY2x1ZGVkIGluIHRoZSBzZWxlY3Rpb24sIGdldCB0aGUgZW50aXJlIHRoYXQgY29tcG9uZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlRHVwbGljYXRlIElmIHRydWUsIGlmIHRoZXJlIGlzIGEgcGFyZW50IGFuZCBjaGlsZCB0YWcgYW1vbmcgdGhlIHNlbGVjdGVkIGVsZW1lbnRzLCB0aGUgY2hpbGQgdGFnIGlzIGV4Y2x1ZGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRTZWxlY3RlZEVsZW1lbnRzQW5kQ29tcG9uZW50czogZnVuY3Rpb24gKHJlbW92ZUR1cGxpY2F0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb21tb25Db24gPSB0aGlzLmdldFJhbmdlKCkuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IG15Q29tcG9uZW50ID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGNvbW1vbkNvbiwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkTGluZXMgPSB1dGlsLmlzVGFibGUoY29tbW9uQ29uKSA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMobnVsbCkgOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5nZXRQYXJlbnRFbGVtZW50KGN1cnJlbnQsIHRoaXMuaXNDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudCkgJiYgKCFjb21wb25lbnQgfHwgY29tcG9uZW50ID09PSBteUNvbXBvbmVudCkpIHx8ICh0aGlzLmlzQ29tcG9uZW50KGN1cnJlbnQpICYmICF0aGlzLmdldEZvcm1hdEVsZW1lbnQoY3VycmVudCkpO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHV0aWwpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZW1vdmVEdXBsaWNhdGUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgLSAxOyBqID49IDA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRMaW5lc1tqXS5jb250YWlucyhzZWxlY3RlZExpbmVzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRMaW5lcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLS07IGxlbi0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZExpbmVzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmUgaWYgdGhpcyBvZmZzZXQgaXMgdGhlIGVkZ2Ugb2Zmc2V0IG9mIGNvbnRhaW5lclxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gY29udGFpbmVyIFRoZSBub2RlIG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LiAocmFuZ2Uuc3RhcnRDb250YWluZXIuLilcclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuIChjb3JlLmdldFJhbmdlKCkuc3RhcnRPZmZzZXQuLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8dW5kZWZpbmVkfSBkaXIgU2VsZWN0IGNoZWNrIHBvaW50IC0gQm90aCBlZGdlLCBGcm9udCBlZGdlIG9yIEVuZCBlZGdlLiAoXCJmcm9udFwiOiBGcm9udCBlZGdlLCBcImVuZFwiOiBFbmQgZWRnZSwgdW5kZWZpbmVkOiBCb3RoIGVkZ2UpXHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNFZGdlUG9pbnQ6IGZ1bmN0aW9uIChjb250YWluZXIsIG9mZnNldCwgZGlyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZGlyICE9PSAnZW5kJyAmJiBvZmZzZXQgPT09IDApIHx8ICgoIWRpciB8fCBkaXIgIT09ICdmcm9udCcpICYmICFjb250YWluZXIubm9kZVZhbHVlICYmIG9mZnNldCA9PT0gMSkgfHwgKCghZGlyIHx8IGRpciA9PT0gJ2VuZCcpICYmICEhY29udGFpbmVyLm5vZGVWYWx1ZSAmJiBvZmZzZXQgPT09IGNvbnRhaW5lci5ub2RlVmFsdWUubGVuZ3RoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBhbmQgb2Zmc2V0IHZhbHVlcyBhcmUgdGhlIGVkZ2VzIG9mIHRoZSBmb3JtYXQgdGFnXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBjb250YWluZXIgVGhlIG5vZGUgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuIChyYW5nZS5zdGFydENvbnRhaW5lci4uKVxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC4gKGNvcmUuZ2V0UmFuZ2UoKS5zdGFydE9mZnNldC4uLilcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyIFNlbGVjdCBjaGVjayBwb2ludCAtIFwiZnJvbnRcIjogRnJvbnQgZWRnZSwgXCJlbmRcIjogRW5kIGVkZ2UsIHVuZGVmaW5lZDogQm90aCBlZGdlLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheXxudWxsfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lzRWRnZUZvcm1hdDogZnVuY3Rpb24gKG5vZGUsIG9mZnNldCwgZGlyKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0VkZ2VQb2ludChub2RlLCBvZmZzZXQsIGRpcikpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBkaXIgPSBkaXIgPT09ICdmcm9udCcgPyAncHJldmlvdXNTaWJsaW5nJyA6ICduZXh0U2libGluZyc7XHJcbiAgICAgICAgICAgIHdoaWxlIChub2RlICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChub2RlKSAmJiAhdXRpbC5pc1d5c2l3eWdEaXYobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbm9kZVtkaXJdIHx8ICh1dGlsLmlzQnJlYWsobm9kZVtkaXJdKSAmJiAhbm9kZVtkaXJdW2Rpcl0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHJlc3VsdC5wdXNoKG5vZGUuY2xvbmVOb2RlKGZhbHNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgbG9hZGluZyBib3hcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93TG9hZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xvc2UgbG9hZGluZyBib3hcclxuICAgICAgICAgKi9cclxuICAgICAgICBjbG9zZUxvYWRpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxvYWRpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXBwZW5kIGZvcm1hdCBlbGVtZW50IHRvIHNpYmxpbmcgbm9kZSBvZiBhcmd1bWVudCBlbGVtZW50LlxyXG4gICAgICAgICAqIElmIHRoZSBcImZvcm1hdE5vZGVOYW1lXCIgYXJndW1lbnQgdmFsdWUgaXMgcHJlc2VudCwgdGhlIHRhZyBvZiB0aGF0IGFyZ3VtZW50IHZhbHVlIGlzIGluc2VydGVkLFxyXG4gICAgICAgICAqIElmIG5vdCwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBmb3JtYXQgdGFnIGlzIGluc2VydGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBJbnNlcnQgYXMgc2libGluZ3Mgb2YgdGhhdCBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudHxudWxsfSBmb3JtYXROb2RlIE5vZGUgbmFtZSBvciBub2RlIG9iZWpjdCB0byBiZSBpbnNlcnRlZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtFbGVtZW50fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFwcGVuZEZvcm1hdFRhZzogZnVuY3Rpb24gKGVsZW1lbnQsIGZvcm1hdE5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudE5vZGUpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IG9Gb3JtYXQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KGVsZW1lbnQpICYmIHV0aWwuaXNGcmVlRm9ybWF0RWxlbWVudChjdXJyZW50Rm9ybWF0RWwgfHwgZWxlbWVudC5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgb0Zvcm1hdCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9Gb3JtYXROYW1lID0gZm9ybWF0Tm9kZSA/ICh0eXBlb2YgZm9ybWF0Tm9kZSA9PT0gJ3N0cmluZycgPyBmb3JtYXROb2RlIDogZm9ybWF0Tm9kZS5ub2RlTmFtZSkgOiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudEZvcm1hdEVsKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50Rm9ybWF0RWwpICYmICF1dGlsLmlzRnJlZUZvcm1hdEVsZW1lbnQoY3VycmVudEZvcm1hdEVsKSkgPyBjdXJyZW50Rm9ybWF0RWwubm9kZU5hbWUgOiBvcHRpb25zLmRlZmF1bHRUYWc7XHJcbiAgICAgICAgICAgICAgICBvRm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9Gb3JtYXROYW1lKTtcclxuICAgICAgICAgICAgICAgIG9Gb3JtYXQuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgaWYgKChmb3JtYXROb2RlICYmIHR5cGVvZiBmb3JtYXROb2RlICE9PSAnc3RyaW5nJykgfHwgKCFmb3JtYXROb2RlICYmIHV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnRGb3JtYXRFbCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhvRm9ybWF0LCBmb3JtYXROb2RlIHx8IGN1cnJlbnRGb3JtYXRFbCwgWydpZCddKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNDZWxsKGVsZW1lbnQpKSBlbGVtZW50Lmluc2VydEJlZm9yZShvRm9ybWF0LCBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgIGVsc2UgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvRm9ybWF0LCBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gb0Zvcm1hdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIG1ldGhvZCB0byBpbnNlcnQgYSBlbGVtZW50IGFuZCByZXR1cm4uICh1c2VkIGVsZW1lbnRzIDogdGFibGUsIGhyLCBpbWFnZSwgdmlkZW8pXHJcbiAgICAgICAgICogSWYgXCJlbGVtZW50XCIgaXMgXCJIUlwiLCBpbnNlcnQgYW5kIHJldHVybiB0aGUgbmV3IGxpbmUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gYmUgaW5zZXJ0ZWRcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG5vdEhpc3RvcnlQdXNoIFdoZW4gdHJ1ZSwgaXQgZG9lcyBub3QgdXBkYXRlIHRoZSBoaXN0b3J5IHN0YWNrIGFuZCB0aGUgc2VsZWN0aW9uIG9iamVjdCBhbmQgcmV0dXJuIEVkZ2VOb2RlcyAodXRpbC5nZXRFZGdlQ2hpbGROb2RlcylcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrQ2hhckNvdW50IElmIHRydWUsIGlmIFwib3B0aW9ucy5tYXhDaGFyQ291bnRcIiBpcyBleGNlZWRlZCB3aGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBudWxsIGlzIHJldHVybmVkIHdpdGhvdXQgYWRkaXRpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBub3RTZWxlY3QgSWYgdHJ1ZSwgRG8gbm90IGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBpbnNlcnRlZCBjb21wb25lbnQuXHJcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0Q29tcG9uZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgbm90SGlzdG9yeVB1c2gsIGNoZWNrQ2hhckNvdW50LCBub3RTZWxlY3QpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWFkT25seSB8fCAoY2hlY2tDaGFyQ291bnQgJiYgIXRoaXMuY2hlY2tDaGFyQ291bnQoZWxlbWVudCwgbnVsbCkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgciA9IHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmdldFJhbmdlX2FkZExpbmUodGhpcy5nZXRSYW5nZSgpLCByLmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIGxldCBvTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gdGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcbiAgICAgICAgICAgIGxldCBmb3JtYXRFbCA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZm9ybWF0RWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydE5vZGUoZWxlbWVudCwgc2VsZWN0aW9uTm9kZSA9PT0gZm9ybWF0RWwgPyBudWxsIDogci5jb250YWluZXIubmV4dFNpYmxpbmcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5uZXh0U2libGluZykgZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRSYW5nZSgpLmNvbGxhcHNlZCAmJiAoci5jb250YWluZXIubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKHIuY29udGFpbmVyKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXB0aEZvcm1hdCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChyLmNvbnRhaW5lciwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMuaXNSYW5nZUZvcm1hdEVsZW1lbnQoY3VycmVudCk7IH0uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUgPSB1dGlsLnNwbGl0RWxlbWVudChyLmNvbnRhaW5lciwgci5vZmZzZXQsICFkZXB0aEZvcm1hdCA/IDAgOiB1dGlsLmdldEVsZW1lbnREZXB0aChkZXB0aEZvcm1hdCkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob05vZGUpIGZvcm1hdEVsID0gb05vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnROb2RlKGVsZW1lbnQsIHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwpID8gbnVsbCA6IGZvcm1hdEVsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RWwgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoZm9ybWF0RWwpKSB1dGlsLnJlbW92ZUl0ZW0oZm9ybWF0RWwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW5vdFNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShlbGVtZW50LCAwLCBlbGVtZW50LCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29tcG9uZW50SW5mbyA9IHRoaXMuZ2V0RmlsZUNvbXBvbmVudChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGZpbGVDb21wb25lbnRJbmZvLnRhcmdldCwgZmlsZUNvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9Ob2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUgPSB1dGlsLmdldEVkZ2VDaGlsZE5vZGVzKG9Ob2RlLCBudWxsKS5zYyB8fCBvTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9Ob2RlLCAwLCBvTm9kZSwgMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgaWYgKCFub3RIaXN0b3J5UHVzaCkgdGhpcy5oaXN0b3J5LnB1c2goMSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gb05vZGUgfHwgZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgZmlsZSBjb21wb25lbnQgYW5kIHRoYXQgcGx1Z2luIG5hbWVcclxuICAgICAgICAgKiByZXR1cm46IHt0YXJnZXQsIGNvbXBvbmVudCwgcGx1Z2luTmFtZX0gfCBudWxsXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRhcmdldCBlbGVtZW50IChmaWd1cmUgdGFnLCBjb21wb25lbnQgZGl2LCBmaWxlIHRhZylcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RmlsZUNvbXBvbmVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9maWxlTWFuYWdlci5xdWVyeVN0cmluZyB8fCAhZWxlbWVudCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0LCBwbHVnaW5OYW1lO1xyXG4gICAgICAgICAgICBpZiAoL15GSUdVUkUkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSB8fCAvc2UtY29tcG9uZW50Ly50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2ZpbGVNYW5hZ2VyLnF1ZXJ5U3RyaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRhcmdldCAmJiBlbGVtZW50Lm5vZGVOYW1lICYmIHRoaXMuX2ZpbGVNYW5hZ2VyLnJlZ0V4cC50ZXN0KGVsZW1lbnQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW5OYW1lID0gdGhpcy5fZmlsZU1hbmFnZXIucGx1Z2luTWFwW3RhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5OYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdXRpbC5nZXRQYXJlbnRFbGVtZW50KHRhcmdldCwgdXRpbC5pc0NvbXBvbmVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbk5hbWU6IHBsdWdpbk5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIGNvbXBvbmVudChpbWFnZSwgdmlkZW8pIGlzIHNlbGVjdGVkIGFuZCB0aGUgcmVzaXppbmcgbW9kdWxlIGlzIGNhbGxlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0YWcgKGltZywgaWZyYW1lLCB2aWRlbylcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBQbHVnaW4gbmFtZSAoaW1hZ2UsIHZpZGVvKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGVjdENvbXBvbmVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHBsdWdpbk5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmVkaXRhYmxlQ29tcG9uZW50KHV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB1dGlsLmlzQ29tcG9uZW50KSkgfHwgdXRpbC5pc1VuZWRpdGFibGVDb21wb25lbnQoZWxlbWVudCkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0ZvY3VzKSB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbiA9IHRoaXMucGx1Z2luc1twbHVnaW5OYW1lXTtcclxuICAgICAgICAgICAgaWYgKCFwbHVnaW4pIHJldHVybjtcclxuICAgICAgICAgICAgX3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbi5zZWxlY3QgPT09ICdmdW5jdGlvbicpIHRoaXMuY2FsbFBsdWdpbihwbHVnaW5OYW1lLCBwbHVnaW4uc2VsZWN0LmJpbmQodGhpcywgZWxlbWVudCksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tcG9uZW50TGluZUJyZWFrZXIoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCBsaW5lIGJyZWFrZXIgb2YgY29tcG9uZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGFnIChpbWcsIGlmcmFtZSwgdmlkZW8pXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2V0Q29tcG9uZW50TGluZUJyZWFrZXI6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIC8vIGxpbmUgYnJlYWtlclxyXG4gICAgICAgICAgICB0aGlzLl9saW5lQnJlYWtlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRfc3R5bGUgPSBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfdC5zdHlsZTtcclxuICAgICAgICAgICAgY29uc3QgYl9zdHlsZSA9IGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcl9iLnN0eWxlO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmNvbnRleHQucmVzaXppbmcucmVzaXplQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPT09ICdibG9jaycgPyB0aGlzLmNvbnRleHQucmVzaXppbmcucmVzaXplQ29udGFpbmVyIDogZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGlzdCA9IHV0aWwuaXNMaXN0Q2VsbChjb250YWluZXIucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgIGxldCBjb21wb25lbnRUb3AsIHdTY3JvbGwsIHc7XHJcbiAgICAgICAgICAgIC8vIHRvcFxyXG4gICAgICAgICAgICBpZiAoaXNMaXN0ID8gIWNvbnRhaW5lci5wcmV2aW91c1NpYmxpbmcgOiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fbGluZUJyZWFrQ29tcCA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIHdTY3JvbGwgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRUb3AgPSB1dGlsLmdldE9mZnNldChlbGVtZW50LCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKS50b3AgKyB3U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgdyA9ICh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgdF9zdHlsZS50b3AgPSAoY29tcG9uZW50VG9wIC0gd1Njcm9sbCAtIDEyKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB0X3N0eWxlLmxlZnQgPSAodXRpbC5nZXRPZmZzZXQodGFyZ2V0KS5sZWZ0ICsgdykgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgdF9zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRfc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBib3R0b21cclxuICAgICAgICAgICAgaWYgKGlzTGlzdCA/ICFjb250YWluZXIubmV4dFNpYmxpbmcgOiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29udGFpbmVyLm5leHRFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50VG9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2xpbmVCcmVha0NvbXAgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgd1Njcm9sbCA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRUb3AgPSB1dGlsLmdldE9mZnNldChlbGVtZW50LCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKS50b3AgKyB3U2Nyb2xsO1xyXG4gICAgICAgICAgICAgICAgICAgIHcgPSAodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMikgLyAyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJfc3R5bGUudG9wID0gKGNvbXBvbmVudFRvcCArIHRhcmdldC5vZmZzZXRIZWlnaHQgLSB3U2Nyb2xsIC0gMTIpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGJfc3R5bGUubGVmdCA9ICh1dGlsLmdldE9mZnNldCh0YXJnZXQpLmxlZnQgKyB0YXJnZXQub2Zmc2V0V2lkdGggLSB3IC0gMjQpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGJfc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiX3N0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY2hlY2tEdXBsaWNhdGVOb2RlOiBmdW5jdGlvbiAob05vZGUsIHBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fZHVwbGVDaGVjayhjdXJyZW50LCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBjdXJyZW50LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGROb2Rlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKG9Ob2RlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZHVwbGVDaGVjazogZnVuY3Rpb24gKG9Ob2RlLCBwYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1RleHRTdHlsZUVsZW1lbnQob05vZGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvU3R5bGVzID0gKG9Ob2RlLnN0eWxlLmNzc1RleHQubWF0Y2goL1teO10rOy9nKSB8fCBbXSkubWFwKGZ1bmN0aW9uKHYpeyByZXR1cm4gdi50cmltKCk7IH0pO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IG9Ob2RlLm5vZGVOYW1lO1xyXG4gICAgICAgICAgICBpZiAoL15zcGFuJC9pLnRlc3Qobm9kZU5hbWUpICYmIG9TdHlsZXMubGVuZ3RoID09PSAwKSByZXR1cm4gb05vZGU7XHJcblxyXG4gICAgICAgICAgICBsZXQgZHVwbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihhbmNlc3RvcikgfHwgIXV0aWwuaXNUZXh0U3R5bGVFbGVtZW50KGFuY2VzdG9yKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2VzdG9yLm5vZGVOYW1lID09PSBub2RlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR1cGxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSBhbmNlc3Rvci5zdHlsZS5jc3NUZXh0Lm1hdGNoKC9bXjtdKzsvZykgfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGgsIGo7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGogPSBvU3R5bGVzLmluZGV4T2Yoc3R5bGVzW2ldLnRyaW0oKSkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9TdHlsZXMuc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhbmNlc3Rvci5jbGFzc0xpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUuY2xhc3NMaXN0LnJlbW92ZShhbmNlc3Rvci5jbGFzc0xpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGFuY2VzdG9yLnBhcmVudEVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KShwYXJlbnROb2RlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkdXBsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEob05vZGUuc3R5bGUuY3NzVGV4dCA9IG9TdHlsZXMuam9pbignICcpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9Ob2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFvTm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9Ob2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zZS1kdXBsZScsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBvTm9kZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIHNlbGVjdGVkIG5vZGUgYW5kIGluc2VydCBhcmd1bWVudCB2YWx1ZSBub2RlIGFuZCByZXR1cm4uXHJcbiAgICAgICAgICogSWYgdGhlIFwiYWZ0ZXJOb2RlXCIgZXhpc3RzLCBpdCBpcyBpbnNlcnRlZCBhZnRlciB0aGUgXCJhZnRlck5vZGVcIlxyXG4gICAgICAgICAqIEluc2VydGluZyBhIHRleHQgbm9kZSBtZXJnZXMgd2l0aCBib3RoIHRleHQgbm9kZXMgb24gYm90aCBzaWRlcyBhbmQgcmV0dXJucyBhIG5ldyBcInsgY29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0IH1cIi5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IG9Ob2RlIEVsZW1lbnQgdG8gYmUgaW5zZXJ0ZWRcclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV8bnVsbH0gYWZ0ZXJOb2RlIElmIHRoZSBub2RlIGV4aXN0cywgaXQgaXMgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIG5vZGVcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrQ2hhckNvdW50IElmIHRydWUsIGlmIFwib3B0aW9ucy5tYXhDaGFyQ291bnRcIiBpcyBleGNlZWRlZCB3aGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBudWxsIGlzIHJldHVybmVkIHdpdGhvdXQgYWRkaXRpb24uXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdHxOb2RlfG51bGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0Tm9kZTogZnVuY3Rpb24gKG9Ob2RlLCBhZnRlck5vZGUsIGNoZWNrQ2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmVhZE9ubHkgfHwgKGNoZWNrQ2hhckNvdW50ICYmICF0aGlzLmNoZWNrQ2hhckNvdW50KG9Ob2RlLCBudWxsKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGxldCBsaW5lID0gdXRpbC5pc0xpc3RDZWxsKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSA/IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIDogdXRpbC5nZXRGb3JtYXRFbGVtZW50KHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IGluc2VydExpc3RDZWxsID0gdXRpbC5pc0xpc3RDZWxsKGxpbmUpICYmICh1dGlsLmlzTGlzdENlbGwob05vZGUpIHx8IHV0aWwuaXNMaXN0KG9Ob2RlKSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50Tm9kZSwgb3JpZ2luQWZ0ZXIsIHRlbXBBZnRlck5vZGUsIHRlbXBQYXJlbnROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgZnJlZUZvcm1hdCA9IHV0aWwuaXNGcmVlRm9ybWF0RWxlbWVudChsaW5lKTtcclxuICAgICAgICAgICAgY29uc3QgaXNGb3JtYXRzID0gKCFmcmVlRm9ybWF0ICYmICh1dGlsLmlzRm9ybWF0RWxlbWVudChvTm9kZSkgfHwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChvTm9kZSkpKSB8fCB1dGlsLmlzQ29tcG9uZW50KG9Ob2RlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnNlcnRMaXN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IGFmdGVyTm9kZSB8fCB1dGlsLmlzTGlzdChvTm9kZSkgPyBsaW5lLmxhc3RDaGlsZCA6IGxpbmUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgdGVtcFBhcmVudE5vZGUgPSB1dGlsLmlzTGlzdChvTm9kZSkgPyBsaW5lIDogKHRlbXBBZnRlck5vZGUgfHwgbGluZSkucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFhZnRlck5vZGUgJiYgKGlzRm9ybWF0cyB8fCB1dGlsLmlzQ29tcG9uZW50KG9Ob2RlKSB8fCB1dGlsLmlzTWVkaWEob05vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNFZGdlID0gdGhpcy5pc0VkZ2VQb2ludChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gci5jb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q29udGFpbmVyID0gKGNvbnRhaW5lciA9PT0gci5wcmV2Q29udGFpbmVyICYmIHJhbmdlLmNvbGxhcHNlZCkgPyBudWxsIDogci5wcmV2Q29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnNlcnRMaXN0Q2VsbCAmJiBwcmV2Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFBhcmVudE5vZGUgPSBwcmV2Q29udGFpbmVyLm5vZGVUeXBlID09PSAzID8gcHJldkNvbnRhaW5lci5wYXJlbnROb2RlIDogcHJldkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFBhcmVudE5vZGUuY29udGFpbnMoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2FtZVBhcmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ZW1wQWZ0ZXJOb2RlLnBhcmVudE5vZGUgJiYgdGVtcEFmdGVyTm9kZS5wYXJlbnROb2RlICE9PSB0ZW1wUGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IHRlbXBBZnRlck5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVQYXJlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2FtZVBhcmVudCAmJiBjb250YWluZXIgPT09IHByZXZDb250YWluZXIpIHRlbXBBZnRlck5vZGUgPSB0ZW1wQWZ0ZXJOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zZXJ0TGlzdENlbGwgJiYgdXRpbC5pc0xpc3RDZWxsKGNvbnRhaW5lcikgJiYgIWxpbmUucGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRlbXBQYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSAzIHx8IHV0aWwuaXNCcmVhayhjb250YWluZXIpIHx8IGluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVwdGhGb3JtYXQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoY29udGFpbmVyLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KSB8fCB0aGlzLmlzTGlzdENlbGwoY3VycmVudCk7IH0uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gdXRpbC5zcGxpdEVsZW1lbnQoY29udGFpbmVyLCByLm9mZnNldCwgIWRlcHRoRm9ybWF0ID8gMCA6IHV0aWwuZ2V0RWxlbWVudERlcHRoKGRlcHRoRm9ybWF0KSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWZ0ZXJOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBhZnRlck5vZGUgPSBsaW5lO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zZXJ0TGlzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUuY29udGFpbnMoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViTGlzdCA9IHV0aWwuaXNMaXN0KGxpbmUubGFzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3Q2VsbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NlbGwgPSBsaW5lLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbC5hcHBlbmRDaGlsZChhZnRlck5vZGUudGV4dENvbnRlbnQudHJpbSgpID8gYWZ0ZXJOb2RlIDogdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsID0gbGluZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKGxpbmUubGFzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Q2VsbCwgbGluZS5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBhZnRlck5vZGUgPSBuZXdDZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gYWZ0ZXJOb2RlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJhbmdlID0gKCFhZnRlck5vZGUgJiYgIWlzRm9ybWF0cykgPyB0aGlzLmdldFJhbmdlX2FkZExpbmUodGhpcy5nZXRSYW5nZSgpLCBudWxsKSA6IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uQ29uID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2ZmID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0UmFuZ2UgPSByYW5nZS5zdGFydENvbnRhaW5lciA9PT0gY29tbW9uQ29uICYmIHV0aWwuaXNGb3JtYXRFbGVtZW50KGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29uID0gZm9ybWF0UmFuZ2UgPyAoY29tbW9uQ29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdIHx8IGNvbW1vbkNvbi5jaGlsZE5vZGVzWzBdIHx8IHJhbmdlLnN0YXJ0Q29udGFpbmVyKSA6IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBlbmRDb24gPSBmb3JtYXRSYW5nZSA/IChjb21tb25Db24uY2hpbGROb2Rlc1tlbmRPZmZdIHx8IGNvbW1vbkNvbi5jaGlsZE5vZGVzW2NvbW1vbkNvbi5jaGlsZE5vZGVzLmxlbmd0aCAtIDFdIHx8IHJhbmdlLmVuZENvbnRhaW5lcikgOiByYW5nZS5lbmRDb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFmdGVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBzdGFydENvbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKiogTm8gU2VsZWN0IHJhbmdlIG5vZGUgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24udGV4dENvbnRlbnQubGVuZ3RoID4gZW5kT2ZmKSBhZnRlck5vZGUgPSBjb21tb25Db24uc3BsaXRUZXh0KGVuZE9mZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFmdGVyTm9kZSA9IGNvbW1vbkNvbi5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGMgPSBwYXJlbnROb2RlLmNoaWxkTm9kZXNbc3RhcnRPZmZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzTm9kZSA9IChjICYmIGMubm9kZVR5cGUgPT09IDMgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoYykgJiYgdXRpbC5pc0JyZWFrKGMubmV4dFNpYmxpbmcpKSA/IGMubmV4dFNpYmxpbmcgOiBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c05vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb2N1c05vZGUubmV4dFNpYmxpbmcgJiYgdXRpbC5pc0JyZWFrKGZvY3VzTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZm9jdXNOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSAodXRpbC5pc0JyZWFrKGZvY3VzTm9kZSkgJiYgIXV0aWwuaXNCcmVhayhvTm9kZSkpID8gZm9jdXNOb2RlIDogZm9jdXNOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8qKiBTZWxlY3QgcmFuZ2Ugbm9kZXMgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNTYW1lQ29udGFpbmVyID0gc3RhcnRDb24gPT09IGVuZENvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2FtZUNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFZGdlUG9pbnQoZW5kQ29uLCBlbmRPZmYpKSBhZnRlck5vZGUgPSBlbmRDb24ubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFmdGVyTm9kZSA9IGVuZENvbi5zcGxpdFRleHQoZW5kT2ZmKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlTm9kZSA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRWRnZVBvaW50KHN0YXJ0Q29uLCBzdGFydE9mZikpIHJlbW92ZU5vZGUgPSBzdGFydENvbi5zcGxpdFRleHQoc3RhcnRPZmYpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBpc0Zvcm1hdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRUYWcgPSB0aGlzLnJlbW92ZU5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHJlbW92ZWRUYWcuY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkNvbnRhaW5lciA9IHJlbW92ZWRUYWcucHJldkNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBpc0Zvcm1hdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnPCcgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPjxicj48LycgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoY29udGFpbmVyKSAmJiBvTm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzRm9ybWF0cyAmJiBwcmV2Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHByZXZDb250YWluZXIubm9kZVR5cGUgPT09IDMgPyBwcmV2Q29udGFpbmVyLnBhcmVudE5vZGUgOiBwcmV2Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlLmNvbnRhaW5zKGNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNhbWVQYXJlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChhZnRlck5vZGUucGFyZW50Tm9kZSAmJiBhZnRlck5vZGUucGFyZW50Tm9kZSAhPT0gcGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gYWZ0ZXJOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lUGFyZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNhbWVQYXJlbnQgJiYgY29udGFpbmVyID09PSBwcmV2Q29udGFpbmVyKSBhZnRlck5vZGUgPSBhZnRlck5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KGNvbnRhaW5lcikgJiYgIXV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQodXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IGlzRm9ybWF0cyA/IGVuZENvbiA6IGNvbnRhaW5lciA9PT0gcHJldkNvbnRhaW5lciA/IGNvbnRhaW5lci5uZXh0U2libGluZyA6IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gKCFhZnRlck5vZGUgfHwgIWFmdGVyTm9kZS5wYXJlbnROb2RlKSA/IGNvbW1vbkNvbiA6IGFmdGVyTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChhZnRlck5vZGUgJiYgIXV0aWwuaXNGb3JtYXRFbGVtZW50KGFmdGVyTm9kZSkgJiYgYWZ0ZXJOb2RlLnBhcmVudE5vZGUgIT09IGNvbW1vbkNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IGFmdGVyTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gaGFzIGFmdGVyTm9kZVxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBhZnRlck5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBhZnRlck5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luQWZ0ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IG5vZGVcclxuICAgICAgICAgICAgICAgIGlmICghaW5zZXJ0TGlzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1d5c2l3eWdEaXYoYWZ0ZXJOb2RlKSB8fCBwYXJlbnROb2RlID09PSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChvTm9kZSkgfHwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChvTm9kZSkgfHwgKCF1dGlsLmlzTGlzdENlbGwocGFyZW50Tm9kZSkgJiYgdXRpbC5pc0NvbXBvbmVudChvTm9kZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFBhcmVudCA9IHBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gYWZ0ZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzTGlzdENlbGwoYWZ0ZXJOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGFmdGVyTm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IGFmdGVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghb3JpZ2luQWZ0ZXIgJiYgIWFmdGVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gci5jb250YWluZXIubm9kZVR5cGUgPT09IDMgPyAodXRpbC5pc0xpc3RDZWxsKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyLmNvbnRhaW5lciwgbnVsbCkpID8gci5jb250YWluZXIgOiAodXRpbC5nZXRGb3JtYXRFbGVtZW50KHIuY29udGFpbmVyLCBudWxsKSB8fCByLmNvbnRhaW5lci5wYXJlbnROb2RlKSkgOiByLmNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlQ29uID0gdXRpbC5pc1d5c2l3eWdEaXYoY29udGFpbmVyKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcmFuZ2VDb24gPyBjb250YWluZXIgOiBjb250YWluZXIucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHJhbmdlQ29uID8gbnVsbCA6IGNvbnRhaW5lci5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFBhcmVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBwYXJlbnROb2RlICE9PSBvbGRQYXJlbnQpIHV0aWwucmVtb3ZlSXRlbShvbGRQYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRm9ybWF0cyAmJiAhZnJlZUZvcm1hdCAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChwYXJlbnROb2RlKSAmJiAhdXRpbC5pc0xpc3RDZWxsKHBhcmVudE5vZGUpICYmICF1dGlsLmlzV3lzaXd5Z0RpdihwYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBwYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihwYXJlbnROb2RlKSAmJiAob05vZGUubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKG9Ob2RlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZk5vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZk5vZGUuYXBwZW5kQ2hpbGQob05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IGZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnQtLVxyXG4gICAgICAgICAgICAgICAgaWYgKGluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wUGFyZW50Tm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gdGVtcFBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHRlbXBBZnRlck5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBwYXJlbnROb2RlID09PSBhZnRlck5vZGUgPyBwYXJlbnROb2RlLmxhc3RDaGlsZCA6IGFmdGVyTm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKG9Ob2RlKSAmJiAhdXRpbC5pc0xpc3QocGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVsID0gdXRpbC5jcmVhdGVFbGVtZW50KCdvbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZSh1bCwgYWZ0ZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRMaXN0Q2VsbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tEdXBsaWNhdGVOb2RlKG9Ob2RlLCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9Ob2RlLCBhZnRlck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnNlcnRMaXN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShsaW5lLnRleHRDb250ZW50LnRyaW0oKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IG9Ob2RlLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaExpc3QgPSB1dGlsLmdldEFycmF5SXRlbShsaW5lLmNoaWxkcmVuLCB1dGlsLmlzTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvTm9kZSAhPT0gY2hMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUuYXBwZW5kQ2hpbGQoY2hMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IGNoTGlzdC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQob05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gcGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UobGluZS50ZXh0Q29udGVudC50cmltKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChvTm9kZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuaW5zZXJ0Tm9kZS53YXJuXSAnICsgZXJyb3IpO1xyXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZHVwbGVOb2RlcyA9IHBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc2UtZHVwbGVdJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHVwbGVOb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGR1cGxlTm9kZXMubGVuZ3RoLCBkLCBjLCBjaCwgcGFyZW50OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGR1cGxlTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gZC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBkLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoYywgZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID09PSBvTm9kZSkgb05vZGUgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICgodXRpbC5pc0Zvcm1hdEVsZW1lbnQob05vZGUpIHx8IHV0aWwuaXNDb21wb25lbnQob05vZGUpKSAmJiBzdGFydENvbiA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY0l0ZW0gPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29tbW9uQ29uLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY0l0ZW0gJiYgY0l0ZW0ubm9kZVR5cGUgPT09IDEgJiYgdXRpbC5pc0VtcHR5TGluZShjSXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZyZWVGb3JtYXQgJiYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IHRoaXMuX3NldEludG9GcmVlRm9ybWF0KG9Ob2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNDb21wb25lbnQob05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Ob2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gb05vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gb05vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVGV4dCA9ICghcHJldmlvdXMgfHwgIHByZXZpb3VzLm5vZGVUeXBlID09PSAxIHx8IHV0aWwub25seVplcm9XaWR0aFNwYWNlKHByZXZpb3VzKSkgPyAnJyA6IHByZXZpb3VzLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0VGV4dCA9ICghbmV4dCB8fCBuZXh0Lm5vZGVUeXBlID09PSAxIHx8IHV0aWwub25seVplcm9XaWR0aFNwYWNlKG5leHQpKSA/ICcnIDogbmV4dC50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cyAmJiBwcmV2aW91c1RleHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUudGV4dENvbnRlbnQgPSBwcmV2aW91c1RleHQgKyBvTm9kZS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShwcmV2aW91cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUudGV4dENvbnRlbnQgKz0gbmV4dFRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0obmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JhbmdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBvTm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBwcmV2aW91c1RleHQubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kT2Zmc2V0OiBvTm9kZS50ZXh0Q29udGVudC5sZW5ndGggLSBuZXh0VGV4dC5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uob05vZGUsIG5ld1JhbmdlLnN0YXJ0T2Zmc2V0LCBvTm9kZSwgbmV3UmFuZ2UuZW5kT2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdSYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF1dGlsLmlzQnJlYWsob05vZGUpICYmICF1dGlsLmlzTGlzdENlbGwob05vZGUpICYmIHV0aWwuaXNGb3JtYXRFbGVtZW50KHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB6ZXJvV2lkdGggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9Ob2RlLnByZXZpb3VzU2libGluZyB8fCB1dGlsLmlzQnJlYWsob05vZGUucHJldmlvdXNTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHplcm9XaWR0aCwgb05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9Ob2RlLm5leHRTaWJsaW5nIHx8IHV0aWwuaXNCcmVhayhvTm9kZS5uZXh0U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHplcm9XaWR0aCA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIG9Ob2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShvTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gb05vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9Ob2RlLCBvZmZzZXQsIG9Ob2RlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBvTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRJbnRvRnJlZUZvcm1hdDogZnVuY3Rpb24gKG9Ob2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBvTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBsZXQgb05vZGVDaGlsZHJlbiwgbGFzdE9Ob2RlO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSkge1xyXG4gICAgICAgICAgICAgICAgb05vZGVDaGlsZHJlbiA9IG9Ob2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBsYXN0T05vZGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChvTm9kZUNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE9Ob2RlID0gb05vZGVDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQobGFzdE9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGxhc3RPTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0SW50b0ZyZWVGb3JtYXQobGFzdE9Ob2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvTm9kZS5wYXJlbnROb2RlKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgb05vZGVDaGlsZHJlbiA9IG9Ob2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGFzdE9Ob2RlLCBvTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9Ob2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB1dGlsLnJlbW92ZUl0ZW0ob05vZGUpO1xyXG4gICAgICAgICAgICAgICAgb05vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShvTm9kZSwgbGFzdE9Ob2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG9Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBub2RlcyBhbmQgcmVzZXQgc2VsZWN0aW9uIHJhbmdlXHJcbiAgICAgICAgICogUmV0dXJucyB7Y29udGFpbmVyOiBcInRoZSBsYXN0IGVsZW1lbnQgYWZ0ZXIgZGVsZXRpb25cIiwgb2Zmc2V0OiBcIm9mZnNldFwiLCBwcmV2Q29udGFpbmVyOiBcInByZXZpb3VzRWxlbWVudFNpYmxpbmcgT2YgdGhlIGRlbGV0ZWQgYXJlYVwifVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlTm9kZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNldFJhbmdlVG9UZXh0Tm9kZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUNvbXBvbmVudCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgdXRpbC5pc01lZGlhQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnIgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGZpbGVDb21wb25lbnQsIGZvcm1hdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoZm9ybWF0LCAwLCBmb3JtYXQsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGZvcm1hdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGFpbmVyOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNTdGFydEVkZ2UgPSByYW5nZS5zdGFydE9mZnNldCA9PT0gMDtcclxuICAgICAgICAgICAgY29uc3QgaXNFbmRFZGdlID0gY29yZS5pc0VkZ2VQb2ludChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpO1xyXG4gICAgICAgICAgICBsZXQgcHJldkNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBzdGFydFByZXZFbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBlbmROZXh0RWwgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoaXNTdGFydEVkZ2UpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0UHJldkVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydFByZXZFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZDb250YWluZXIgPSBzdGFydFByZXZFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJldkVsID0gcHJldkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNFbmRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICBlbmROZXh0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2UuZW5kQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIGVuZE5leHRFbCA9IGVuZE5leHRFbCA/IGVuZE5leHRFbC5uZXh0RWxlbWVudFNpYmxpbmcgOiBlbmROZXh0RWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIsIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRPZmYgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgbGV0IGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uQ29uID0gKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLm5vZGVUeXBlID09PSAzICYmIHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUgPT09IHN0YXJ0Q29uLnBhcmVudE5vZGUpID8gc3RhcnRDb24ucGFyZW50Tm9kZSA6IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBpZiAoY29tbW9uQ29uID09PSBzdGFydENvbiAmJiBjb21tb25Db24gPT09IGVuZENvbikge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRDb24gPSBjb21tb25Db24uY2hpbGRyZW5bc3RhcnRPZmZdO1xyXG4gICAgICAgICAgICAgICAgZW5kQ29uID0gY29tbW9uQ29uLmNoaWxkcmVuW2VuZE9mZl07XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IGVuZE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghc3RhcnRDb24gfHwgIWVuZENvbikgcmV0dXJuICB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbW1vbkNvbixcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXJ0Q29uID09PSBlbmRDb24gJiYgcmFuZ2UuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb24udGV4dENvbnRlbnQgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uoc3RhcnRDb24udGV4dENvbnRlbnQuc3Vic3RyKHN0YXJ0T2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHN0YXJ0T2ZmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGFpbmVyOiBzdGFydENvbiAmJiBzdGFydENvbi5wYXJlbnROb2RlID8gc3RhcnRDb24gOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGJlZm9yZU5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgYWZ0ZXJOb2RlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSB1dGlsLmdldExpc3RDaGlsZE5vZGVzKGNvbW1vbkNvbiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIHN0YXJ0Q29uKTtcclxuICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIGVuZENvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGggPiAwICYmIHN0YXJ0SW5kZXggPiAtMSAmJiBlbmRJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleCArIDEsIHN0YXJ0Tm9kZSA9IHN0YXJ0Q29uOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGVzW2ldID09PSBzdGFydE5vZGUucGFyZW50Tm9kZSAmJiBjaGlsZE5vZGVzW2ldLmZpcnN0Q2hpbGQgPT09IHN0YXJ0Tm9kZSAmJiBzdGFydE9mZiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROb2RlID0gc3RhcnROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBlbmRJbmRleCAtIDEsIGVuZE5vZGUgPSBlbmRDb247IGkgPiBzdGFydEluZGV4OyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2Rlc1tpXSA9PT0gZW5kTm9kZS5wYXJlbnROb2RlICYmIGNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2Rlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE5vZGUgPSBlbmROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tZW5kSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGNvbW1vbkNvbikgfHwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24pIHx8IHV0aWwuaXNXeXNpd3lnRGl2KGNvbW1vbkNvbikgfHwgdXRpbC5pc0JyZWFrKGNvbW1vbkNvbikgfHwgdXRpbC5pc01lZGlhKGNvbW1vbkNvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29tbW9uQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29tbW9uQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBlbmRPZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGROb2Rlcy5wdXNoKGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb24gPSBlbmRDb24gPSBjb21tb25Db247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gZW5kQ29uID0gY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHN0YXJ0Q29uKSB8fCB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdXRpbC5pc01lZGlhKGNvbW1vbkNvbikgPyBjb21tb25Db24gOiBzdGFydENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gZW5kSW5kZXggPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8PSBlbmRJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gY2hpbGROb2Rlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDAgfHwgKGl0ZW0ubm9kZVR5cGUgPT09IDMgJiYgaXRlbS5kYXRhID09PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9kZVJlbW92ZUxpc3RJdGVtKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSBzdGFydENvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbi5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChzdGFydENvbikpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGJlZm9yZU5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHN0YXJ0Q29uLnRleHRDb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShzdGFydENvbi5zdWJzdHJpbmdEYXRhKDAsIHN0YXJ0T2ZmKSArIGVuZENvbi5zdWJzdHJpbmdEYXRhKGVuZE9mZiwgKGVuZENvbi5sZW5ndGggLSBlbmRPZmYpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBzdGFydE9mZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZU5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHN0YXJ0Q29uLnN1YnN0cmluZ0RhdGEoMCwgc3RhcnRPZmYpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZU5vZGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbi5kYXRhID0gYmVmb3JlTm9kZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25vZGVSZW1vdmVMaXN0SXRlbShzdGFydENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvbi5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChlbmRDb24pKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhZnRlck5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKGVuZENvbi50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShlbmRDb24uc3Vic3RyaW5nRGF0YShlbmRPZmYsIChlbmRDb24ubGVuZ3RoIC0gZW5kT2ZmKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFmdGVyTm9kZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbi5kYXRhID0gYWZ0ZXJOb2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9kZVJlbW92ZUxpc3RJdGVtKGVuZENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub2RlUmVtb3ZlTGlzdEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVuZFVsID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGVuZENvbiwgJ3VsJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0TGkgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoc3RhcnRDb24sICdsaScpO1xyXG4gICAgICAgICAgICBpZiAoZW5kVWwgJiYgc3RhcnRMaSAmJiBzdGFydExpLmNvbnRhaW5zKGVuZFVsKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gZW5kVWwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gY29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVuZENvbiAmJiBlbmRDb24ucGFyZW50Tm9kZSA/IGVuZENvbiA6IHN0YXJ0Q29uICYmIHN0YXJ0Q29uLnBhcmVudE5vZGUgPyBzdGFydENvbiA6IChyYW5nZS5lbmRDb250YWluZXIgfHwgcmFuZ2Uuc3RhcnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gKCFpc1N0YXJ0RWRnZSAmJiAhaXNFbmRFZGdlKSA/IG9mZnNldCA6IGlzRW5kRWRnZSA/IGNvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGggOiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNXeXNpd3lnRGl2KGNvbnRhaW5lcikgJiYgY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYyA9IHV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMoY29udGFpbmVyLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGlmIChyYykgY29udGFpbmVyID0gcmMuc2MgfHwgcmMuZWMgfHwgY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KGNvbnRhaW5lcikgJiYgIShzdGFydENvbiAmJiBzdGFydENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVuZE5leHRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVuZE5leHRFbDtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydFByZXZFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHN0YXJ0UHJldkVsO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCByYW5nZVxyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKGNvbnRhaW5lciwgb2Zmc2V0LCBjb250YWluZXIsIG9mZnNldCk7XHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgICAgICAgIHByZXZDb250YWluZXI6IHByZXZDb250YWluZXJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfbm9kZVJlbW92ZUxpc3RJdGVtOiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoaXRlbSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShpdGVtKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCF1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtQWxsUGFyZW50cyhmb3JtYXQsIG51bGwsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZvcm1hdCAmJiB1dGlsLmlzTGlzdChmb3JtYXQuZmlyc3RDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdC5pbnNlcnRCZWZvcmUodXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKSwgZm9ybWF0LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFwcGVuZGVkIGFsbCBzZWxlY3RlZCBmb3JtYXQgRWxlbWVudCB0byB0aGUgYXJndW1lbnQgZWxlbWVudCBhbmQgaW5zZXJ0XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSByYW5nZUVsZW1lbnQgRWxlbWVudCBvZiB3cmFwIHRoZSBhcmd1bWVudHMgKEJMT0NLUVVPVEUuLi4pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwbHlSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChyYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlTGluZXMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzKGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKCFyYW5nZUxpbmVzIHx8IHJhbmdlTGluZXMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsaW5lc0xvb3A6XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByYW5nZUxpbmVzLmxlbmd0aCwgbGluZSwgbmVzdGVkLCBmRWwsIGxFbCwgZiwgbDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gcmFuZ2VMaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0xpc3RDZWxsKGxpbmUpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXN0ZWQgPSBsaW5lLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBpZiAobmVzdGVkICYmIHV0aWwuaXNMaXN0Q2VsbChsaW5lLm5leHRFbGVtZW50U2libGluZykgJiYgcmFuZ2VMaW5lcy5pbmRleE9mKGxpbmUubmV4dEVsZW1lbnRTaWJsaW5nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbEVsID0gbmVzdGVkLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlTGluZXMuaW5kZXhPZihsRWwpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGxpc3QgPSBsRWwubGFzdEVsZW1lbnRDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUxpbmVzLmluZGV4T2YobGlzdC5sYXN0RWxlbWVudENoaWxkKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxFbCA9IGxpc3QubGFzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBsaW5lc0xvb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmRWwgPSBuZXN0ZWQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSByYW5nZUxpbmVzLmluZGV4T2YoZkVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHJhbmdlTGluZXMuaW5kZXhPZihsRWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUxpbmVzLnNwbGljZShmLCAobCAtIGYpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IHJhbmdlTGluZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBsYXN0ICA9IHJhbmdlTGluZXNbcmFuZ2VMaW5lcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgbGV0IHN0YW5kVGFnLCBiZWZvcmVUYWcsIHBFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobGFzdCkgfHwgdXRpbC5pc0Zvcm1hdEVsZW1lbnQobGFzdCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YW5kVGFnID0gbGFzdDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YW5kVGFnID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQobGFzdCwgbnVsbCkgfHwgdXRpbC5nZXRGb3JtYXRFbGVtZW50KGxhc3QsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0NlbGwoc3RhbmRUYWcpKSB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBzdGFuZFRhZztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJlZm9yZVRhZyA9IHN0YW5kVGFnLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBzdGFuZFRhZy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50RGVwdGggPSB1dGlsLmdldEVsZW1lbnREZXB0aChzdGFuZFRhZyk7XHJcbiAgICAgICAgICAgIGxldCBsaXN0UGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgbGluZUFyciA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVJdGVtcyA9IGZ1bmN0aW9uIChwYXJlbnQsIG9yaWdpbiwgYmVmb3JlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudCAhPT0gb3JpZ2luICYmICF1dGlsLmlzVGFibGUob3JpZ2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW4gJiYgdXRpbC5nZXRFbGVtZW50RGVwdGgocGFyZW50KSA9PT0gdXRpbC5nZXRFbGVtZW50RGVwdGgob3JpZ2luKSkgcmV0dXJuIGJlZm9yZTtcclxuICAgICAgICAgICAgICAgICAgICBjYyA9IHV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMob3JpZ2luLCBudWxsLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYyA/IGNjLmVjIDogYmVmb3JlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJhbmdlTGluZXMubGVuZ3RoLCBsaW5lLCBvcmlnaW5QYXJlbnQsIGRlcHRoLCBiZWZvcmUsIG5leHRMaW5lLCBuZXh0TGlzdCwgbmVzdGVkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxpbmUgPSByYW5nZUxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luUGFyZW50ID0gbGluZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcmlnaW5QYXJlbnQgfHwgcmFuZ2VFbGVtZW50LmNvbnRhaW5zKG9yaWdpblBhcmVudCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlcHRoID0gdXRpbC5nZXRFbGVtZW50RGVwdGgobGluZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0KG9yaWdpblBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFBhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RQYXJlbnQgPSBuZXh0TGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0TGlzdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW50ID0gb3JpZ2luUGFyZW50LmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVBcnIucHVzaChsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0TGluZSA9IHJhbmdlTGluZXNbaSArIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSB8fCAobmV4dExpbmUgJiYgbmV4dExpbmUucGFyZW50Tm9kZSAhPT0gb3JpZ2luUGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dExpbmUgJiYgbGluZS5jb250YWlucyhuZXh0TGluZS5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dExpc3QgPSBuZXh0TGluZS5wYXJlbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gb3JpZ2luUGFyZW50LnBhcmVudE5vZGUsIHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh1dGlsLmlzTGlzdChsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHV0aWwuY3JlYXRlRWxlbWVudChsaXN0Lm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQobGlzdFBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW50ID0gcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPSBsaXN0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChvcmlnaW5QYXJlbnQsIGxpbmVBcnIsIG51bGwsIHRydWUsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudERlcHRoID49IGRlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnREZXB0aCA9IGRlcHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBlZGdlLmNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlVGFnID0gcmVtb3ZlSXRlbXMocEVsZW1lbnQsIG9yaWdpblBhcmVudCwgZWRnZS5lYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlVGFnKSBwRWxlbWVudCA9IGJlZm9yZVRhZy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBFbGVtZW50ID09PSBlZGdlLmNjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBlZGdlLmVjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocEVsZW1lbnQgIT09IGVkZ2UuY2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHJlbW92ZUl0ZW1zKHBFbGVtZW50LCBlZGdlLmNjLCBiZWZvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSAhPT0gdW5kZWZpbmVkKSBiZWZvcmVUYWcgPSBiZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGJlZm9yZVRhZyA9IGVkZ2UuY2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gZWRnZS5yZW1vdmVBcnJheS5sZW5ndGg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RQYXJlbnQuYXBwZW5kQ2hpbGQoZWRnZS5yZW1vdmVBcnJheVtjXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmVzdGVkKSByYW5nZUVsZW1lbnQuYXBwZW5kQ2hpbGQobGlzdFBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0TGlzdCkgZWRnZS5yZW1vdmVBcnJheVtlZGdlLnJlbW92ZUFycmF5Lmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKG5leHRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudERlcHRoID49IGRlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudERlcHRoID0gZGVwdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBFbGVtZW50ID0gb3JpZ2luUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBsaW5lLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbGVtZW50LmFwcGVuZENoaWxkKGxpbmUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocEVsZW1lbnQgIT09IG9yaWdpblBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSByZW1vdmVJdGVtcyhwRWxlbWVudCwgb3JpZ2luUGFyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSAhPT0gdW5kZWZpbmVkKSBiZWZvcmVUYWcgPSBiZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB1dGlsLm1lcmdlU2FtZVRhZ3MocmFuZ2VFbGVtZW50LCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHV0aWwubWVyZ2VOZXN0ZWRUYWdzKHJhbmdlRWxlbWVudCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMuaXNMaXN0KGN1cnJlbnQpOyB9LmJpbmQodXRpbCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gTmVzdGVkIGxpc3RcclxuICAgICAgICAgICAgaWYgKGJlZm9yZVRhZyAmJiB1dGlsLmdldEVsZW1lbnREZXB0aChiZWZvcmVUYWcpID4gMCAmJiAodXRpbC5pc0xpc3QoYmVmb3JlVGFnLnBhcmVudE5vZGUpIHx8IHV0aWwuaXNMaXN0KGJlZm9yZVRhZy5wYXJlbnROb2RlLnBhcmVudE5vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVwdGhGb3JtYXQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoYmVmb3JlVGFnLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KSAmJiAhdGhpcy5pc0xpc3QoY3VycmVudCk7IH0uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFJhbmdlID0gdXRpbC5zcGxpdEVsZW1lbnQoYmVmb3JlVGFnLCBudWxsLCAhZGVwdGhGb3JtYXQgPyAwIDogdXRpbC5nZXRFbGVtZW50RGVwdGgoZGVwdGhGb3JtYXQpICsgMSk7XHJcbiAgICAgICAgICAgICAgICBzcGxpdFJhbmdlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHJhbmdlRWxlbWVudCwgc3BsaXRSYW5nZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGJhc2ljXHJcbiAgICAgICAgICAgICAgICBwRWxlbWVudC5pbnNlcnRCZWZvcmUocmFuZ2VFbGVtZW50LCBiZWZvcmVUYWcpO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlSXRlbXMocmFuZ2VFbGVtZW50LCBiZWZvcmVUYWcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGdlID0gdXRpbC5nZXRFZGdlQ2hpbGROb2RlcyhyYW5nZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIHJhbmdlRWxlbWVudC5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICAgICAgaWYgKHJhbmdlTGluZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShlZGdlLnNjLCAwLCBlZGdlLmVjLCBlZGdlLmVjLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGVkZ2UuZWMsIGVkZ2UuZWMudGV4dENvbnRlbnQubGVuZ3RoLCBlZGdlLmVjLCBlZGdlLmVjLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgZWxlbWVudHMgb2YgdGhlIFwic2VsZWN0ZWRGb3JtYXRzXCIgYXJyYXkgYXJlIGRldGFjaGVkIGZyb20gdGhlIFwicmFuZ2VFbGVtZW50XCIgZWxlbWVudC4gKFwiTElcIiB0YWdzIGFyZSBjb252ZXJ0ZWQgdG8gXCJQXCIgdGFncylcclxuICAgICAgICAgKiBXaGVuIFwic2VsZWN0ZWRGb3JtYXRzXCIgaXMgbnVsbCwgYWxsIGVsZW1lbnRzIGFyZSBkZXRhY2hlZCBhbmQgcmV0dXJuIHtjYzogcGFyZW50Tm9kZSwgc2M6IG5leHRTaWJsaW5nLCBlYzogcHJldmlvdXNTaWJsaW5nLCByZW1vdmVBcnJheTogW0FycmF5IG9mIHJlbW92ZWQgZWxlbWVudHNdfS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHJhbmdlRWxlbWVudCBSYW5nZSBmb3JtYXQgZWxlbWVudCAoUFJFLCBCTE9DS1FVT1RFLCBPTCwgVUwuLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheXxudWxsfSBzZWxlY3RlZEZvcm1hdHMgQXJyYXkgb2YgZm9ybWF0IGVsZW1lbnRzIChQLCBESVYsIExJLi4uKSB0byByZW1vdmUuXHJcbiAgICAgICAgICogSWYgbnVsbCwgQXBwbGllcyB0byBhbGwgZWxlbWVudHMgYW5kIHJldHVybiB7Y2M6IHBhcmVudE5vZGUsIHNjOiBuZXh0U2libGluZywgZWM6IHByZXZpb3VzU2libGluZ31cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gbmV3UmFuZ2VFbGVtZW50IFRoZSBub2RlKHJhbmdlRWxlbWVudCkgdG8gcmVwbGFjZSB0aGUgY3VycmVudGx5IHdyYXBwZWQgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbW92ZSBJZiB0cnVlLCBkZWxldGVkIHdpdGhvdXQgZGV0YWNoZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBub3RIaXN0b3J5UHVzaCBXaGVuIHRydWUsIGl0IGRvZXMgbm90IHVwZGF0ZSB0aGUgaGlzdG9yeSBzdGFjayBhbmQgdGhlIHNlbGVjdGlvbiBvYmplY3QgYW5kIHJldHVybiBFZGdlTm9kZXMgKHV0aWwuZ2V0RWRnZUNoaWxkTm9kZXMpXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChyYW5nZUVsZW1lbnQsIHNlbGVjdGVkRm9ybWF0cywgbmV3UmFuZ2VFbGVtZW50LCByZW1vdmUsIG5vdEhpc3RvcnlQdXNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBsZXQgc28gPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgbGV0IGVvID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gdXRpbC5nZXRMaXN0Q2hpbGROb2RlcyhyYW5nZUVsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IHJhbmdlRWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSByYW5nZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgbGV0IGZpcnN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBsYXN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCByYW5nZUVsID0gcmFuZ2VFbGVtZW50LmNsb25lTm9kZShmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMaXN0ID0gdXRpbC5pc0xpc3QobmV3UmFuZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgbGV0IGluc2VydGVkTmV3ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCByZXNldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhcHBlbmROb2RlIChwYXJlbnQsIGluc05vZGUsIHNpYmxpbmcsIG9yaWdpbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShpbnNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc05vZGUuaW5uZXJIVE1MID0gdXRpbC56ZXJvV2lkdGhTcGFjZTtcclxuICAgICAgICAgICAgICAgICAgICBzbyA9IGVvID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zTm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoaW5zTm9kZSwgc2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc05vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zQ2hpbGRyZW4gPSAobW92ZUNvbXBsZXRlID8gaW5zTm9kZSA6IG9yaWdpbk5vZGUpLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gaW5zTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGxldCBjID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaW5zQ2hpbGRyZW5bMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gaW5zQ2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX25vdFRleHROb2RlKGMpICYmICF1dGlsLmlzQnJlYWsoYykgJiYgIXV0aWwuaXNMaXN0Q2VsbChmb3JtYXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGZvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZm9ybWF0LCBzaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGluc05vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGMsIHNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwocGFyZW50KSAmJiB1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSAmJiB1dGlsLmlzTGlzdChzaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3TGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBzaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC5hcHBlbmRDaGlsZChzaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nID0gc2libGluZy5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIHBhcmVudC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luTmV4dCA9IG9yaWdpbk5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0YWNoUmFuZ2UgPSB1dGlsLmRldGFjaE5lc3RlZExpc3Qob3JpZ2luTm9kZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyYW5nZUVsZW1lbnQgIT09IGRldGFjaFJhbmdlKSB8fCAob3JpZ2luTmV4dCAhPT0gb3JpZ2luTm9kZS5uZXh0RWxlbWVudFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZkNoaWxkcmVuID0gZm9ybWF0LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGZDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5Ob2RlLmFwcGVuZENoaWxkKGZDaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsZW1lbnQgPSBkZXRhY2hSYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgc2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGZvcm1hdDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRldGFjaCBsb29wXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGgsIGluc05vZGUsIGxpbmVJbmRleCwgbmV4dDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpbnNOb2RlID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiB1dGlsLmlzTGlzdChyYW5nZUVsKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlICYmIGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkRm9ybWF0cyB8fCBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoID09PSBsZW4gfHwgc2VsZWN0ZWRGb3JtYXRzWzBdID09PSBpbnNOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9kZSA9IHJhbmdlRWxlbWVudC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb2RlID0gcmFuZ2VFbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cykgbGluZUluZGV4ID0gc2VsZWN0ZWRGb3JtYXRzLmluZGV4T2YoaW5zTm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzICYmIGxpbmVJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJhbmdlRWwpIHJhbmdlRWwgPSByYW5nZUVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUVsLmFwcGVuZENoaWxkKGluc05vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzKSBuZXh0ID0gc2VsZWN0ZWRGb3JtYXRzW2xpbmVJbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIHJhbmdlRWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHJhbmdlRWwsIHJhbmdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdMaXN0ICYmIHV0aWwuaXNMaXN0Q2VsbChpbnNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiB1dGlsLmdldEVsZW1lbnREZXB0aChpbnNOb2RlKSAhPT0gdXRpbC5nZXRFbGVtZW50RGVwdGgobmV4dCkgJiYgKHV0aWwuaXNMaXN0Q2VsbChwYXJlbnQpIHx8IHV0aWwuZ2V0QXJyYXlJdGVtKGluc05vZGUuY2hpbGRyZW4sIHV0aWwuaXNMaXN0LCBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnNOZXh0ID0gaW5zTm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXRhY2hSYW5nZSA9IHV0aWwuZGV0YWNoTmVzdGVkTGlzdChpbnNOb2RlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHJhbmdlRWxlbWVudCAhPT0gZGV0YWNoUmFuZ2UpIHx8IGluc05leHQgIT09IGluc05vZGUubmV4dEVsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbGVtZW50ID0gZGV0YWNoUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSBpbnNOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zTm9kZSA9IHV0aWwuY3JlYXRlRWxlbWVudChyZW1vdmUgPyBpbm5lci5ub2RlTmFtZSA6ICh1dGlsLmlzTGlzdChyYW5nZUVsZW1lbnQucGFyZW50Tm9kZSkgfHwgdXRpbC5pc0xpc3RDZWxsKHJhbmdlRWxlbWVudC5wYXJlbnROb2RlKSkgPyAnTEknIDogdXRpbC5pc0NlbGwocmFuZ2VFbGVtZW50LnBhcmVudE5vZGUpID8gJ0RJVicgOiBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNDZWxsID0gdXRpbC5pc0xpc3RDZWxsKGluc05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5uZXJDaGlsZHJlbiA9IGlubmVyLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaW5uZXJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChpbm5lckNoaWxkcmVuWzBdKSAmJiAhaXNDZWxsKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNOb2RlLmFwcGVuZENoaWxkKGlubmVyQ2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5Rm9ybWF0QXR0cmlidXRlcyhpbnNOb2RlLCBpbm5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zTm9kZSA9IGluc05vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdSYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluc2VydGVkTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3UmFuZ2VFbGVtZW50LCByYW5nZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZE5ldyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc05vZGUgPSBhcHBlbmROb2RlKG5ld1JhbmdlRWxlbWVudCwgaW5zTm9kZSwgbnVsbCwgY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNOb2RlID0gYXBwZW5kTm9kZShwYXJlbnQsIGluc05vZGUsIHJhbmdlRWxlbWVudCwgY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROb2RlID0gaW5zTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9kZSA9IGluc05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaXJzdE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb2RlID0gbGFzdE5vZGUgPSBpbnNOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUFycmF5LnB1c2goaW5zTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0ID0gbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMocmFuZ2VFbGVtZW50LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5wYXJlbnROb2RlID09PSByYW5nZUVsZW1lbnQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbCA9IHJhbmdlRWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcmFuZ2VFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2VQYXJlbnQgPSByYW5nZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlUmlnaHQgPSByYW5nZUVsZW1lbnQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIHJhbmdlRWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VQYXJlbnQuaW5zZXJ0QmVmb3JlKHJhbmdlRWwsIHJhbmdlUmlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3UmFuZ2VFbGVtZW50KSBmaXJzdE5vZGUgPSBuZXdSYW5nZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICBlbHNlIGlmICghZmlyc3ROb2RlKSBmaXJzdE5vZGUgPSByYW5nZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICByYW5nZVJpZ2h0ID0gcmFuZ2VFbGVtZW50Lm5leHRTaWJsaW5nICE9PSByYW5nZUVsID8gcmFuZ2VFbGVtZW50Lm5leHRTaWJsaW5nIDogcmFuZ2VFbCA/IHJhbmdlRWwubmV4dFNpYmxpbmcgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgcmFuZ2VFbGVtZW50LnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJhbmdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUVtcHR5Tm9kZShyYW5nZUVsZW1lbnQsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGVkZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICBlZGdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNjOiByYW5nZVBhcmVudCxcclxuICAgICAgICAgICAgICAgICAgICBzYzogZmlyc3ROb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvOiBzbyxcclxuICAgICAgICAgICAgICAgICAgICBlYzogcmFuZ2VSaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBlbzogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXJyYXk6IHJlbW92ZUFycmF5XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdE5vZGUpIGZpcnN0Tm9kZSA9IGxhc3ROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFsYXN0Tm9kZSkgbGFzdE5vZGUgPSBmaXJzdE5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEVkZ2UgPSB1dGlsLmdldEVkZ2VDaGlsZE5vZGVzKGZpcnN0Tm9kZSwgKGxhc3ROb2RlLnBhcmVudE5vZGUgPyBmaXJzdE5vZGUgOiBsYXN0Tm9kZSkpO1xyXG4gICAgICAgICAgICAgICAgZWRnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjYzogKGNoaWxkRWRnZS5zYyB8fCBjaGlsZEVkZ2UuZWMpLnBhcmVudE5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2M6IGNoaWxkRWRnZS5zYyxcclxuICAgICAgICAgICAgICAgICAgICBzbzogc28sXHJcbiAgICAgICAgICAgICAgICAgICAgZWM6IGNoaWxkRWRnZS5lYyxcclxuICAgICAgICAgICAgICAgICAgICBlbzogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXJyYXk6IG51bGxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChub3RIaXN0b3J5UHVzaCkgcmV0dXJuIGVkZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlbW92ZSAmJiBlZGdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkRm9ybWF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWRnZS5zYywgMCwgZWRnZS5zYywgMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWRnZS5zYywgc28sIGVkZ2UuZWMsIGVvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFwic2VsZWN0ZWRGb3JtYXRzXCIgYXJyYXkgYXJlIGRldGFjaGVkIGZyb20gdGhlIGxpc3QgZWxlbWVudC5cclxuICAgICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFwcGxpZWQgd2hlbiB0aGUgZmlyc3QgYW5kIGxhc3QgbGluZXMgb2YgXCJzZWxlY3RlZEZvcm1hdHNcIiBhcmUgXCJMSVwiIHJlc3BlY3RpdmVseS5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzZWxlY3RlZEZvcm1hdHMgQXJyYXkgb2YgZm9ybWF0IGVsZW1lbnRzIChMSSwgUC4uLikgdG8gcmVtb3ZlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlIElmIHRydWUsIGRlbGV0ZWQgd2l0aG91dCBkZXRhY2hlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7c2M6IDxMST4sIGVjOiA8TEk+fS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXRhY2hMaXN0OiBmdW5jdGlvbiAoc2VsZWN0ZWRGb3JtYXRzLCByZW1vdmUpIHtcclxuICAgICAgICAgICAgbGV0IHJhbmdlQXJyID0ge307XHJcbiAgICAgICAgICAgIGxldCBsaXN0Rmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGxpc3RMYXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBsYXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgcGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiAhdGhpcy5pc0NvbXBvbmVudChjdXJyZW50KTsgfS5iaW5kKHV0aWwpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGgsIHIsIG8sIGxhc3RJbmRleCwgaXNMaXN0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IGkgPT09IGxlbiAtIDE7XHJcbiAgICAgICAgICAgICAgICBvID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCBwYXNzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlzTGlzdCA9IHV0aWwuaXNMaXN0KG8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyICYmIGlzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBvO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBsaXN0Rmlyc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyICYmIGlzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyICE9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUFyci5mWzBdLnBhcmVudE5vZGUsIHJhbmdlQXJyLmYsIG51bGwsIHJlbW92ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBzZWxlY3RlZEZvcm1hdHNbaV0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RGaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBlZGdlLnNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCkgbGFzdCA9IGVkZ2UuZWM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCkgbGlzdExhc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUFyci5mLnB1c2godXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgJ0xJJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEluZGV4KSBsaXN0TGFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggJiYgdXRpbC5pc0xpc3QocikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGdlID0gdGhpcy5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VBcnIuZlswXS5wYXJlbnROb2RlLCByYW5nZUFyci5mLCBudWxsLCByZW1vdmUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0TGFzdCB8fCBsZW4gPT09IDEpIGxhc3QgPSBlZGdlLmVjO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0Rmlyc3QpIGZpcnN0ID0gZWRnZS5zYyB8fCBsYXN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2M6IGZpcnN0LFxyXG4gICAgICAgICAgICAgICAgZWM6IGxhc3RcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkLCB1cGRhdGUsIGFuZCBkZWxldGUgbm9kZXMgZnJvbSBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIDEuIElmIHRoZXJlIGlzIGEgbm9kZSBpbiB0aGUgXCJhcHBlbmROb2RlXCIgYXJndW1lbnQsIGEgbm9kZSB3aXRoIHRoZSBzYW1lIHRhZ3MgYW5kIGF0dHJpYnV0ZXMgYXMgXCJhcHBlbmROb2RlXCIgaXMgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbiB0ZXh0LlxyXG4gICAgICAgICAqIDIuIElmIGl0IGlzIGluIHRoZSBzYW1lIHRhZywgb25seSB0aGUgdGFnJ3MgYXR0cmlidXRlcyBhcmUgY2hhbmdlZCB3aXRob3V0IGFkZGluZyBhIHRhZy5cclxuICAgICAgICAgKiAzLiBJZiB0aGUgXCJhcHBlbmROb2RlXCIgYXJndW1lbnQgaXMgbnVsbCwgdGhlIG5vZGUgb2YgdGhlIHNlbGVjdGlvbiBpcyB1cGRhdGUgb3IgcmVtb3ZlIHdpdGhvdXQgYWRkaW5nIGEgbmV3IG5vZGUuXHJcbiAgICAgICAgICogNC4gVGhlIHNhbWUgc3R5bGUgYXMgdGhlIHN0eWxlIGF0dHJpYnV0ZSBvZiB0aGUgXCJzdHlsZUFycmF5XCIgYXJndW1lbnQgaXMgZGVsZXRlZC5cclxuICAgICAgICAgKiAgICAoU3R5bGVzIHNob3VsZCBiZSBwdXQgd2l0aCBhdHRyaWJ1dGUgbmFtZXMgZnJvbSBjc3MuIFtcImJhY2tncm91bmQtY29sb3JcIl0pXHJcbiAgICAgICAgICogNS4gVGhlIHNhbWUgY2xhc3MgbmFtZSBhcyB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIHRoZSBcInN0eWxlQXJyYXlcIiBhcmd1bWVudCBpcyBkZWxldGVkLlxyXG4gICAgICAgICAqICAgIChUaGUgY2xhc3MgbmFtZSBpcyBwcmVjZWRlZCBieSBcIi5cIiBbXCIuY2xhc3NOYW1lXCJdKVxyXG4gICAgICAgICAqIDYuIFVzZSBhIGxpc3Qgb2Ygc3R5bGVzIGFuZCBjbGFzc2VzIG9mIFwiYXBwZW5kTm9kZVwiIGluIFwic3R5bGVBcnJheVwiIHRvIGF2b2lkIGR1cGxpY2F0ZSBwcm9wZXJ0eSB2YWx1ZXMuXHJcbiAgICAgICAgICogNy4gSWYgYSBub2RlIHdpdGggYWxsIHN0eWxlcyBhbmQgY2xhc3NlcyByZW1vdmVkIGhhcyB0aGUgc2FtZSB0YWcgbmFtZSBhcyBcImFwcGVuZE5vZGVcIiBvciBcInJlbW92ZU5vZGVBcnJheVwiLCBvciBcImFwcGVuZE5vZGVcIiBpcyBudWxsLCB0aGF0IG5vZGUgaXMgZGVsZXRlZC5cclxuICAgICAgICAgKiA4LiBSZWdhcmRsZXNzIG9mIHRoZSBzdHlsZSBhbmQgY2xhc3Mgb2YgdGhlIG5vZGUsIHRoZSB0YWcgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBcInJlbW92ZU5vZGVBcnJheVwiIGFyZ3VtZW50IHZhbHVlIGlzIGRlbGV0ZWQuXHJcbiAgICAgICAgICogOS4gSWYgdGhlIFwic3RyaWN0UmVtb3ZlXCIgYXJndW1lbnQgaXMgdHJ1ZSwgb25seSBub2RlcyB3aXRoIGFsbCBzdHlsZXMgYW5kIGNsYXNzZXMgcmVtb3ZlZCBmcm9tIHRoZSBub2RlcyBvZiBcInJlbW92ZU5vZGVBcnJheVwiIGFyZSByZW1vdmVkLlxyXG4gICAgICAgICAqMTAuIEl0IHdvbid0IHdvcmsgaWYgdGhlIHBhcmVudCBub2RlIGhhcyB0aGUgc2FtZSBjbGFzcyBhbmQgc2FtZSB2YWx1ZSBzdHlsZS5cclxuICAgICAgICAgKiAgICBIb3dldmVyLCBpZiB0aGVyZSBpcyBhIHZhbHVlIGluIFwicmVtb3ZlTm9kZUFycmF5XCIsIGl0IHdvcmtzIGFuZCB0aGUgdGV4dCBub2RlIGlzIHNlcGFyYXRlZCBldmVuIGlmIHRoZXJlIGlzIG5vIG5vZGUgdG8gcmVwbGFjZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gYXBwZW5kTm9kZSBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCB0byB0aGUgc2VsZWN0aW9uLiBJZiBpdCBpcyBudWxsLCBvbmx5IGRlbGV0ZSB0aGUgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHN0eWxlQXJyYXkgVGhlIHN0eWxlIG9yIGNsYXNzTmFtZSBhdHRyaWJ1dGUgbmFtZSBBcnJheSB0byBjaGVjayAoWydmb250LXNpemUnXSwgWycuY2xhc3NOYW1lJ10sIFsnZm9udC1mYW1pbHknLCAnY29sb3InLCAnLmNsYXNzTmFtZSddLi4uXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHJlbW92ZU5vZGVBcnJheSBBbiBhcnJheSBvZiBub2RlIG5hbWVzIHRvIHJlbW92ZSB0eXBlcyBmcm9tLCByZW1vdmUgYWxsIGZvcm1hdHMgd2hlbiBcImFwcGVuZE5vZGVcIiBpcyBudWxsIGFuZCB0aGVyZSBpcyBhbiBlbXB0eSBhcnJheSBvciBudWxsIHZhbHVlLiAoWydzcGFuJ10sIFsnc3Ryb25nJywgJ2VtJ10gLi4uXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW58bnVsbH0gc3RyaWN0UmVtb3ZlIElmIHRydWUsIG9ubHkgbm9kZXMgd2l0aCBhbGwgc3R5bGVzIGFuZCBjbGFzc2VzIHJlbW92ZWQgZnJvbSB0aGUgbm9kZXMgb2YgXCJyZW1vdmVOb2RlQXJyYXlcIiBhcmUgcmVtb3ZlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBub2RlQ2hhbmdlOiBmdW5jdGlvbiAoYXBwZW5kTm9kZSwgc3R5bGVBcnJheSwgcmVtb3ZlTm9kZUFycmF5LCBzdHJpY3RSZW1vdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzZXRSYW5nZVRvVGV4dE5vZGUoKTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHN0eWxlQXJyYXkgPSBzdHlsZUFycmF5ICYmIHN0eWxlQXJyYXkubGVuZ3RoID4gMCA/IHN0eWxlQXJyYXkgOiBmYWxzZTtcclxuICAgICAgICAgICAgcmVtb3ZlTm9kZUFycmF5ID0gcmVtb3ZlTm9kZUFycmF5ICYmIHJlbW92ZU5vZGVBcnJheS5sZW5ndGggPiAwID8gcmVtb3ZlTm9kZUFycmF5IDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc1JlbW92ZU5vZGUgPSAhYXBwZW5kTm9kZTtcclxuICAgICAgICAgICAgY29uc3QgaXNSZW1vdmVGb3JtYXQgPSBpc1JlbW92ZU5vZGUgJiYgIXJlbW92ZU5vZGVBcnJheSAmJiAhc3R5bGVBcnJheTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgaWYgKChpc1JlbW92ZUZvcm1hdCAmJiByYW5nZS5jb2xsYXBzZWQgJiYgdXRpbC5pc0Zvcm1hdEVsZW1lbnQoc3RhcnRDb24ucGFyZW50Tm9kZSkpIHx8IChzdGFydENvbiA9PT0gZW5kQ29uICYmIHN0YXJ0Q29uLm5vZGVUeXBlID09PSAxICYmIHV0aWwuaXNOb25FZGl0YWJsZShzdGFydENvbikpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBzdGFydENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSB8fCAhdXRpbC5nZXRWYWx1ZXMoZm9ybWF0LnN0eWxlKS5zb21lKGZ1bmN0aW9uKGspIHsgcmV0dXJuIHRoaXMuX2xpc3RLZWJhYi5pbmRleE9mKGspID4gLTE7IH0uYmluZCh0aGlzKSkpIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAmJiAhaXNSZW1vdmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydENvbi5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKHN0YXJ0Q29uKSAmJiAhdXRpbC5pc0NvbXBvbmVudChzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2N1c05vZGUgPSBzdGFydENvbi5jaGlsZE5vZGVzW3N0YXJ0T2ZmXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvY3VzTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvY3VzTm9kZS5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHV0aWwuaXNCcmVhayhmb2N1c05vZGUpID8gZm9jdXNOb2RlIDogZm9jdXNOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIGFmdGVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZSh6ZXJvV2lkdGgsIDEsIHplcm9XaWR0aCwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmYgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoc3RhcnRDb24pKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydENvbiA9IHN0YXJ0Q29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdIHx8IHN0YXJ0Q29uLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGVuZENvbikpIHtcclxuICAgICAgICAgICAgICAgIGVuZENvbiA9IGVuZENvbi5jaGlsZE5vZGVzW2VuZE9mZl0gfHwgZW5kQ29uLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGVuZE9mZiA9IGVuZENvbi50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3UmVnRXhwID0gX3cuUmVnRXhwO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlTmFtZSA9IGFwcGVuZE5vZGUubm9kZU5hbWU7XHJcblxyXG4gICAgICAgICAgICAvKiBjaGVja2VkIHNhbWUgc3R5bGUgcHJvcGVydHkgKi9cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBzdGFydENvbiA9PT0gZW5kQ29uICYmICFyZW1vdmVOb2RlQXJyYXkgJiYgYXBwZW5kTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNOb2RlID0gc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tDbnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tBdHRycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrU3R5bGVzID0gYXBwZW5kTm9kZS5zdHlsZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGVja1N0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQXR0cnMucHVzaChjaGVja1N0eWxlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2tlY2tDbGFzc2VzID0gYXBwZW5kTm9kZS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2tlY2tDbGFzc2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tBdHRycy5wdXNoKCcuJyArIGNrZWNrQ2xhc3Nlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrQXR0cnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCF1dGlsLmlzRm9ybWF0RWxlbWVudChzTm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoZWNrQXR0cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBjaGVja0F0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzUmVnID0gL15cXC4vLnRlc3QocykgPyBuZXcgd1JlZ0V4cCgnXFxcXHMqJyArIHMucmVwbGFjZSgvXlxcLi8sICcnKSArICcoXFxcXHMrfCQpJywgJ2lnJykgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVDaGVjayA9IGlzUmVtb3ZlTm9kZSA/ICEhc05vZGUuc3R5bGVbc10gOiAoISFzTm9kZS5zdHlsZVtzXSAmJiAhIWFwcGVuZE5vZGUuc3R5bGVbc10gJiYgc05vZGUuc3R5bGVbc10gPT09IGFwcGVuZE5vZGUuc3R5bGVbc10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzQ2hlY2sgPSBjbGFzc1JlZyA9PT0gZmFsc2UgPyBmYWxzZSA6IGlzUmVtb3ZlTm9kZSA/ICEhc05vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKSA6ICEhc05vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKSAmJiAhIWFwcGVuZE5vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVDaGVjayB8fCBjbGFzc0NoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrQ250Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNOb2RlID0gc05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0NudCA+PSBjaGVja0F0dHJzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB7fSwgZW5kID0ge307XHJcbiAgICAgICAgICAgIGxldCBuZXdOb2RlLCBzdHlsZVJlZ0V4cCA9ICcnLCBjbGFzc1JlZ0V4cCA9ICcnLCByZW1vdmVOb2RlUmVnRXhwID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3R5bGVBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlQXJyYXkubGVuZ3RoLCBzOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gc3R5bGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXC4vLnRlc3QocykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NSZWdFeHAgKz0gKGNsYXNzUmVnRXhwID8gJ3wnIDogJ1xcXFxzKig/OicpICsgcy5yZXBsYWNlKC9eXFwuLywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlUmVnRXhwICs9IChzdHlsZVJlZ0V4cCA/ICd8JyA6ICcoPzo7fF58XFxcXHMpKD86JykgKyBzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVJlZ0V4cCArPSAnKVxcXFxzKjpbXjtdKlxcXFxzKig/Ojt8JCknO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlUmVnRXhwID0gbmV3IHdSZWdFeHAoc3R5bGVSZWdFeHAsICdpZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc1JlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzUmVnRXhwICs9ICcpKD89XFxcXHMrfCQpJztcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1JlZ0V4cCA9IG5ldyB3UmVnRXhwKGNsYXNzUmVnRXhwLCAnaWcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlbW92ZU5vZGVBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTm9kZVJlZ0V4cCA9ICdeKD86JyArIHJlbW92ZU5vZGVBcnJheVswXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcmVtb3ZlTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZVJlZ0V4cCArPSAnfCcgKyByZW1vdmVOb2RlQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlUmVnRXhwICs9ICcpJCc7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlUmVnRXhwID0gbmV3IHdSZWdFeHAocmVtb3ZlTm9kZVJlZ0V4cCwgJ2knKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHZhbGlkYXRpb24gY2hlY2sgZnVuY3Rpb24qL1xyXG4gICAgICAgICAgICBjb25zdCB3Qm9vbGVhbiA9IF93LkJvb2xlYW47XHJcbiAgICAgICAgICAgIGNvbnN0IF9yZW1vdmVDaGVjayA9IHt2OiBmYWxzZX07XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoY2hlY2tOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2Tm9kZSA9IGNoZWNrTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGFsbCBwYXRoXHJcbiAgICAgICAgICAgICAgICBpZiAodk5vZGUubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKHZOb2RlKSkgcmV0dXJuIHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgLy8gYWxsIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVtb3ZlRm9ybWF0KSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgbm9kZSBjaGVja1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFnUmVtb3ZlID0gKCFyZW1vdmVOb2RlUmVnRXhwICYmIGlzUmVtb3ZlTm9kZSkgfHwgKHJlbW92ZU5vZGVSZWdFeHAgJiYgcmVtb3ZlTm9kZVJlZ0V4cC50ZXN0KHZOb2RlLm5vZGVOYW1lKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGFnIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhZ1JlbW92ZSAmJiAhc3RyaWN0UmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN0eWxlIHJlZ2V4cFxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luU3R5bGUgPSB2Tm9kZS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHAgJiYgb3JpZ2luU3R5bGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gb3JpZ2luU3R5bGUucmVwbGFjZShzdHlsZVJlZ0V4cCwgJycpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGUgIT09IG9yaWdpblN0eWxlKSBfcmVtb3ZlQ2hlY2sudiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2xhc3MgY2hlY2tcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbkNsYXNzZXMgPSB2Tm9kZS5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2xhc3NlcyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzUmVnRXhwICYmIG9yaWdpbkNsYXNzZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBvcmlnaW5DbGFzc2VzLnJlcGxhY2UoY2xhc3NSZWdFeHAsICcnKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMgIT09IG9yaWdpbkNsYXNzZXMpIF9yZW1vdmVDaGVjay52ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgb25seVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoY2xhc3NSZWdFeHAgfHwgIW9yaWdpbkNsYXNzZXMpICYmIChzdHlsZVJlZ0V4cCB8fCAhb3JpZ2luU3R5bGUpICYmICFzdHlsZSAmJiAhY2xhc3NlcyAmJiB0YWdSZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUgfHwgY2xhc3NlcyB8fCB2Tm9kZS5ub2RlTmFtZSAhPT0gbmV3Tm9kZU5hbWUgfHwgKHdCb29sZWFuKHN0eWxlUmVnRXhwKSAhPT0gd0Jvb2xlYW4ob3JpZ2luU3R5bGUpKSB8fCAod0Jvb2xlYW4oY2xhc3NSZWdFeHApICE9PSB3Qm9vbGVhbihvcmlnaW5DbGFzc2VzKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHAgJiYgb3JpZ2luU3R5bGUubGVuZ3RoID4gMCkgdk5vZGUuc3R5bGUuY3NzVGV4dCA9IHN0eWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdk5vZGUuc3R5bGUuY3NzVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NSZWdFeHAgJiYgb3JpZ2luQ2xhc3Nlcy5sZW5ndGggPiAwKSB2Tm9kZS5jbGFzc05hbWUgPSBjbGFzc2VzLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZOb2RlLmNsYXNzTmFtZS50cmltKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2Tm9kZS5zdHlsZS5jc3NUZXh0ICYmICF2Tm9kZS5jbGFzc05hbWUgJiYgKHZOb2RlLm5vZGVOYW1lID09PSBuZXdOb2RlTmFtZSB8fCB0YWdSZW1vdmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdk5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBnZXQgbGluZSBub2Rlc1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lTm9kZXMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMobnVsbCk7XHJcbiAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KHN0YXJ0Q29uLCBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRDb24gPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lTm9kZXNbMF0sIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KGVuZENvbiwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgIGVuZENvbiA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVOb2Rlc1tsaW5lTm9kZXMubGVuZ3RoIC0gMV0sIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBlbmRPZmYgPSBlbmRDb24udGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb25lTGluZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzdGFydENvbiwgbnVsbCkgPT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChlbmRDb24sIG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBlbmRMZW5ndGggPSBsaW5lTm9kZXMubGVuZ3RoIC0gKG9uZUxpbmUgPyAwIDogMSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub2RlIENoYW5nZXNcclxuICAgICAgICAgICAgbmV3Tm9kZSA9IGFwcGVuZE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzUmVtb3ZlQW5jaG9yID0gaXNSZW1vdmVGb3JtYXQgfHwgKGlzUmVtb3ZlTm9kZSAmJiAoZnVuY3Rpb24gKGFycikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbiA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IG4gPCBsZW47IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLl9pc01haW50YWluZWROb2RlKGFycltuXSkgfHwgdXRpbC5faXNTaXplTm9kZShhcnJbbl0pKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSkocmVtb3ZlTm9kZUFycmF5KSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc1NpemVOb2RlID0gaXNSZW1vdmVOb2RlIHx8IHV0aWwuX2lzU2l6ZU5vZGUobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9nZXRNYWludGFpbmVkTm9kZSA9IHRoaXMuX3V0aWxfZ2V0TWFpbnRhaW5lZE5vZGUuYmluZCh1dGlsLCBpc1JlbW92ZUFuY2hvciwgaXNTaXplTm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9pc01haW50YWluZWROb2RlID0gdGhpcy5fdXRpbF9pc01haW50YWluZWROb2RlLmJpbmQodXRpbCwgaXNSZW1vdmVBbmNob3IsIGlzU2l6ZU5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gb25lIGxpbmVcclxuICAgICAgICAgICAgaWYgKG9uZUxpbmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXNldENvbW1vbkxpc3RDZWxsKGxpbmVOb2Rlc1swXSwgc3R5bGVBcnJheSkpIHJhbmdlID0gdGhpcy5zZXRSYW5nZShzdGFydENvbiwgc3RhcnRPZmYsIGVuZENvbiwgZW5kT2ZmKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSYW5nZSA9IHRoaXMuX25vZGVDaGFuZ2Vfb25lTGluZShsaW5lTm9kZXNbMF0sIG5ld05vZGUsIHZhbGlkYXRpb24sIHN0YXJ0Q29uLCBzdGFydE9mZiwgZW5kQ29uLCBlbmRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIHJhbmdlLmNvbGxhcHNlZCwgX3JlbW92ZUNoZWNrLCBfZ2V0TWFpbnRhaW5lZE5vZGUsIF9pc01haW50YWluZWROb2RlKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LmNvbnRhaW5lciA9IG5ld1JhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQub2Zmc2V0ID0gbmV3UmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBlbmQuY29udGFpbmVyID0gbmV3UmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgZW5kLm9mZnNldCA9IG5ld1JhbmdlLmVuZE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQuY29udGFpbmVyID09PSBlbmQuY29udGFpbmVyICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHN0YXJ0LmNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydC5vZmZzZXQgPSBlbmQub2Zmc2V0ID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENvbW1vbkxpc3RTdHlsZShuZXdSYW5nZS5hbmNlc3RvciwgbnVsbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIG11bHRpIGxpbmUgXHJcbiAgICAgICAgICAgICAgICBsZXQgYXBwbGllZENvbW1vbkxpc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmRMZW5ndGggPiAwICYmIHRoaXMuX3Jlc2V0Q29tbW9uTGlzdENlbGwobGluZU5vZGVzW2VuZExlbmd0aF0sIHN0eWxlQXJyYXkpKSBhcHBsaWVkQ29tbW9uTGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVzZXRDb21tb25MaXN0Q2VsbChsaW5lTm9kZXNbMF0sIHN0eWxlQXJyYXkpKSBhcHBsaWVkQ29tbW9uTGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGllZENvbW1vbkxpc3QpIHRoaXMuc2V0UmFuZ2Uoc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZW5kXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBhcHBlbmROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdGhpcy5fbm9kZUNoYW5nZV9lbmRMaW5lKGxpbmVOb2Rlc1tlbmRMZW5ndGhdLCBuZXdOb2RlLCB2YWxpZGF0aW9uLCBlbmRDb24sIGVuZE9mZiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBfZ2V0TWFpbnRhaW5lZE5vZGUsIF9pc01haW50YWluZWROb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBtaWRcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBlbmRMZW5ndGggLSAxLCBuZXdSYW5nZTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q29tbW9uTGlzdENlbGwobGluZU5vZGVzW2ldLCBzdHlsZUFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gYXBwZW5kTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1JhbmdlID0gdGhpcy5fbm9kZUNoYW5nZV9taWRkbGVMaW5lKGxpbmVOb2Rlc1tpXSwgbmV3Tm9kZSwgdmFsaWRhdGlvbiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBlbmQuY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UmFuZ2UuZW5kQ29udGFpbmVyICYmIG5ld1JhbmdlLmFuY2VzdG9yLmNvbnRhaW5zKG5ld1JhbmdlLmVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kLmFuY2VzdG9yID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kLmNvbnRhaW5lciA9IG5ld1JhbmdlLmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tbW9uTGlzdFN0eWxlKG5ld1JhbmdlLmFuY2VzdG9yLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydFxyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFwcGVuZE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5fbm9kZUNoYW5nZV9zdGFydExpbmUobGluZU5vZGVzWzBdLCBuZXdOb2RlLCB2YWxpZGF0aW9uLCBzdGFydENvbiwgc3RhcnRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIF9yZW1vdmVDaGVjaywgX2dldE1haW50YWluZWROb2RlLCBfaXNNYWludGFpbmVkTm9kZSwgZW5kLmNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0LmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5hbmNlc3RvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLmNvbnRhaW5lciA9IHN0YXJ0LmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzdGFydDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWVuZC5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQuYW5jZXN0b3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5jb250YWluZXIgPSBzdGFydC5jb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLm9mZnNldCA9IHN0YXJ0LmNvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tbW9uTGlzdFN0eWxlKHN0YXJ0LmFuY2VzdG9yLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENvbW1vbkxpc3RTdHlsZShlbmQuYW5jZXN0b3IgfHwgdXRpbC5nZXRGb3JtYXRFbGVtZW50KGVuZC5jb250YWluZXIpLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHJhbmdlXHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShzdGFydC5jb250YWluZXIsIHN0YXJ0Lm9mZnNldCwgZW5kLmNvbnRhaW5lciwgZW5kLm9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXQgY29tbW9uIHN0eWxlIG9mIGxpc3QgY2VsbFxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgTGlzdCBjZWxsIGVsZW1lbnQuIDxsaT5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHN0eWxlQXJyYXkgU3R5bGUgYXJyYXlcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9yZXNldENvbW1vbkxpc3RDZWxsOiBmdW5jdGlvbiAoZWwsIHN0eWxlQXJyYXkpIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdENlbGwoZWwpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICghc3R5bGVBcnJheSkgc3R5bGVBcnJheSA9IHRoaXMuX2xpc3RLZWJhYjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdXRpbC5nZXRBcnJheUl0ZW0oKGVsKS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gIXV0aWwuaXNCcmVhayhjdXJyZW50KTsgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsU3R5bGVzID0gZWwuc3R5bGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlYyA9IFtdLCBlayA9IFtdLCBlbEtleXMgPSB1dGlsLmdldFZhbHVlcyhlbFN0eWxlcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9saXN0S2ViYWIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbEtleXMuaW5kZXhPZih0aGlzLl9saXN0S2ViYWJbaV0pID4gLTEgJiYgc3R5bGVBcnJheS5pbmRleE9mKHRoaXMuX2xpc3RLZWJhYltpXSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVjLnB1c2godGhpcy5fbGlzdENhbWVsW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBlay5wdXNoKHRoaXMuX2xpc3RLZWJhYltpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZWMubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyByZXNldCBjZWxsIHN0eWxlLS0tXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlYy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVmZXIuc3R5bGVbZWNbaV1dID0gZWxTdHlsZXNbZWtbaV1dO1xyXG4gICAgICAgICAgICAgICAgZWxTdHlsZXMucmVtb3ZlUHJvcGVydHkoZWtbaV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsID0gcmVmZXIuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgbGV0IHIgPSBudWxsLCBhcHBsaWVkRWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aCwgYywgczsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5fdGV4dFRhZ3NNYXBbYy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcyA9IHV0aWwuZ2V0VmFsdWVzKGMuc3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMubGVuZ3RoID09PSAwIHx8IChlYy5zb21lKGZ1bmN0aW9uIChrKSB7cmV0dXJuIHMuaW5kZXhPZihrKSA9PT0gLTE7fSkgJiYgcy5zb21lKGZ1bmN0aW9uKGspIHtlYy5pbmRleE9mKGspID4gLTE7fSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IGMubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsLmFwcGVuZENoaWxkKGMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWwuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKHNlbCwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsID0gcmVmZXIuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBhcHBsaWVkRWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKHNlbCwgcik7XHJcbiAgICAgICAgICAgICAgICBhcHBsaWVkRWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZWxTdHlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhcHBsaWVkRWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIGNlcnRhaW4gc3R5bGVzIGFyZSBhcHBsaWVkIHRvIGFsbCBjaGlsZCBub2RlcyBvZiB0aGUgbGlzdCBjZWxsLCB0aGUgc3R5bGUgb2YgdGhlIGxpc3QgY2VsbCBpcyBhbHNvIGNoYW5nZWQuIChib2xkLCBjb2xvciwgc2l6ZSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIExpc3QgY2VsbCBlbGVtZW50LiA8bGk+XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGNoaWxkIFZhcmlhYmxlIGZvciByZWN1cnNpdmUgY2FsbC4gKFwibnVsbFwiIG9uIHRoZSBmaXJzdCBjYWxsKVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldENvbW1vbkxpc3RTdHlsZTogZnVuY3Rpb24gKGVsLCBjaGlsZCkge1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNMaXN0Q2VsbChlbCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdXRpbC5nZXRBcnJheUl0ZW0oKGNoaWxkIHx8IGVsKS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gIXV0aWwuaXNCcmVhayhjdXJyZW50KTsgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5bMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkIHx8IGNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgY2hpbGQubm9kZVR5cGUgIT09IDEpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBjZWxsIHN0eWxlLS0tXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkU3R5bGUgPSBjaGlsZC5zdHlsZTtcclxuICAgICAgICAgICAgY29uc3QgZWxTdHlsZSA9IGVsLnN0eWxlO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGxldCBhcHBsaWVkRWwgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJvbGQsIGl0YWxpY1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5fdGV4dFRhZ3NNYXBbbm9kZU5hbWVdID09PSBvcHRpb25zLl9kZWZhdWx0Q29tbWFuZC5ib2xkLnRvTG93ZXJDYXNlKCkpIGVsU3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuX3RleHRUYWdzTWFwW25vZGVOYW1lXSA9PT0gb3B0aW9ucy5fZGVmYXVsdENvbW1hbmQuaXRhbGljLnRvTG93ZXJDYXNlKCkpIGVsU3R5bGUuZm9udFN0eWxlID0gJ2l0YWxpYyc7XHJcblxyXG4gICAgICAgICAgICAvLyBzdHlsZXNcclxuICAgICAgICAgICAgY29uc3QgY0tleXMgPSB1dGlsLmdldFZhbHVlcyhjaGlsZFN0eWxlKTtcclxuICAgICAgICAgICAgaWYgKGNLZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9saXN0Q2FtZWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY0tleXMuaW5kZXhPZih0aGlzLl9saXN0S2ViYWJbaV0pID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxTdHlsZVt0aGlzLl9saXN0Q2FtZWxbaV1dID0gY2hpbGRTdHlsZVt0aGlzLl9saXN0Q2FtZWxbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFN0eWxlLnJlbW92ZVByb3BlcnR5KHRoaXMuX2xpc3RLZWJhYltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpZWRFbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRDb21tb25MaXN0U3R5bGUoZWwsIGNoaWxkKTtcclxuICAgICAgICAgICAgaWYgKCFhcHBsaWVkRWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbW1vbiBzdHlsZVxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkU3R5bGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGNoaWxkLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gY2hpbGQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBjaGlsZC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjaC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5pbnNlcnRCZWZvcmUoY2hbMF0sIG4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdHJpcCByZW1vdmUgbm9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gcmVtb3ZlTm9kZSBUaGUgcmVtb3ZlIG5vZGVcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zdHJpcFJlbW92ZU5vZGU6IGZ1bmN0aW9uIChyZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZW1vdmVOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIGlmICghcmVtb3ZlTm9kZSB8fCByZW1vdmVOb2RlLm5vZGVUeXBlID09PSAzIHx8ICFlbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHJlbW92ZU5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZHJlblswXSwgcmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybiB0aGUgcGFyZW50IG1haW50YWluZWQgdGFnLiAoYmluZCBhbmQgdXNlIGEgdXRpbCBvYmplY3QpXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF91dGlsX2dldE1haW50YWluZWROb2RlOiBmdW5jdGlvbiAoX2lzUmVtb3ZlLCBfaXNTaXplTm9kZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgX2lzUmVtb3ZlKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLl9pc01haW50YWluZWROb2RlLmJpbmQodGhpcykpIHx8ICghX2lzU2l6ZU5vZGUgPyB0aGlzLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdGhpcy5faXNTaXplTm9kZS5iaW5kKHRoaXMpKSA6IG51bGwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayBpZiBlbGVtZW50IGlzIGEgdGFnIHRoYXQgc2hvdWxkIGJlIHBlcnNpc3RlZC4gKGJpbmQgYW5kIHVzZSBhIHV0aWwgb2JqZWN0KVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50XHJcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdXRpbF9pc01haW50YWluZWROb2RlOiBmdW5jdGlvbiAoX2lzUmVtb3ZlLCBfaXNTaXplTm9kZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgX2lzUmVtb3ZlIHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gdGhpcy5faXNNYWludGFpbmVkTm9kZShlbGVtZW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLl9pc01haW50YWluZWROb2RlLmJpbmQodGhpcykpID8gYW5jaG9yIDogKGFuY2hvciB8fCAoIV9pc1NpemVOb2RlID8gdGhpcy5faXNTaXplTm9kZShlbGVtZW50KSA6IGZhbHNlKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHdyYXBzIHRleHQgbm9kZXMgb2YgbGluZSBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgbm9kZSBvZiB0aGUgbGluZSB0aGF0IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCB0ZXh0IG5vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdJbm5lck5vZGUgVGhlIGRvbSB0aGF0IHdpbGwgd3JhcCB0aGUgc2VsZWN0ZWQgdGV4dCBhcmVhXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsaWRhdGlvbiBDaGVjayBpZiB0aGUgbm9kZSBzaG91bGQgYmUgc3RyaXBwZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBzdGFydENvbiBUaGUgc3RhcnRDb250YWluZXIgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0T2ZmIFRoZSBzdGFydE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IGVuZENvbiBUaGUgZW5kQ29udGFpbmVyIHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRPZmYgVGhlIGVuZE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVtb3ZlRm9ybWF0IElzIHRoZSByZW1vdmUgYWxsIGZvcm1hdHMgY29tbWFuZD9cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVtb3ZlTm9kZSBcIm5ld0lubmVyTm9kZVwiIGlzIHJlbW92ZSBub2RlP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY29sbGFwc2VkIHJhbmdlLmNvbGxhcHNlZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7YW5jZXN0b3I6ICosIHN0YXJ0Q29udGFpbmVyOiAqLCBzdGFydE9mZnNldDogKiwgZW5kQ29udGFpbmVyOiAqLCBlbmRPZmZzZXQ6ICp9fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2Vfb25lTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgY29sbGFwc2VkLCBfcmVtb3ZlQ2hlY2ssIF9nZXRNYWludGFpbmVkTm9kZSwgX2lzTWFpbnRhaW5lZE5vZGUpIHtcclxuICAgICAgICAgICAgLy8gbm90IGFkZCB0YWdcclxuICAgICAgICAgICAgbGV0IHBhcmVudENvbiA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24gPT09IGVuZENvbi5wYXJlbnROb2RlICYmIHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uoc3RhcnRDb24udGV4dENvbnRlbnQuc2xpY2UoMCwgc3RhcnRPZmYpKSAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShlbmRDb24udGV4dENvbnRlbnQuc2xpY2UoZW5kT2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudENvbi5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aCwgYywgcywgZSwgejsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeiA9ICF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09IHN0YXJ0Q29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID09PSBlbmRDb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghcyAmJiB6KSB8fCAocyAmJiBlICYmIHopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lVGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNhbWVUYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhwYXJlbnRDb24sIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3I6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lcjogc3RhcnRDb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldDogc3RhcnRPZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldDogZW5kT2ZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGFnXHJcbiAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgaXNTYW1lTm9kZSA9IHN0YXJ0Q29uID09PSBlbmRDb247XHJcbiAgICAgICAgICAgIGxldCBzdGFydENvbnRhaW5lciA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRPZmZzZXQgPSBzdGFydE9mZjtcclxuICAgICAgICAgICAgbGV0IGVuZENvbnRhaW5lciA9IGVuZENvbjtcclxuICAgICAgICAgICAgbGV0IGVuZE9mZnNldCA9IGVuZE9mZjtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0UGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgZW5kUGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGNzc1RleHQsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3UmVnRXhwID0gX3cuUmVnRXhwO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0NzcyAodk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyB3UmVnRXhwKCcoPzo7fF58XFxcXHMpKD86JyArIGNzc1RleHQgKyAnbnVsbClcXFxccyo6W147XSpcXFxccyooPzo7fCQpJywgJ2lnJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVnRXhwICYmIHZOb2RlLnN0eWxlLmNzc1RleHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gcmVnRXhwLnRlc3Qodk5vZGUuc3R5bGUuY3NzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFzdHlsZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCwgYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBjdXJyZW50LmNoaWxkTm9kZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkTm9kZXMubGVuZ3RoLCB2Tm9kZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGROb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY292ZXJOb2RlID0gYW5jZXN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsb25lTm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnRDb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0UGFzcyAmJiBjaGlsZCA9PT0gc3RhcnRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBwTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShzdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSA/ICcnIDogc3RhcnRDb250YWluZXIuc3Vic3RyaW5nRGF0YSgwLCBzdGFydE9mZnNldCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoc3RhcnRDb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IHN0YXJ0Q29udGFpbmVyLnN1YnN0cmluZ0RhdGEoc3RhcnRPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVOb2RlID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW5kT2Zmc2V0ID49IHN0YXJ0T2Zmc2V0ID8gZW5kT2Zmc2V0IC0gc3RhcnRPZmZzZXQgOiBzdGFydENvbnRhaW5lci5kYXRhLmxlbmd0aCAtIHN0YXJ0T2Zmc2V0KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIuZGF0YS5sZW5ndGggLSBzdGFydE9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGEucGFyZW50Tm9kZSAhPT0gbGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG0ucGFyZW50Tm9kZSAhPT0gbGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IHAgPSBtLnBhcmVudE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobS5jaGlsZE5vZGVzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKG0uY2hpbGROb2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5hcHBlbmRDaGlsZChwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IG0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IGFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShwcmV2Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKHByZXZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkFuY2hvck5vZGUgPSBfZ2V0TWFpbnRhaW5lZE5vZGUoYW5jZXN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFwcmV2QW5jaG9yTm9kZSkgYW5jaG9yTm9kZSA9IHByZXZBbmNob3JOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSkgbGluZSA9IGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld05vZGUgIT09IGxpbmUgJiYgbmV3Tm9kZSAhPT0gZWwgJiYgbmV3Tm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBfaXNNYWludGFpbmVkTm9kZShuZXdOb2RlKSA/IG51bGwgOiB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEgJiYgY2hlY2tDc3MobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ICs9IG5ld05vZGUuc3R5bGUuY3NzVGV4dC5zdWJzdHIoMCwgbmV3Tm9kZS5zdHlsZS5jc3NUZXh0LmluZGV4T2YoJzonKSkgKyAnfCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSAmJiAhX2dldE1haW50YWluZWROb2RlKGVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UGFzcyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZSAhPT0gdGV4dE5vZGUpIG5ld05vZGUuYXBwZW5kQ2hpbGQoc3RhcnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU2FtZU5vZGUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmRQYXNzICYmIGNoaWxkID09PSBlbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyTm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoZW5kQ29udGFpbmVyLm5vZGVUeXBlID09PSAxID8gJycgOiBlbmRDb250YWluZXIuc3Vic3RyaW5nRGF0YShlbmRPZmZzZXQsIChlbmRDb250YWluZXIubGVuZ3RoIC0gZW5kT2Zmc2V0KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoaXNTYW1lTm9kZSB8fCBlbmRDb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGVuZENvbnRhaW5lci5zdWJzdHJpbmdEYXRhKDAsIGVuZE9mZnNldCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3SW5uZXJOb2RlLnBhcmVudE5vZGUpICYmICFhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld05vZGUgIT09IHBOb2RlICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBjaGVja0NzcyhuZXdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIGFuY2hvcnMucHVzaChuZXdOb2RlLmNsb25lTm9kZShmYWxzZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHBDdXJyZW50LnB1c2gobmV3Tm9kZS5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSBuZXdOb2RlLnN0eWxlLmNzc1RleHQuc3Vic3RyKDAsIG5ld05vZGUuc3R5bGUuY3NzVGV4dC5pbmRleE9mKCc6JykpICsgJ3wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVOb2RlID0gYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBhZnRlck5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocEN1cnJlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlLnRleHRDb250ZW50ID0gYWZ0ZXJOb2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlICYmIGNsb25lTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJBbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXJBbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IGFmdGVyQW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuZXdOb2RlICE9PSBwTm9kZSAmJiBuZXdOb2RlICE9PSBlbCAmJiBuZXdOb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZSA9IF9pc01haW50YWluZWROb2RlKG5ld05vZGUpID8gbnVsbCA6IHZhbGlkYXRpb24obmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodk5vZGUgJiYgbmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBjaGVja0NzcyhuZXdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gbmV3Tm9kZS5zdHlsZS5jc3NUZXh0LnN1YnN0cigwLCBuZXdOb2RlLnN0eWxlLmNzc1RleHQuaW5kZXhPZignOicpKSArICd8JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIGFuY2hvck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChhbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldCA9IHRleHROb2RlLmRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRQYXNzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNSZW1vdmVGb3JtYXQgJiYgY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHROb2RlLnRleHRDb250ZW50ID0gdXRpbC56ZXJvV2lkdGhTcGFjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vZGUgIT09IHRleHROb2RlKSBuZXdOb2RlLmFwcGVuZENoaWxkKGVuZENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRQYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBlbmRQYXNzID8gbmV3Tm9kZS5jbG9uZU5vZGUoZmFsc2UpIDogdmFsaWRhdGlvbihuZXdOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdOb2RlLm5vZGVUeXBlID09PSAxICYmICF1dGlsLmlzQnJlYWsoY2hpbGQpICYmIHZOb2RlICYmIGNoZWNrQ3NzKG5ld05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc01haW50YWluZWROb2RlKG5ld05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5jaG9yTm9kZSkgYW5jaG9ycy5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSBuZXdOb2RlLnN0eWxlLmNzc1RleHQuc3Vic3RyKDAsIG5ld05vZGUuc3R5bGUuY3NzVGV4dC5pbmRleE9mKCc6JykpICsgJ3wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IHBDdXJyZW50LmNvbmNhdChhbmNob3JzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc01haW50YWluZWROb2RlKG5ld0lubmVyTm9kZS5wYXJlbnROb2RlKSAmJiAhX2lzTWFpbnRhaW5lZE5vZGUoY2hpbGROb2RlKSAmJiAhdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UobmV3SW5uZXJOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbk5vZGVBcnJheS5wdXNoKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW5kUGFzcyAmJiAhYW5jaG9yTm9kZSAmJiBfaXNNYWludGFpbmVkTm9kZShjaGlsZE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFDaGlsZHJlbiA9IGNoaWxkTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYSA9IDAsIGFMZW4gPSBhQ2hpbGRyZW4ubGVuZ3RoOyBhIDwgYUxlbjsgYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGFDaGlsZHJlblthXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbm5lck5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgYW5jZXN0b3IgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZE5vZGUgPT09IGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZFBhc3MpIGFuY2VzdG9yID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IHBOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVuZFBhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUgJiYgY2hpbGQubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZ2V0TWFpbnRhaW5lZE5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jZXN0b3JBbmNob3JOb2RlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGFuY2VzdG9yLCBmdW5jdGlvbiAoY3VycmVudCkge3JldHVybiB0aGlzLl9pc01haW50YWluZWROb2RlKGN1cnJlbnQucGFyZW50Tm9kZSkgfHwgY3VycmVudC5wYXJlbnROb2RlID09PSBwTm9kZTt9LmJpbmQodXRpbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUuYXBwZW5kQ2hpbGQoYW5jZXN0b3JBbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBhbmNlc3RvckFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVOb2RlID0gY2hpbGQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZChjbG9uZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKGNoaWxkKSkgY292ZXJOb2RlID0gY2xvbmVOb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGNoaWxkLCBjb3Zlck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KShlbGVtZW50LCBwTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub3QgcmVtb3ZlIHRhZ1xyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmVOb2RlICYmICFpc1JlbW92ZUZvcm1hdCAmJiAhX3JlbW92ZUNoZWNrLnYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3I6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydE9mZixcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQ6IGVuZE9mZlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNSZW1vdmVGb3JtYXQgPSBpc1JlbW92ZUZvcm1hdCAmJiBpc1JlbW92ZU5vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmVOb2RlID0gbk5vZGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dE5vZGUsIHRleHROb2RlX3MsIHRleHROb2RlX2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5yZXBsYWNlQ2hpbGQodGV4dE5vZGUsIHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJDaGlsZHJlbiA9IHJlbW92ZU5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGVfcyA9IHJDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGVfZSA9IHJDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmluc2VydEJlZm9yZSh0ZXh0Tm9kZV9lLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IGVuZENvbnRhaW5lciA9IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB0ZXh0Tm9kZV9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGV4dE5vZGVfZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Ob2RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaXBSZW1vdmVOb2RlKG5Ob2RlQXJyYXlbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSBlbmRDb250YWluZXIgPSBuZXdJbm5lck5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gc3RhcnRDb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZW5kT2Zmc2V0ID0gZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyIHJlc2V0XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZENvblJlc2V0ID0gaXNSZW1vdmVGb3JtYXQgfHwgZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKGVuZENvbnRhaW5lcikgJiYgZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGVuZENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICBlbmRDb250YWluZXIgPSBzdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmRPZmZzZXQgPSBlbmRDb25SZXNldCA/IGVuZENvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGggOiBlbmRPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAvLyBub2RlIGNoYW5nZVxyXG4gICAgICAgICAgICBjb25zdCBuZXdTdGFydE9mZnNldCA9IHtzOiAwLCBlOiAwfTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQYXRoID0gdXRpbC5nZXROb2RlUGF0aChzdGFydENvbnRhaW5lciwgcE5vZGUsIG5ld1N0YXJ0T2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlRW5kQ29uID0gIWVuZENvbnRhaW5lci5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAobWVyZ2VFbmRDb24pIGVuZENvbnRhaW5lciA9IHN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdFbmRPZmZzZXQgPSB7czogMCwgZTogMH07XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKGVuZENvbnRhaW5lciAsIHBOb2RlLCAoIW1lcmdlRW5kQ29uICYmICFlbmRDb25SZXNldCkgPyBuZXdFbmRPZmZzZXQgOiBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ICs9IG5ld1N0YXJ0T2Zmc2V0LnM7XHJcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IChjb2xsYXBzZWQgPyBzdGFydE9mZnNldCA6IG1lcmdlRW5kQ29uID8gc3RhcnRDb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoIDogZW5kQ29uUmVzZXQgPyBlbmRPZmZzZXQgKyBuZXdTdGFydE9mZnNldC5zIDogZW5kT2Zmc2V0ICsgbmV3RW5kT2Zmc2V0LnMpO1xyXG5cclxuICAgICAgICAgICAgLy8gdGFnIG1lcmdlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld09mZnNldHMgPSB1dGlsLm1lcmdlU2FtZVRhZ3MocE5vZGUsIFtzdGFydFBhdGgsIGVuZFBhdGhdLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB1dGlsLmdldE5vZGVGcm9tUGF0aChzdGFydFBhdGgsIHBOb2RlKTtcclxuICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdXRpbC5nZXROb2RlRnJvbVBhdGgoZW5kUGF0aCwgcE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBwTm9kZSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0Q29udGFpbmVyOiBzdGFydENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydE9mZnNldCArIG5ld09mZnNldHNbMF0sXHJcbiAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIGVuZE9mZnNldDogZW5kT2Zmc2V0ICsgbmV3T2Zmc2V0c1sxXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiB3cmFwcyBmaXJzdCBsaW5lIHNlbGVjdGVkIHRleHQuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBub2RlIG9mIHRoZSBsaW5lIHRoYXQgY29udGFpbnMgdGhlIHNlbGVjdGVkIHRleHQgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5ld0lubmVyTm9kZSBUaGUgZG9tIHRoYXQgd2lsbCB3cmFwIHRoZSBzZWxlY3RlZCB0ZXh0IGFyZWFcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB2YWxpZGF0aW9uIENoZWNrIGlmIHRoZSBub2RlIHNob3VsZCBiZSBzdHJpcHBlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IHN0YXJ0Q29uIFRoZSBzdGFydENvbnRhaW5lciBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRPZmYgVGhlIHN0YXJ0T2Zmc2V0IHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVGb3JtYXQgSXMgdGhlIHJlbW92ZSBhbGwgZm9ybWF0cyBjb21tYW5kP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVOb2RlIFwibmV3SW5uZXJOb2RlXCIgaXMgcmVtb3ZlIG5vZGU/XHJcbiAgICAgICAgICogQHJldHVybnMge251bGx8Tm9kZX0gSWYgZW5kIGNvbnRhaW5lciBpcyByZW5ld2VkLCByZXR1cm5lZCByZW5ld2VkIG5vZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7IGFuY2VzdG9yLCBjb250YWluZXIsIG9mZnNldCwgZW5kQ29udGFpbmVyIH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9ub2RlQ2hhbmdlX3N0YXJ0TGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgc3RhcnRDb24sIHN0YXJ0T2ZmLCBpc1JlbW92ZUZvcm1hdCwgaXNSZW1vdmVOb2RlLCBfcmVtb3ZlQ2hlY2ssIF9nZXRNYWludGFpbmVkTm9kZSwgX2lzTWFpbnRhaW5lZE5vZGUsIF9lbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgLy8gbm90IGFkZCB0YWdcclxuICAgICAgICAgICAgbGV0IHBhcmVudENvbiA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24ubm9kZU5hbWUgPT09IG5ld0lubmVyTm9kZS5ub2RlTmFtZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQocGFyZW50Q29uKSAmJiAhcGFyZW50Q29uLm5leHRTaWJsaW5nICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHN0YXJ0Q29uLnRleHRDb250ZW50LnNsaWNlKDAsIHN0YXJ0T2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBzID0gc3RhcnRDb24ucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwub25seVplcm9XaWR0aFNwYWNlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVUYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHMgPSBzLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2FtZVRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMocGFyZW50Q29uLCBuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBzdGFydENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBzdGFydE9mZlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCB0YWdcclxuICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBuTm9kZUFycmF5ID0gW25ld0lubmVyTm9kZV07XHJcbiAgICAgICAgICAgIGNvbnN0IHBOb2RlID0gZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gc3RhcnRPZmY7XHJcbiAgICAgICAgICAgIGxldCBwYXNzTm9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGgsIHZOb2RlLCBjbG9uZUNoaWxkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdmVyTm9kZSA9IGFuY2VzdG9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFzc05vZGUgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5faXNJZ25vcmVOb2RlQ2hhbmdlKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lQ2hpbGQgPSBjaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQoY2xvbmVDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZW5kQ29udGFpbmVyICYmIGNoaWxkLmNvbnRhaW5zKF9lbmRDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2VuZENvbnRhaW5lciA9IHV0aWwuZ2V0Tm9kZUZyb21QYXRoKGVuZFBhdGgsIGNsb25lQ2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vZGUubm9kZVR5cGUgPT09IDEgJiYgdk5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlKSBhbmNob3JzLnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1RvcE5vZGUgPSBwQ3VycmVudC5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNNYWludGFpbmVkTm9kZShuZXdJbm5lck5vZGUucGFyZW50Tm9kZSkgJiYgIV9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFuY2hvck5vZGUgJiYgX2lzTWFpbnRhaW5lZE5vZGUoY2hpbGROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhQ2hpbGRyZW4gPSBjaGlsZE5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGEgPSAwLCBhTGVuID0gYUNoaWxkcmVuLmxlbmd0aDsgYSA8IGFMZW47IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChhQ2hpbGRyZW5bYV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSAhX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkgPyBuZXdOb2RlIDogbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbk5vZGVBcnJheS5wdXNoKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUb3BOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSAmJiBjaGlsZC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmNlc3RvckFuY2hvck5vZGUgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoYW5jZXN0b3IsIGZ1bmN0aW9uIChjdXJyZW50KSB7cmV0dXJuIHRoaXMuX2lzTWFpbnRhaW5lZE5vZGUoY3VycmVudC5wYXJlbnROb2RlKSB8fCBjdXJyZW50LnBhcmVudE5vZGUgPT09IHBOb2RlO30uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZS5hcHBlbmRDaGlsZChhbmNlc3RvckFuY2hvck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IGFuY2VzdG9yQW5jaG9yTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydENvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFzc05vZGUgJiYgY2hpbGQgPT09IGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZSA9IHBOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldk5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSA/ICcnIDogY29udGFpbmVyLnN1YnN0cmluZ0RhdGEoMCwgb2Zmc2V0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKG9mZnNldCwgKGNvbnRhaW5lci5sZW5ndGggLSBvZmZzZXQpKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IF9nZXRNYWludGFpbmVkTm9kZShhbmNlc3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSAmJiBhLnBhcmVudE5vZGUgIT09IGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtLnBhcmVudE5vZGUgIT09IGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSBwID0gbS5wYXJlbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKG0uY2hpbGROb2Rlc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZChtLmNoaWxkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYXBwZW5kQ2hpbGQocCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBtLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocHJldk5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZChwcmV2Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZBbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhcHJldkFuY2hvck5vZGUpIGFuY2hvck5vZGUgPSBwcmV2QW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIGxpbmUgPSBhbmNob3JOb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZSAhPT0gbGluZSAmJiBuZXdOb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZSA9IHZhbGlkYXRpb24obmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiB2Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gcEN1cnJlbnQucG9wKCkgfHwgYW5jZXN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlID0gY2hpbGROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocEN1cnJlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHBDdXJyZW50LnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZS5hcHBlbmRDaGlsZChuZXdOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2RlICE9PSBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhjaGlsZCkpIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NOb2RlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSAhcGFzc05vZGUgPyBjaGlsZC5jbG9uZU5vZGUoZmFsc2UpIDogdmFsaWRhdGlvbihjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxICYmICF1dGlsLmlzQnJlYWsoY2hpbGQpKSBjb3Zlck5vZGUgPSB2Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNvdmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKGVsZW1lbnQsIHBOb2RlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vdCByZW1vdmUgdGFnXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUgJiYgIWlzUmVtb3ZlRm9ybWF0ICYmICFfcmVtb3ZlQ2hlY2sudikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogc3RhcnRPZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1JlbW92ZUZvcm1hdCA9IGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dE5vZGUgPSByQ2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUockNoaWxkcmVuWzBdLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZU5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmlwUmVtb3ZlTm9kZShuTm9kZUFycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBwTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUVtcHR5Tm9kZShwTm9kZSwgbmV3SW5uZXJOb2RlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKHBOb2RlLnRleHRDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHBOb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBub2RlIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHtzOiAwLCBlOiAwfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSB1dGlsLmdldE5vZGVQYXRoKGNvbnRhaW5lciwgcE5vZGUsIG9mZnNldHMpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IG9mZnNldHMucztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB0YWcgbWVyZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld09mZnNldHMgPSB1dGlsLm1lcmdlU2FtZVRhZ3MocE5vZGUsIFtwYXRoXSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChwTm9kZSwgZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5nZXROb2RlRnJvbVBhdGgocGF0aCwgcE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IG5ld09mZnNldHNbMF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBhbmNlc3RvcjogcE5vZGUsXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHdyYXBzIG1pZCBsaW5lcyBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgbm9kZSBvZiB0aGUgbGluZSB0aGF0IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCB0ZXh0IG5vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdJbm5lck5vZGUgVGhlIGRvbSB0aGF0IHdpbGwgd3JhcCB0aGUgc2VsZWN0ZWQgdGV4dCBhcmVhXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsaWRhdGlvbiBDaGVjayBpZiB0aGUgbm9kZSBzaG91bGQgYmUgc3RyaXBwZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlbW92ZUZvcm1hdCBJcyB0aGUgcmVtb3ZlIGFsbCBmb3JtYXRzIGNvbW1hbmQ/XHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlbW92ZU5vZGUgXCJuZXdJbm5lck5vZGVcIiBpcyByZW1vdmUgbm9kZT9cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IF9lbmRDb250YWluZXIgT2Zmc2V0IG5vZGUgb2YgbGFzdCBsaW5lIGFscmVhZHkgbW9kaWZpZWQgKGVuZC5jb250YWluZXIpXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0geyBhbmNlc3RvciwgZW5kQ29udGFpbmVyOiBcIklmIGVuZCBjb250YWluZXIgaXMgcmVuZXdlZCwgcmV0dXJuZWQgcmVuZXdlZCBub2RlXCIgfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2VfbWlkZGxlTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBfZW5kQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIC8vIG5vdCBhZGQgdGFnXHJcbiAgICAgICAgICAgIGlmICghaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbmQgY29udGFpbmVyIHBhdGhcclxuICAgICAgICAgICAgICAgIGxldCBlbmRQYXRoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChfZW5kQ29udGFpbmVyICYmIGVsZW1lbnQuY29udGFpbnMoX2VuZENvbnRhaW5lcikpIGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBOb2RlID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdOb2RlTmFtZSA9IG5ld0lubmVyTm9kZS5ub2RlTmFtZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Nzc1RleHQgPSBuZXdJbm5lck5vZGUuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NsYXNzID0gbmV3SW5uZXJOb2RlLmNsYXNzTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSB0ZW1wTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGlsZDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDMpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlTmFtZSA9PT0gbmV3Tm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuc3R5bGUuY3NzVGV4dCArPSBuZXdDc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNoaWxkLCBuZXdDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdXRpbC5pc0JyZWFrKGNoaWxkKSAmJiB1dGlsLl9pc0lnbm9yZU5vZGVDaGFuZ2UoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMCAmJiBpID09PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IHRlbXBOb2RlLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBlbmRQYXRoID8gdXRpbC5nZXROb2RlRnJvbVBhdGgoZW5kUGF0aCwgZWxlbWVudCkgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYWRkIHRhZ1xyXG4gICAgICAgICAgICBfcmVtb3ZlQ2hlY2sudiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBsZXQgbm9uZUNoYW5nZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGgsIHZOb2RlLCBjbG9uZUNoaWxkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZE5vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3Zlck5vZGUgPSBhbmNlc3RvcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzQnJlYWsoY2hpbGQpICYmIHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0lubmVyTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVDaGlsZCA9IGNoaWxkLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQoY2xvbmVDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuZCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9lbmRDb250YWluZXIgJiYgY2hpbGQuY29udGFpbnMoX2VuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lbmRDb250YWluZXIgPSB1dGlsLmdldE5vZGVGcm9tUGF0aChlbmRQYXRoLCBjbG9uZUNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25lQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZCh2Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGNvdmVyTm9kZSA9IHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNCcmVhayhjaGlsZCkpIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNvdmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKGVsZW1lbnQsIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub3QgcmVtb3ZlIHRhZ1xyXG4gICAgICAgICAgICBpZiAobm9uZUNoYW5nZSB8fCAoaXNSZW1vdmVOb2RlICYmICFpc1JlbW92ZUZvcm1hdCAmJiAhX3JlbW92ZUNoZWNrLnYpKSByZXR1cm4geyBhbmNlc3RvcjogZWxlbWVudCwgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyIH07XHJcblxyXG4gICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUockNoaWxkcmVuWzBdLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Ob2RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpcFJlbW92ZU5vZGUobk5vZGVBcnJheVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuICAgICAgICAgICAgdXRpbC5tZXJnZVNhbWVUYWdzKHBOb2RlLCBudWxsLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vZGUgY2hhbmdlXHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBhbmNlc3RvcjogcE5vZGUsIGVuZENvbnRhaW5lcjogX2VuZENvbnRhaW5lciB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiB3cmFwcyBsYXN0IGxpbmUgc2VsZWN0ZWQgdGV4dC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIG5vZGUgb2YgdGhlIGxpbmUgdGhhdCBjb250YWlucyB0aGUgc2VsZWN0ZWQgdGV4dCBub2RlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbmV3SW5uZXJOb2RlIFRoZSBkb20gdGhhdCB3aWxsIHdyYXAgdGhlIHNlbGVjdGVkIHRleHQgYXJlYVxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHZhbGlkYXRpb24gQ2hlY2sgaWYgdGhlIG5vZGUgc2hvdWxkIGJlIHN0cmlwcGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gZW5kQ29uIFRoZSBlbmRDb250YWluZXIgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZE9mZiBUaGUgZW5kT2Zmc2V0IHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVGb3JtYXQgSXMgdGhlIHJlbW92ZSBhbGwgZm9ybWF0cyBjb21tYW5kP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVOb2RlIFwibmV3SW5uZXJOb2RlXCIgaXMgcmVtb3ZlIG5vZGU/XHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0geyBhbmNlc3RvciwgY29udGFpbmVyLCBvZmZzZXQgfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2VfZW5kTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgZW5kQ29uLCBlbmRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIF9yZW1vdmVDaGVjaywgX2dldE1haW50YWluZWROb2RlLCBfaXNNYWludGFpbmVkTm9kZSkge1xyXG4gICAgICAgICAgICAvLyBub3QgYWRkIHRhZ1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50Q29uID0gZW5kQ29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24ubm9kZU5hbWUgPT09IG5ld0lubmVyTm9kZS5ub2RlTmFtZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQocGFyZW50Q29uKSAmJiAhcGFyZW50Q29uLnByZXZpb3VzU2libGluZyAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShlbmRDb24udGV4dENvbnRlbnQuc2xpY2UoZW5kT2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gZW5kQ29uLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwub25seVplcm9XaWR0aFNwYWNlKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVUYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzYW1lVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhwYXJlbnRDb24sIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBlbmRPZmZcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGFnXHJcbiAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBlbmRDb247XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSBlbmRPZmY7XHJcbiAgICAgICAgICAgIGxldCBwYXNzTm9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY2hpbGROb2Rlcy5sZW5ndGggLSAxLCB2Tm9kZTsgMCA8PSBpOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdmVyTm9kZSA9IGFuY2VzdG9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFzc05vZGUgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5faXNJZ25vcmVOb2RlQ2hhbmdlKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lQ2hpbGQgPSBjaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKGNsb25lQ2hpbGQsIGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUobmV3SW5uZXJOb2RlLCBjbG9uZUNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlKSBhbmNob3JzLnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1RvcE5vZGUgPSBwQ3VycmVudC5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNNYWludGFpbmVkTm9kZShuZXdJbm5lck5vZGUucGFyZW50Tm9kZSkgJiYgIV9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0lubmVyTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlICYmIF9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYUNoaWxkcmVuID0gY2hpbGROb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhID0gMCwgYUxlbiA9IGFDaGlsZHJlbi5sZW5ndGg7IGEgPCBhTGVuOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoYUNoaWxkcmVuW2FdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbm5lck5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgYW5jZXN0b3IgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RvcE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUgJiYgY2hpbGQubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZ2V0TWFpbnRhaW5lZE5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jZXN0b3JBbmNob3JOb2RlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGFuY2VzdG9yLCBmdW5jdGlvbiAoY3VycmVudCkge3JldHVybiB0aGlzLl9pc01haW50YWluZWROb2RlKGN1cnJlbnQucGFyZW50Tm9kZSkgfHwgY3VycmVudC5wYXJlbnROb2RlID09PSBwTm9kZTt9LmJpbmQodXRpbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUuYXBwZW5kQ2hpbGQoYW5jZXN0b3JBbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBhbmNlc3RvckFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUobmV3SW5uZXJOb2RlLCBwTm9kZS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuZENvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFzc05vZGUgJiYgY2hpbGQgPT09IGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKG9mZnNldCwgKGNvbnRhaW5lci5sZW5ndGggLSBvZmZzZXQpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKDAsIG9mZnNldCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGEucGFyZW50Tm9kZSAhPT0gcE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtLnBhcmVudE5vZGUgIT09IHBOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gcCA9IG0ucGFyZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShtLmNoaWxkTm9kZXNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQobS5jaGlsZE5vZGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmFwcGVuZENoaWxkKHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gbS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIG0ucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3SW5uZXJOb2RlLnBhcmVudE5vZGUpICYmICFhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5pbnNlcnRCZWZvcmUoYWZ0ZXJOb2RlLCBhbmNlc3Rvci5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZSAhPT0gcE5vZGUgJiYgbmV3Tm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBfaXNNYWludGFpbmVkTm9kZShuZXdOb2RlKSA/IG51bGwgOiB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZSAhPT0gYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhjaGlsZCkpIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIGFuY2hvck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUoYW5jaG9yTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIHBOb2RlLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGV4dE5vZGUuZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NOb2RlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmluc2VydEJlZm9yZShjb250YWluZXIsIGFuY2VzdG9yLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZOb2RlID0gIXBhc3NOb2RlID8gY2hpbGQuY2xvbmVOb2RlKGZhbHNlKSA6IHZhbGlkYXRpb24oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5pbnNlcnRCZWZvcmUodk5vZGUsIGFuY2VzdG9yLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIGNvdmVyTm9kZSA9IHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY292ZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkoZWxlbWVudCwgcE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gbm90IHJlbW92ZSB0YWdcclxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlTm9kZSAmJiAhaXNSZW1vdmVGb3JtYXQgJiYgIV9yZW1vdmVDaGVjay52KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogZW5kQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogZW5kT2ZmXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1JlbW92ZUZvcm1hdCA9IGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAockNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHROb2RlID0gckNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUodGV4dE5vZGUsIHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocmVtb3ZlTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBuTm9kZUFycmF5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRleHROb2RlLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmlwUmVtb3ZlTm9kZShuTm9kZUFycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBwTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBuZXdJbm5lck5vZGUudGV4dENvbnRlbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVFbXB0eU5vZGUocE5vZGUsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDBcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocE5vZGUudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gcE5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBjb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbm9kZSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSB7czogMCwgZTogMH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gdXRpbC5nZXROb2RlUGF0aChjb250YWluZXIsIHBOb2RlLCBvZmZzZXRzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBvZmZzZXRzLnM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGFnIG1lcmdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdPZmZzZXRzID0gdXRpbC5tZXJnZVNhbWVUYWdzKHBOb2RlLCBbcGF0aF0sIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHV0aWwuZ2V0Tm9kZUZyb21QYXRoKHBhdGgsIHBOb2RlKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBuZXdPZmZzZXRzWzBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYW5jZXN0b3I6IHBOb2RlLFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSAmJiBvZmZzZXQgPT09IDEgPyBjb250YWluZXIuY2hpbGROb2Rlcy5sZW5ndGggOiBvZmZzZXRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUnVuIHBsdWdpbiBjYWxscyBhbmQgYmFzaWMgY29tbWFuZHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbW1hbmQgQ29tbWFuZCBzdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlzcGxheSBEaXNwbGF5IHR5cGUgc3RyaW5nICgnY29tbWFuZCcsICdzdWJtZW51JywgJ2RpYWxvZycsICdjb250YWluZXInKVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSBlbGVtZW50IG9mIGNvbW1hbmQgYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWN0aW9uQ2FsbDogZnVuY3Rpb24gKGNvbW1hbmQsIGRpc3BsYXksIHRhcmdldCkge1xyXG4gICAgICAgICAgICAvLyBjYWxsIHBsdWdpbnNcclxuICAgICAgICAgICAgaWYgKGRpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICgvbW9yZS9pLnRlc3QoZGlzcGxheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24pIHRoaXMubW9yZUxheWVyT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFyQmFsbG9vbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0YXJnZXQsICdvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXIucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3JlTGF5ZXJPZmYoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKC9jb250YWluZXIvLnRlc3QoZGlzcGxheSkgJiYgKHRoaXMuX21lbnVUcmF5W2NvbW1hbmRdID09PSBudWxsIHx8IHRhcmdldCAhPT0gdGhpcy5jb250YWluZXJBY3RpdmVCdXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGNvbW1hbmQsIHRoaXMuY29udGFpbmVyT24uYmluZCh0aGlzLCB0YXJnZXQpLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5ICYmIHV0aWwuYXJyYXlJbmNsdWRlcyh0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zLCB0YXJnZXQpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoL3N1Ym1lbnUvLnRlc3QoZGlzcGxheSkgJiYgKHRoaXMuX21lbnVUcmF5W2NvbW1hbmRdID09PSBudWxsIHx8IHRhcmdldCAhPT0gdGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnN1Ym1lbnVPbi5iaW5kKHRoaXMsIHRhcmdldCksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvZGlhbG9nLy50ZXN0KGRpc3BsYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGNvbW1hbmQsIHRoaXMucGx1Z2luc1tjb21tYW5kXS5vcGVuLmJpbmQodGhpcyksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvY29tbWFuZC8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnBsdWdpbnNbY29tbWFuZF0uYWN0aW9uLmJpbmQodGhpcyksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9maWxlQnJvd3Nlci8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnBsdWdpbnNbY29tbWFuZF0ub3Blbi5iaW5kKHRoaXMsIG51bGwpLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IC8vIGRlZmF1bHQgY29tbWFuZFxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRIYW5kbGVyKHRhcmdldCwgY29tbWFuZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgvc3VibWVudS8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIS9jb21tYW5kLy50ZXN0KGRpc3BsYXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXhlY3V0ZSBjb21tYW5kIG9mIGNvbW1hbmQgYnV0dG9uKEFsbCBCdXR0b25zIGV4Y2VwdCBzdWJtZW51IGFuZCBkaWFsb2cpXHJcbiAgICAgICAgICogKHNlbGVjdEFsbCwgY29kZVZpZXcsIGZ1bGxTY3JlZW4sIGluZGVudCwgb3V0ZGVudCwgdW5kbywgcmVkbywgcmVtb3ZlRm9ybWF0LCBwcmludCwgcHJldmlldywgc2hvd0Jsb2Nrcywgc2F2ZSwgYm9sZCwgdW5kZXJsaW5lLCBpdGFsaWMsIHN0cmlrZSwgc3Vic2NyaXB0LCBzdXBlcnNjcmlwdCwgY29weSwgY3V0LCBwYXN0ZSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gdGFyZ2V0IFRoZSBlbGVtZW50IG9mIGNvbW1hbmQgYnV0dG9uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbW1hbmQgUHJvcGVydHkgb2YgY29tbWFuZCBidXR0b24gKGRhdGEtdmFsdWUpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29tbWFuZEhhbmRsZXI6IGZ1bmN0aW9uICh0YXJnZXQsIGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgaWYgKGNvcmUuaXNSZWFkT25seSAmJiAhL2NvcHl8Y3V0fHNlbGVjdEFsbHxjb2RlVmlld3xmdWxsU2NyZWVufHByaW50fHByZXZpZXd8c2hvd0Jsb2Nrcy8udGVzdChjb21tYW5kKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvcHknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3V0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncGFzdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0QWxsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lck9mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHd5c2l3eWcgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3QgPSB1dGlsLmdldENoaWxkRWxlbWVudCh3eXNpd3lnLmZpcnN0Q2hpbGQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIGZhbHNlKSB8fCB3eXNpd3lnLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSB1dGlsLmdldENoaWxkRWxlbWVudCh3eXNpd3lnLmxhc3RDaGlsZCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHwgY3VycmVudC5ub2RlVHlwZSA9PT0gMzsgfSwgdHJ1ZSkgfHwgd3lzaXd5Zy5sYXN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCB8fCAhbGFzdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTWVkaWEoZmlyc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSB0aGlzLmdldEZpbGVDb21wb25lbnQoZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiciA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC5hcHBlbmRDaGlsZChicik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gaW5mbyA/IGluZm8uY29tcG9uZW50IDogZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc01lZGlhKGxhc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3lzaXd5Zy5hcHBlbmRDaGlsZChmb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gYnI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhckJhbGxvb24odGhpcy5zZXRSYW5nZShmaXJzdCwgMCwgbGFzdCwgbGFzdC50ZXh0Q29udGVudC5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvZGVWaWV3JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUNvZGVWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdmdWxsU2NyZWVuJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUZ1bGxTY3JlZW4odGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2luZGVudCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdvdXRkZW50JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudChjb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZG8nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS51bmRvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZWRvJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkucmVkbygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlRm9ybWF0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3ByaW50JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwcmV2aWV3JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Nob3dCbG9ja3MnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRGlzcGxheUJsb2NrcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERpcihvcHRpb25zLnJ0bCA/ICdsdHInIDogJ3J0bCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyX2x0cic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREaXIoJ2x0cicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyX3J0bCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREaXIoJ3J0bCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2F2ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxCYWNrU2F2ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNhbGxCYWNrU2F2ZSh0aGlzLmdldENvbnRlbnRzKGZhbHNlKSwgdGhpcy5fdmFyaWFibGUuaXNDaGFuZ2VkKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhcmlhYmxlLmlzQ2hhbmdlZCAmJiB0eXBlb2YgZnVuY3Rpb25zLnNhdmUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25zLnNhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jb3JlLmNvbW1hbmRIYW5kbGVyLmZhaWxdIFBsZWFzZSByZWdpc3RlciBjYWxsIGJhY2sgZnVuY3Rpb24gaW4gY3JlYXRpb24gb3B0aW9uLiAoY2FsbEJhY2tTYXZlIDogRnVuY3Rpb24pJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5pc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC50b29sLnNhdmUpIGNvbnRleHQudG9vbC5zYXZlLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgOiAvLyAnU1RST05HJywgJ1UnLCAnRU0nLCAnREVMJywgJ1NVQicsICdTVVAnLi5cclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gb3B0aW9ucy5fZGVmYXVsdENvbW1hbmRbY29tbWFuZC50b0xvd2VyQ2FzZSgpXSB8fCBjb21tYW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb21tYW5kTWFwW2NvbW1hbmRdKSB0aGlzLmNvbW1hbmRNYXBbY29tbWFuZF0gPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzTWFwID0gdGhpcy5fdmFyaWFibGUuY3VycmVudE5vZGVzTWFwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtZCA9IG5vZGVzTWFwLmluZGV4T2YoY29tbWFuZCkgPiAtMSA/IG51bGwgOiB1dGlsLmNyZWF0ZUVsZW1lbnQoY29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBjb21tYW5kO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15TVUIkL2kudGVzdChjb21tYW5kKSAmJiBub2Rlc01hcC5pbmRleE9mKCdTVVAnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUgPSAnU1VQJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eU1VQJC9pLnRlc3QoY29tbWFuZCkgJiYgbm9kZXNNYXAuaW5kZXhPZignU1VCJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlID0gJ1NVQic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVDaGFuZ2UoY21kLCB0aGlzLl9jb21tYW5kTWFwU3R5bGVzW2NvbW1hbmRdIHx8IG51bGwsIFtyZW1vdmVOb2RlXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmUgZm9ybWF0IG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmFuZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVGb3JtYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIGluZGVudGF0aW9uIHRvIHNlbGVjdGVkIHJhbmdlLlxyXG4gICAgICAgICAqIFNldHRlZCBcIm1hcmdpbi1sZWZ0XCIgdG8gXCIyNXB4XCIgaW4gdGhlIHRvcCBcIlBcIiB0YWcgb2YgdGhlIHBhcmFtZXRlciBub2RlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb21tYW5kIFNlcGFyYXRvciAoXCJpbmRlbnRcIiBvciBcIm91dGRlbnRcIilcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmRlbnQ6IGZ1bmN0aW9uIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZUxpbmVzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9ICdpbmRlbnQnICE9PSBjb21tYW5kO1xyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW5EaXIgPSBvcHRpb25zLnJ0bCA/ICdtYXJnaW5SaWdodCcgOiAnbWFyZ2luTGVmdCc7XHJcbiAgICAgICAgICAgIGxldCBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZWMgPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW8gPSByYW5nZS5lbmRPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmFuZ2VMaW5lcy5sZW5ndGgsIGYsIG1hcmdpbjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmID0gcmFuZ2VMaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0xpc3RDZWxsKGYpIHx8ICF0aGlzLnBsdWdpbnMubGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9IC9cXGQrLy50ZXN0KGYuc3R5bGVbbWFyZ2luRGlyXSkgPyB1dGlsLmdldE51bWJlcihmLnN0eWxlW21hcmdpbkRpcl0sIDApIDogMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luIC09IDI1O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbiArPSAyNTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5zZXRTdHlsZShmLCBtYXJnaW5EaXIsIChtYXJnaW4gPD0gMCA/ICcnIDogbWFyZ2luICsgJ3B4JykpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQgfHwgZi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBsaXN0IGNlbGxzXHJcbiAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5lZGl0SW5zaWRlTGlzdC5jYWxsKHRoaXMsIHNoaWZ0LCBjZWxscyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uoc2MsIHNvLCBlYywgZW8pO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBvciByZW1vdmUgdGhlIGNsYXNzIG5hbWUgb2YgXCJib2R5XCIgc28gdGhhdCB0aGUgY29kZSBibG9jayBpcyB2aXNpYmxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRGlzcGxheUJsb2NrczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIHV0aWwudG9nZ2xlQ2xhc3Mod3lzaXd5ZywgJ3NlLXNob3ctYmxvY2snKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaGFzQ2xhc3Mod3lzaXd5ZywgJ3NlLXNob3ctYmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuc2hvd0Jsb2NrcywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuc2hvd0Jsb2NrcywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlc1N0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoYW5nZXMgdG8gY29kZSB2aWV3IG9yIHd5c2l3eWcgdmlld1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvZ2dsZUNvZGVWaWV3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQ29kZVZpZXcgPSB0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3O1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIHV0aWwuc2V0RGlzYWJsZWRCdXR0b25zKCFpc0NvZGVWaWV3LCB0aGlzLmNvZGVWaWV3RGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0NvZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNOb25FZGl0YWJsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKSkgdGhpcy5fc2V0Q29kZURhdGFUb0VkaXRvcigpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5zY3JvbGxUb3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBub25lJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fd3lzaXd5Z09yaWdpbkNzc1RleHQgPSB0aGlzLl92YXJpYWJsZS5fd3lzaXd5Z09yaWdpbkNzc1RleHQucmVwbGFjZSgvKFxccz9kaXNwbGF5KFxccyspPzooXFxzKyk/KVthLXpBLVpdKyg/PTspLywgJ2Rpc3BsYXk6IGJsb2NrJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ID09PSAnYXV0bycgJiYgIW9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gJzBweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdmFyaWFibGUuaXNGdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm90SGlkZVRvb2xiYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL2JhbGxvb258YmFsbG9vbi1hbHdheXMvaS50ZXN0KG9wdGlvbnMubW9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9hcnJvdy5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5saW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5jb2RlVmlldywgJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc05vbkVkaXRhYmxlKGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5fcmVzZXRDYWNoaW5nQnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRFZGl0b3JEYXRhVG9Db2RlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBibG9jaycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX3d5c2l3eWdPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX3d5c2l3eWdPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBub25lJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbikgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSBjb250ZXh0LmVsZW1lbnQuY29kZS5zdHlsZS5oZWlnaHQgPSBjb250ZXh0LmVsZW1lbnQuY29kZS5zY3JvbGxIZWlnaHQgPiAwID8gKGNvbnRleHQuZWxlbWVudC5jb2RlLnNjcm9sbEhlaWdodCArICdweCcpIDogJ2F1dG8nO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5yZWZyZXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ub3RIaWRlVG9vbGJhciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzQmFsbG9vbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX2Fycm93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnN0eWxlLmxlZnQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNJbmxpbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0JhbGxvb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9yYW5nZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuY29kZVZpZXcsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tQbGFjZWhvbGRlcigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5KSB1dGlsLnNldERpc2FibGVkQnV0dG9ucyh0cnVlLCB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMudG9nZ2xlQ29kZVZpZXcgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy50b2dnbGVDb2RlVmlldyh0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3LCB0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydCB0aGUgZGF0YSBvZiB0aGUgY29kZSB2aWV3IGFuZCBwdXQgaXQgaW4gdGhlIFdZU0lXWUcgYXJlYS5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRDb2RlRGF0YVRvRWRpdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGVfaHRtbCA9IHRoaXMuX2dldENvZGVWaWV3KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5mdWxsUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VEb2N1bWVudCA9IHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcoY29kZV9odG1sLCAndGV4dC9odG1sJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuX19hbGxvd2VkU2NyaXB0VGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZENoaWxkcmVuID0gcGFyc2VEb2N1bWVudC5oZWFkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBoZWFkQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9ec2NyaXB0JC9pLnRlc3QoaGVhZENoaWxkcmVuW2ldLnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZURvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoaGVhZENoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLSwgbGVuLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSBwYXJzZURvY3VtZW50LmhlYWQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZURvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdJykgfHwgKHRoaXMub3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhcGFyc2VEb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyArPSB1dGlsLl9zZXRJZnJhbWVDc3NUYWdzKHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QuaGVhZC5pbm5lckhUTUwgPSBoZWFkZXJzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QuYm9keS5pbm5lckhUTUwgPSB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihwYXJzZURvY3VtZW50LmJvZHkuaW5uZXJIVE1MKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IHBhcnNlRG9jdW1lbnQuYm9keS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzW2ldLm5hbWUgPT09ICdjb250ZW50ZWRpdGFibGUnKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93ZC5ib2R5LnNldEF0dHJpYnV0ZShhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzQ2xhc3ModGhpcy5fd2QuYm9keSwgJ3N1bi1lZGl0b3ItZWRpdGFibGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRhYmxlQ2xhc3NlcyA9IG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3Muc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVkaXRhYmxlQ2xhc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKHRoaXMuX3dkLmJvZHksIG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3NbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmlubmVySFRNTCA9IGNvZGVfaHRtbC5sZW5ndGggPiAwID8gdGhpcy5jb252ZXJ0Q29udGVudHNGb3JFZGl0b3IoY29kZV9odG1sKSA6ICc8JyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+PGJyPjwvJyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0IHRoZSBkYXRhIG9mIHRoZSBXWVNJV1lHIGFyZWEgYW5kIHB1dCBpdCBpbiB0aGUgY29kZSB2aWV3IGFyZWEuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2V0RWRpdG9yRGF0YVRvQ29kZVZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgY29kZUNvbnRlbnRzID0gdGhpcy5jb252ZXJ0SFRNTEZvckNvZGVWaWV3KGNvbnRleHQuZWxlbWVudC53eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGxldCBjb2RlVmFsdWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZ1bGxQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHRoaXMuX3dkLmJvZHksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgY29kZVZhbHVlID0gJzwhRE9DVFlQRSBodG1sPlxcbjxodG1sPlxcbicgKyB0aGlzLl93ZC5oZWFkLm91dGVySFRNTC5yZXBsYWNlKC8+KD8hXFxuKS9nLCAnPlxcbicpICsgJzxib2R5ICcgKyBhdHRycyArICc+XFxuJyArIGNvZGVDb250ZW50cyArICc8L2JvZHk+XFxuPC9odG1sPic7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlVmFsdWUgPSBjb2RlQ29udGVudHM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRDb2RlVmlldyhjb2RlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGFuZ2VzIHRvIGZ1bGwgc2NyZWVuIG9yIGRlZmF1bHQgc2NyZWVuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGVsZW1lbnQgZnVsbCBzY3JlZW4gYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRnVsbFNjcmVlbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgdG9wQXJlYSA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckFyZWEgPSBjb250ZXh0LmVsZW1lbnQuZWRpdG9yQXJlYTtcclxuICAgICAgICAgICAgY29uc3Qgd3lzaXd5Z0ZyYW1lID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZTtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IGNvbnRleHQuZWxlbWVudC5jb2RlO1xyXG4gICAgICAgICAgICBjb25zdCBfdmFyID0gdGhpcy5fdmFyaWFibGU7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHdhc1Rvb2xiYXJIaWRkZW4gPSAodG9vbGJhci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgKHRoaXMuX2lzSW5saW5lICYmICF0aGlzLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX3Zhci5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgIF92YXIuaXNGdWxsU2NyZWVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdmFyLl9mdWxsU2NyZWVuQXR0cnMuaW5saW5lID0gdGhpcy5faXNJbmxpbmU7XHJcbiAgICAgICAgICAgICAgICBfdmFyLl9mdWxsU2NyZWVuQXR0cnMuYmFsbG9vbiA9IHRoaXMuX2lzQmFsbG9vbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNJbmxpbmUgfHwgdGhpcy5faXNCYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNJbmxpbmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0JhbGxvb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoISFvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5pbnNlcnRCZWZvcmUodG9vbGJhciwgZWRpdG9yQXJlYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdG9wQXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLnRvcCA9ICcwJztcclxuICAgICAgICAgICAgICAgIHRvcEFyZWEuc3R5bGUubGVmdCA9ICcwJztcclxuICAgICAgICAgICAgICAgIHRvcEFyZWEuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLm1heFdpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgdG9wQXJlYS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLnpJbmRleCA9ICcyMTQ3NDgzNjQ3JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5lbGVtZW50Ll9zdGlja3lEdW1teS5zdHlsZS5kaXNwbGF5ICE9PSAoJ25vbmUnICYmICcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF92YXIuX2Z1bGxTY3JlZW5BdHRycy5zdGlja3kgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRvb2xiYXIsICdzZS10b29sYmFyLXN0aWNreScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF92YXIuX2JvZHlPdmVyZmxvdyA9IF9kLmJvZHkuc3R5bGUub3ZlcmZsb3c7XHJcbiAgICAgICAgICAgICAgICBfZC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Zhci5fZWRpdG9yQXJlYU9yaWdpbkNzc1RleHQgPSBlZGl0b3JBcmVhLnN0eWxlLmNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICBfdmFyLl93eXNpd3lnT3JpZ2luQ3NzVGV4dCA9IHd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgX3Zhci5fY29kZU9yaWdpbkNzc1RleHQgPSBjb2RlLnN0eWxlLmNzc1RleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZWRpdG9yQXJlYS5zdHlsZS5jc3NUZXh0ID0gdG9vbGJhci5zdHlsZS5jc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB3eXNpd3lnRnJhbWUuc3R5bGUuY3NzVGV4dCA9ICh3eXNpd3lnRnJhbWUuc3R5bGUuY3NzVGV4dC5tYXRjaCgvXFxzP2Rpc3BsYXkoXFxzKyk/OihcXHMrKT9bYS16QS1aXSs7LykgfHwgWycnXSlbMF0gKyBvcHRpb25zLl9lZGl0b3JTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29kZS5zdHlsZS5jc3NUZXh0ID0gKGNvZGUuc3R5bGUuY3NzVGV4dC5tYXRjaCgvXFxzP2Rpc3BsYXkoXFxzKyk/OihcXHMrKT9bYS16QS1aXSs7LykgfHwgWycnXSlbMF07XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLndpZHRoID0gd3lzaXd5Z0ZyYW1lLnN0eWxlLmhlaWdodCA9IGNvZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgICAgIF92YXIuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiA9IChfdy5pbm5lckhlaWdodCAtIHRvb2xiYXIub2Zmc2V0SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGVkaXRvckFyZWEuc3R5bGUuaGVpZ2h0ID0gKF92YXIuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiAtIG9wdGlvbnMuZnVsbFNjcmVlbk9mZnNldCkgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB1dGlsLmNoYW5nZUVsZW1lbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCwgaWNvbnMucmVkdWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUgJiYgb3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvckFyZWEuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faWZyYW1lQXV0b0hlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b3BBcmVhLnN0eWxlLm1hcmdpblRvcCA9IG9wdGlvbnMuZnVsbFNjcmVlbk9mZnNldCArICdweCc7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5mdWxsU2NyZWVuLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdmFyLmlzRnVsbFNjcmVlbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0ID0gX3Zhci5fd3lzaXd5Z09yaWdpbkNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICBjb2RlLnN0eWxlLmNzc1RleHQgPSBfdmFyLl9jb2RlT3JpZ2luQ3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUuY3NzVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yQXJlYS5zdHlsZS5jc3NUZXh0ID0gX3Zhci5fZWRpdG9yQXJlYU9yaWdpbkNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLmNzc1RleHQgPSBfdmFyLl9vcmlnaW5Dc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgX2QuYm9keS5zdHlsZS5vdmVyZmxvdyA9IF92YXIuX2JvZHlPdmVyZmxvdztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSBvcHRpb25zLnRvb2xiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQodG9vbGJhcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RpY2t5VG9vbGJhciA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0b29sYmFyLCAnc2UtdG9vbGJhci1zdGlja3knKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoX3Zhci5fZnVsbFNjcmVlbkF0dHJzLnN0aWNreSAmJiAhb3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Zhci5fZnVsbFNjcmVlbkF0dHJzLnN0aWNreSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0b29sYmFyLCBcInNlLXRvb2xiYXItc3RpY2t5XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5saW5lID0gX3Zhci5fZnVsbFNjcmVlbkF0dHJzLmlubGluZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IF92YXIuX2Z1bGxTY3JlZW5BdHRycy5iYWxsb29uO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzSW5saW5lKSBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgIGlmICghIW9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikgdXRpbC5yZW1vdmVDbGFzcyh0b29sYmFyLCAnc2UtdG9vbGJhci1iYWxsb29uJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQub25TY3JvbGxfd2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkgdXRpbC5jaGFuZ2VFbGVtZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIGljb25zLmV4cGFuc2lvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvcEFyZWEuc3R5bGUubWFyZ2luVG9wID0gJyc7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5mdWxsU2NyZWVuLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3YXNUb29sYmFySGlkZGVuKSBmdW5jdGlvbnMudG9vbGJhci5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLnRvZ2dsZUZ1bGxTY3JlZW4gPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy50b2dnbGVGdWxsU2NyZWVuKHRoaXMuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbiwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFByaW50cyB0aGUgY3VycmVudCBjb250ZW50cyBvZiB0aGUgZWRpdG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZSA9IHV0aWwuY3JlYXRlRWxlbWVudCgnSUZSQU1FJyk7XHJcbiAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBfZC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50c0hUTUwgPSBvcHRpb25zLnByaW50VGVtcGxhdGUgPyBvcHRpb25zLnByaW50VGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7XFxzKmNvbnRlbnRzXFxzKlxcfVxcfS9pLCB0aGlzLmdldENvbnRlbnRzKHRydWUpKSA6IHRoaXMuZ2V0Q29udGVudHModHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW50RG9jdW1lbnQgPSB1dGlsLmdldElmcmFtZURvY3VtZW50KGlmcmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdEb2MgPSB0aGlzLl93ZDtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJydHMgPSBvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gJ2NsYXNzPVwiJyArIG9wdGlvbnMuX3ByaW50Q2xhc3MgKyAnXCInIDogb3B0aW9ucy5mdWxsUGFnZSA/IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHdEb2MuYm9keSwgWydjb250ZW50ZWRpdGFibGUnXSkgOiAnY2xhc3M9XCInICsgb3B0aW9ucy5fZWRpdGFibGVDbGFzcyArICdcIic7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbnREb2N1bWVudC53cml0ZSgnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwhRE9DVFlQRSBodG1sPjxodG1sPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICB3RG9jLmhlYWQuaW5uZXJIVE1MICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9oZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8Ym9keSAnICsgYXJydHMgKyAnPicgKyBjb250ZW50c0hUTUwgKyAnPC9ib2R5PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2h0bWw+J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5rSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmtzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgKz0gbGlua3NbaV0ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmtIVE1MICs9IHN0eWxlc1tpXS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbnREb2N1bWVudC53cml0ZSgnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwhRE9DVFlQRSBodG1sPjxodG1sPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICBsaW5rSFRNTCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvaGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJvZHkgY2xhc3M9XCInICsgKG9wdGlvbnMuX3ByaW50Q2xhc3MgIT09IG51bGwgPyBvcHRpb25zLl9wcmludENsYXNzIDogb3B0aW9ucy5fZWRpdGFibGVDbGFzcykgKyAnXCI+JyArIGNvbnRlbnRzSFRNTCArICc8L2JvZHk+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvaHRtbD4nXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJRSBvciBFZGdlLCBDaHJvbWl1bVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzSUVfRWRnZSB8fCB1dGlsLmlzQ2hyb21pdW0gfHwgISFfZC5kb2N1bWVudE1vZGUgfHwgISFfdy5TdHlsZU1lZGlhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC5leGVjQ29tbWFuZCgncHJpbnQnLCBmYWxzZSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlciBicm93c2Vyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5wcmludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY29yZS5wcmludC5mYWlsXSBlcnJvcjogJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oaWZyYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gdGhlIHByZXZpZXcgd2luZG93LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByZXZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRzSFRNTCA9IG9wdGlvbnMucHJldmlld1RlbXBsYXRlID8gb3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7XFxzKmNvbnRlbnRzXFxzKlxcfVxcfS9pLCB0aGlzLmdldENvbnRlbnRzKHRydWUpKSA6IHRoaXMuZ2V0Q29udGVudHModHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpbmRvd09iamVjdCA9IF93Lm9wZW4oJycsICdfYmxhbmsnKTtcclxuICAgICAgICAgICAgd2luZG93T2JqZWN0Lm1pbWVUeXBlID0gJ3RleHQvaHRtbCc7XHJcbiAgICAgICAgICAgIGNvbnN0IHdEb2MgPSB0aGlzLl93ZDtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJydHMgPSBvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gJ2NsYXNzPVwiJyArIG9wdGlvbnMuX3ByaW50Q2xhc3MgKyAnXCInIDogb3B0aW9ucy5mdWxsUGFnZSA/IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHdEb2MuYm9keSwgWydjb250ZW50ZWRpdGFibGUnXSkgOiAnY2xhc3M9XCInICsgb3B0aW9ucy5fZWRpdGFibGVDbGFzcyArICdcIic7XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93T2JqZWN0LmRvY3VtZW50LndyaXRlKCcnICtcclxuICAgICAgICAgICAgICAgICAgICAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxoZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIHdEb2MuaGVhZC5pbm5lckhUTUwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3R5bGU+Ym9keSB7b3ZlcmZsb3c6YXV0byAhaW1wb3J0YW50OyBtYXJnaW46IDEwcHggYXV0byAhaW1wb3J0YW50OyBoZWlnaHQ6YXV0byAhaW1wb3J0YW50OyBvdXRsaW5lOjFweCBkYXNoZWQgI2NjYzt9PC9zdHlsZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9oZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8Ym9keSAnICsgYXJydHMgKyAnPicgKyBjb250ZW50c0hUTUwgKyAnPC9ib2R5PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2h0bWw+J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5rSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmtzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgKz0gbGlua3NbaV0ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmtIVE1MICs9IHN0eWxlc1tpXS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93T2JqZWN0LmRvY3VtZW50LndyaXRlKCcnICtcclxuICAgICAgICAgICAgICAgICAgICAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxoZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bWV0YSBjaGFyc2V0PVwidXRmLThcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8dGl0bGU+JyArIGxhbmcudG9vbGJhci5wcmV2aWV3ICsgJzwvdGl0bGU+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2hlYWQ+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxib2R5IGNsYXNzPVwiJyArIChvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gb3B0aW9ucy5fcHJpbnRDbGFzcyA6IG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3MpICsgJ1wiIHN0eWxlPVwibWFyZ2luOjEwcHggYXV0byAhaW1wb3J0YW50OyBoZWlnaHQ6YXV0byAhaW1wb3J0YW50OyBvdXRsaW5lOjFweCBkYXNoZWQgI2NjYztcIj4nICsgY29udGVudHNIVE1MICsgJzwvYm9keT4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9odG1sPidcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IGRpcmVjdGlvbiB0byBcInJ0bFwiIG9yIFwibHRyXCIuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpciBcInJ0bFwiIG9yIFwibHRyXCJcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXREaXI6IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICAgICAgY29uc3QgcnRsID0gZGlyID09PSAncnRsJztcclxuICAgICAgICAgICAgY29uc3QgY2hhbmdlRGlyID0gdGhpcy5fcHJldlJ0bCAhPT0gcnRsO1xyXG4gICAgICAgICAgICB0aGlzLl9wcmV2UnRsID0gb3B0aW9ucy5ydGwgPSBydGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlRGlyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbGlnbiBidXR0b25zXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zLmFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmFsaWduLmV4Y2hhbmdlRGlyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbmRlbnQgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudG9vbC5pbmRlbnQpIHV0aWwuY2hhbmdlRWxlbWVudChjb250ZXh0LnRvb2wuaW5kZW50LmZpcnN0RWxlbWVudENoaWxkLCBpY29ucy5pbmRlbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudG9vbC5vdXRkZW50KSB1dGlsLmNoYW5nZUVsZW1lbnQoY29udGV4dC50b29sLm91dGRlbnQuZmlyc3RFbGVtZW50Q2hpbGQsIGljb25zLm91dGRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlbCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHJ0bCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGVsLnd5c2l3eWdGcmFtZSwgJ3NlLXJ0bCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGVsLnd5c2l3eWdGcmFtZSwgJ3NlLXJ0bCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsaW5lTm9kZXMgPSB1dGlsLmdldExpc3RDaGlsZHJlbihlbC53eXNpd3lnLCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpICYmIChjdXJyZW50LnN0eWxlLm1hcmdpblJpZ2h0IHx8IGN1cnJlbnQuc3R5bGUubWFyZ2luTGVmdCB8fCBjdXJyZW50LnN0eWxlLnRleHRBbGlnbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmVOb2Rlcy5sZW5ndGgsIG4sIGwsIHI7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbiA9IGxpbmVOb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIC8vIGluZGVudCBtYXJnaW5cclxuICAgICAgICAgICAgICAgIHIgPSBuLnN0eWxlLm1hcmdpblJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgbCA9IG4uc3R5bGUubWFyZ2luTGVmdDtcclxuICAgICAgICAgICAgICAgIGlmIChyIHx8IGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnN0eWxlLm1hcmdpblJpZ2h0ID0gbDtcclxuICAgICAgICAgICAgICAgICAgICBuLnN0eWxlLm1hcmdpbkxlZnQgPSByO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGV4dCBhbGlnblxyXG4gICAgICAgICAgICAgICAgciA9IG4uc3R5bGUudGV4dEFsaWduO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgPT09ICdsZWZ0Jykgbi5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAociA9PT0gJ3JpZ2h0Jykgbi5zdHlsZS50ZXh0QWxpZ24gPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2wgPSBjb250ZXh0LnRvb2w7XHJcbiAgICAgICAgICAgIGlmICh0b29sLmRpcikge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VUeHQodG9vbC5kaXIucXVlcnlTZWxlY3RvcignLnNlLXRvb2x0aXAtdGV4dCcpLCBsYW5nLnRvb2xiYXJbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuY2hhbmdlRWxlbWVudCh0b29sLmRpci5maXJzdEVsZW1lbnRDaGlsZCwgaWNvbnNbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvb2wuZGlyX2x0cikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ0bCkgdXRpbC5yZW1vdmVDbGFzcyh0b29sLmRpcl9sdHIsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdXRpbC5hZGRDbGFzcyh0b29sLmRpcl9sdHIsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvb2wuZGlyX3J0bCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ0bCkgdXRpbC5hZGRDbGFzcyh0b29sLmRpcl9ydGwsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdXRpbC5yZW1vdmVDbGFzcyh0b29sLmRpcl9ydGwsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfHVuZGVmaW5lZH0gaHRtbCBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENvbnRlbnRzOiBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0VmFsdWUgPSAoaHRtbCA9PT0gbnVsbCB8fCBodG1sID09PSB1bmRlZmluZWQpID8gJycgOiB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihodG1sLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5pbm5lckhUTUwgPSBjb252ZXJ0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNldENvbXBvbmVudHMoKTtcclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jb252ZXJ0SFRNTEZvckNvZGVWaWV3KGNvbnZlcnRWYWx1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29kZVZpZXcodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBpZnJhbWUncyBoZWFkIHRhZyBhbmQgYm9keSB0YWcgd2hlbiB1c2luZyB0aGUgXCJpZnJhbWVcIiBvciBcImZ1bGxQYWdlXCIgb3B0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjdHggeyBoZWFkOiBIVE1MIHN0cmluZywgYm9keTogSFRNTCBzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0SWZyYW1lQ29udGVudHM6IGZ1bmN0aW9uIChjdHgpIHtcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlmcmFtZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY3R4LmhlYWQpIHRoaXMuX3dkLmhlYWQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLl9fYWxsb3dlZFNjcmlwdFRhZyA/IGN0eC5oZWFkIDogY3R4LmhlYWQucmVwbGFjZSh0aGlzLl9fc2NyaXB0VGFnUmVnRXhwLCAnJyk7XHJcbiAgICAgICAgICAgIGlmIChjdHguYm9keSkgdGhpcy5fd2QuYm9keS5pbm5lckhUTUwgPSB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihjdHguYm9keSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q29tcG9uZW50cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGNvbnRlbnRzXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBvbmx5Q29udGVudHMgUmV0dXJuIG9ubHkgdGhlIGNvbnRlbnRzIG9mIHRoZSBib2R5IHdpdGhvdXQgaGVhZGVycyB3aGVuIHRoZSBcImZ1bGxQYWdlXCIgb3B0aW9uIGlzIHRydWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldENvbnRlbnRzOiBmdW5jdGlvbiAob25seUNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRzID0gdGhpcy5jbGVhbkhUTUwoY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuaW5uZXJIVE1MLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVySFRNTCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIHJlbmRlckhUTUwuaW5uZXJIVE1MID0gY29udGVudHM7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGl0YWJsZUVscyA9IHV0aWwuZ2V0TGlzdENoaWxkcmVuKHJlbmRlckhUTUwsIGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlZGl0YWJsZUVscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZWRpdGFibGVFbHNbaV0ucmVtb3ZlQXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZnVsbFBhZ2UgJiYgIW9ubHlDb250ZW50cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSB1dGlsLmdldEF0dHJpYnV0ZXNUb1N0cmluZyh0aGlzLl93ZC5ib2R5LCBbJ2NvbnRlbnRlZGl0YWJsZSddKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArIHRoaXMuX3dkLmhlYWQub3V0ZXJIVE1MICsgJzxib2R5ICcgKyBhdHRycyArICc+JyArIHJlbmRlckhUTUwuaW5uZXJIVE1MICsgJzwvYm9keT48L2h0bWw+JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJIVE1MLmlubmVySFRNTDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGNvbnRlbnRzIHdpdGggY29udGFpbmluZyBwYXJlbnQgZGl2KGRpdi5zdW4tZWRpdG9yLWVkaXRhYmxlKS5cclxuICAgICAgICAgKiA8ZGl2IGNsYXNzPVwic3VuLWVkaXRvci1lZGl0YWJsZVwiPntjb250ZW50c308L2Rpdj5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9ubHlDb250ZW50cyBSZXR1cm4gb25seSB0aGUgY29udGVudHMgb2YgdGhlIGJvZHkgd2l0aG91dCBoZWFkZXJzIHdoZW4gdGhlIFwiZnVsbFBhZ2VcIiBvcHRpb24gaXMgdHJ1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RnVsbENvbnRlbnRzOiBmdW5jdGlvbiAob25seUNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cInN1bi1lZGl0b3ItZWRpdGFibGUnICsgKG9wdGlvbnMucnRsID8gJyBzZS1ydGwnIDogJycpICsgJ1wiPicgKyB0aGlzLmdldENvbnRlbnRzKG9ubHlDb250ZW50cykgKyAnPC9kaXY+JztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBIVE1MIHN0cmluZyBhY2NvcmRpbmcgdG8gdGFnIHR5cGUgYW5kIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgICAgICogVXNlIG9ubHkgXCJjbGVhbkhUTUxcIlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXF1aXJlRm9ybWF0IElmIHRydWUsIHRleHQgbm9kZXMgdGhhdCBkbyBub3QgaGF2ZSBhIGZvcm1hdCBub2RlIGlzIHdyYXBwZWQgd2l0aCB0aGUgZm9ybWF0IHRhZy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tYWtlTGluZTogZnVuY3Rpb24gKG5vZGUsIHJlcXVpcmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFRhZyA9IG9wdGlvbnMuZGVmYXVsdFRhZztcclxuICAgICAgICAgICAgLy8gZWxlbWVudFxyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19kaXNhbGxvd2VkVGFnTmFtZVJlZ0V4cC50ZXN0KG5vZGUubm9kZU5hbWUpKSByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoL19fc2VfX3RhZy8udGVzdChub2RlLmNsYXNzTmFtZSkpIHJldHVybiBub2RlLm91dGVySFRNTDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMobm9kZSwgZnVuY3Rpb24oY3VycmVudCkgeyByZXR1cm4gdXRpbC5pc1NwYW5XaXRob3V0QXR0cihjdXJyZW50KSAmJiAhdXRpbC5nZXRQYXJlbnRFbGVtZW50KGN1cnJlbnQsIHV0aWwuaXNOb3RDaGVja2luZ05vZGUpOyB9KSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjaC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoW2ldLm91dGVySFRNTCA9IGNoW2ldLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcXVpcmVGb3JtYXQgfHwgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG5vZGUpIHx8IHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobm9kZSkgfHwgdXRpbC5pc0NvbXBvbmVudChub2RlKSB8fCB1dGlsLmlzRmlndXJlcyhub2RlKSB8fCAodXRpbC5pc0FuY2hvcihub2RlKSAmJiB1dGlsLmlzTWVkaWEobm9kZS5maXJzdEVsZW1lbnRDaGlsZCkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmlzU3BhbldpdGhvdXRBdHRyKG5vZGUpID8gbm9kZS5pbm5lckhUTUwgOiBub2RlLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIGRlZmF1bHRUYWcgKyAnPicgKyAodXRpbC5pc1NwYW5XaXRob3V0QXR0cihub2RlKSA/IG5vZGUuaW5uZXJIVE1MIDogbm9kZS5vdXRlckhUTUwpICsgJzwvJyArIGRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGV4dFxyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1aXJlRm9ybWF0KSByZXR1cm4gdXRpbC5fSFRNTENvbnZlcnRvcihub2RlLnRleHRDb250ZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRBcnJheSA9IG5vZGUudGV4dENvbnRlbnQuc3BsaXQoL1xcbi9nKTtcclxuICAgICAgICAgICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdExlbiA9IHRleHRBcnJheS5sZW5ndGgsIHRleHQ7IGkgPCB0TGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dEFycmF5W2ldLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dC5sZW5ndGggPiAwKSBodG1sICs9ICc8JyArIGRlZmF1bHRUYWcgKyAnPicgKyB1dGlsLl9IVE1MQ29udmVydG9yKHRleHQpICsgJzwvJyArIGRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb21tZW50c1xyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiB0aGlzLl9hbGxvd0hUTUxDb21tZW50cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc8IS0tJyArIG5vZGUudGV4dENvbnRlbnQudHJpbSgpICsgJy0tPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBhdHRyaWJ1dGUgdmFsdWVzIHN1Y2ggYXMgc3R5bGUgYW5kIGNvbnZlcnRzIHRhZ3MgdGhhdCBkbyBub3QgY29uZm9ybSB0byB0aGUgXCJodG1sNVwiIHN0YW5kYXJkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGFnQ29udmVydG9yOiBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCkgcmV0dXJuIHRleHQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlYyA9IG9wdGlvbnMuX3RleHRUYWdzTWFwO1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHRoaXMuX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCwgZnVuY3Rpb24gKG0sIHQsIG4sIHApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICsgKHR5cGVvZiBlY1tuXSA9PT0gJ3N0cmluZycgPyBlY1tuXSA6IG4pICsgKHAgPyAnICcgKyBwIDogJycpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIGRpc2FsbG93ZWQgdGFnc1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9kZWxldGVEaXNhbGxvd2VkVGFnczogZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWxcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKHRoaXMuX19kaXNhbGxvd2VkVGFnc1JlZ0V4cCwgJycpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPFthLXowLTldK1xcOlthLXowLTldK1tePl5cXC9dKj5bXj5dKjxcXC9bYS16MC05XStcXDpbYS16MC05XSs+L2dpLCAnJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIS9cXGJmb250XFxiL2kudGVzdCh0aGlzLm9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC8oPFxcLz8pZm9udChcXHM/KS9naSwgJyQxc3BhbiQyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UodGhpcy5lZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwLCAnJykucmVwbGFjZSh0aGlzLmVkaXRvclRhZ3NCbGFja2xpc3RSZWdFeHAsICcnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY29udmVydEZvbnRTaXplOiBmdW5jdGlvbiAodG8sIHNpemUpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0aCA9IHRoaXMuX3cuTWF0aDtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzaXplLm1hdGNoKC8oXFxkKyg/OlxcLlxcZCspPykoLispLyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpemVOdW0gPSB2YWx1ZSA/IHZhbHVlWzFdICogMSA6IHV0aWwuZm9udFZhbHVlTWFwW3NpemVdO1xyXG4gICAgICAgICAgICBjb25zdCBmcm9tID0gdmFsdWUgPyB2YWx1ZVsyXSA6ICdyZW0nO1xyXG4gICAgICAgICAgICBsZXQgcHhTaXplID0gc2l6ZU51bTtcclxuXHJcbiAgICAgICAgICAgIGlmICgvZW0vLnRlc3QoZnJvbSkpIHtcclxuICAgICAgICAgICAgICAgIHB4U2l6ZSA9IG1hdGgucm91bmQoc2l6ZU51bSAvIDAuMDYyNSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJvbSA9PT0gJ3B0Jykge1xyXG4gICAgICAgICAgICAgICAgcHhTaXplID0gbWF0aC5yb3VuZChzaXplTnVtICogMS4zMzMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyb20gPT09ICclJykge1xyXG4gICAgICAgICAgICAgICAgcHhTaXplID0gc2l6ZU51bSAvIDEwMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0bykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZW0nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJyUnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHhTaXplICogMC4wNjI1KS50b0ZpeGVkKDIpICsgdG87XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGguZmxvb3IocHhTaXplIC8gMS4zMzMpICsgdG87XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAvLyBweFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBweFNpemUgKyB0bztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jbGVhblN0eWxlOiBmdW5jdGlvbiAobSwgdiwgbmFtZSkge1xyXG4gICAgICAgICAgICBsZXQgc3YgPSAobS5tYXRjaCgvc3R5bGVcXHMqPVxccyooPzpcInwnKVteXCInXSooPzpcInwnKS8pIHx8IFtdKVswXTtcclxuICAgICAgICAgICAgaWYgKC9zcGFuL2kudGVzdChuYW1lKSAmJiAhc3YgJiYgKG0ubWF0Y2goLzxbXlxcc10rXFxzKC4rKS8pIHx8IFtdKVsxXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IChtLm1hdGNoKC9cXHNzaXplPVwiKFteXCJdKylcIi9pKSB8fCBbXSlbMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmYWNlID0gKG0ubWF0Y2goL1xcc2ZhY2U9XCIoW15cIl0rKVwiL2kpIHx8IFtdKVsxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKG0ubWF0Y2goL1xcc2NvbG9yPVwiKFteXCJdKylcIi9pKSB8fCBbXSlbMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSB8fCBmYWNlIHx8IGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3YgPSAnc3R5bGU9XCInICsgKHNpemUgPyAnZm9udC1zaXplOicgKyAodGhpcy51dGlsLmdldE51bWJlcihzaXplLzMuMzMzLCAxKSkgKyAncmVtOycgOiAnJykgKyAoZmFjZSA/ICdmb250LWZhbWlseTonICsgZmFjZSArICc7JyA6ICcnKSArIChjb2xvciA/ICdjb2xvcjonICsgY29sb3IgKyAnOycgOiAnJykgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc3YpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdikgdiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBzdi5yZXBsYWNlKC8mcXVvdDsvZywgJycpLm1hdGNoKHRoaXMuX2NsZWFuU3R5bGVSZWdFeHBbbmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZFN0eWxlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlLmxlbmd0aCwgcjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBzdHlsZVtpXS5tYXRjaCgvKFthLXpBLVowLTktXSspKDopKFteXCInXSspLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyICYmICEvaW5oZXJpdHxpbml0aWFsfHJldmVydHx1bnNldC9pLnRlc3QoclszXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSB1dGlsLmtlYmFiVG9DYW1lbENhc2UoclsxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMud3dDb21wdXRlZFN0eWxlW2tdLnJlcGxhY2UoL1wiL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSByWzNdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvbnRGYW1pbHknOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucGx1Z2lucy5mb250IHx8IG9wdGlvbnMuZm9udC5pbmRleE9mKGMpID09PSAtMSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvbnRTaXplJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBsdWdpbnMuZm9udFNpemUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NsZWFuU3R5bGVSZWdFeHAuZm9udFNpemVVbml0LnRlc3QoclswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbMF0gPSByWzBdLnJlcGxhY2UoKHJbMF0ubWF0Y2goLzpcXHMqKFteO10rKS8pIHx8IFtdKVsxXSwgdGhpcy5fY29udmVydEZvbnRTaXplLmJpbmQodGhpcywgb3B0aW9ucy5mb250U2l6ZVVuaXQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb2xvcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wbHVnaW5zLmZvbnRDb2xvciB8fCAvcmdiYVxcKChbMC05XStcXHMqLFxccyopezN9MFxcKXx3aW5kb3d0ZXh0L2kudGVzdChjKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tncm91bmRDb2xvcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wbHVnaW5zLmhpbGl0ZUNvbG9yIHx8IC9yZ2JhXFwoKFswLTldK1xccyosXFxzKil7M30wXFwpfHdpbmRvd3RleHQvaS50ZXN0KGMpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYgIT09IGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2VkU3R5bGUucHVzaChyWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3dlZFN0eWxlLmxlbmd0aCA+IDApIHYucHVzaCgnc3R5bGU9XCInICsgYWxsb3dlZFN0eWxlLmpvaW4oJzsnKSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGFnIGFuZCB0YWcgYXR0cmlidXRlIGNoZWNrIFJlZ0V4cCBmdW5jdGlvbi4gKHVzZWQgYnkgXCJjbGVhbkhUTUxcIiBhbmQgXCJjb252ZXJ0Q29udGVudHNGb3JFZGl0b3JcIilcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvd0xldmVsQ2hlY2sgUm93IGxldmVsIGNoZWNrXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG0gUmVnRXhwIHZhbHVlXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHQgUmVnRXhwIHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jbGVhblRhZ3M6IGZ1bmN0aW9uIChsb3dMZXZlbENoZWNrLCBtLCB0KSB7XHJcbiAgICAgICAgICAgIGlmICgvXjxbYS16MC05XStcXDpbYS16MC05XSsvaS50ZXN0KG0pKSByZXR1cm4gbTtcclxuXHJcbiAgICAgICAgICAgIGxldCB2ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgdGFnTmFtZSA9IHQubWF0Y2goLyg/ITwpW2EtekEtWjAtOVxcLV0rLylbMF0udG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJsYWNrbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBiQXR0ciA9IHRoaXMuX2F0dHJpYnV0ZXNUYWdzQmxhY2tsaXN0W3RhZ05hbWVdO1xyXG4gICAgICAgICAgICBtID0gbS5yZXBsYWNlKC9cXHMoPzpvblthLXpdKylcXHMqPVxccyooXCIpW15cIl0qXFwxL2lnLCAnJyk7XHJcbiAgICAgICAgICAgIGlmIChiQXR0cikgbSA9IG0ucmVwbGFjZShiQXR0ciwgJycpO1xyXG4gICAgICAgICAgICBlbHNlIG0gPSBtLnJlcGxhY2UodGhpcy5fYXR0cmlidXRlc0JsYWNrbGlzdFJlZ0V4cCwgJycpO1xyXG5cclxuICAgICAgICAgICAgLy8gd2hpdGVsaXN0XHJcbiAgICAgICAgICAgIGNvbnN0IHdBdHRyID0gdGhpcy5fYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3RbdGFnTmFtZV07XHJcbiAgICAgICAgICAgIGlmICh3QXR0cikgdiA9IG0ubWF0Y2god0F0dHIpO1xyXG4gICAgICAgICAgICBlbHNlIHYgPSBtLm1hdGNoKGxvd0xldmVsQ2hlY2sgPyB0aGlzLl9hdHRyaWJ1dGVzV2hpdGVsaXN0UmVnRXhwIDogdGhpcy5fYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cF9hbGxfZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAvLyBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgaWYgKGxvd0xldmVsQ2hlY2sgfHwgdGFnTmFtZSA9PT0gJ3NwYW4nIHx8IHRhZ05hbWUgPT09ICdsaScgfHwgIHRoaXMuX2NsZWFuU3R5bGVSZWdFeHBbdGFnTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YWdOYW1lID09PSAnYScpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdiA9IG0ubWF0Y2goLyg/Oig/OmlkfG5hbWUpXFxzKj1cXHMqKD86XCJ8JylbXlwiJ10qKD86XCJ8JykpL2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXYpIHYgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdi5wdXNoKHN2WzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2IHx8ICEvc3R5bGU9L2kudGVzdCh2LnRvU3RyaW5nKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdzcGFuJyB8fCB0YWdOYW1lID09PSAnbGknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLl9jbGVhblN0eWxlKG0sIHYsICdzcGFuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBpZiAodGhpcy5fY2xlYW5TdHlsZVJlZ0V4cFt0YWdOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5fY2xlYW5TdHlsZShtLCB2LCB0YWdOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eKFB8RElWfEhbMS02XXxQUkUpJC9pLnRlc3QodGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuX2NsZWFuU3R5bGUobSwgdiwgJ2Zvcm1hdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN2ID0gbS5tYXRjaCgvc3R5bGVcXHMqPVxccyooPzpcInwnKVteXCInXSooPzpcInwnKS8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN2ICYmICF2KSB2ID0gW3N2WzBdXTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN2ICYmICF2LnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIC9ec3R5bGUvLnRlc3Qodi50cmltKCkpOyB9KSkgdi5wdXNoKHN2WzBdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZmlndXJlXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzRmlndXJlcyh0YWdOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3YgPSBtLm1hdGNoKC9zdHlsZVxccyo9XFxzKig/OlwifCcpW15cIiddKig/OlwifCcpLyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXYpIHYgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmIChzdikgdi5wdXNoKHN2WzBdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2Lmxlbmd0aCwgYTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGxvd0xldmVsQ2hlY2sgJiYgL15jbGFzcz1cIig/IShfX3NlX198c2UtfGthdGV4KSkvLnRlc3QodltpXS50cmltKCkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBhID0gKC9eKD86aHJlZnxzcmMpXFxzKj1cXHMqKCd8XCJ8XFxzKSpqYXZhc2NyaXB0XFxzKlxcOi9pLnRlc3QodltpXS50cmltKCkpID8gJycgOiB2W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB0ICs9ICgvXlxccy8udGVzdChhKSA/ICcnIDogJyAnKSArIGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmVzIGlmIGZvcm1hdHRpbmcgaXMgcmVxdWlyZWQgYW5kIHJldHVybnMgYSBkb21UcmVlXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBkb20gZG9jdW1lbnRGcmFnbWVudFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtFbGVtZW50fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2VkaXRGb3JtYXQ6IGZ1bmN0aW9uIChkb20pIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gJycsIGY7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBUcmVlID0gZG9tLmNoaWxkTm9kZXM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGVtcFRyZWUubGVuZ3RoLCBuOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG4gPSB0ZW1wVHJlZVtpXTtcclxuICAgICAgICAgICAgICAgIGlmICAobi5ub2RlVHlwZSA9PT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9ICc8IS0tICcgKyBuLnRleHRDb250ZW50ICsgJyAtLT4nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdXRpbC5pc0Zvcm1hdEVsZW1lbnQobikgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobikgJiYgIXV0aWwuaXNDb21wb25lbnQobikgJiYgIS9tZXRhL2kudGVzdChuLm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZikgZiA9IHV0aWwuY3JlYXRlRWxlbWVudChvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGYuYXBwZW5kQ2hpbGQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgaS0tOyBsZW4tLTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gZi5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBuLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGYpIHZhbHVlICs9IGYub3V0ZXJIVE1MO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHZhbHVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY29udmVydExpc3RDZWxsOiBmdW5jdGlvbiAoZG9tVHJlZSkge1xyXG4gICAgICAgICAgICBsZXQgaHRtbCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRvbVRyZWUubGVuZ3RoLCBub2RlOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb21UcmVlW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3Qobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSBub2RlLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNMaXN0Q2VsbChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9IG5vZGUub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPGxpPicgKyhub2RlLmlubmVySFRNTC50cmltKCkgfHwgJzxicj4nKSArICc8L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG5vZGUpICYmICF1dGlsLmlzVGFibGUobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSB0aGlzLl9jb252ZXJ0TGlzdENlbGwobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPGxpPicgKyBub2RlLm91dGVySFRNTCArICc8L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8bGk+JyArIChub2RlLnRleHRDb250ZW50IHx8ICc8YnI+JykgKyAnPC9saT4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNGb3JtYXREYXRhOiBmdW5jdGlvbiAoZG9tVHJlZSkge1xyXG4gICAgICAgICAgICBsZXQgcmVxdWlyZUZvcm1hdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRvbVRyZWUubGVuZ3RoLCB0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHQgPSBkb21UcmVlW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubm9kZVR5cGUgPT09IDEgJiYgIXV0aWwuaXNUZXh0U3R5bGVFbGVtZW50KHQpICYmICF1dGlsLmlzQnJlYWsodCkgJiYgIXRoaXMuX19kaXNhbGxvd2VkVGFnTmFtZVJlZ0V4cC50ZXN0KHQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZUZvcm1hdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXF1aXJlRm9ybWF0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjbGVhbiBIVE1MIGNvZGUgZm9yIGVkaXRvclxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfG51bGx9IHdoaXRlbGlzdCBSZWd1bGFyIGV4cHJlc3Npb24gb2YgYWxsb3dlZCB0YWdzLlxyXG4gICAgICAgICAqIFJlZ0V4cCBvYmplY3QgaXMgY3JlYXRlIGJ5IHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdCBtZXRob2QuIChjb3JlLnBhc3RlVGFnc1doaXRlbGlzdFJlZ0V4cClcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB8bnVsbH0gYmxhY2tsaXN0IFJlZ3VsYXIgZXhwcmVzc2lvbiBvZiBkaXNhbGxvd2VkIHRhZ3MuXHJcbiAgICAgICAgICogUmVnRXhwIG9iamVjdCBpcyBjcmVhdGUgYnkgdXRpbC5jcmVhdGVUYWdzQmxhY2tsaXN0IG1ldGhvZC4gKGNvcmUucGFzdGVUYWdzQmxhY2tsaXN0UmVnRXhwKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xlYW5IVE1MOiBmdW5jdGlvbiAoaHRtbCwgd2hpdGVsaXN0LCBibGFja2xpc3QpIHtcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnN0cmljdE1vZGUpIHJldHVybiBodG1sO1xyXG5cclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuX2RlbGV0ZURpc2FsbG93ZWRUYWdzKHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcodXRpbC5odG1sQ29tcHJlc3MoaHRtbCksICd0ZXh0L2h0bWwnKS5ib2R5LmlubmVySFRNTCkucmVwbGFjZSgvKDxbYS16QS1aMC05XFwtXSspW14+XSooPz0+KS9nLCB0aGlzLl9jbGVhblRhZ3MuYmluZCh0aGlzLCB0cnVlKSkucmVwbGFjZSgvPGJyXFwvPz4kL2ksICcnKTtcclxuICAgICAgICAgICAgY29uc3QgZG9tID0gX2QuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLl9jb25zaXN0ZW5jeUNoZWNrT2ZIVE1MKGRvbSwgdGhpcy5faHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwLCB0aGlzLl9odG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAsIHRoaXMuX2NsYXNzTmFtZUZpbHRlcik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuY2xlYW5IVE1MLmNvbnNpc3RlbmN5Q2hlY2suZmFpbF0gJyArIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlZFRhZ3NJbmZvICYmIHRoaXMubWFuYWdlZFRhZ3NJbmZvLnF1ZXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Q29tcExpc3QgPSBkb20ucXVlcnlTZWxlY3RvckFsbCh0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGV4dENvbXBMaXN0Lmxlbmd0aCwgaW5pdE1ldGhvZCwgY2xhc3NMaXN0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc0xpc3QgPSBbXS5zbGljZS5jYWxsKHRleHRDb21wTGlzdFtpXS5jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2xhc3NMaXN0Lmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kID0gdGhpcy5tYW5hZ2VkVGFnc0luZm8ubWFwW2NsYXNzTGlzdFtjXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0TWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kKHRleHRDb21wTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGRvbVRyZWUgPSBkb20uY2hpbGROb2RlcztcclxuICAgICAgICAgICAgbGV0IGNsZWFuSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBjb25zdCByZXF1aXJlRm9ybWF0ID0gdGhpcy5faXNGb3JtYXREYXRhKGRvbVRyZWUpO1xyXG5cclxuICAgICAgICAgICAgaWYocmVxdWlyZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZG9tVHJlZSA9IHRoaXMuX2VkaXRGb3JtYXQoZG9tKS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZG9tVHJlZS5sZW5ndGgsIHQ7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdCA9IGRvbVRyZWVbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2FsbG93ZWRTY3JpcHRSZWdFeHAudGVzdCh0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0Lm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0aGlzLl9tYWtlTGluZSh0LCByZXF1aXJlRm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xlYW5IVE1MID0gdXRpbC5odG1sUmVtb3ZlV2hpdGVTcGFjZShjbGVhbkhUTUwpO1xyXG4gICAgICAgICAgICBpZiAoIWNsZWFuSFRNTCkge1xyXG4gICAgICAgICAgICAgICAgY2xlYW5IVE1MID0gaHRtbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh3aGl0ZWxpc3QpIGNsZWFuSFRNTCA9IGNsZWFuSFRNTC5yZXBsYWNlKHR5cGVvZiB3aGl0ZWxpc3QgPT09ICdzdHJpbmcnID8gdXRpbC5jcmVhdGVUYWdzV2hpdGVsaXN0KHdoaXRlbGlzdCkgOiB3aGl0ZWxpc3QsICcnKTtcclxuICAgICAgICAgICAgICAgIGlmIChibGFja2xpc3QpIGNsZWFuSFRNTCA9IGNsZWFuSFRNTC5yZXBsYWNlKHR5cGVvZiBibGFja2xpc3QgPT09ICdzdHJpbmcnID8gdXRpbC5jcmVhdGVUYWdzQmxhY2tsaXN0KGJsYWNrbGlzdCkgOiBibGFja2xpc3QsICcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhZ0NvbnZlcnRvcihjbGVhbkhUTUwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyBjb250ZW50cyBpbnRvIGEgZm9ybWF0IHRoYXQgY2FuIGJlIHBsYWNlZCBpbiBhbiBlZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgY29udGVudHNcclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnZlcnRDb250ZW50c0ZvckVkaXRvcjogZnVuY3Rpb24gKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zdHJpY3RNb2RlKSByZXR1cm4gY29udGVudHM7XHJcbiAgICAgICAgICAgIGNvbnRlbnRzID0gdGhpcy5fZGVsZXRlRGlzYWxsb3dlZFRhZ3ModGhpcy5fcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh1dGlsLmh0bWxDb21wcmVzcyhjb250ZW50cyksICd0ZXh0L2h0bWwnKS5ib2R5LmlubmVySFRNTCkucmVwbGFjZSgvKDxbYS16QS1aMC05XFwtXSspW14+XSooPz0+KS9nLCB0aGlzLl9jbGVhblRhZ3MuYmluZCh0aGlzLCB0cnVlKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbSA9IF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGNvbnRlbnRzKTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLl9jb25zaXN0ZW5jeUNoZWNrT2ZIVE1MKGRvbSwgdGhpcy5faHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwLCB0aGlzLl9odG1sQ2hlY2tCbGFja2xpc3RSZWdFeHAsIHRoaXMuX2NsYXNzTmFtZUZpbHRlcik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTVU5FRElUT1IuY29udmVydENvbnRlbnRzRm9yRWRpdG9yLmNvbnNpc3RlbmN5Q2hlY2suZmFpbF0gJyArIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlZFRhZ3NJbmZvICYmIHRoaXMubWFuYWdlZFRhZ3NJbmZvLnF1ZXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Q29tcExpc3QgPSBkb20ucXVlcnlTZWxlY3RvckFsbCh0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGV4dENvbXBMaXN0Lmxlbmd0aCwgaW5pdE1ldGhvZCwgY2xhc3NMaXN0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc0xpc3QgPSBbXS5zbGljZS5jYWxsKHRleHRDb21wTGlzdFtpXS5jbGFzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gY2xhc3NMaXN0Lmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kID0gdGhpcy5tYW5hZ2VkVGFnc0luZm8ubWFwW2NsYXNzTGlzdFtjXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0TWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0TWV0aG9kKHRleHRDb21wTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZG9tVHJlZSA9IGRvbS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICBsZXQgY2xlYW5IVE1MID0gJycsIHAgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdDsgaSA8IGRvbVRyZWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHQgPSBkb21UcmVlW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fYWxsb3dlZFNjcmlwdFJlZ0V4cC50ZXN0KHQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5IVE1MICs9IHQub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0Zvcm1hdEVsZW1lbnQodCkgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQodCkgJiYgIXV0aWwuaXNDb21wb25lbnQodCkgJiYgIXV0aWwuaXNGaWd1cmVzKHQpICYmIHQubm9kZVR5cGUgIT09IDggJiYgIS9fX3NlX190YWcvLnRlc3QodC5jbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwKSBwID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVRyZWVbaSArIDFdICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChkb21UcmVlW2kgKyAxXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0aGlzLl9tYWtlTGluZShwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0aGlzLl9tYWtlTGluZSh0LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocCkgY2xlYW5IVE1MICs9IHRoaXMuX21ha2VMaW5lKHAsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNsZWFuSFRNTC5sZW5ndGggPT09IDApIHJldHVybiAnPCcgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPjxicj48LycgKyBvcHRpb25zLmRlZmF1bHRUYWcgKyAnPic7XHJcblxyXG4gICAgICAgICAgICBjbGVhbkhUTUwgPSB1dGlsLmh0bWxSZW1vdmVXaGl0ZVNwYWNlKGNsZWFuSFRNTCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YWdDb252ZXJ0b3IoY2xlYW5IVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydHMgd3lzaXd5ZyBhcmVhIGVsZW1lbnQgaW50byBhIGZvcm1hdCB0aGF0IGNhbiBiZSBwbGFjZWQgaW4gYW4gZWRpdG9yIG9mIGNvZGUgdmlldyBtb2RlXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gaHRtbCBXWVNJV1lHIGVsZW1lbnQgKGNvbnRleHQuZWxlbWVudC53eXNpd3lnKSBvciBIVE1MIHN0cmluZy5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNvbXAgSWYgdHJ1ZSwgZG9lcyBub3QgbGluZSBicmVhayBhbmQgaW5kZW50YXRpb24gb2YgdGFncy5cclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnZlcnRIVE1MRm9yQ29kZVZpZXc6IGZ1bmN0aW9uIChodG1sLCBjb21wKSB7XHJcbiAgICAgICAgICAgIGxldCByZXR1cm5IVE1MID0gJyc7XHJcbiAgICAgICAgICAgIGNvbnN0IHdSZWdFeHAgPSBfdy5SZWdFeHA7XHJcbiAgICAgICAgICAgIGNvbnN0IGJyUmVnID0gbmV3IHdSZWdFeHAoJ14oQkxPQ0tRVU9URXxQUkV8VEFCTEV8VEhFQUR8VEJPRFl8VFJ8VEh8VER8T0x8VUx8SU1HfElGUkFNRXxWSURFT3xBVURJT3xGSUdVUkV8RklHQ0FQVElPTnxIUnxCUnxDQU5WQVN8U0VMRUNUKSQnLCAnaScpO1xyXG4gICAgICAgICAgICBjb25zdCB3RG9jID0gdHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnID8gX2QuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCkgOiBodG1sO1xyXG4gICAgICAgICAgICBjb25zdCBpc0Zvcm1hdCA9IGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiB0aGlzLmlzRm9ybWF0RWxlbWVudChjdXJyZW50KSB8fCB0aGlzLmlzQ29tcG9uZW50KGN1cnJlbnQpOyB9LmJpbmQodXRpbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJyQ2hhciA9IGNvbXAgPyAnJyA6ICdcXG4nO1xyXG5cclxuICAgICAgICAgICAgbGV0IGluZGVudFNpemUgPSBjb21wID8gMCA6IHRoaXMuX3ZhcmlhYmxlLmNvZGVJbmRlbnQgKiAxO1xyXG4gICAgICAgICAgICBpbmRlbnRTaXplID0gaW5kZW50U2l6ZSA+IDAgPyBuZXcgX3cuQXJyYXkoaW5kZW50U2l6ZSArIDEpLmpvaW4oJyAnKSA6ICcnO1xyXG5cclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMgKGVsZW1lbnQsIGluZGVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50UmVnVGVzdCA9IGJyUmVnLnRlc3QoZWxlbWVudC5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50SW5kZW50ID0gKGVsZW1lbnRSZWdUZXN0ID8gaW5kZW50IDogJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGgsIG5vZGUsIGJyLCBsaW5lQlIsIG5vZGVSZWdUZXN0LCB0YWcsIHRhZ0luZGVudDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVSZWdUZXN0ID0gYnJSZWcudGVzdChub2RlLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBiciA9IG5vZGVSZWdUZXN0ID8gYnJDaGFyIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZUJSID0gaXNGb3JtYXQobm9kZSkgJiYgIWVsZW1lbnRSZWdUZXN0ICYmICEvXihUSHxURCkkL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSA/IGJyQ2hhciA6ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5IVE1MICs9ICdcXG48IS0tICcgKyBub2RlLnRleHRDb250ZW50LnRyaW0oKSArICcgLS0+JyArIGJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdChub2RlLnBhcmVudEVsZW1lbnQpKSByZXR1cm5IVE1MICs9IHV0aWwuX0hUTUxDb252ZXJ0b3IoL15cXG4rJC8udGVzdChub2RlLmRhdGEpID8gJycgOiBub2RlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuSFRNTCArPSAoL15IUiQvaS50ZXN0KG5vZGUubm9kZU5hbWUpID8gYnJDaGFyIDogJycpICsgKC9eUFJFJC9pLnRlc3Qobm9kZS5wYXJlbnRFbGVtZW50Lm5vZGVOYW1lKSAmJiAvXkJSJC9pLnRlc3Qobm9kZS5ub2RlTmFtZSkgPyAnJyA6IGVsZW1lbnRJbmRlbnQpICsgbm9kZS5vdXRlckhUTUwgKyBicjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUub3V0ZXJIVE1MKSB7IC8vIElFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybkhUTUwgKz0gbmV3IF93LlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWcgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0luZGVudCA9IGVsZW1lbnRJbmRlbnQgfHwgbm9kZVJlZ1Rlc3QgPyBpbmRlbnQgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuSFRNTCArPSAobGluZUJSIHx8IChlbGVtZW50UmVnVGVzdCA/ICcnIDogYnIpKSArIHRhZ0luZGVudCArIG5vZGUub3V0ZXJIVE1MLm1hdGNoKHdSZWdFeHAoJzwnICsgdGFnICsgJ1tePl0qPicsICdpJykpWzBdICsgYnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMobm9kZSwgaW5kZW50ICsgaW5kZW50U2l6ZSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5IVE1MICs9ICgvXFxuJC8udGVzdChyZXR1cm5IVE1MKSA/IHRhZ0luZGVudCA6ICcnKSArICc8LycgKyB0YWcgKyAnPicgKyAobGluZUJSIHx8IGJyIHx8IGVsZW1lbnRSZWdUZXN0ID8gYnJDaGFyIDogJycgfHwgL14oVEh8VEQpJC9pLnRlc3Qobm9kZS5ub2RlTmFtZSkgPyBickNoYXIgOiAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KHdEb2MsICcnKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuSFRNTC50cmltKCkgKyBickNoYXI7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBhbiBldmVudCB0byBkb2N1bWVudC5cclxuICAgICAgICAgKiBXaGVuIGNyZWF0ZWQgYXMgYW4gSWZyYW1lLCB0aGUgc2FtZSBldmVudCBpcyBhZGRlZCB0byB0aGUgZG9jdW1lbnQgaW4gdGhlIElmcmFtZS5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBFdmVudCB0eXBlXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgRXZlbnQgbGlzdGVuZXJcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUNhcHR1cmUgVXNlIGV2ZW50IGNhcHR1cmVcclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGREb2NFdmVudDogZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIF9kLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dkLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSBldmVudHMgZnJvbSBkb2N1bWVudC5cclxuICAgICAgICAgKiBXaGVuIGNyZWF0ZWQgYXMgYW4gSWZyYW1lLCB0aGUgZXZlbnQgb2YgdGhlIGRvY3VtZW50IGluc2lkZSB0aGUgSWZyYW1lIGlzIGFsc28gcmVtb3ZlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBFdmVudCB0eXBlXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgRXZlbnQgbGlzdGVuZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVEb2NFdmVudDogZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIF9kLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dkLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IG51bWJlciBvZiBjaGFyYWN0ZXJzIGlzIGNvdW50ZWQgYW5kIGRpc3BsYXllZC5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXRUZXh0IFRleHQgYWRkZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY2hhckNvdW50OiBmdW5jdGlvbiAoaW5wdXRUZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heENoYXJDb3VudCA9IG9wdGlvbnMubWF4Q2hhckNvdW50O1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudFR5cGUgPSBvcHRpb25zLmNoYXJDb3VudGVyVHlwZTtcclxuICAgICAgICAgICAgbGV0IG5leHRDaGFyQ291bnQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoISFpbnB1dFRleHQpIG5leHRDaGFyQ291bnQgPSB0aGlzLmdldENoYXJMZW5ndGgoaW5wdXRUZXh0LCBjb3VudFR5cGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2V0Q2hhckNvdW50KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobWF4Q2hhckNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG92ZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gZnVuY3Rpb25zLmdldENoYXJDb3VudChjb3VudFR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA+IG1heENoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hhckNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbGljZVBvc2l0aW9uID0gcmFuZ2UuZW5kT2Zmc2V0IC0gKGNvdW50IC0gbWF4Q2hhckNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLnRleHRDb250ZW50ID0gdGV4dC5zbGljZSgwLCBzbGljZVBvc2l0aW9uIDwgMCA/IDAgOiBzbGljZVBvc2l0aW9uKSArIHRleHQuc2xpY2UocmFuZ2UuZW5kT2Zmc2V0LCB0ZXh0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UocmFuZ2UuZW5kQ29udGFpbmVyLCBlbmRPZmYsIHJhbmdlLmVuZENvbnRhaW5lciwgZW5kT2ZmKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjb3VudCArIG5leHRDaGFyQ291bnQpID4gbWF4Q2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsQ291bnRlckJsaW5rKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDaGFyQ291bnQgPiAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBXaGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBpZiBpdCBpcyBncmVhdGVyIHRoYW4gXCJvcHRpb25zLm1heENoYXJDb3VudFwiLCBmYWxzZSBpcyByZXR1cm5lZC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV8U3RyaW5nfSBlbGVtZW50IEVsZW1lbnQgbm9kZSBvciBTdHJpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gY2hhckNvdW50ZXJUeXBlIGNoYXJDb3VudGVyVHlwZS4gSWYgaXQgaXMgbnVsbCwgdGhlIG9wdGlvbnMuY2hhckNvdW50ZXJUeXBlXHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hlY2tDaGFyQ291bnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBjaGFyQ291bnRlclR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4Q2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudFR5cGUgPSBjaGFyQ291bnRlclR5cGUgfHwgb3B0aW9ucy5jaGFyQ291bnRlclR5cGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmdldENoYXJMZW5ndGgoKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJyA/IGVsZW1lbnQgOiAodGhpcy5fY2hhclR5cGVIVE1MICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEpID8gZWxlbWVudC5vdXRlckhUTUwgOiBlbGVtZW50LnRleHRDb250ZW50KSwgY291bnRUeXBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPiAwICYmIGxlbmd0aCArIGZ1bmN0aW9ucy5nZXRDaGFyQ291bnQoY291bnRUeXBlKSA+IG9wdGlvbnMubWF4Q2hhckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbENvdW50ZXJCbGluaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBsZW5ndGggb2YgdGhlIGNvbnRlbnQuXHJcbiAgICAgICAgICogRGVwZW5kaW5nIG9uIHRoZSBvcHRpb24sIHRoZSBsZW5ndGggb2YgdGhlIGNoYXJhY3RlciBpcyB0YWtlbi4gKGNoYXJDb3VudGVyVHlwZSlcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudCBDb250ZW50IHRvIGNvdW50XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNoYXJDb3VudGVyVHlwZSBvcHRpb25zLmNoYXJDb3VudGVyVHlwZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0Q2hhckxlbmd0aDogZnVuY3Rpb24gKGNvbnRlbnQsIGNoYXJDb3VudGVyVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gL2J5dGUvLnRlc3QoY2hhckNvdW50ZXJUeXBlKSA/IHV0aWwuZ2V0Qnl0ZUxlbmd0aChjb250ZW50KSA6IGNvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCBidXR0b25zIG9mIHRoZSByZXNwb25zaXZlIHRvb2xiYXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVzZXRSZXNwb25zaXZlVG9vbGJhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zaXZlU2l6ZSA9IGV2ZW50Ll9yZXNwb25zaXZlQnV0dG9uU2l6ZTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVTaXplKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdyA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGNvcmUuX2lzQmFsbG9vbiB8fCBjb3JlLl9pc0lubGluZSkgJiYgb3B0aW9ucy50b29sYmFyV2lkdGggPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHcgPSBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdyA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCByZXNwb25zaXZlV2lkdGggPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gcmVzcG9uc2l2ZVNpemUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodyA8IHJlc3BvbnNpdmVTaXplW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmVXaWR0aCA9IHJlc3BvbnNpdmVTaXplW2ldICsgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuX3Jlc3BvbnNpdmVDdXJyZW50U2l6ZSAhPT0gcmVzcG9uc2l2ZVdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Jlc3BvbnNpdmVDdXJyZW50U2l6ZSA9IHJlc3BvbnNpdmVXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnMuc2V0VG9vbGJhckJ1dHRvbnMoZXZlbnQuX3Jlc3BvbnNpdmVCdXR0b25zW3Jlc3BvbnNpdmVXaWR0aF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCB0aGUgY2hhciBjb3VudCB0byBjaGFyQ291bnRlciBlbGVtZW50IHRleHRDb250ZW50LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldENoYXJDb3VudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC5lbGVtZW50LmNoYXJDb3VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uIChmdW5jdGlvbnMsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0Q29udGVudCAmJiBmdW5jdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IGZ1bmN0aW9ucy5nZXRDaGFyQ291bnQob3B0aW9ucy5jaGFyQ291bnRlclR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0uYmluZChjb250ZXh0LmVsZW1lbnQuY2hhckNvdW50ZXIsIGZ1bmN0aW9ucywgb3B0aW9ucyksIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBjaGFyYWN0ZXIgY291bnRlciBibGlua3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY2FsbENvdW50ZXJCbGluazogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFyV3JhcHBlciA9IGNvbnRleHQuZWxlbWVudC5jaGFyV3JhcHBlcjtcclxuICAgICAgICAgICAgaWYgKGNoYXJXcmFwcGVyICYmICF1dGlsLmhhc0NsYXNzKGNoYXJXcmFwcGVyLCAnc2UtYmxpbmsnKSkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhjaGFyV3JhcHBlciwgJ3NlLWJsaW5rJyk7XHJcbiAgICAgICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNoYXJXcmFwcGVyLCAnc2UtYmxpbmsnKTtcclxuICAgICAgICAgICAgICAgIH0sIDYwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgdGhlIGNvbXBvbmVudHMgc3VjaCBhcyBpbWFnZSBhbmQgdmlkZW8gYW5kIG1vZGlmeSB0aGVtIGFjY29yZGluZyB0byB0aGUgZm9ybWF0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NoZWNrQ29tcG9uZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5fZmlsZUluZm9QbHVnaW5zQ2hlY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbmZvUGx1Z2luc0NoZWNrW2ldKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSW5pdGlhbGl6ZSB0aGUgaW5mb3JtYXRpb24gb2YgdGhlIGNvbXBvbmVudHMuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVzZXRDb21wb25lbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9maWxlSW5mb1BsdWdpbnNSZXNldC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsZUluZm9QbHVnaW5zUmVzZXRbaV0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgbWV0aG9kIGluIHRoZSBjb2RlIHZpZXcgYXJlYVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldENvZGVWaWV3OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yLmdldERvYygpLnNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IG1ldGhvZCBpbiB0aGUgY29kZSB2aWV3IGFyZWFcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXRDb2RlVmlldzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yID8gb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yLmdldERvYygpLmdldFZhbHVlKCkgOiBjb250ZXh0LmVsZW1lbnQuY29kZS52YWx1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gcmVtb3ZlIGNsYXNzLCBkaXNwbGF5IHRleHQuXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheXxudWxsfSBpZ25vcmVkTGlzdCBJZ29ucmVkIGJ1dHRvbiBsaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldEtleUVmZmVjdDogZnVuY3Rpb24gKGlnbm9yZWRMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmRNYXAgPSB0aGlzLmNvbW1hbmRNYXA7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVBsdWdpbnMgPSB0aGlzLmFjdGl2ZVBsdWdpbnM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gY29tbWFuZE1hcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZWRMaXN0LmluZGV4T2Yoa2V5KSA+IC0xIHx8ICF1dGlsLmhhc093bihjb21tYW5kTWFwLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVQbHVnaW5zLmluZGV4T2Yoa2V5KSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luc1trZXldLmFjdGl2ZS5jYWxsKHRoaXMsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kTWFwLk9VVERFTlQgJiYgL15PVVRERU5UJC9pLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ltcG9ydGFudERpc2FibGVkKGNvbW1hbmRNYXAuT1VUREVOVCkpIGNvbW1hbmRNYXAuT1VUREVOVC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmRNYXAuSU5ERU5UICYmIC9eSU5ERU5UJC9pLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ltcG9ydGFudERpc2FibGVkKGNvbW1hbmRNYXAuSU5ERU5UKSkgY29tbWFuZE1hcC5JTkRFTlQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvbW1hbmRNYXBba2V5XSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpeiBjb3JlIHZhcmlhYmxlXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZWxvYWQgSXMgcmVsb29hZD9cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2luaXRIVE1MIGluaXRpYWwgaHRtbCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbiAocmVsb2FkLCBfaW5pdEhUTUwpIHtcclxuICAgICAgICAgICAgY29uc3Qgd1JlZ0V4cCA9IF93LlJlZ0V4cDtcclxuICAgICAgICAgICAgdGhpcy5fd3cgPSBvcHRpb25zLmlmcmFtZSA/IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuY29udGVudFdpbmRvdyA6IF93O1xyXG4gICAgICAgICAgICB0aGlzLl93ZCA9IF9kO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFyVHlwZUhUTUwgPSBvcHRpb25zLmNoYXJDb3VudGVyVHlwZSA9PT0gJ2J5dGUtaHRtbCc7XHJcbiAgICAgICAgICAgIHRoaXMud3dDb21wdXRlZFN0eWxlID0gX3cuZ2V0Q29tcHV0ZWRTdHlsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VkaXRvckhlaWdodCA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLl9lZGl0b3JIZWlnaHRQYWRkaW5nID0gdXRpbC5nZXROdW1iZXIodGhpcy53d0NvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSkgKyB1dGlsLmdldE51bWJlcih0aGlzLnd3Q29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpKTtcclxuICAgICAgICAgICAgdGhpcy5fY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRlc3QodikgPyB2IDogJyc7XHJcbiAgICAgICAgICAgIH0uYmluZChvcHRpb25zLmFsbG93ZWRDbGFzc05hbWVzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNQcmVmaXggPSAob3B0aW9ucy5fX2FsbG93ZWRTY3JpcHRUYWcgPyAnJyA6ICdzY3JpcHR8Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuX19zY3JpcHRUYWdSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnPChzY3JpcHQpW14+XSo+KFtcXFxcc1xcXFxTXSo/KTxcXFxcL1xcXFwxPnw8c2NyaXB0W14+XSpcXFxcLz8+JywgJ2dpJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX19kaXNhbGxvd2VkVGFnc1JlZ0V4cCA9IG5ldyB3UmVnRXhwKCc8KCcgKyBzUHJlZml4ICsgJ3N0eWxlKVtePl0qPihbXFxcXHNcXFxcU10qPyk8XFxcXC9cXFxcMT58PCgnICsgc1ByZWZpeCArICdzdHlsZSlbXj5dKlxcXFwvPz4nLCAnZ2knKTtcclxuICAgICAgICAgICAgdGhpcy5fX2Rpc2FsbG93ZWRUYWdOYW1lUmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArIHNQcmVmaXggKyAnbWV0YXxsaW5rfHN0eWxlfFthLXpdK1xcOlthLXpdKykkJywgJ2knKTtcclxuICAgICAgICAgICAgdGhpcy5fX2FsbG93ZWRTY3JpcHRSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXicgKyAob3B0aW9ucy5fX2FsbG93ZWRTY3JpcHRUYWcgPyAnc2NyaXB0JyA6ICcnKSArICckJywgJ2knKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZnJhbWUgJiYgdHlwZW9mIF93LlNoYWRvd1Jvb3QgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWU7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuc2hhZG93Um9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaGFkb3dSb290ID0gY2hpbGQuc2hhZG93Um9vdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIF93LlNoYWRvd1Jvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hhZG93Um9vdCA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NoYWRvd1Jvb3QpIHRoaXMuX3NoYWRvd1Jvb3RDb250cm9sbGVyRXZlbnRUYXJnZXQgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IGRpc2FsbG93IHRleHQgbm9kZXNcclxuICAgICAgICAgICAgY29uc3QgZGlzYWxsb3dUZXh0VGFncyA9IF93Lk9iamVjdC5rZXlzKG9wdGlvbnMuX3RleHRUYWdzTWFwKTtcclxuICAgICAgICAgICAgY29uc3QgYWxsb3dUZXh0VGFncyA9ICFvcHRpb25zLmFkZFRhZ3NXaGl0ZWxpc3QgPyBbXSA6IG9wdGlvbnMuYWRkVGFnc1doaXRlbGlzdC5zcGxpdCgnfCcpLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gL2J8aXxpbnN8c3xzdHJpa2UvaS50ZXN0KHYpOyB9KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxvd1RleHRUYWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNhbGxvd1RleHRUYWdzLnNwbGljZShkaXNhbGxvd1RleHRUYWdzLmluZGV4T2YoYWxsb3dUZXh0VGFnc1tpXS50b0xvd2VyQ2FzZSgpKSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZGlzYWxsb3dlZFRleHRUYWdzUmVnRXhwID0gZGlzYWxsb3dUZXh0VGFncy5sZW5ndGggPT09IDAgPyBudWxsIDogbmV3IHdSZWdFeHAoJyg8XFxcXC8/KSgnICsgZGlzYWxsb3dUZXh0VGFncy5qb2luKCd8JykgKyAnKVxcXFxiXFxcXHMqKFtePl48XSspP1xcXFxzKig/PT4pJywgJ2dpJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgd2hpdGVsaXN0XHJcbiAgICAgICAgICAgIGNvbnN0IGdldFJlZ0xpc3QgPSBmdW5jdGlvbiAoc3RyLCBzdHIyKSB7IHJldHVybiAhc3RyID8gJ14nIDogKHN0ciA9PT0gJyonID8gJ1thLXotXSsnIDogKCFzdHIyID8gc3RyIDogKHN0ciArICd8JyArIHN0cjIpKSk7IH07XHJcbiAgICAgICAgICAgIC8vIHRhZ3NcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEF0dHIgPSAnY29udGVudGVkaXRhYmxlfGNvbHNwYW58cm93c3Bhbnx0YXJnZXR8aHJlZnxkb3dubG9hZHxyZWx8c3JjfGFsdHxjbGFzc3x0eXBlfGNvbnRyb2xzfG9yaWdpbi1zaXplJztcclxuICAgICAgICAgICAgY29uc3QgZGF0YUF0dHIgPSAnZGF0YS1mb3JtYXR8ZGF0YS1zaXplfGRhdGEtZmlsZS1zaXplfGRhdGEtZmlsZS1uYW1lfGRhdGEtb3JpZ2lufGRhdGEtYWxpZ258ZGF0YS1pbWFnZS1saW5rfGRhdGEtcm90YXRlfGRhdGEtcHJvcG9ydGlvbnxkYXRhLXBlcmNlbnRhZ2V8ZGF0YS1leHB8ZGF0YS1mb250LXNpemUnO1xyXG4gICAgICAgICAgICB0aGlzLl9hbGxvd0hUTUxDb21tZW50cyA9IG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QuaW5kZXhPZignLy8nKSA+IC0xIHx8IG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QgPT09ICcqJztcclxuICAgICAgICAgICAgLy8gaHRtbCBjaGVja1xyXG4gICAgICAgICAgICB0aGlzLl9odG1sQ2hlY2tXaGl0ZWxpc3RSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXignICsgZ2V0UmVnTGlzdChvcHRpb25zLl9lZGl0b3JUYWdzV2hpdGVsaXN0LnJlcGxhY2UoJ3wvLycsICcnKSwgJycpICsgJykkJywgJ2knKTtcclxuICAgICAgICAgICAgdGhpcy5faHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArIChvcHRpb25zLnRhZ3NCbGFja2xpc3QgfHwgJ14nKSArICcpJCcsICdpJyk7XHJcbiAgICAgICAgICAgIC8vIHRhZ3NcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwID0gdXRpbC5jcmVhdGVUYWdzV2hpdGVsaXN0KGdldFJlZ0xpc3Qob3B0aW9ucy5fZWRpdG9yVGFnc1doaXRlbGlzdC5yZXBsYWNlKCd8Ly8nLCAnfDwhLS18LS0+JyksICcnKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yVGFnc0JsYWNrbGlzdFJlZ0V4cCA9IHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChvcHRpb25zLnRhZ3NCbGFja2xpc3QucmVwbGFjZSgnfC8vJywgJ3w8IS0tfC0tPicpKTtcclxuICAgICAgICAgICAgLy8gcGFzdGUgdGFnc1xyXG4gICAgICAgICAgICB0aGlzLnBhc3RlVGFnc1doaXRlbGlzdFJlZ0V4cCA9IHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdChnZXRSZWdMaXN0KG9wdGlvbnMucGFzdGVUYWdzV2hpdGVsaXN0LCAnJykpO1xyXG4gICAgICAgICAgICB0aGlzLnBhc3RlVGFnc0JsYWNrbGlzdFJlZ0V4cCA9IHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChvcHRpb25zLnBhc3RlVGFnc0JsYWNrbGlzdCk7XHJcbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgcmVnRW5kU3RyID0gJ1xcXFxzKj1cXFxccyooXFxcIilbXlxcXCJdKlxcXFwxJztcclxuICAgICAgICAgICAgY29uc3QgX3dBdHRyID0gb3B0aW9ucy5hdHRyaWJ1dGVzV2hpdGVsaXN0O1xyXG4gICAgICAgICAgICBsZXQgdGFnc0F0dHIgPSB7fTtcclxuICAgICAgICAgICAgbGV0IGFsbEF0dHIgPSAnJztcclxuICAgICAgICAgICAgaWYgKCEhX3dBdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIF93QXR0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24oX3dBdHRyLCBrKSB8fCAvXm9uW2Etel0rJC9pLnRlc3QoX3dBdHRyW2tdKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEF0dHIgPSBnZXRSZWdMaXN0KF93QXR0cltrXSwgZGVmYXVsdEF0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3NBdHRyW2tdID0gbmV3IHdSZWdFeHAoJ1xcXFxzKD86JyArIGdldFJlZ0xpc3QoX3dBdHRyW2tdLCAnJykgKyAnKScgKyByZWdFbmRTdHIsICdpZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cCA9IG5ldyB3UmVnRXhwKCdcXFxccyg/OicgKyAoYWxsQXR0ciB8fCBkZWZhdWx0QXR0ciArICd8JyArIGRhdGFBdHRyKSArICcpJyArIHJlZ0VuZFN0ciwgJ2lnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZXNXaGl0ZWxpc3RSZWdFeHBfYWxsX2RhdGEgPSBuZXcgd1JlZ0V4cCgnXFxcXHMoPzonICsgKChhbGxBdHRyIHx8IGRlZmF1bHRBdHRyKSArICd8ZGF0YS1bYS16MC05XFxcXC1dKycpICsgJyknICsgcmVnRW5kU3RyLCAnaWcnKTtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3QgPSB0YWdzQXR0cjtcclxuXHJcbiAgICAgICAgICAgIC8vIGJsYWNrbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBfYkF0dHIgPSBvcHRpb25zLmF0dHJpYnV0ZXNCbGFja2xpc3Q7XHJcbiAgICAgICAgICAgIHRhZ3NBdHRyID0ge307XHJcbiAgICAgICAgICAgIGFsbEF0dHIgPSAnJztcclxuICAgICAgICAgICAgaWYgKCEhX2JBdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIF9iQXR0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24oX2JBdHRyLCBrKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEF0dHIgPSBnZXRSZWdMaXN0KF9iQXR0cltrXSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3NBdHRyW2tdID0gbmV3IHdSZWdFeHAoJ1xcXFxzKD86JyArIGdldFJlZ0xpc3QoX2JBdHRyW2tdLCAnJykgKyAnKScgKyByZWdFbmRTdHIsICdpZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc0JsYWNrbGlzdFJlZ0V4cCA9IG5ldyB3UmVnRXhwKCdcXFxccyg/OicgKyAoYWxsQXR0ciB8fCAnXicpICsgJyknICsgcmVnRW5kU3RyLCAnaWcnKTtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlc1RhZ3NCbGFja2xpc3QgPSB0YWdzQXR0cjtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBtb2Rlc1xyXG4gICAgICAgICAgICB0aGlzLl9pc0lubGluZSA9IC9pbmxpbmUvaS50ZXN0KG9wdGlvbnMubW9kZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IC9iYWxsb29ufGJhbGxvb24tYWx3YXlzL2kudGVzdChvcHRpb25zLm1vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0JhbGxvb25BbHdheXMgPSAvYmFsbG9vbi1hbHdheXMvaS50ZXN0KG9wdGlvbnMubW9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjYWNoaW5nIGJ1dHRvbnNcclxuICAgICAgICAgICAgdGhpcy5fY2FjaGluZ0J1dHRvbnMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpbGUgY29tcG9uZW50c1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNDaGVjayA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNSZXNldCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gdGV4dCBjb21wb25lbnRzXHJcbiAgICAgICAgICAgIHRoaXMubWFuYWdlZFRhZ3NJbmZvID0geyBxdWVyeTogJycsIG1hcDoge30gfTtcclxuICAgICAgICAgICAgY29uc3QgbWFuYWdlZENsYXNzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBDb21tYW5kIGFuZCBmaWxlIHBsdWdpbnMgcmVnaXN0cmF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlUGx1Z2lucyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci50YWdzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpbk1hcCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbGVQbHVnaW5SZWdFeHAgPSBbXTtcclxuICAgICAgICAgICAgbGV0IHBsdWdpbiwgYnV0dG9uO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gcGx1Z2lucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmhhc093bihwbHVnaW5zLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIHBsdWdpbiA9IHBsdWdpbnNba2V5XTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbiA9IHBsdWdpbkNhbGxCdXR0b25zW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoKHBsdWdpbi5hY3RpdmUgfHwgcGx1Z2luLmFjdGlvbikgJiYgYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGtleSwgbnVsbCwgYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmNoZWNrRmlsZUluZm8gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHBsdWdpbi5yZXNldEZpbGVJbmZvID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGtleSwgbnVsbCwgYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNDaGVjay5wdXNoKHBsdWdpbi5jaGVja0ZpbGVJbmZvLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbmZvUGx1Z2luc1Jlc2V0LnB1c2gocGx1Z2luLnJlc2V0RmlsZUluZm8uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoX3cuQXJyYXkuaXNBcnJheShwbHVnaW4uZmlsZVRhZ3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZVRhZ3MgPSBwbHVnaW4uZmlsZVRhZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGtleSwgbnVsbCwgYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci50YWdzID0gdGhpcy5fZmlsZU1hbmFnZXIudGFncy5jb25jYXQoZmlsZVRhZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVQbHVnaW5SZWdFeHAucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRhZyA9IDAsIHRMZW4gPSBmaWxlVGFncy5sZW5ndGg7IHRhZyA8IHRMZW47IHRhZysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpbk1hcFtmaWxlVGFnc1t0YWddLnRvTG93ZXJDYXNlKCldID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4ubWFuYWdlZFRhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gcGx1Z2luLm1hbmFnZWRUYWdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlZENsYXNzLnB1c2goJy4nICsgaW5mby5jbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFuYWdlZFRhZ3NJbmZvLm1hcFtpbmZvLmNsYXNzTmFtZV0gPSBpbmZvLm1ldGhvZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSA9IG1hbmFnZWRDbGFzcy50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci5xdWVyeVN0cmluZyA9IHRoaXMuX2ZpbGVNYW5hZ2VyLnRhZ3Muam9pbignLCcpO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci5yZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXignICsgICh0aGlzLl9maWxlTWFuYWdlci50YWdzLmpvaW4oJ3wnKSB8fCAnXicpICsgJykkJywgJ2knKTtcclxuICAgICAgICAgICAgdGhpcy5fZmlsZU1hbmFnZXIucGx1Z2luUmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArICAoZmlsZVBsdWdpblJlZ0V4cC5sZW5ndGggPT09IDAgPyAnXicgOiBmaWxlUGx1Z2luUmVnRXhwLmpvaW4oJ3wnKSkgKyAnKSQnLCAnaScpO1xyXG5cclxuICAgICAgICAgICAgLy8gY2FjaGUgZWRpdG9yJ3MgZWxlbWVudFxyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fb3JpZ2luQ3NzVGV4dCA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhLnN0eWxlLmNzc1RleHQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyID0gY29udGV4dC5lbGVtZW50LnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICB0aGlzLl9saW5lQnJlYWtlciA9IGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcjtcclxuICAgICAgICAgICAgdGhpcy5fbGluZUJyZWFrZXJCdXR0b24gPSB0aGlzLl9saW5lQnJlYWtlci5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEV4Y3V0ZSBoaXN0b3J5IGZ1bmN0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeSA9IF9oaXN0b3J5KHRoaXMsIHRoaXMuX29uQ2hhbmdlX2hpc3RvcnlTdGFjay5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlZ2lzdGVyIG5vdGljZSBtb2R1bGVcclxuICAgICAgICAgICAgdGhpcy5hZGRNb2R1bGUoW19ub3RpY2VdKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXQsIHZhbGlkYXRlXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLmNvbnRlbnREb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnID0gdGhpcy5fd2QuYm9keTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLl9lZGl0b3JTdHlsZXMuZWRpdG9yKSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5zdHlsZS5jc3NUZXh0ID0gb3B0aW9ucy5fZWRpdG9yU3R5bGVzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nKSB0aGlzLl9pZnJhbWVBdXRvID0gdGhpcy5fd2QuYm9keTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5faW5pdFd5c2l3eWdBcmVhKHJlbG9hZCwgX2luaXRIVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FjaGluZyBiYXNpYyBidXR0b25zIHRvIHVzZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NhY2hpbmdCdXR0b25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29kZVZpZXdEaXNhYmxlZEJ1dHRvbnMgPSBjb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnLnNlLW1lbnUtbGlzdCBidXR0b25bZGF0YS1kaXNwbGF5XTpub3QoW2NsYXNzfj1cInNlLWNvZGUtdmlldy1lbmFibGVkXCJdKTpub3QoW2RhdGEtZGlzcGxheT1cIk1PUkVcIl0pJyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXppbmdEaXNhYmxlZEJ1dHRvbnMgPSBjb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnLnNlLW1lbnUtbGlzdCBidXR0b25bZGF0YS1kaXNwbGF5XTpub3QoW2NsYXNzfj1cInNlLXJlc2l6aW5nLWVuYWJsZWRcIl0pOm5vdChbZGF0YS1kaXNwbGF5PVwiTU9SRVwiXSknKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2wgPSBjb250ZXh0LnRvb2w7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmRNYXAgPSB0aGlzLmNvbW1hbmRNYXA7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXAuSU5ERU5UID0gdG9vbC5pbmRlbnQ7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXAuT1VUREVOVCA9IHRvb2wub3V0ZGVudDtcclxuICAgICAgICAgICAgY29tbWFuZE1hcFtvcHRpb25zLnRleHRUYWdzLmJvbGQudG9VcHBlckNhc2UoKV0gPSB0b29sLmJvbGQ7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXBbb3B0aW9ucy50ZXh0VGFncy51bmRlcmxpbmUudG9VcHBlckNhc2UoKV0gPSB0b29sLnVuZGVybGluZTtcclxuICAgICAgICAgICAgY29tbWFuZE1hcFtvcHRpb25zLnRleHRUYWdzLml0YWxpYy50b1VwcGVyQ2FzZSgpXSA9IHRvb2wuaXRhbGljO1xyXG4gICAgICAgICAgICBjb21tYW5kTWFwW29wdGlvbnMudGV4dFRhZ3Muc3RyaWtlLnRvVXBwZXJDYXNlKCldID0gdG9vbC5zdHJpa2U7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXBbb3B0aW9ucy50ZXh0VGFncy5zdWIudG9VcHBlckNhc2UoKV0gPSB0b29sLnN1YnNjcmlwdDtcclxuICAgICAgICAgICAgY29tbWFuZE1hcFtvcHRpb25zLnRleHRUYWdzLnN1cC50b1VwcGVyQ2FzZSgpXSA9IHRvb2wuc3VwZXJzY3JpcHQ7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zdHlsZUNvbW1hbmRNYXAgPSB7XHJcbiAgICAgICAgICAgICAgICBmdWxsU2NyZWVuOiB0b29sLmZ1bGxTY3JlZW4sXHJcbiAgICAgICAgICAgICAgICBzaG93QmxvY2tzOiB0b29sLnNob3dCbG9ja3MsXHJcbiAgICAgICAgICAgICAgICBjb2RlVmlldzogdG9vbC5jb2RlVmlld1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2F2ZUJ1dHRvblN0YXRlcygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXogd3lzaXd5ZyBhcmVhIChPbmx5IGNhbGxlZCBmcm9tIGNvcmUuX2luaXQpXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZWxvYWQgSXMgcmVsb29hZD9cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2luaXRIVE1MIGluaXRpYWwgaHRtbCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pbml0V3lzaXd5Z0FyZWE6IGZ1bmN0aW9uIChyZWxvYWQsIF9pbml0SFRNTCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5pbm5lckhUTUwgPSByZWxvYWQgPyBfaW5pdEhUTUwgOiB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcigodHlwZW9mIF9pbml0SFRNTCA9PT0gJ3N0cmluZycgPyBfaW5pdEhUTUwgOiAvXlRFWFRBUkVBJC9pLnRlc3QoY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQubm9kZU5hbWUpID8gY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQudmFsdWUgOiBjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudC5pbm5lckhUTUwpIHx8ICcnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlcmUgYXJlIGNoYW5nZXMgdG8gdGFncyBpbiB0aGUgd3lzaXd5ZyByZWdpb24uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVzb3VyY2VzU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5faWZyYW1lQXV0b0hlaWdodCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja1BsYWNlaG9sZGVyKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIGFmdGVyIGV4ZWN1dGUgXCJoaXN0b3J5LnB1c2hcIlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX29uQ2hhbmdlX2hpc3RvcnlTdGFjazogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNGb2N1cykgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5pc0NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC50b29sLnNhdmUpIGNvbnRleHQudG9vbC5zYXZlLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAoZnVuY3Rpb25zLm9uQ2hhbmdlKSBmdW5jdGlvbnMub25DaGFuZ2UodGhpcy5nZXRDb250ZW50cyh0cnVlKSwgdGhpcyk7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmVsZW1lbnQudG9vbGJhci5zdHlsZS5kaXNwbGF5ID09PSAnYmxvY2snKSBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE1vZGlmeSB0aGUgaGVpZ2h0IHZhbHVlIG9mIHRoZSBpZnJhbWUgd2hlbiB0aGUgaGVpZ2h0IG9mIHRoZSBpZnJhbWUgaXMgYXV0b21hdGljLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lmcmFtZUF1dG9IZWlnaHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lmcmFtZUF1dG8pIHtcclxuICAgICAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBjb3JlLl9pZnJhbWVBdXRvLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1Jlc2l6ZU9ic2VydmVyU3VwcG9ydGVkKSBjb3JlLl9fY2FsbFJlc2l6ZUZ1bmN0aW9uKGgsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXV0aWwuaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fX2NhbGxSZXNpemVGdW5jdGlvbihjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLm9mZnNldEhlaWdodCwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfX2NhbGxSZXNpemVGdW5jdGlvbjogZnVuY3Rpb24gKGgsIHJlc2l6ZU9ic2VydmVyRW50cnkpIHtcclxuICAgICAgICAgICAgaCA9IGggPT09IC0xID8gKHJlc2l6ZU9ic2VydmVyRW50cnkuYm9yZGVyQm94U2l6ZSAmJiByZXNpemVPYnNlcnZlckVudHJ5LmJvcmRlckJveFNpemVbMF0gPyByZXNpemVPYnNlcnZlckVudHJ5LmJvcmRlckJveFNpemVbMF0uYmxvY2tTaXplIDogKHJlc2l6ZU9ic2VydmVyRW50cnkuY29udGVudFJlY3QuaGVpZ2h0ICsgdGhpcy5fZWRpdG9ySGVpZ2h0UGFkZGluZykpIDogaDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2VkaXRvckhlaWdodCAhPT0gaCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25SZXNpemVFZGl0b3IgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy5vblJlc2l6ZUVkaXRvcihoLCB0aGlzLl9lZGl0b3JIZWlnaHQsIGNvcmUsIHJlc2l6ZU9ic2VydmVyRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWRpdG9ySGVpZ2h0ID0gaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgZGlzcGxheSBwcm9wZXJ0eSB3aGVuIHRoZXJlIGlzIHBsYWNlaG9sZGVyLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NoZWNrUGxhY2Vob2xkZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHd5c2l3eWcgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uod3lzaXd5Zy50ZXh0Q29udGVudCkgfHwgd3lzaXd5Zy5xdWVyeVNlbGVjdG9yKHV0aWwuX2FsbG93ZWRFbXB0eU5vZGVMaXN0KSB8fCAod3lzaXd5Zy5pbm5lclRleHQubWF0Y2goL1xcbi9nKSB8fCAnJykubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIHRoZXJlIGlzIG5vIGRlZmF1bHQgZm9ybWF0LCBhZGQgYSBmb3JtYXQgYW5kIG1vdmUgXCJzZWxlY3Rpb25cIi5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBmb3JtYXROYW1lIEZvcm1hdCB0YWcgbmFtZSAoZGVmYXVsdDogJ1AnKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR8bnVsbH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXREZWZhdWx0Rm9ybWF0OiBmdW5jdGlvbiAoZm9ybWF0TmFtZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmlsZU1hbmFnZXIucGx1Z2luUmVnRXhwLnRlc3QodGhpcy5jdXJyZW50Q29udHJvbGxlck5hbWUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uQ29uID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24sIG51bGwpO1xyXG4gICAgICAgICAgICBsZXQgZm9jdXNOb2RlLCBvZmZzZXQsIGZvcm1hdDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoY29tbW9uQ29uLCB1dGlsLmlzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnQgJiYgIXV0aWwuaXNUYWJsZShmaWxlQ29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1vbkNvbi5ub2RlVHlwZSA9PT0gMSAmJiBjb21tb25Db24uZ2V0QXR0cmlidXRlKCdkYXRhLXNlLWVtYmVkJykgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVsID0gY29tbW9uQ29uLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0Zvcm1hdEVsZW1lbnQoZWwpKSBlbCA9IHRoaXMuYXBwZW5kRm9ybWF0VGFnKGNvbW1vbkNvbiwgb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWwuZmlyc3RDaGlsZCwgMCwgZWwuZmlyc3RDaGlsZCwgMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChzdGFydENvbikgfHwgdXRpbC5pc1d5c2l3eWdEaXYoc3RhcnRDb24pKSAmJiAodXRpbC5pc0NvbXBvbmVudChzdGFydENvbi5jaGlsZHJlbltyYW5nZS5zdGFydE9mZnNldF0pIHx8IHV0aWwuaXNDb21wb25lbnQoc3RhcnRDb24uY2hpbGRyZW5bcmFuZ2Uuc3RhcnRPZmZzZXQgLSAxXSkpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmdldFBhcmVudEVsZW1lbnQoY29tbW9uQ29uLCB1dGlsLmlzTm90Q2hlY2tpbmdOb2RlKSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2VFbCkge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGZvcm1hdE5hbWUgfHwgb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgIGZvcm1hdC5pbm5lckhUTUwgPSByYW5nZUVsLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIGZvcm1hdC5pbm5lckhUTUwgPSB1dGlsLnplcm9XaWR0aFNwYWNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJhbmdlRWwuaW5uZXJIVE1MID0gZm9ybWF0Lm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHJhbmdlRWwuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHV0aWwuZ2V0RWRnZUNoaWxkTm9kZXMoZm9ybWF0LCBudWxsKS5zYztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvY3VzTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0Lmluc2VydEJlZm9yZShmb2N1c05vZGUsIGZvcm1hdC5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBmb2N1c05vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShmb2N1c05vZGUsIG9mZnNldCwgZm9jdXNOb2RlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZih1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGNvbW1vbkNvbikgJiYgKGNvbW1vbkNvbi5jaGlsZE5vZGVzLmxlbmd0aCA8PSAxKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGJyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiYgdXRpbC5pc0JyZWFrKGNvbW1vbkNvbi5maXJzdENoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyID0gY29tbW9uQ29uLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb21tb25Db24uYXBwZW5kQ2hpbGQoYnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoYnIsIDEsIGJyLCAxKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoZm9ybWF0TmFtZSB8fCBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkNvbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoZm9ybWF0Lm5leHRTaWJsaW5nKSkgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKGZvcm1hdC5wcmV2aW91c1NpYmxpbmcpKSB1dGlsLnJlbW92ZUl0ZW0oZm9ybWF0LnByZXZpb3VzU2libGluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKGZvY3VzTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIGZvY3VzTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlID0gemVyb1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKCdmb3JtYXRCbG9jaycsIGZhbHNlLCAoZm9ybWF0TmFtZSB8fCBvcHRpb25zLmRlZmF1bHRUYWcpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoZm9ybWF0Lm5leHRTaWJsaW5nKSkgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoZm9ybWF0LnByZXZpb3VzU2libGluZykpIHV0aWwucmVtb3ZlSXRlbShmb3JtYXQucHJldmlvdXNTaWJsaW5nKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhmb2N1c05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgZm9jdXNOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHplcm9XaWR0aCwgZm9jdXNOb2RlKTtcclxuICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHplcm9XaWR0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXphdGlvbiBhZnRlciBcInNldE9wdGlvbnNcIlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbCBjb250ZXh0LmVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2luaXRIVE1MIEluaXRpYWwgaHRtbCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRPcHRpb25zSW5pdDogZnVuY3Rpb24gKGVsLCBfaW5pdEhUTUwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCA9IF9Db250ZXh0KGVsLm9yaWdpbkVsZW1lbnQsIHRoaXMuX2dldENvbnN0cnVjdGVkKGVsKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHNJbmZvUmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9lZGl0b3JJbml0KHRydWUsIF9pbml0SFRNTCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpeiBlZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbG9hZCBJcyByZWxvb2FkP1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBfaW5pdEhUTUwgaW5pdGlhbCBodG1sIHN0cmluZ1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2VkaXRvckluaXQ6IGZ1bmN0aW9uIChyZWxvYWQsIF9pbml0SFRNTCkge1xyXG4gICAgICAgICAgICAvLyBpbml0aWFsaXplIGNvcmUgYW5kIGFkZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgdGhpcy5faW5pdChyZWxvYWQsIF9pbml0SFRNTCk7XHJcbiAgICAgICAgICAgIGV2ZW50Ll9hZGRFdmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRDaGFyQ291bnQoKTtcclxuICAgICAgICAgICAgZXZlbnQuX29mZlN0aWNreVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgZXZlbnQub25SZXNpemVfd2luZG93KCk7XHJcblxyXG4gICAgICAgICAgICAvLyB0b29sYmFyIHZpc2liaWxpdHlcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgICAgICAgICAvLyB3aXN5d2lnIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgYXR0ciA9IG9wdGlvbnMuZnJhbWVBdHRyYnV0ZXM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gYXR0cikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuc2V0QXR0cmlidXRlKGssIGF0dHJba10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0NvbXBvbmVudHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50c0luZm9Jbml0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHNJbmZvUmVzZXQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5yZXNldCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIG9ic2VydmVyXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuX3Jlc2l6ZU9ic2VydmVyKSBldmVudC5fcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5fdG9vbGJhck9ic2VydmVyKSBldmVudC5fdG9vbGJhck9ic2VydmVyLm9ic2VydmUoY29udGV4dC5lbGVtZW50Ll90b29sYmFyU2hhZG93KTtcclxuICAgICAgICAgICAgICAgIC8vIHJlc291cmNlIHN0YXRlXHJcbiAgICAgICAgICAgICAgICBjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25sb2FkID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMub25sb2FkKGNvcmUsIHJlbG9hZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgYW5kIHJldHVybiBhbiBvYmplY3QgdG8gY2FjaGUgdGhlIG5ldyBjb250ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dEVsIGNvbnRleHQuZWxlbWVudFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0Q29uc3RydWN0ZWQ6IGZ1bmN0aW9uIChjb250ZXh0RWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIF90b3A6IGNvbnRleHRFbC50b3BBcmVhLFxyXG4gICAgICAgICAgICAgICAgX3JlbGF0aXZlOiBjb250ZXh0RWwucmVsYXRpdmUsXHJcbiAgICAgICAgICAgICAgICBfdG9vbEJhcjogY29udGV4dEVsLnRvb2xiYXIsXHJcbiAgICAgICAgICAgICAgICBfdG9vbGJhclNoYWRvdzogY29udGV4dEVsLl90b29sYmFyU2hhZG93LFxyXG4gICAgICAgICAgICAgICAgX21lbnVUcmF5OiBjb250ZXh0RWwuX21lbnVUcmF5LFxyXG4gICAgICAgICAgICAgICAgX2VkaXRvckFyZWE6IGNvbnRleHRFbC5lZGl0b3JBcmVhLFxyXG4gICAgICAgICAgICAgICAgX3d5c2l3eWdBcmVhOiBjb250ZXh0RWwud3lzaXd5Z0ZyYW1lLFxyXG4gICAgICAgICAgICAgICAgX2NvZGVBcmVhOiBjb250ZXh0RWwuY29kZSxcclxuICAgICAgICAgICAgICAgIF9wbGFjZWhvbGRlcjogY29udGV4dEVsLnBsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICAgICAgX3Jlc2l6aW5nQmFyOiBjb250ZXh0RWwucmVzaXppbmdCYXIsXHJcbiAgICAgICAgICAgICAgICBfbmF2aWdhdGlvbjogY29udGV4dEVsLm5hdmlnYXRpb24sXHJcbiAgICAgICAgICAgICAgICBfY2hhckNvdW50ZXI6IGNvbnRleHRFbC5jaGFyQ291bnRlcixcclxuICAgICAgICAgICAgICAgIF9jaGFyV3JhcHBlcjogY29udGV4dEVsLmNoYXJXcmFwcGVyLFxyXG4gICAgICAgICAgICAgICAgX2xvYWRpbmc6IGNvbnRleHRFbC5sb2FkaW5nLFxyXG4gICAgICAgICAgICAgICAgX2xpbmVCcmVha2VyOiBjb250ZXh0RWwubGluZUJyZWFrZXIsXHJcbiAgICAgICAgICAgICAgICBfbGluZUJyZWFrZXJfdDogY29udGV4dEVsLmxpbmVCcmVha2VyX3QsXHJcbiAgICAgICAgICAgICAgICBfbGluZUJyZWFrZXJfYjogY29udGV4dEVsLmxpbmVCcmVha2VyX2IsXHJcbiAgICAgICAgICAgICAgICBfcmVzaXplQmFjazogY29udGV4dEVsLnJlc2l6ZUJhY2tncm91bmQsXHJcbiAgICAgICAgICAgICAgICBfc3RpY2t5RHVtbXk6IGNvbnRleHRFbC5fc3RpY2t5RHVtbXksXHJcbiAgICAgICAgICAgICAgICBfYXJyb3c6IGNvbnRleHRFbC5fYXJyb3dcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIGV2ZW50IGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICAgIF9JRWlzQ29tcG9zaW5nOiBmYWxzZSwgLy8gSW4gSUUsIHRoZXJlIGlzIG5vIFwiZS5pc0NvbXBvc2luZ1wiIGluIHRoZSBrZXktdXAgZXZlbnQuXHJcbiAgICAgICAgX2xpbmVCcmVha2VyQmluZDogbnVsbCxcclxuICAgICAgICBfcmVzcG9uc2l2ZUN1cnJlbnRTaXplOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgX3Jlc3BvbnNpdmVCdXR0b25TaXplOiBudWxsLFxyXG4gICAgICAgIF9yZXNwb25zaXZlQnV0dG9uczogbnVsbCxcclxuICAgICAgICBfY3Vyc29yTW92ZUtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oOHwzWzItOV18NDB8NDYpJCcpLFxyXG4gICAgICAgIF9kaXJlY3Rpb25LZXlDb2RlOiBuZXcgX3cuUmVnRXhwKCdeKDh8MTN8M1syLTldfDQwfDQ2KSQnKSxcclxuICAgICAgICBfbm9uVGV4dEtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oOHwxM3wxWzYtOV18MjB8Mjd8M1szLTldfDQwfDQ1fDQ2fDExWzItOV18MTJbMC0zXXwxNDR8MTQ1KSQnKSxcclxuICAgICAgICBfaGlzdG9yeUlnbm9yZUtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oMVs2LTldfDIwfDI3fDNbMy05XXw0MHw0NXwxMVsyLTldfDEyWzAtM118MTQ0fDE0NSkkJyksXHJcbiAgICAgICAgX29uQnV0dG9uc0NoZWNrOiBuZXcgX3cuUmVnRXhwKCdeKCcgKyBfdy5PYmplY3Qua2V5cyhvcHRpb25zLl90ZXh0VGFnc01hcCkuam9pbignfCcpICsgJykkJywgJ2knKSxcclxuICAgICAgICBfZnJvbnRaZXJvV2lkdGhSZWc6IG5ldyBfdy5SZWdFeHAodXRpbC56ZXJvV2lkdGhTcGFjZSArICcrJywgJycpLFxyXG4gICAgICAgIF9rZXlDb2RlU2hvcnRjdXQ6IHtcclxuICAgICAgICAgICAgNjU6ICdBJyxcclxuICAgICAgICAgICAgNjY6ICdCJyxcclxuICAgICAgICAgICAgODM6ICdTJyxcclxuICAgICAgICAgICAgODU6ICdVJyxcclxuICAgICAgICAgICAgNzM6ICdJJyxcclxuICAgICAgICAgICAgODk6ICdZJyxcclxuICAgICAgICAgICAgOTA6ICdaJyxcclxuICAgICAgICAgICAgMjE5OiAnWycsXHJcbiAgICAgICAgICAgIDIyMTogJ10nXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3Nob3J0Y3V0Q29tbWFuZDogZnVuY3Rpb24gKGtleUNvZGUsIHNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGxldCBjb21tYW5kID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3Qga2V5U3RyID0gZXZlbnQuX2tleUNvZGVTaG9ydGN1dFtrZXlDb2RlXTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5U3RyKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBJzpcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3NlbGVjdEFsbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdCJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ2JvbGQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdib2xkJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdTJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQgJiYgb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3N0cmlrZScpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3N0cmlrZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc2hpZnQgJiYgb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3NhdmUnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdzYXZlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdVJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3VuZGVybGluZScpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3VuZGVybGluZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpdGFsaWMnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdpdGFsaWMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZigndW5kbycpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAncmVkbyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3VuZG8nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCd1bmRvJykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAncmVkbyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWyc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IG9wdGlvbnMucnRsID8gJ2luZGVudCcgOiAnb3V0ZGVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IG9wdGlvbnMucnRsID8gJ291dGRlbnQnIDogJ2luZGVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybiAhIWtleVN0cjtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuY29tbWFuZEhhbmRsZXIoY29yZS5jb21tYW5kTWFwW2NvbW1hbmRdLCBjb21tYW5kKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FwcGx5VGFnRWZmZWN0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uTm9kZSA9PT0gY29yZS5lZmZlY3ROb2RlKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvcmUuZWZmZWN0Tm9kZSA9IHNlbGVjdGlvbk5vZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW5EaXIgPSBvcHRpb25zLnJ0bCA/ICdtYXJnaW5SaWdodCcgOiAnbWFyZ2luTGVmdCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmRNYXAgPSBjb3JlLmNvbW1hbmRNYXA7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzT25DaGVjayA9IGV2ZW50Ll9vbkJ1dHRvbnNDaGVjaztcclxuICAgICAgICAgICAgY29uc3QgY29tbWFuZE1hcE5vZGVzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlUGx1Z2lucyA9IGNvcmUuYWN0aXZlUGx1Z2lucztcclxuICAgICAgICAgICAgY29uc3QgY0xlbiA9IGFjdGl2ZVBsdWdpbnMubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgbm9kZU5hbWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChzZWxlY3Rpb25Ob2RlLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb25Ob2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGVsZW1lbnQgPSBzZWxlY3Rpb25Ob2RlOyAhdXRpbC5pc1d5c2l3eWdEaXYoZWxlbWVudCk7IGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSB8fCB1dGlsLmlzQnJlYWsoZWxlbWVudCkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZXMucHVzaChub2RlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLyogQWN0aXZlIHBsdWdpbnMgKi9cclxuICAgICAgICAgICAgICAgIGlmICghY29yZS5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIG5hbWU7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGFjdGl2ZVBsdWdpbnNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kTWFwTm9kZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEgJiYgcGx1Z2luc1tuYW1lXS5hY3RpdmUuY2FsbChjb3JlLCBlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE1hcE5vZGVzLnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogT3V0ZGVudCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kTWFwTm9kZXMuaW5kZXhPZignT1VUREVOVCcpID09PSAtMSAmJiBjb21tYW5kTWFwLk9VVERFTlQgJiYgIXV0aWwuaXNJbXBvcnRhbnREaXNhYmxlZChjb21tYW5kTWFwLk9VVERFTlQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZWxlbWVudCkgfHwgKGVsZW1lbnQuc3R5bGVbbWFyZ2luRGlyXSAmJiB1dGlsLmdldE51bWJlcihlbGVtZW50LnN0eWxlW21hcmdpbkRpcl0sIDApID4gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRNYXBOb2Rlcy5wdXNoKCdPVVRERU5UJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwLk9VVERFTlQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKiBJbmRlbnQgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZE1hcE5vZGVzLmluZGV4T2YoJ0lOREVOVCcpID09PSAtMSAmJiBjb21tYW5kTWFwLklOREVOVCAmJiAhdXRpbC5pc0ltcG9ydGFudERpc2FibGVkKGNvbW1hbmRNYXAuSU5ERU5UKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwTm9kZXMucHVzaCgnSU5ERU5UJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZWxlbWVudCkgJiYgIWVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE1hcC5JTkRFTlQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE1hcC5JTkRFTlQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKiogZGVmYXVsdCBhY3RpdmUgYnV0dG9ucyBbc3Ryb25nLCBpbnMsIGVtLCBkZWwsIHN1Yiwgc3VwXSAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzT25DaGVjayAmJiBjbGFzc09uQ2hlY2sudGVzdChub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwTm9kZXMucHVzaChub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhjb21tYW5kTWFwW25vZGVOYW1lXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9zZXRLZXlFZmZlY3QoY29tbWFuZE1hcE5vZGVzKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBzYXZlIGN1cnJlbnQgbm9kZXMgKi9cclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzID0gY3VycmVudE5vZGVzLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzTWFwID0gY29tbWFuZE1hcE5vZGVzO1xyXG5cclxuICAgICAgICAgICAgLyoqICBEaXNwbGF5cyB0aGUgY3VycmVudCBub2RlIHN0cnVjdHVyZSB0byByZXNpemluZ0JhciAqL1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93UGF0aExhYmVsKSBjb250ZXh0LmVsZW1lbnQubmF2aWdhdGlvbi50ZXh0Q29udGVudCA9IGNvcmUuX3ZhcmlhYmxlLmN1cnJlbnROb2Rlcy5qb2luKCcgPiAnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnV0dG9uc0V2ZW50SGFuZGxlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICBpZiAoY29yZS5fYmluZENvbnRyb2xsZXJzT2ZmKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKC9eKGlucHV0fHRleHRhcmVhfHNlbGVjdHxvcHRpb24pJC9pLnRlc3QodGFyZ2V0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fYW50aUJsdXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0YXJnZXQsICcuc2Utc3VibWVudScpKSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5fbm90SGlkZVRvb2xiYXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgICAgIGxldCBjbGFzc05hbWUgPSB0YXJnZXQuY2xhc3NOYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICghY29tbWFuZCAmJiAhL3NlLW1lbnUtbGlzdC8udGVzdChjbGFzc05hbWUpICYmICEvc3VuLWVkaXRvci1jb21tb24vLnRlc3QoY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSB0YXJnZXQuY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kID09PSBjb3JlLl9zdWJtZW51TmFtZSB8fCBjb21tYW5kID09PSBjb3JlLl9jb250YWluZXJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEdsb2JhbEV2ZW50KHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fd3cuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29yZS5fdy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXHJcbiAgICAgICAgICAgICAgICB1c2VDYXB0dXJlOiB1c2VDYXB0dXJlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgIFxyXG4gICAgICAgIHJlbW92ZUdsb2JhbEV2ZW50KHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIGlmICghdHlwZSkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gdHlwZS5saXN0ZW5lcjtcclxuICAgICAgICAgICAgICAgIHVzZUNhcHR1cmUgPSB0eXBlLnVzZUNhcHR1cmU7XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gdHlwZS50eXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fd3cucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29yZS5fdy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrX3Rvb2xiYXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXkgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWRpc3BsYXknKTtcclxuICAgICAgICAgICAgbGV0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgbGV0IGNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlICh0YXJnZXQucGFyZW50Tm9kZSAmJiAhY29tbWFuZCAmJiAhL3NlLW1lbnUtbGlzdC8udGVzdChjbGFzc05hbWUpICYmICEvc2UtdG9vbGJhci8udGVzdChjbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXkgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWRpc3BsYXknKTtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghY29tbWFuZCAmJiAhZGlzcGxheSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmRpc2FibGVkKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb3JlLmFjdGlvbkNhbGwoY29tbWFuZCwgZGlzcGxheSwgdGFyZ2V0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfX3NlbGVjdGlvblN5bmNFdmVudDogbnVsbCxcclxuICAgICAgICBvbk1vdXNlRG93bl93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5IHx8IHV0aWwuaXNOb25FZGl0YWJsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5ZykpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHV0aWwuX2lzRXhjbHVkZVNlbGVjdGlvbkVsZW1lbnQoZS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV2ZW50LnJlbW92ZUdsb2JhbEV2ZW50KGV2ZW50Ll9fc2VsZWN0aW9uU3luY0V2ZW50KTtcclxuICAgICAgICAgICAgZXZlbnQuX19zZWxlY3Rpb25TeW5jRXZlbnQgPSBldmVudC5hZGRHbG9iYWxFdmVudCgnbW91c2V1cCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnJlbW92ZUdsb2JhbEV2ZW50KGV2ZW50Ll9fc2VsZWN0aW9uU3luY0V2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uTW91c2VEb3duID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbk1vdXNlRG93bihlLCBjb3JlKSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlQ2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChlLnRhcmdldCwgdXRpbC5pc0NlbGwpO1xyXG4gICAgICAgICAgICBpZiAodGFibGVDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IGNvcmUucGx1Z2lucy50YWJsZTtcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZVBsdWdpbiAmJiB0YWJsZUNlbGwgIT09IHRhYmxlUGx1Z2luLl9maXhlZENlbGwgJiYgIXRhYmxlUGx1Z2luLl9zaGlmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuY2FsbFBsdWdpbigndGFibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLm9uVGFibGVDZWxsTXVsdGlTZWxlY3QuY2FsbChjb3JlLCB0YWJsZUNlbGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX2hpZGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBlLnRhcmdldDtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQW5jaG9yKHRhcmdldEVsZW1lbnQpKXtcclxuICAgICAgICAgICAgICAgICAgICBfdy5vcGVuKHRhcmdldEVsZW1lbnQuaHJlZiwgdGFyZ2V0RWxlbWVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc05vbkVkaXRhYmxlKGNvbnRleHQuZWxlbWVudC53eXNpd3lnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbkNsaWNrKGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZUNvbXBvbmVudEluZm8gPSBjb3JlLmdldEZpbGVDb21wb25lbnQodGFyZ2V0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5zZWxlY3RDb21wb25lbnQoZmlsZUNvbXBvbmVudEluZm8udGFyZ2V0LCBmaWxlQ29tcG9uZW50SW5mby5wbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlnY2FwdGlvbiA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0YXJnZXRFbGVtZW50LCAnRklHQ0FQVElPTicpO1xyXG4gICAgICAgICAgICBpZiAoZmlnY2FwdGlvbiAmJiB1dGlsLmlzTm9uRWRpdGFibGUoZmlnY2FwdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGZpZ2NhcHRpb24uZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5faXNJbmxpbmUgJiYgIWNvcmUuX2lubGluZVRvb2xiYXJBdHRyLmlzU2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhcklubGluZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWRlVG9vbGJhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2hpZGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZ2NhcHRpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGhpZGVUb29sYmFyKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmaWdjYXB0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoaWRlVG9vbGJhcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2VkaXRvclJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZS5kZXRhaWwgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIpICYmIHJhbmdlLmVuZE9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gY29yZS5zZXRSYW5nZShyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lci5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuX3JhbmdlSW5mbyhyYW5nZSwgY29yZS5nZXRTZWxlY3Rpb24oKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbk5vZGUgPSBjb3JlLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICB3aGlsZSAoc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkLmZpcnN0Q2hpbGQpIHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCA9IHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRDb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZENvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZUVsICYmIHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIpIGNvcmUuc2VsZWN0Q29tcG9uZW50KHNlbGVjdGVkQ29tcG9uZW50SW5mby50YXJnZXQsIHNlbGVjdGVkQ29tcG9uZW50SW5mby5wbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JlLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbykgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3JtYXRFbCAmJiAhdXRpbC5pc05vbkVkaXRhYmxlKHRhcmdldEVsZW1lbnQpICYmICF1dGlsLmlzTGlzdChyYW5nZUVsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKSA9PT0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLmVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3QocmFuZ2VFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvTGkgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZMaSA9IHNlbGVjdGlvbk5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvTGkuYXBwZW5kQ2hpbGQoc2VsZWN0aW9uTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwuaW5zZXJ0QmVmb3JlKG9MaSwgcHJldkxpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXV0aWwuaXNXeXNpd3lnRGl2KHNlbGVjdGlvbk5vZGUpICYmICF1dGlsLmlzQ29tcG9uZW50KHNlbGVjdGlvbk5vZGUpICYmICghdXRpbC5pc1RhYmxlKHNlbGVjdGlvbk5vZGUpIHx8IHV0aWwuaXNDZWxsKHNlbGVjdGlvbk5vZGUpKSAmJiBjb3JlLl9zZXREZWZhdWx0Rm9ybWF0KHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbCkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZykgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbikgX3cuc2V0VGltZW91dChldmVudC5fdG9nZ2xlVG9vbGJhckJhbGxvb24pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iYWxsb29uRGVsYXk6IG51bGwsXHJcbiAgICAgICAgX3Nob3dUb29sYmFyQmFsbG9vbkRlbGF5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5fYmFsbG9vbkRlbGF5KSB7XHJcbiAgICAgICAgICAgICAgICBfdy5jbGVhclRpbWVvdXQoZXZlbnQuX2JhbGxvb25EZWxheSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV2ZW50Ll9iYWxsb29uRGVsYXkgPSBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF93LmNsZWFyVGltZW91dCh0aGlzLl9iYWxsb29uRGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbkRlbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dUb29sYmFyQmFsbG9vbigpO1xyXG4gICAgICAgICAgICB9LmJpbmQoZXZlbnQpLCAzNTApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF90b2dnbGVUb29sYmFyQmFsbG9vbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKGNvcmUuX2JpbmRDb250cm9sbGVyc09mZiB8fCAoIWNvcmUuX2lzQmFsbG9vbkFsd2F5cyAmJiByYW5nZS5jb2xsYXBzZWQpKSBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgZWxzZSBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKHJhbmdlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2hvd1Rvb2xiYXJCYWxsb29uOiBmdW5jdGlvbiAocmFuZ2VPYmopIHtcclxuICAgICAgICAgICAgaWYgKCFjb3JlLl9pc0JhbGxvb24pIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gcmFuZ2VPYmogfHwgY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvcEFyZWEgPSBjb250ZXh0LmVsZW1lbnQudG9wQXJlYTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gY29yZS5nZXRTZWxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBpc0RpclRvcDtcclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbkFsd2F5cyAmJiByYW5nZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIGlzRGlyVG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb24uZm9jdXNOb2RlID09PSBzZWxlY3Rpb24uYW5jaG9yTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgaXNEaXJUb3AgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQgPCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgaXNEaXJUb3AgPSB1dGlsLmdldEFycmF5SW5kZXgoY2hpbGROb2Rlcywgc2VsZWN0aW9uLmZvY3VzTm9kZSkgPCB1dGlsLmdldEFycmF5SW5kZXgoY2hpbGROb2Rlcywgc2VsZWN0aW9uLmFuY2hvck5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjdHMgPSByYW5nZS5nZXRDbGllbnRSZWN0cygpO1xyXG4gICAgICAgICAgICByZWN0cyA9IHJlY3RzW2lzRGlyVG9wID8gMCA6IHJlY3RzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZ2xvYmFsU2Nyb2xsID0gY29yZS5nZXRHbG9iYWxTY3JvbGxPZmZzZXQoKTtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbExlZnQgPSBnbG9iYWxTY3JvbGwubGVmdDtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbFRvcCA9IGdsb2JhbFNjcm9sbC50b3A7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3JXaWR0aCA9IHRvcEFyZWEub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSBldmVudC5fZ2V0RWRpdG9yT2Zmc2V0cyhudWxsKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RpY2t5VG9wID0gb2Zmc2V0cy50b3A7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckxlZnQgPSBvZmZzZXRzLmxlZnQ7XHJcblxyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLnRvcCA9ICctMTAwMDBweCc7XHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyZWN0cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmluc2VydE5vZGUoemVyb1dpZHRoLCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZSh6ZXJvV2lkdGgsIDEsIHplcm9XaWR0aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWN0cyA9IGNvcmUuZ2V0UmFuZ2UoKS5nZXRDbGllbnRSZWN0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3RzID0gcmVjdHNbaXNEaXJUb3AgPyAwIDogcmVjdHMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFyZWN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVPZmZzZXQgPSB1dGlsLmdldE9mZnNldChub2RlLCBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICByZWN0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogbm9kZU9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IG5vZGVPZmZzZXQudG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogbm9kZU9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IG5vZGVPZmZzZXQudG9wICsgbm9kZS5vZmZzZXRIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVGV4dDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpc0RpclRvcCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFycm93TWFyZ2luID0gX3cuTWF0aC5yb3VuZChjb250ZXh0LmVsZW1lbnQuX2Fycm93Lm9mZnNldFdpZHRoIC8gMik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJXaWR0aCA9IHRvb2xiYXIub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJIZWlnaHQgPSB0b29sYmFyLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgY29uc3QgaWZyYW1lUmVjdHMgPSAvaWZyYW1lL2kudGVzdChjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLm5vZGVOYW1lKSA/IGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuZ2V0Q2xpZW50UmVjdHMoKVswXSA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChpZnJhbWVSZWN0cykge1xyXG4gICAgICAgICAgICAgICAgcmVjdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogcmVjdHMubGVmdCArIGlmcmFtZVJlY3RzLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiByZWN0cy50b3AgKyBpZnJhbWVSZWN0cy50b3AsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHJlY3RzLnJpZ2h0ICsgaWZyYW1lUmVjdHMucmlnaHQgLSBpZnJhbWVSZWN0cy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHJlY3RzLmJvdHRvbSArIGlmcmFtZVJlY3RzLmJvdHRvbSAtIGlmcmFtZVJlY3RzLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXZlbnQuX3NldFRvb2xiYXJPZmZzZXQoaXNEaXJUb3AsIHJlY3RzLCB0b29sYmFyLCBlZGl0b3JMZWZ0LCBlZGl0b3JXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wLCBzdGlja3lUb3AsIGFycm93TWFyZ2luKTtcclxuICAgICAgICAgICAgaWYgKHRvb2xiYXJXaWR0aCAhPT0gdG9vbGJhci5vZmZzZXRXaWR0aCB8fCB0b29sYmFySGVpZ2h0ICE9PSB0b29sYmFyLm9mZnNldEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3NldFRvb2xiYXJPZmZzZXQoaXNEaXJUb3AsIHJlY3RzLCB0b29sYmFyLCBlZGl0b3JMZWZ0LCBlZGl0b3JXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wLCBzdGlja3lUb3AsIGFycm93TWFyZ2luKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWRpdG9yUGFyZW50ID0gdG9wQXJlYS5wYXJlbnRFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBvcHRpb25zLnRvb2xiYXJDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IGNvbnRhaW5lci5vZmZzZXRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvcCA9IGNvbnRhaW5lci5vZmZzZXRUb3A7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUoIWNvbnRhaW5lci5wYXJlbnRFbGVtZW50LmNvbnRhaW5zKGVkaXRvclBhcmVudCkgfHwgIS9eKEJPRFl8SFRNTCkkL2kudGVzdChjb250YWluZXIucGFyZW50RWxlbWVudC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIub2Zmc2V0UGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgKz0gY29udGFpbmVyLm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wICs9IGNvbnRhaW5lci5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5sZWZ0ID0gKHRvb2xiYXIub2Zmc2V0TGVmdCAtIGxlZnQgKyB0b3BBcmVhLm9mZnNldExlZnQpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUudG9wID0gKHRvb2xiYXIub2Zmc2V0VG9wIC0gdG9wICsgdG9wQXJlYS5vZmZzZXRUb3ApICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFRvb2xiYXJPZmZzZXQ6IGZ1bmN0aW9uIChpc0RpclRvcCwgcmVjdHMsIHRvb2xiYXIsIGVkaXRvckxlZnQsIGVkaXRvcldpZHRoLCBzY3JvbGxMZWZ0LCBzY3JvbGxUb3AsIHN0aWNreVRvcCwgYXJyb3dNYXJnaW4pIHtcclxuICAgICAgICAgICAgY29uc3QgcGFkZGluZyA9IDE7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJXaWR0aCA9IHRvb2xiYXIub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJIZWlnaHQgPSByZWN0cy5ub1RleHQgJiYgIWlzRGlyVG9wID8gMCA6IHRvb2xiYXIub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWJzb2x1dGVMZWZ0ID0gKGlzRGlyVG9wID8gcmVjdHMubGVmdCA6IHJlY3RzLnJpZ2h0KSAtIGVkaXRvckxlZnQgLSAodG9vbGJhcldpZHRoIC8gMikgKyBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICBjb25zdCBvdmVyUmlnaHQgPSBhYnNvbHV0ZUxlZnQgKyB0b29sYmFyV2lkdGggLSBlZGl0b3JXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIGxldCB0ID0gKGlzRGlyVG9wID8gcmVjdHMudG9wIC0gdG9vbGJhckhlaWdodCAtIGFycm93TWFyZ2luIDogcmVjdHMuYm90dG9tICsgYXJyb3dNYXJnaW4pIC0gKHJlY3RzLm5vVGV4dCA/IDAgOiBzdGlja3lUb3ApICsgc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBsZXQgbCA9IGFic29sdXRlTGVmdCA8IDAgPyBwYWRkaW5nIDogb3ZlclJpZ2h0IDwgMCA/IGFic29sdXRlTGVmdCA6IGFic29sdXRlTGVmdCAtIG92ZXJSaWdodCAtIHBhZGRpbmcgLSAxO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc2V0VG9wID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwYWNlID0gdCArIChpc0RpclRvcCA/IChldmVudC5fZ2V0RWRpdG9yT2Zmc2V0cyhudWxsKS50b3ApIDogKHRvb2xiYXIub2Zmc2V0SGVpZ2h0IC0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcub2Zmc2V0SGVpZ2h0KSk7XHJcbiAgICAgICAgICAgIGlmICghaXNEaXJUb3AgJiYgc3BhY2UgPiAwICYmIGV2ZW50Ll9nZXRQYWdlQm90dG9tU3BhY2UoKSA8IHNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBpc0RpclRvcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXNldFRvcCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEaXJUb3AgJiYgX2QuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFRvcCA+IHNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBpc0RpclRvcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRUb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzZXRUb3ApIHQgPSAoaXNEaXJUb3AgPyByZWN0cy50b3AgLSB0b29sYmFySGVpZ2h0IC0gYXJyb3dNYXJnaW4gOiByZWN0cy5ib3R0b20gKyBhcnJvd01hcmdpbikgLSAocmVjdHMubm9UZXh0ID8gMCA6IHN0aWNreVRvcCkgKyBzY3JvbGxUb3A7XHJcblxyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLmxlZnQgPSBfdy5NYXRoLmZsb29yKGwpICsgJ3B4JztcclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS50b3AgPSBfdy5NYXRoLmZsb29yKHQpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0RpclRvcCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0LmVsZW1lbnQuX2Fycm93LCAnc2UtYXJyb3ctdXAnKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoY29udGV4dC5lbGVtZW50Ll9hcnJvdywgJ3NlLWFycm93LWRvd24nKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fYXJyb3cuc3R5bGUudG9wID0gdG9vbGJhckhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvbnRleHQuZWxlbWVudC5fYXJyb3csICdzZS1hcnJvdy1kb3duJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNvbnRleHQuZWxlbWVudC5fYXJyb3csICdzZS1hcnJvdy11cCcpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9hcnJvdy5zdHlsZS50b3AgPSAtYXJyb3dNYXJnaW4gKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhcnJvd19sZWZ0ID0gX3cuTWF0aC5mbG9vcigodG9vbGJhcldpZHRoIC8gMikgKyAoYWJzb2x1dGVMZWZ0IC0gbCkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX2Fycm93LnN0eWxlLmxlZnQgPSAoYXJyb3dfbGVmdCArIGFycm93TWFyZ2luID4gdG9vbGJhci5vZmZzZXRXaWR0aCA/IHRvb2xiYXIub2Zmc2V0V2lkdGggLSBhcnJvd01hcmdpbiA6IGFycm93X2xlZnQgPCBhcnJvd01hcmdpbiA/IGFycm93TWFyZ2luIDogYXJyb3dfbGVmdCkgKyAncHgnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zaG93VG9vbGJhcklubGluZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWNvcmUuX2lzSW5saW5lKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIHRvb2xiYXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgICAgICBlbHNlIHRvb2xiYXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIGNvcmUuX2lubGluZVRvb2xiYXJBdHRyLndpZHRoID0gdG9vbGJhci5zdHlsZS53aWR0aCA9IG9wdGlvbnMudG9vbGJhcldpZHRoO1xyXG4gICAgICAgICAgICBjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci50b3AgPSB0b29sYmFyLnN0eWxlLnRvcCA9IChvcHRpb25zLnRvb2xiYXJDb250YWluZXIgPyAwIDogKC0xIC0gdG9vbGJhci5vZmZzZXRIZWlnaHQpKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5zaG93SW5saW5lID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMuc2hvd0lubGluZSh0b29sYmFyLCBjb250ZXh0LCBjb3JlKTtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50Lm9uU2Nyb2xsX3dpbmRvdygpO1xyXG4gICAgICAgICAgICBjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLnZpc2liaWxpdHkgPSAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaGlkZVRvb2xiYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjb3JlLl9ub3RIaWRlVG9vbGJhciAmJiAhY29yZS5fdmFyaWFibGUuaXNGdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgY29yZS5faW5saW5lVG9vbGJhckF0dHIuaXNTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbklucHV0X3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgvQVVESU8vLnRlc3QoZS50YXJnZXQubm9kZU5hbWUpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzUmVhZE9ubHkgfHwgY29yZS5pc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LmdvKGNvcmUuaGlzdG9yeS5nZXRDdXJyZW50SW5kZXgoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2VkaXRvclJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gKGUuZGF0YSA9PT0gbnVsbCA/ICcnIDogZS5kYXRhID09PSB1bmRlZmluZWQgPyAnICcgOiBlLmRhdGEpIHx8ICcnO1xyXG4gICAgICAgICAgICBpZiAoIWNvcmUuX2NoYXJDb3VudChkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbklucHV0ID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbklucHV0KGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNVbmVkaXRhYmxlTm9kZTogZnVuY3Rpb24gKHJhbmdlLCBpc0Zyb250KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGlzRnJvbnQgPyByYW5nZS5zdGFydENvbnRhaW5lciA6IHJhbmdlLmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gaXNGcm9udCA/IHJhbmdlLnN0YXJ0T2Zmc2V0IDogcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICBjb25zdCBzaWJsaW5nS2V5ID0gaXNGcm9udCA/ICdwcmV2aW91c1NpYmxpbmcnIDogJ25leHRTaWJsaW5nJztcclxuICAgICAgICAgICAgY29uc3QgaXNFbGVtZW50ID0gY29udGFpbmVyLm5vZGVUeXBlID09PSAxO1xyXG4gICAgICAgICAgICBsZXQgc2libGluZ05vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nTm9kZSA9IGV2ZW50Ll9pc1VuZWRpdGFibGVOb2RlX2dldFNpYmxpbmcoY29udGFpbmVyLmNoaWxkTm9kZXNbb2Zmc2V0XSwgc2libGluZ0tleSwgY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaWJsaW5nTm9kZSAmJiBzaWJsaW5nTm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBzaWJsaW5nTm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpID09PSAnZmFsc2UnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2libGluZ05vZGUgPSBldmVudC5faXNVbmVkaXRhYmxlTm9kZV9nZXRTaWJsaW5nKGNvbnRhaW5lciwgc2libGluZ0tleSwgY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb3JlLmlzRWRnZVBvaW50KGNvbnRhaW5lciwgb2Zmc2V0LCBpc0Zyb250ID8gJ2Zyb250JyA6ICdlbmQnKSAmJiAoc2libGluZ05vZGUgJiYgc2libGluZ05vZGUubm9kZVR5cGUgPT09IDEgJiYgc2libGluZ05vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKSA9PT0gJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNVbmVkaXRhYmxlTm9kZV9nZXRTaWJsaW5nOiBmdW5jdGlvbiAoc2VsZWN0Tm9kZSwgc2libGluZ0tleSwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZWN0Tm9kZSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGxldCBzaWJsaW5nTm9kZSA9IHNlbGVjdE5vZGVbc2libGluZ0tleV07XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNpYmxpbmdOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nTm9kZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgc2libGluZ05vZGUgPSBzaWJsaW5nTm9kZSA/IHNpYmxpbmdOb2RlW3NpYmxpbmdLZXldIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nTm9kZSAmJiAhdXRpbC5pc0NvbXBvbmVudChzaWJsaW5nTm9kZSkpIHNpYmxpbmdOb2RlID0gc2libGluZ0tleSA9PT0gJ3ByZXZpb3VzU2libGluZycgPyBzaWJsaW5nTm9kZS5maXJzdENoaWxkIDogc2libGluZ05vZGUubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmdOb2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblNob3J0Y3V0S2V5OiBmYWxzZSxcclxuICAgICAgICBvbktleURvd25fd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGlvbk5vZGUgPSBjb3JlLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNJbnB1dEVsZW1lbnQoc2VsZWN0aW9uTm9kZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gZS5zaGlmdEtleTtcclxuICAgICAgICAgICAgY29uc3QgY3RybCA9IGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwga2V5Q29kZSA9PT0gOTEgfHwga2V5Q29kZSA9PT0gOTIgfHwga2V5Q29kZSA9PT0gMjI0O1xyXG4gICAgICAgICAgICBjb25zdCBhbHQgPSBlLmFsdEtleTtcclxuICAgICAgICAgICAgZXZlbnQuX0lFaXNDb21wb3NpbmcgPSBrZXlDb2RlID09PSAyMjk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWN0cmwgJiYgY29yZS5pc1JlYWRPbmx5ICYmICFldmVudC5fY3Vyc29yTW92ZUtleUNvZGUudGVzdChrZXlDb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9pc0JhbGxvb24pIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uS2V5RG93biA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbnMub25LZXlEb3duKGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLyoqIFNob3J0Y3V0cyAqL1xyXG4gICAgICAgICAgICBpZiAoY3RybCAmJiBldmVudC5fc2hvcnRjdXRDb21tYW5kKGtleUNvZGUsIHNoaWZ0KSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX29uU2hvcnRjdXRLZXkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5fb25TaG9ydGN1dEtleSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX29uU2hvcnRjdXRLZXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIGRlZmF1bHQga2V5IGFjdGlvbiAqL1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0UmFuZ2UgPSAhcmFuZ2UuY29sbGFwc2VkIHx8IHJhbmdlLnN0YXJ0Q29udGFpbmVyICE9PSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnROYW1lID0gY29yZS5fZmlsZU1hbmFnZXIucGx1Z2luUmVnRXhwLnRlc3QoY29yZS5jdXJyZW50Q29udHJvbGxlck5hbWUpID8gY29yZS5jdXJyZW50Q29udHJvbGxlck5hbWUgOiAnJztcclxuICAgICAgICAgICAgbGV0IGZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUsIG51bGwpIHx8IHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgIGxldCByYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNBcnJvd0tleSA9IC8zN3wzOHwzOXw0MC8udGVzdChlLmtleUNvZGUpO1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJvd0tleSAmJiBldmVudC5fb25LZXlEb3duX3d5c2l3eWdfYXJyb3dLZXkoZSkgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgODogLyoqIGJhY2tzcGFjZSBrZXkgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUucGx1Z2luc1tmaWxlQ29tcG9uZW50TmFtZV0uZGVzdHJveS5jYWxsKGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RSYW5nZSAmJiBldmVudC5faGFyZERlbGV0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KGZvcm1hdEVsKSAmJiAhY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuZmlyc3RFbGVtZW50Q2hpbGQgJiYgIXV0aWwuaXNDb21wb25lbnQoc2VsZWN0aW9uTm9kZSkgJiYgY29yZS5fc2V0RGVmYXVsdEZvcm1hdChvcHRpb25zLmRlZmF1bHRUYWcpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RSYW5nZSAmJiAhZm9ybWF0RWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAocmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDAgJiYgIXNlbGVjdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzTGlzdENlbGwoZm9ybWF0RWwpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh1dGlsLmlzRm9ybWF0RWxlbWVudChmb3JtYXRFbCkgJiYgKCF1dGlsLmlzRnJlZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwpIHx8IHV0aWwuaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwpKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsb3N1cmUgcmFuZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNDbG9zdXJlUmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdEVsLnBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1haW50YWluIGRlZmF1bHQgZm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0Rpdihmb3JtYXRFbC5wYXJlbnROb2RlKSAmJiBmb3JtYXRFbC5jaGlsZE5vZGVzLmxlbmd0aCA8PSAxICYmICghZm9ybWF0RWwuZmlyc3RDaGlsZCB8fCB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShmb3JtYXRFbC50ZXh0Q29udGVudCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBvcHRpb25zLmRlZmF1bHRUYWcudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IGZvcm1hdEVsLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGF0dHJzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyc1swXS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRGb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Rm9ybWF0LmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5wYXJlbnRFbGVtZW50LnJlcGxhY2VDaGlsZChkZWZhdWx0Rm9ybWF0LCBmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiByZW1vdmUgdGFnXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRDb24gPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RWwgJiYgIWZvcm1hdEVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDAgJiYgc3RhcnRDb24ubm9kZVR5cGUgPT09IDMgJiYgIXV0aWwuaXNGb3JtYXRFbGVtZW50KHN0YXJ0Q29uLnBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gc3RhcnRDb24ucGFyZW50Tm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBzdGFydENvbi5wYXJlbnROb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByZXYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwuYXBwZW5kQ2hpbGQocHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBuZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29uID0gc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGZvcm1hdEVsLmNvbnRhaW5zKGNvbikgJiYgIWNvbi5wcmV2aW91c1NpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbiA9IGNvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvcm1hdEVsLmNvbnRhaW5zKGNvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKHN0YXJ0Q29uLCBudWxsLCBmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFnW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Ll9pc1VuZWRpdGFibGVOb2RlKHJhbmdlLCB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9ybWF0IGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlICYmIGNvcmUuX2lzRWRnZUZvcm1hdChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsICdzdGFydCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChmb3JtYXRFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5fZm9ybWF0QXR0cnNUZW1wID0gZm9ybWF0RWwucHJldmlvdXNFbGVtZW50U2libGluZy5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1vbkNvbiA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIGZvcm1hdEVsICYmICF1dGlsLmlzQ2VsbChyYW5nZUVsKSAmJiAhL15GSUdDQVBUSU9OJC9pLnRlc3QocmFuZ2VFbC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChmb3JtYXRFbCkgJiYgdXRpbC5pc0xpc3QocmFuZ2VFbCkgJiYgKHV0aWwuaXNMaXN0Q2VsbChyYW5nZUVsLnBhcmVudE5vZGUpIHx8IGZvcm1hdEVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpICYmIChzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCB8fCAoc2VsZWN0aW9uTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiAoIXNlbGVjdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nIHx8IHV0aWwuaXNMaXN0KHNlbGVjdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nKSkpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCkgIT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIsIG51bGwpID8gcmFuZ2VFbC5jb250YWlucyhyYW5nZS5zdGFydENvbnRhaW5lcikgOiAocmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDAgICYmIHJhbmdlLmNvbGxhcHNlZCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgIT09IHJhbmdlLmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5yZW1vdmVOb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBmb3JtYXRFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IHJhbmdlRWwucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKHByZXYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2TGFzdCA9IHByZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJldi5jb250YWlucyhmb3JtYXRFbCkgJiYgdXRpbC5pc0xpc3RDZWxsKHByZXZMYXN0KSAmJiB1dGlsLmlzTGlzdChwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkxhc3QgPSBwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodXRpbC5pc0xpc3RDZWxsKHByZXZMYXN0KSAmJiB1dGlsLmlzTGlzdChwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZMYXN0ID0gcHJldkxhc3QubGFzdEVsZW1lbnRDaGlsZCAmJiBwcmV2TGFzdC5sYXN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gcHJldkxhc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb24gPSBwcmV2ID09PSByYW5nZUVsLnBhcmVudE5vZGUgPyByYW5nZUVsLnByZXZpb3VzU2libGluZyA6IHByZXYubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29uLCByYW5nZUVsLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY29uLm5vZGVUeXBlID09PSAzID8gY29uLnRleHRDb250ZW50Lmxlbmd0aCA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gZm9ybWF0RWwuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFmdGVyID0gY29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkcmVuWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldi5pbnNlcnRCZWZvcmUoY2hpbGQsIGFmdGVyLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUVsLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgdXRpbC5yZW1vdmVJdGVtKHJhbmdlRWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShjb24sIG9mZnNldCwgY29uLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGV0YWNoIHJhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZXRhY2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbW0gPSBjb21tb25Db247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY29tbSAmJiBjb21tICE9PSByYW5nZUVsICYmICF1dGlsLmlzV3lzaXd5Z0Rpdihjb21tKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbS5wcmV2aW91c1NpYmxpbmcubm9kZVR5cGUgPT09IDEgfHwgIXV0aWwub25seVplcm9XaWR0aFNwYWNlKGNvbW0ucHJldmlvdXNTaWJsaW5nLnRleHRDb250ZW50LnRyaW0oKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbSA9IGNvbW0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWNoICYmIHJhbmdlRWwucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUVsLCAodXRpbC5pc0xpc3RDZWxsKGZvcm1hdEVsKSA/IFtmb3JtYXRFbF0gOiBudWxsKSwgbnVsbCwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgZm9ybWF0RWwgJiYgKHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwIHx8IChzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCA/ICEhZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gOiBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdGlvbk5vZGUgPT09IGZvcm1hdEVsID8gZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gOiBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gZm9ybWF0RWwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgZmlsZSBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWdub3JlWldTID0gKGNvbW1vbkNvbi5ub2RlVHlwZSA9PT0gMyB8fCB1dGlsLmlzQnJlYWsoY29tbW9uQ29uKSkgJiYgIWNvbW1vbkNvbi5wcmV2aW91c1NpYmxpbmcgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWwgJiYgIXNlbC5wcmV2aW91c1NpYmxpbmcgJiYgKCAoY29tbW9uQ29uICYmIHV0aWwuaXNDb21wb25lbnQoY29tbW9uQ29uLnByZXZpb3VzU2libGluZykpIHx8IChpZ25vcmVaV1MgJiYgdXRpbC5pc0NvbXBvbmVudChwcmV2KSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29tcG9uZW50SW5mbyA9IGNvcmUuZ2V0RmlsZUNvbXBvbmVudChwcmV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbC50ZXh0Q29udGVudC5sZW5ndGggPT09IDApIHV0aWwucmVtb3ZlSXRlbShmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuc2VsZWN0Q29tcG9uZW50KGZpbGVDb21wb25lbnRJbmZvLnRhcmdldCwgZmlsZUNvbXBvbmVudEluZm8ucGx1Z2luTmFtZSkgPT09IGZhbHNlKSBjb3JlLmJsdXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc0NvbXBvbmVudChwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShwcmV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBub25FZGl0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsICYmIHV0aWwuaXNOb25FZGl0YWJsZShzZWwucHJldmlvdXNTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShzZWwucHJldmlvdXNTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDY6IC8qKiBkZWxldGUga2V5ICovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5wbHVnaW5zW2ZpbGVDb21wb25lbnROYW1lXS5kZXN0cm95LmNhbGwoY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdFJhbmdlICYmIGV2ZW50Ll9oYXJkRGVsZXRlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhZ1tjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5faXNVbmVkaXRhYmxlTm9kZShyYW5nZSwgZmFsc2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHV0aWwuaXNGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUpIHx8IHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcgPT09IG51bGwgfHwgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcpICYmIHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcubmV4dFNpYmxpbmcgPT09IG51bGwpKSAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEVsID0gZm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRFbCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQ29tcG9uZW50KG5leHRFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoZm9ybWF0RWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdEVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0YWJsZSBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1RhYmxlKG5leHRFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB1dGlsLmdldENoaWxkRWxlbWVudChuZXh0RWwsIHV0aWwuaXNDZWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwgPSBjZWxsLmZpcnN0RWxlbWVudENoaWxkIHx8IGNlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoY2VsbCwgMCwgY2VsbCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgZmlsZSBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KG5leHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLnNlbGVjdENvbXBvbmVudChmaWxlQ29tcG9uZW50SW5mby50YXJnZXQsIGZpbGVDb21wb25lbnRJbmZvLnBsdWdpbk5hbWUpID09PSBmYWxzZSkgY29yZS5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNDb21wb25lbnQobmV4dEVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKG5leHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgKGNvcmUuaXNFZGdlUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpIHx8IChzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCA/ICEhZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gOiBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdGlvbk5vZGUgPT09IGZvcm1hdEVsID8gZm9ybWF0RWwuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gfHwgc2VsZWN0aW9uTm9kZSA6IHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBub25FZGl0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsICYmIHV0aWwuaXNOb25FZGl0YWJsZShzZWwubmV4dFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHNlbC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzQ29tcG9uZW50KHNlbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oc2VsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXQgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgY29yZS5faXNFZGdlRm9ybWF0KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCAnZW5kJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGZvcm1hdEVsLm5leHRFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuX2Zvcm1hdEF0dHJzVGVtcCA9IGZvcm1hdEVsLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5lc3RlZCBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChmb3JtYXRFbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChmb3JtYXRFbCkgJiYgdXRpbC5pc0xpc3QocmFuZ2VFbCkgJiYgKHNlbGVjdGlvbk5vZGUgPT09IGZvcm1hdEVsIHx8IChzZWxlY3Rpb25Ob2RlLm5vZGVUeXBlID09PSAzICYmICghc2VsZWN0aW9uTm9kZS5uZXh0U2libGluZyB8fCB1dGlsLmlzTGlzdChzZWxlY3Rpb25Ob2RlLm5leHRTaWJsaW5nKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCkgIT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIsIG51bGwpID8gcmFuZ2VFbC5jb250YWlucyhyYW5nZS5lbmRDb250YWluZXIpIDogKHJhbmdlLmVuZE9mZnNldCA9PT0gc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudC5sZW5ndGggJiYgcmFuZ2UuY29sbGFwc2VkKSkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgIT09IHJhbmdlLmVuZENvbnRhaW5lcikgY29yZS5yZW1vdmVOb2RlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHV0aWwuZ2V0QXJyYXlJdGVtKGZvcm1hdEVsLmNoaWxkcmVuLCB1dGlsLmlzTGlzdCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dCB8fCBmb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcgfHwgcmFuZ2VFbC5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgKHV0aWwuaXNMaXN0KG5leHQpIHx8IHV0aWwuZ2V0QXJyYXlJdGVtKG5leHQuY2hpbGRyZW4sIHV0aWwuaXNMaXN0LCBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbiwgY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3QobmV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IG5leHQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbiA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5pbnNlcnRCZWZvcmUoY2hpbGRyZW5bMF0sIG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gPSBuZXh0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBuZXh0LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLmFwcGVuZENoaWxkKGNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShjb24sIDAsIGNvbiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5OiAvKiogdGFiIGtleSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50TmFtZSB8fCBvcHRpb25zLnRhYkRpc2FibGUpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3RybCB8fCBhbHQgfHwgdXRpbC5pc1d5c2l3eWdEaXYoc2VsZWN0aW9uTm9kZSkpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0VkZ2UgPSAoIXJhbmdlLmNvbGxhcHNlZCB8fCBjb3JlLmlzRWRnZVBvaW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRm9ybWF0cyA9IGNvcmUuZ2V0U2VsZWN0ZWRFbGVtZW50cyhudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmMgPSB1dGlsLmlzTGlzdENlbGwoc2VsZWN0ZWRGb3JtYXRzWzBdKSwgbGMgPSB1dGlsLmlzTGlzdENlbGwoc2VsZWN0ZWRGb3JtYXRzW3NlbGVjdGVkRm9ybWF0cy5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSB7c2M6IHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzbzogcmFuZ2Uuc3RhcnRPZmZzZXQsIGVjOiByYW5nZS5lbmRDb250YWluZXIsIGVvOiByYW5nZS5lbmRPZmZzZXR9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoLCBmOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHNlbGVjdGVkRm9ybWF0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChmKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgIXNoaWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBOZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwICYmIGlzRWRnZSAmJiBjb3JlLnBsdWdpbnMubGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gY29yZS5wbHVnaW5zLmxpc3QuZWRpdEluc2lkZUxpc3QuY2FsbChjb3JlLCBzaGlmdCwgY2VsbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlQ2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3Rpb25Ob2RlLCB1dGlsLmlzQ2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZUNlbGwgJiYgaXNFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZSA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0YWJsZUNlbGwsICd0YWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB1dGlsLmdldExpc3RDaGlsZHJlbih0YWJsZSwgdXRpbC5pc0NlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlkeCA9IHNoaWZ0ID8gdXRpbC5wcmV2SWR4KGNlbGxzLCB0YWJsZUNlbGwpIDogdXRpbC5uZXh0SWR4KGNlbGxzLCB0YWJsZUNlbGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPT09IGNlbGxzLmxlbmd0aCAmJiAhc2hpZnQpIGlkeCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAtMSAmJiBzaGlmdCkgaWR4ID0gY2VsbHMubGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW92ZUNlbGwgPSBjZWxsc1tpZHhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3ZlQ2VsbCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlQ2VsbCA9IG1vdmVDZWxsLmZpcnN0RWxlbWVudENoaWxkIHx8IG1vdmVDZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShtb3ZlQ2VsbCwgMCwgbW92ZUNlbGwsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzID0gbGluZXMuY29uY2F0KGNlbGxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmMgPSBsYyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBMaW5lcyB0YWIoNClcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNoaWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJUZXh0ID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShuZXcgX3cuQXJyYXkoY29yZS5fdmFyaWFibGUudGFiU2l6ZSArIDEpLmpvaW4oJ1xcdTAwQTAnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dFJhbmdlID0gY29yZS5pbnNlcnROb2RlKHRhYlRleHQsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGV4dFJhbmdlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNjID0gdGFiVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zbyA9IHRleHRSYW5nZS5lbmRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5lYyA9IHRhYlRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZW8gPSB0ZXh0UmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuID0gbGluZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgY2hpbGQ7IGkgPD0gbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBsaW5lc1tpXS5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lc1tpXS5pbnNlcnRCZWZvcmUodGFiVGV4dC5jbG9uZU5vZGUoZmFsc2UpLCBjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC50ZXh0Q29udGVudCA9IHRhYlRleHQudGV4dENvbnRlbnQgKyBjaGlsZC50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RDaGlsZCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVzWzBdLCAndGV4dCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRDaGlsZCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVzW2xlbl0sICd0ZXh0JywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmYyAmJiBmaXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2MgPSBmaXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNvID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsYyAmJiBlbmRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmVjID0gZW5kQ2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZW8gPSBlbmRDaGlsZC50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuID0gbGluZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsaW5lOyBpIDw9IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmVzW2ldLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDAsIGNMZW4gPSBsaW5lLmxlbmd0aCwgY2hpbGQ7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBsaW5lW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKGNoaWxkKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15cXHN7MSw0fSQvLnRlc3QoY2hpbGQudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eXFxzezEsNH0vLnRlc3QoY2hpbGQudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC50ZXh0Q29udGVudCA9IGNoaWxkLnRleHRDb250ZW50LnJlcGxhY2UoL15cXHN7MSw0fS8sICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lc1swXSwgJ3RleHQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRDaGlsZCA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVzW2xlbl0sICd0ZXh0JywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZjICYmIGZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNjID0gZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNvID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGMgJiYgZW5kQ2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmVjID0gZW5kQ2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5lbyA9IGVuZENoaWxkLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShyLnNjLCByLnNvLCByLmVjLCByLmVvKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMTM6IC8qKiBlbnRlciBrZXkgKi9cclxuICAgICAgICAgICAgICAgICAgICAvLyBlbnRlciBsb2dpbiBzdGFydFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWVGb3JtYXRFbCA9IHV0aWwuZ2V0RnJlZUZvcm1hdEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgbnVsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLl9jaGFyVHlwZUhUTUwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVudGVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFzaGlmdCAmJiBmcmVlRm9ybWF0RWwpIHx8IHNoaWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlckhUTUwgPSAnPCcgKyBmb3JtYXRFbC5ub2RlTmFtZSArICc+PGJyPjwvJyArIGZvcm1hdEVsLm5vZGVOYW1lICsgJz4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvcmUuY2hlY2tDaGFyQ291bnQoZW50ZXJIVE1MLCAnYnl0ZS1odG1sJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaGlmdCAmJiAhZmlsZUNvbXBvbmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0RW5kRWRnZSA9IGNvcmUuX2lzRWRnZUZvcm1hdChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRTdGFydEVkZ2UgPSBjb3JlLl9pc0VkZ2VGb3JtYXQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCAnc3RhcnQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBkZWZhdWx0IGZvcm1hdCBsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbmRFZGdlICYmICgvXkhbMS02XSQvaS50ZXN0KGZvcm1hdEVsLm5vZGVOYW1lKSB8fCAvXkhSJC9pLnRlc3QoZm9ybWF0RWwubm9kZU5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Zvcm1hdCA9IGNvcmUuYXBwZW5kRm9ybWF0VGFnKGZvcm1hdEVsLCBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbmRFZGdlICYmIGZvcm1hdEVuZEVkZ2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSBmb3JtYXRFbmRFZGdlLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlubmVyTm9kZSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoZm9ybWF0RW5kRWRnZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSB0ZW1wLmFwcGVuZENoaWxkKGZvcm1hdEVuZEVkZ2UucG9wKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdGb3JtYXQuYXBwZW5kQ2hpbGQoaW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gIXRlbXAgPyBuZXdGb3JtYXQuZmlyc3RDaGlsZCA6IHRlbXAuYXBwZW5kQ2hpbGQobmV3Rm9ybWF0LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayh0ZW1wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHplcm9XaWR0aCA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIHRlbXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoemVyb1dpZHRoLCAxLCB6ZXJvV2lkdGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKHRlbXAsIDAsIHRlbXAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2VFbCAmJiBmb3JtYXRFbCAmJiAhdXRpbC5pc0NlbGwocmFuZ2VFbCkgJiYgIS9eRklHQ0FQVElPTiQvaS50ZXN0KHJhbmdlRWwubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvcmUuaXNFZGdlUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpICYmIHV0aWwuaXNMaXN0KHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdFbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnTEknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiciA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5hcHBlbmRDaGlsZChicik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBmb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsLmFwcGVuZENoaWxkKHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGJyLCAxLCBiciwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMyA/ICFyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcgOiB0cnVlKSAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShmb3JtYXRFbC5pbm5lclRleHQudHJpbSgpKSAmJiAhdXRpbC5pc0xpc3RDZWxsKGZvcm1hdEVsLm5leHRFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdFbCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwocmFuZ2VFbC5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRMaSA9IGZvcm1hdEVsLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbCA9IHBhcmVudExpLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xpc3RDZWxsID0gdXRpbC5jcmVhdGVFbGVtZW50KCdMSScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0Q2VsbC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3TGlzdENlbGwsIGZvcm1hdEVsLCBvcHRpb25zLmxpbmVBdHRyUmVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IG5ld0xpc3RDZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsLmluc2VydEJlZm9yZShuZXdFbCwgcGFyZW50TGkubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdGb3JtYXQgPSB1dGlsLmlzQ2VsbChyYW5nZUVsLnBhcmVudE5vZGUpID8gJ0RJVicgOiB1dGlsLmlzTGlzdChyYW5nZUVsLnBhcmVudE5vZGUpID8gJ0xJJyA6ICh1dGlsLmlzRm9ybWF0RWxlbWVudChyYW5nZUVsLm5leHRFbGVtZW50U2libGluZykgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbC5uZXh0RWxlbWVudFNpYmxpbmcpKSA/IHJhbmdlRWwubmV4dEVsZW1lbnRTaWJsaW5nLm5vZGVOYW1lIDogKHV0aWwuaXNGb3JtYXRFbGVtZW50KHJhbmdlRWwucHJldmlvdXNFbGVtZW50U2libGluZykgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSkgPyByYW5nZUVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcubm9kZU5hbWUgOiBvcHRpb25zLmRlZmF1bHRUYWc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gdXRpbC5jcmVhdGVFbGVtZW50KG5ld0Zvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3RWwsIGZvcm1hdEVsLCBvcHRpb25zLmxpbmVBdHRyUmVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGdlID0gY29yZS5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbCwgW2Zvcm1hdEVsXSwgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2UuY2MuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlZGdlLmVjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW1BbGxQYXJlbnRzKGZvcm1hdEVsLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG5ld0VsLCAxLCBuZXdFbCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVlRm9ybWF0RWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25Gb3JtYXQgPSBzZWxlY3Rpb25Ob2RlID09PSBmcmVlRm9ybWF0RWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3U2VsZWN0aW9uID0gY29yZS5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2VsZWN0aW9uTm9kZS5jaGlsZE5vZGVzLCBvZmZzZXQgPSB3U2VsZWN0aW9uLmZvY3VzT2Zmc2V0LCBwcmV2ID0gc2VsZWN0aW9uTm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCBuZXh0ID0gc2VsZWN0aW9uTm9kZS5uZXh0U2libGluZztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQoZnJlZUZvcm1hdEVsKSAmJiAhIWNoaWxkcmVuICYmICgoc2VsZWN0aW9uRm9ybWF0ICYmIHJhbmdlLmNvbGxhcHNlZCAmJiBjaGlsZHJlbi5sZW5ndGggLSAxIDw9IG9mZnNldCArIDEgJiYgdXRpbC5pc0JyZWFrKGNoaWxkcmVuW29mZnNldF0pICYmICghY2hpbGRyZW5bb2Zmc2V0ICsgMV0gfHwgKCghY2hpbGRyZW5bb2Zmc2V0ICsgMl0gfHwgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoY2hpbGRyZW5bb2Zmc2V0ICsgMl0udGV4dENvbnRlbnQpKSAmJiBjaGlsZHJlbltvZmZzZXQgKyAxXS5ub2RlVHlwZSA9PT0gMyAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjaGlsZHJlbltvZmZzZXQgKyAxXS50ZXh0Q29udGVudCkpKSAmJiAgb2Zmc2V0ID4gMCAmJiB1dGlsLmlzQnJlYWsoY2hpbGRyZW5bb2Zmc2V0IC0gMV0pKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghc2VsZWN0aW9uRm9ybWF0ICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQpICYmIHV0aWwuaXNCcmVhayhwcmV2KSAmJiAodXRpbC5pc0JyZWFrKHByZXYucHJldmlvdXNTaWJsaW5nKSB8fCAhdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocHJldi5wcmV2aW91c1NpYmxpbmcudGV4dENvbnRlbnQpKSAmJiAoIW5leHQgfHwgKCF1dGlsLmlzQnJlYWsobmV4dCkgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UobmV4dC50ZXh0Q29udGVudCkpKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25Gb3JtYXQpIHV0aWwucmVtb3ZlSXRlbShjaGlsZHJlbltvZmZzZXQgLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB1dGlsLnJlbW92ZUl0ZW0oc2VsZWN0aW9uTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RWwgPSBjb3JlLmFwcGVuZEZvcm1hdFRhZyhmcmVlRm9ybWF0RWwsICh1dGlsLmlzRm9ybWF0RWxlbWVudChmcmVlRm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChmcmVlRm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nKSkgPyBmcmVlRm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5Rm9ybWF0QXR0cmlidXRlcyhuZXdFbCwgZnJlZUZvcm1hdEVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG5ld0VsLCAxLCBuZXdFbCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9ucy5pbnNlcnRIVE1MKCgocmFuZ2UuY29sbGFwc2VkICYmIHV0aWwuaXNCcmVhayhyYW5nZS5zdGFydENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLnN0YXJ0T2Zmc2V0IC0gMV0pKSA/ICc8YnI+JyA6ICc8YnI+PGJyPicpLCB0cnVlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb2N1c05vZGUgPSB3U2VsZWN0aW9uLmZvY3VzTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3T2Zmc2V0ID0gd1NlbGVjdGlvbi5mb2N1c09mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJlZUZvcm1hdEVsID09PSBmb2N1c05vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlID0gZm9jdXNOb2RlLmNoaWxkTm9kZXNbd09mZnNldCAtIG9mZnNldCA+IDEgPyB3T2Zmc2V0IC0gMSA6IHdPZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShmb2N1c05vZGUsIDEsIGZvY3VzTm9kZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzTmV4dCA9IHdTZWxlY3Rpb24uZm9jdXNOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaW5zZXJ0Tm9kZShiciwgbnVsbCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiclByZXYgPSBici5wcmV2aW91c1NpYmxpbmcsIGJyTmV4dCA9IGJyLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKGZvY3VzTmV4dCkgJiYgIXV0aWwuaXNCcmVhayhiclByZXYpICYmICghYnJOZXh0IHx8IHV0aWwub25seVplcm9XaWR0aFNwYWNlKGJyTmV4dCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGJyLmNsb25lTm9kZShmYWxzZSksIGJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShiciwgMSwgYnIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoYnJOZXh0LCAwLCBick5leHQsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fb25TaG9ydGN1dEtleSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGZvcm1hdCBhdHRycyAtIGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAmJiAoZm9ybWF0U3RhcnRFZGdlIHx8IGZvcm1hdEVuZEVkZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobWRDb252ZXJ0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5pbm5lckhUTUwgPSBtZENvbnZlcnRlci5tYWtlSHRtbChmb3JtYXRFbC5pbm5lckhUTUwpLnJlcGxhY2UoLzxcXC8/cFtePl0qPi9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZihhbmNob3JtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGZvcm1hdEVsLmlubmVySFRNTCA9IGFuY2hvcm1lKHtpbnB1dDogZm9ybWF0RWwuaW5uZXJIVE1MLCBvcHRpb25zOiB7IGF0dHJpYnV0ZXM6IHsgdGFyZ2V0OiBcIl9ibGFua1wifX19KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGZvcm1hdEVuZEVkZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvcmUuc2V0UmFuZ2UoZm9ybWF0RWwsIDEsIGZvcm1hdEVsLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9jdXNCUiA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Zvcm1hdCA9IHV0aWwuY3JlYXRlRWxlbWVudChmb3JtYXRFbC5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlUYWdBdHRyaWJ1dGVzKG5ld0Zvcm1hdCwgZm9ybWF0RWwsIG9wdGlvbnMubGluZUF0dHJSZXNldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gZm9jdXNCUjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNCcmVhayhzZWxlY3Rpb25Ob2RlKSAmJiBzZWxlY3Rpb25Ob2RlLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGYgPSBzZWxlY3Rpb25Ob2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb25Ob2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlKGZvcm1hdEVsICE9PSBzZWxlY3Rpb25Ob2RlICYmIGZvcm1hdEVsLmNvbnRhaW5zKHNlbGVjdGlvbk5vZGUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdGb3JtYXQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Rm9ybWF0LCBmb3JtYXRTdGFydEVkZ2UgJiYgIWZvcm1hdEVuZEVkZ2UgPyBmb3JtYXRFbCA6IGZvcm1hdEVsLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RW5kRWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoZm9jdXNCUiwgMSwgZm9jdXNCUiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdFbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyYW5nZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc011bHRpTGluZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCkgIT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Zvcm1hdCA9IGZvcm1hdEVsLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Rm9ybWF0LmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gY29yZS5yZW1vdmVOb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoci5jb250YWluZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3RWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KHIuY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmFwcGVuZENoaWxkKG5ld0Zvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IG5ld0Zvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3RWwsIGZvcm1hdEVsLCBvcHRpb25zLmxpbmVBdHRyUmVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShuZXdFbCwgb2Zmc2V0LCBuZXdFbCwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlubmVyUmFuZ2UgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChyLmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBuZXdFbC5jb250YWlucyhpbm5lclJhbmdlKSA/IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGlubmVyUmFuZ2UsIHV0aWwuZ2V0Rm9ybWF0RWxlbWVudC5iaW5kKHV0aWwpKSA6IG5ld0VsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc011bHRpTGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RW5kRWRnZSAmJiAhZm9ybWF0U3RhcnRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdGb3JtYXQsICghci5wcmV2Q29udGFpbmVyIHx8IHIuY29udGFpbmVyID09PSByLnByZXZDb250YWluZXIpID8gbmV3RWwubmV4dEVsZW1lbnRTaWJsaW5nIDogbmV3RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBuZXdGb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gci5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0U3RhcnRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcEVsID0gbmV3RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Rm9ybWF0LCBuZXdFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVuZEVkZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSB0ZW1wRWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVuZEVkZ2UgJiYgZm9ybWF0U3RhcnRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdGb3JtYXQsIChyLnByZXZDb250YWluZXIgJiYgci5jb250YWluZXIgPT09IHIucHJldkNvbnRhaW5lcikgPyBuZXdFbC5uZXh0RWxlbWVudFNpYmxpbmcgOiBuZXdFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IG5ld0Zvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuc3BsaXRFbGVtZW50KHIuY29udGFpbmVyLCByLm9mZnNldCwgdXRpbC5nZXRFbGVtZW50RGVwdGgoZm9ybWF0RWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKGZvcm1hdEVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IGNvcmUuYXBwZW5kRm9ybWF0VGFnKGZvcm1hdEVsLCBmb3JtYXRFbC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuc3BsaXRFbGVtZW50KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCB1dGlsLmdldEVsZW1lbnREZXB0aChmb3JtYXRFbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhuZXdFbCwgZm9ybWF0RWwsIG9wdGlvbnMubGluZUF0dHJSZXNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG5ld0VsLCBvZmZzZXQsIG5ld0VsLCBvZmZzZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0UmFuZ2UpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbCAmJiB1dGlsLmdldFBhcmVudEVsZW1lbnQocmFuZ2VFbCwgJ0ZJR0NBUFRJT04nKSAmJiB1dGlsLmdldFBhcmVudEVsZW1lbnQocmFuZ2VFbCwgdXRpbC5pc0xpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsID0gY29yZS5hcHBlbmRGb3JtYXRUYWcoZm9ybWF0RWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGZvcm1hdEVsLCAwLCBmb3JtYXRFbCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmNvbnRhaW5lck9mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wQ29udGV4dCA9IGNvbnRleHRbZmlsZUNvbXBvbmVudE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb21wQ29udGV4dC5fY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaWJsaW5nID0gY29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgY29udGFpbmVyLm5leHRFbGVtZW50U2libGluZztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdFbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoY29udGFpbmVyLnBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gdXRpbC5jcmVhdGVFbGVtZW50KCh1dGlsLmlzRm9ybWF0RWxlbWVudChzaWJsaW5nKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChzaWJsaW5nKSkgPyBzaWJsaW5nLm5vZGVOYW1lIDogb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsLmlubmVySFRNTCA9ICc8YnI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoaWZ0KSBjb250YWluZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UobmV3RWwsIDAsIG5ld0VsLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuY2FsbFBsdWdpbihmaWxlQ29tcG9uZW50TmFtZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuc2VsZWN0Q29tcG9uZW50KGNvbXBDb250ZXh0Ll9lbGVtZW50LCBmaWxlQ29tcG9uZW50TmFtZSkgPT09IGZhbHNlKSBjb3JlLmJsdXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2hpZnQgJiYga2V5Q29kZSA9PT0gMTYpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJsZVBsdWdpbiA9IGNvcmUucGx1Z2lucy50YWJsZTtcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZVBsdWdpbiAmJiAhdGFibGVQbHVnaW4uX3NoaWZ0ICYmICF0YWJsZVBsdWdpbi5fcmVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChmb3JtYXRFbCwgdXRpbC5pc0NlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUGx1Z2luLm9uVGFibGVDZWxsTXVsdGlTZWxlY3QuY2FsbChjb3JlLCBjZWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGlmdCAmJiAodXRpbC5pc09TWF9JT1MgPyBhbHQgOiBjdHJsKSAmJiBrZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ic3AgPSBjb3JlLmluc2VydE5vZGUodXRpbC5jcmVhdGVUZXh0Tm9kZSgnXFx1MDBhMCcpKTtcclxuICAgICAgICAgICAgICAgIGlmIChuYnNwICYmIG5ic3AuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShuYnNwLmNvbnRhaW5lciwgbmJzcC5lbmRPZmZzZXQsIG5ic3AuY29udGFpbmVyLCBuYnNwLmVuZE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0lFICYmICFjdHJsICYmICFhbHQgJiYgIXNlbGVjdFJhbmdlICYmICFldmVudC5fbm9uVGV4dEtleUNvZGUudGVzdChrZXlDb2RlKSAmJiB1dGlsLmlzQnJlYWsocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5pbnNlcnROb2RlKHplcm9XaWR0aCwgbnVsbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZSh6ZXJvV2lkdGgsIDEsIHplcm9XaWR0aCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5fZGlyZWN0aW9uS2V5Q29kZS50ZXN0KGtleUNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uS2V5RG93bl93eXNpd3lnX2Fycm93S2V5OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkgcmV0dXJuOyAvLyBzaGlmdGtleSBuZWVkcyg/KSBvdGhlciBjdXN0b20gaGFuZGxlci4gVGhpcyBvbmUgbWF5IGJlIGFkYXB0ZWQgKGluICdzZWxlY3ROb2RlKC4uLiknKSwgYnV0IG5vdCBmb3IgdGFibGVcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3ROb2RlID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCA9IDApIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudEluZm8gPSBjb3JlLmdldEZpbGVDb21wb25lbnQobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2VsZWN0Q29tcG9uZW50KGNvbXBvbmVudEluZm8udGFyZ2V0LCBjb21wb25lbnRJbmZvLnBsdWdpbk5hbWUpOyAgIC8vIG1vcmUgcmVzcG9uc2l2ZSBmb3Iga2V5IGhvbGRuZXNzXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2Uobm9kZSwgb2Zmc2V0LCBub2RlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGlvbk5vZGUsICd0YWJsZScpO1xyXG4gICAgICAgICAgICBpZiAodGFibGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgJ3RyJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Q2VsbCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3Rpb25Ob2RlLCAndGQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudENlbGxGaXJzdE5vZGUgPSBjdXJyZW50Q2VsbDtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50Q2VsbExhc3ROb2RlID0gY3VycmVudENlbGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudENlbGxGaXJzdE5vZGUuZmlyc3RDaGlsZCkgY3VycmVudENlbGxGaXJzdE5vZGUgPSBjdXJyZW50Q2VsbEZpcnN0Tm9kZS5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50Q2VsbExhc3ROb2RlLmxhc3RDaGlsZCkgY3VycmVudENlbGxMYXN0Tm9kZSA9IGN1cnJlbnRDZWxsTGFzdE5vZGUubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkKSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2VsbEZpcnN0Tm9kZSA9IChzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPT09IGN1cnJlbnRDZWxsRmlyc3ROb2RlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2VsbExhc3ROb2RlID0gKHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCA9PT0gY3VycmVudENlbGxMYXN0Tm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNpYmxpbmdUb1NldCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM4ICYmIGlzQ2VsbEZpcnN0Tm9kZSkgeyAvLyBVUFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzUm93ID0gY3VycmVudFJvdyAmJiBjdXJyZW50Um93LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzUm93KSBzaWJsaW5nVG9TZXQgPSBwcmV2aW91c1Jvdy5jaGlsZHJlbltjdXJyZW50Q2VsbC5jZWxsSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Ugc2libGluZ1RvU2V0ID0gdXRpbC5nZXRQcmV2aW91c0RlZXBlc3ROb2RlKHRhYmxlLCBjb3JlLmNvbnRleHQuZWxlbWVudC53eXNpd3lnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNpYmxpbmdUb1NldC5sYXN0Q2hpbGQpIHNpYmxpbmdUb1NldCA9IHNpYmxpbmdUb1NldC5sYXN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpYmxpbmdUb1NldCkgb2Zmc2V0ID0gc2libGluZ1RvU2V0LnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCAmJiBpc0NlbGxMYXN0Tm9kZSkgeyAgLy8gRE9XTlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRSb3cgPSBjdXJyZW50Um93ICYmIGN1cnJlbnRSb3cubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Um93KSBzaWJsaW5nVG9TZXQgPSBuZXh0Um93LmNoaWxkcmVuW2N1cnJlbnRDZWxsLmNlbGxJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBzaWJsaW5nVG9TZXQgPSB1dGlsLmdldE5leHREZWVwZXN0Tm9kZSh0YWJsZSwgY29yZS5jb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzaWJsaW5nVG9TZXQuZmlyc3RDaGlsZCkgc2libGluZ1RvU2V0ID0gc2libGluZ1RvU2V0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNpYmxpbmdUb1NldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdE5vZGUoc2libGluZ1RvU2V0LCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50SW5mbyA9IGNvcmUuZ2V0RmlsZUNvbXBvbmVudChzZWxlY3Rpb25Ob2RlKTtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdFByZXZpb3VzID0gLzM3fDM4Ly50ZXN0KGUua2V5Q29kZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3ROZXh0ID0gLzM5fDQwLy50ZXN0KGUua2V5Q29kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdFByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNEZWVwZXN0Tm9kZSA9IHV0aWwuZ2V0UHJldmlvdXNEZWVwZXN0Tm9kZShjb21wb25lbnRJbmZvLnRhcmdldCwgY29yZS5jb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0Tm9kZShwcmV2aW91c0RlZXBlc3ROb2RlLCBwcmV2aW91c0RlZXBlc3ROb2RlICYmIHByZXZpb3VzRGVlcGVzdE5vZGUudGV4dENvbnRlbnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0TmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHREZWVwZXN0Tm9kZSA9IHV0aWwuZ2V0TmV4dERlZXBlc3ROb2RlKGNvbXBvbmVudEluZm8udGFyZ2V0LCBjb3JlLmNvbnRleHQuZWxlbWVudC53eXNpd3lnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3ROb2RlKG5leHREZWVwZXN0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25LZXlVcF93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuX29uU2hvcnRjdXRLZXkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0cmwgPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGtleUNvZGUgPT09IDkxIHx8IGtleUNvZGUgPT09IDkyIHx8IGtleUNvZGUgPT09IDIyNDtcclxuICAgICAgICAgICAgY29uc3QgYWx0ID0gZS5hbHRLZXk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN0cmwgJiYgZXZlbnQuX2N1cnNvck1vdmVLZXlDb2RlLnRlc3Qoa2V5Q29kZSkpIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5faXNCYWxsb29uICYmICgoY29yZS5faXNCYWxsb29uQWx3YXlzICYmIGtleUNvZGUgIT09IDI3KSB8fCAhcmFuZ2UuY29sbGFwc2VkKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbkFsd2F5cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlDb2RlICE9PSAyNykgZXZlbnQuX3Nob3dUb29sYmFyQmFsbG9vbkRlbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhckJhbGxvb24oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICB3aGlsZSAoc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkLmZpcnN0Q2hpbGQpIHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCA9IHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRDb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgIGlmICghKGUua2V5Q29kZSA9PT0gMTYgfHwgZS5zaGlmdEtleSkgJiYgc2VsZWN0ZWRDb21wb25lbnRJbmZvKSBjb3JlLnNlbGVjdENvbXBvbmVudChzZWxlY3RlZENvbXBvbmVudEluZm8udGFyZ2V0LCBzZWxlY3RlZENvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvcmUuY3VycmVudEZpbGVDb21wb25lbnRJbmZvKSBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAvKiogd2hlbiBmb3JtYXQgdGFnIGRlbGV0ZWQgKi9cclxuICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IDggJiYgdXRpbC5pc1d5c2l3eWdEaXYoc2VsZWN0aW9uTm9kZSkgJiYgc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudCA9PT0gJycgJiYgc2VsZWN0aW9uTm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZS5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvRm9ybWF0VGFnID0gdXRpbC5jcmVhdGVFbGVtZW50KHV0aWwuaXNGb3JtYXRFbGVtZW50KGNvcmUuX3ZhcmlhYmxlLmN1cnJlbnROb2Rlc1swXSkgPyBjb3JlLl92YXJpYWJsZS5jdXJyZW50Tm9kZXNbMF0gOiBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgb0Zvcm1hdFRhZy5pbm5lckhUTUwgPSAnPGJyPic7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZS5hcHBlbmRDaGlsZChvRm9ybWF0VGFnKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2Uob0Zvcm1hdFRhZywgMCwgb0Zvcm1hdFRhZywgMCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fYXBwbHlUYWdFZmZlY3RzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXRFbCA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2VFbCA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUsIG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBhdHRycyA9IGNvcmUuX2Zvcm1hdEF0dHJzVGVtcDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhdHRycykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IDEzICYmIC9eaWQkL2kudGVzdChhdHRyc1tpXS5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5zZXRBdHRyaWJ1dGUoYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29yZS5fZm9ybWF0QXR0cnNUZW1wID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3JtYXRFbCAmJiByYW5nZS5jb2xsYXBzZWQgJiYgIXV0aWwuaXNDb21wb25lbnQoc2VsZWN0aW9uTm9kZSkgJiYgIXV0aWwuaXNMaXN0KHNlbGVjdGlvbk5vZGUpICYmIGNvcmUuX3NldERlZmF1bHRGb3JtYXQodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChyYW5nZUVsKSA/ICdESVYnIDogb3B0aW9ucy5kZWZhdWx0VGFnKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0ZXh0S2V5ID0gIWN0cmwgJiYgIWFsdCAmJiAhZXZlbnQuX25vblRleHRLZXlDb2RlLnRlc3Qoa2V5Q29kZSk7XHJcbiAgICAgICAgICAgIGlmICh0ZXh0S2V5ICYmIHNlbGVjdGlvbk5vZGUubm9kZVR5cGUgPT09IDMgJiYgdXRpbC56ZXJvV2lkdGhSZWdFeHAudGVzdChzZWxlY3Rpb25Ob2RlLnRleHRDb250ZW50KSAmJiAhKGUuaXNDb21wb3NpbmcgIT09IHVuZGVmaW5lZCA/IGUuaXNDb21wb3NpbmcgOiBldmVudC5fSUVpc0NvbXBvc2luZykpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0LCBlbyA9IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyb250WmVyb1dpZHRoQ250ID0gKHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQuc3Vic3RyaW5nKDAsIGVvKS5tYXRjaChldmVudC5fZnJvbnRaZXJvV2lkdGhSZWcpIHx8ICcnKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0IC0gZnJvbnRaZXJvV2lkdGhDbnQ7XHJcbiAgICAgICAgICAgICAgICBlbyA9IHJhbmdlLmVuZE9mZnNldCAtIGZyb250WmVyb1dpZHRoQ250O1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudCA9IHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQucmVwbGFjZSh1dGlsLnplcm9XaWR0aFJlZ0V4cCwgJycpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShzZWxlY3Rpb25Ob2RlLCBzbyA8IDAgPyAwIDogc28sIHNlbGVjdGlvbk5vZGUsIGVvIDwgMCA/IDAgOiBlbyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2NoYXJDb3VudCgnJyk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uS2V5VXAgPT09ICdmdW5jdGlvbicgJiYgZnVuY3Rpb25zLm9uS2V5VXAoZSwgY29yZSkgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIGlmICghY3RybCAmJiAhYWx0ICYmICFldmVudC5faGlzdG9yeUlnbm9yZUtleUNvZGUudGVzdChrZXlDb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblNjcm9sbF93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9pc0JhbGxvb24pIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vblNjcm9sbCA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLm9uU2Nyb2xsKGUsIGNvcmUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uRm9jdXNfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGNvcmUuX2FudGlCbHVyKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvcmUuaGFzRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzSW5saW5lKSBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25Gb2N1cyA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLm9uRm9jdXMoZSwgY29yZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25CbHVyX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9hbnRpQmx1ciB8fCBjb3JlLl92YXJpYWJsZS5pc0NvZGVWaWV3KSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvcmUuaGFzRm9jdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29yZS5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5faXNJbmxpbmUgfHwgY29yZS5faXNCYWxsb29uKSBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuX3NldEtleUVmZmVjdChbXSk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5jdXJyZW50Tm9kZXMgPSBbXTtcclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzTWFwID0gW107XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dQYXRoTGFiZWwpIGNvbnRleHQuZWxlbWVudC5uYXZpZ2F0aW9uLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25CbHVyID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMub25CbHVyKGUsIGNvcmUsdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25Nb3VzZURvd25fcmVzaXppbmdCYXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUucmVzaXplQ2xpZW50WSA9IGUuY2xpZW50WTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlc2l6ZUJhY2tncm91bmQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9zdXJlRnVuYygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZXNpemVCYWNrZ3JvdW5kLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICBfZC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudC5fcmVzaXplX2VkaXRvcik7XHJcbiAgICAgICAgICAgICAgICBfZC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgY2xvc3VyZUZ1bmMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudC5fcmVzaXplX2VkaXRvcik7XHJcbiAgICAgICAgICAgIF9kLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBjbG9zdXJlRnVuYyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3Jlc2l6ZV9lZGl0b3I6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZUludGVydmFsID0gY29udGV4dC5lbGVtZW50LmVkaXRvckFyZWEub2Zmc2V0SGVpZ2h0ICsgKGUuY2xpZW50WSAtIGNvcmUuX3ZhcmlhYmxlLnJlc2l6ZUNsaWVudFkpO1xyXG4gICAgICAgICAgICBjb25zdCBoID0gKHJlc2l6ZUludGVydmFsIDwgY29yZS5fdmFyaWFibGUubWluUmVzaXppbmdTaXplID8gY29yZS5fdmFyaWFibGUubWluUmVzaXppbmdTaXplIDogcmVzaXplSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmhlaWdodCA9IGNvbnRleHQuZWxlbWVudC5jb2RlLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5yZXNpemVDbGllbnRZID0gZS5jbGllbnRZO1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCkgY29yZS5fX2NhbGxSZXNpemVGdW5jdGlvbihoLCBudWxsKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblJlc2l6ZV93aW5kb3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQpIGNvcmUucmVzZXRSZXNwb25zaXZlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhciA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyO1xyXG4gICAgICAgICAgICBjb25zdCBpc1Rvb2xiYXJIaWRkZW4gPSAodG9vbGJhci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgKGNvcmUuX2lzSW5saW5lICYmICFjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cpKTtcclxuICAgICAgICAgICAgaWYgKHRvb2xiYXIub2Zmc2V0V2lkdGggPT09IDAgJiYgIWlzVG9vbGJhckhpZGRlbikgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZmlsZUJyb3dzZXIgJiYgY29udGV4dC5maWxlQnJvd3Nlci5hcmVhLnN0eWxlLmRpc3BsYXkgPT09ICdibG9jaycpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsZUJyb3dzZXIuYm9keS5zdHlsZS5tYXhIZWlnaHQgPSAoX3cuaW5uZXJIZWlnaHQgLSBjb250ZXh0LmZpbGVCcm93c2VyLmhlYWRlci5vZmZzZXRIZWlnaHQgLSA1MCkgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5zdWJtZW51QWN0aXZlQnV0dG9uICYmIGNvcmUuc3VibWVudSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fc2V0TWVudVBvc2l0aW9uKGNvcmUuc3VibWVudUFjdGl2ZUJ1dHRvbiwgY29yZS5zdWJtZW51KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbikge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiArPSAoX3cuaW5uZXJIZWlnaHQgLSB0b29sYmFyLm9mZnNldEhlaWdodCkgLSBjb3JlLl92YXJpYWJsZS5pbm5lckhlaWdodF9mdWxsU2NyZWVuO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmVkaXRvckFyZWEuc3R5bGUuaGVpZ2h0ID0gY29yZS5fdmFyaWFibGUuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiArICdweCc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl92YXJpYWJsZS5pc0NvZGVWaWV3ICYmIGNvcmUuX2lzSW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29yZS5faWZyYW1lQXV0b0hlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX3N0aWNreSkge1xyXG4gICAgICAgICAgICAgICAgdG9vbGJhci5zdHlsZS53aWR0aCA9IChjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5vZmZzZXRXaWR0aCAtIDIpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGV2ZW50Lm9uU2Nyb2xsX3dpbmRvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25TY3JvbGxfd2luZG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4gfHwgY29udGV4dC5lbGVtZW50LnRvb2xiYXIub2Zmc2V0V2lkdGggPT09IDAgfHwgb3B0aW9ucy5zdGlja3lUb29sYmFyIDwgMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgZWRpdG9ySGVpZ2h0ID0gZWxlbWVudC5lZGl0b3JBcmVhLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgY29uc3QgeSA9ICh0aGlzLnNjcm9sbFkgfHwgX2QuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgKyBvcHRpb25zLnN0aWNreVRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvclRvcCA9IGV2ZW50Ll9nZXRFZGl0b3JPZmZzZXRzKG9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikudG9wIC0gKGNvcmUuX2lzSW5saW5lID8gZWxlbWVudC50b29sYmFyLm9mZnNldEhlaWdodCA6IDApO1xyXG4gICAgICAgICAgICBjb25zdCBpbmxpbmVPZmZzZXQgPSBjb3JlLl9pc0lubGluZSAmJiAoeSAtIGVkaXRvclRvcCkgPiAwID8geSAtIGVkaXRvclRvcCAtIGNvbnRleHQuZWxlbWVudC50b29sYmFyLm9mZnNldEhlaWdodCA6IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoeSA8IGVkaXRvclRvcCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX29mZlN0aWNreVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh5ICsgY29yZS5fdmFyaWFibGUubWluUmVzaXppbmdTaXplID49IGVkaXRvckhlaWdodCArIGVkaXRvclRvcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb3JlLl9zdGlja3kpIGV2ZW50Ll9vblN0aWNreVRvb2xiYXIoaW5saW5lT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudG9vbGJhci5zdHlsZS50b3AgPSAoaW5saW5lT2Zmc2V0ICsgZWRpdG9ySGVpZ2h0ICsgZWRpdG9yVG9wICsgb3B0aW9ucy5zdGlja3lUb29sYmFyIC0geSAtIGNvcmUuX3ZhcmlhYmxlLm1pblJlc2l6aW5nU2l6ZSkgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHkgPj0gZWRpdG9yVG9wKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fb25TdGlja3lUb29sYmFyKGlubGluZU9mZnNldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0RWRpdG9yT2Zmc2V0czogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0RWwgPSBjb250YWluZXIgfHwgY29udGV4dC5lbGVtZW50LnRvcEFyZWE7XHJcbiAgICAgICAgICAgIGxldCB0ID0gMCwgbCA9IDAsIHMgPSAwO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKG9mZnNldEVsKSB7XHJcbiAgICAgICAgICAgICAgICB0ICs9IG9mZnNldEVsLm9mZnNldFRvcDtcclxuICAgICAgICAgICAgICAgIGwgKz0gb2Zmc2V0RWwub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgICAgIHMgKz0gb2Zmc2V0RWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0RWwgPSBvZmZzZXRFbC5vZmZzZXRQYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHQsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBsLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsOiBzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldFBhZ2VCb3R0b21TcGFjZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2QuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCAtIChldmVudC5fZ2V0RWRpdG9yT2Zmc2V0cyhudWxsKS50b3AgKyBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vblN0aWNreVRvb2xiYXI6IGZ1bmN0aW9uIChpbmxpbmVPZmZzZXQpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbnRleHQuZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29yZS5faXNJbmxpbmUgJiYgIW9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuaGVpZ2h0ID0gZWxlbWVudC50b29sYmFyLm9mZnNldEhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Ll9zdGlja3lEdW1teS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudC50b29sYmFyLnN0eWxlLnRvcCA9IChvcHRpb25zLnN0aWNreVRvb2xiYXIgKyBpbmxpbmVPZmZzZXQpICsgJ3B4JztcclxuICAgICAgICAgICAgZWxlbWVudC50b29sYmFyLnN0eWxlLndpZHRoID0gY29yZS5faXNJbmxpbmUgPyBjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci53aWR0aCA6IGVsZW1lbnQudG9vbGJhci5vZmZzZXRXaWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoZWxlbWVudC50b29sYmFyLCAnc2UtdG9vbGJhci1zdGlja3knKTtcclxuICAgICAgICAgICAgY29yZS5fc3RpY2t5ID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb2ZmU3RpY2t5VG9vbGJhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dC5lbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgZWxlbWVudC50b29sYmFyLnN0eWxlLnRvcCA9IGNvcmUuX2lzSW5saW5lID8gY29yZS5faW5saW5lVG9vbGJhckF0dHIudG9wIDogJyc7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudG9vbGJhci5zdHlsZS53aWR0aCA9IGNvcmUuX2lzSW5saW5lID8gY29yZS5faW5saW5lVG9vbGJhckF0dHIud2lkdGggOiAnJztcclxuICAgICAgICAgICAgZWxlbWVudC5lZGl0b3JBcmVhLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LnRvb2xiYXIsICdzZS10b29sYmFyLXN0aWNreScpO1xyXG4gICAgICAgICAgICBjb3JlLl9zdGlja3kgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY29kZVZpZXdBdXRvSGVpZ2h0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4pIHJldHVybjtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gY29udGV4dC5lbGVtZW50LmNvZGUuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBGaXJlRm94IC0gdGFibGUgZGVsZXRlLCBDaHJvbWUgLSBpbWFnZSwgdmlkZW8sIGF1ZGlvXHJcbiAgICAgICAgX2hhcmREZWxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgLy8gdGFibGVcclxuICAgICAgICAgICAgY29uc3Qgc0NlbGwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzYyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVDZWxsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZWMpO1xyXG4gICAgICAgICAgICBjb25zdCBzSXNDZWxsID0gdXRpbC5pc0NlbGwoc0NlbGwpO1xyXG4gICAgICAgICAgICBjb25zdCBlSXNDZWxsID0gdXRpbC5pc0NlbGwoZUNlbGwpO1xyXG4gICAgICAgICAgICBjb25zdCBhbmNlc3RvciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBpZiAoKChzSXNDZWxsICYmICFzQ2VsbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICFzQ2VsbC5wYXJlbnRFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHx8IChlSXNDZWxsICYmICFlQ2VsbC5uZXh0RWxlbWVudFNpYmxpbmcgJiYgIWVDZWxsLnBhcmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSkgJiYgc0NlbGwgIT09IGVDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNJc0NlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odXRpbC5nZXRQYXJlbnRFbGVtZW50KGVDZWxsLCBmdW5jdGlvbihjdXJyZW50KSB7cmV0dXJuIGFuY2VzdG9yID09PSBjdXJyZW50LnBhcmVudE5vZGU7fSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZUlzQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbSh1dGlsLmdldFBhcmVudEVsZW1lbnQoc0NlbGwsIGZ1bmN0aW9uKGN1cnJlbnQpIHtyZXR1cm4gYW5jZXN0b3IgPT09IGN1cnJlbnQucGFyZW50Tm9kZTt9KSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbSh1dGlsLmdldFBhcmVudEVsZW1lbnQoc0NlbGwsIGZ1bmN0aW9uKGN1cnJlbnQpIHtyZXR1cm4gYW5jZXN0b3IgPT09IGN1cnJlbnQucGFyZW50Tm9kZTt9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgY29uc3Qgc0NvbXAgPSBzYy5ub2RlVHlwZSA9PT0gMSA/IHV0aWwuZ2V0UGFyZW50RWxlbWVudChzYywgJy5zZS1jb21wb25lbnQnKSA6IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IGVDb21wID0gZWMubm9kZVR5cGUgPT09IDEgPyB1dGlsLmdldFBhcmVudEVsZW1lbnQoZWMsICcuc2UtY29tcG9uZW50JykgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoc0NvbXApIHV0aWwucmVtb3ZlSXRlbShzQ29tcCk7XHJcbiAgICAgICAgICAgIGlmIChlQ29tcCkgdXRpbC5yZW1vdmVJdGVtKGVDb21wKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblBhc3RlX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaXBib2FyZERhdGEgPSB1dGlsLmlzSUUgPyBfdy5jbGlwYm9hcmREYXRhIDogZS5jbGlwYm9hcmREYXRhO1xyXG4gICAgICAgICAgICBpZiAoIWNsaXBib2FyZERhdGEpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuX2RhdGFUcmFuc2ZlckFjdGlvbigncGFzdGUnLCBlLCBjbGlwYm9hcmREYXRhKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0Q2xpcGJvYXJkQ29tcG9uZW50OiBmdW5jdGlvbiAoZSwgaW5mbywgY2xpcGJvYXJkRGF0YSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dC9odG1sJywgaW5mby5jb21wb25lbnQub3V0ZXJIVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNvcHlfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xpcGJvYXJkRGF0YSA9IHV0aWwuaXNJRSA/IF93LmNsaXBib2FyZERhdGEgOiBlLmNsaXBib2FyZERhdGE7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uQ29weSA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbnMub25Db3B5KGUsIGNsaXBib2FyZERhdGEsIGNvcmUpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGNvcmUuY3VycmVudEZpbGVDb21wb25lbnRJbmZvO1xyXG4gICAgICAgICAgICBpZiAoaW5mbyAmJiAhdXRpbC5pc0lFKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fc2V0Q2xpcGJvYXJkQ29tcG9uZW50KGUsIGluZm8sIGNsaXBib2FyZERhdGEpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhpbmZvLmNvbXBvbmVudCwgJ3NlLWNvbXBvbmVudC1jb3B5Jyk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb3B5IGVmZmVjdFxyXG4gICAgICAgICAgICAgICAgX3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhpbmZvLmNvbXBvbmVudCwgJ3NlLWNvbXBvbmVudC1jb3B5Jyk7XHJcbiAgICAgICAgICAgICAgICB9LCAxNTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25TYXZlX3d5c2l3eWc6IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25TYXZlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbnMub25TYXZlKGNvbnRlbnQsIGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25DdXRfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xpcGJvYXJkRGF0YSA9IHV0aWwuaXNJRSA/IF93LmNsaXBib2FyZERhdGEgOiBlLmNsaXBib2FyZERhdGE7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uQ3V0ID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbkN1dChlLCBjbGlwYm9hcmREYXRhLCBjb3JlKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBjb3JlLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbztcclxuICAgICAgICAgICAgaWYgKGluZm8gJiYgIXV0aWwuaXNJRSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3NldENsaXBib2FyZENvbXBvbmVudChlLCBpbmZvLCBjbGlwYm9hcmREYXRhKTtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShpbmZvLmNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkRyb3Bfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGNvcmUuaXNSZWFkT25seSB8fCB1dGlsLmlzSUUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFUcmFuc2ZlciA9IGUuZGF0YVRyYW5zZmVyO1xyXG4gICAgICAgICAgICBpZiAoIWRhdGFUcmFuc2ZlcikgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICBldmVudC5fc2V0RHJvcExvY2F0aW9uU2VsZWN0aW9uKGUpO1xyXG4gICAgICAgICAgICBjb3JlLnJlbW92ZU5vZGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyhjb3JlLmN1cnJlbnRDb250cm9sbGVyVGFyZ2V0KSkgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50Ll9kYXRhVHJhbnNmZXJBY3Rpb24oJ2Ryb3AnLCBlLCBkYXRhVHJhbnNmZXIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXREcm9wTG9jYXRpb25TZWxlY3Rpb246IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0geyBzdGFydENvbnRhaW5lcjogbnVsbCwgc3RhcnRPZmZzZXQ6IG51bGwsIGVuZENvbnRhaW5lcjogbnVsbCwgZW5kT2Zmc2V0OiBudWxsIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgciA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChlLnJhbmdlUGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IGUucmFuZ2VQYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IGUucmFuZ2VPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5lbmRDb250YWluZXIgPSBlLnJhbmdlUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UuZW5kT2Zmc2V0ID0gZS5yYW5nZU9mZnNldDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JlLl93ZC5jYXJldFJhbmdlRnJvbVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByID0gY29yZS5fd2QuY2FyZXRSYW5nZUZyb21Qb2ludChlLmNsaWVudFgsIGUuY2xpZW50WSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IHIuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IHIuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5lbmRDb250YWluZXIgPSByLmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IHIuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCB1dGlsLmlzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29yZS5zZXRSYW5nZShyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZGF0YVRyYW5zZmVyQWN0aW9uOiBmdW5jdGlvbiAodHlwZSwgZSwgZGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgcGxhaW5UZXh0LCBjbGVhbkRhdGE7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzSUUpIHtcclxuICAgICAgICAgICAgICAgIHBsYWluVGV4dCA9IGRhdGEuZ2V0RGF0YSgnVGV4dCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcERpdiA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wUmFuZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2M6IHJhbmdlLnN0YXJ0Q29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvOiByYW5nZS5zdGFydE9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICBlYzogcmFuZ2UuZW5kQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGVvOiByYW5nZS5lbmRPZmZzZXRcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgdGVtcERpdi5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOmFic29sdXRlOyB0b3A6MDsgbGVmdDowOyB3aWR0aDoxcHg7IGhlaWdodDoxcHg7IG92ZXJmbG93OmhpZGRlbjsnO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5hcHBlbmRDaGlsZCh0ZW1wRGl2KTtcclxuICAgICAgICAgICAgICAgIHRlbXBEaXYuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSB0ZW1wRGl2LmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odGVtcERpdik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZSh0ZW1wUmFuZ2Uuc2MsIHRlbXBSYW5nZS5zbywgdGVtcFJhbmdlLmVjLCB0ZW1wUmFuZ2UuZW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zZXRDbGlwYm9hcmREYXRhKHR5cGUsIGUsIHBsYWluVGV4dCwgY2xlYW5EYXRhLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGxhaW5UZXh0ID0gZGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XHJcbiAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSBkYXRhLmdldERhdGEoJ3RleHQvaHRtbCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Ll9zZXRDbGlwYm9hcmREYXRhKHR5cGUsIGUsIHBsYWluVGV4dCwgY2xlYW5EYXRhLCBkYXRhKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0Q2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKHR5cGUsIGUsIHBsYWluVGV4dCwgY2xlYW5EYXRhLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIE1TIHdvcmQsIE9uZU5vZGUsIEV4Y2VsXHJcbiAgICAgICAgICAgIGNvbnN0IE1TRGF0YSA9IC9jbGFzcz1bXCInXSpNc28oTm9ybWFsfExpc3QpL2kudGVzdChjbGVhbkRhdGEpIHx8IC9jb250ZW50PVtcIiddKldvcmQuRG9jdW1lbnQvaS50ZXN0KGNsZWFuRGF0YSkgfHwgL2NvbnRlbnQ9W1wiJ10qT25lTm90ZS5GaWxlL2kudGVzdChjbGVhbkRhdGEpIHx8IC9jb250ZW50PVtcIiddKkV4Y2VsLlNoZWV0L2kudGVzdChjbGVhbkRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBvbmx5VGV4dCA9ICFjbGVhbkRhdGE7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9ubHlUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSBjbGVhbkRhdGEucmVwbGFjZSgvXjxodG1sPlxccj9cXG4/PGJvZHk+XFxyP1xcbj9cXHgzQyEtLVN0YXJ0RnJhZ21lbnQtLVxcPnxcXHgzQyEtLUVuZEZyYWdtZW50LS0+XFxyP1xcbj88XFwvYm9keVxcPlxccj9cXG4/PFxcL2h0bWw+JC9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoTVNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5EYXRhID0gY2xlYW5EYXRhLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWluVGV4dCA9IHBsYWluVGV4dC5yZXBsYWNlKC9cXG4vZywgJyAnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsZWFuRGF0YSA9IGNvcmUuY2xlYW5IVE1MKGNsZWFuRGF0YSwgY29yZS5wYXN0ZVRhZ3NXaGl0ZWxpc3RSZWdFeHAsIGNvcmUucGFzdGVUYWdzQmxhY2tsaXN0UmVnRXhwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNsZWFuRGF0YSA9IHV0aWwuX0hUTUxDb252ZXJ0b3IocGxhaW5UZXh0KS5yZXBsYWNlKC9cXG4vZywgJzxicj4nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgbWF4Q2hhckNvdW50ID0gY29yZS5fY2hhckNvdW50KGNvcmUuX2NoYXJUeXBlSFRNTCA/IGNsZWFuRGF0YSA6IHBsYWluVGV4dCk7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnQgLSBwYXN0ZVxyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3Bhc3RlJyAmJiB0eXBlb2YgZnVuY3Rpb25zLm9uUGFzdGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZnVuY3Rpb25zLm9uUGFzdGUoZSwgY2xlYW5EYXRhLCBtYXhDaGFyQ291bnQsIGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50IC0gZHJvcFxyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2Ryb3AnICYmIHR5cGVvZiBmdW5jdGlvbnMub25Ecm9wID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZ1bmN0aW9ucy5vbkRyb3AoZSwgY2xlYW5EYXRhLCBtYXhDaGFyQ291bnQsIGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZmlsZXNcclxuICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBkYXRhLmZpbGVzO1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCAmJiAhTVNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoL15pbWFnZS8udGVzdChmaWxlc1swXS50eXBlKSAmJiBjb3JlLnBsdWdpbnMuaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbnMuaW5zZXJ0SW1hZ2UoZmlsZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW1heENoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2xlYW5EYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbnMuaW5zZXJ0SFRNTChjbGVhbkRhdGEsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uTW91c2VNb3ZlX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzRGlzYWJsZWQgfHwgY29yZS5pc1JlYWRPbmx5KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChlLnRhcmdldCwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVCcmVha2VyU3R5bGUgPSBjb3JlLl9saW5lQnJlYWtlci5zdHlsZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgIWNvcmUuY3VycmVudENvbnRyb2xsZXJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdHhFbCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGxldCBzY3JvbGxUb3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVsID0gY3R4RWwud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3AgKz0gZWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKGVsICYmICEvXihCT0RZfEhUTUwpJC9pLnRlc3QoZWwubm9kZU5hbWUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB3U2Nyb2xsID0gY3R4RWwud3lzaXd5Zy5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRzID0gZXZlbnQuX2dldEVkaXRvck9mZnNldHMobnVsbCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRUb3AgPSB1dGlsLmdldE9mZnNldChjb21wb25lbnQsIGN0eEVsLnd5c2l3eWdGcmFtZSkudG9wICsgd1Njcm9sbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBlLnBhZ2VZICsgc2Nyb2xsVG9wICsgKG9wdGlvbnMuaWZyYW1lICYmICFvcHRpb25zLnRvb2xiYXJDb250YWluZXIgPyBjdHhFbC50b29sYmFyLm9mZnNldEhlaWdodCA6IDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGNvbXBvbmVudFRvcCArIChvcHRpb25zLmlmcmFtZSA/IHNjcm9sbFRvcCA6IG9mZnNldHMudG9wKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0xpc3QgPSB1dGlsLmlzTGlzdENlbGwoY29tcG9uZW50LnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpciA9ICcnLCB0b3AgPSAnJztcclxuICAgICAgICAgICAgICAgIGlmICgoaXNMaXN0ID8gIWNvbXBvbmVudC5wcmV2aW91c1NpYmxpbmcgOiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29tcG9uZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKSAmJiB5IDwgKGMgKyAyMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBjb21wb25lbnRUb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyID0gJ3QnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoaXNMaXN0ID8gIWNvbXBvbmVudC5uZXh0U2libGluZyA6ICF1dGlsLmlzRm9ybWF0RWxlbWVudChjb21wb25lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSkgJiYgeSA+IChjICsgY29tcG9uZW50Lm9mZnNldEhlaWdodCAtIDIwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGNvbXBvbmVudFRvcCArIGNvbXBvbmVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyID0gJ2InO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lQnJlYWtlclN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLl9saW5lQnJlYWtDb21wID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuX2xpbmVCcmVha0RpciA9IGRpcjtcclxuICAgICAgICAgICAgICAgIGxpbmVCcmVha2VyU3R5bGUudG9wID0gKHRvcCAtIHdTY3JvbGwpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGNvcmUuX2xpbmVCcmVha2VyQnV0dG9uLnN0eWxlLmxlZnQgPSAodXRpbC5nZXRPZmZzZXQoY29tcG9uZW50KS5sZWZ0ICsgKGNvbXBvbmVudC5vZmZzZXRXaWR0aCAvIDIpIC0gMTUpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGxpbmVCcmVha2VyU3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIH0gLy8gb2ZmIGxpbmUgYnJlYWtlclxyXG4gICAgICAgICAgICBlbHNlIGlmIChsaW5lQnJlYWtlclN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgbGluZUJyZWFrZXJTdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2VudGVyUHJldmVudChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzTW9iaWxlIHx8ICF1dGlsLmlzT1NYX0lPUykgcmV0dXJuOyAgLy9pb3Psl5DshJwg7ZWc6riAIOyeheugpSDrsoTqt7jqsIAg7J6I7Jy866+A66GcIGZvY3Vz7LKY66as6rCAIO2VhOyalFxyXG5cclxuICAgICAgICAgICAgY29yZS5fX2ZvY3VzVGVtcC5mb2N1cygpO1xyXG4gICAgICAgICAgICBjb3JlLmZvY3VzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VEb3duX2xpbmVCcmVhazogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkxpbmVCcmVhazogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gY29yZS5fdmFyaWFibGUuX2xpbmVCcmVha0NvbXA7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpciA9ICF0aGlzID8gY29yZS5fdmFyaWFibGUuX2xpbmVCcmVha0RpciA6IHRoaXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTGlzdCA9IHV0aWwuaXNMaXN0Q2VsbChjb21wb25lbnQucGFyZW50Tm9kZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoaXNMaXN0ID8gJ0JSJyA6IHV0aWwuaXNDZWxsKGNvbXBvbmVudC5wYXJlbnROb2RlKSA/ICdESVYnIDogb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgaWYgKCFpc0xpc3QpIGZvcm1hdC5pbm5lckhUTUwgPSAnPGJyPic7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5fY2hhclR5cGVIVE1MICYmICFjb3JlLmNoZWNrQ2hhckNvdW50KGZvcm1hdC5vdXRlckhUTUwsICdieXRlLWh0bWwnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29tcG9uZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgZGlyID09PSAndCcgPyBjb21wb25lbnQgOiBjb21wb25lbnQubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICBjb3JlLl9saW5lQnJlYWtlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5fbGluZUJyZWFrQ29tcCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb2N1c0VsID0gaXNMaXN0ID8gZm9ybWF0IDogZm9ybWF0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoZm9jdXNFbCwgMSwgZm9jdXNFbCwgMSk7XHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZXNpemVPYnNlcnZlcjogbnVsbCxcclxuICAgICAgICBfdG9vbGJhck9ic2VydmVyOiBudWxsLFxyXG4gICAgICAgIF9hZGRFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBldmVudFd5c2l3eWcgPSBvcHRpb25zLmlmcmFtZSA/IGNvcmUuX3d3IDogY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyID0gbmV3IF93LlJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uKGVudHJpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLl9fY2FsbFJlc2l6ZUZ1bmN0aW9uKC0xLCBlbnRyaWVzWzBdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiogdG9vbGJhciBldmVudCAqL1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fYnV0dG9uc0V2ZW50SGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX21lbnVUcmF5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Ll9idXR0b25zRXZlbnRIYW5kbGVyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQub25DbGlja190b29sYmFyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8qKiBlZGl0b3IgYXJlYSAqL1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQub25Nb3VzZURvd25fd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5vbkNsaWNrX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIodXRpbC5pc0lFID8gJ3RleHRpbnB1dCcgOiAnaW5wdXQnLCBldmVudC5vbklucHV0X3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudC5vbktleURvd25fd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudC5vbktleVVwX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgZXZlbnQub25QYXN0ZV93eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdjb3B5JywgZXZlbnQub25Db3B5X3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2N1dCcsIGV2ZW50Lm9uQ3V0X3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBldmVudC5vbkRyb3Bfd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZXZlbnQub25TY3JvbGxfd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBldmVudC5vbkZvY3VzX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBldmVudC5vbkJsdXJfd3lzaXd5ZywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgLyoqIGxpbmUgYnJlYWtlciAqL1xyXG4gICAgICAgICAgICBldmVudC5fbGluZUJyZWFrZXJCaW5kID0geyBhOiBldmVudC5fb25MaW5lQnJlYWsuYmluZCgnJyksIHQ6IGV2ZW50Ll9vbkxpbmVCcmVhay5iaW5kKCd0JyksIGI6IGV2ZW50Ll9vbkxpbmVCcmVhay5iaW5kKCdiJykgfTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50Lm9uTW91c2VNb3ZlX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29yZS5fbGluZUJyZWFrZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX29uTW91c2VEb3duX2xpbmVCcmVhaywgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb3JlLl9saW5lQnJlYWtlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50Ll9saW5lQnJlYWtlckJpbmQuYSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX2IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2xpbmVCcmVha2VyQmluZC5iLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAvKiogRXZlbnRzIGFyZSByZWdpc3RlcmVkIG1vYmlsZS4gICovXHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZXZlbnQub25Nb3VzZURvd25fd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGV2ZW50Lm9uQ2xpY2tfd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcblxyXG4gICAgICAgICAgICAvKiogY29kZSB2aWV3IGFyZWEgYXV0byBsaW5lICovXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nICYmICFvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgZXZlbnQuX2NvZGVWaWV3QXV0b0hlaWdodCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiogcmVzaXppbmdCYXIgKi9cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0Jhcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKC9cXGQrLy50ZXN0KG9wdGlvbnMuaGVpZ2h0KSAmJiBvcHRpb25zLnJlc2l6ZUVuYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0Jhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5vbk1vdXNlRG93bl9yZXNpemluZ0JhciwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0JhciwgJ3NlLXJlc2l6aW5nLW5vbmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHNldCByZXNwb25zZSB0b29sYmFyICovXHJcbiAgICAgICAgICAgIGV2ZW50Ll9zZXRSZXNwb25zaXZlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlc3BvbnNpdmUgdG9vbGJhciBvYnNlcnZlciAqL1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1Jlc2l6ZU9ic2VydmVyU3VwcG9ydGVkKSB0aGlzLl90b29sYmFyT2JzZXJ2ZXIgPSBuZXcgX3cuUmVzaXplT2JzZXJ2ZXIoY29yZS5yZXNldFJlc3BvbnNpdmVUb29sYmFyKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiB3aW5kb3cgZXZlbnQgKi9cclxuICAgICAgICAgICAgX3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZXZlbnQub25SZXNpemVfd2luZG93LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0aWNreVRvb2xiYXIgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgX3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZXZlbnQub25TY3JvbGxfd2luZG93LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnRXeXNpd3lnID0gb3B0aW9ucy5pZnJhbWUgPyBjb3JlLl93dyA6IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2J1dHRvbnNFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX21lbnVUcmF5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Ll9idXR0b25zRXZlbnRIYW5kbGVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5vbkNsaWNrX3Rvb2xiYXIpO1xyXG5cclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Lm9uTW91c2VEb3duX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5vbkNsaWNrX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcih1dGlsLmlzSUUgPyAndGV4dGlucHV0JyA6ICdpbnB1dCcsIGV2ZW50Lm9uSW5wdXRfd3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQub25LZXlEb3duX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudC5vbktleVVwX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBldmVudC5vblBhc3RlX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29weScsIGV2ZW50Lm9uQ29weV93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2N1dCcsIGV2ZW50Lm9uQ3V0X3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIGV2ZW50Lm9uRHJvcF93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGV2ZW50Lm9uU2Nyb2xsX3d5c2l3eWcpO1xyXG5cclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50Lm9uTW91c2VNb3ZlX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBjb3JlLl9saW5lQnJlYWtlckJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fb25Nb3VzZURvd25fbGluZUJyZWFrKTtcclxuICAgICAgICAgICAgY29yZS5fbGluZUJyZWFrZXJCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLmEpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfdC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLnQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfYi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLmIpO1xyXG4gICAgICAgICAgICBldmVudC5fbGluZUJyZWFrZXJCaW5kID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZXZlbnQub25Nb3VzZURvd25fd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGV2ZW50Lm9uQ2xpY2tfd3lzaXd5Zywge3Bhc3NpdmU6IHRydWUsIHVzZUNhcHR1cmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGV2ZW50Lm9uRm9jdXNfd3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgZXZlbnQub25CbHVyX3d5c2l3eWcpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdwYXN0ZScsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0Jhcikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlc2l6aW5nQmFyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Lm9uTW91c2VEb3duX3Jlc2l6aW5nQmFyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50Ll9yZXNpemVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3Jlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9yZXNpemVPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5fdG9vbGJhck9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fdG9vbGJhck9ic2VydmVyLnVub2JzZXJ2ZShjb250ZXh0LmVsZW1lbnQuX3Rvb2xiYXJTaGFkb3cpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3Rvb2xiYXJPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGV2ZW50Lm9uUmVzaXplX3dpbmRvdyk7XHJcbiAgICAgICAgICAgIF93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGV2ZW50Lm9uU2Nyb2xsX3dpbmRvdyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFJlc3BvbnNpdmVUb29sYmFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfcmVzcG9uc2l2ZUJ1dHRvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZUJ1dHRvbnMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudC5fcmVzcG9uc2l2ZUN1cnJlbnRTaXplID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgICAgICBjb25zdCBzaXplQXJyYXkgPSBldmVudC5fcmVzcG9uc2l2ZUJ1dHRvblNpemUgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uc09iaiA9IGV2ZW50Ll9yZXNwb25zaXZlQnV0dG9ucyA9IHtkZWZhdWx0OiBfcmVzcG9uc2l2ZUJ1dHRvbnNbMF19O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gX3Jlc3BvbnNpdmVCdXR0b25zLmxlbmd0aCwgc2l6ZSwgYnV0dG9uR3JvdXA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uR3JvdXAgPSBfcmVzcG9uc2l2ZUJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBzaXplID0gYnV0dG9uR3JvdXBbMF0gKiAxO1xyXG4gICAgICAgICAgICAgICAgc2l6ZUFycmF5LnB1c2goc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zT2JqW3NpemVdID0gYnV0dG9uR3JvdXBbMV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNpemVBcnJheS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhIC0gYjsgfSkudW5zaGlmdCgnZGVmYXVsdCcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqIGZ1bmN0aW9ucyAqL1xyXG4gICAgY29uc3QgZnVuY3Rpb25zID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb3JlLCBVdGlsIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcmU6IGNvcmUsXHJcbiAgICAgICAgdXRpbDogdXRpbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IGZ1bmN0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIEV2ZW50IE9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25sb2FkOiBudWxsLFxyXG4gICAgICAgIG9uU2Nyb2xsOiBudWxsLFxyXG4gICAgICAgIG9uTW91c2VEb3duOiBudWxsLFxyXG4gICAgICAgIG9uQ2xpY2s6IG51bGwsXHJcbiAgICAgICAgb25JbnB1dDogbnVsbCxcclxuICAgICAgICBvbktleURvd246IG51bGwsXHJcbiAgICAgICAgb25LZXlVcDogbnVsbCxcclxuICAgICAgICBvbkNvcHk6IG51bGwsXHJcbiAgICAgICAgb25DdXQ6IG51bGwsXHJcbiAgICAgICAgb25Gb2N1czogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IGZ1bmN0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIEV2ZW50IE9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIEN1cnJlbnQgY29udGVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkJsdXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCBmdW5jdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgQ3VycmVudCBjb250ZW50c1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25DaGFuZ2U6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCBmdW5jdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgQ3VycmVudCBjb250ZW50c1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25TYXZlOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXZlbnQgZnVuY3Rpb25zIChkcm9wLCBwYXN0ZSlcclxuICAgICAgICAgKiBXaGVuIGZhbHNlIGlzIHJldHVybmVkLCB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBzdG9wcGVkLlxyXG4gICAgICAgICAqIElmIHRoZSBzdHJpbmcgaXMgcmV0dXJuZWQsIHRoZSBjbGVhbkRhdGEgdmFsdWUgaXMgbW9kaWZpZWQgdG8gdGhlIHJldHVybiB2YWx1ZS5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZSBFdmVudCBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNsZWFuRGF0YSBIVE1MIHN0cmluZyBtb2RpZmllZCBmb3IgZWRpdG9yIGZvcm1hdC5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1heENoYXJ0Q291bnQgb3B0aW9uICh0cnVlIGlmIG1heCBjaGFyYWN0ZXIgaXMgZXhjZWVkZWQpXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnxTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25Ecm9wOiBudWxsLFxyXG4gICAgICAgIG9uUGFzdGU6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQganVzdCBiZWZvcmUgdGhlIGlubGluZSB0b29sYmFyIGlzIHBvc2l0aW9uZWQgYW5kIGRpc3BsYXllZCBvbiB0aGUgc2NyZWVuLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdG9vbGJhciBUb29sYmFyIEVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dCBUaGUgZWRpdG9yJ3MgY29udGV4dCBvYmplY3QgKGVkaXRvci5nZXRDb250ZXh0KCkpXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93SW5saW5lOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGp1c3QgYWZ0ZXIgdGhlIGNvbnRyb2xsZXIgaXMgcG9zaXRpb25lZCBhbmQgZGlzcGxheWVkIG9uIHRoZSBzY3JlZW4uXHJcbiAgICAgICAgICogY29udHJvbGxlciAtIGVkaXRpbmcgZWxlbWVudHMgZGlzcGxheWVkIG9uIHRoZSBzY3JlZW4gW2ltYWdlIHJlc2l6aW5nLCB0YWJsZSBlZGl0b3IsIGxpbmsgZWRpdG9yLi5dXVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4gdGhhdCBjYWxsZWQgdGhlIGNvbnRyb2xsZXJcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBjb250cm9sbGVycyBBcnJheSBvZiBDb250cm9sbGVyIGVsZW1lbnRzXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93Q29udHJvbGxlcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFuIGV2ZW50IHdoZW4gdG9nZ2xpbmcgYmV0d2VlbiBjb2RlIHZpZXcgYW5kIHd5c2l3eWcgdmlldy5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQ29kZVZpZXcgV2hldGhlciB0aGUgY3VycmVudCBjb2RlIHZpZXcgbW9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlQ29kZVZpZXc6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBbiBldmVudCB3aGVuIHRvZ2dsaW5nIGZ1bGwgc2NyZWVuLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNGdWxsU2NyZWVuIFdoZXRoZXIgdGhlIGN1cnJlbnQgZnVsbCBzY3JlZW4gbW9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRnVsbFNjcmVlbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEl0IHJlcGxhY2VzIHRoZSBkZWZhdWx0IGNhbGxiYWNrIGZ1bmN0aW9uIG9mIHRoZSBpbWFnZSB1cGxvYWRcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgUmVzcG9uc2Ugb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gSW5wdXQgaW5mb3JtYXRpb25cclxuICAgICAgICAgKiAtIGxpbmtWYWx1ZTogTGluayB1cmwgdmFsdWVcclxuICAgICAgICAgKiAtIGxpbmtOZXdXaW5kb3c6IE9wZW4gaW4gbmV3IHdpbmRvdyBDaGVjayBWYWx1ZVxyXG4gICAgICAgICAqIC0gaW5wdXRXaWR0aDogVmFsdWUgb2Ygd2lkdGggaW5wdXRcclxuICAgICAgICAgKiAtIGlucHV0SGVpZ2h0OiBWYWx1ZSBvZiBoZWlnaHQgaW5wdXRcclxuICAgICAgICAgKiAtIGFsaWduOiBBbGlnbiBDaGVjayBWYWx1ZVxyXG4gICAgICAgICAqIC0gaXNVcGRhdGU6IFVwZGF0ZSBpbWFnZSBpZiB0cnVlLCBjcmVhdGUgaW1hZ2UgaWYgZmFsc2VcclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IElmIGlzVXBkYXRlIGlzIHRydWUsIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaW1hZ2UuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbWFnZVVwbG9hZEhhbmRsZXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJdCByZXBsYWNlcyB0aGUgZGVmYXVsdCBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgdmlkZW8gdXBsb2FkXHJcbiAgICAgICAgICogQHBhcmFtIHhtbEh0dHAgeG1sSHR0cFJlcXVlc3Qgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIGluZm8gSW5wdXQgaW5mb3JtYXRpb25cclxuICAgICAgICAgKiAtIGlucHV0V2lkdGg6IFZhbHVlIG9mIHdpZHRoIGlucHV0XHJcbiAgICAgICAgICogLSBpbnB1dEhlaWdodDogVmFsdWUgb2YgaGVpZ2h0IGlucHV0XHJcbiAgICAgICAgICogLSBhbGlnbjogQWxpZ24gQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlzVXBkYXRlOiBVcGRhdGUgdmlkZW8gaWYgdHJ1ZSwgY3JlYXRlIHZpZGVvIGlmIGZhbHNlXHJcbiAgICAgICAgICogLSBlbGVtZW50OiBJZiBpc1VwZGF0ZSBpcyB0cnVlLCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHZpZGVvLlxyXG4gICAgICAgICAqIEBwYXJhbSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmlkZW9VcGxvYWRIYW5kbGVyOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSXQgcmVwbGFjZXMgdGhlIGRlZmF1bHQgY2FsbGJhY2sgZnVuY3Rpb24gb2YgdGhlIGF1ZGlvIHVwbG9hZFxyXG4gICAgICAgICAqIEBwYXJhbSB4bWxIdHRwIHhtbEh0dHBSZXF1ZXN0IG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmZvIElucHV0IGluZm9ybWF0aW9uXHJcbiAgICAgICAgICogLSBpc1VwZGF0ZTogVXBkYXRlIGF1ZGlvIGlmIHRydWUsIGNyZWF0ZSBhdWRpbyBpZiBmYWxzZVxyXG4gICAgICAgICAqIC0gZWxlbWVudDogSWYgaXNVcGRhdGUgaXMgdHJ1ZSwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhdWRpby5cclxuICAgICAgICAgKiBAcGFyYW0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGF1ZGlvVXBsb2FkSGFuZGxlcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCBiZWZvcmUgdGhlIGltYWdlIGlzIHVwbG9hZGVkXHJcbiAgICAgICAgICogSWYgdHJ1ZSBpcyByZXR1cm5lZCwgdGhlIGludGVybmFsIHVwbG9hZCBwcm9jZXNzIHJ1bnMgbm9ybWFsbHkuXHJcbiAgICAgICAgICogSWYgZmFsc2UgaXMgcmV0dXJuZWQsIG5vIGltYWdlIHVwbG9hZCBpcyBwZXJmb3JtZWQuXHJcbiAgICAgICAgICogSWYgbmV3IGZpbGVMaXN0IGFyZSByZXR1cm5lZCwgIHJlcGxhY2VkIHRoZSBwcmV2aW91cyBmaWxlTGlzdFxyXG4gICAgICAgICAqIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCwgaXQgd2FpdHMgdW50aWwgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgZXhlY3V0ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gZmlsZXMgRmlsZXMgYXJyYXlcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyBpbmZvOiB7XHJcbiAgICAgICAgICogLSBsaW5rVmFsdWU6IExpbmsgdXJsIHZhbHVlXHJcbiAgICAgICAgICogLSBsaW5rTmV3V2luZG93OiBPcGVuIGluIG5ldyB3aW5kb3cgQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlucHV0V2lkdGg6IFZhbHVlIG9mIHdpZHRoIGlucHV0XHJcbiAgICAgICAgICogLSBpbnB1dEhlaWdodDogVmFsdWUgb2YgaGVpZ2h0IGlucHV0XHJcbiAgICAgICAgICogLSBhbGlnbjogQWxpZ24gQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlzVXBkYXRlOiBVcGRhdGUgaW1hZ2UgaWYgdHJ1ZSwgY3JlYXRlIGltYWdlIGlmIGZhbHNlXHJcbiAgICAgICAgICogLSBlbGVtZW50OiBJZiBpc1VwZGF0ZSBpcyB0cnVlLCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGltYWdlLlxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwbG9hZEhhbmRsZXIgSWYgdW5kZWZpbmVkIGlzIHJldHVybmVkLCBpdCB3YWl0cyB1bnRpbCBcInVwbG9hZEhhbmRsZXJcIiBpcyBleGVjdXRlZC5cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBcInVwbG9hZEhhbmRsZXJcIiBpcyBhbiB1cGxvYWQgZnVuY3Rpb24gd2l0aCBcImNvcmVcIiBhbmQgXCJpbmZvXCIgYm91bmQuXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW3VwbG9hZCBmaWxlc10gOiB1cGxvYWRIYW5kbGVyKGZpbGVzIG9yIFtuZXcgRmlsZSguLi4pLF0pXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW2Vycm9yXSAgICAgICAgOiB1cGxvYWRIYW5kbGVyKFwiRXJyb3IgbWVzc2FnZVwiKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtKdXN0IGZpbmlzaF0gIDogdXBsb2FkSGFuZGxlcigpXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW2RpcmVjdGx5IHJlZ2lzdGVyXSA6IHVwbG9hZEhhbmRsZXIocmVzcG9uc2UpIC8vIFNhbWUgZm9ybWF0IGFzIFwiaW1hZ2VVcGxvYWRVcmxcIiByZXNwb25zZVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleCkge1xyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcImVycm9yTWVzc2FnZVwiOiBcImluc2VydCBlcnJvciBtZXNzYWdlXCIsXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVzdWx0XCI6IFsgeyBcInVybFwiOiBcIi4uLlwiLCBcIm5hbWVcIjogXCIuLi5cIiwgXCJzaXplXCI6IFwiOTk5XCIgfSwgXVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW58QXJyYXl8dW5kZWZpbmVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uSW1hZ2VVcGxvYWRCZWZvcmU6IG51bGwsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCBiZWZvcmUgdGhlIHZpZGVvIGlzIHVwbG9hZGVkXHJcbiAgICAgICAgICogSWYgdHJ1ZSBpcyByZXR1cm5lZCwgdGhlIGludGVybmFsIHVwbG9hZCBwcm9jZXNzIHJ1bnMgbm9ybWFsbHkuXHJcbiAgICAgICAgICogSWYgZmFsc2UgaXMgcmV0dXJuZWQsIG5vIHZpZGVvKGlmcmFtZSwgdmlkZW8pIHVwbG9hZCBpcyBwZXJmb3JtZWQuXHJcbiAgICAgICAgICogSWYgbmV3IGZpbGVMaXN0IGFyZSByZXR1cm5lZCwgIHJlcGxhY2VkIHRoZSBwcmV2aW91cyBmaWxlTGlzdFxyXG4gICAgICAgICAqIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCwgaXQgd2FpdHMgdW50aWwgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgZXhlY3V0ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gZmlsZXMgRmlsZXMgYXJyYXlcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyBpbmZvOiB7XHJcbiAgICAgICAgICogLSBpbnB1dFdpZHRoOiBWYWx1ZSBvZiB3aWR0aCBpbnB1dFxyXG4gICAgICAgICAqIC0gaW5wdXRIZWlnaHQ6IFZhbHVlIG9mIGhlaWdodCBpbnB1dFxyXG4gICAgICAgICAqIC0gYWxpZ246IEFsaWduIENoZWNrIFZhbHVlXHJcbiAgICAgICAgICogLSBpc1VwZGF0ZTogVXBkYXRlIHZpZGVvIGlmIHRydWUsIGNyZWF0ZSB2aWRlbyBpZiBmYWxzZVxyXG4gICAgICAgICAqIC0gZWxlbWVudDogSWYgaXNVcGRhdGUgaXMgdHJ1ZSwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2aWRlby5cclxuICAgICAgICAgKiB9XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGxvYWRIYW5kbGVyIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCwgaXQgd2FpdHMgdW50aWwgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgZXhlY3V0ZWQuXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgYW4gdXBsb2FkIGZ1bmN0aW9uIHdpdGggXCJjb3JlXCIgYW5kIFwiaW5mb1wiIGJvdW5kLlxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFt1cGxvYWQgZmlsZXNdIDogdXBsb2FkSGFuZGxlcihmaWxlcyBvciBbbmV3IEZpbGUoLi4uKSxdKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtlcnJvcl0gICAgICAgIDogdXBsb2FkSGFuZGxlcihcIkVycm9yIG1lc3NhZ2VcIilcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbSnVzdCBmaW5pc2hdICA6IHVwbG9hZEhhbmRsZXIoKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtkaXJlY3RseSByZWdpc3Rlcl0gOiB1cGxvYWRIYW5kbGVyKHJlc3BvbnNlKSAvLyBTYW1lIGZvcm1hdCBhcyBcInZpZGVvVXBsb2FkVXJsXCIgcmVzcG9uc2VcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXgpIHtcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJlcnJvck1lc3NhZ2VcIjogXCJpbnNlcnQgZXJyb3IgbWVzc2FnZVwiLFxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdFwiOiBbIHsgXCJ1cmxcIjogXCIuLi5cIiwgXCJuYW1lXCI6IFwiLi4uXCIsIFwic2l6ZVwiOiBcIjk5OVwiIH0sIF1cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufEFycmF5fHVuZGVmaW5lZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBvblZpZGVvVXBsb2FkQmVmb3JlOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgYmVmb3JlIHRoZSBhdWRpbyBpcyB1cGxvYWRlZFxyXG4gICAgICAgICAqIElmIHRydWUgaXMgcmV0dXJuZWQsIHRoZSBpbnRlcm5hbCB1cGxvYWQgcHJvY2VzcyBydW5zIG5vcm1hbGx5LlxyXG4gICAgICAgICAqIElmIGZhbHNlIGlzIHJldHVybmVkLCBubyBhdWRpbyB1cGxvYWQgaXMgcGVyZm9ybWVkLlxyXG4gICAgICAgICAqIElmIG5ldyBmaWxlTGlzdCBhcmUgcmV0dXJuZWQsICByZXBsYWNlZCB0aGUgcHJldmlvdXMgZmlsZUxpc3RcclxuICAgICAgICAgKiBJZiB1bmRlZmluZWQgaXMgcmV0dXJuZWQsIGl0IHdhaXRzIHVudGlsIFwidXBsb2FkSGFuZGxlclwiIGlzIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbGVzIEZpbGVzIGFycmF5XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gaW5mbzoge1xyXG4gICAgICAgICAqIC0gaXNVcGRhdGU6IFVwZGF0ZSBhdWRpbyBpZiB0cnVlLCBjcmVhdGUgYXVkaW8gaWYgZmFsc2VcclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IElmIGlzVXBkYXRlIGlzIHRydWUsIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgYXVkaW8uXHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBsb2FkSGFuZGxlciBJZiB1bmRlZmluZWQgaXMgcmV0dXJuZWQsIGl0IHdhaXRzIHVudGlsIFwidXBsb2FkSGFuZGxlclwiIGlzIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFwidXBsb2FkSGFuZGxlclwiIGlzIGFuIHVwbG9hZCBmdW5jdGlvbiB3aXRoIFwiY29yZVwiIGFuZCBcImluZm9cIiBib3VuZC5cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbdXBsb2FkIGZpbGVzXSA6IHVwbG9hZEhhbmRsZXIoZmlsZXMgb3IgW25ldyBGaWxlKC4uLiksXSlcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbZXJyb3JdICAgICAgICA6IHVwbG9hZEhhbmRsZXIoXCJFcnJvciBtZXNzYWdlXCIpXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW0p1c3QgZmluaXNoXSAgOiB1cGxvYWRIYW5kbGVyKClcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbZGlyZWN0bHkgcmVnaXN0ZXJdIDogdXBsb2FkSGFuZGxlcihyZXNwb25zZSkgLy8gU2FtZSBmb3JtYXQgYXMgXCJhdWRpb1VwbG9hZFVybFwiIHJlc3BvbnNlXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4KSB7XHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFwiZXJyb3JNZXNzYWdlXCI6IFwiaW5zZXJ0IGVycm9yIG1lc3NhZ2VcIixcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXN1bHRcIjogWyB7IFwidXJsXCI6IFwiLi4uXCIsIFwibmFtZVwiOiBcIi4uLlwiLCBcInNpemVcIjogXCI5OTlcIiB9LCBdXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnxBcnJheXx1bmRlZmluZWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25BdWRpb1VwbG9hZEJlZm9yZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSBpbWFnZSBpcyB1cGxvYWRlZCwgdXBkYXRlZCwgZGVsZXRlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0RWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBVcGxvYWRlZCBpbmRleFxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSBVcGxvYWQgc3RhdHVzICgnY3JlYXRlJywgJ3VwZGF0ZScsICdkZWxldGUnKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIEltYWdlIGluZm8gb2JqZWN0XHJcbiAgICAgICAgICogLSBpbmRleDogZGF0YSBpbmRleFxyXG4gICAgICAgICAqIC0gbmFtZTogZmlsZSBuYW1lXHJcbiAgICAgICAgICogLSBzaXplOiBmaWxlIHNpemVcclxuICAgICAgICAgKiAtIHNlbGVjdDogc2VsZWN0IGZ1bmN0aW9uXHJcbiAgICAgICAgICogLSBkZWxldGU6IGRlbGV0ZSBmdW5jdGlvblxyXG4gICAgICAgICAqIC0gZWxlbWVudDogdGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiAtIHNyYzogc3JjIGF0dHJpYnV0ZSBvZiB0YWdcclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVtYWluaW5nRmlsZXNDb3VudCBDb3VudCBvZiByZW1haW5pbmcgZmlsZXMgdG8gdXBsb2FkICgwIHdoZW4gYWRkZWQgYXMgYSB1cmwpXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkltYWdlVXBsb2FkOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSB2aWRlbyhpZnJhbWUsIHZpZGVvKSBpcyBpcyB1cGxvYWRlZCwgdXBkYXRlZCwgZGVsZXRlZFxyXG4gICAgICAgICogLS0gYXJndW1lbnRzIGlzIHNhbWUgXCJvbkltYWdlVXBsb2FkXCIgLS1cclxuICAgICAgICAqL1xyXG4gICAgICAgIG9uVmlkZW9VcGxvYWQ6IG51bGwsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlIGF1ZGlvIGlzIGlzIHVwbG9hZGVkLCB1cGRhdGVkLCBkZWxldGVkXHJcbiAgICAgICAgKiAtLSBhcmd1bWVudHMgaXMgc2FtZSBcIm9uSW1hZ2VVcGxvYWRcIiAtLVxyXG4gICAgICAgICovXHJcbiAgICAgICAgb25BdWRpb1VwbG9hZDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSBpbWFnZSBpcyB1cGxvYWQgZmFpbGVkXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGVycm9yTWVzc2FnZSBFcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdCBSZXNwb25zZSBPYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uSW1hZ2VVcGxvYWRFcnJvcjogbnVsbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlIHZpZGVvKGlmcmFtZSwgdmlkZW8pIHVwbG9hZCBmYWlsZWRcclxuICAgICAgICAgKiAtLSBhcmd1bWVudHMgaXMgc2FtZSBcIm9uSW1hZ2VVcGxvYWRFcnJvclwiIC0tXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25WaWRlb1VwbG9hZEVycm9yOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiB0aGUgYXVkaW8gdXBsb2FkIGZhaWxlZFxyXG4gICAgICAgICAqIC0tIGFyZ3VtZW50cyBpcyBzYW1lIFwib25JbWFnZVVwbG9hZEVycm9yXCIgLS1cclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkF1ZGlvVXBsb2FkRXJyb3I6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiB0aGUgZWRpdG9yIGlzIHJlc2l6ZWQgdXNpbmcgdGhlIGJvdHRvbSBiYXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBvblJlc2l6ZUVkaXRvcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCBhZnRlciB0aGUgXCJzZXRUb29sYmFyQnV0dG9uc1wiIGludm9jYXRpb24uXHJcbiAgICAgICAgICogQ2FuIGJlIHVzZWQgdG8gdHdlYWsgYnV0dG9ucyBwcm9wZXJ0aWVzICh1c2VmdWwgZm9yIGN1c3RvbSBidXR0b25zKVxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGJ1dHRvbkxpc3QgQnV0dG9uIGxpc3QgXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBvblNldFRvb2xiYXJCdXR0b25zOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXQgdGhlIGJ1dHRvbnMgb24gdGhlIHRvb2xiYXIuIChFZGl0b3IgaXMgbm90IHJlbG9hZGVkKVxyXG4gICAgICAgICAqIFlvdSBjYW5ub3Qgc2V0IGEgbmV3IHBsdWdpbiBmb3IgdGhlIGJ1dHRvbi5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBidXR0b25MaXN0IEJ1dHRvbiBsaXN0IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFRvb2xiYXJCdXR0b25zOiBmdW5jdGlvbiAoYnV0dG9uTGlzdCkge1xyXG4gICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5jb250YWluZXJPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5tb3JlTGF5ZXJPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rvb2xiYXIgPSBfQ29uc3RydWN0b3IuX2NyZWF0ZVRvb2xCYXIoX2QsIGJ1dHRvbkxpc3QsIGNvcmUucGx1Z2lucywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIF9yZXNwb25zaXZlQnV0dG9ucyA9IG5ld1Rvb2xiYXIucmVzcG9uc2l2ZUJ1dHRvbnM7XHJcbiAgICAgICAgICAgIGV2ZW50Ll9zZXRSZXNwb25zaXZlVG9vbGJhcigpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIucmVwbGFjZUNoaWxkKG5ld1Rvb2xiYXIuX2J1dHRvblRyYXksIGNvbnRleHQuZWxlbWVudC5fYnV0dG9uVHJheSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRleHQgPSBfQ29udGV4dChjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudCwgY29yZS5fZ2V0Q29uc3RydWN0ZWQoY29udGV4dC5lbGVtZW50KSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQgPSBuZXdDb250ZXh0LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnRleHQudG9vbCA9IG5ld0NvbnRleHQudG9vbDtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZyA9IGNvcmUuX3dkLmJvZHk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9yZWNvdmVyQnV0dG9uU3RhdGVzKCk7XHJcbiAgICAgICAgICAgIGNvcmUuX2NhY2hpbmdCdXR0b25zKCk7XHJcbiAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5fcmVzZXRDYWNoaW5nQnV0dG9uKCk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLmVmZmVjdE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5oYXNGb2N1cykgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5KSB1dGlsLnNldERpc2FibGVkQnV0dG9ucyh0cnVlLCBjb3JlLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25TZXRUb29sYmFyQnV0dG9ucyA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLm9uU2V0VG9vbGJhckJ1dHRvbnMobmV3VG9vbGJhci5fYnV0dG9uVHJheS5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKSwgY29yZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBvciByZXNldCBvcHRpb24gcHJvcGVydHkgKEVkaXRvciBpcyByZWxvYWRlZClcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gX29wdGlvbnMgT3B0aW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIChfb3B0aW9ucykge1xyXG4gICAgICAgICAgICBldmVudC5fcmVtb3ZlRXZlbnQoKTtcclxuICAgICAgICAgICAgY29yZS5fcmVzZXRDb21wb25lbnRzKCk7XHJcblxyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvcmUuX3N0eWxlQ29tbWFuZE1hcC5zaG93QmxvY2tzLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoY29yZS5fc3R5bGVDb21tYW5kTWFwLmNvZGVWaWV3LCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLmlzQ29kZVZpZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29yZS5faWZyYW1lQXV0byA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb3JlLnBsdWdpbnMgPSBfb3B0aW9ucy5wbHVnaW5zIHx8IGNvcmUucGx1Z2lucztcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VPcHRpb25zID0gW29wdGlvbnMsIF9vcHRpb25zXS5yZWR1Y2UoZnVuY3Rpb24gKGluaXQsIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24ob3B0aW9uLCBrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAncGx1Z2lucycgJiYgb3B0aW9uW2tleV0gJiYgaW5pdFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpID0gaW5pdFtrZXldLCBvID0gb3B0aW9uW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLmxlbmd0aCA/IGkgOiBfdy5PYmplY3Qua2V5cyhpKS5tYXAoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gaVtuYW1lXTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBvLmxlbmd0aCA/IG8gOiBfdy5PYmplY3Qua2V5cyhvKS5tYXAoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gb1tuYW1lXTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRba2V5XSA9IChvLmZpbHRlcihmdW5jdGlvbih2YWwpIHsgcmV0dXJuIGkuaW5kZXhPZih2YWwpID09PSAtMTsgfSkpLmNvbmNhdChpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0W2tleV0gPSBvcHRpb25ba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdDtcclxuICAgICAgICAgICAgfSwge30pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZWwgPSBjb250ZXh0LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IF9pbml0SFRNTCA9IGVsLnd5c2l3eWcuaW5uZXJIVE1MO1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IG9wdGlvblxyXG4gICAgICAgICAgICBjb25zdCBjb25zID0gX0NvbnN0cnVjdG9yLl9zZXRPcHRpb25zKG1lcmdlT3B0aW9ucywgY29udGV4dCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29ucy5jYWxsQnV0dG9ucykge1xyXG4gICAgICAgICAgICAgICAgcGx1Z2luQ2FsbEJ1dHRvbnMgPSBjb25zLmNhbGxCdXR0b25zO1xyXG4gICAgICAgICAgICAgICAgY29yZS5pbml0UGx1Z2lucyA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29ucy5wbHVnaW5zKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLnBsdWdpbnMgPSBwbHVnaW5zID0gY29ucy5wbHVnaW5zO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyByZXNldCBjb250ZXh0XHJcbiAgICAgICAgICAgIGlmIChlbC5fbWVudVRyYXkuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB0aGlzLl9tZW51VHJheSA9IHt9O1xyXG4gICAgICAgICAgICBfcmVzcG9uc2l2ZUJ1dHRvbnMgPSBjb25zLnRvb2xiYXIucmVzcG9uc2l2ZUJ1dHRvbnM7XHJcbiAgICAgICAgICAgIGNvcmUub3B0aW9ucyA9IG9wdGlvbnMgPSBtZXJnZU9wdGlvbnM7XHJcbiAgICAgICAgICAgIGNvcmUubGFuZyA9IGxhbmcgPSBvcHRpb25zLmxhbmc7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGVsLnd5c2l3eWdGcmFtZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuX3NldElmcmFtZURvY3VtZW50KHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuX3NldE9wdGlvbnNJbml0KGVsLCBfaW5pdEhUTUwpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsLmVkaXRvckFyZWEuYXBwZW5kQ2hpbGQoZWwud3lzaXd5Z0ZyYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGNvcmUuX3NldE9wdGlvbnNJbml0KGVsLCBfaW5pdEhUTUwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCBcIm9wdGlvbnMuZGVmYXVsdFN0eWxlXCIgc3R5bGUuXHJcbiAgICAgICAgICogRGVmaW5lIHRoZSBzdHlsZSBvZiB0aGUgZWRpdCBhcmVhXHJcbiAgICAgICAgICogSXQgY2FuIGFsc28gYmUgZGVmaW5lZCB3aXRoIHRoZSBcInNldE9wdGlvbnNcIiBtZXRob2QsIGJ1dCB0aGUgXCJzZXREZWZhdWx0U3R5bGVcIiBtZXRob2QgZG9lcyBub3QgcmVuZGVyIHRoZSBlZGl0b3IgYWdhaW4uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0eWxlIFN0eWxlIHN0cmluZ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldERlZmF1bHRTdHlsZTogZnVuY3Rpb24gKHN0eWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0eWxlcyA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcyA9IHV0aWwuX3NldERlZmF1bHRPcHRpb25TdHlsZShvcHRpb25zLCBzdHlsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gY29udGV4dC5lbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgLy8gdG9wIGFyZWFcclxuICAgICAgICAgICAgZWwudG9wQXJlYS5zdHlsZS5jc3NUZXh0ID0gbmV3U3R5bGVzLnRvcDtcclxuICAgICAgICAgICAgLy8gY29kZSB2aWV3XHJcbiAgICAgICAgICAgIGVsLmNvZGUuc3R5bGUuY3NzVGV4dCA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcy5mcmFtZTtcclxuICAgICAgICAgICAgZWwuY29kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgZWwuY29kZS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwuY29kZS5zdHlsZS5vdmVyZmxvdyA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHd5c2l3eWcgZnJhbWVcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZWwud3lzaXd5Z0ZyYW1lLnN0eWxlLmNzc1RleHQgPSBuZXdTdHlsZXMuZnJhbWUgKyBuZXdTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWwud3lzaXd5Z0ZyYW1lLnN0eWxlLmNzc1RleHQgPSBuZXdTdHlsZXMuZnJhbWU7XHJcbiAgICAgICAgICAgICAgICBlbC53eXNpd3lnLnN0eWxlLmNzc1RleHQgPSBuZXdTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gYSBub3RpY2UgYXJlYVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIE5vdGljZSBtZXNzYWdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbm90aWNlT3BlbjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgY29yZS5ub3RpY2Uub3Blbi5jYWxsKGNvcmUsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZSBhIG5vdGljZSBhcmVhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbm90aWNlQ2xvc2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29yZS5ub3RpY2UuY2xvc2UuY2FsbChjb3JlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29weWluZyB0aGUgY29udGVudHMgb2YgdGhlIGVkaXRvciB0byB0aGUgb3JpZ2luYWwgdGV4dGFyZWEgYW5kIGV4ZWN1dGUgb25TYXZlIGNhbGxiYWNrXHJcbiAgICAgICAgICogKiBub3Qgd29ya2luZyBkdXJpbmcgZW5hYmxlZCBjb2RlVmlldyBtb2RlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50cyA9IGNvcmUuZ2V0Q29udGVudHMoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQub3JpZ2luRWxlbWVudC52YWx1ZSA9IGNvbnRlbnRzO1xyXG4gICAgICAgICAgICBldmVudC5vblNhdmVfd3lzaXd5Zyhjb250ZW50cywgY29yZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIHN1bmVkaXRvcidzIGNvbnRleHQgb2JqZWN0LiBDb250YWlucyBzZXR0aW5ncywgcGx1Z2lucywgYW5kIGNhY2hlZCBlbGVtZW50IG9iamVjdHNcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKiAqIG5vdCB3b3JraW5nIGR1cmluZyBlbmFibGVkIGNvZGVWaWV3IG1vZGVcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9ubHlDb250ZW50cyAtIFJldHVybiBvbmx5IHRoZSBjb250ZW50cyBvZiB0aGUgYm9keSB3aXRob3V0IGhlYWRlcnMgd2hlbiB0aGUgXCJmdWxsUGFnZVwiIG9wdGlvbiBpcyB0cnVlXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRDb250ZW50czogZnVuY3Rpb24gKG9ubHlDb250ZW50cykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29yZS5nZXRDb250ZW50cyhvbmx5Q29udGVudHMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIG9ubHkgdGhlIHRleHQgb2YgdGhlIHN1bmVkaXRvciBjb250ZW50c1xyXG4gICAgICAgICAqICogbm90IHdvcmtpbmcgZHVyaW5nIGVuYWJsZWQgY29kZVZpZXcgbW9kZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0VGV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgZWRpdG9yJ3MgbnVtYmVyIG9mIGNoYXJhY3RlcnMgb3IgYmluYXJ5IGRhdGEgc2l6ZS5cclxuICAgICAgICAgKiBZb3UgY2FuIHVzZSB0aGUgXCJjaGFyQ291bnRlclR5cGVcIiBvcHRpb24gZm9ybWF0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IGNoYXJDb3VudGVyVHlwZSBvcHRpb25zIC0gY2hhckNvdW50ZXJUeXBlICgnY2hhcicsICdieXRlJywgJ2J5dGUtaHRtbCcpXHJcbiAgICAgICAgICogSWYgYXJndW1lbnQgaXMgbm8gdmFsdWUsIHRoZSBjdXJyZW50bHkgc2V0IFwiY2hhckNvdW50ZXJUeXBlXCIgb3B0aW9uIGlzIHVzZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRDaGFyQ291bnQ6IGZ1bmN0aW9uIChjaGFyQ291bnRlclR5cGUpIHtcclxuICAgICAgICAgICAgY2hhckNvdW50ZXJUeXBlID0gdHlwZW9mIGNoYXJDb3VudGVyVHlwZSA9PT0gJ3N0cmluZycgPyBjaGFyQ291bnRlclR5cGUgOiBvcHRpb25zLmNoYXJDb3VudGVyVHlwZTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvcmUuZ2V0Q2hhckxlbmd0aCgoY29yZS5fY2hhclR5cGVIVE1MID8gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuaW5uZXJIVE1MIDogY29udGV4dC5lbGVtZW50Lnd5c2l3eWcudGV4dENvbnRlbnQpLCBjaGFyQ291bnRlclR5cGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHVwbG9hZGVkIGltYWdlcyBpbmZvcm1hdGlvbnNcclxuICAgICAgICAgKiAtIGluZGV4OiBkYXRhIGluZGV4XHJcbiAgICAgICAgICogLSBuYW1lOiBmaWxlIG5hbWVcclxuICAgICAgICAgKiAtIHNpemU6IGZpbGUgc2l6ZVxyXG4gICAgICAgICAqIC0gc2VsZWN0OiBzZWxlY3QgZnVuY3Rpb25cclxuICAgICAgICAgKiAtIGRlbGV0ZTogZGVsZXRlIGZ1bmN0aW9uXHJcbiAgICAgICAgICogLSBlbGVtZW50OiB0YXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIC0gc3JjOiBzcmMgYXR0cmlidXRlIG9mIHRhZ1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRJbWFnZXNJbmZvOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmltYWdlID8gY29udGV4dC5pbWFnZS5faW5mb0xpc3QgOiBbXTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB1cGxvYWRlZCBmaWxlcyhwbHVnaW4gdXNpbmcgZmlsZU1hbmFnZXIpIGluZm9ybWF0aW9uIGxpc3QuXHJcbiAgICAgICAgICogaW1hZ2U6IFtpbWddLCB2aWRlbzogW3ZpZGVvLCBpZnJhbWVdLCBhdWRpbzogW2F1ZGlvXVxyXG4gICAgICAgICAqIFdoZW4gdGhlIGFyZ3VtZW50IHZhbHVlIGlzICdpbWFnZScsIGl0IGlzIHRoZSBzYW1lIGZ1bmN0aW9uIGFzIFwiZ2V0SW1hZ2VzSW5mb1wiLlxyXG4gICAgICAgICAqIC0gaW5kZXg6IGRhdGEgaW5kZXhcclxuICAgICAgICAgKiAtIG5hbWU6IGZpbGUgbmFtZVxyXG4gICAgICAgICAqIC0gc2l6ZTogZmlsZSBzaXplXHJcbiAgICAgICAgICogLSBzZWxlY3Q6IHNlbGVjdCBmdW5jdGlvblxyXG4gICAgICAgICAqIC0gZGVsZXRlOiBkZWxldGUgZnVuY3Rpb25cclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IHRhcmdldCBlbGVtZW50XHJcbiAgICAgICAgICogLSBzcmM6IHNyYyBhdHRyaWJ1dGUgb2YgdGFnXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWUgKGltYWdlLCB2aWRlbywgYXVkaW8pXHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEZpbGVzSW5mbzogZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHRbcGx1Z2luTmFtZV0gPyBjb250ZXh0W3BsdWdpbk5hbWVdLl9pbmZvTGlzdCA6IFtdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBVcGxvYWQgaW1hZ2VzIHVzaW5nIGltYWdlIHBsdWdpblxyXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZUxpc3R9IGZpbGVzIEZpbGVMaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0SW1hZ2U6IGZ1bmN0aW9uIChmaWxlcykge1xyXG4gICAgICAgICAgICBpZiAoIWNvcmUucGx1Z2lucy5pbWFnZSB8fCAhZmlsZXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29yZS5pbml0UGx1Z2lucy5pbWFnZSkgY29yZS5jYWxsUGx1Z2luKCdpbWFnZScsIGNvcmUucGx1Z2lucy5pbWFnZS5zdWJtaXRBY3Rpb24uYmluZChjb3JlLCBmaWxlcyksIG51bGwpO1xyXG4gICAgICAgICAgICBlbHNlIGNvcmUucGx1Z2lucy5pbWFnZS5zdWJtaXRBY3Rpb24uY2FsbChjb3JlLCBmaWxlcyk7XHJcbiAgICAgICAgICAgIGNvcmUuZm9jdXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyBhbiBIVE1MIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgb3IgcGxhaW4gc3RyaW5nIGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGh0bWwgSFRNTCBFbGVtZW50IG9yIEhUTUwgc3RyaW5nIG9yIHBsYWluIHN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbm90Q2xlYW5pbmdEYXRhIElmIHRydWUsIGluc2VydHMgdGhlIEhUTUwgc3RyaW5nIHdpdGhvdXQgcmVmaW5pbmcgaXQgd2l0aCBjb3JlLmNsZWFuSFRNTC5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrQ2hhckNvdW50IElmIHRydWUsIGlmIFwib3B0aW9ucy5tYXhDaGFyQ291bnRcIiBpcyBleGNlZWRlZCB3aGVuIFwiZWxlbWVudFwiIGlzIGFkZGVkLCBudWxsIGlzIHJldHVybmVkIHdpdGhvdXQgYWRkaXRpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByYW5nZVNlbGVjdGlvbiBJZiB0cnVlLCByYW5nZSBzZWxlY3QgdGhlIGluc2VydGVkIG5vZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zZXJ0SFRNTDogZnVuY3Rpb24gKGh0bWwsIG5vdENsZWFuaW5nRGF0YSwgY2hlY2tDaGFyQ291bnQsIHJhbmdlU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICghY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5jb250YWlucyhjb3JlLmdldFNlbGVjdGlvbigpLmZvY3VzTm9kZSkpIGNvcmUuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbm90Q2xlYW5pbmdEYXRhKSBodG1sID0gY29yZS5jbGVhbkhUTUwoaHRtbCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBpZihhbmNob3JtZSkgaHRtbCA9IGFuY2hvcm1lKHtpbnB1dDogaHRtbCwgb3B0aW9uczogeyBhdHRyaWJ1dGVzOiB7IHRhcmdldDogXCJfYmxhbmtcIn19fSk7XHJcbiAgICAgICAgICAgICAgICAvLyBpZihtZENvbnZlcnRlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGh0bWwgPSBtZENvbnZlcnRlci5tYWtlSHRtbChodG1sKTtcclxuICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbCh1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCksIG51bGwpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb20gPSBfZC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChodG1sKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9tVHJlZSA9IGRvbS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29yZS5faXNGb3JtYXREYXRhKGRvbVRyZWUpKSBodG1sID0gY29yZS5fY29udmVydExpc3RDZWxsKGRvbVRyZWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9tID0gX2QuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9tVHJlZSA9IGRvbS5jaGlsZE5vZGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tDaGFyQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IGNvcmUuX2NoYXJUeXBlSFRNTCA/ICdvdXRlckhUTUwnIDogJ3RleHRDb250ZW50JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoZWNrSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZG9tVHJlZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tIVE1MICs9IGRvbVRyZWVbaV1bdHlwZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb3JlLmNoZWNrQ2hhckNvdW50KGNoZWNrSFRNTCwgbnVsbCkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjLCBhLCB0LCBwcmV2LCBmaXJzdENvbjtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGMgPSBkb21UcmVlWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAmJiBwcmV2Lm5vZGVUeXBlID09PSAzICYmIGEgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiB1dGlsLmlzQnJlYWsoYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IGNvcmUuaW5zZXJ0Tm9kZShjLCBhLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0LmNvbnRhaW5lciB8fCB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0Q29uKSBmaXJzdENvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldi5ub2RlVHlwZSA9PT0gMyAmJiBhLm5vZGVUeXBlID09PSAxKSBhID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBhLm5vZGVUeXBlID09PSAzID8gKHQuZW5kT2Zmc2V0IHx8IGEudGV4dENvbnRlbnQubGVuZ3RoKTogYS5jaGlsZE5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VTZWxlY3Rpb24pIGNvcmUuc2V0UmFuZ2UoZmlyc3RDb24uY29udGFpbmVyIHx8IGZpcnN0Q29uLCBmaXJzdENvbi5zdGFydE9mZnNldCB8fCAwLCBhLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoYS5ub2RlVHlwZSA9PT0gMSAmJiBhLmxhc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGEubGFzdENoaWxkLCBhLmxhc3RDaGlsZC50ZXh0Q29udGVudC5sZW5ndGgsIGEubGFzdENoaWxkLCBhLmxhc3RDaGlsZC50ZXh0Q29udGVudC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGNvcmUuc2V0UmFuZ2UoYSwgb2Zmc2V0LCBhLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29yZS5pc0Rpc2FibGVkIHx8IGNvcmUuaXNSZWFkT25seSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1NVTkVESVRPUi5pbnNlcnRIVE1MLmZhaWxdICcgKyBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5leGVjQ29tbWFuZCgnaW5zZXJ0SFRNTCcsIGZhbHNlLCBodG1sKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQ29tcG9uZW50KGh0bWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pbnNlcnRDb21wb25lbnQoaHRtbCwgZmFsc2UsIGNoZWNrQ2hhckNvdW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChodG1sKSB8fCB1dGlsLmlzTWVkaWEoaHRtbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pbnNlcnROb2RlKGh0bWwsIGFmdGVyTm9kZSwgY2hlY2tDaGFyQ291bnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLmVmZmVjdE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICBjb3JlLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2hhbmdlIHRoZSBjb250ZW50cyBvZiB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8dW5kZWZpbmVkfSBjb250ZW50cyBDb250ZW50cyB0byBJbnB1dFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENvbnRlbnRzOiBmdW5jdGlvbiAoY29udGVudHMpIHtcclxuICAgICAgICAgICAgY29yZS5zZXRDb250ZW50cyhjb250ZW50cyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBjb250ZW50cyB0byB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIENvbnRlbnRzIHRvIElucHV0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwZW5kQ29udGVudHM6IGZ1bmN0aW9uIChjb250ZW50cykge1xyXG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0VmFsdWUgPSBjb3JlLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihjb250ZW50cyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvcmUuX3ZhcmlhYmxlLmlzQ29kZVZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICAgICAgdGVtcC5pbm5lckhUTUwgPSBjb252ZXJ0VmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgd3lzaXd5ZyA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0ZW1wLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHd5c2l3eWcuYXBwZW5kQ2hpbGQoY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvcmUuX3NldENvZGVWaWV3KGNvcmUuX2dldENvZGVWaWV3KCkgKyAnXFxuJyArIGNvcmUuY29udmVydEhUTUxGb3JDb2RlVmlldyhjb252ZXJ0VmFsdWUsIGZhbHNlKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTd2l0Y2ggdG8gb3Igb2ZmIFwiUmVhZE9ubHlcIiBtb2RlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWUgXCJyZWFkT25seVwiIGJvb2xlYW4gdmFsdWUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVhZE9ubHk6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBjb3JlLmlzUmVhZE9ubHkgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIHV0aWwuc2V0RGlzYWJsZWRCdXR0b25zKCEhdmFsdWUsIGNvcmUucmVzaXppbmdEaXNhYmxlZEJ1dHRvbnMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvKiogb2ZmIG1lbnVzICovXHJcbiAgICAgICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5zdWJtZW51QWN0aXZlQnV0dG9uICYmIGNvcmUuc3VibWVudUFjdGl2ZUJ1dHRvbi5kaXNhYmxlZCkgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5fbW9yZUxheWVyQWN0aXZlQnV0dG9uICYmIGNvcmUuX21vcmVMYXllckFjdGl2ZUJ1dHRvbi5kaXNhYmxlZCkgY29yZS5tb3JlTGF5ZXJPZmYoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLmNvbnRhaW5lckFjdGl2ZUJ1dHRvbiAmJiBjb3JlLmNvbnRhaW5lckFjdGl2ZUJ1dHRvbi5kaXNhYmxlZCkgY29yZS5jb250YWluZXJPZmYoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLm1vZGFsRm9ybSkgY29yZS5wbHVnaW5zLmRpYWxvZy5jbG9zZS5jYWxsKGNvcmUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnNldEF0dHJpYnV0ZShcInJlYWRPbmx5XCIsIFwidHJ1ZVwiKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZSwgJ3NlLXJlYWQtb25seScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUucmVtb3ZlQXR0cmlidXRlKFwicmVhZE9ubHlcIik7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUsICdzZS1yZWFkLW9ubHknKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikgb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yLnNldE9wdGlvbigncmVhZE9ubHknLCAhIXZhbHVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGlzYWJsZSB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvb2xiYXIuZGlzYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnd5c2l3eWcuZGlzYWJsZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIDMuMC4wIHZlcnNpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICBkaXNhYmxlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRW5hYmxlIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBlbmFibGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy50b29sYmFyLmVuYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnd5c2l3eWcuZW5hYmxlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMy4wLjAgdmVyc2lvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCB0b3BBcmVhU3R5bGUgPSBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5zdHlsZTtcclxuICAgICAgICAgICAgaWYgKHRvcEFyZWFTdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHRvcEFyZWFTdHlsZS5kaXNwbGF5ID0gb3B0aW9ucy5kaXNwbGF5O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBIaWRlIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b3BBcmVhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERlc3Ryb3kgdGhlIHN1bmVkaXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLyoqIG9mZiBtZW51cyAqL1xyXG4gICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5jb250YWluZXJPZmYoKTtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5ub3RpY2UpIGNvcmUubm90aWNlLmNsb3NlLmNhbGwoY29yZSk7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLm1vZGFsRm9ybSkgY29yZS5wbHVnaW5zLmRpYWxvZy5jbG9zZS5jYWxsKGNvcmUpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlbW92ZSBoaXN0b3J5ICovXHJcbiAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5fZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICAgICAgZXZlbnQuX3JlbW92ZUV2ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAvKiogcmVtb3ZlIGVsZW1lbnQgKi9cclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNvbnRleHQuZWxlbWVudC50b29sYmFyKTtcclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNvbnRleHQuZWxlbWVudC50b3BBcmVhKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiByZW1vdmUgb2JqZWN0IHJlZmVyZW5jZSAqL1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGNvcmUuZnVuY3Rpb25zKSB7IGlmICh1dGlsLmhhc093bihjb3JlLCBrKSkgZGVsZXRlIGNvcmUuZnVuY3Rpb25zW2tdOyB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gY29yZSkgeyBpZiAodXRpbC5oYXNPd24oY29yZSwgaykpIGRlbGV0ZSBjb3JlW2tdOyB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gZXZlbnQpIHsgaWYgKHV0aWwuaGFzT3duKGV2ZW50LCBrKSkgZGVsZXRlIGV2ZW50W2tdOyB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gY29udGV4dCkgeyBpZiAodXRpbC5oYXNPd24oY29udGV4dCwgaykpIGRlbGV0ZSBjb250ZXh0W2tdOyB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gcGx1Z2luQ2FsbEJ1dHRvbnMpIHsgaWYgKHV0aWwuaGFzT3duKHBsdWdpbkNhbGxCdXR0b25zLCBrKSkgZGVsZXRlIHBsdWdpbkNhbGxCdXR0b25zW2tdOyB9XHJcblxyXG4gICAgICAgICAgICAvKiogcmVtb3ZlIHVzZXIgb2JqZWN0ICovXHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gdGhpcykgeyBpZiAodXRpbC5oYXNPd24odGhpcywgaykpIGRlbGV0ZSB0aGlzW2tdOyB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRvb2xiYXIgbWV0aG9kc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlIHRoZSB0b29sYmFyXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvKiogb2ZmIG1lbnVzICovXHJcbiAgICAgICAgICAgICAgICBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgICAgIGNvcmUubW9yZUxheWVyT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLmNvbnRhaW5lck9mZigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQudG9vbC5jb3Zlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAzLjAuMCB2ZXJzaW9uXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBkaXNhYmxlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIEVuYWJsZSB0aGUgdG9vbGJhclxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZW5hYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRvb2wuY292ZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAzLjAuMCB2ZXJzaW9uXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBlbmFibGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSgpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IHRoZSB0b29sYmFyXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5faXNJbmxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGV2ZW50Lm9uUmVzaXplX3dpbmRvdygpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBIaWRlIHRoZSB0b29sYmFyXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZS5faXNJbmxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX3N0aWNreUR1bW15LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQub25SZXNpemVfd2luZG93KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFd5c2l3eWcgbWV0aG9kc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHd5c2l3eWc6IHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlIHRoZSB3eXNpd3lnIGFyZWFcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8qKiBvZmYgbWVudXMgKi9cclxuICAgICAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLm1vZGFsRm9ybSkgY29yZS5wbHVnaW5zLmRpYWxvZy5jbG9zZS5jYWxsKGNvcmUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5pc0Rpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yLnNldE9wdGlvbigncmVhZE9ubHknLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbmFibGUgdGhlIHd5c2l3eWcgYXJlYVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZW5hYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5pc0Rpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5zZXRPcHRpb24oJ3JlYWRPbmx5JywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKioqKioqKioqKioqIENvcmUgaW5pdCAqKioqKioqKioqKiovXHJcbiAgICAvLyBmdW5jdGlvbnNcclxuICAgIGNvcmUuZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xyXG4gICAgY29yZS5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcbiAgICAvLyBDcmVhdGUgdG8gc2libGluZyBub2RlXHJcbiAgICBsZXQgY29udGV4dEVsID0gY29udGV4dC5lbGVtZW50O1xyXG4gICAgbGV0IG9yaWdpbkVsID0gY29udGV4dEVsLm9yaWdpbkVsZW1lbnQ7XHJcbiAgICBsZXQgdG9wRWwgPSBjb250ZXh0RWwudG9wQXJlYTtcclxuICAgIG9yaWdpbkVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB0b3BFbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAvLyBpbml0XHJcbiAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICBjb250ZXh0RWwud3lzaXd5Z0ZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHV0aWwuX3NldElmcmFtZURvY3VtZW50KHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBjb3JlLl9lZGl0b3JJbml0KGZhbHNlLCBvcHRpb25zLnZhbHVlKTtcclxuICAgICAgICAgICAgb3B0aW9ucy52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaW5zZXJ0IGVkaXRvciBlbGVtZW50XHJcbiAgICBpZiAodHlwZW9mIG9yaWdpbkVsLm5leHRFbGVtZW50U2libGluZyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBvcmlnaW5FbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0b3BFbCwgb3JpZ2luRWwubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb3JpZ2luRWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0b3BFbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29udGV4dEVsLmVkaXRvckFyZWEuYXBwZW5kQ2hpbGQoY29udGV4dEVsLnd5c2l3eWdGcmFtZSk7XHJcbiAgICBjb250ZXh0RWwgPSBvcmlnaW5FbCA9IHRvcEVsID0gbnVsbDtcclxuXHJcbiAgICAvLyBpbml0XHJcbiAgICBpZiAoIW9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgY29yZS5fZWRpdG9ySW5pdChmYWxzZSwgb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgb3B0aW9ucy52YWx1ZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9ucztcclxufSIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTkgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoY29yZSwgY2hhbmdlKSB7XHJcbiAgICBjb25zdCBfdyA9IGNvcmUuX3c7XHJcbiAgICBjb25zdCB1dGlsID0gY29yZS51dGlsO1xyXG4gICAgY29uc3QgZGVsYXlUaW1lID0gY29yZS5vcHRpb25zLmhpc3RvcnlTdGFja0RlbGF5VGltZTtcclxuICAgIGxldCBlZGl0b3IgPSBjb3JlLmNvbnRleHQuZWxlbWVudDtcclxuICAgIGxldCB1bmRvID0gY29yZS5jb250ZXh0LnRvb2wudW5kbztcclxuICAgIGxldCByZWRvID0gY29yZS5jb250ZXh0LnRvb2wucmVkbztcclxuXHJcbiAgICBsZXQgcHVzaERlbGF5ID0gbnVsbDtcclxuICAgIGxldCBzdGFja0luZGV4ID0gMDtcclxuICAgIGxldCBzdGFjayA9IFtdO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldENvbnRlbnRzRnJvbVN0YWNrICgpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gc3RhY2tbc3RhY2tJbmRleF07XHJcbiAgICAgICAgZWRpdG9yLnd5c2l3eWcuaW5uZXJIVE1MID0gaXRlbS5jb250ZW50cztcclxuXHJcbiAgICAgICAgY29yZS5zZXRSYW5nZSh1dGlsLmdldE5vZGVGcm9tUGF0aChpdGVtLnMucGF0aCwgZWRpdG9yLnd5c2l3eWcpLCBpdGVtLnMub2Zmc2V0LCB1dGlsLmdldE5vZGVGcm9tUGF0aChpdGVtLmUucGF0aCwgZWRpdG9yLnd5c2l3eWcpLCBpdGVtLmUub2Zmc2V0KTtcclxuICAgICAgICBjb3JlLmZvY3VzKCk7XHJcblxyXG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICBpZiAodW5kbykgdW5kby5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmIChyZWRvKSByZWRvLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc3RhY2tJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVuZG8pIHVuZG8uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZG8pIHJlZG8ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrSW5kZXggPT09IHN0YWNrLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1bmRvKSB1bmRvLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWRvKSByZWRvLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh1bmRvKSB1bmRvLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWRvKSByZWRvLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgIGNvcmUuX2NoZWNrQ29tcG9uZW50cygpO1xyXG4gICAgICAgIGNvcmUuX3NldENoYXJDb3VudCgpO1xyXG4gICAgICAgIGNvcmUuX3Jlc291cmNlc1N0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gb25DaGFuZ2VcclxuICAgICAgICBjaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwdXNoU3RhY2sgKCkge1xyXG4gICAgICAgIGNvcmUuX2NoZWNrQ29tcG9uZW50cygpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBlZGl0b3Iud3lzaXd5Zy5pbm5lckhUTUw7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50IHx8ICghIXN0YWNrW3N0YWNrSW5kZXhdICYmIGN1cnJlbnQgPT09IHN0YWNrW3N0YWNrSW5kZXhdLmNvbnRlbnRzKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBzdGFja0luZGV4Kys7XHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLl92YXJpYWJsZS5fcmFuZ2U7XHJcblxyXG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPiBzdGFja0luZGV4KSB7XHJcbiAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgc3RhY2tJbmRleCk7XHJcbiAgICAgICAgICAgIGlmIChyZWRvKSByZWRvLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghcmFuZ2UpIHtcclxuICAgICAgICAgICAgc3RhY2tbc3RhY2tJbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50czogY3VycmVudCxcclxuICAgICAgICAgICAgICAgIHM6IHsgcGF0aDogWzAsIDBdLCBvZmZzZXQ6IFswLCAwXSB9LFxyXG4gICAgICAgICAgICAgICAgZTogeyBwYXRoOiAwLCBvZmZzZXQ6IDAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YWNrW3N0YWNrSW5kZXhdID0ge1xyXG4gICAgICAgICAgICAgICAgY29udGVudHM6IGN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICBzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogdXRpbC5nZXROb2RlUGF0aChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCwgbnVsbCksXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiByYW5nZS5zdGFydE9mZnNldFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiB1dGlsLmdldE5vZGVQYXRoKHJhbmdlLmVuZENvbnRhaW5lciwgbnVsbCwgbnVsbCksXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiByYW5nZS5lbmRPZmZzZXRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdGFja0luZGV4ID09PSAxICYmIHVuZG8pIHVuZG8ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICBjb3JlLl9zZXRDaGFyQ291bnQoKTtcclxuICAgICAgICAvLyBvbkNoYW5nZVxyXG4gICAgICAgIGNoYW5nZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGFjazogc3RhY2ssXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTYXZpbmcgdGhlIGN1cnJlbnQgc3RhdHVzIHRvIHRoZSBoaXN0b3J5IG9iamVjdCBzdGFja1xyXG4gICAgICAgICAqIElmIFwiZGVsYXlcIiBpcyB0cnVlLCBpdCB3aWxsIGJlIHNhdmVkIGFmdGVyIChvcHRpb25zLmhpc3RvcnlTdGFja0RlbGF5VGltZSB8fCA0MDApIG1pbGlzZWNvbmRzXHJcbiAgICAgICAgICogSWYgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiB3aXRoIHRoZSBcImRlbGF5XCIgYXJndW1lbnQgdHJ1ZSBiZWZvcmUgaXQgaXMgc2F2ZWQsIHRoZSBkZWxheSB0aW1lIGlzIHJlbmV3YWxcclxuICAgICAgICAgKiBZb3UgY2FuIHNwZWNpZnkgdGhlIGRlbGF5IHRpbWUgYnkgc2VuZGluZyBhIG51bWJlci5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW58TnVtYmVyfSBkZWxheSBJZiB0cnVlLCBBZGQgc3RhY2sgd2l0aG91dCBkZWxheSB0aW1lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1c2g6IGZ1bmN0aW9uIChkZWxheSkge1xyXG4gICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGNvcmUuX3Jlc291cmNlc1N0YXRlQ2hhbmdlLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lID0gdHlwZW9mIGRlbGF5ID09PSAnbnVtYmVyJyA/IChkZWxheSA+IDAgPyBkZWxheSA6IDApIDogKCFkZWxheSA/IDAgOiBkZWxheVRpbWUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKCF0aW1lIHx8IHB1c2hEZWxheSkge1xyXG4gICAgICAgICAgICAgICAgX3cuY2xlYXJUaW1lb3V0KHB1c2hEZWxheSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwdXNoU3RhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHB1c2hEZWxheSA9IF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3cuY2xlYXJUaW1lb3V0KHB1c2hEZWxheSk7XHJcbiAgICAgICAgICAgICAgICBwdXNoRGVsYXkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcHVzaFN0YWNrKCk7XHJcbiAgICAgICAgICAgIH0sIHRpbWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBVbmRvIGZ1bmN0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdW5kbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoc3RhY2tJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHN0YWNrSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgIHNldENvbnRlbnRzRnJvbVN0YWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVkbyBmdW5jdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlZG86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCAtIDEgPiBzdGFja0luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBzdGFja0luZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBzZXRDb250ZW50c0Zyb21TdGFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdvIHRvIHRoZSBoaXN0b3J5IHN0YWNrIGZvciB0aGF0IGluZGV4LlxyXG4gICAgICAgICAqIElmIFwiaW5kZXhcIiBpcyAtMSwgZ28gdG8gdGhlIGxhc3Qgc3RhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBnbzogZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHN0YWNrSW5kZXggPSBpbmRleCA8IDAgPyAoc3RhY2subGVuZ3RoIC0gMSkgOiBpbmRleDtcclxuICAgICAgICAgICAgc2V0Q29udGVudHNGcm9tU3RhY2soKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBjdXJyZW50IGhpc3Rvcnkgc3RhY2sgaW5kZXguXHJcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gQ3VycmVudCBTdGFjayBpbmRleFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEN1cnJlbnRJbmRleDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhY2tJbmRleDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCB0aGUgaGlzdG9yeSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXNldDogZnVuY3Rpb24gKGlnbm9yZUNoYW5nZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh1bmRvKSB1bmRvLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKHJlZG8pIHJlZG8uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5pc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGNvcmUuY29udGV4dC50b29sLnNhdmUpIGNvcmUuY29udGV4dC50b29sLnNhdmUuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhY2suc3BsaWNlKDApO1xyXG4gICAgICAgICAgICBzdGFja0luZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vIHB1c2hTdGFja1xyXG4gICAgICAgICAgICBzdGFja1tzdGFja0luZGV4XSA9IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBjb3JlLmdldENvbnRlbnRzKHRydWUpLFxyXG4gICAgICAgICAgICAgICAgczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IFswLCAwXSxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogWzAsIDBdLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpZ25vcmVDaGFuZ2VFdmVudCkgY2hhbmdlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlc2V0IHRoZSBkaXNhYmxlZCBzdGF0ZSBvZiB0aGUgYnV0dG9ucyB0byBmaXQgdGhlIGN1cnJlbnQgc3RhY2suXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVzZXRDYWNoaW5nQnV0dG9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGVkaXRvciA9IGNvcmUuY29udGV4dC5lbGVtZW50O1xyXG4gICAgICAgICAgICB1bmRvID0gY29yZS5jb250ZXh0LnRvb2wudW5kbztcclxuICAgICAgICAgICAgcmVkbyA9IGNvcmUuY29udGV4dC50b29sLnJlZG87XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhY2tJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVuZG8pIHVuZG8uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZG8gJiYgc3RhY2tJbmRleCA9PT0gc3RhY2subGVuZ3RoIC0gMSkgcmVkby5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5pc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLmNvbnRleHQudG9vbC5zYXZlKSBjb3JlLmNvbnRleHQudG9vbC5zYXZlLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFja0luZGV4ID09PSBzdGFjay5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVkbykgcmVkby5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlIGFsbCBzdGFja3MgYW5kIHJlbW92ZSB0aGUgdGltZW91dCBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9kZXN0cm95OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChwdXNoRGVsYXkpIF93LmNsZWFyVGltZW91dChwdXNoRGVsYXkpO1xyXG4gICAgICAgICAgICBzdGFjayA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCAnLi9hc3NldHMvY3NzL3N1bmVkaXRvci5jc3MnO1xyXG5pbXBvcnQgJy4vYXNzZXRzL2Nzcy9zdW5lZGl0b3ItY29udGVudHMuY3NzJztcclxuXHJcbmltcG9ydCBwbHVnaW5zIGZyb20gJy4vcGx1Z2lucyc7XHJcbmltcG9ydCBzdW5lZGl0b3IgZnJvbSAnLi9zdW5lZGl0b3InO1xyXG5cclxuaWYgKCF3aW5kb3cuU1VORURJVE9SKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnU1VORURJVE9SJywge1xyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmFsdWU6IHN1bmVkaXRvci5pbml0KHtcclxuICAgICAgICAgICAgcGx1Z2luczogcGx1Z2luc1xyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxufSIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9NT0RVTEVTIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcclxuICAgIH1cclxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICh3aW5kb3csIG5vR2xvYmFsKSB7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSB7XHJcbiAgICAgICAgbmFtZTogJ2NvbXBvbmVudCcsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSBhIGNvbnRhaW5lciBmb3IgdGhlIHJlc2l6aW5nIGNvbXBvbmVudCBhbmQgaW5zZXJ0IHRoZSBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY292ZXIgQ292ZXIgZWxlbWVudCAoRklHVVJFKVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc05hbWUgQ2xhc3MgbmFtZSBvZiBjb250YWluZXIgKGZpeGVkOiBzZS1jb21wb25lbnQpXHJcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9IENyZWF0ZWQgY29udGFpbmVyIGVsZW1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRfY29udGFpbmVyOiBmdW5jdGlvbiAoY292ZXIsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAnc2UtY29tcG9uZW50ICcgKyBjbGFzc05hbWU7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb3Zlcik7XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ292ZXIgdGhlIHRhcmdldCBlbGVtZW50IHdpdGggYSBGSUdVUkUgZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRfY292ZXI6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0ZJR1VSRScpO1xyXG4gICAgICAgICAgICBjb3Zlci5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gY292ZXI7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybiBIVE1MIHN0cmluZyBvZiBjYXB0aW9uKEZJR0NBUFRJT04pIGVsZW1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNyZWF0ZV9jYXB0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcHRpb24gPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnRklHQ0FQVElPTicpO1xyXG4gICAgICAgICAgICBjYXB0aW9uLmlubmVySFRNTCA9ICc8ZGl2PicgKyB0aGlzLmxhbmcuZGlhbG9nQm94LmNhcHRpb24gKyAnPC9kaXY+JztcclxuICAgICAgICAgICAgcmV0dXJuIGNhcHRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG5vR2xvYmFsID09PSB0eXBlb2YgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX01PRFVMRVMpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9NT0RVTEVTJywge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZToge31cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9NT0RVTEVTLCAnY29tcG9uZW50Jywge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiBjb21wb25lbnRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50O1xyXG59KSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuYW5jaG9ybWUgPSBmYWN0b3J5KCkpO1xufSkodGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cdGZ1bmN0aW9uIHVud3JhcEV4cG9ydHMgKHgpIHtcblx0XHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4O1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRcdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcblx0fVxuXG5cdHZhciB0bGRzID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cdGV4cG9ydHMuVExEcyA9IHZvaWQgMDtcblx0ZXhwb3J0cy5UTERzID0gXCIoQUFBfEFBUlB8QUJCfEFCQk9UVHxBQkJWSUV8QUJDfEFCTEV8QUJPR0FET3xBQlVESEFCSXxBQ3xBQ0FERU1ZfEFDQ0VOVFVSRXxBQ0NPVU5UQU5UfEFDQ09VTlRBTlRTfEFDT3xBQ1RPUnxBRHxBRFN8QURVTFR8QUV8QUVHfEFFUk98QUVUTkF8QUZ8QUZMfEFGUklDQXxBR3xBR0FLSEFOfEFHRU5DWXxBSXxBSUd8QUlSQlVTfEFJUkZPUkNFfEFJUlRFTHxBS0ROfEFMfEFMSUJBQkF8QUxJUEFZfEFMTEZJTkFOWnxBTExTVEFURXxBTExZfEFMU0FDRXxBTFNUT018QU18QU1BWk9OfEFNRVJJQ0FORVhQUkVTU3xBTUVSSUNBTkZBTUlMWXxBTUVYfEFNRkFNfEFNSUNBfEFNU1RFUkRBTXxBTkFMWVRJQ1N8QU5EUk9JRHxBTlFVQU58QU5afEFPfEFPTHxBUEFSVE1FTlRTfEFQUHxBUFBMRXxBUXxBUVVBUkVMTEV8QVJ8QVJBQnxBUkFNQ098QVJDSEl8QVJNWXxBUlBBfEFSVHxBUlRFfEFTfEFTREF8QVNJQXxBU1NPQ0lBVEVTfEFUfEFUSExFVEF8QVRUT1JORVl8QVV8QVVDVElPTnxBVURJfEFVRElCTEV8QVVESU98QVVTUE9TVHxBVVRIT1J8QVVUT3xBVVRPU3xBV3xBV1N8QVh8QVhBfEFafEFaVVJFfEJBfEJBQll8QkFJRFV8QkFOQU1FWHxCQU5EfEJBTkt8QkFSfEJBUkNFTE9OQXxCQVJDTEFZQ0FSRHxCQVJDTEFZU3xCQVJFRk9PVHxCQVJHQUlOU3xCQVNFQkFMTHxCQVNLRVRCQUxMfEJBVUhBVVN8QkFZRVJOfEJCfEJCQ3xCQlR8QkJWQXxCQ0d8QkNOfEJEfEJFfEJFQVRTfEJFQVVUWXxCRUVSfEJFTlRMRVl8QkVSTElOfEJFU1R8QkVTVEJVWXxCRVR8QkZ8Qkd8Qkh8QkhBUlRJfEJJfEJJQkxFfEJJRHxCSUtFfEJJTkd8QklOR098QklPfEJJWnxCSnxCTEFDS3xCTEFDS0ZSSURBWXxCTE9DS0JVU1RFUnxCTE9HfEJMT09NQkVSR3xCTFVFfEJNfEJNU3xCTVd8Qk58Qk5QUEFSSUJBU3xCT3xCT0FUU3xCT0VIUklOR0VSfEJPRkF8Qk9NfEJPTkR8Qk9PfEJPT0t8Qk9PS0lOR3xCT1NDSHxCT1NUSUt8Qk9TVE9OfEJPVHxCT1VUSVFVRXxCT1h8QlJ8QlJBREVTQ098QlJJREdFU1RPTkV8QlJPQURXQVl8QlJPS0VSfEJST1RIRVJ8QlJVU1NFTFN8QlN8QlR8QlVJTER8QlVJTERFUlN8QlVTSU5FU1N8QlVZfEJVWlp8QlZ8Qld8Qll8Qlp8QlpIfENBfENBQnxDQUZFfENBTHxDQUxMfENBTFZJTktMRUlOfENBTXxDQU1FUkF8Q0FNUHxDQU5PTnxDQVBFVE9XTnxDQVBJVEFMfENBUElUQUxPTkV8Q0FSfENBUkFWQU58Q0FSRFN8Q0FSRXxDQVJFRVJ8Q0FSRUVSU3xDQVJTfENBU0F8Q0FTRXxDQVNIfENBU0lOT3xDQVR8Q0FURVJJTkd8Q0FUSE9MSUN8Q0JBfENCTnxDQlJFfENDfENEfENFTlRFUnxDRU98Q0VSTnxDRnxDRkF8Q0ZEfENHfENIfENIQU5FTHxDSEFOTkVMfENIQVJJVFl8Q0hBU0V8Q0hBVHxDSEVBUHxDSElOVEFJfENIUklTVE1BU3xDSFJPTUV8Q0hVUkNIfENJfENJUFJJQU5JfENJUkNMRXxDSVNDT3xDSVRBREVMfENJVEl8Q0lUSUN8Q0lUWXxDS3xDTHxDTEFJTVN8Q0xFQU5JTkd8Q0xJQ0t8Q0xJTklDfENMSU5JUVVFfENMT1RISU5HfENMT1VEfENMVUJ8Q0xVQk1FRHxDTXxDTnxDT3xDT0FDSHxDT0RFU3xDT0ZGRUV8Q09MTEVHRXxDT0xPR05FfENPTXxDT01NQkFOS3xDT01NVU5JVFl8Q09NUEFOWXxDT01QQVJFfENPTVBVVEVSfENPTVNFQ3xDT05ET1N8Q09OU1RSVUNUSU9OfENPTlNVTFRJTkd8Q09OVEFDVHxDT05UUkFDVE9SU3xDT09LSU5HfENPT0x8Q09PUHxDT1JTSUNBfENPVU5UUll8Q09VUE9OfENPVVBPTlN8Q09VUlNFU3xDUEF8Q1J8Q1JFRElUfENSRURJVENBUkR8Q1JFRElUVU5JT058Q1JJQ0tFVHxDUk9XTnxDUlN8Q1JVSVNFfENSVUlTRVN8Q1V8Q1VJU0lORUxMQXxDVnxDV3xDWHxDWXxDWU1SVXxDWU9VfENafERBQlVSfERBRHxEQU5DRXxEQVRBfERBVEV8REFUSU5HfERBVFNVTnxEQVl8RENMS3xERFN8REV8REVBTHxERUFMRVJ8REVBTFN8REVHUkVFfERFTElWRVJZfERFTEx8REVMT0lUVEV8REVMVEF8REVNT0NSQVR8REVOVEFMfERFTlRJU1R8REVTSXxERVNJR058REVWfERITHxESUFNT05EU3xESUVUfERJR0lUQUx8RElSRUNUfERJUkVDVE9SWXxESVNDT1VOVHxESVNDT1ZFUnxESVNIfERJWXxESnxES3xETXxETlB8RE98RE9DU3xET0NUT1J8RE9HfERPTUFJTlN8RE9UfERPV05MT0FEfERSSVZFfERUVnxEVUJBSXxEVU5MT1B8RFVQT05UfERVUkJBTnxEVkFHfERWUnxEWnxFQVJUSHxFQVR8RUN8RUNPfEVERUtBfEVEVXxFRFVDQVRJT058RUV8RUd8RU1BSUx8RU1FUkNLfEVORVJHWXxFTkdJTkVFUnxFTkdJTkVFUklOR3xFTlRFUlBSSVNFU3xFUFNPTnxFUVVJUE1FTlR8RVJ8RVJJQ1NTT058RVJOSXxFU3xFU1F8RVNUQVRFfEVUfEVVfEVVUk9WSVNJT058RVVTfEVWRU5UU3xFWENIQU5HRXxFWFBFUlR8RVhQT1NFRHxFWFBSRVNTfEVYVFJBU1BBQ0V8RkFHRXxGQUlMfEZBSVJXSU5EU3xGQUlUSHxGQU1JTFl8RkFOfEZBTlN8RkFSTXxGQVJNRVJTfEZBU0hJT058RkFTVHxGRURFWHxGRUVEQkFDS3xGRVJSQVJJfEZFUlJFUk98Rkl8RklERUxJVFl8RklET3xGSUxNfEZJTkFMfEZJTkFOQ0V8RklOQU5DSUFMfEZJUkV8RklSRVNUT05FfEZJUk1EQUxFfEZJU0h8RklTSElOR3xGSVR8RklUTkVTU3xGSnxGS3xGTElDS1J8RkxJR0hUU3xGTElSfEZMT1JJU1R8RkxPV0VSU3xGTFl8Rk18Rk98Rk9PfEZPT0R8Rk9PVEJBTEx8Rk9SRHxGT1JFWHxGT1JTQUxFfEZPUlVNfEZPVU5EQVRJT058Rk9YfEZSfEZSRUV8RlJFU0VOSVVTfEZSTHxGUk9HQU5TfEZST05USUVSfEZUUnxGVUpJVFNVfEZVTnxGVU5EfEZVUk5JVFVSRXxGVVRCT0x8RllJfEdBfEdBTHxHQUxMRVJZfEdBTExPfEdBTExVUHxHQU1FfEdBTUVTfEdBUHxHQVJERU58R0FZfEdCfEdCSVp8R0R8R0ROfEdFfEdFQXxHRU5UfEdFTlRJTkd8R0VPUkdFfEdGfEdHfEdHRUV8R0h8R0l8R0lGVHxHSUZUU3xHSVZFU3xHSVZJTkd8R0x8R0xBU1N8R0xFfEdMT0JBTHxHTE9CT3xHTXxHTUFJTHxHTUJIfEdNT3xHTVh8R058R09EQUREWXxHT0xEfEdPTERQT0lOVHxHT0xGfEdPT3xHT09EWUVBUnxHT09HfEdPT0dMRXxHT1B8R09UfEdPVnxHUHxHUXxHUnxHUkFJTkdFUnxHUkFQSElDU3xHUkFUSVN8R1JFRU58R1JJUEV8R1JPQ0VSWXxHUk9VUHxHU3xHVHxHVXxHVUNDSXxHVUdFfEdVSURFfEdVSVRBUlN8R1VSVXxHV3xHWXxIQUlSfEhBTUJVUkd8SEFOR09VVHxIQVVTfEhCT3xIREZDfEhERkNCQU5LfEhFQUxUSHxIRUFMVEhDQVJFfEhFTFB8SEVMU0lOS0l8SEVSRXxIRVJNRVN8SElQSE9QfEhJU0FNSVRTVXxISVRBQ0hJfEhJVnxIS3xIS1R8SE18SE58SE9DS0VZfEhPTERJTkdTfEhPTElEQVl8SE9NRURFUE9UfEhPTUVHT09EU3xIT01FU3xIT01FU0VOU0V8SE9OREF8SE9SU0V8SE9TUElUQUx8SE9TVHxIT1NUSU5HfEhPVHxIT1RFTFN8SE9UTUFJTHxIT1VTRXxIT1d8SFJ8SFNCQ3xIVHxIVXxIVUdIRVN8SFlBVFR8SFlVTkRBSXxJQk18SUNCQ3xJQ0V8SUNVfElEfElFfElFRUV8SUZNfElLQU5PfElMfElNfElNQU1BVHxJTURCfElNTU98SU1NT0JJTElFTnxJTnxJTkN8SU5EVVNUUklFU3xJTkZJTklUSXxJTkZPfElOR3xJTkt8SU5TVElUVVRFfElOU1VSQU5DRXxJTlNVUkV8SU5UfElOVEVSTkFUSU9OQUx8SU5UVUlUfElOVkVTVE1FTlRTfElPfElQSVJBTkdBfElRfElSfElSSVNIfElTfElTTUFJTEl8SVNUfElTVEFOQlVMfElUfElUQVV8SVRWfEpBR1VBUnxKQVZBfEpDQnxKRXxKRUVQfEpFVFpUfEpFV0VMUll8SklPfEpMTHxKTXxKTVB8Sk5KfEpPfEpPQlN8Sk9CVVJHfEpPVHxKT1l8SlB8SlBNT1JHQU58SlBSU3xKVUVHT1N8SlVOSVBFUnxLQVVGRU58S0RESXxLRXxLRVJSWUhPVEVMU3xLRVJSWUxPR0lTVElDU3xLRVJSWVBST1BFUlRJRVN8S0ZIfEtHfEtIfEtJfEtJQXxLSURTfEtJTXxLSU5ETEV8S0lUQ0hFTnxLSVdJfEtNfEtOfEtPRUxOfEtPTUFUU1V8S09TSEVSfEtQfEtQTUd8S1BOfEtSfEtSRHxLUkVEfEtVT0tHUk9VUHxLV3xLWXxLWU9UT3xLWnxMQXxMQUNBSVhBfExBTUJPUkdISU5JfExBTUVSfExBTkNBU1RFUnxMQU5EfExBTkRST1ZFUnxMQU5YRVNTfExBU0FMTEV8TEFUfExBVElOT3xMQVRST0JFfExBV3xMQVdZRVJ8TEJ8TEN8TERTfExFQVNFfExFQ0xFUkN8TEVGUkFLfExFR0FMfExFR098TEVYVVN8TEdCVHxMSXxMSURMfExJRkV8TElGRUlOU1VSQU5DRXxMSUZFU1RZTEV8TElHSFRJTkd8TElLRXxMSUxMWXxMSU1JVEVEfExJTU98TElOQ09MTnxMSU5LfExJUFNZfExJVkV8TElWSU5HfExLfExMQ3xMTFB8TE9BTnxMT0FOU3xMT0NLRVJ8TE9DVVN8TE9MfExPTkRPTnxMT1RURXxMT1RUT3xMT1ZFfExQTHxMUExGSU5BTkNJQUx8TFJ8TFN8TFR8TFREfExUREF8TFV8TFVOREJFQ0t8TFVYRXxMVVhVUll8TFZ8TFl8TUF8TUFEUklEfE1BSUZ8TUFJU09OfE1BS0VVUHxNQU58TUFOQUdFTUVOVHxNQU5HT3xNQVB8TUFSS0VUfE1BUktFVElOR3xNQVJLRVRTfE1BUlJJT1RUfE1BUlNIQUxMU3xNQVRURUx8TUJBfE1DfE1DS0lOU0VZfE1EfE1FfE1FRHxNRURJQXxNRUVUfE1FTEJPVVJORXxNRU1FfE1FTU9SSUFMfE1FTnxNRU5VfE1FUkNLTVNEfE1HfE1IfE1JQU1JfE1JQ1JPU09GVHxNSUx8TUlOSXxNSU5UfE1JVHxNSVRTVUJJU0hJfE1LfE1MfE1MQnxNTFN8TU18TU1BfE1OfE1PfE1PQkl8TU9CSUxFfE1PREF8TU9FfE1PSXxNT018TU9OQVNIfE1PTkVZfE1PTlNURVJ8TU9STU9OfE1PUlRHQUdFfE1PU0NPV3xNT1RPfE1PVE9SQ1lDTEVTfE1PVnxNT1ZJRXxNUHxNUXxNUnxNU3xNU0R8TVR8TVROfE1UUnxNVXxNVVNFVU18TVVTSUN8TVZ8TVd8TVh8TVl8TVp8TkF8TkFCfE5BR09ZQXxOQU1FfE5BVFVSQXxOQVZZfE5CQXxOQ3xORXxORUN8TkVUfE5FVEJBTkt8TkVURkxJWHxORVRXT1JLfE5FVVNUQVJ8TkVXfE5FV1N8TkVYVHxORVhURElSRUNUfE5FWFVTfE5GfE5GTHxOR3xOR098TkhLfE5JfE5JQ098TklLRXxOSUtPTnxOSU5KQXxOSVNTQU58TklTU0FZfE5MfE5PfE5PS0lBfE5PUlRPTnxOT1d8Tk9XUlVafE5PV1RWfE5QfE5SfE5SQXxOUld8TlRUfE5VfE5ZQ3xOWnxPQkl8T0JTRVJWRVJ8T0ZGSUNFfE9LSU5BV0F8T0xBWUFOfE9MQVlBTkdST1VQfE9MTE98T018T01FR0F8T05FfE9OR3xPTkx8T05MSU5FfE9PT3xPUEVOfE9SQUNMRXxPUkFOR0V8T1JHfE9SR0FOSUN8T1JJR0lOU3xPU0FLQXxPVFNVS0F8T1RUfE9WSHxQQXxQQUdFfFBBTkFTT05JQ3xQQVJJU3xQQVJTfFBBUlRORVJTfFBBUlRTfFBBUlRZfFBBWXxQQ0NXfFBFfFBFVHxQRnxQRklaRVJ8UEd8UEh8UEhBUk1BQ1l8UEhEfFBISUxJUFN8UEhPTkV8UEhPVE98UEhPVE9HUkFQSFl8UEhPVE9TfFBIWVNJT3xQSUNTfFBJQ1RFVHxQSUNUVVJFU3xQSUR8UElOfFBJTkd8UElOS3xQSU9ORUVSfFBJWlpBfFBLfFBMfFBMQUNFfFBMQVl8UExBWVNUQVRJT058UExVTUJJTkd8UExVU3xQTXxQTnxQTkN8UE9ITHxQT0tFUnxQT0xJVElFfFBPUk58UE9TVHxQUnxQUkFNRVJJQ0F8UFJBWEl8UFJFU1N8UFJJTUV8UFJPfFBST0R8UFJPRFVDVElPTlN8UFJPRnxQUk9HUkVTU0lWRXxQUk9NT3xQUk9QRVJUSUVTfFBST1BFUlRZfFBST1RFQ1RJT058UFJVfFBSVURFTlRJQUx8UFN8UFR8UFVCfFBXfFBXQ3xQWXxRQXxRUE9OfFFVRUJFQ3xRVUVTVHxSQUNJTkd8UkFESU98UkV8UkVBRHxSRUFMRVNUQVRFfFJFQUxUT1J8UkVBTFRZfFJFQ0lQRVN8UkVEfFJFRFNUT05FfFJFRFVNQlJFTExBfFJFSEFCfFJFSVNFfFJFSVNFTnxSRUlUfFJFTElBTkNFfFJFTnxSRU5UfFJFTlRBTFN8UkVQQUlSfFJFUE9SVHxSRVBVQkxJQ0FOfFJFU1R8UkVTVEFVUkFOVHxSRVZJRVd8UkVWSUVXU3xSRVhST1RIfFJJQ0h8UklDSEFSRExJfFJJQ09IfFJJTHxSSU98UklQfFJPfFJPQ0tTfFJPREVPfFJPR0VSU3xST09NfFJTfFJTVlB8UlV8UlVHQll8UlVIUnxSVU58Uld8UldFfFJZVUtZVXxTQXxTQUFSTEFORHxTQUZFfFNBRkVUWXxTQUtVUkF8U0FMRXxTQUxPTnxTQU1TQ0xVQnxTQU1TVU5HfFNBTkRWSUt8U0FORFZJS0NPUk9NQU5UfFNBTk9GSXxTQVB8U0FSTHxTQVN8U0FWRXxTQVhPfFNCfFNCSXxTQlN8U0N8U0NCfFNDSEFFRkZMRVJ8U0NITUlEVHxTQ0hPTEFSU0hJUFN8U0NIT09MfFNDSFVMRXxTQ0hXQVJafFNDSUVOQ0V8U0NPVHxTRHxTRXxTRUFSQ0h8U0VBVHxTRUNVUkV8U0VDVVJJVFl8U0VFS3xTRUxFQ1R8U0VORVJ8U0VSVklDRVN8U0VWRU58U0VXfFNFWHxTRVhZfFNGUnxTR3xTSHxTSEFOR1JJTEF8U0hBUlB8U0hBV3xTSEVMTHxTSElBfFNISUtTSEF8U0hPRVN8U0hPUHxTSE9QUElOR3xTSE9VSkl8U0hPV3xTSXxTSUxLfFNJTkF8U0lOR0xFU3xTSVRFfFNKfFNLfFNLSXxTS0lOfFNLWXxTS1lQRXxTTHxTTElOR3xTTXxTTUFSVHxTTUlMRXxTTnxTTkNGfFNPfFNPQ0NFUnxTT0NJQUx8U09GVEJBTkt8U09GVFdBUkV8U09IVXxTT0xBUnxTT0xVVElPTlN8U09OR3xTT05ZfFNPWXxTUEF8U1BBQ0V8U1BPUlR8U1BPVHxTUnxTUkx8U1N8U1R8U1RBREF8U1RBUExFU3xTVEFSfFNUQVRFQkFOS3xTVEFURUZBUk18U1RDfFNUQ0dST1VQfFNUT0NLSE9MTXxTVE9SQUdFfFNUT1JFfFNUUkVBTXxTVFVESU98U1RVRFl8U1RZTEV8U1V8U1VDS1N8U1VQUExJRVN8U1VQUExZfFNVUFBPUlR8U1VSRnxTVVJHRVJZfFNVWlVLSXxTVnxTV0FUQ0h8U1dJU1N8U1h8U1l8U1lETkVZfFNZU1RFTVN8U1p8VEFCfFRBSVBFSXxUQUxLfFRBT0JBT3xUQVJHRVR8VEFUQU1PVE9SU3xUQVRBUnxUQVRUT098VEFYfFRBWEl8VEN8VENJfFREfFRES3xURUFNfFRFQ0h8VEVDSE5PTE9HWXxURUx8VEVNQVNFS3xURU5OSVN8VEVWQXxURnxUR3xUSHxUSER8VEhFQVRFUnxUSEVBVFJFfFRJQUF8VElDS0VUU3xUSUVOREF8VElQU3xUSVJFU3xUSVJPTHxUSnxUSk1BWFh8VEpYfFRLfFRLTUFYWHxUTHxUTXxUTUFMTHxUTnxUT3xUT0RBWXxUT0tZT3xUT09MU3xUT1B8VE9SQVl8VE9TSElCQXxUT1RBTHxUT1VSU3xUT1dOfFRPWU9UQXxUT1lTfFRSfFRSQURFfFRSQURJTkd8VFJBSU5JTkd8VFJBVkVMfFRSQVZFTEVSU3xUUkFWRUxFUlNJTlNVUkFOQ0V8VFJVU1R8VFJWfFRUfFRVQkV8VFVJfFRVTkVTfFRVU0hVfFRWfFRWU3xUV3xUWnxVQXxVQkFOS3xVQlN8VUd8VUt8VU5JQ09NfFVOSVZFUlNJVFl8VU5PfFVPTHxVUFN8VVN8VVl8VVp8VkF8VkFDQVRJT05TfFZBTkF8VkFOR1VBUkR8VkN8VkV8VkVHQVN8VkVOVFVSRVN8VkVSSVNJR058VkVSU0lDSEVSVU5HfFZFVHxWR3xWSXxWSUFKRVN8VklERU98VklHfFZJS0lOR3xWSUxMQVN8VklOfFZJUHxWSVJHSU58VklTQXxWSVNJT058VklWQXxWSVZPfFZMQUFOREVSRU58Vk58Vk9ES0F8Vk9MVk98Vk9URXxWT1RJTkd8Vk9UT3xWT1lBR0V8VlV8V0FMRVN8V0FMTUFSVHxXQUxURVJ8V0FOR3xXQU5HR09VfFdBVENIfFdBVENIRVN8V0VBVEhFUnxXRUFUSEVSQ0hBTk5FTHxXRUJDQU18V0VCRVJ8V0VCU0lURXxXRUR8V0VERElOR3xXRUlCT3xXRUlSfFdGfFdIT1NXSE98V0lFTnxXSUtJfFdJTExJQU1ISUxMfFdJTnxXSU5ET1dTfFdJTkV8V0lOTkVSU3xXTUV8V09MVEVSU0tMVVdFUnxXT09EU0lERXxXT1JLfFdPUktTfFdPUkxEfFdPV3xXU3xXVEN8V1RGfFhCT1h8WEVST1h8WElIVUFOfFhJTnxYTi0tMTFCNEMzRHxYTi0tMUNLMkUxQnxYTi0tMVFRVzIzQXxYTi0tMlNDUko5Q3xYTi0tMzBSUjdZfFhOLS0zQlNUMDBNfFhOLS0zRFM0NDNHfFhOLS0zRTBCNzA3RXxYTi0tM0hDUko5Q3xYTi0tM1BYVThLfFhOLS00MkMyRDlBfFhOLS00NUJSNUNZTHxYTi0tNDVCUko5Q3xYTi0tNDVRMTFDfFhOLS00REJSSzBDRXxYTi0tNEdCUklNfFhOLS01NEI3RlRBMENDfFhOLS01NVFXNDJHfFhOLS01NVFYNUR8WE4tLTVTVTM0SjkzNkJHU0d8WE4tLTVUWk01R3xYTi0tNkZSWjgyR3xYTi0tNlFROTg2QjNYTHxYTi0tODBBRFhIS1N8WE4tLTgwQU8yMUF8WE4tLTgwQVFFQ0RSMUF8WE4tLTgwQVNFSERCfFhOLS04MEFTV0d8WE4tLThZMEEwNjNBfFhOLS05MEEzQUN8WE4tLTkwQUV8WE4tLTkwQUlTfFhOLS05REJRMkF8WE4tLTlFVDUyVXxYTi0tOUtSVDAwQXxYTi0tQjRXNjA1RkVSRHxYTi0tQkNLMUI5QTVEUkU0Q3xYTi0tQzFBVkd8WE4tLUMyQlI3R3xYTi0tQ0NLMkIzQnxYTi0tQ0NLV0NYRVREfFhOLS1DRzRCS0l8WE4tLUNMQ0hDMEVBMEIyRzJBOUdDRHxYTi0tQ1pSNjk0QnxYTi0tQ1pSUzBUfFhOLS1DWlJVMkR8WE4tLUQxQUNKM0J8WE4tLUQxQUxGfFhOLS1FMUE0Q3xYTi0tRUNLVkRUQzlEfFhOLS1FRlZZODhIfFhOLS1GQ1Q0MjlLfFhOLS1GSEJFSXxYTi0tRklRMjI4QzVIU3xYTi0tRklRNjRCfFhOLS1GSVFTOFN8WE4tLUZJUVo5U3xYTi0tRkpRNzIwQXxYTi0tRkxXMzUxRXxYTi0tRlBDUko5QzNEfFhOLS1GWkMyQzlFMkN8WE4tLUZaWVM4RDY5VVZHTXxYTi0tRzJYWDQ4Q3xYTi0tR0NLUjNGMEZ8WE4tLUdFQ1JKOUN8WE4tLUdLM0FUMUV8WE4tLUgyQlJFRzNFVkV8WE4tLUgyQlJKOUN8WE4tLUgyQlJKOUM4Q3xYTi0tSFhUODE0RXxYTi0tSTFCNkIxQTZBMkV8WE4tLUlNUjUxM058WE4tLUlPMEE3SXxYTi0tSjFBRUZ8WE4tLUoxQU1IfFhOLS1KNlcxOTNHfFhOLS1KTFE0ODBOMlJHfFhOLS1KVlIxODlNfFhOLS1LQ1JYNzdEMVg0QXxYTi0tS1BSVzEzRHxYTi0tS1BSWTU3RHxYTi0tS1BVVDNJfFhOLS1MMUFDQ3xYTi0tTEdCQkFUMUFEOEp8WE4tLU1HQjlBV0JGfFhOLS1NR0JBM0EzRUpUfFhOLS1NR0JBM0E0RjE2QXxYTi0tTUdCQTdDMEJCTjBBfFhOLS1NR0JBQU03QThIfFhOLS1NR0JBQjJCRHxYTi0tTUdCQUgxQTNISktSRHxYTi0tTUdCQUk5QVpHUVA2SnxYTi0tTUdCQVlIN0dQQXxYTi0tTUdCQkgxQXxYTi0tTUdCQkgxQTcxRXxYTi0tTUdCQzBBOUFaQ0d8WE4tLU1HQkNBN0RaRE98WE4tLU1HQkNQUTZHUEExQXxYTi0tTUdCRVJQNEE1RDRBUnxYTi0tTUdCR1U4MkF8WE4tLU1HQkk0RUNFWFB8WE4tLU1HQlBMMkZIfFhOLS1NR0JUM0RIRHxYTi0tTUdCVFgyQnxYTi0tTUdCWDRDRDBBQnxYTi0tTUlYODkxRnxYTi0tTUsxQlU0NEN8WE4tLU1YVFExTXxYTi0tTkdCQzVBWkR8WE4tLU5HQkU5RTBBfFhOLS1OR0JSWHxYTi0tTk9ERXxYTi0tTlFWN0Z8WE4tLU5RVjdGUzAwRU1BfFhOLS1OWVFZMjZBfFhOLS1PM0NXNEh8WE4tLU9HQlBGOEZMfFhOLS1PVFU3OTZEfFhOLS1QMUFDRnxYTi0tUDFBSXxYTi0tUEdCUzBESHxYTi0tUFNTWTJVfFhOLS1RN0NFNkF8WE4tLVE5SllCNEN8WE4tLVFDS0ExUE1DfFhOLS1RWEE2QXxYTi0tUVhBTXxYTi0tUkhRVjk2R3xYTi0tUk9WVTg4QnxYTi0tUlZDMUUwQU0zRXxYTi0tUzlCUko5Q3xYTi0tU0VTNTU0R3xYTi0tVDYwQjU2QXxYTi0tVENLV0V8WE4tLVRJUTQ5WFFZSnxYTi0tVU5VUDRZfFhOLS1WRVJNR0VOU0JFUkFURVItQ1RCfFhOLS1WRVJNR0VOU0JFUkFUVU5HLVBXQnxYTi0tVkhRVVZ8WE4tLVZVUTg2MUJ8WE4tLVc0Ujg1RUw4RkhVNUROUkF8WE4tLVc0UlM0MEx8WE4tLVdHQkgxQ3xYTi0tV0dCTDZBfFhOLS1YSFE1MjFCfFhOLS1YS0MyQUwzSFlFMkF8WE4tLVhLQzJETDNBNUVFMEh8WE4tLVk5QTNBUXxYTi0tWUZSTzRJNjdPfFhOLS1ZR0JJMkFNTVh8WE4tLVpGUjE2NEJ8WFhYfFhZWnxZQUNIVFN8WUFIT098WUFNQVhVTnxZQU5ERVh8WUV8WU9ET0JBU0hJfFlPR0F8WU9LT0hBTUF8WU9VfFlPVVRVQkV8WVR8WVVOfFpBfFpBUFBPU3xaQVJBfFpFUk98WklQfFpNfFpPTkV8WlVFUklDSHxaV3xURVNUKVwiO1xuXHR9KTtcblxuXHR1bndyYXBFeHBvcnRzKHRsZHMpO1xuXHR0bGRzLlRMRHM7XG5cblx0dmFyIGRpY3Rpb25hcnkgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0ZXhwb3J0cy5UTERzID0gZXhwb3J0cy5ub25MYXRpbkFscGhhYmV0UmFuZ2VzID0gZXhwb3J0cy5odG1sQXR0cmlidXRlcyA9IGV4cG9ydHMucGFyZW50aGVzaXMgPSBleHBvcnRzLmNsb3NpbmdQYXJlbnRoZXNpcyA9IGV4cG9ydHMub3BlbmluZ1BhcmVudGhlc2lzID0gdm9pZCAwO1xuXG5cdGV4cG9ydHMub3BlbmluZ1BhcmVudGhlc2lzID0gXCIoW1xcXCIne1wiO1xuXHRleHBvcnRzLmNsb3NpbmdQYXJlbnRoZXNpcyA9IFwiKV1cXFwiJ31cIjtcblx0ZXhwb3J0cy5wYXJlbnRoZXNpcyA9IGV4cG9ydHMub3BlbmluZ1BhcmVudGhlc2lzXG5cdCAgICAuc3BsaXQoXCJcIilcblx0ICAgIC5tYXAoZnVuY3Rpb24gKHgsIGkpIHsgcmV0dXJuIFwiXCIuY29uY2F0KHgpLmNvbmNhdChleHBvcnRzLmNsb3NpbmdQYXJlbnRoZXNpcy5jaGFyQXQoaSkpOyB9KTtcblx0ZXhwb3J0cy5odG1sQXR0cmlidXRlcyA9IFtcblx0ICAgIFwic3JjXCIsXG5cdCAgICBcImRhdGFcIixcblx0ICAgIFwiaHJlZlwiLFxuXHQgICAgXCJjaXRlXCIsXG5cdCAgICBcImZvcm1hY3Rpb25cIixcblx0ICAgIFwiaWNvblwiLFxuXHQgICAgXCJtYW5pZmVzdFwiLFxuXHQgICAgXCJwb3N0ZXJcIixcblx0ICAgIFwiY29kZWJhc2VcIixcblx0ICAgIFwiYmFja2dyb3VuZFwiLFxuXHQgICAgXCJwcm9maWxlXCIsXG5cdCAgICBcInVzZW1hcFwiLFxuXHQgICAgXCJpdGVtdHlwZVwiLFxuXHQgICAgXCJhY3Rpb25cIixcblx0ICAgIFwibG9uZ2Rlc2NcIixcblx0ICAgIFwiY2xhc3NpZFwiLFxuXHQgICAgXCJhcmNoaXZlXCJcblx0XTtcblx0ZXhwb3J0cy5ub25MYXRpbkFscGhhYmV0UmFuZ2VzID0gXCJcXFxcdTAwNDEtXFxcXHUwMDVBXFxcXHUwMDYxLVxcXFx1MDA3QVxcXFx1MDBBQVxcXFx1MDBCNVxcXFx1MDBCQVxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJDMVxcXFx1MDJDNi1cXFxcdTAyRDFcXFxcdTAyRTAtXFxcXHUwMkU0XFxcXHUwMkVDXFxcXHUwMkVFXFxcXHUwMzcwLVxcXFx1MDM3NFxcXFx1MDM3NlxcXFx1MDM3N1xcXFx1MDM3QS1cXFxcdTAzN0RcXFxcdTAzODZcXFxcdTAzODgtXFxcXHUwMzhBXFxcXHUwMzhDXFxcXHUwMzhFLVxcXFx1MDNBMVxcXFx1MDNBMy1cXFxcdTAzRjVcXFxcdTAzRjctXFxcXHUwNDgxXFxcXHUwNDhBLVxcXFx1MDUyN1xcXFx1MDUzMS1cXFxcdTA1NTZcXFxcdTA1NTlcXFxcdTA1NjEtXFxcXHUwNTg3XFxcXHUwNUQwLVxcXFx1MDVFQVxcXFx1MDVGMC1cXFxcdTA1RjJcXFxcdTA2MjAtXFxcXHUwNjRBXFxcXHUwNjZFXFxcXHUwNjZGXFxcXHUwNjcxLVxcXFx1MDZEM1xcXFx1MDZENVxcXFx1MDZFNVxcXFx1MDZFNlxcXFx1MDZFRVxcXFx1MDZFRlxcXFx1MDZGQS1cXFxcdTA2RkNcXFxcdTA2RkZcXFxcdTA3MTBcXFxcdTA3MTItXFxcXHUwNzJGXFxcXHUwNzRELVxcXFx1MDdBNVxcXFx1MDdCMVxcXFx1MDdDQS1cXFxcdTA3RUFcXFxcdTA3RjRcXFxcdTA3RjVcXFxcdTA3RkFcXFxcdTA4MDAtXFxcXHUwODE1XFxcXHUwODFBXFxcXHUwODI0XFxcXHUwODI4XFxcXHUwODQwLVxcXFx1MDg1OFxcXFx1MDhBMFxcXFx1MDhBMi1cXFxcdTA4QUNcXFxcdTA5MDQtXFxcXHUwOTM5XFxcXHUwOTNEXFxcXHUwOTUwXFxcXHUwOTU4LVxcXFx1MDk2MVxcXFx1MDk3MS1cXFxcdTA5NzdcXFxcdTA5NzktXFxcXHUwOTdGXFxcXHUwOTg1LVxcXFx1MDk4Q1xcXFx1MDk4RlxcXFx1MDk5MFxcXFx1MDk5My1cXFxcdTA5QThcXFxcdTA5QUEtXFxcXHUwOUIwXFxcXHUwOUIyXFxcXHUwOUI2LVxcXFx1MDlCOVxcXFx1MDlCRFxcXFx1MDlDRVxcXFx1MDlEQ1xcXFx1MDlERFxcXFx1MDlERi1cXFxcdTA5RTFcXFxcdTA5RjBcXFxcdTA5RjFcXFxcdTBBMDUtXFxcXHUwQTBBXFxcXHUwQTBGXFxcXHUwQTEwXFxcXHUwQTEzLVxcXFx1MEEyOFxcXFx1MEEyQS1cXFxcdTBBMzBcXFxcdTBBMzJcXFxcdTBBMzNcXFxcdTBBMzVcXFxcdTBBMzZcXFxcdTBBMzhcXFxcdTBBMzlcXFxcdTBBNTktXFxcXHUwQTVDXFxcXHUwQTVFXFxcXHUwQTcyLVxcXFx1MEE3NFxcXFx1MEE4NS1cXFxcdTBBOERcXFxcdTBBOEYtXFxcXHUwQTkxXFxcXHUwQTkzLVxcXFx1MEFBOFxcXFx1MEFBQS1cXFxcdTBBQjBcXFxcdTBBQjJcXFxcdTBBQjNcXFxcdTBBQjUtXFxcXHUwQUI5XFxcXHUwQUJEXFxcXHUwQUQwXFxcXHUwQUUwXFxcXHUwQUUxXFxcXHUwQjA1LVxcXFx1MEIwQ1xcXFx1MEIwRlxcXFx1MEIxMFxcXFx1MEIxMy1cXFxcdTBCMjhcXFxcdTBCMkEtXFxcXHUwQjMwXFxcXHUwQjMyXFxcXHUwQjMzXFxcXHUwQjM1LVxcXFx1MEIzOVxcXFx1MEIzRFxcXFx1MEI1Q1xcXFx1MEI1RFxcXFx1MEI1Ri1cXFxcdTBCNjFcXFxcdTBCNzFcXFxcdTBCODNcXFxcdTBCODUtXFxcXHUwQjhBXFxcXHUwQjhFLVxcXFx1MEI5MFxcXFx1MEI5Mi1cXFxcdTBCOTVcXFxcdTBCOTlcXFxcdTBCOUFcXFxcdTBCOUNcXFxcdTBCOUVcXFxcdTBCOUZcXFxcdTBCQTNcXFxcdTBCQTRcXFxcdTBCQTgtXFxcXHUwQkFBXFxcXHUwQkFFLVxcXFx1MEJCOVxcXFx1MEJEMFxcXFx1MEMwNS1cXFxcdTBDMENcXFxcdTBDMEUtXFxcXHUwQzEwXFxcXHUwQzEyLVxcXFx1MEMyOFxcXFx1MEMyQS1cXFxcdTBDMzNcXFxcdTBDMzUtXFxcXHUwQzM5XFxcXHUwQzNEXFxcXHUwQzU4XFxcXHUwQzU5XFxcXHUwQzYwXFxcXHUwQzYxXFxcXHUwQzg1LVxcXFx1MEM4Q1xcXFx1MEM4RS1cXFxcdTBDOTBcXFxcdTBDOTItXFxcXHUwQ0E4XFxcXHUwQ0FBLVxcXFx1MENCM1xcXFx1MENCNS1cXFxcdTBDQjlcXFxcdTBDQkRcXFxcdTBDREVcXFxcdTBDRTBcXFxcdTBDRTFcXFxcdTBDRjFcXFxcdTBDRjJcXFxcdTBEMDUtXFxcXHUwRDBDXFxcXHUwRDBFLVxcXFx1MEQxMFxcXFx1MEQxMi1cXFxcdTBEM0FcXFxcdTBEM0RcXFxcdTBENEVcXFxcdTBENjBcXFxcdTBENjFcXFxcdTBEN0EtXFxcXHUwRDdGXFxcXHUwRDg1LVxcXFx1MEQ5NlxcXFx1MEQ5QS1cXFxcdTBEQjFcXFxcdTBEQjMtXFxcXHUwREJCXFxcXHUwREJEXFxcXHUwREMwLVxcXFx1MERDNlxcXFx1MEUwMS1cXFxcdTBFMzBcXFxcdTBFMzJcXFxcdTBFMzNcXFxcdTBFNDAtXFxcXHUwRTQ2XFxcXHUwRTgxXFxcXHUwRTgyXFxcXHUwRTg0XFxcXHUwRTg3XFxcXHUwRTg4XFxcXHUwRThBXFxcXHUwRThEXFxcXHUwRTk0LVxcXFx1MEU5N1xcXFx1MEU5OS1cXFxcdTBFOUZcXFxcdTBFQTEtXFxcXHUwRUEzXFxcXHUwRUE1XFxcXHUwRUE3XFxcXHUwRUFBXFxcXHUwRUFCXFxcXHUwRUFELVxcXFx1MEVCMFxcXFx1MEVCMlxcXFx1MEVCM1xcXFx1MEVCRFxcXFx1MEVDMC1cXFxcdTBFQzRcXFxcdTBFQzZcXFxcdTBFREMtXFxcXHUwRURGXFxcXHUwRjAwXFxcXHUwRjQwLVxcXFx1MEY0N1xcXFx1MEY0OS1cXFxcdTBGNkNcXFxcdTBGODgtXFxcXHUwRjhDXFxcXHUxMDAwLVxcXFx1MTAyQVxcXFx1MTAzRlxcXFx1MTA1MC1cXFxcdTEwNTVcXFxcdTEwNUEtXFxcXHUxMDVEXFxcXHUxMDYxXFxcXHUxMDY1XFxcXHUxMDY2XFxcXHUxMDZFLVxcXFx1MTA3MFxcXFx1MTA3NS1cXFxcdTEwODFcXFxcdTEwOEVcXFxcdTEwQTAtXFxcXHUxMEM1XFxcXHUxMEM3XFxcXHUxMENEXFxcXHUxMEQwLVxcXFx1MTBGQVxcXFx1MTBGQy1cXFxcdTEyNDhcXFxcdTEyNEEtXFxcXHUxMjREXFxcXHUxMjUwLVxcXFx1MTI1NlxcXFx1MTI1OFxcXFx1MTI1QS1cXFxcdTEyNURcXFxcdTEyNjAtXFxcXHUxMjg4XFxcXHUxMjhBLVxcXFx1MTI4RFxcXFx1MTI5MC1cXFxcdTEyQjBcXFxcdTEyQjItXFxcXHUxMkI1XFxcXHUxMkI4LVxcXFx1MTJCRVxcXFx1MTJDMFxcXFx1MTJDMi1cXFxcdTEyQzVcXFxcdTEyQzgtXFxcXHUxMkQ2XFxcXHUxMkQ4LVxcXFx1MTMxMFxcXFx1MTMxMi1cXFxcdTEzMTVcXFxcdTEzMTgtXFxcXHUxMzVBXFxcXHUxMzgwLVxcXFx1MTM4RlxcXFx1MTNBMC1cXFxcdTEzRjRcXFxcdTE0MDEtXFxcXHUxNjZDXFxcXHUxNjZGLVxcXFx1MTY3RlxcXFx1MTY4MS1cXFxcdTE2OUFcXFxcdTE2QTAtXFxcXHUxNkVBXFxcXHUxNzAwLVxcXFx1MTcwQ1xcXFx1MTcwRS1cXFxcdTE3MTFcXFxcdTE3MjAtXFxcXHUxNzMxXFxcXHUxNzQwLVxcXFx1MTc1MVxcXFx1MTc2MC1cXFxcdTE3NkNcXFxcdTE3NkUtXFxcXHUxNzcwXFxcXHUxNzgwLVxcXFx1MTdCM1xcXFx1MTdEN1xcXFx1MTdEQ1xcXFx1MTgyMC1cXFxcdTE4NzdcXFxcdTE4ODAtXFxcXHUxOEE4XFxcXHUxOEFBXFxcXHUxOEIwLVxcXFx1MThGNVxcXFx1MTkwMC1cXFxcdTE5MUNcXFxcdTE5NTAtXFxcXHUxOTZEXFxcXHUxOTcwLVxcXFx1MTk3NFxcXFx1MTk4MC1cXFxcdTE5QUJcXFxcdTE5QzEtXFxcXHUxOUM3XFxcXHUxQTAwLVxcXFx1MUExNlxcXFx1MUEyMC1cXFxcdTFBNTRcXFxcdTFBQTdcXFxcdTFCMDUtXFxcXHUxQjMzXFxcXHUxQjQ1LVxcXFx1MUI0QlxcXFx1MUI4My1cXFxcdTFCQTBcXFxcdTFCQUVcXFxcdTFCQUZcXFxcdTFCQkEtXFxcXHUxQkU1XFxcXHUxQzAwLVxcXFx1MUMyM1xcXFx1MUM0RC1cXFxcdTFDNEZcXFxcdTFDNUEtXFxcXHUxQzdEXFxcXHUxQ0U5LVxcXFx1MUNFQ1xcXFx1MUNFRS1cXFxcdTFDRjFcXFxcdTFDRjVcXFxcdTFDRjZcXFxcdTFEMDAtXFxcXHUxREJGXFxcXHUxRTAwLVxcXFx1MUYxNVxcXFx1MUYxOC1cXFxcdTFGMURcXFxcdTFGMjAtXFxcXHUxRjQ1XFxcXHUxRjQ4LVxcXFx1MUY0RFxcXFx1MUY1MC1cXFxcdTFGNTdcXFxcdTFGNTlcXFxcdTFGNUJcXFxcdTFGNURcXFxcdTFGNUYtXFxcXHUxRjdEXFxcXHUxRjgwLVxcXFx1MUZCNFxcXFx1MUZCNi1cXFxcdTFGQkNcXFxcdTFGQkVcXFxcdTFGQzItXFxcXHUxRkM0XFxcXHUxRkM2LVxcXFx1MUZDQ1xcXFx1MUZEMC1cXFxcdTFGRDNcXFxcdTFGRDYtXFxcXHUxRkRCXFxcXHUxRkUwLVxcXFx1MUZFQ1xcXFx1MUZGMi1cXFxcdTFGRjRcXFxcdTFGRjYtXFxcXHUxRkZDXFxcXHUyMDcxXFxcXHUyMDdGXFxcXHUyMDkwLVxcXFx1MjA5Q1xcXFx1MjEwMlxcXFx1MjEwN1xcXFx1MjEwQS1cXFxcdTIxMTNcXFxcdTIxMTVcXFxcdTIxMTktXFxcXHUyMTFEXFxcXHUyMTI0XFxcXHUyMTI2XFxcXHUyMTI4XFxcXHUyMTJBLVxcXFx1MjEyRFxcXFx1MjEyRi1cXFxcdTIxMzlcXFxcdTIxM0MtXFxcXHUyMTNGXFxcXHUyMTQ1LVxcXFx1MjE0OVxcXFx1MjE0RVxcXFx1MjE4M1xcXFx1MjE4NFxcXFx1MkMwMC1cXFxcdTJDMkVcXFxcdTJDMzAtXFxcXHUyQzVFXFxcXHUyQzYwLVxcXFx1MkNFNFxcXFx1MkNFQi1cXFxcdTJDRUVcXFxcdTJDRjJcXFxcdTJDRjNcXFxcdTJEMDAtXFxcXHUyRDI1XFxcXHUyRDI3XFxcXHUyRDJEXFxcXHUyRDMwLVxcXFx1MkQ2N1xcXFx1MkQ2RlxcXFx1MkQ4MC1cXFxcdTJEOTZcXFxcdTJEQTAtXFxcXHUyREE2XFxcXHUyREE4LVxcXFx1MkRBRVxcXFx1MkRCMC1cXFxcdTJEQjZcXFxcdTJEQjgtXFxcXHUyREJFXFxcXHUyREMwLVxcXFx1MkRDNlxcXFx1MkRDOC1cXFxcdTJEQ0VcXFxcdTJERDAtXFxcXHUyREQ2XFxcXHUyREQ4LVxcXFx1MkRERVxcXFx1MkUyRlxcXFx1MzAwNVxcXFx1MzAwNlxcXFx1MzAzMS1cXFxcdTMwMzVcXFxcdTMwM0JcXFxcdTMwM0NcXFxcdTMwNDEtXFxcXHUzMDk2XFxcXHUzMDlELVxcXFx1MzA5RlxcXFx1MzBBMS1cXFxcdTMwRkFcXFxcdTMwRkMtXFxcXHUzMEZGXFxcXHUzMTA1LVxcXFx1MzEyRFxcXFx1MzEzMS1cXFxcdTMxOEVcXFxcdTMxQTAtXFxcXHUzMUJBXFxcXHUzMUYwLVxcXFx1MzFGRlxcXFx1MzQwMC1cXFxcdTREQjVcXFxcdTRFMDAtXFxcXHU5RkNDXFxcXHVBMDAwLVxcXFx1QTQ4Q1xcXFx1QTREMC1cXFxcdUE0RkRcXFxcdUE1MDAtXFxcXHVBNjBDXFxcXHVBNjEwLVxcXFx1QTYxRlxcXFx1QTYyQVxcXFx1QTYyQlxcXFx1QTY0MC1cXFxcdUE2NkVcXFxcdUE2N0YtXFxcXHVBNjk3XFxcXHVBNkEwLVxcXFx1QTZFNVxcXFx1QTcxNy1cXFxcdUE3MUZcXFxcdUE3MjItXFxcXHVBNzg4XFxcXHVBNzhCLVxcXFx1QTc4RVxcXFx1QTc5MC1cXFxcdUE3OTNcXFxcdUE3QTAtXFxcXHVBN0FBXFxcXHVBN0Y4LVxcXFx1QTgwMVxcXFx1QTgwMy1cXFxcdUE4MDVcXFxcdUE4MDctXFxcXHVBODBBXFxcXHVBODBDLVxcXFx1QTgyMlxcXFx1QTg0MC1cXFxcdUE4NzNcXFxcdUE4ODItXFxcXHVBOEIzXFxcXHVBOEYyLVxcXFx1QThGN1xcXFx1QThGQlxcXFx1QTkwQS1cXFxcdUE5MjVcXFxcdUE5MzAtXFxcXHVBOTQ2XFxcXHVBOTYwLVxcXFx1QTk3Q1xcXFx1QTk4NC1cXFxcdUE5QjJcXFxcdUE5Q0ZcXFxcdUFBMDAtXFxcXHVBQTI4XFxcXHVBQTQwLVxcXFx1QUE0MlxcXFx1QUE0NC1cXFxcdUFBNEJcXFxcdUFBNjAtXFxcXHVBQTc2XFxcXHVBQTdBXFxcXHVBQTgwLVxcXFx1QUFBRlxcXFx1QUFCMVxcXFx1QUFCNVxcXFx1QUFCNlxcXFx1QUFCOS1cXFxcdUFBQkRcXFxcdUFBQzBcXFxcdUFBQzJcXFxcdUFBREItXFxcXHVBQUREXFxcXHVBQUUwLVxcXFx1QUFFQVxcXFx1QUFGMi1cXFxcdUFBRjRcXFxcdUFCMDEtXFxcXHVBQjA2XFxcXHVBQjA5LVxcXFx1QUIwRVxcXFx1QUIxMS1cXFxcdUFCMTZcXFxcdUFCMjAtXFxcXHVBQjI2XFxcXHVBQjI4LVxcXFx1QUIyRVxcXFx1QUJDMC1cXFxcdUFCRTJcXFxcdUFDMDAtXFxcXHVEN0EzXFxcXHVEN0IwLVxcXFx1RDdDNlxcXFx1RDdDQi1cXFxcdUQ3RkJcXFxcdUY5MDAtXFxcXHVGQTZEXFxcXHVGQTcwLVxcXFx1RkFEOVxcXFx1RkIwMC1cXFxcdUZCMDZcXFxcdUZCMTMtXFxcXHVGQjE3XFxcXHVGQjFEXFxcXHVGQjFGLVxcXFx1RkIyOFxcXFx1RkIyQS1cXFxcdUZCMzZcXFxcdUZCMzgtXFxcXHVGQjNDXFxcXHVGQjNFXFxcXHVGQjQwXFxcXHVGQjQxXFxcXHVGQjQzXFxcXHVGQjQ0XFxcXHVGQjQ2LVxcXFx1RkJCMVxcXFx1RkJEMy1cXFxcdUZEM0RcXFxcdUZENTAtXFxcXHVGRDhGXFxcXHVGRDkyLVxcXFx1RkRDN1xcXFx1RkRGMC1cXFxcdUZERkJcXFxcdUZFNzAtXFxcXHVGRTc0XFxcXHVGRTc2LVxcXFx1RkVGQ1xcXFx1RkYyMS1cXFxcdUZGM0FcXFxcdUZGNDEtXFxcXHVGRjVBXFxcXHVGRjY2LVxcXFx1RkZCRVxcXFx1RkZDMi1cXFxcdUZGQzdcXFxcdUZGQ0EtXFxcXHVGRkNGXFxcXHVGRkQyLVxcXFx1RkZEN1xcXFx1RkZEQS1cXFxcdUZGRENcIjtcblx0ZXhwb3J0cy5UTERzID0gdGxkcy5UTERzO1xuXHR9KTtcblxuXHR1bndyYXBFeHBvcnRzKGRpY3Rpb25hcnkpO1xuXHRkaWN0aW9uYXJ5LlRMRHM7XG5cdGRpY3Rpb25hcnkubm9uTGF0aW5BbHBoYWJldFJhbmdlcztcblx0ZGljdGlvbmFyeS5odG1sQXR0cmlidXRlcztcblx0ZGljdGlvbmFyeS5wYXJlbnRoZXNpcztcblx0ZGljdGlvbmFyeS5jbG9zaW5nUGFyZW50aGVzaXM7XG5cdGRpY3Rpb25hcnkub3BlbmluZ1BhcmVudGhlc2lzO1xuXG5cdHZhciB0cmFuc2Zvcm1fMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHRleHBvcnRzLnRyYW5zZm9ybSA9IHZvaWQgMDtcblx0ZnVuY3Rpb24gYXBwbHlPcHRpb24oc3RyaW5nLCBwcm9wcywgb3B0aW9uKSB7XG5cdCAgICAvLyBjb25kaXRpb25hbFxuXHQgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuXHQgICAgICAgIHJldHVybiBvcHRpb24oc3RyaW5nLCBwcm9wcyk7XG5cdCAgICB9XG5cdCAgICAvLyBhbGxcblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBvcHRpb247XG5cdCAgICB9XG5cdH1cblx0ZnVuY3Rpb24gdHJhbnNmb3JtKGlucHV0LCBvcHRpb25zKSB7XG5cdCAgICB2YXIgcHJvdG9jb2wgPSBcIlwiO1xuXHQgICAgdmFyIHRydW5jYXRpb24gPSBJbmZpbml0eTtcblx0ICAgIHZhciBhdHRyaWJ1dGVzID0ge307XG5cdCAgICB2YXIgdHJ1bmNhdGVGcm9tVGhlTWlkZGxlID0gZmFsc2U7XG5cdCAgICAvLyBzcGVjaWFsIHRyYW5zZm9ybWF0aW9uXG5cdCAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNwZWNpYWxUcmFuc2Zvcm0pIHtcblx0ICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9ucy5zcGVjaWFsVHJhbnNmb3JtLmxlbmd0aDsgaW5kZXgrKykge1xuXHQgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSBvcHRpb25zLnNwZWNpYWxUcmFuc2Zvcm1baW5kZXhdO1xuXHQgICAgICAgICAgICBpZiAodHJhbnNmb3JtZXIudGVzdC50ZXN0KGlucHV0LnN0cmluZykpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lci50cmFuc2Zvcm0oaW5wdXQuc3RyaW5nLCBpbnB1dCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICAvLyBleGNsdWRlXG5cdCAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmV4Y2x1ZGUpIHtcblx0ICAgICAgICBpZiAoYXBwbHlPcHRpb24oaW5wdXQuc3RyaW5nLCBpbnB1dCwgb3B0aW9ucy5leGNsdWRlKSlcblx0ICAgICAgICAgICAgeyByZXR1cm4gaW5wdXQuc3RyaW5nOyB9XG5cdCAgICB9XG5cdCAgICAvLyBwcm90b2NvbFxuXHQgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5wcm90b2NvbCkge1xuXHQgICAgICAgIHByb3RvY29sID0gYXBwbHlPcHRpb24oaW5wdXQuc3RyaW5nLCBpbnB1dCwgb3B0aW9ucy5wcm90b2NvbCk7XG5cdCAgICB9XG5cdCAgICBpZiAoaW5wdXQucHJvdG9jb2wpIHtcblx0ICAgICAgICBwcm90b2NvbCA9IFwiXCI7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmICghcHJvdG9jb2wpIHtcblx0ICAgICAgICBwcm90b2NvbCA9IGlucHV0LmlzRW1haWxcblx0ICAgICAgICAgICAgPyBcIm1haWx0bzpcIlxuXHQgICAgICAgICAgICA6IGlucHV0LmlzRmlsZVxuXHQgICAgICAgICAgICAgICAgPyBcImZpbGU6Ly8vXCJcblx0ICAgICAgICAgICAgICAgIDogXCJodHRwOi8vXCI7XG5cdCAgICB9XG5cdCAgICAvLyB0cnVuY2F0aW9uXG5cdCAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRydW5jYXRlKSB7XG5cdCAgICAgICAgdHJ1bmNhdGlvbiA9IGFwcGx5T3B0aW9uKGlucHV0LnN0cmluZywgaW5wdXQsIG9wdGlvbnMudHJ1bmNhdGUpO1xuXHQgICAgfVxuXHQgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5taWRkbGVUcnVuY2F0aW9uKSB7XG5cdCAgICAgICAgdHJ1bmNhdGVGcm9tVGhlTWlkZGxlID0gYXBwbHlPcHRpb24oaW5wdXQuc3RyaW5nLCBpbnB1dCwgb3B0aW9ucy5taWRkbGVUcnVuY2F0aW9uKTtcblx0ICAgIH1cblx0ICAgIC8vIGF0dHJpYnV0ZXNcblx0ICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYXR0cmlidXRlcykge1xuXHQgICAgICAgIGF0dHJpYnV0ZXMgPSBhcHBseU9wdGlvbihpbnB1dC5zdHJpbmcsIGlucHV0LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFwiPGEgXCIuY29uY2F0KE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpXG5cdCAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXNba2V5XSA9PT0gdHJ1ZSA/IGtleSA6IFwiXCIuY29uY2F0KGtleSwgXCI9XFxcIlwiKS5jb25jYXQoYXR0cmlidXRlc1trZXldLCBcIlxcXCIgXCIpO1xuXHQgICAgfSlcblx0ICAgICAgICAuam9pbihcIiBcIiksIFwiaHJlZj1cXFwiXCIpLmNvbmNhdChwcm90b2NvbCkuY29uY2F0KGlucHV0LnN0cmluZywgXCJcXFwiPlwiKS5jb25jYXQoaW5wdXQuc3RyaW5nLmxlbmd0aCA+IHRydW5jYXRpb25cblx0ICAgICAgICA/IHRydW5jYXRlRnJvbVRoZU1pZGRsZVxuXHQgICAgICAgICAgICA/IGlucHV0LnN0cmluZy5zdWJzdHJpbmcoMCwgTWF0aC5mbG9vcih0cnVuY2F0aW9uIC8gMikpICtcblx0ICAgICAgICAgICAgICAgIFwi4oCmXCIgK1xuXHQgICAgICAgICAgICAgICAgaW5wdXQuc3RyaW5nLnN1YnN0cmluZyhpbnB1dC5zdHJpbmcubGVuZ3RoIC0gTWF0aC5jZWlsKHRydW5jYXRpb24gLyAyKSwgaW5wdXQuc3RyaW5nLmxlbmd0aClcblx0ICAgICAgICAgICAgOiBpbnB1dC5zdHJpbmcuc3Vic3RyaW5nKDAsIHRydW5jYXRpb24pICsgXCLigKZcIlxuXHQgICAgICAgIDogaW5wdXQuc3RyaW5nLCBcIjwvYT5cIik7XG5cdH1cblx0ZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG5cdH0pO1xuXG5cdHVud3JhcEV4cG9ydHModHJhbnNmb3JtXzEpO1xuXHR0cmFuc2Zvcm1fMS50cmFuc2Zvcm07XG5cblx0dmFyIHJlZ2V4ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cdGV4cG9ydHMuaWlkeGVzID0gZXhwb3J0cy51cmxSZWdleCA9IGV4cG9ydHMuZmlsZVJlZ2V4ID0gZXhwb3J0cy5lbWFpbFJlZ2V4ID0gZXhwb3J0cy5pcFJlZ2V4ID0gZXhwb3J0cy5maW5hbFJlZ2V4ID0gZXhwb3J0cy5maW5hbDIgPSBleHBvcnRzLmZpbmFsMSA9IGV4cG9ydHMuZmlsZSA9IGV4cG9ydHMudXJsID0gZXhwb3J0cy5lbWFpbCA9IHZvaWQgMDtcblxuXHR2YXIgZW1haWxBZGRyZXNzID0gXCIoW1xcXFx3ISMkJSYnKis9P15ge3x9fi1dKyg/OlxcXFwuW1xcXFx3ISMkJSYnKis9P15ge3x9fi1dKykqKVwiO1xuXHR2YXIgZG9tYWluID0gXCIoPzooPzooPzpbYS16XFxcXGRdfFthLXpcXFxcZF1bXFxcXHdcXFxcLV0qW2EtelxcXFxkXSkpXFxcXC4pKyh4bi0tW2EtelxcXFxkXXsyLH18W2Etel17Mix9KSg/PVteLl18XFxcXGIpXCI7XG5cdHZhciBhbGxvd2VkSW5QYXRoID0gXCJcXFxcd1xcXFwtLn5cXFxcISQmKissOz06QCUnXFxcIlxcXFxbXFxcXF0oKT8jXCI7XG5cdHZhciBwYXRoID0gXCIoKD86L3xcXFxcPykoPzooW1wiLmNvbmNhdChhbGxvd2VkSW5QYXRoKS5jb25jYXQoZGljdGlvbmFyeS5ub25MYXRpbkFscGhhYmV0UmFuZ2VzLCBcIlxcXFwvXSg/OltcXFxcd1xcXFwtfis9IyZcXFxcL1wiKS5jb25jYXQoZGljdGlvbmFyeS5ub25MYXRpbkFscGhhYmV0UmFuZ2VzLCBcIl18XFxcXGIpKykqKSspXCIpO1xuXHR2YXIgaXB2NCA9IFwiKCg/Oig/OjI1WzAtNV18MlswLTRdXFxcXGR8WzAxXT9cXFxcZFxcXFxkPylcXFxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcXFxkfFswMV0/XFxcXGRcXFxcZD8pKVwiO1xuXHR2YXIgaXB2NiA9IFwiXFxcXFsoPzooPzpbYS1mXFxcXGQ6XSs6KykrW2EtZlxcXFxkXSspXFxcXF1cIjtcblx0dmFyIHBvcnQgPSBcIig6KFxcXFxkezEsNX0pKT9cIjtcblx0dmFyIHByb3RvY29sID0gXCIoaHR7Mn1wcz86fGZ0cHM/OilcXFxcL1xcXFwvXCI7XG5cdHZhciBjb25maXJtZWRCeVByb3RvY29sID0gXCIoXCIuY29uY2F0KHByb3RvY29sLCBcIilcXFxcUytcXFxcYlwiKTtcblx0dmFyIGZxZG4gPSBcIigoKFwiLmNvbmNhdChwcm90b2NvbCwgXCIpPyhcIikuY29uY2F0KGRvbWFpbiwgXCJ8XCIpLmNvbmNhdChpcHY0LCBcIikoPz1cXFxcYnxfKVwiKS5jb25jYXQocG9ydCwgXCIpfCg/OlwiKS5jb25jYXQoY29uZmlybWVkQnlQcm90b2NvbCwgXCIpKVwiKTtcblx0ZXhwb3J0cy5lbWFpbCA9IFwiXFxcXGIobWFpbHRvOik/XCIuY29uY2F0KGVtYWlsQWRkcmVzcywgXCJAKFwiKS5jb25jYXQoZG9tYWluLCBcInxcIikuY29uY2F0KGlwdjQsIFwiKVwiKTtcblx0ZXhwb3J0cy51cmwgPSBcIihcIi5jb25jYXQoZnFkbiwgXCIpXCIpLmNvbmNhdChwYXRoLCBcIj9cIik7XG5cdGV4cG9ydHMuZmlsZSA9IFwiKGZpbGU6XFxcXC9cXFxcL1xcXFwvKSg/OlthLXpdKzooPzpcXFxcL3xcXFxcXFxcXCkrKT8oW1xcXFx3Ll0rKD86W1xcXFwvXFxcXFxcXFxdPykrKStcIjtcblx0Ly8gc2luY2Ugc2FmYXJpIGRvZXNuJ3QgbGlrZSBsb29rYmVoaW5kLCB3ZSdyZSB0cnlpbmcgYW4gYWx0ZXJuYXRpdmVcblx0ZXhwb3J0cy5maW5hbDEgPSBcIig/PD1cXFxcYnxfKSgoXCIuY29uY2F0KGV4cG9ydHMuZW1haWwsIFwiKXwoXCIpLmNvbmNhdChleHBvcnRzLmZpbGUsIFwiKXwoXCIpLmNvbmNhdChleHBvcnRzLnVybCwgXCIpKShcXFxcYik/XCIpO1xuXHRleHBvcnRzLmZpbmFsMiA9IFwiKChcXFxcYikoXCIuY29uY2F0KGV4cG9ydHMuZW1haWwsIFwiKXwoXFxcXGIpKFwiKS5jb25jYXQoZXhwb3J0cy5maWxlLCBcIil8KFxcXFxiKShcIikuY29uY2F0KGV4cG9ydHMudXJsLCBcIikpKFxcXFxiKT9cIik7XG5cdGV4cG9ydHMuZmluYWxSZWdleCA9IG5ldyBSZWdFeHAoZXhwb3J0cy5maW5hbDIsIFwiZ2lcIik7XG5cdHRyeSB7XG5cdCAgICBleHBvcnRzLmZpbmFsUmVnZXggPSBuZXcgUmVnRXhwKGV4cG9ydHMuZmluYWwxLCBcImdpXCIpO1xuXHR9XG5cdGNhdGNoIChlKSB7XG5cdCAgICBleHBvcnRzLmZpbmFsUmVnZXggPSBuZXcgUmVnRXhwKGV4cG9ydHMuZmluYWwyLCBcImdpXCIpO1xuXHR9XG5cdC8vIGZvciB2YWxpZGF0aW9uIHB1cnBvc2VzXG5cdGV4cG9ydHMuaXBSZWdleCA9IG5ldyBSZWdFeHAoXCJeKFwiLmNvbmNhdChpcHY0LCBcInxcIikuY29uY2F0KGlwdjYsIFwiKSRcIiksIFwiaVwiKTtcblx0ZXhwb3J0cy5lbWFpbFJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oXCIuY29uY2F0KGV4cG9ydHMuZW1haWwsIFwiKSRcIiksIFwiaVwiKTtcblx0ZXhwb3J0cy5maWxlUmVnZXggPSBuZXcgUmVnRXhwKFwiXihcIi5jb25jYXQoZXhwb3J0cy5maWxlLCBcIikkXCIpLCBcImlcIik7XG5cdGV4cG9ydHMudXJsUmVnZXggPSBuZXcgUmVnRXhwKFwiXihcIi5jb25jYXQoZXhwb3J0cy51cmwsIFwiKSRcIiksIFwiaVwiKTtcblx0Ly8gaWRlbnRpZnlpbmcgcGFydHMgb2YgdGhlIGxpbmtcblx0Ly8gdGhlIGluaXRpYWwgdmFsdWUgb2YgdGhpcyBvYmplY3QgaXMgcHJlY29tcHV0ZWQuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGV4Y29ydmkvYW5jaG9ybWUuanMvYmxvYi8wOTg4NDNiYzBkMDQyNjAxY2ZmNTkyYzRmOGM5ZjZkMDQyNGMwOWNkL3NyYy9yZWdleC50c1xuXHR2YXIgaWlkeGVzID0geyBcImlzRmlsZVwiOiA4LCBcImZpbGVcIjogeyBcImZpbGVOYW1lXCI6IDEwLCBcInByb3RvY29sXCI6IDkgfSwgXCJpc0VtYWlsXCI6IDIsIFwiZW1haWxcIjogeyBcInByb3RvY29sXCI6IDMsIFwibG9jYWxcIjogNCwgXCJob3N0XCI6IDUgfSwgXCJpc1VSTFwiOiAxMSwgXCJ1cmxcIjogeyBcIlRMRFwiOiBbMTgsIDZdLCBcInByb3RvY29sXCI6IFsxNSwgMjJdLCBcImhvc3RcIjogWzE3XSwgXCJpcHY0XCI6IDE5LCBcImJ5UHJvdG9jb2xcIjogMTMsIFwicG9ydFwiOiAyMSwgXCJwcm90b2NvbFdpdGhEb21haW5cIjogMTIsIFwicGF0aFwiOiAyNCB9IH07XG5cdGV4cG9ydHMuaWlkeGVzID0gaWlkeGVzO1xuXHR9KTtcblxuXHR1bndyYXBFeHBvcnRzKHJlZ2V4KTtcblx0cmVnZXguaWlkeGVzO1xuXHRyZWdleC51cmxSZWdleDtcblx0cmVnZXguZmlsZVJlZ2V4O1xuXHRyZWdleC5lbWFpbFJlZ2V4O1xuXHRyZWdleC5pcFJlZ2V4O1xuXHRyZWdleC5maW5hbFJlZ2V4O1xuXHRyZWdleC5maW5hbDI7XG5cdHJlZ2V4LmZpbmFsMTtcblx0cmVnZXguZmlsZTtcblx0cmVnZXgudXJsO1xuXHRyZWdleC5lbWFpbDtcblxuXHR2YXIgdXRpbHMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0ZXhwb3J0cy5pc0luc2lkZUFuY2hvclRhZyA9IGV4cG9ydHMuaXNJbnNpZGVBdHRyaWJ1dGUgPSBleHBvcnRzLm1heGltdW1BdHRyTGVuZ3RoID0gZXhwb3J0cy5jaGVja1BhcmVudGhlc2lzID0gdm9pZCAwO1xuXG5cdGZ1bmN0aW9uIGNoZWNrUGFyZW50aGVzaXMob3BlbmluZywgY2xvc2luZywgdGFyZ2V0LCBuZXh0Q2hhcikge1xuXHQgICAgaWYgKG5leHRDaGFyICE9PSBjbG9zaW5nKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgICAgaWYgKHRhcmdldC5zcGxpdChvcGVuaW5nKS5sZW5ndGggLSB0YXJnZXQuc3BsaXQoY2xvc2luZykubGVuZ3RoID09PSAxIHx8XG5cdCAgICAgICAgKG9wZW5pbmcgPT09IGNsb3NpbmcgJiYgdGFyZ2V0LnNwbGl0KG9wZW5pbmcpLmxlbmd0aCAlIDIgPT09IDApKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdH1cblx0ZXhwb3J0cy5jaGVja1BhcmVudGhlc2lzID0gY2hlY2tQYXJlbnRoZXNpcztcblx0ZXhwb3J0cy5tYXhpbXVtQXR0ckxlbmd0aCA9IGRpY3Rpb25hcnkuaHRtbEF0dHJpYnV0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDsgfSlbMF0ubGVuZ3RoO1xuXHRmdW5jdGlvbiBpc0luc2lkZUF0dHJpYnV0ZShwcmV2RnJhZ21lbnQpIHtcblx0ICAgIHJldHVybiAoL1xcc1thLXowLTktXSs9KCd8XCIpJC9pLnRlc3QocHJldkZyYWdtZW50KSB8fCAvLyBmb3IgaHRtbCBlbGVtZW50cyBzdGFuZGFyZCBhdHRyaWJ1dGVzXG5cdCAgICAgICAgLzogP3VybFxcKCgnfFwiKT8kL2kudGVzdChwcmV2RnJhZ21lbnQpIC8vIGZvciBzdHlsZSBhdHRyaWJ1dGVzIGUuZy4gc3R5bGU9XCJiYWNrZ3JvdW5kOnVybChzb21lLmNvbS9pbWcucG5nKVwiXG5cdCAgICApO1xuXHR9XG5cdGV4cG9ydHMuaXNJbnNpZGVBdHRyaWJ1dGUgPSBpc0luc2lkZUF0dHJpYnV0ZTtcblx0ZnVuY3Rpb24gaXNJbnNpZGVBbmNob3JUYWcodGFyZ2V0LCBmdWxsSW5wdXQsIHRhcmdldEVuZCkge1xuXHQgICAgdmFyIGVzY2FwZWRUYXJnZXQgPSB0YXJnZXQucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCBcIlxcXFwkJlwiKTtcblx0ICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCIoPz0oPGEpKSg/IShbXFxcXHNcXFxcU10qKSg8XFxcXC9hPikoXCIuY29uY2F0KGVzY2FwZWRUYXJnZXQsIFwiKSlbXFxcXHNcXFxcU10qPyhcIikuY29uY2F0KGVzY2FwZWRUYXJnZXQsIFwiKSg/IVxcXCJ8JylcIiksIFwiZ2lcIik7XG5cdCAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblx0ICAgIHdoaWxlICgocmVzdWx0ID0gcmVnZXguZXhlYyhmdWxsSW5wdXQpKSAhPT0gbnVsbCkge1xuXHQgICAgICAgIHZhciBlbmQgPSByZXN1bHQuaW5kZXggKyByZXN1bHRbMF0ubGVuZ3RoO1xuXHQgICAgICAgIGlmIChlbmQgPT09IHRhcmdldEVuZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdH1cblx0ZXhwb3J0cy5pc0luc2lkZUFuY2hvclRhZyA9IGlzSW5zaWRlQW5jaG9yVGFnO1xuXHR9KTtcblxuXHR1bndyYXBFeHBvcnRzKHV0aWxzKTtcblx0dXRpbHMuaXNJbnNpZGVBbmNob3JUYWc7XG5cdHV0aWxzLmlzSW5zaWRlQXR0cmlidXRlO1xuXHR1dGlscy5tYXhpbXVtQXR0ckxlbmd0aDtcblx0dXRpbHMuY2hlY2tQYXJlbnRoZXNpcztcblxuXHR2YXIgbm9kZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5cblxuXG5cdHZhciBkaWN0aW9uYXJ5XzIgPSBkaWN0aW9uYXJ5O1xuXHR2YXIgVExEc1JnZXggPSBuZXcgUmVnRXhwKFwiXihcIi5jb25jYXQoZGljdGlvbmFyeV8yLlRMRHMsIFwiKSRcIiksICdpJyk7XG5cdHZhciBsaXN0ID0gZnVuY3Rpb24gKGlucHV0LCBza2lwSFRNTCkge1xuXHQgICAgaWYgKHNraXBIVE1MID09PSB2b2lkIDApIHsgc2tpcEhUTUwgPSB0cnVlOyB9XG5cdCAgICB2YXIgZm91bmQgPSBbXTtcblx0ICAgIHZhciByZXN1bHQgPSBudWxsO1xuXHQgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gcmVzdWx0LmluZGV4O1xuXHQgICAgICAgIHZhciBlbmQgPSBzdGFydCArIHJlc3VsdFswXS5sZW5ndGg7XG5cdCAgICAgICAgdmFyIHN0cmluZyA9IHJlc3VsdFswXTtcblx0ICAgICAgICB2YXIgcHJvdG9jb2wgPSByZXN1bHRbcmVnZXguaWlkeGVzLnVybC5wcm90b2NvbFswXV0gfHxcblx0ICAgICAgICAgICAgcmVzdWx0W3JlZ2V4LmlpZHhlcy51cmwucHJvdG9jb2xbMV1dIHx8XG5cdCAgICAgICAgICAgIHJlc3VsdFtyZWdleC5paWR4ZXMudXJsLnByb3RvY29sWzJdXTtcblx0ICAgICAgICAvLyAjIyMgUGFyZW50aGVzaXMgcHJvYmxlbVxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAgICBBcyB3ZSdyZSB1c2luZyB0aGUgXFxiIHRvIHRva2VuaXplIHRoZSBVUkwsIHNvbWV0aW1lcyB0aGUgcGFyZW50aGVzaXMgYXJlIHBhcnQgb2YgdGhlIFVSTFxuXHQgICAgICAgICAgICBhbmQgc29tZXRpbWVzIHRoZXkgYXJlIGFjdHVhbGx5IHRoZSBsYXN0IHBhcnQsIHRoaXMgbWFrZXMgdGhlIHRva2VuaXphdGlvbiBzdG9wcyBqdXN0XG5cdCAgICAgICAgICAgIGJlZm9yZSB0aGVtLlxuXHQgICAgICAgICAgICBUbyBmaXggdGhpcywgd2UgY2FsY3VsYXRlIGhvdyBtYW55IHBhcmVudGhlc2lzIGFyZSBvcGVuIGFuZCBob3cgbWFueSBhcmUgY2xvc2VkIGluc2lkZVxuXHQgICAgICAgICAgICB0aGUgVVJMIGFuZCBiYXNlZCBvbiB0aGUgbnVtYmVyIHdlIHNob3VsZCBiZSBhYmxlIHRvIGtub3cgd2hldGhlciB0aGUgYWZvcmVtZW50aW9uZWRcblx0ICAgICAgICAgICAgcGFyZW50aGVzaXMgY2hhcmFjdGVyIGlzIHBhcnQgb2YgdGhlIFVSTCBvciBub3Rcblx0ICAgICAgICAqL1xuXHQgICAgICAgIGlmIChkaWN0aW9uYXJ5LmNsb3NpbmdQYXJlbnRoZXNpcy5pbmRleE9mKGlucHV0LmNoYXJBdChlbmQpKSA+IC0xKSB7XG5cdCAgICAgICAgICAgIGRpY3Rpb25hcnkucGFyZW50aGVzaXMuZm9yRWFjaChmdW5jdGlvbiAoc3RyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgb3BlbmluZyA9IHN0ci5jaGFyQXQoMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2xvc2luZyA9IHN0ci5jaGFyQXQoMSk7XG5cdCAgICAgICAgICAgICAgICBpZiAoKDAsIHV0aWxzLmNoZWNrUGFyZW50aGVzaXMpKG9wZW5pbmcsIGNsb3NpbmcsIHN0cmluZywgaW5wdXQuY2hhckF0KGVuZCkpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgaW5wdXQuY2hhckF0KGVuZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZW5kKys7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoc2tpcEhUTUwpIHtcblx0ICAgICAgICAgICAgLy8gIyMjIEhUTUwgcHJvYmxlbSAxXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgY2hlY2tpbmcgd2hldGhlciB0aGUgdG9rZW4gaXMgYWxyZWFkeSBpbnNpZGUgYW4gSFRNTCBlbGVtZW50IGJ5IHNlZWluZyBpZiBpdCdzXG5cdCAgICAgICAgICAgICAgICBwcmVjZWRlZCBieSBhbiBIVE1MIGF0dHJpYnV0ZSB0aGF0IHdvdWxkIGhvbGQgYSB1cmwgKGUuZy4gc3JjLCBjaXRlIC4uLmV0Yylcblx0ICAgICAgICAgICAgICAgIGUuZy4gPGEgaHJlZj1cImFiLmNvbVwiPmFiLmNvbTwvYT5cblx0ICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgaWYgKFsnXCJcIicsIFwiJydcIiwgXCIoKVwiXS5pbmRleE9mKGlucHV0LmNoYXJBdChzdGFydCAtIDEpICsgaW5wdXQuY2hhckF0KGVuZCkpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKCgwLCB1dGlscy5pc0luc2lkZUF0dHJpYnV0ZSkoaW5wdXQuc3Vic3RyaW5nKHN0YXJ0IC0gdXRpbHMubWF4aW11bUF0dHJMZW5ndGggLSAxNSwgc3RhcnQpKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gIyMjIEhUTUwgcHJvYmxlbSAyXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgQ2hlY2tpbmcgd2hldGhlciB0aGUgdG9rZW4gaXMgdGhlIGNvbnRlbnQgb2YgYW4gYWN0dWFsIGFuY2hvclxuXHQgICAgICAgICAgICAgICAgZS5nLiA8YSBocmVmPVwiaHR0cHM6Ly9zb21ldGhpbmcuY29tXCI+Y2xpY2sgdG8gZ28gdG8gc29tZXRoaW5nLmNvbSBhbmQgaGF2ZSBmdW48L2E+XG5cdCAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHJpbmcoZW5kLCBpbnB1dC5sZW5ndGgpLmluZGV4T2YoXCI8L2E+XCIpID4gLTEgJiZcblx0ICAgICAgICAgICAgICAgIGlucHV0LnN1YnN0cmluZygwLCBzdGFydCkuaW5kZXhPZihcIjxhXCIpID4gLTEgJiZcblx0ICAgICAgICAgICAgICAgICgwLCB1dGlscy5pc0luc2lkZUFuY2hvclRhZykoc3RyaW5nLCBpbnB1dCwgZW5kKSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBmaWx0ZXIgb3V0IFVSTHMgdGhhdCBkb2Vzbid0IGhhdmUgYSB2YWlsZCBUTERcblx0ICAgICAgICB2YXIgdGxkID0gcmVzdWx0W3JlZ2V4LmlpZHhlcy51cmwuVExEWzBdXSB8fCByZXN1bHRbcmVnZXguaWlkeGVzLnVybC5UTERbMV1dO1xuXHQgICAgICAgIGlmICh0bGQgJiYgKCFwcm90b2NvbCkgJiYgKCFyZXN1bHRbcmVnZXguaWlkeGVzLmVtYWlsLnByb3RvY29sXSkgJiYgKCF0bGQuc3RhcnRzV2l0aChcInhuLS1cIikgJiYgIVRMRHNSZ2V4LnRlc3QodGxkKSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHJlc3VsdFtyZWdleC5paWR4ZXMuaXNVUkxdKSB7XG5cdCAgICAgICAgICAgIHZhciBob3N0ID0gcmVzdWx0W3JlZ2V4LmlpZHhlcy51cmwuaG9zdFswXV0gfHwgcmVzdWx0W3JlZ2V4LmlpZHhlcy51cmwuaG9zdFsxXV0gfHwgcmVzdWx0W3JlZ2V4LmlpZHhlcy51cmwuaG9zdFsyXV07XG5cdCAgICAgICAgICAgIHZhciBwYXRoID0gKHN0cmluZy5tYXRjaCgvKD86W15cXC86XXxdKSgoPzpcXC9bXj8jXFxzXSspKykvKSB8fCBbXSlbMV07XG5cdCAgICAgICAgICAgIHZhciBxdWVyeSA9IChzdHJpbmcubWF0Y2goLyg/OlxcPykoW14jXSspXFxiLykgfHwgW10pWzFdO1xuXHQgICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSAoc3RyaW5nLm1hdGNoKC8oPzojKSguKylcXGIvKSB8fCBbXSlbMV07XG5cdCAgICAgICAgICAgIHZhciBpcHY2ID0gaG9zdCA9PT0gdW5kZWZpbmVkID8gKHN0cmluZy5tYXRjaCgvXFwvXFwvXFxbKCg/Oig/OlthLWZcXGQ6XSs6KykrW2EtZlxcZF0rKSlcXF0vKSB8fCBbXSlbMV0gOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIGZvdW5kLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuXHQgICAgICAgICAgICAgICAgZW5kOiBlbmQsXG5cdCAgICAgICAgICAgICAgICBzdHJpbmc6IHN0cmluZyxcblx0ICAgICAgICAgICAgICAgIGlzVVJMOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgcHJvdG9jb2w6IHByb3RvY29sLFxuXHQgICAgICAgICAgICAgICAgcG9ydDogcmVzdWx0W3JlZ2V4LmlpZHhlcy51cmwucG9ydF0sXG5cdCAgICAgICAgICAgICAgICBpcHY0OiByZXN1bHRbcmVnZXguaWlkeGVzLnVybC5pcHY0XSxcblx0ICAgICAgICAgICAgICAgIGlwdjY6IGlwdjYsXG5cdCAgICAgICAgICAgICAgICBob3N0OiBpcHY2ID8gJ1snICsgaXB2NiArICddJyA6IGhvc3QsXG5cdCAgICAgICAgICAgICAgICBjb25maXJtZWRCeVByb3RvY29sOiAhIXByb3RvY29sLFxuXHQgICAgICAgICAgICAgICAgcGF0aDogcGF0aCB8fCB1bmRlZmluZWQsXG5cdCAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnksXG5cdCAgICAgICAgICAgICAgICBmcmFnbWVudDogZnJhZ21lbnQsXG5cdCAgICAgICAgICAgICAgICByZWFzb246IFwidXJsXCIsXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChyZXN1bHRbcmVnZXguaWlkeGVzLmlzRmlsZV0pIHtcblx0ICAgICAgICAgICAgdmFyIGZpbGVQYXRoID0gc3RyaW5nLnN1YnN0cig4KTtcblx0ICAgICAgICAgICAgZm91bmQucHVzaCh7XG5cdCAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgICAgICBlbmQ6IGVuZCxcblx0ICAgICAgICAgICAgICAgIHN0cmluZzogc3RyaW5nLFxuXHQgICAgICAgICAgICAgICAgaXNGaWxlOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgcHJvdG9jb2w6IHJlc3VsdFtyZWdleC5paWR4ZXMuZmlsZS5wcm90b2NvbF0sXG5cdCAgICAgICAgICAgICAgICBmaWxlbmFtZTogcmVzdWx0W3JlZ2V4LmlpZHhlcy5maWxlLmZpbGVOYW1lXSxcblx0ICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBmaWxlUGF0aCxcblx0ICAgICAgICAgICAgICAgIGZpbGVEaXJlY3Rvcnk6IGZpbGVQYXRoLnN1YnN0cigwLCBmaWxlUGF0aC5sZW5ndGggLSByZXN1bHRbcmVnZXguaWlkeGVzLmZpbGUuZmlsZU5hbWVdLmxlbmd0aCksXG5cdCAgICAgICAgICAgICAgICByZWFzb246IFwiZmlsZVwiLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAocmVzdWx0W3JlZ2V4LmlpZHhlcy5pc0VtYWlsXSkge1xuXHQgICAgICAgICAgICBmb3VuZC5wdXNoKHtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcblx0ICAgICAgICAgICAgICAgIGVuZDogZW5kLFxuXHQgICAgICAgICAgICAgICAgc3RyaW5nOiBzdHJpbmcsXG5cdCAgICAgICAgICAgICAgICBpc0VtYWlsOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgbG9jYWw6IHJlc3VsdFtyZWdleC5paWR4ZXMuZW1haWwubG9jYWxdLFxuXHQgICAgICAgICAgICAgICAgcHJvdG9jb2w6IHJlc3VsdFtyZWdleC5paWR4ZXMuZW1haWwucHJvdG9jb2xdLFxuXHQgICAgICAgICAgICAgICAgaG9zdDogcmVzdWx0W3JlZ2V4LmlpZHhlcy5lbWFpbC5ob3N0XSxcblx0ICAgICAgICAgICAgICAgIHJlYXNvbjogXCJlbWFpbFwiLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGZvdW5kLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuXHQgICAgICAgICAgICAgICAgZW5kOiBlbmQsXG5cdCAgICAgICAgICAgICAgICBzdHJpbmc6IHN0cmluZyxcblx0ICAgICAgICAgICAgICAgIHJlYXNvbjogXCJ1bmtub3duXCIsXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ2V4LmZpbmFsUmVnZXguZXhlYyhpbnB1dCkpICE9PSBudWxsKSB7XG5cdCAgICAgICAgX2xvb3BfMSgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZvdW5kO1xuXHR9O1xuXHR2YXIgYW5jaG9ybWUgPSBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICB2YXIgX2EgPSB0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiXG5cdCAgICAgICAgPyB7IGlucHV0OiBhcmcsIG9wdGlvbnM6IHVuZGVmaW5lZCwgZXh0ZW5zaW9uczogdW5kZWZpbmVkIH1cblx0ICAgICAgICA6IGFyZywgaW5wdXQgPSBfYS5pbnB1dCwgb3B0aW9ucyA9IF9hLm9wdGlvbnMsIGV4dGVuc2lvbnMgPSBfYS5leHRlbnNpb25zO1xuXHQgICAgaWYgKGV4dGVuc2lvbnMpIHtcblx0ICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZXh0ZW5zaW9ucy5sZW5ndGg7IGluZGV4KyspIHtcblx0ICAgICAgICAgICAgdmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbaW5kZXhdO1xuXHQgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoZXh0ZW5zaW9uLnRlc3QsIGV4dGVuc2lvbi50cmFuc2Zvcm0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHZhciBmb3VuZCA9IGxpc3QoaW5wdXQsIChvcHRpb25zIHx8IHt9KS5za2lwSFRNTCk7XG5cdCAgICB2YXIgbmV3U3RyID0gXCJcIjtcblx0ICAgIC8vIHRoZSBmb2xsb3dpbmcgY29kZSBpc24ndCB2ZXJ5IGludHVpdGl2ZSBub3IgaHVtYW4gcmVhZGFibGVcblx0ICAgIC8vIGJ1dCBmYXN0ZXIgdGhhbiBvdGhlcnNcblx0ICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmb3VuZC5sZW5ndGg7IGluZGV4KyspIHtcblx0ICAgICAgICBuZXdTdHIgPVxuXHQgICAgICAgICAgICAobmV3U3RyXG5cdCAgICAgICAgICAgICAgICA/IG5ld1N0clxuXHQgICAgICAgICAgICAgICAgOiBpbmRleCA9PT0gMFxuXHQgICAgICAgICAgICAgICAgICAgID8gaW5wdXQuc3Vic3RyaW5nKDAsIGZvdW5kW2luZGV4XS5zdGFydClcblx0ICAgICAgICAgICAgICAgICAgICA6IFwiXCIpICtcblx0ICAgICAgICAgICAgICAgICgwLCB0cmFuc2Zvcm1fMS50cmFuc2Zvcm0pKGZvdW5kW2luZGV4XSwgb3B0aW9ucykgK1xuXHQgICAgICAgICAgICAgICAgKGZvdW5kW2luZGV4ICsgMV1cblx0ICAgICAgICAgICAgICAgICAgICA/IGlucHV0LnN1YnN0cmluZyhmb3VuZFtpbmRleF0uZW5kLCBmb3VuZFtpbmRleCArIDFdLnN0YXJ0KVxuXHQgICAgICAgICAgICAgICAgICAgIDogaW5wdXQuc3Vic3RyaW5nKGZvdW5kW2luZGV4XS5lbmQpKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXdTdHIgPyBuZXdTdHIgOiBpbnB1dDtcblx0fTtcblx0YW5jaG9ybWUubGlzdCA9IGxpc3Q7XG5cdGFuY2hvcm1lLnZhbGlkYXRlID0ge1xuXHQgICAgaXA6IGZ1bmN0aW9uIChpbnB1dCkgeyByZXR1cm4gcmVnZXguaXBSZWdleC50ZXN0KGlucHV0KTsgfSxcblx0ICAgIGVtYWlsOiBmdW5jdGlvbiAoaW5wdXQpIHsgcmV0dXJuIHJlZ2V4LmVtYWlsUmVnZXgudGVzdChpbnB1dCk7IH0sXG5cdCAgICBmaWxlOiBmdW5jdGlvbiAoaW5wdXQpIHsgcmV0dXJuIHJlZ2V4LmZpbGVSZWdleC50ZXN0KGlucHV0KTsgfSxcblx0ICAgIHVybDogZnVuY3Rpb24gKGlucHV0KSB7IHJldHVybiByZWdleC51cmxSZWdleC50ZXN0KGlucHV0KSB8fCByZWdleC5pcFJlZ2V4LnRlc3QoaW5wdXQpOyB9LFxuXHR9O1xuXHRleHBvcnRzLmRlZmF1bHQgPSBhbmNob3JtZTtcblx0fSk7XG5cblx0dmFyIGluZGV4ID0gdW53cmFwRXhwb3J0cyhub2RlKTtcblxuXHRyZXR1cm4gaW5kZXg7XG5cbn0pKTtcbiIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9NT0RVTEVTIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcclxuICAgIH1cclxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICh3aW5kb3csIG5vR2xvYmFsKSB7XHJcbiAgICBjb25zdCByZXNpemluZyA9IHtcclxuICAgICAgICBuYW1lOiAncmVzaXppbmcnLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb25zdHJ1Y3RvclxyXG4gICAgICAgICAqIFJlcXVpcmUgY29udGV4dCBwcm9wZXJ0aWVzIHdoZW4gcmVzaXppbmcgbW9kdWxlXHJcbiAgICAgICAgICAgIGlucHV0WDogRWxlbWVudCxcclxuICAgICAgICAgICAgaW5wdXRZOiBFbGVtZW50LFxyXG4gICAgICAgICAgICBfY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICBfY292ZXI6IG51bGwsXHJcbiAgICAgICAgICAgIF9lbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBfZWxlbWVudF93OiAxLFxyXG4gICAgICAgICAgICBfZWxlbWVudF9oOiAxLFxyXG4gICAgICAgICAgICBfZWxlbWVudF9sOiAwLFxyXG4gICAgICAgICAgICBfZWxlbWVudF90OiAwLFxyXG4gICAgICAgICAgICBfZGVmYXVsdFNpemVYOiAnYXV0bycsXHJcbiAgICAgICAgICAgIF9kZWZhdWx0U2l6ZVk6ICdhdXRvJyxcclxuICAgICAgICAgICAgX29yaWdpbl93OiBjb3JlLm9wdGlvbnMuaW1hZ2VXaWR0aCA9PT0gJ2F1dG8nID8gJycgOiBjb3JlLm9wdGlvbnMuaW1hZ2VXaWR0aCxcclxuICAgICAgICAgICAgX29yaWdpbl9oOiBjb3JlLm9wdGlvbnMuaW1hZ2VIZWlnaHQgPT09ICdhdXRvJyA/ICcnIDogY29yZS5vcHRpb25zLmltYWdlSGVpZ2h0LFxyXG4gICAgICAgICAgICBfcHJvcG9ydGlvbkNoZWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIC8vIC0tIHNlbGVjdCBmdW5jdGlvbiAtLVxyXG4gICAgICAgICAgICBfcmVzaXppbmc6IGNvcmUub3B0aW9ucy5pbWFnZVJlc2l6aW5nLFxyXG4gICAgICAgICAgICBfcmVzaXplRG90SGlkZTogIWNvcmUub3B0aW9ucy5pbWFnZUhlaWdodFNob3csXHJcbiAgICAgICAgICAgIF9yb3RhdGlvbjogY29yZS5vcHRpb25zLmltYWdlUm90YXRpb24sXHJcbiAgICAgICAgICAgIF9vbmx5UGVyY2VudGFnZTogY29yZS5vcHRpb25zLmltYWdlU2l6ZU9ubHlQZXJjZW50YWdlLFxyXG4gICAgICAgICAgICBfcmF0aW86IGZhbHNlLFxyXG4gICAgICAgICAgICBfcmF0aW9YOiAxLFxyXG4gICAgICAgICAgICBfcmF0aW9ZOiAxXHJcbiAgICAgICAgICAgIF9jYXB0aW9uU2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgLy8gLS0gd2hlbiB1c2VkIGNhcHRpb24gKF9jYXB0aW9uU2hvdzogdHJ1ZSkgLS1cclxuICAgICAgICAgICAgX2NhcHRpb246IG51bGwsXHJcbiAgICAgICAgICAgIF9jYXB0aW9uQ2hlY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNhcHRpb25DaGVja0VsOiBudWxsLFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0IFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKGNvcmUpIHtcclxuICAgICAgICAgICAgY29uc3QgaWNvbnMgPSBjb3JlLmljb25zO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc2l6aW5nID0ge1xyXG4gICAgICAgICAgICAgICAgX3Jlc2l6ZUNsaWVudFg6IDAsXHJcbiAgICAgICAgICAgICAgICBfcmVzaXplQ2xpZW50WTogMCxcclxuICAgICAgICAgICAgICAgIF9yZXNpemVfcGx1Z2luOiAnJyxcclxuICAgICAgICAgICAgICAgIF9yZXNpemVfdzogMCxcclxuICAgICAgICAgICAgICAgIF9yZXNpemVfaDogMCxcclxuICAgICAgICAgICAgICAgIF9vcmlnaW5fdzogMCxcclxuICAgICAgICAgICAgICAgIF9vcmlnaW5faDogMCxcclxuICAgICAgICAgICAgICAgIF9yb3RhdGVWZXJ0aWNhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBfcmVzaXplX2RpcmVjdGlvbjogJycsXHJcbiAgICAgICAgICAgICAgICBfbW92ZV9wYXRoOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgX2lzQ2hhbmdlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFsaWduSWNvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNpYzogaWNvbnMuYWxpZ25fanVzdGlmeSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBpY29ucy5hbGlnbl9sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBpY29ucy5hbGlnbl9yaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IGljb25zLmFsaWduX2NlbnRlclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlc2l6ZSBjb250cm9sbGVyLCBidXR0b24gKi9cclxuICAgICAgICAgICAgbGV0IHJlc2l6ZV9kaXZfY29udGFpbmVyID0gdGhpcy5zZXRDb250cm9sbGVyX3Jlc2l6ZShjb3JlKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5yZXNpemVDb250YWluZXIgPSByZXNpemVfZGl2X2NvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucmVzaXplRGl2ID0gcmVzaXplX2Rpdl9jb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlLW1vZGFsLXJlc2l6ZScpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZURvdCA9IHJlc2l6ZV9kaXZfY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZS1yZXNpemUtZG90Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucmVzaXplRGlzcGxheSA9IHJlc2l6ZV9kaXZfY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZS1yZXNpemUtZGlzcGxheScpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc2l6ZV9idXR0b24gPSB0aGlzLnNldENvbnRyb2xsZXJfYnV0dG9uKGNvcmUpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZUJ1dHRvbiA9IHJlc2l6ZV9idXR0b247XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVzaXplX2hhbmRsZXMgPSBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZUhhbmRsZXMgPSBjb250ZXh0LnJlc2l6aW5nLnJlc2l6ZURvdC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucmVzaXplQnV0dG9uR3JvdXAgPSByZXNpemVfYnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJy5fc2VfcmVzaXppbmdfYnRuX2dyb3VwJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucm90YXRpb25CdXR0b25zID0gcmVzaXplX2J1dHRvbi5xdWVyeVNlbGVjdG9yQWxsKCcuX3NlX3Jlc2l6aW5nX2J0bl9ncm91cCAuX3NlX3JvdGF0aW9uJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcucGVyY2VudGFnZUJ1dHRvbnMgPSByZXNpemVfYnV0dG9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5fc2VfcmVzaXppbmdfYnRuX2dyb3VwIC5fc2VfcGVyY2VudGFnZScpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5hbGlnbk1lbnUgPSByZXNpemVfYnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJy5zZS1yZXNpemluZy1hbGlnbi1saXN0Jyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzaXppbmcuYWxpZ25NZW51TGlzdCA9IGNvbnRleHQucmVzaXppbmcuYWxpZ25NZW51LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5hbGlnbkJ1dHRvbiA9IHJlc2l6ZV9idXR0b24ucXVlcnlTZWxlY3RvcignLl9zZV9yZXNpemluZ19hbGlnbl9idXR0b24nKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5hdXRvU2l6ZUJ1dHRvbiA9IHJlc2l6ZV9idXR0b24ucXVlcnlTZWxlY3RvcignLl9zZV9yZXNpemluZ19idG5fZ3JvdXAgLl9zZV9hdXRvX3NpemUnKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZXNpemluZy5jYXB0aW9uQnV0dG9uID0gcmVzaXplX2J1dHRvbi5xdWVyeVNlbGVjdG9yKCcuX3NlX3Jlc2l6aW5nX2NhcHRpb25fYnV0dG9uJyk7XHJcblxyXG4gICAgICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgICAgICByZXNpemVfZGl2X2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pO1xyXG4gICAgICAgICAgICByZXNpemVfaGFuZGxlc1swXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duX3Jlc2l6ZV9oYW5kbGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9oYW5kbGVzWzFdLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd25fcmVzaXplX2hhbmRsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgcmVzaXplX2hhbmRsZXNbMl0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICByZXNpemVfaGFuZGxlc1szXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duX3Jlc2l6ZV9oYW5kbGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9oYW5kbGVzWzRdLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd25fcmVzaXplX2hhbmRsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgcmVzaXplX2hhbmRsZXNbNV0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlLmJpbmQoY29yZSkpO1xyXG4gICAgICAgICAgICByZXNpemVfaGFuZGxlc1s2XS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duX3Jlc2l6ZV9oYW5kbGUuYmluZChjb3JlKSk7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9oYW5kbGVzWzddLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd25fcmVzaXplX2hhbmRsZS5iaW5kKGNvcmUpKTtcclxuICAgICAgICAgICAgcmVzaXplX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja19yZXNpemVCdXR0b24uYmluZChjb3JlKSk7XHJcblxyXG4gICAgICAgICAgICAvKiogYXBwZW5kIGh0bWwgKi9cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKHJlc2l6ZV9kaXZfY29udGFpbmVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnJlbGF0aXZlLmFwcGVuZENoaWxkKHJlc2l6ZV9idXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xyXG4gICAgICAgICAgICByZXNpemVfZGl2X2NvbnRhaW5lciA9IG51bGwsIHJlc2l6ZV9idXR0b24gPSBudWxsLCByZXNpemVfaGFuZGxlcyA9IG51bGw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqIHJlc2l6ZSBjb250cm9sbGVyLCBidXR0b24gKGltYWdlLCBpZnJhbWUsIHZpZGVvKSAqL1xyXG4gICAgICAgIHNldENvbnRyb2xsZXJfcmVzaXplOiBmdW5jdGlvbiAoY29yZSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNpemVfY29udGFpbmVyID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG5cclxuICAgICAgICAgICAgcmVzaXplX2NvbnRhaW5lci5jbGFzc05hbWUgPSAnc2UtY29udHJvbGxlciBzZS1yZXNpemluZy1jb250YWluZXInO1xyXG4gICAgICAgICAgICByZXNpemVfY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHJlc2l6ZV9jb250YWluZXIuaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1tb2RhbC1yZXNpemVcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtcmVzaXplLWRvdFwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwidGxcIj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJ0clwiPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImJsXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYnJcIj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJsd1wiPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInRoXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicndcIj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJiaFwiPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtcmVzaXplLWRpc3BsYXlcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc2l6ZV9jb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0Q29udHJvbGxlcl9idXR0b246IGZ1bmN0aW9uIChjb3JlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhbmcgPSBjb3JlLmxhbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGljb25zID0gY29yZS5pY29ucztcclxuICAgICAgICAgICAgY29uc3QgcmVzaXplX2J1dHRvbiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO1xyXG5cclxuICAgICAgICAgICAgcmVzaXplX2J1dHRvbi5jbGFzc05hbWUgPSBcInNlLWNvbnRyb2xsZXIgc2UtY29udHJvbGxlci1yZXNpemluZ1wiO1xyXG4gICAgICAgICAgICByZXNpemVfYnV0dG9uLmlubmVySFRNTCA9ICcnICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYXJyb3cgc2UtYXJyb3ctdXBcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtYnRuLWdyb3VwIF9zZV9yZXNpemluZ19idG5fZ3JvdXBcIj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJwZXJjZW50XCIgZGF0YS12YWx1ZT1cIjFcIiBjbGFzcz1cInNlLXRvb2x0aXAgX3NlX3BlcmNlbnRhZ2VcIj4nICtcclxuICAgICAgICAgICAgICAgICc8c3Bhbj4xMDAlPC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yZXNpemUxMDAgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJwZXJjZW50XCIgZGF0YS12YWx1ZT1cIjAuNzVcIiBjbGFzcz1cInNlLXRvb2x0aXAgX3NlX3BlcmNlbnRhZ2VcIj4nICtcclxuICAgICAgICAgICAgICAgICc8c3Bhbj43NSU8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnJlc2l6ZTc1ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwicGVyY2VudFwiIGRhdGEtdmFsdWU9XCIwLjVcIiBjbGFzcz1cInNlLXRvb2x0aXAgX3NlX3BlcmNlbnRhZ2VcIj4nICtcclxuICAgICAgICAgICAgICAgICc8c3Bhbj41MCU8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5jb250cm9sbGVyLnJlc2l6ZTUwICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiYXV0b1wiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX2F1dG9fc2l6ZVwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMuYXV0b19zaXplICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIuYXV0b1NpemUgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJyb3RhdGVcIiBkYXRhLXZhbHVlPVwiLTkwXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcCBfc2Vfcm90YXRpb25cIj4nICtcclxuICAgICAgICAgICAgICAgIGljb25zLnJvdGF0ZV9sZWZ0ICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIucm90YXRlTGVmdCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cInJvdGF0ZVwiIGRhdGEtdmFsdWU9XCI5MFwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3JvdGF0aW9uXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5yb3RhdGVfcmlnaHQgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5yb3RhdGVSaWdodCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXBcIiBzdHlsZT1cInBhZGRpbmctdG9wOiAwO1wiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cIm1pcnJvclwiIGRhdGEtdmFsdWU9XCJoXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMubWlycm9yX2hvcml6b250YWwgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5taXJyb3JIb3Jpem9udGFsICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwibWlycm9yXCIgZGF0YS12YWx1ZT1cInZcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5taXJyb3JfdmVydGljYWwgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5taXJyb3JWZXJ0aWNhbCArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtY29tbWFuZD1cIm9uYWxpZ25cIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwIF9zZV9yZXNpemluZ19hbGlnbl9idXR0b25cIj4nICtcclxuICAgICAgICAgICAgICAgIGljb25zLmFsaWduX2p1c3RpZnkgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcudG9vbGJhci5hbGlnbiArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1idG4tZ3JvdXAtc3ViIHN1bi1lZGl0b3ItY29tbW9uIHNlLWxpc3QtbGF5ZXIgc2UtcmVzaXppbmctYWxpZ24tbGlzdFwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLXRvb2x0aXBcIiBkYXRhLWNvbW1hbmQ9XCJhbGlnblwiIGRhdGEtdmFsdWU9XCJiYXNpY1wiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMuYWxpZ25fanVzdGlmeSArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5kaWFsb2dCb3guYmFzaWMgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj48L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLXRvb2x0aXBcIiBkYXRhLWNvbW1hbmQ9XCJhbGlnblwiIGRhdGEtdmFsdWU9XCJsZWZ0XCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5hbGlnbl9sZWZ0ICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmRpYWxvZ0JveC5sZWZ0ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+PC9saT4nICtcclxuICAgICAgICAgICAgICAgICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCBzZS10b29sdGlwXCIgZGF0YS1jb21tYW5kPVwiYWxpZ25cIiBkYXRhLXZhbHVlPVwiY2VudGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5hbGlnbl9jZW50ZXIgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuZGlhbG9nQm94LmNlbnRlciArICc8L3NwYW4+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JyArXHJcbiAgICAgICAgICAgICAgICAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3Qgc2UtdG9vbHRpcFwiIGRhdGEtY29tbWFuZD1cImFsaWduXCIgZGF0YS12YWx1ZT1cInJpZ2h0XCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5hbGlnbl9yaWdodCArXHJcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLWlubmVyXCI+PHNwYW4gY2xhc3M9XCJzZS10b29sdGlwLXRleHRcIj4nICsgbGFuZy5kaWFsb2dCb3gucmlnaHQgKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj48L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvdWw+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiY2FwdGlvblwiIGNsYXNzPVwic2UtYnRuIHNlLXRvb2x0aXAgX3NlX3Jlc2l6aW5nX2NhcHRpb25fYnV0dG9uXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5jYXB0aW9uICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmRpYWxvZ0JveC5jYXB0aW9uICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwicmV2ZXJ0XCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMucmV2ZXJ0ICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmRpYWxvZ0JveC5yZXZlcnRCdXR0b24gKyAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWNvbW1hbmQ9XCJ1cGRhdGVcIiBjbGFzcz1cInNlLWJ0biBzZS10b29sdGlwXCI+JyArXHJcbiAgICAgICAgICAgICAgICBpY29ucy5tb2RpZnkgK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC1pbm5lclwiPjxzcGFuIGNsYXNzPVwic2UtdG9vbHRpcC10ZXh0XCI+JyArIGxhbmcuY29udHJvbGxlci5lZGl0ICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1jb21tYW5kPVwiZGVsZXRlXCIgY2xhc3M9XCJzZS1idG4gc2UtdG9vbHRpcFwiPicgK1xyXG4gICAgICAgICAgICAgICAgaWNvbnMuZGVsZXRlICtcclxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtaW5uZXJcIj48c3BhbiBjbGFzcz1cInNlLXRvb2x0aXAtdGV4dFwiPicgKyBsYW5nLmNvbnRyb2xsZXIucmVtb3ZlICsgJzwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNpemVfYnV0dG9uO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSB3aWR0aCBzaXplXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRQbHVnaW4gY29udGV4dCBvYmplY3Qgb2YgcGx1Z2luIChjb3JlLmNvbnRleHRbcGx1Z2luXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvdmVyIENvdmVyIGVsZW1lbnQgKEZJR1VSRSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRhaW5lciBDb250YWluZXIgZWxlbWVudCAoRElWLnNlLWNvbXBvbmVudClcclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tb2R1bGVfZ2V0U2l6ZVg6IGZ1bmN0aW9uIChjb250ZXh0UGx1Z2luLCBlbGVtZW50LCBjb3ZlciwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGlmICghZWxlbWVudCkgZWxlbWVudCA9IGNvbnRleHRQbHVnaW4uX2VsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICghY292ZXIpIGNvdmVyID0gY29udGV4dFBsdWdpbi5fY292ZXI7XHJcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyKSBjb250YWluZXIgPSBjb250ZXh0UGx1Z2luLl9jb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVybiAnJztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAhLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUud2lkdGgpID8gZWxlbWVudC5zdHlsZS53aWR0aCA6ICgoY29udGFpbmVyICYmIHRoaXMudXRpbC5nZXROdW1iZXIoY29udGFpbmVyLnN0eWxlLndpZHRoLCAyKSkgfHwgMTAwKSArICclJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgaGVpZ2h0IHNpemVcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFBsdWdpbiBjb250ZXh0IG9iamVjdCBvZiBwbHVnaW4gKGNvcmUuY29udGV4dFtwbHVnaW5dKVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY292ZXIgQ292ZXIgZWxlbWVudCAoRklHVVJFKVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY29udGFpbmVyIENvbnRhaW5lciBlbGVtZW50IChESVYuc2UtY29tcG9uZW50KVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX21vZHVsZV9nZXRTaXplWTogZnVuY3Rpb24gKGNvbnRleHRQbHVnaW4sIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpIHtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSBlbGVtZW50ID0gY29udGV4dFBsdWdpbi5fZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKCFjb3ZlcikgY292ZXIgPSBjb250ZXh0UGx1Z2luLl9jb3ZlcjtcclxuICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIGNvbnRhaW5lciA9IGNvbnRleHRQbHVnaW4uX2NvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyIHx8ICFjb3ZlcikgcmV0dXJuIChlbGVtZW50ICYmIGVsZW1lbnQuc3R5bGUuaGVpZ2h0KSB8fCAnJztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvdmVyLnN0eWxlLnBhZGRpbmdCb3R0b20sIDApID4gMCAmJiAhdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCA/IGNvdmVyLnN0eWxlLmhlaWdodCA6ICghLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUuaGVpZ2h0KSB8fCAhLyUkLy50ZXN0KGVsZW1lbnQuc3R5bGUud2lkdGgpID8gZWxlbWVudC5zdHlsZS5oZWlnaHQgOiAoKGNvbnRhaW5lciAmJiB0aGlzLnV0aWwuZ2V0TnVtYmVyKGNvbnRhaW5lci5zdHlsZS5oZWlnaHQsIDIpKSB8fCAxMDApICsgJyUnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGF0IHRoZSBcIm9wZW5Nb2RpZnlcIiB0byBwdXQgdGhlIHNpemUgb2YgdGhlIGN1cnJlbnQgdGFyZ2V0IGludG8gdGhlIHNpemUgaW5wdXQgZWxlbWVudC5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFBsdWdpbiBjb250ZXh0IG9iamVjdCBvZiBwbHVnaW4gKGNvcmUuY29udGV4dFtwbHVnaW5dKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW5PYmogUGx1Z2luIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tb2R1bGVfc2V0TW9kaWZ5SW5wdXRTaXplOiBmdW5jdGlvbiAoY29udGV4dFBsdWdpbiwgcGx1Z2luT2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VSb3RhdGlvbiA9IGNvbnRleHRQbHVnaW4uX29ubHlQZXJjZW50YWdlICYmIHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWw7XHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4ucHJvcG9ydGlvbi5jaGVja2VkID0gY29udGV4dFBsdWdpbi5fcHJvcG9ydGlvbkNoZWNrZWQgPSBjb250ZXh0UGx1Z2luLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9wb3J0aW9uJykgIT09ICdmYWxzZSc7XHJcblxyXG4gICAgICAgICAgICBsZXQgeCA9IHBlcmNlbnRhZ2VSb3RhdGlvbiA/ICcnIDogdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9tb2R1bGVfZ2V0U2l6ZVguY2FsbCh0aGlzLCBjb250ZXh0UGx1Z2luKTtcclxuICAgICAgICAgICAgaWYgKHggPT09IGNvbnRleHRQbHVnaW4uX2RlZmF1bHRTaXplWCkgeCA9ICcnO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UpIHggPSB0aGlzLnV0aWwuZ2V0TnVtYmVyKHgsIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSA9IHg7XHJcbiAgICAgICAgICAgIHBsdWdpbk9iai5zZXRJbnB1dFNpemUuY2FsbCh0aGlzLCAneCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0UGx1Z2luLl9vbmx5UGVyY2VudGFnZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHkgPSBwZXJjZW50YWdlUm90YXRpb24gPyAnJyA6IHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVZLmNhbGwodGhpcywgY29udGV4dFBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA9PT0gY29udGV4dFBsdWdpbi5fZGVmYXVsdFNpemVZKSB5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UpIHkgPSB0aGlzLnV0aWwuZ2V0TnVtYmVyKHksIDIpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFBsdWdpbi5pbnB1dFkudmFsdWUgPSB5O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WC5kaXNhYmxlZCA9IHBlcmNlbnRhZ2VSb3RhdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgY29udGV4dFBsdWdpbi5pbnB1dFkuZGlzYWJsZWQgPSBwZXJjZW50YWdlUm90YXRpb24gPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4ucHJvcG9ydGlvbi5kaXNhYmxlZCA9IHBlcmNlbnRhZ2VSb3RhdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHBsdWdpbk9iai5zZXRSYXRpby5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJdCBpcyBjYWxsZWQgaW4gXCJzZXRJbnB1dFNpemVcIiAoaW5wdXQgdGFnIGtleXVwRXZlbnQpLCBcclxuICAgICAgICAgKiBjaGVja3MgdGhlIHZhbHVlIGVudGVyZWQgaW4gdGhlIGlucHV0IHRhZywgXHJcbiAgICAgICAgICogY2FsY3VsYXRlcyB0aGUgcmF0aW8sIGFuZCBzZXRzIHRoZSBjYWxjdWxhdGVkIHZhbHVlIGluIHRoZSBpbnB1dCB0YWcgb2YgdGhlIG9wcG9zaXRlIHNpemUuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRQbHVnaW4gY29udGV4dCBvYmplY3Qgb2YgcGx1Z2luIChjb3JlLmNvbnRleHRbcGx1Z2luXSlcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30geHkgJ3gnOiB3aWR0aCwgJ3knOiBoZWlnaHRcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbW9kdWxlX3NldElucHV0U2l6ZTogZnVuY3Rpb24gKGNvbnRleHRQbHVnaW4sIHh5KSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLl9vbmx5UGVyY2VudGFnZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHh5ID09PSAneCcgJiYgY29udGV4dFBsdWdpbi5pbnB1dFgudmFsdWUgPiAxMDApIGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlID0gMTAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5wcm9wb3J0aW9uLmNoZWNrZWQgJiYgY29udGV4dFBsdWdpbi5fcmF0aW8gJiYgL1xcZC8udGVzdChjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSkgJiYgL1xcZC8udGVzdChjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhVbml0ID0gY29udGV4dFBsdWdpbi5pbnB1dFgudmFsdWUucmVwbGFjZSgvXFxkK3xcXC4vZywgJycpIHx8IGNvbnRleHRQbHVnaW4uc2l6ZVVuaXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5VW5pdCA9IGNvbnRleHRQbHVnaW4uaW5wdXRZLnZhbHVlLnJlcGxhY2UoL1xcZCt8XFwuL2csICcnKSB8fCBjb250ZXh0UGx1Z2luLnNpemVVbml0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh4VW5pdCAhPT0geVVuaXQpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWMgPSB4VW5pdCA9PT0gJyUnID8gMiA6IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHh5ID09PSAneCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSA9IHRoaXMudXRpbC5nZXROdW1iZXIoY29udGV4dFBsdWdpbi5fcmF0aW9ZICogdGhpcy51dGlsLmdldE51bWJlcihjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSwgZGVjKSwgZGVjKSArIHlVbml0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WC52YWx1ZSA9IHRoaXMudXRpbC5nZXROdW1iZXIoY29udGV4dFBsdWdpbi5fcmF0aW9YICogdGhpcy51dGlsLmdldE51bWJlcihjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSwgZGVjKSwgZGVjKSArIHhVbml0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEl0IGlzIGNhbGxlZCBpbiBcInNldFJhdGlvXCIgKGlucHV0IGFuZCBwcm9wb3J0aW9uQ2hlY2sgdGFncyBjaGFuZ2VFdmVudCksIFxyXG4gICAgICAgICAqIGNoZWNrcyB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IHRhZywgY2FsY3VsYXRlcyB0aGUgcmF0aW8sIGFuZCByZXNldHMgaXQgaW4gdGhlIGlucHV0IHRhZy5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFBsdWdpbiBjb250ZXh0IG9iamVjdCBvZiBwbHVnaW4gKGNvcmUuY29udGV4dFtwbHVnaW5dKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tb2R1bGVfc2V0UmF0aW86IGZ1bmN0aW9uIChjb250ZXh0UGx1Z2luKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHhWYWx1ZSA9IGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCB5VmFsdWUgPSBjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLnByb3BvcnRpb24uY2hlY2tlZCAmJiAvXFxkKy8udGVzdCh4VmFsdWUpICYmIC9cXGQrLy50ZXN0KHlWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhVbml0ID0geFZhbHVlLnJlcGxhY2UoL1xcZCt8XFwuL2csICcnKSB8fCBjb250ZXh0UGx1Z2luLnNpemVVbml0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeVVuaXQgPSB5VmFsdWUucmVwbGFjZSgvXFxkK3xcXC4vZywgJycpIHx8IGNvbnRleHRQbHVnaW4uc2l6ZVVuaXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHhVbml0ICE9PSB5VW5pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX3JhdGlvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFjb250ZXh0UGx1Z2luLl9yYXRpbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSB0aGlzLnV0aWwuZ2V0TnVtYmVyKHhWYWx1ZSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IHRoaXMudXRpbC5nZXROdW1iZXIoeVZhbHVlLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFBsdWdpbi5fcmF0aW8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX3JhdGlvWCA9IHggLyB5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX3JhdGlvWSA9IHkgLyB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFBsdWdpbi5fcmF0aW8gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXZlcnQgc2l6ZSBvZiBlbGVtZW50IHRvIG9yaWdpbiBzaXplIChwbHVnaW4uX29yaWdpbl93LCBwbHVnaW4uX29yaWdpbl9oKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0UGx1Z2luIGNvbnRleHQgb2JqZWN0IG9mIHBsdWdpbiAoY29yZS5jb250ZXh0W3BsdWdpbl0pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX21vZHVsZV9zaXplUmV2ZXJ0OiBmdW5jdGlvbiAoY29udGV4dFBsdWdpbikge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlID0gY29udGV4dFBsdWdpbi5fb3JpZ2luX3cgPiAxMDAgPyAxMDAgOiBjb250ZXh0UGx1Z2luLl9vcmlnaW5fdztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uaW5wdXRYLnZhbHVlID0gY29udGV4dFBsdWdpbi5fb3JpZ2luX3c7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLmlucHV0WS52YWx1ZSA9IGNvbnRleHRQbHVnaW4uX29yaWdpbl9oO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNhdmUgdGhlIHNpemUgZGF0YSAoZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNpemVcIikpXHJcbiAgICAgICAgICogVXNlZCBhdCB0aGUgXCJzZXRTaXplXCIgbWV0aG9kXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRQbHVnaW4gY29udGV4dCBvYmplY3Qgb2YgcGx1Z2luIChjb3JlLmNvbnRleHRbcGx1Z2luXSlcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbW9kdWxlX3NhdmVDdXJyZW50U2l6ZTogZnVuY3Rpb24gKGNvbnRleHRQbHVnaW4pIHtcclxuICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVYLmNhbGwodGhpcywgY29udGV4dFBsdWdpbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGNvbnRleHRQbHVnaW4pO1xyXG4gICAgICAgICAgICAvLyBhZGQgdG9vIHdpZHRoLCBoZWlnaHQgYXR0cmlidXRlXHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX2VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHgucmVwbGFjZSgncHgnLCAnJykpO1xyXG4gICAgICAgICAgICBjb250ZXh0UGx1Z2luLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgeS5yZXBsYWNlKCdweCcsICcnKSk7XHJcbiAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCB4ICsgJywnICsgeSk7XHJcbiAgICAgICAgICAgIGlmICghIWNvbnRleHRQbHVnaW4uX3ZpZGVvUmF0aW8pIGNvbnRleHRQbHVnaW4uX3ZpZGVvUmF0aW8gPSB5O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsIHRoZSByZXNpemluZyBtb2R1bGVcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldEVsZW1lbnQgUmVzaXppbmcgdGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1Z2luIFBsdWdpbiBuYW1lXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gU2l6ZSBvZiByZXNpemluZyBkaXYge3csIGgsIHQsIGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbF9jb250cm9sbGVyX3Jlc2l6ZTogZnVuY3Rpb24gKHRhcmdldEVsZW1lbnQsIHBsdWdpbikge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0UmVzaXppbmcgPSB0aGlzLmNvbnRleHQucmVzaXppbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRQbHVnaW4gPSB0aGlzLmNvbnRleHRbcGx1Z2luXTtcclxuICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLl9yZXNpemVfcGx1Z2luID0gcGx1Z2luO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzaXplQ29udGFpbmVyID0gY29udGV4dFJlc2l6aW5nLnJlc2l6ZUNvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3QgcmVzaXplRGl2ID0gY29udGV4dFJlc2l6aW5nLnJlc2l6ZURpdjtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy51dGlsLmdldE9mZnNldCh0YXJnZXRFbGVtZW50LCB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IGNvbnRleHRSZXNpemluZy5fcm90YXRlVmVydGljYWwgPSAvXig5MHwyNzApJC8udGVzdChNYXRoLmFicyh0YXJnZXRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnKSkudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3ID0gaXNWZXJ0aWNhbCA/IHRhcmdldEVsZW1lbnQub2Zmc2V0SGVpZ2h0IDogdGFyZ2V0RWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgY29uc3QgaCA9IGlzVmVydGljYWwgPyB0YXJnZXRFbGVtZW50Lm9mZnNldFdpZHRoIDogdGFyZ2V0RWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBvZmZzZXQudG9wO1xyXG4gICAgICAgICAgICBjb25zdCBsID0gb2Zmc2V0LmxlZnQgLSB0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuc2Nyb2xsTGVmdDtcclxuXHJcbiAgICAgICAgICAgIHJlc2l6ZUNvbnRhaW5lci5zdHlsZS50b3AgPSB0ICsgJ3B4JztcclxuICAgICAgICAgICAgcmVzaXplQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBsICsgJ3B4JztcclxuICAgICAgICAgICAgcmVzaXplQ29udGFpbmVyLnN0eWxlLndpZHRoID0gdyArICdweCc7XHJcbiAgICAgICAgICAgIHJlc2l6ZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIHJlc2l6ZURpdi5zdHlsZS50b3AgPSAnMHB4JztcclxuICAgICAgICAgICAgcmVzaXplRGl2LnN0eWxlLmxlZnQgPSAnMHB4JztcclxuICAgICAgICAgICAgcmVzaXplRGl2LnN0eWxlLndpZHRoID0gIHcgKyAncHgnO1xyXG4gICAgICAgICAgICByZXNpemVEaXYuc3R5bGUuaGVpZ2h0ID0gIGggKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgbGV0IGFsaWduID0gdGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWxpZ24nKSB8fCAnYmFzaWMnO1xyXG4gICAgICAgICAgICBhbGlnbiA9IGFsaWduID09PSAnbm9uZScgPyAnYmFzaWMnIDogYWxpZ247XHJcblxyXG4gICAgICAgICAgICAvLyB0ZXh0XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHRhcmdldEVsZW1lbnQsIHRoaXMudXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQodGFyZ2V0RWxlbWVudCwgJ0ZJR1VSRScpO1xyXG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5WCA9IHRoaXMucGx1Z2lucy5yZXNpemluZy5fbW9kdWxlX2dldFNpemVYLmNhbGwodGhpcywgY29udGV4dFBsdWdpbiwgdGFyZ2V0RWxlbWVudCwgY292ZXIsIGNvbnRhaW5lcikgfHwgJ2F1dG8nO1xyXG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5WSA9IGNvbnRleHRQbHVnaW4uX29ubHlQZXJjZW50YWdlICYmIHBsdWdpbiA9PT0gJ2ltYWdlJyA/ICcnIDogJywgJyArICh0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGNvbnRleHRQbHVnaW4sIHRhcmdldEVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpIHx8ICdhdXRvJyk7XHJcbiAgICAgICAgICAgIHRoaXMudXRpbC5jaGFuZ2VUeHQoY29udGV4dFJlc2l6aW5nLnJlc2l6ZURpc3BsYXksIHRoaXMubGFuZy5kaWFsb2dCb3hbYWxpZ25dICsgJyAoJyArIGRpc3BsYXlYICsgZGlzcGxheVkgKyAnKScpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVzaXppbmcgZGlzcGxheVxyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcucmVzaXplQnV0dG9uR3JvdXAuc3R5bGUuZGlzcGxheSA9IGNvbnRleHRQbHVnaW4uX3Jlc2l6aW5nID8gJycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZURvdFNob3cgPSBjb250ZXh0UGx1Z2luLl9yZXNpemluZyAmJiAhY29udGV4dFBsdWdpbi5fcmVzaXplRG90SGlkZSAmJiAhY29udGV4dFBsdWdpbi5fb25seVBlcmNlbnRhZ2UgPyAnZmxleCcgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZUhhbmRsZXMgPSBjb250ZXh0UmVzaXppbmcucmVzaXplSGFuZGxlcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlc2l6ZUhhbmRsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc2l6ZUhhbmRsZXNbaV0uc3R5bGUuZGlzcGxheSA9IHJlc2l6ZURvdFNob3c7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLl9yZXNpemluZykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb25zID0gY29udGV4dFJlc2l6aW5nLnJvdGF0aW9uQnV0dG9ucztcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uc1swXS5zdHlsZS5kaXNwbGF5ID0gcm90YXRpb25zWzFdLnN0eWxlLmRpc3BsYXkgPSBjb250ZXh0UGx1Z2luLl9yb3RhdGlvbiA/ICcnIDogJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhbGlnbiBpY29uXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGx1Z2luLl9hbGlnbkhpZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5hbGlnbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLmFsaWduQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWduTGlzdCA9IGNvbnRleHRSZXNpemluZy5hbGlnbk1lbnVMaXN0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZUVsZW1lbnQoY29udGV4dFJlc2l6aW5nLmFsaWduQnV0dG9uLmZpcnN0RWxlbWVudENoaWxkLCBjb250ZXh0UmVzaXppbmcuYWxpZ25JY29uc1thbGlnbl0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFsaWduTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGlnbkxpc3RbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgPT09IGFsaWduKSB0aGlzLnV0aWwuYWRkQ2xhc3MoYWxpZ25MaXN0W2ldLCAnb24nKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhhbGlnbkxpc3RbaV0sICdvbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBwZXJjZW50YWdlIGFjdGl2ZVxyXG4gICAgICAgICAgICBjb25zdCBwQnV0dG9ucyA9IGNvbnRleHRSZXNpemluZy5wZXJjZW50YWdlQnV0dG9ucztcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAvJSQvLnRlc3QodGFyZ2V0RWxlbWVudC5zdHlsZS53aWR0aCkgJiYgLyUkLy50ZXN0KGNvbnRhaW5lci5zdHlsZS53aWR0aCkgPyAodGhpcy51dGlsLmdldE51bWJlcihjb250YWluZXIuc3R5bGUud2lkdGgsIDApIC8gMTAwKSArICcnIDogJycgO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcEJ1dHRvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChwQnV0dG9uc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MocEJ1dHRvbnNbaV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHBCdXR0b25zW2ldLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGNhcHRpb24gZGlzcGxheSwgYWN0aXZlXHJcbiAgICAgICAgICAgIGlmICghY29udGV4dFBsdWdpbi5fY2FwdGlvblNob3cpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5jYXB0aW9uQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuY2FwdGlvbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51dGlsLmdldENoaWxkRWxlbWVudCh0YXJnZXRFbGVtZW50LnBhcmVudE5vZGUsICdmaWdjYXB0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoY29udGV4dFJlc2l6aW5nLmNhcHRpb25CdXR0b24sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGx1Z2luLl9jYXB0aW9uQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0UmVzaXppbmcuY2FwdGlvbkJ1dHRvbiwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQbHVnaW4uX2NhcHRpb25DaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlc2l6ZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFkZE9mZnNldCA9IHtsZWZ0OiAwLCB0b3A6IDUwfTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGFkZE9mZnNldC5sZWZ0IC09IHRoaXMuY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5wYXJlbnRFbGVtZW50Lm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgICAgICBhZGRPZmZzZXQudG9wIC09IHRoaXMuY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5wYXJlbnRFbGVtZW50Lm9mZnNldFRvcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRDb250cm9sbGVyUG9zaXRpb24oY29udGV4dFJlc2l6aW5nLnJlc2l6ZUJ1dHRvbiwgcmVzaXplQ29udGFpbmVyLCAnYm90dG9tJywgYWRkT2Zmc2V0KTtcclxuICAgICAgICAgICAgY29uc3Qgb25Db250cm9sc09mZiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zZXREaXNhYmxlZEJ1dHRvbnMuY2FsbCh0aGlzLnV0aWwsIGZhbHNlLCB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5fcmVzZXRDYWNoaW5nQnV0dG9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPbihyZXNpemVDb250YWluZXIsIGNvbnRleHRSZXNpemluZy5yZXNpemVCdXR0b24sIG9uQ29udHJvbHNPZmYuYmluZCh0aGlzKSwgdGFyZ2V0RWxlbWVudCwgcGx1Z2luKTtcclxuICAgICAgICAgICAgdGhpcy51dGlsLnNldERpc2FibGVkQnV0dG9ucyh0cnVlLCB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcmVzaXplX3cgPSB3O1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZV9oID0gaDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpblNpemUgPSAodGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ29yaWdpbi1zaXplJykgfHwgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fb3JpZ2luX3cgPSBvcmlnaW5TaXplWzBdIHx8IHRhcmdldEVsZW1lbnQubmF0dXJhbFdpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX29yaWdpbl9oID0gb3JpZ2luU2l6ZVsxXSB8fCB0YXJnZXRFbGVtZW50Lm5hdHVyYWxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdzogdyxcclxuICAgICAgICAgICAgICAgIGg6IGgsXHJcbiAgICAgICAgICAgICAgICB0OiB0LFxyXG4gICAgICAgICAgICAgICAgbDogbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jbG9zZUFsaWduTWVudTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gYWxpZ24gc3VibWVudSBvZiBtb2R1bGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBvcGVuQWxpZ25NZW51OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsaWduQnV0dG9uID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduQnV0dG9uO1xyXG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MoYWxpZ25CdXR0b24sICdvbicpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQucmVzaXppbmcuYWxpZ25NZW51LnN0eWxlLnRvcCA9IChhbGlnbkJ1dHRvbi5vZmZzZXRUb3AgKyBhbGlnbkJ1dHRvbi5vZmZzZXRIZWlnaHQpICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduTWVudS5zdHlsZS5sZWZ0ID0gKGFsaWduQnV0dG9uLm9mZnNldExlZnQgLSBhbGlnbkJ1dHRvbi5vZmZzZXRXaWR0aCAvIDIpICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduTWVudS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fY2xvc2VBbGlnbk1lbnUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGhpcy5jb250ZXh0LnJlc2l6aW5nLmFsaWduQnV0dG9uLCAnb24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5hbGlnbk1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jRXZlbnQoJ2NsaWNrJywgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9jbG9zZUFsaWduTWVudSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuX2Nsb3NlQWxpZ25NZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGREb2NFdmVudCgnY2xpY2snLCB0aGlzLnBsdWdpbnMucmVzaXppbmcuX2Nsb3NlQWxpZ25NZW51KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xpY2sgZXZlbnQgb2YgcmVzaXppbmcgdG9vbGJhclxyXG4gICAgICAgICAqIFBlcmZvcm1zIHRoZSBhY3Rpb24gb2YgdGhlIGNsaWNrZWQgdG9vbGJhciBidXR0b24uXHJcbiAgICAgICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlIEV2ZW50IG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uQ2xpY2tfcmVzaXplQnV0dG9uOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSB8fCB0YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCB0YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbk5hbWUgPSB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW47XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250ZXh0ID0gdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0RWwgPSBjdXJyZW50Q29udGV4dC5fZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudE1vZHVsZSA9IHRoaXMucGx1Z2luc1twbHVnaW5OYW1lXTtcclxuXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9jbG9zZUFsaWduTWVudSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9jbG9zZUFsaWduTWVudSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdvbmFsaWduJykgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2F1dG8nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5yZXNldFRyYW5zZm9ybS5jYWxsKHRoaXMsIGNvbnRleHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRBdXRvU2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGNvbnRleHRFbCwgcGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwZXJjZW50JzpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGVyY2VudFkgPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGN1cnJlbnRDb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gY29udGV4dEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wZXJjZW50YWdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50YWdlKSBwZXJjZW50WSA9IHBlcmNlbnRhZ2Uuc3BsaXQoJywnKVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5yZXNldFRyYW5zZm9ybS5jYWxsKHRoaXMsIGNvbnRleHRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRQZXJjZW50U2l6ZS5jYWxsKHRoaXMsICh2YWx1ZSAqIDEwMCksICh0aGlzLnV0aWwuZ2V0TnVtYmVyKHBlcmNlbnRZLCAwKSA9PT0gbnVsbCB8fCAhLyUkLy50ZXN0KHBlcmNlbnRZKSkgPyAnJyA6IHBlcmNlbnRZKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudChjb250ZXh0RWwsIHBsdWdpbk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlycm9yJzpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gY29udGV4dEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnKSB8fCAnMCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHggPSBjb250ZXh0RWwuZ2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVgnKSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IGNvbnRleHRFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm90YXRlWScpIHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID09PSAnaCcgJiYgIXRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWwpIHx8ICh2YWx1ZSA9PT0gJ3YnICYmIHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSB5ID8gJycgOiAnMTgwJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0geCA/ICcnIDogJzE4MCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0RWwuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVgnLCB4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0RWwuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVknLCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLl9zZXRUcmFuc0Zvcm0oY29udGV4dEVsLCByLCB4LCB5KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dFJlc2l6aW5nID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsb3BlID0gKGNvbnRleHRFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm90YXRlJykgKiAxKSArICh2YWx1ZSAqIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZyA9IHRoaXMuX3cuTWF0aC5hYnMoc2xvcGUpID49IDM2MCA/IDAgOiBzbG9wZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dEVsLnNldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnLCBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcm90YXRlVmVydGljYWwgPSAvXig5MHwyNzApJC8udGVzdCh0aGlzLl93Lk1hdGguYWJzKGRlZykudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnNldFRyYW5zZm9ybVNpemUuY2FsbCh0aGlzLCBjb250ZXh0RWwsIG51bGwsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudChjb250ZXh0RWwsIHBsdWdpbk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb25hbGlnbic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLm9wZW5BbGlnbk1lbnUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbic6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxpZ25WYWx1ZSA9IHZhbHVlID09PSAnYmFzaWMnID8gJ25vbmUnIDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRBbGlnbi5jYWxsKHRoaXMsIGFsaWduVmFsdWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29tcG9uZW50KGNvbnRleHRFbCwgcGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjYXB0aW9uJzpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXB0aW9uID0gIWN1cnJlbnRDb250ZXh0Ll9jYXB0aW9uQ2hlY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kdWxlLm9wZW5Nb2RpZnkuY2FsbCh0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dC5fY2FwdGlvbkNoZWNrZWQgPSBjdXJyZW50Q29udGV4dC5jYXB0aW9uQ2hlY2tFbC5jaGVja2VkID0gY2FwdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS51cGRhdGVfaW1hZ2UuY2FsbCh0aGlzLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FwdGlvblRleHQgPSB0aGlzLnV0aWwuZ2V0Q2hpbGRFbGVtZW50KGN1cnJlbnRDb250ZXh0Ll9jYXB0aW9uLCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQubm9kZVR5cGUgPT09IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYXB0aW9uVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbnRleHQuX2NhcHRpb24uZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoY2FwdGlvblRleHQsIDAsIGNhcHRpb25UZXh0LCBjYXB0aW9uVGV4dC50ZXh0Q29udGVudC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoY29udGV4dEVsLCBwbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5vcGVuTW9kaWZ5LmNhbGwodGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JldmVydCc6XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5zZXRPcmlnaW5TaXplLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoY29udGV4dEVsLCBwbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZS5vcGVuTW9kaWZ5LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kdWxlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemUgdGhlIHRyYW5zZm9ybSBzdHlsZSAocm90YXRpb24pIG9mIHRoZSBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBzaXplID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW4nKSB8fCAnJykuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9ICcnO1xyXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xyXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcnO1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGUnLCAnJyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVgnLCAnJyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVknLCAnJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5zZXRTaXplLmNhbGwodGhpcywgc2l6ZVswXSA/IHNpemVbMF0gOiAnYXV0bycsIHNpemVbMV0gPyBzaXplWzFdIDogJycsIHRydWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgdGhlIHRyYW5zZm9ybSBzdHlsZSAocm90YXRpb24pIG9mIHRoZSBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfG51bGx9IHdpZHRoIEVsZW1lbnQncyB3aWR0aCBzaXplXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ8bnVsbH0gaGVpZ2h0IEVsZW1lbnQncyBoZWlnaHQgc2l6ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFRyYW5zZm9ybVNpemU6IGZ1bmN0aW9uIChlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGxldCBwZXJjZW50YWdlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGVyY2VudGFnZScpO1xyXG4gICAgICAgICAgICBjb25zdCBpc1ZlcnRpY2FsID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbDtcclxuICAgICAgICAgICAgY29uc3QgZGVnID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm90YXRlJykgKiAxO1xyXG4gICAgICAgICAgICBsZXQgdHJhbnNPcmlnaW4gPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChwZXJjZW50YWdlICYmICFpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlID0gcGVyY2VudGFnZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBlcmNlbnRhZ2VbMF0gPT09ICdhdXRvJyAmJiBwZXJjZW50YWdlWzFdID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5zZXRBdXRvU2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5zZXRQZXJjZW50U2l6ZS5jYWxsKHRoaXMsIHBlcmNlbnRhZ2VbMF0sIHBlcmNlbnRhZ2VbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY292ZXIgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCAnRklHVVJFJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VyA9IHdpZHRoIHx8IGVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRIID0gaGVpZ2h0IHx8IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdyA9IChpc1ZlcnRpY2FsID8gb2Zmc2V0SCA6IG9mZnNldFcpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGggPSAoaXNWZXJ0aWNhbCA/IG9mZnNldFcgOiBvZmZzZXRIKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zW3RoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbl0uY2FuY2VsUGVyY2VudEF0dHIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luc1t0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW5dLnNldFNpemUuY2FsbCh0aGlzLCBvZmZzZXRXICsgJ3B4Jywgb2Zmc2V0SCArICdweCcsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLndpZHRoID0gdztcclxuICAgICAgICAgICAgICAgIGNvdmVyLnN0eWxlLmhlaWdodCA9ICghIXRoaXMuY29udGV4dFt0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW5dLl9jYXB0aW9uID8gJycgOiBoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc1cgPSAob2Zmc2V0VyAvIDIpICsgJ3B4ICcgKyAob2Zmc2V0VyAvIDIpICsgJ3B4IDAnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc0ggPSAob2Zmc2V0SCAvIDIpICsgJ3B4ICcgKyAob2Zmc2V0SCAvIDIpICsgJ3B4IDAnO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zT3JpZ2luID0gZGVnID09PSA5MCB8fCBkZWcgPT09IC0yNzAgPyB0cmFuc0ggOiB0cmFuc1c7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gdHJhbnNPcmlnaW47XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5yZXNpemluZy5fc2V0VHJhbnNGb3JtKGVsZW1lbnQsIGRlZy50b1N0cmluZygpLCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1yb3RhdGVYJykgfHwgJycsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXJvdGF0ZVknKSB8fCAnJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkgZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9ICdub25lJztcclxuICAgICAgICAgICAgZWxzZSBlbGVtZW50LnN0eWxlLm1heFdpZHRoID0gJyc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMucmVzaXppbmcuc2V0Q2FwdGlvblBvc2l0aW9uLmNhbGwodGhpcywgZWxlbWVudCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldFRyYW5zRm9ybTogZnVuY3Rpb24gKGVsZW1lbnQsIHIsIHgsIHkpIHtcclxuICAgICAgICAgICAgbGV0IHdpZHRoID0gKGVsZW1lbnQub2Zmc2V0V2lkdGggLSBlbGVtZW50Lm9mZnNldEhlaWdodCkgKiAoLy0vLnRlc3QocikgPyAxIDogLTEpO1xyXG4gICAgICAgICAgICBsZXQgdHJhbnNsYXRlID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoL1sxLTldLy50ZXN0KHIpICYmICh4IHx8IHkpKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGUgPSB4ID8gJ1knIDogJ1gnO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzkwJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlID0geCAmJiB5ID8gJ1gnIDogeSA/IHRyYW5zbGF0ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcyNzAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAqPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlID0geCAmJiB5ID8gJ1knIDogeCA/IHRyYW5zbGF0ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICctOTAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUgPSB4ICYmIHkgPyAnWScgOiB4ID8gdHJhbnNsYXRlIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJy0yNzAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAqPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlID0geCAmJiB5ID8gJ1gnIDogeSA/IHRyYW5zbGF0ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHIgJSAxODAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubWF4V2lkdGggPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKCcgKyByICsgJ2RlZyknICsgKHggPyAnIHJvdGF0ZVgoJyArIHggKyAnZGVnKScgOiAnJykgKyAoeSA/ICcgcm90YXRlWSgnICsgeSArICdkZWcpJyA6ICcnKSArICh0cmFuc2xhdGUgPyAnIHRyYW5zbGF0ZScgKyB0cmFuc2xhdGUgKyAnKCcgKyB3aWR0aCArICdweCknIDogJycpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgcG9zaXRpb24gb2YgdGhlIGNhcHRpb24gaXMgc2V0IGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRhcmdldCBlbGVtZW50IChub3QgY2FwdGlvbiBlbGVtZW50KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENhcHRpb25Qb3NpdGlvbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlnY2FwdGlvbiA9IHRoaXMudXRpbC5nZXRDaGlsZEVsZW1lbnQodGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgJ0ZJR1VSRScpLCAnRklHQ0FQVElPTicpO1xyXG4gICAgICAgICAgICBpZiAoZmlnY2FwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZmlnY2FwdGlvbi5zdHlsZS5tYXJnaW5Ub3AgPSAodGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yb3RhdGVWZXJ0aWNhbCA/IGVsZW1lbnQub2Zmc2V0V2lkdGggLSBlbGVtZW50Lm9mZnNldEhlaWdodCA6IDApICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBNb3VzZSBkb3duIGV2ZW50IG9mIHJlc2l6ZSBoYW5kbGVzXHJcbiAgICAgICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlIEV2ZW50IG9iamVjdCBcclxuICAgICAgICAgKi9cclxuICAgICAgICBvbk1vdXNlRG93bl9yZXNpemVfaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0UmVzaXppbmcgPSB0aGlzLmNvbnRleHQucmVzaXppbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGNvbnRleHRSZXNpemluZy5fcmVzaXplX2RpcmVjdGlvbiA9IGUudGFyZ2V0LmNsYXNzTGlzdFswXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcmVzaXplQ2xpZW50WCA9IGUuY2xpZW50WDtcclxuICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLl9yZXNpemVDbGllbnRZID0gZS5jbGllbnRZO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZWxlbWVudC5yZXNpemVCYWNrZ3JvdW5kLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcucmVzaXplQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUuZmxvYXQgPSAvbC8udGVzdChkaXJlY3Rpb24pID8gJ3JpZ2h0JyA6IC9yLy50ZXN0KGRpcmVjdGlvbikgPyAnbGVmdCcgOiAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjbG9zdXJlRnVuY19iaW5kID0gZnVuY3Rpb24gY2xvc3VyZUZ1bmMoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nICYmIGUua2V5Q29kZSAhPT0gMjcpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBjb250ZXh0UmVzaXppbmcuX2lzQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFJlc2l6aW5nLl9pc0NoYW5nZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jRXZlbnQoJ21vdXNlbW92ZScsIHJlc2l6aW5nX2VsZW1lbnRfYmluZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdtb3VzZXVwJywgY2xvc3VyZUZ1bmNfYmluZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdrZXlkb3duJywgY2xvc3VyZUZ1bmNfYmluZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5lbGVtZW50LnJlc2l6ZUJhY2tncm91bmQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnNbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5pbml0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgcmVzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLmNhbmNlbF9jb250cm9sbGVyX3Jlc2l6ZS5jYWxsKHRoaXMsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UpIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzaXppbmdfZWxlbWVudF9iaW5kID0gdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnJlc2l6aW5nX2VsZW1lbnQuYmluZCh0aGlzLCBjb250ZXh0UmVzaXppbmcsIGRpcmVjdGlvbiwgdGhpcy5jb250ZXh0W2NvbnRleHRSZXNpemluZy5fcmVzaXplX3BsdWdpbl0pO1xyXG4gICAgICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdtb3VzZW1vdmUnLCByZXNpemluZ19lbGVtZW50X2JpbmQpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdtb3VzZXVwJywgY2xvc3VyZUZ1bmNfYmluZCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRG9jRXZlbnQoJ2tleWRvd24nLCBjbG9zdXJlRnVuY19iaW5kKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gTW91c2UgbW92ZSBldmVudCBhZnRlciBjYWxsIFwib25Nb3VzZURvd25fcmVzaXplX2hhbmRsZVwiIG9mIHJlc2l6ZSBoYW5kbGVzXHJcbiAgICAgICAgICogVGhlIHNpemUgb2YgdGhlIG1vZHVsZSdzIFwiZGl2XCIgaXMgYWRqdXN0ZWQgYWNjb3JkaW5nIHRvIHRoZSBtb3VzZSBtb3ZlIGV2ZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0UmVzaXppbmcgXCJjb3JlLmNvbnRleHQucmVzaXppbmdcIiBvYmplY3QgKGJpbmRpbmcgYXJndW1lbnQpXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvbiBEaXJlY3Rpb24gKFwidGxcIiwgXCJ0clwiLCBcImJsXCIsIFwiYnJcIiwgXCJsd1wiLCBcInRoXCIsIFwicndcIiwgXCJiaFwiKSAoYmluZGluZyBhcmd1bWVudClcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIFwiY29yZS5jb250ZXh0W2N1cnJlbnRQbHVnaW5dXCIgb2JqZWN0IChiaW5kaW5nIGFyZ3VtZW50KVxyXG4gICAgICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZSBFdmVudCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXNpemluZ19lbGVtZW50OiBmdW5jdGlvbiAoY29udGV4dFJlc2l6aW5nLCBkaXJlY3Rpb24sIHBsdWdpbiwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGllbnRYID0gZS5jbGllbnRYO1xyXG4gICAgICAgICAgICBjb25zdCBjbGllbnRZID0gZS5jbGllbnRZO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc3VsdFcgPSBwbHVnaW4uX2VsZW1lbnRfdztcclxuICAgICAgICAgICAgbGV0IHJlc3VsdEggPSBwbHVnaW4uX2VsZW1lbnRfaDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHcgPSBwbHVnaW4uX2VsZW1lbnRfdyArICgvci8udGVzdChkaXJlY3Rpb24pID8gY2xpZW50WCAtIGNvbnRleHRSZXNpemluZy5fcmVzaXplQ2xpZW50WCA6IGNvbnRleHRSZXNpemluZy5fcmVzaXplQ2xpZW50WCAtIGNsaWVudFgpO1xyXG4gICAgICAgICAgICBjb25zdCBoID0gcGx1Z2luLl9lbGVtZW50X2ggKyAoL2IvLnRlc3QoZGlyZWN0aW9uKSA/IGNsaWVudFkgLSBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZUNsaWVudFkgOiBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZUNsaWVudFkgLSBjbGllbnRZKTtcclxuICAgICAgICAgICAgY29uc3Qgd2ggPSAoKHBsdWdpbi5fZWxlbWVudF9oIC8gcGx1Z2luLl9lbGVtZW50X3cpICogdyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoL3QvLnRlc3QoZGlyZWN0aW9uKSkgY29udGV4dFJlc2l6aW5nLnJlc2l6ZURpdi5zdHlsZS50b3AgPSAocGx1Z2luLl9lbGVtZW50X2ggLSAoL2gvLnRlc3QoZGlyZWN0aW9uKSA/IGggOiB3aCkpICsgJ3B4JztcclxuICAgICAgICAgICAgaWYgKC9sLy50ZXN0KGRpcmVjdGlvbikpIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUubGVmdCA9IChwbHVnaW4uX2VsZW1lbnRfdyAtIHcpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIGlmICgvcnxsLy50ZXN0KGRpcmVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUud2lkdGggPSB3ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIHJlc3VsdFcgPSB3O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoL14odHxiKVteaF0kLy50ZXN0KGRpcmVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5yZXNpemVEaXYuc3R5bGUuaGVpZ2h0ID0gd2ggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SCA9IHdoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKC9eKHR8YiloJC8udGVzdChkaXJlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0UmVzaXppbmcucmVzaXplRGl2LnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SCA9IGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHRSZXNpemluZy5fcmVzaXplX3cgPSByZXN1bHRXO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX3Jlc2l6ZV9oID0gcmVzdWx0SDtcclxuICAgICAgICAgICAgdGhpcy51dGlsLmNoYW5nZVR4dChjb250ZXh0UmVzaXppbmcucmVzaXplRGlzcGxheSwgdGhpcy5fdy5NYXRoLnJvdW5kKHJlc3VsdFcpICsgJyB4ICcgKyB0aGlzLl93Lk1hdGgucm91bmQocmVzdWx0SCkpO1xyXG4gICAgICAgICAgICBjb250ZXh0UmVzaXppbmcuX2lzQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzaXplIHRoZSBlbGVtZW50IHRvIHRoZSBzaXplIG9mIHRoZSBcImRpdlwiIGFkanVzdGVkIGluIHRoZSBcInJlc2l6aW5nX2VsZW1lbnRcIiBtZXRob2QuXHJcbiAgICAgICAgICogQ2FsbGVkIGF0IHRoZSBtb3VzZS11cCBldmVudCByZWdpc3RlcmVkIGluIFwib25Nb3VzZURvd25fcmVzaXplX2hhbmRsZVwiLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb24gRGlyZWN0aW9uIChcInRsXCIsIFwidHJcIiwgXCJibFwiLCBcImJyXCIsIFwibHdcIiwgXCJ0aFwiLCBcInJ3XCIsIFwiYmhcIilcclxuICAgICAgICAgKi9cclxuICAgICAgICBjYW5jZWxfY29udHJvbGxlcl9yZXNpemU6IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuY29udGV4dC5yZXNpemluZy5fcm90YXRlVmVydGljYWw7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmVsZW1lbnQucmVzaXplQmFja2dyb3VuZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgbGV0IHcgPSB0aGlzLl93Lk1hdGgucm91bmQoaXNWZXJ0aWNhbCA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX2ggOiB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV93KTtcclxuICAgICAgICAgICAgbGV0IGggPSB0aGlzLl93Lk1hdGgucm91bmQoaXNWZXJ0aWNhbCA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3cgOiB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9oKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghaXNWZXJ0aWNhbCAmJiAhLyUkLy50ZXN0KHcpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gMTY7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW1pdCA9IHRoaXMuY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5jbGllbnRXaWR0aCAtIChwYWRkaW5nICogMikgLSAyO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuZ2V0TnVtYmVyKHcsIDApID4gbGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoID0gdGhpcy5fdy5NYXRoLnJvdW5kKChoIC8gdykgKiBsaW1pdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdyA9IGxpbWl0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW5OYW1lID0gdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbcGx1Z2luTmFtZV0uc2V0U2l6ZS5jYWxsKHRoaXMsIHcsIGgsIGZhbHNlLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkgdGhpcy5wbHVnaW5zLnJlc2l6aW5nLnNldFRyYW5zZm9ybVNpemUuY2FsbCh0aGlzLCB0aGlzLmNvbnRleHRbdGhpcy5jb250ZXh0LnJlc2l6aW5nLl9yZXNpemVfcGx1Z2luXS5fZWxlbWVudCwgdywgaCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdENvbXBvbmVudCh0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0uX2VsZW1lbnQsIHBsdWdpbk5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBub0dsb2JhbCA9PT0gdHlwZW9mIHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICghd2luZG93LlNVTkVESVRPUl9NT0RVTEVTKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdTVU5FRElUT1JfTU9EVUxFUycsIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVU5FRElUT1JfTU9EVUxFUywgJ3Jlc2l6aW5nJywge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZXNpemluZ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXNpemluZztcclxufSkpOyIsIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9NT0RVTEVTIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcclxuICAgIH1cclxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICh3aW5kb3csIG5vR2xvYmFsKSB7XHJcbiAgICBjb25zdCBmaWxlTWFuYWdlciA9IHtcclxuICAgICAgICBuYW1lOiAnZmlsZU1hbmFnZXInLFxyXG4gICAgICAgIF94bWxIdHRwOiBudWxsLFxyXG5cclxuICAgICAgICBfY2hlY2tNZWRpYUNvbXBvbmVudDogZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgICAgICBpZiAoL0lNRy9pLnRlc3QodGFnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEvRklHVVJFL2kudGVzdCh0YWcucGFyZW50RWxlbWVudC5ub2RlTmFtZSkgfHwgIS9GSUdVUkUvaS50ZXN0KHRhZy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBVcGxvYWQgdGhlIGZpbGUgdG8gdGhlIHNlcnZlci5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXBsb2FkVXJsIFVwbG9hZCBzZXJ2ZXIgdXJsXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gdXBsb2FkSGVhZGVyIFJlcXVlc3QgaGVhZGVyXHJcbiAgICAgICAgICogQHBhcmFtIHtGb3JtRGF0YX0gZm9ybURhdGEgRm9ybURhdGEgaW4gYm9keVxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gY2FsbEJhY2sgU3VjY2VzcyBjYWxsIGJhY2sgZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IGVycm9yQ2FsbEJhY2sgRXJyb3IgY2FsbCBiYWNrIGZ1bmN0aW9uXHJcbiAgICAgICAgICogQGV4YW1wbGUgdGhpcy5wbHVnaW5zLmZpbGVNYW5hZ2VyLnVwbG9hZC5jYWxsKHRoaXMsIGltYWdlVXBsb2FkVXJsLCB0aGlzLm9wdGlvbnMuaW1hZ2VVcGxvYWRIZWFkZXIsIGZvcm1EYXRhLCB0aGlzLnBsdWdpbnMuaW1hZ2UuY2FsbEJhY2tfaW1nVXBsb2FkLmJpbmQodGhpcywgaW5mbyksIHRoaXMuZnVuY3Rpb25zLm9uSW1hZ2VVcGxvYWRFcnJvcik7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXBsb2FkOiBmdW5jdGlvbiAodXBsb2FkVXJsLCB1cGxvYWRIZWFkZXIsIGZvcm1EYXRhLCBjYWxsQmFjaywgZXJyb3JDYWxsQmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQbHVnaW4gPSB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHhtbEh0dHAgPSBmaWxlUGx1Z2luLl94bWxIdHRwID0gdGhpcy51dGlsLmdldFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgICAgICAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZpbGVQbHVnaW4uX2NhbGxCYWNrVXBsb2FkLmJpbmQodGhpcywgeG1sSHR0cCwgY2FsbEJhY2ssIGVycm9yQ2FsbEJhY2spO1xyXG4gICAgICAgICAgICB4bWxIdHRwLm9wZW4oJ3Bvc3QnLCB1cGxvYWRVcmwsIHRydWUpO1xyXG4gICAgICAgICAgICBpZih1cGxvYWRIZWFkZXIgIT09IG51bGwgJiYgdHlwZW9mIHVwbG9hZEhlYWRlciA9PT0gJ29iamVjdCcgJiYgdGhpcy5fdy5PYmplY3Qua2V5cyh1cGxvYWRIZWFkZXIpLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBrZXkgaW4gdXBsb2FkSGVhZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICB4bWxIdHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB1cGxvYWRIZWFkZXJba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeG1sSHR0cC5zZW5kKGZvcm1EYXRhKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY2FsbEJhY2tVcGxvYWQ6IGZ1bmN0aW9uICh4bWxIdHRwLCBjYWxsQmFjaywgZXJyb3JDYWxsQmFjaykge1xyXG4gICAgICAgICAgICBpZiAoeG1sSHR0cC5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeG1sSHR0cC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxCYWNrKHhtbEh0dHApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuZmlsZU1hbmFnZXIudXBsb2FkLmNhbGxCYWNrLmZhaWxdIGNhdXNlIDogXCInICsgZS5tZXNzYWdlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBleGNlcHRpb25cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9ICF4bWxIdHRwLnJlc3BvbnNlVGV4dCA/IHhtbEh0dHAgOiBKU09OLnBhcnNlKHhtbEh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yQ2FsbEJhY2sgIT09ICdmdW5jdGlvbicgfHwgZXJyb3JDYWxsQmFjaygnJywgcmVzLCB0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSAnW1NVTkVESVRPUi5maWxlTWFuYWdlci51cGxvYWQuc2VydmVyRXhjZXB0aW9uXSBzdGF0dXM6ICcgKyB4bWxIdHRwLnN0YXR1cyArICcsIHJlc3BvbnNlOiAnICsgKHJlcy5lcnJvck1lc3NhZ2UgfHwgeG1sSHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZ1bmN0aW9ucy5ub3RpY2VPcGVuKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2hlY2tlIHRoZSBmaWxlJ3MgaW5mb3JtYXRpb24gYW5kIG1vZGlmeSB0aGUgdGFnIHRoYXQgZG9lcyBub3QgZml0IHRoZSBmb3JtYXQuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB0YWdOYW1lcyBUYWcgYXJyYXkgdG8gY2hlY2tcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHVwbG9hZEV2ZW50SGFuZGxlciBFdmVudCBoYW5kbGVyIHRvIHByb2Nlc3MgdXBkYXRlZCBmaWxlIGluZm8gYWZ0ZXIgY2hlY2tpbmcgKHVzZWQgaW4gXCJzZXRJbmZvXCIpXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZ5SGFuZGxlciBBIGZ1bmN0aW9uIHRvIG1vZGlmeSBhIHRhZyB0aGF0IGRvZXMgbm90IGZpdCB0aGUgZm9ybWF0IChBcmd1bWVudCB2YWx1ZTogVGFnIGVsZW1lbnQpXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXNpemluZyBUcnVlIGlmIHRoZSBwbHVnaW4gaXMgdXNpbmcgYSByZXNpemluZyBtb2R1bGVcclxuICAgICAgICAgKiBAZXhhbXBsZSBcclxuICAgICAgICAgKiBjb25zdCBtb2RpZnlIYW5kbGVyID0gZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgICAqICAgICAgaW1hZ2VQbHVnaW4ub25Nb2RpZnlNb2RlLmNhbGwodGhpcywgdGFnLCBudWxsKTtcclxuICAgICAgICAgKiAgICAgIGltYWdlUGx1Z2luLm9wZW5Nb2RpZnkuY2FsbCh0aGlzLCB0cnVlKTtcclxuICAgICAgICAgKiAgICAgIGltYWdlUGx1Z2luLnVwZGF0ZV9pbWFnZS5jYWxsKHRoaXMsIHRydWUsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgKiAgfS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAqICB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXIuY2hlY2tJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgWydpbWcnXSwgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgbW9kaWZ5SGFuZGxlciwgdHJ1ZSk7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hlY2tJbmZvOiBmdW5jdGlvbiAocGx1Z2luTmFtZSwgdGFnTmFtZXMsIHVwbG9hZEV2ZW50SGFuZGxlciwgbW9kaWZ5SGFuZGxlciwgcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgbGV0IHRhZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRhZ05hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdzID0gdGFncy5jb25jYXQoW10uc2xpY2UuY2FsbCh0aGlzLmNvbnRleHQuZWxlbWVudC53eXNpd3lnLnF1ZXJ5U2VsZWN0b3JBbGwodGFnTmFtZXNbaV0gKyAnOm5vdChbZGF0YS1zZS1lbWJlZD1cInRydWVcIl0pJykpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZU1hbmFnZXJQbHVnaW4gPSB0aGlzLnBsdWdpbnMuZmlsZU1hbmFnZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV07XHJcbiAgICAgICAgICAgIGNvbnN0IGluZm9MaXN0ID0gY29udGV4dC5faW5mb0xpc3Q7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldEZpbGVJbmZvID0gZmlsZU1hbmFnZXJQbHVnaW4uc2V0SW5mby5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID09PSBpbmZvTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29tcG9uZW50c0luZm9SZXNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0YWdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEZpbGVJbmZvKHBsdWdpbk5hbWUsIHRhZ3NbaV0sIHVwbG9hZEV2ZW50SGFuZGxlciwgbnVsbCwgcmVzaXppbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5mb1VwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbmZvTGlzdC5sZW5ndGgsIGluZm87IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvID0gaW5mb0xpc3RbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdzLmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gaW5mby5zcmMgPT09IHQuc3JjICYmIGluZm8uaW5kZXgudG9TdHJpbmcoKSA9PT0gdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTsgfSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3NcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluZm9VcGRhdGUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2hlY2tcclxuICAgICAgICAgICAgY29uc3QgX3Jlc2l6ZV9wbHVnaW4gPSByZXNpemluZyA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA6ICcnO1xyXG4gICAgICAgICAgICBpZiAocmVzaXppbmcpIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9IHBsdWdpbk5hbWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUYWdzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGluZm9JbmRleCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaW5mb0xpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGluZm9JbmRleFtpXSA9IGluZm9MaXN0W2ldLmluZGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQuX191cGRhdGVUYWdzID0gdGFncztcclxuXHJcbiAgICAgICAgICAgIHdoaWxlICh0YWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhZyA9IHRhZ3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQodGFnLCB0aGlzLnV0aWwuaXNNZWRpYUNvbXBvbmVudCkgfHwgIWZpbGVNYW5hZ2VyUGx1Z2luLl9jaGVja01lZGlhQ29tcG9uZW50KHRhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGFncy5wdXNoKGNvbnRleHQuX2luZm9JbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZ5SGFuZGxlcih0YWcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGFnLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpIHx8IGluZm9JbmRleC5pbmRleE9mKHRhZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSAqIDEpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYWdzLnB1c2goY29udGV4dC5faW5mb0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB0YWcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RmlsZUluZm8ocGx1Z2luTmFtZSwgdGFnLCB1cGxvYWRFdmVudEhhbmRsZXIsIG51bGwsIHJlc2l6aW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRhZ3MucHVzaCh0YWcuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykgKiAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGRhdGFJbmRleDsgaSA8IGluZm9MaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhSW5kZXggPSBpbmZvTGlzdFtpXS5pbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VGFncy5pbmRleE9mKGRhdGFJbmRleCkgPiAtMSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaW5mb0xpc3Quc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGxvYWRFdmVudEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHVwbG9hZEV2ZW50SGFuZGxlcihudWxsLCBkYXRhSW5kZXgsICdkZWxldGUnLCBudWxsLCAwLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlc2l6aW5nKSB0aGlzLmNvbnRleHQucmVzaXppbmcuX3Jlc2l6ZV9wbHVnaW4gPSBfcmVzaXplX3BsdWdpbjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIGluZm8gb2JqZWN0IG9mIGZpbGUgYW5kIGFkZCBpdCB0byBcIl9pbmZvTGlzdFwiICh0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0uX2luZm9MaXN0W10pXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWUgXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gdXBsb2FkRXZlbnRIYW5kbGVyIEV2ZW50IGhhbmRsZXIgdG8gcHJvY2VzcyB1cGRhdGVkIGZpbGUgaW5mbyAoY3JlYXRlZCBpbiBzZXRJbmZvKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IGZpbGUgXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXNpemluZyBUcnVlIGlmIHRoZSBwbHVnaW4gaXMgdXNpbmcgYSByZXNpemluZyBtb2R1bGVcclxuICAgICAgICAgKiBAZXhhbXBsZSBcclxuICAgICAgICAgKiB1cGxvYWRDYWxsQmFjayB7Li4gZmlsZSA9IHsgbmFtZTogZmlsZUxpc3RbaV0ubmFtZSwgc2l6ZTogZmlsZUxpc3RbaV0uc2l6ZSB9O1xyXG4gICAgICAgICAqIHRoaXMucGx1Z2lucy5maWxlTWFuYWdlci5zZXRJbmZvLmNhbGwodGhpcywgJ2ltYWdlJywgb0ltZywgdGhpcy5mdW5jdGlvbnMub25JbWFnZVVwbG9hZCwgZmlsZSwgdHJ1ZSk7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0SW5mbzogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIGVsZW1lbnQsIHVwbG9hZEV2ZW50SGFuZGxlciwgZmlsZSwgcmVzaXppbmcpIHtcclxuICAgICAgICAgICAgY29uc3QgX3Jlc2l6ZV9wbHVnaW4gPSByZXNpemluZyA/IHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA6ICcnO1xyXG4gICAgICAgICAgICBpZiAocmVzaXppbmcpIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9IHBsdWdpbk5hbWU7XHJcbiAgICBcclxuICAgICAgICAgICAgY29uc3QgcGxndWluID0gdGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCBpbmZvTGlzdCA9IGNvbnRleHQuX2luZm9MaXN0O1xyXG4gICAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcclxuICAgICAgICAgICAgbGV0IGluZm8gPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgc3RhdGUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmICghZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtbmFtZScpIHx8ICh0eXBlb2YgZWxlbWVudC5zcmMgPT09ICdzdHJpbmcnID8gZWxlbWVudC5zcmMuc3BsaXQoJy8nKS5wb3AoKSA6ICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAnc2l6ZSc6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtc2l6ZScpIHx8IDBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAvLyBjcmVhdGVcclxuICAgICAgICAgICAgaWYgKCFkYXRhSW5kZXggfHwgdGhpcy5fY29tcG9uZW50c0luZm9Jbml0KSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICdjcmVhdGUnO1xyXG4gICAgICAgICAgICAgICAgZGF0YUluZGV4ID0gY29udGV4dC5faW5mb0luZGV4Kys7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JywgZGF0YUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWZpbGUtbmFtZScsIGZpbGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1maWxlLXNpemUnLCBmaWxlLnNpemUpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyYzogZWxlbWVudC5zcmMsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGRhdGFJbmRleCAqIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IGZpbGUuc2l6ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaW5mb0xpc3QucHVzaChpbmZvKTtcclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gdXBkYXRlXHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICd1cGRhdGUnO1xyXG4gICAgICAgICAgICAgICAgZGF0YUluZGV4ICo9IDE7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBpbmZvTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhSW5kZXggPT09IGluZm9MaXN0W2ldLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8gPSBpbmZvTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoIWluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhSW5kZXggPSBjb250ZXh0Ll9pbmZvSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICBpbmZvID0geyBpbmRleDogZGF0YUluZGV4IH07XHJcbiAgICAgICAgICAgICAgICAgICAgaW5mb0xpc3QucHVzaChpbmZvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaW5mby5zcmMgPSBlbGVtZW50LnNyYztcclxuICAgICAgICAgICAgICAgIGluZm8ubmFtZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1maWxlLW5hbWVcIik7XHJcbiAgICAgICAgICAgICAgICBpbmZvLnNpemUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZmlsZS1zaXplXCIpICogMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIG1ldGhvZCBiaW5kXHJcbiAgICAgICAgICAgIGluZm8uZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGluZm8uZGVsZXRlID0gcGxndWluLmRlc3Ryb3kuYmluZCh0aGlzLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgaW5mby5zZWxlY3QgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3cuc2V0VGltZW91dChwbGd1aW4uc2VsZWN0LmJpbmQodGhpcywgZWxlbWVudCkpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcywgZWxlbWVudCk7XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKHJlc2l6aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdvcmlnaW4tc2l6ZScpICYmIGVsZW1lbnQubmF0dXJhbFdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ29yaWdpbi1zaXplJywgZWxlbWVudC5uYXR1cmFsV2lkdGggKyAnLCcgKyBlbGVtZW50Lm5hdHVyYWxIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdGhpcy51dGlsLmlzTWVkaWFDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gdGhpcy51dGlsLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgJ0ZJR1VSRScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHcgPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWC5jYWxsKHRoaXMsIGNvbnRleHQsIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSB0aGlzLnBsdWdpbnMucmVzaXppbmcuX21vZHVsZV9nZXRTaXplWS5jYWxsKHRoaXMsIGNvbnRleHQsIGVsZW1lbnQsIGNvdmVyLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbicsIHcgKyAnLCcgKyBoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zaXplJywgdyArICcsJyArIGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LnN0eWxlLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luJykgfHwgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxndWluLm9uTW9kaWZ5TW9kZS5jYWxsKHRoaXMsIGVsZW1lbnQsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsZ3Vpbi5hcHBseVNpemUuY2FsbCh0aGlzLCBzaXplWzBdLCBzaXplWzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5yZXNpemluZy5fcmVzaXplX3BsdWdpbiA9IF9yZXNpemVfcGx1Z2luO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHVwbG9hZEV2ZW50SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykgdXBsb2FkRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGRhdGFJbmRleCwgc3RhdGUsIGluZm8sIC0tY29udGV4dC5fdXBsb2FkRmlsZUxlbmd0aCA8IDAgPyAwIDogY29udGV4dC5fdXBsb2FkRmlsZUxlbmd0aCwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERlbGV0ZSBpbmZvIG9iamVjdCBhdCBcIl9pbmZvTGlzdFwiXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbk5hbWUgUGx1Z2luIG5hbWUgXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IGluZGV4IG9mIGluZm8gb2JqZWN0ICh0aGlzLmNvbnRleHRbcGx1Z2luTmFtZV0uX2luZm9MaXN0W10uaW5kZXgpXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfSB1cGxvYWRFdmVudEhhbmRsZXIgRXZlbnQgaGFuZGxlciB0byBwcm9jZXNzIHVwZGF0ZWQgZmlsZSBpbmZvIChjcmVhdGVkIGluIHNldEluZm8pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVsZXRlSW5mbzogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIGluZGV4LCB1cGxvYWRFdmVudEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZm9MaXN0ID0gdGhpcy5jb250ZXh0W3BsdWdpbk5hbWVdLl9pbmZvTGlzdDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGluZm9MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBpbmZvTGlzdFtpXS5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvTGlzdC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkRXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB1cGxvYWRFdmVudEhhbmRsZXIobnVsbCwgaW5kZXgsICdkZWxldGUnLCBudWxsLCAwLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCBpbmZvIG9iamVjdCBhbmQgXCJfaW5mb0xpc3QgPSBbXVwiLCBcIl9pbmZvSW5kZXggPSAwXCJcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBQbHVnaW4gbmFtZSBcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHVwbG9hZEV2ZW50SGFuZGxlciBFdmVudCBoYW5kbGVyIHRvIHByb2Nlc3MgdXBkYXRlZCBmaWxlIGluZm8gKGNyZWF0ZWQgaW4gc2V0SW5mbylcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXNldEluZm86IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCB1cGxvYWRFdmVudEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dFtwbHVnaW5OYW1lXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkRXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvTGlzdCA9IGNvbnRleHQuX2luZm9MaXN0O1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGluZm9MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkRXZlbnRIYW5kbGVyKG51bGwsIGluZm9MaXN0W2ldLmluZGV4LCAnZGVsZXRlJywgbnVsbCwgMCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuX2luZm9MaXN0ID0gW107XHJcbiAgICAgICAgICAgIGNvbnRleHQuX2luZm9JbmRleCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG5vR2xvYmFsID09PSB0eXBlb2YgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX01PRFVMRVMpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9NT0RVTEVTJywge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZToge31cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9NT0RVTEVTLCAnZmlsZU1hbmFnZXInLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgdmFsdWU6IGZpbGVNYW5hZ2VyXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZpbGVNYW5hZ2VyO1xyXG59KSk7Il0sInNvdXJjZVJvb3QiOiIifQ==